     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.007
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;                       clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   317                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   318                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   319                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   320                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   321                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       Standards-Based Values
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       ASCII                                                                   EASCII...
   330                                  ;
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   333                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   334                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   335                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   336                                  EASCIISPACE             equ     020h                                            ;space
   337                                  EASCIIUPPERA            equ     041h                                            ;'A'
   338                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   339                                  EASCIILOWERA            equ     061h                                            ;'a'
   340                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   341                                  EASCIITILDE             equ     07Eh                                            ;'~'
   342                                  EASCIICASE              equ     00100000b                                       ;case bit
   343                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;
   346                                  ;       Operating System Values
   347                                  ;
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;
   351                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   352                                  ;
   353                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   354                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   358                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   359                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   360                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   361                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   362                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   363                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   364                                  ;-----------------------------------------------------------------------------------------------------------------------
   365                                  ;       Console Constants                                                       ECON...
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ECONCOLS                equ     80                                              ;columns per row
   368                                  ECONROWS                equ     24                                              ;console rows
   369                                  ECONOIAROW              equ     24                                              ;operator information area row
   370                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   371                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   372                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   373                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   374                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   379                                  EGDTCGA                 equ     020h                                            ;cga video selector
   380                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   381                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   382                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   383                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   384                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   385                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  ;       Keyboard Flags                                                          EKEYF...
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   390                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   391                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   392                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   393                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   394                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   395                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   396                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   397                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   398                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   399                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  ;       Kernel Constants                                                        EKRN...
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   404                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   405                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   406                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;       Local Descriptor Table (LDT) Selectors                                  ESEL...
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  ;       Message Identifiers                                                     EMSG...
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   415                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   416                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   417                                  ;=======================================================================================================================
   418                                  ;
   419                                  ;       Structures
   420                                  ;
   421                                  ;=======================================================================================================================
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;
   424                                  ;       MQUEUE
   425                                  ;
   426                                  ;       The MQUEUE structure maps memory used for a message queue.
   427                                  ;
   428                                  ;-----------------------------------------------------------------------------------------------------------------------
   429                                  struc                   MQUEUE
   430 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   431 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   432 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   433                                  endstruc
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;
   436                                  ;       OSDATA
   437                                  ;
   438                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   439                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   440                                  ;
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  struc                   OSDATA
   443 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   444 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   445 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   446 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   447 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   448 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   449 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   450 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   451 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   452 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   453 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   454 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   455 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   456 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   457 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   458 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   459 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   460 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   461 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   462 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   463 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   464 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   465 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   466 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   467 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   468 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   469 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   470 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   471 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   472 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   473 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   474 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   475 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   476 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   477 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   478 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   479 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   480 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   481 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   482 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   483 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   484 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   485 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   486 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   487 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   488 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   489 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   490 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   491 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   492 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   493 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   494 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   495 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   496 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   497 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   498 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   499 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   500 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   501 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   502 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   503 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   504 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   505 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   506 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   507 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   508 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   509 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   510 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   511 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   512 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   513 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   514 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   515 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   516 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   517 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   518 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   519 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   520 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   521 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   522 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   523 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   524 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   525 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   526 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   527 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   528 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   529 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   530 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   531 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   532 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   533 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   534 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   535 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   536 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   537 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   538 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   539 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   540 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   541 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   542 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   543 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   544                                  ;-----------------------------------------------------------------------------------------------------------------------
   545                                  ;
   546                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   547                                  ;
   548                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   549                                  ;
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551                                  ECONDATA                equ     ($)
   552 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   553 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   554 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   555 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   556 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   557 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   558 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   559 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   560 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   561 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   562 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   563 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   564 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   565 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   566                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   567                                  ;-----------------------------------------------------------------------------------------------------------------------
   568                                  ;
   569                                  ;       End of OS Variables
   570                                  ;
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  endstruc
   573                                  ;-----------------------------------------------------------------------------------------------------------------------
   574                                  ;
   575                                  ;       Macros
   576                                  ;
   577                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   578                                  ;
   579                                  ;-----------------------------------------------------------------------------------------------------------------------
   580                                  %macro                  mint    1
   581                                  _%1                     equ     ($-$$) / EX86DESCLEN
   582                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   583                                  %endmacro
   584                                  %macro                  mtrap   1
   585                                  _%1                     equ     ($-$$) / EX86DESCLEN
   586                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   587                                  %endmacro
   588                                  %macro                  menter  1
   589                                  ?%1                     equ     ($-$$)
   590                                  %endmacro
   591                                  %macro                  tsvce   1
   592                                  e%1                     equ     ($-tsvc)/4
   593                                                          dd      %1
   594                                  %endmacro
   595                                  %ifdef BUILDBOOT
   596                                  ;=======================================================================================================================
   597                                  ;
   598                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   599                                  ;
   600                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   601                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   602                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   603                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   604                                  ;
   605                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   606                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   607                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   608                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   609                                  ;       immediately followed by a disk parameter table.
   610                                  ;
   611                                  ;=======================================================================================================================
   612                                                          cpu     8086                                            ;assume minimal CPU
   613                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   614                                                          bits    16                                              ;16-bit code at power-up
   615                                  %ifdef BUILDPREP
   616                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   617                                  %else
   618 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   619                                  %endif
   620                                  ;-----------------------------------------------------------------------------------------------------------------------
   621                                  ;
   622                                  ;       Disk Parameter Table
   623                                  ;
   624                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   625                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   626                                  ;
   627                                  ;-----------------------------------------------------------------------------------------------------------------------
   628 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   629 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   630 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   631 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   632 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   633 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   634 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   635 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   636 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   637                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   638 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   639 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   640 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   641                                  ;
   642                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   643                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   644                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   645                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   646                                  ;       given several possible starting values for CS:IP.
   647                                  ;
   648                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   649 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   650                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   651 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   652 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   653 00000025 B104                                            mov     cl,4                                            ;shift count
   654 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   655 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   656 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   657                                  ;
   658                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   659                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   660                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   661                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   662                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   663                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   664                                  ;
   665 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   666 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   667 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   668 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   669 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   670                                  ;
   671                                  ;       Our boot addressability is now set up according to the following diagram.
   672                                  ;
   673                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   674                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   675                                  ;                               |  256 = 100h bytes                             |
   676                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   677                                  ;                               |  Boot Sector (vstart=0100h)                   |
   678                                  ;                               |  1 sector = 512 = 200h bytes                  |
   679                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   680                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   681                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   682                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   683                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   684                                  ;                               |  2 sectors = 1024 = 400h bytes
   685                                  ;                       009400  +-----------------------------------------------+ DS:1900
   686                                  ;
   687                                  ;       On entry, DL indicates the drive being booted from.
   688                                  ;
   689 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   690                                  ;
   691                                  ;       Compute directory i/o buffer address.
   692                                  ;
   693 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   694 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   695 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   696 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   697                                  ;
   698                                  ;       Compute segment where os.com will be loaded.
   699                                  ;
   700 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   701 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   702 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   703 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   704                                  ;
   705                                  ;       Set the video mode to 80 column, 25 row, text.
   706                                  ;
   707 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   708 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   709                                  ;
   710                                  ;       Write a message to the console so we know we have our addressability established.
   711                                  ;
   712 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   713 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   714                                  ;
   715                                  ;       Initialize the number of directory sectors to search.
   716                                  ;
   717 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   718 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   719                                  ;
   720                                  ;       Compute number of directory sectors and initialize overhead count.
   721                                  ;
   722 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   723 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   724 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   725 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   726                                  ;
   727                                  ;       Compute directory entries per sector.
   728                                  ;
   729 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   730 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   731 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   732                                  ;
   733                                  ;       Compute first logical directory sector and update overhead count.
   734                                  ;
   735 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   736 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   737 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   738 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   739 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   740 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   741                                  ;
   742                                  ;       Read directory sector.
   743                                  ;
   744 0000008E B001                    .30                     mov     al,1                                            ;sector count
   745 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   746 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   747 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   748                                  ;
   749                                  ;       Setup variables to search this directory sector.
   750                                  ;
   751 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   752 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   753 000000A1 7603                                            jna     .40                                             ;no, continue
   754 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   755 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   756 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   757 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   758                                  ;
   759                                  ;       Loop through directory sectors searching for kernel program.
   760                                  ;
   761 000000B1 56                      .50                     push    si                                              ;save kernel name address
   762 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   763 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   764 000000B6 FC                                              cld                                                     ;forward strings
   765 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   766 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   767 000000BA 5E                                              pop     si                                              ;restore kernel name address
   768 000000BB 7418                                            je      .60                                             ;exit loop if found
   769 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   770 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   771 000000C2 75ED                                            jnz     .50                                             ;next entry
   772                                  ;
   773                                  ;       Repeat search if we are not at the end of the directory.
   774                                  ;
   775 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   776 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   777 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   778 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   779 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   780                                  ;
   781                                  ;       If we find the kernel program in the directory, read the FAT.
   782                                  ;
   783 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   784 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   785 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   786 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   787 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   788 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   789                                  ;
   790                                  ;       Get the starting cluster of the kernel program and target address.
   791                                  ;
   792 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   793 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   794                                  ;
   795                                  ;       Read each program cluster into RAM.
   796                                  ;
   797 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   798 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   799 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   800 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   801 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   802 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   803 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   804 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   805 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   806                                  ;
   807                                  ;       Update buffer pointer for next cluster.
   808                                  ;
   809 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   810 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   811 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   812 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   813 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   814                                  ;
   815                                  ;       Compute next cluster number.
   816                                  ;
   817 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   818 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   819 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   820 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   821 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   822 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   823 00000120 83E701                                          and     di,1                                            ;get low bit
   824 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   825 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   826 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   827                                  ;
   828                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   829                                  ;
   830 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   831 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   832 00000130 B104                                            mov     cl,4                                            ;shift count
   833 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   834 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   835 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   836 0000013A 75B2                                            jne     .70                                             ;no, continue
   837                                  ;
   838                                  ;       Transfer control to the operating system program.
   839                                  ;
   840 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   841 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   842 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   843                                  ;
   844                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   845                                  ;
   846 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   847 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   848 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   849 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   850 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   851 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   852 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   853 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   854 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   855 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   856                                  ;
   857                                  ;       Try maxtries times to read sector.
   858                                  ;
   859 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   860 00000160 53                      .10                     push    bx                                              ;save buffer address
   861 00000161 51                                              push    cx                                              ;save retry count
   862 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   863 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   864 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   865 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   866 0000016F 59                                              pop     cx                                              ;restore retry count
   867 00000170 5B                                              pop     bx                                              ;restore buffer address
   868 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   869 00000173 E2EB                                            loop    .10                                             ;retry
   870                                  ;
   871                                  ;       Handle disk error: convert to ASCII and store in error string.
   872                                  ;
   873 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   874 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   875 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   876 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   877 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   878 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   879 00000183 7203                                            jb      .20                                             ;continue if numeral
   880 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   881 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   882 0000018A 7203                                            jb      .30                                             ;continue if numeral
   883 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   884 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   885 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   886 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   887                                  ;
   888                                  ;       Wait for a key press.
   889                                  ;
   890 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   891 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   892 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   893 0000019E FB                                              sti                                                     ;enable maskable interrupts
   894 0000019F F4                                              hlt                                                     ;wait for interrupt
   895 000001A0 EBF6                                            jmp     .10                                             ;repeat
   896                                  ;
   897                                  ;       Reset the system.
   898                                  ;
   899 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   900 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   901 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   902 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   903 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   904                                  ;
   905                                  ;       Display text message.
   906                                  ;
   907 000001AA FC                      BootPrint               cld                                                     ;forward strings
   908 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   909 000001AC 84C0                                            test    al,al                                           ;end of string?
   910 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   911 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   912 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   913 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   914 000001B6 C3                      BootReturn              ret                                                     ;return
   915                                  ;-----------------------------------------------------------------------------------------------------------------------
   916                                  ;
   917                                  ;       Constants
   918                                  ;
   919                                  ;-----------------------------------------------------------------------------------------------------------------------
   920 000001B7 90                                              align   2
   921 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   922 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   922 000001C3 4F4D               
   923 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   923 000001CE 530D0A00           
   924 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   924 000001DB 7220               
   925 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   926 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   926 000001E9 6700               
   927                                  ;-----------------------------------------------------------------------------------------------------------------------
   928                                  ;
   929                                  ;       Work Areas
   930                                  ;
   931                                  ;-----------------------------------------------------------------------------------------------------------------------
   932 000001EB 90                                              align   2
   933 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   934 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   935 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   936 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   937 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   938                                  wwReadCountCommand      equ     $                                               ;read count and command
   939 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   940 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   941                                  wwDriveHead             equ     $                                               ;drive, head (word)
   942 000001F8 00                      wbDrive                 db      0                                               ;drive
   943 000001F9 00                      wbHead                  db      0                                               ;head
   944                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   945 000001FA 00                                              db      0                                               ;sector
   946 000001FB 00                      wbTrack                 db      0                                               ;track
   947 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   948 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   949                                  %endif
   950                                  %ifdef BUILDPREP
   951                                  ;=======================================================================================================================
   952                                  ;
   953                                  ;       Diskette Preparation Code
   954                                  ;
   955                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   956                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   957                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   958                                  ;
   959                                  ;=======================================================================================================================
   960                                  ;
   961                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   962                                  ;
   963                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   964                                                          call    BootPrint                                       ;display message
   965                                  ;
   966                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   967                                  ;
   968                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   969                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   970                                                          jnz     .20                                             ;continue if key pressed
   971                                                          sti                                                     ;enable interrupts
   972                                                          hlt                                                     ;wait for interrupt
   973                                                          jmp     .10                                             ;repeat
   974                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   975                                                          je      .30                                             ;yes, branch
   976                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   977                                                          jne     .10                                             ;no, repeat
   978                                                          jmp     .120                                            ;yes, exit program
   979                                  ;
   980                                  ;       Display writing-sector message and patch the JMP instruction.
   981                                  ;
   982                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   983                                                          call    BootPrint                                       ;display message
   984                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   985                                                          mov     ax,01Bh                                         ;address past disk parameter table
   986                                                          mov     [bx],ax                                         ;update the JMP instruction
   987                                  ;
   988                                  ;       Try to read the boot sector.
   989                                  ;
   990                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   991                                  .40                     push    cx                                              ;save remaining tries
   992                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   993                                                          mov     dx,0                                            ;head zero, drive zero
   994                                                          mov     cx,1                                            ;track zero, sector one
   995                                                          mov     al,1                                            ;one sector
   996                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   997                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   998                                                          pop     cx                                              ;restore remaining retries
   999                                                          jnc     .50                                             ;skip ahead if successful
  1000                                                          loop    .40                                             ;try again
  1001                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1002                                                          jmp     .70                                             ;branch to error routine
  1003                                  ;
  1004                                  ;       Copy diskette parms from input buffer to output buffer.
  1005                                  ;
  1006                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1007                                                          add     si,11                                           ;skip over JMP and system ID
  1008                                                          mov     di,Boot                                         ;output buffer address
  1009                                                          add     di,11                                           ;skip over JMP and system ID
  1010                                                          mov     cx,19                                           ;length of diskette parameters
  1011                                                          cld                                                     ;forward string copies
  1012                                                          rep     movsb                                           ;copy diskette parameters
  1013                                  ;
  1014                                  ;       Try to write boot sector to diskette.
  1015                                  ;
  1016                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1017                                  .60                     push    cx                                              ;save remaining tries
  1018                                                          mov     bx,Boot                                         ;output buffer address
  1019                                                          mov     dx,0                                            ;head zero, drive zero
  1020                                                          mov     cx,1                                            ;track zero, sector one
  1021                                                          mov     al,1                                            ;one sector
  1022                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1023                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1024                                                          pop     cx                                              ;restore remaining retries
  1025                                                          jnc     .100                                            ;skip ahead if successful
  1026                                                          loop    .60                                             ;try again
  1027                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1028                                  ;
  1029                                  ;       Convert the error code to ASCII and display the error message.
  1030                                  ;
  1031                                  .70                     push    ax                                              ;save error code
  1032                                                          mov     al,ah                                           ;copy error code
  1033                                                          mov     ah,0                                            ;AX = error code
  1034                                                          mov     dl,10h                                          ;hexadecimal divisor
  1035                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1036                                                          or      ax,03030h                                       ;add ASCII zone digits
  1037                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1038                                                          jb      .80                                             ;yes, continue
  1039                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1040                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1041                                                          jb      .90                                             ;yes, continue
  1042                                                          add     al,7                                            ;no, make ASCII
  1043                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1044                                                          call    BootPrint                                       ;write error message
  1045                                                          pop     ax                                              ;restore error code
  1046                                  ;
  1047                                  ;       Display the completion message.
  1048                                  ;
  1049                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1050                                                          mov     al,ah                                           ;BIOS return code
  1051                                                          cmp     al,0                                            ;success?
  1052                                                          je      .110                                            ;yes, continue
  1053                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1054                                                          cmp     al,1                                            ;disk parameter error?
  1055                                                          je      .110                                            ;yes, continue
  1056                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1057                                                          cmp     al,2                                            ;address mark not found?
  1058                                                          je      .110                                            ;yes, continue
  1059                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1060                                                          cmp     al,3                                            ;protected disk?
  1061                                                          je      .110                                            ;yes, continue
  1062                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1063                                                          cmp     al,6                                            ;diskette removed?
  1064                                                          je      .110                                            ;yes, continue
  1065                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1066                                                          cmp     al,80H                                          ;drive timed out?
  1067                                                          je      .110                                            ;yes, continue
  1068                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1069                                  .110                    call    BootPrint                                       ;display result message
  1070                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1071                                                          int     021h                                            ;terminate DOS program
  1072                                                          ret                                                     ;return (should not execute)
  1073                                  ;-----------------------------------------------------------------------------------------------------------------------
  1074                                  ;
  1075                                  ;       Diskette Preparation Messages
  1076                                  ;
  1077                                  ;-----------------------------------------------------------------------------------------------------------------------
  1078                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1079                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1080                                                          db      13,10
  1081                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1082                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1083                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1084                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1085                                                          db      13,10,0
  1086                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1087                                                          db      13,10,0
  1088                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1089                                                          db      13,10,0
  1090                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1091                                                          db      13,10,0
  1092                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1093                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1094                                                          db      13,10,0
  1095                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1096                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1097                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1098                                                          db      13,10,"and retry."
  1099                                                          db      13,10,0
  1100                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1101                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1102                                                          db      13,10,"using another diskette."
  1103                                                          db      13,10,0
  1104                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1105                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1106                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1107                                                          db      13,10,0
  1108                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1109                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1110                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1111                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1112                                                          db      13,10,"is properly inserted in the diskette drive."
  1113                                                          db      13,10,0
  1114                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1115                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1116                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1117                                                          db      13,10,0
  1118                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1119                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1120                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1121                                                          db      13,10,0
  1122                                  wcPrepInBuf             equ     $
  1123                                  %endif
  1124                                  %ifdef BUILDDISK
  1125                                  ;=======================================================================================================================
  1126                                  ;
  1127                                  ;       File Allocation Tables
  1128                                  ;
  1129                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1130                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1131                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1132                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1133                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1134                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1135                                  ;       the last cluster in the chain.
  1136                                  ;
  1137                                  ;       Every three bytes encode two FAT entries as follows:
  1138                                  ;
  1139                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1140                                  ;
  1141                                  ;=======================================================================================================================
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  ;
  1144                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1145                                  ;
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                  section                 fat1                                                    ;first copy of FAT
  1148                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1149                                                          db      005h,060h,000h, 007h,080h,000h
  1150                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1151                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1152                                                          db      011h,020h,001h, 013h,040h,001h
  1153                                                          db      015h,060h,001h, 017h,080h,001h
  1154                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1155                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1156                                                          db      021h,020h,002h, 023h,040h,002h
  1157                                                          db      025h,060h,002h, 027h,080h,002h
  1158                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1159                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1160                                  ;-----------------------------------------------------------------------------------------------------------------------
  1161                                  ;
  1162                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1163                                  ;
  1164                                  ;-----------------------------------------------------------------------------------------------------------------------
  1165                                  section                 fat2                                                    ;second copy of FAT
  1166                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1167                                                          db      005h,060h,000h, 007h,080h,000h
  1168                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1169                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1170                                                          db      011h,020h,001h, 013h,040h,001h
  1171                                                          db      015h,060h,001h, 017h,080h,001h
  1172                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1173                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1174                                                          db      021h,020h,002h, 023h,040h,002h
  1175                                                          db      025h,060h,002h, 027h,080h,002h
  1176                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1177                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1178                                  ;-----------------------------------------------------------------------------------------------------------------------
  1179                                  ;
  1180                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1181                                  ;
  1182                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1183                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1184                                  ;       copy.
  1185                                  ;
  1186                                  ;-----------------------------------------------------------------------------------------------------------------------
  1187                                  section                 dir                                                     ;diskette directory
  1188                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1189                                                          db      020h                                            ;attribute (archive bit set)
  1190                                                          times   10 db 0                                         ;unused
  1191                                                          dw      0h                                              ;time
  1192                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1193                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1194                                                          dw      2                                               ;first cluster
  1195                                                          dd      05400h                                          ;file size
  1196                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1197                                  %endif
  1198                                  %ifdef BUILDCOM
  1199                                  ;=======================================================================================================================
  1200                                  ;
  1201                                  ;       OS.COM
  1202                                  ;
  1203                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1204                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1205                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1206                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1207                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1208                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1209                                  ;
  1210                                  ;       Our loader addressability is set up according to the following diagram.
  1211                                  ;
  1212                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1213                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1214                                  ;                               |  256 = 100h bytes                             |
  1215                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1216                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1217                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1218                                  ;                       007e00  +-----------------------------------------------+
  1219                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1220                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1221                                  ;                               |                                               |
  1222                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1223                                  ;                               |                                               |
  1224                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1225                                  ;                               |  Loader Code                                  |
  1226                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1227                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1228                                  ;
  1229                                  ;=======================================================================================================================
  1230                                  ;-----------------------------------------------------------------------------------------------------------------------
  1231                                  ;
  1232                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1233                                  ;
  1234                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1235                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1236                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1237                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1238                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1239                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1240                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1241                                  ;       registers.
  1242                                  ;
  1243                                  ;-----------------------------------------------------------------------------------------------------------------------
  1244                                                          cpu     8086                                            ;assume minimal CPU
  1245                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1246                                                          bits    16                                              ;this is 16-bit code
  1247                                  Loader                  push    cs                                              ;use the code segment
  1248                                                          pop     ds                                              ;...as our data segment
  1249                                                          push    cs                                              ;use the code segment
  1250                                                          pop     es                                              ;...as our extra segment
  1251                                  ;
  1252                                  ;       Write a message to the console so we know we have our addressability established.
  1253                                  ;
  1254                                                          mov     si,czStartingMsg                                ;starting message
  1255                                                          call    PutTTYString                                    ;display loader message
  1256                                  ;
  1257                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1258                                  ;
  1259                                                          call    GetCPUType                                      ;AL = cpu type
  1260                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1261                                                          cmp     al,3                                            ;80386+?
  1262                                                          jb      LoaderExit                                      ;no, exit with error message
  1263                                                          cpu     386                                             ;allow 80386 instructions
  1264                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1265                                                          call    PutTTYString                                    ;display message
  1266                                  ;
  1267                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1268                                  ;
  1269                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1270                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1271                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1272                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1273                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1274                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1275                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1276                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1277                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1278                                                          call    PutTTYString                                    ;display message
  1279                                  ;
  1280                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1281                                  ;
  1282                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1283                                                          pop     es                                              ;... as target segment
  1284                                                          xor     di,di                                           ;ES:DI = target address
  1285                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1286                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1287                                                          cld                                                     ;forward strings
  1288                                                          rep     movsb                                           ;copy kernel image
  1289                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1290                                                          call    PutTTYString                                    ;display message
  1291                                  ;
  1292                                  ;       Switch to protected mode.
  1293                                  ;
  1294                                                          xor     si,si                                           ;ES:SI = gdt addr
  1295                                                          mov     ss,si                                           ;protected mode ss
  1296                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1297                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1298                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1299                                                          mov     dx,001Fh                                        ;outer delay loop count
  1300                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1301                                                          loop    $                                               ;wait out pending interrupts
  1302                                                          dec     dx                                              ;restore outer loop count
  1303                                                          jnz     .10                                             ;continue outer loop
  1304                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1305                                  ;
  1306                                  ;       Enable hardware and maskable interrupts.
  1307                                  ;
  1308                                                          xor     al,al                                           ;enable all registers code
  1309                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1310                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1311                                                          sti                                                     ;enable maskable interrupts
  1312                                  ;
  1313                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1314                                  ;
  1315                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1316                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1317                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;       Routine:        LoaderExit
  1321                                  ;
  1322                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1323                                  ;
  1324                                  ;       In:             DS:SI   string address
  1325                                  ;
  1326                                  ;-----------------------------------------------------------------------------------------------------------------------
  1327                                  LoaderExit              call    PutTTYString                                    ;display error message
  1328                                  ;
  1329                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1330                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1331                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1332                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1333                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1334                                  ;
  1335                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1336                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1337                                                          jnz     .40                                             ;exit if key pressed
  1338                                                          sti                                                     ;enable maskable interrupts
  1339                                                          hlt                                                     ;wait for interrupt
  1340                                                          jmp     .30                                             ;repeat until keypress
  1341                                  ;
  1342                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1343                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1344                                  ;       HLT until the system resets.
  1345                                  ;
  1346                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1347                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1348                                  .50                     sti                                                     ;enable maskable interrupts
  1349                                                          hlt                                                     ;stop until reset, int, nmi
  1350                                                          jmp     .50                                             ;loop until restart kicks in
  1351                                  ;-----------------------------------------------------------------------------------------------------------------------
  1352                                  ;
  1353                                  ;       Routine:        GetCPUType
  1354                                  ;
  1355                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1356                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1357                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1358                                  ;
  1359                                  ;       Out:            AX      0 = 808x, v20, etc.
  1360                                  ;                               1 = 80186
  1361                                  ;                               2 = 80286
  1362                                  ;                               3 = 80386
  1363                                  ;
  1364                                  ;-----------------------------------------------------------------------------------------------------------------------
  1365                                  GetCPUType              mov     al,1                                            ;AL = 1
  1366                                                          mov     cl,32                                           ;shift count
  1367                                                          shr     al,cl                                           ;try a 32-bit shift
  1368                                                          or      al,al                                           ;did the shift happen?
  1369                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1370                                                          cpu     186
  1371                                                          push    sp                                              ;save stack pointer
  1372                                                          pop     cx                                              ;...into cx
  1373                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1374                                                          jne     .10                                             ;yes, cpu is 80186
  1375                                                          cpu     286
  1376                                                          inc     ax                                              ;AX = 2
  1377                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1378                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1379                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1380                                                          jz      .10                                             ;yes, cpu is 80286
  1381                                                          inc     ax                                              ;AX = 3
  1382                                  .10                     ret                                                     ;return
  1383                                  ;-----------------------------------------------------------------------------------------------------------------------
  1384                                  ;
  1385                                  ;       Routine:        PutTTYString
  1386                                  ;
  1387                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1388                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1389                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1390                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1391                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1392                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1393                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1394                                  ;                       to LODSB is not needed.
  1395                                  ;
  1396                                  ;       In:             DS:SI   address of string
  1397                                  ;
  1398                                  ;       Out:            DF      0
  1399                                  ;                       ZF      1
  1400                                  ;                       AL      0
  1401                                  ;
  1402                                  ;-----------------------------------------------------------------------------------------------------------------------
  1403                                  PutTTYString            cld                                                     ;forward strings
  1404                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1405                                                          test    al,al                                           ;end of string?
  1406                                                          jz      .20                                             ;... yes, exit our loop
  1407                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1408                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1409                                                          jmp     .10                                             ;repeat until done
  1410                                  .20                     ret                                                     ;return
  1411                                  ;-----------------------------------------------------------------------------------------------------------------------
  1412                                  ;
  1413                                  ;       Loader Data
  1414                                  ;
  1415                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1416                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1417                                  ;
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                                          align   2
  1420                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1421                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1422                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1423                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1424                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1425                                                          db      "Please press any key to restart the computer.",13,10,0
  1426                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1427                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1428                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1429                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1430                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1431                                  ;=======================================================================================================================
  1432                                  ;
  1433                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1434                                  ;
  1435                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1436                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1437                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1438                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1439                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1440                                  ;
  1441                                  ;=======================================================================================================================
  1442                                  ;=======================================================================================================================
  1443                                  ;
  1444                                  ;       Kernel Tables
  1445                                  ;
  1446                                  ;=======================================================================================================================
  1447                                  ;-----------------------------------------------------------------------------------------------------------------------
  1448                                  ;
  1449                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1450                                  ;
  1451                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1452                                  ;       first descriptor must be all nulls.
  1453                                  ;
  1454                                  ;       6   5         4         3         2         1         0
  1455                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1456                                  ;       ----------------------------------------------------------------
  1457                                  ;       h......hffffmmmma......ab......................bn..............n
  1458                                  ;       00000000                        all areas have base addresses below 2^24
  1459                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1460                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1461                                  ;                   1001                present, ring-0, selector
  1462                                  ;
  1463                                  ;       h...h   hi-order base address (bits 24-31)
  1464                                  ;       ffff    flags
  1465                                  ;       mmmm    hi-order limit (bits 16-19)
  1466                                  ;       a...a   access
  1467                                  ;       b...b   lo-order base address (bits 0-23)
  1468                                  ;       n...n   lo-order limit (bits 0-15)
  1469                                  ;
  1470                                  ;-----------------------------------------------------------------------------------------------------------------------
  1471                                  section                 gdt                                                     ;global descriptor table
  1472                                                          dq      0000000000000000h                               ;00 required null selector
  1473                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1474                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1475                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1476                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1477                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1478                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1479                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1480                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1481                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1482                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1483                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1484                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1485                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1486                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1487                                  ;-----------------------------------------------------------------------------------------------------------------------
  1488                                  ;
  1489                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1490                                  ;
  1491                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1492                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1493                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1494                                  ;
  1495                                  ;       6   5         4         3         2         1         0
  1496                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1497                                  ;       ----------------------------------------------------------------
  1498                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1499                                  ;
  1500                                  ;       h...h   high-order offset (bits 16-31)
  1501                                  ;       P       present (0=unused interrupt)
  1502                                  ;       zz      descriptor privilege level
  1503                                  ;       S       storage segment (must be zero for IDT)
  1504                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1505                                  ;       S...S   handling code selector in GDT
  1506                                  ;       l...l   lo-order offset (bits 0-15)
  1507                                  ;
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509                                  section                 idt                                                     ;interrupt descriptor table
  1510                                                          mint    dividebyzero                                    ;00 divide by zero
  1511                                                          mint    singlestep                                      ;01 single step
  1512                                                          mint    nmi                                             ;02 non-maskable
  1513                                                          mint    break                                           ;03 break
  1514                                                          mint    into                                            ;04 into
  1515                                                          mint    bounds                                          ;05 bounds
  1516                                                          mint    badopcode                                       ;06 bad op code
  1517                                                          mint    nocoproc                                        ;07 no coprocessor
  1518                                                          mint    doublefault                                     ;08 double-fault
  1519                                                          mint    operand                                         ;09 operand
  1520                                                          mint    badtss                                          ;0a bad TSS
  1521                                                          mint    notpresent                                      ;0b not-present
  1522                                                          mint    stacklimit                                      ;0c stack limit
  1523                                                          mint    protection                                      ;0d general protection fault
  1524                                                          mint    int14                                           ;0e (reserved)
  1525                                                          mint    int15                                           ;0f (reserved)
  1526                                                          mint    coproccalc                                      ;10 (reserved)
  1527                                                          mint    int17                                           ;11 (reserved)
  1528                                                          mint    int18                                           ;12 (reserved)
  1529                                                          mint    int19                                           ;13 (reserved)
  1530                                                          mint    int20                                           ;14 (reserved)
  1531                                                          mint    int21                                           ;15 (reserved)
  1532                                                          mint    int22                                           ;16 (reserved)
  1533                                                          mint    int23                                           ;17 (reserved)
  1534                                                          mint    int24                                           ;18 (reserved)
  1535                                                          mint    int25                                           ;19 (reserved)
  1536                                                          mint    int26                                           ;1a (reserved)
  1537                                                          mint    int27                                           ;1b (reserved)
  1538                                                          mint    int28                                           ;1c (reserved)
  1539                                                          mint    int29                                           ;1d (reserved)
  1540                                                          mint    int30                                           ;1e (reserved)
  1541                                                          mint    int31                                           ;1f (reserved)
  1542                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1543                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1544                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1545                                                          mtrap   com2                                            ;23 IRQ3 com2
  1546                                                          mtrap   com1                                            ;24 IRQ4 com1
  1547                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1548                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1549                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1550                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1551                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1552                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1553                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1554                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1555                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1556                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1557                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1558                                                          mtrap   svc                                             ;30 OS services
  1559                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1560                                  ;=======================================================================================================================
  1561                                  ;
  1562                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1563                                  ;
  1564                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1565                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1566                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1567                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1568                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1569                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1570                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1571                                  ;
  1572                                  ;=======================================================================================================================
  1573                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1574                                                          cpu     386                                             ;allow 80386 instructions
  1575                                                          bits    32                                              ;this is 32-bit code
  1576                                  ;=======================================================================================================================
  1577                                  ;
  1578                                  ;       CPU Interrupt Handlers
  1579                                  ;
  1580                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1581                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1582                                  ;
  1583                                  ;=======================================================================================================================
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;       INT0    Divide By Zero
  1587                                  ;
  1588                                  ;-----------------------------------------------------------------------------------------------------------------------
  1589                                                          menter  dividebyzero                                    ;divide by zero
  1590                                                          push    0                                               ;store interrupt nbr
  1591                                                          push    czIntDivideByZero                               ;store message offset
  1592                                                          jmp     ReportInterrupt                                 ;report interrupt
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                  ;
  1595                                  ;       INT1    Single Step
  1596                                  ;
  1597                                  ;-----------------------------------------------------------------------------------------------------------------------
  1598                                                          menter  singlestep                                      ;single step
  1599                                                          push    1                                               ;store interrupt nbr
  1600                                                          push    czIntSingleStep                                 ;store message offset
  1601                                                          jmp     ReportInterrupt                                 ;report interrupt
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                  ;
  1604                                  ;       INT2    Non-Maskable Interrupt
  1605                                  ;
  1606                                  ;-----------------------------------------------------------------------------------------------------------------------
  1607                                                          menter  nmi                                             ;non-maskable
  1608                                                          push    2                                               ;store interrupt nbr
  1609                                                          push    czIntNonMaskable                                ;store message offset
  1610                                                          jmp     ReportInterrupt                                 ;report interrupt
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  ;
  1613                                  ;       INT3    Break
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                                          menter  break                                           ;break
  1617                                                          push    3                                               ;store interrupt nbr
  1618                                                          push    czIntBreak                                      ;store message offset
  1619                                                          jmp     ReportInterrupt                                 ;report interrupt
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;
  1622                                  ;       INT4    Into
  1623                                  ;
  1624                                  ;-----------------------------------------------------------------------------------------------------------------------
  1625                                                          menter  into                                            ;into
  1626                                                          push    4                                               ;store interrupt nbr
  1627                                                          push    czIntInto                                       ;store message offset
  1628                                                          jmp     ReportInterrupt                                 ;report interrupt
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  ;
  1631                                  ;       INT5    Bounds
  1632                                  ;
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                                          menter  bounds                                          ;bounds
  1635                                                          push    5                                               ;store interrupt nbr
  1636                                                          push    czIntBounds                                     ;store message offset
  1637                                                          jmp     ReportInterrupt                                 ;report interrupt
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                  ;
  1640                                  ;       INT6    Bad Operation Code
  1641                                  ;
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                                          menter  badopcode                                       ;bad opcode interrupt
  1644                                                          push    6                                               ;store interrupt nbr
  1645                                                          push    czIntBadOpCode                                  ;store message offset
  1646                                                          jmp     ReportInterrupt                                 ;report interrupt
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                  ;
  1649                                  ;       INT7    No Coprocessor
  1650                                  ;
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1653                                                          push    7                                               ;store interrupt nbr
  1654                                                          push    czIntNoCoprocessor                              ;store message offset
  1655                                                          jmp     ReportInterrupt                                 ;report interrupt
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                  ;
  1658                                  ;       INT8    Double Fault
  1659                                  ;
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                                          menter  doublefault                                     ;doublefault interrupt
  1662                                                          push    8                                               ;store interrupt nbr
  1663                                                          push    czIntDoubleFault                                ;store message offset
  1664                                                          jmp     ReportInterrupt                                 ;report interrupt
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                  ;
  1667                                  ;       INT9    Operand
  1668                                  ;
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                                          menter  operand                                         ;operand interrupt
  1671                                                          push    9                                               ;store interrupt nbr
  1672                                                          push    czIntOperand                                    ;store message offset
  1673                                                          jmp     ReportInterrupt                                 ;report interrupt
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  ;
  1676                                  ;       INT10   Bad Task State Segment
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                                          menter  badtss                                          ;bad TSS interrupt
  1680                                                          push    10                                              ;store interrupt nbr
  1681                                                          push    czIntBadTSS                                     ;store message offset
  1682                                                          jmp     ReportInterrupt                                 ;report interrupt
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                  ;
  1685                                  ;       INT11   Not Present
  1686                                  ;
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                                          menter  notpresent                                      ;not present interrupt
  1689                                                          push    11                                              ;store interrupt nbr
  1690                                                          push    czIntNotPresent                                 ;store message offset
  1691                                                          jmp     ReportInterrupt                                 ;report interrupt
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                  ;
  1694                                  ;       INT12   Stack Limit
  1695                                  ;
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                                          menter  stacklimit                                      ;stack limit interrupt
  1698                                                          push    12                                              ;store interrupt nbr
  1699                                                          push    czIntStackLimit                                 ;store message offset
  1700                                                          jmp     ReportInterrupt                                 ;report interrupt
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                  ;
  1703                                  ;       INT13   General Protection Fault
  1704                                  ;
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                                          menter  protection                                      ;protection fault interrupt
  1707                                                          push    13                                              ;store interrupt nbr
  1708                                                          push    czIntProtection                                 ;store message offset
  1709                                                          jmp     ReportInterrupt                                 ;report interrupt
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;       INT14   Reserved
  1713                                  ;
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                                          menter  int14                                           ;(reserved)
  1716                                                          push    14                                              ;store interrupt nbr
  1717                                                          push    czIntReserved                                   ;store message offset
  1718                                                          jmp     ReportInterrupt                                 ;report interrupt
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                  ;
  1721                                  ;       INT15   Reserved
  1722                                  ;
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                                          menter  int15                                           ;(reserved)
  1725                                                          push    15                                              ;store interrupt nbr
  1726                                                          push    czIntReserved                                   ;store message offset
  1727                                                          jmp     ReportInterrupt                                 ;report interrupt
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                  ;
  1730                                  ;       INT16   Coprocessor Calculation
  1731                                  ;
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                                          menter  coproccalc                                      ;coprocessor calculation
  1734                                                          push    16                                              ;store interrupt nbr
  1735                                                          push    czIntCoprocessorCalc                            ;store message offset
  1736                                                          jmp     ReportInterrupt                                 ;report interrupt
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                  ;
  1739                                  ;       INT17   Reserved
  1740                                  ;
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                                          menter  int17                                           ;(reserved)
  1743                                                          push    17                                              ;store interrupt nbr
  1744                                                          push    czIntReserved                                   ;store message offset
  1745                                                          jmp     ReportInterrupt                                 ;report interrupt
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                  ;
  1748                                  ;       INT18   Reserved
  1749                                  ;
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                                          menter  int18                                           ;(reserved)
  1752                                                          push    18                                              ;store interrupt nbr
  1753                                                          push    czIntReserved                                   ;store message offset
  1754                                                          jmp     ReportInterrupt                                 ;report interrupt
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                  ;
  1757                                  ;       INT19   Reserved
  1758                                  ;
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                                          menter  int19                                           ;(reserved)
  1761                                                          push    19                                              ;store interrupt nbr
  1762                                                          push    czIntReserved                                   ;store message offset
  1763                                                          jmp     ReportInterrupt                                 ;report interrupt
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                  ;
  1766                                  ;       INT20   Reserved
  1767                                  ;
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                                          menter  int20                                           ;(reserved)
  1770                                                          push    20                                              ;store interrupt nbr
  1771                                                          push    czIntReserved                                   ;store message offset
  1772                                                          jmp     ReportInterrupt                                 ;report interrupt
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;       INT21   Reserved
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                                          menter  int21                                           ;(reserved)
  1779                                                          push    21                                              ;store interrupt nbr
  1780                                                          push    czIntReserved                                   ;store message offset
  1781                                                          jmp     ReportInterrupt                                 ;report interrupt
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;       INT22   Reserved
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                                          menter  int22                                           ;(reserved)
  1788                                                          push    22                                              ;store interrupt nbr
  1789                                                          push    czIntReserved                                   ;store message offset
  1790                                                          jmp     ReportInterrupt                                 ;report interrupt
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;       INT23   Reserved
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                                          menter  int23                                           ;(reserved)
  1797                                                          push    23                                              ;store interrupt nbr
  1798                                                          push    czIntReserved                                   ;store message offset
  1799                                                          jmp     ReportInterrupt                                 ;report interrupt
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;       INT24   Reserved
  1803                                  ;
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                                          menter  int24                                           ;(reserved)
  1806                                                          push    24                                              ;store interrupt nbr
  1807                                                          push    czIntReserved                                   ;store message offset
  1808                                                          jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT25   Reserved
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  int25                                           ;(reserved)
  1815                                                          push    25                                              ;store interrupt nbr
  1816                                                          push    czIntReserved                                   ;store message offset
  1817                                                          jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT26   Reserved
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  int26                                           ;(reserved)
  1824                                                          push    26                                              ;store interrupt nbr
  1825                                                          push    czIntReserved                                   ;store message offset
  1826                                                          jmp     ReportInterrupt                                 ;report interrupt
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       INT27   Reserved
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                                          menter  int27                                           ;(reserved)
  1833                                                          push    27                                              ;store interrupt nbr
  1834                                                          push    czIntReserved                                   ;store message offset
  1835                                                          jmp     ReportInterrupt                                 ;report interrupt
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;       INT28   Reserved
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                                          menter  int28                                           ;(reserved)
  1842                                                          push    28                                              ;store interrupt nbr
  1843                                                          push    czIntReserved                                   ;store message offset
  1844                                                          jmp     ReportInterrupt                                 ;report interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;       INT29   Reserved
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                                          menter  int29                                           ;(reserved)
  1851                                                          push    29                                              ;store interrupt nbr
  1852                                                          push    czIntReserved                                   ;store message offset
  1853                                                          jmp     ReportInterrupt                                 ;report interrupt
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;       INT30   Reserved
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                                          menter  int30                                           ;(reserved)
  1860                                                          push    30                                              ;store interrupt nbr
  1861                                                          push    czIntReserved                                   ;store message offset
  1862                                                          jmp     ReportInterrupt                                 ;report interrupt
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;       INT31   Reserved
  1866                                  ;
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                                          menter  int31                                           ;(reserved)
  1869                                                          push    31                                              ;store interrupt nbr
  1870                                                          push    czIntReserved                                   ;store message offset
  1871                                                          jmp     ReportInterrupt                                 ;report interrupt
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  ;
  1874                                  ;       Routine:        ReportInterrupt
  1875                                  ;
  1876                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1877                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1878                                  ;
  1879                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1880                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1881                                  ;
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ReportInterrupt         pop     eax                                             ;error message address
  1884                                                          pop     eax                                             ;interrupt number
  1885                                                          iretd                                                   ;return
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       Processor Interrupt Name Strings
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  czIntDivideByZero       db      "Division by zero",0
  1892                                  czIntSingleStep         db      "Single step",0
  1893                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1894                                  czIntBreak              db      "Break",0
  1895                                  czIntInto               db      "Into",0
  1896                                  czIntBounds             db      "Bounds",0
  1897                                  czIntBadOpCode          db      "Bad Operation Code",0
  1898                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1899                                  czIntDoubleFault        db      "Double Fault",0
  1900                                  czIntOperand            db      "Operand",0
  1901                                  czIntBadTSS             db      "Bad Task State Segment",0
  1902                                  czIntNotPresent         db      "Not Present",0
  1903                                  czIntStackLimit         db      "Stack Limit",0
  1904                                  czIntProtection         db      "General Protection Fault",0
  1905                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1906                                  czIntReserved           db      "Reserved",0
  1907                                  ;=======================================================================================================================
  1908                                  ;
  1909                                  ;       Hardware Device Interupts
  1910                                  ;
  1911                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1912                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1913                                  ;       (BX=2028h).
  1914                                  ;
  1915                                  ;=======================================================================================================================
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                  ;
  1918                                  ;       IRQ0    Clock Tick Interrupt
  1919                                  ;
  1920                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1921                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1922                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1923                                  ;
  1924                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1925                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1926                                  ;
  1927                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1928                                  ;       zero, the floppy disk motors are turned off.
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  clocktick                                       ;clock tick interrupt
  1932                                                          push    eax                                             ;save non-volatile regs
  1933                                                          push    edx                                             ;
  1934                                                          push    ds                                              ;
  1935                                  ;
  1936                                  ;       Update the clock tick count and the elapsed days as needed.
  1937                                  ;
  1938                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1939                                                          pop     ds                                              ;... into data segment register
  1940                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1941                                                          inc     eax                                             ;increment clock ticks
  1942                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1943                                                          jb      irq0.10                                         ;no, skip ahead
  1944                                                          inc     byte [wbClockDays]                              ;increment clock days
  1945                                                          xor     eax,eax                                         ;reset clock ticks
  1946                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1947                                  ;
  1948                                  ;       Decrement floppy disk motor timeout.
  1949                                  ;
  1950                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1951                                                          je      irq0.20                                         ;yes, skip ahead
  1952                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1953                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1954                                  ;
  1955                                  ;       Turn off the floppy disk motor if appropriate.
  1956                                  ;
  1957                                                          sti                                                     ;enable maskable interrupts
  1958                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1959                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1960                                                          in      al,dx                                           ;FDC main status byte
  1961                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1962                                                          jnz     irq0.15                                         ;wait while busy
  1963                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1964                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1965                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1966                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1967                                                          out     dx,al                                           ;turn motor off
  1968                                  ;
  1969                                  ;       Signal the end of the hardware interrupt.
  1970                                  ;
  1971                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1972                                  ;
  1973                                  ;       Restore and return.
  1974                                  ;
  1975                                                          pop     ds                                              ;restore modified regs
  1976                                                          pop     edx                                             ;
  1977                                                          pop     eax                                             ;
  1978                                                          iretd                                                   ;return
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ;
  1981                                  ;       IRQ1    Keyboard Interrupt
  1982                                  ;
  1983                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1984                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1985                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1986                                  ;       ALL modified registers upon return.
  1987                                  ;
  1988                                  ;-----------------------------------------------------------------------------------------------------------------------
  1989                                                          menter  keyboard                                        ;keyboard interrrupt
  1990                                                          push    eax                                             ;save non-volatile regs
  1991                                                          push    ebx                                             ;
  1992                                                          push    ecx                                             ;
  1993                                                          push    esi                                             ;
  1994                                                          push    ds                                              ;
  1995                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1996                                                          pop     ds                                              ;... into data segment register
  1997                                                          xor     al,al                                           ;zero
  1998                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1999                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2000                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2001                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2002                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2003                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2004                                                          mov     al,' '                                          ;space
  2005                                                          mov     [wbConsoleChar],al                              ;set character to space
  2006                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2007                                                          not     al                                              ;controller timeout mask
  2008                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2009                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2010                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2011                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2012                                                          jz      irq1.140                                        ;yes, skip ahead
  2013                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2014                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2015                                                          mov     ah,al                                           ;copy scan code 0
  2016                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2017                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2018                                                          je      irq1.30                                         ;yes, set flag
  2019                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2020                                                          je      irq1.40                                         ;yes, reset flag
  2021                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2022                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2023                                                          je      irq1.30                                         ;yes, set flag
  2024                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2025                                                          je      irq1.40                                         ;yes, reset flag
  2026                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2027                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2028                                                          je      irq1.30                                         ;yes, set flag
  2029                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2030                                                          je      irq1.40                                         ;yes, reset flag
  2031                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2032                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2033                                                          je      irq1.30                                         ;yes, set flag
  2034                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2035                                                          je      irq1.40                                         ;yes, reset flag
  2036                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2037                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2038                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2039                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2040                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2041                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2042                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2043                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2044                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2045                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2046                                                          jne     irq1.70                                         ;no, skip ahead
  2047                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2048                                                          jz      irq1.140                                        ;yes, skip ahead
  2049                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2050                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2051                                                          mov     ah,al                                           ;copy scan code 1
  2052                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2053                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2054                                                          je      irq1.30                                         ;yes, set flag
  2055                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2056                                                          je      irq1.40                                         ;yes, reset flag
  2057                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2058                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2059                                                          je      irq1.30                                         ;yes, set flag
  2060                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2061                                                          je      irq1.40                                         ;yes, reset flag
  2062                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2063                                                          je      irq1.80                                         ;yes, skip ahead
  2064                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2065                                                          je      irq1.80                                         ;yes, skip ahead
  2066                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2067                                                          je      irq1.10                                         ;yes, continue
  2068                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2069                                                          jne     irq1.20                                         ;no, skip ahead
  2070                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2071                                                          jz      irq1.140                                        ;yes, skip ahead
  2072                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2073                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2074                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2075                                                          jz      irq1.140                                        ;yes, skip ahead
  2076                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2077                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2078                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2079                                  irq1.30                 or      bl,al                                           ;set shift flag
  2080                                                          jmp     irq1.60                                         ;skip ahead
  2081                                  irq1.40                 not     al                                              ;convert flag to mask
  2082                                                          and     bl,al                                           ;reset shift flag
  2083                                                          jmp     irq1.60                                         ;skip ahead
  2084                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2085                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2086                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2087                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2088                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2089                                                          jmp     irq1.150                                        ;finish keyboard handling
  2090                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2091                                                          jne     irq1.80                                         ;no continue
  2092                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2093                                                          jz      irq1.140                                        ;yes, skip ahead
  2094                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2095                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2096                                                          mov     ah,al                                           ;copy scan code 1
  2097                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2098                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2099                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2100                                                          jz      irq1.140                                        ;yes, skip ahead
  2101                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2102                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2103                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2104                                                          jz      irq1.140                                        ;yes, skip ahead
  2105                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2106                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2107                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2108                                                          jz      irq1.140                                        ;yes, skip ahead
  2109                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2110                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2111                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2112                                                          jz      irq1.140                                        ;yes, skip ahead
  2113                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2114                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2115                                                          jmp     irq1.150                                        ;continue
  2116                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2117                                                          test    ah,EKEYBUP                                      ;release code?
  2118                                                          jnz     irq1.130                                        ;yes, skip ahead
  2119                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2120                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2121                                                          jz      irq1.90                                         ;no, skip ahead
  2122                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2123                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2124                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2125                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2126                                                          jz      irq1.100                                        ;no skip ahead
  2127                                                          mov     cl,al                                           ;copy ASCII code
  2128                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2129                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2130                                                          jb      irq1.100                                        ;yes, skip ahead
  2131                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2132                                                          ja      irq1.100                                        ;yes, skip ahead
  2133                                                          xor     al,EASCIICASE                                   ;switch case
  2134                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2135                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2136                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2137                                                          jz      irq1.120                                        ;no, skip ahead
  2138                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2139                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2140                                                          or      edx,eax                                         ;msg id and codes
  2141                                                          xor     ecx,ecx                                         ;null param
  2142                                                          push    eax                                             ;save codes
  2143                                                          call    PutMessage                                      ;put message to console
  2144                                                          pop     eax                                             ;restore codes
  2145                                                          test    al,al                                           ;ASCII translation?
  2146                                                          jz      irq1.130                                        ;no, skip ahead
  2147                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2148                                                          and     eax,0FFFFh                                      ;clear high-order word
  2149                                                          or      edx,eax                                         ;msg id and codes
  2150                                                          xor     ecx,ecx                                         ;null param
  2151                                                          call    PutMessage                                      ;put message to console
  2152                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2153                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2154                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2155                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2156                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2157                                                          pop     ds                                              ;restore non-volatile regs
  2158                                                          pop     esi                                             ;
  2159                                                          pop     ecx                                             ;
  2160                                                          pop     ebx                                             ;
  2161                                                          pop     eax                                             ;
  2162                                                          iretd                                                   ;return
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  ;       Scan-Code to ASCII Translation Tables
  2165                                  ;-----------------------------------------------------------------------------------------------------------------------
  2166                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2167                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2168                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2169                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2170                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2171                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2172                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2173                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2174                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2175                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2176                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2177                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2178                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2179                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2180                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2181                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2182                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2183                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2184                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2185                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2186                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2187                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2188                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2189                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2190                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2191                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2192                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2193                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2194                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2195                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2196                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2197                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                  ;
  2200                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2201                                  ;
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                                          menter  iochannel                                       ;secondary 8259A cascade
  2204                                                          push    eax                                             ;save modified regs
  2205                                                          jmp     hwint                                           ;end interrupt and return
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                  ;
  2208                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2209                                  ;
  2210                                  ;-----------------------------------------------------------------------------------------------------------------------
  2211                                                          menter  com2                                            ;serial port 2 interrupt
  2212                                                          push    eax                                             ;save modified regs
  2213                                                          jmp     hwint                                           ;end interrupt and return
  2214                                  ;-----------------------------------------------------------------------------------------------------------------------
  2215                                  ;
  2216                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                                          menter  com1                                            ;serial port 1 interrupt
  2220                                                          push    eax                                             ;save modified regs
  2221                                                          jmp     hwint                                           ;end interrupt and return
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                  ;
  2224                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2225                                  ;
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2228                                                          push    eax                                             ;save modified regs
  2229                                                          jmp     hwint                                           ;end interrupt and return
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;
  2232                                  ;       IRQ6    Diskette Hardware Interrupt
  2233                                  ;
  2234                                  ;-----------------------------------------------------------------------------------------------------------------------
  2235                                                          menter  diskette                                        ;floppy disk interrupt
  2236                                                          push    eax                                             ;save non-volatile regs
  2237                                                          push    ds                                              ;
  2238                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2239                                                          pop     ds                                              ;... into DS register
  2240                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2241                                                          or      al,10000000b                                    ;set IRQ flag
  2242                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2243                                                          pop     ds                                              ;restore non-volatile regs
  2244                                                          jmp     hwint                                           ;end primary PIC interrupt
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                  ;
  2247                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2248                                  ;
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2251                                                          push    eax                                             ;save modified regs
  2252                                                          jmp     hwint                                           ;end interrupt and return
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                  ;
  2255                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2256                                  ;
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                                          menter  rtclock                                         ;real-time clock interrupt
  2259                                                          push    eax                                             ;save modified regs
  2260                                                          jmp     hwwint                                          ;end interrupt and return
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                  ;
  2263                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2264                                  ;
  2265                                  ;-----------------------------------------------------------------------------------------------------------------------
  2266                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2267                                                          push    eax                                             ;save modified regs
  2268                                                          jmp     hwwint                                          ;end interrupt and return
  2269                                  ;-----------------------------------------------------------------------------------------------------------------------
  2270                                  ;
  2271                                  ;       IRQ10   Reserved Hardware Interrupt
  2272                                  ;
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                                          menter  irq10                                           ;reserved
  2275                                                          push    eax                                             ;save modified regs
  2276                                                          jmp     hwwint                                          ;end interrupt and return
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278                                  ;
  2279                                  ;       IRQ11   Reserved Hardware Interrupt
  2280                                  ;
  2281                                  ;-----------------------------------------------------------------------------------------------------------------------
  2282                                                          menter  irq11                                           ;reserved
  2283                                                          push    eax                                             ;save modified regs
  2284                                                          jmp     hwwint                                          ;end interrupt and return
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                  ;
  2287                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2288                                  ;
  2289                                  ;-----------------------------------------------------------------------------------------------------------------------
  2290                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2291                                                          push    eax                                             ;save modified regs
  2292                                                          jmp     hwwint                                          ;end interrupt and return
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  ;
  2295                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2296                                  ;
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                                          menter  coprocessor                                     ;coprocessor interrupt
  2299                                                          push    eax                                             ;save modified regs
  2300                                                          jmp     hwwint                                          ;end interrupt and return
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                  ;
  2303                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2304                                  ;
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2307                                                          push    eax                                             ;save modified regs
  2308                                                          jmp     hwwint                                          ;end interrupt and return
  2309                                  ;-----------------------------------------------------------------------------------------------------------------------
  2310                                  ;
  2311                                  ;       IRQ15   Reserved Hardware Interrupt
  2312                                  ;
  2313                                  ;-----------------------------------------------------------------------------------------------------------------------
  2314                                                          menter  irq15                                           ;reserved
  2315                                                          push    eax                                             ;save modified regs
  2316                                                          jmp     hwwint                                          ;end interrupt and return
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  ;
  2319                                  ;       Exit from hardware interrupt
  2320                                  ;
  2321                                  ;-----------------------------------------------------------------------------------------------------------------------
  2322                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2323                                                          jmp     hwint90                                         ;skip ahead
  2324                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2325                                  hwint90                 pop     eax                                             ;restore modified regs
  2326                                                          iretd                                                   ;return from interrupt
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                  ;
  2329                                  ;       INT 30h Operating System Software Service Interrupt
  2330                                  ;
  2331                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2332                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2333                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2334                                  ;       the entry address of the specific function from a table.
  2335                                  ;
  2336                                  ;-----------------------------------------------------------------------------------------------------------------------
  2337                                                          menter  svc
  2338                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2339                                                          jae     svc90                                           ;yes, skip ahead
  2340                                                          movzx   eax,al                                          ;function
  2341                                                          shl     eax,2                                           ;offset into table
  2342                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2343                                  svc90                   iretd                                                   ;return from interrupt
  2344                                  ;-----------------------------------------------------------------------------------------------------------------------
  2345                                  ;
  2346                                  ;       Service Request Table
  2347                                  ;
  2348                                  ;
  2349                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2350                                  ;
  2351                                  ;-----------------------------------------------------------------------------------------------------------------------
  2352                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2353                                                          tsvce   CompareMemory                                   ;compare memory
  2354                                                          tsvce   GetConsoleString                                ;get string input
  2355                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2356                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2357                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2358                                                          tsvce   UpperCaseString                                 ;upper-case string
  2359                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2360                                  ;-----------------------------------------------------------------------------------------------------------------------
  2361                                  ;
  2362                                  ;       Service Request Macros
  2363                                  ;
  2364                                  ;       These macros provide positional parameterization of service request calls.
  2365                                  ;
  2366                                  ;-----------------------------------------------------------------------------------------------------------------------
  2367                                  %macro                  clearConsoleScreen 0
  2368                                                          mov     al,eClearConsoleScreen                          ;function code
  2369                                                          int     _svc                                            ;invoke OS service
  2370                                  %endmacro
  2371                                  %macro                  compareMemory 0
  2372                                                          mov     al,eCompareMemory                               ;function code
  2373                                                          int     _svc                                            ;invoke OS service
  2374                                  %endmacro
  2375                                  %macro                  getConsoleString 4
  2376                                                          mov     edx,%1                                          ;buffer address
  2377                                                          mov     ecx,%2                                          ;max characters
  2378                                                          mov     bh,%3                                           ;echo indicator
  2379                                                          mov     bl,%4                                           ;terminator
  2380                                                          mov     al,eGetConsoleString                            ;function code
  2381                                                          int     _svc                                            ;invoke OS service
  2382                                  %endmacro
  2383                                  %macro                  placeCursor 0
  2384                                                          mov     al,ePlaceCursor                                 ;function code
  2385                                                          int     _svc                                            ;invoke OS service
  2386                                  %endmacro
  2387                                  %macro                  putConsoleString 1
  2388                                                          mov     edx,%1                                          ;string address
  2389                                                          mov     al,ePutConsoleString                            ;function code
  2390                                                          int     _svc                                            ;invoke OS service
  2391                                  %endmacro
  2392                                  %macro                  resetSystem 0
  2393                                                          mov     al,eResetSystem                                 ;function code
  2394                                                          int     _svc                                            ;invoke OS service
  2395                                  %endmacro
  2396                                  %macro                  upperCaseString 0
  2397                                                          mov     al,eUpperCaseString                             ;function code
  2398                                                          int     _svc                                            ;invoke OS service
  2399                                  %endmacro
  2400                                  ;=======================================================================================================================
  2401                                  ;
  2402                                  ;       Kernel Function Library
  2403                                  ;
  2404                                  ;=======================================================================================================================
  2405                                  ;=======================================================================================================================
  2406                                  ;
  2407                                  ;       String Helper Routines
  2408                                  ;
  2409                                  ;       CompareMemory
  2410                                  ;       UpperCaseString
  2411                                  ;
  2412                                  ;=======================================================================================================================
  2413                                  ;-----------------------------------------------------------------------------------------------------------------------
  2414                                  ;
  2415                                  ;       Routine:        CompareMemory
  2416                                  ;
  2417                                  ;       Description:    This routine compares two byte arrays.
  2418                                  ;
  2419                                  ;       In:             DS:EDX  first source address
  2420                                  ;                       DS:EBX  second source address
  2421                                  ;                       ECX     comparison length
  2422                                  ;
  2423                                  ;       Out:            EDX     first source address
  2424                                  ;                       EBX     second source address
  2425                                  ;                       ECX     0       array 1 = array 2
  2426                                  ;                               <0      array 1 < array 2
  2427                                  ;                               >0      array 1 > array 2
  2428                                  ;
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2431                                                          push    edi                                             ;
  2432                                                          push    es                                              ;
  2433                                                          push    ds                                              ;copy DS
  2434                                                          pop     es                                              ;... to ES
  2435                                                          mov     esi,edx                                         ;first source address
  2436                                                          mov     edi,ebx                                         ;second source address
  2437                                                          cld                                                     ;forward strings
  2438                                                          rep     cmpsb                                           ;compare bytes
  2439                                                          mov     al,0                                            ;default result
  2440                                                          jz      .10                                             ;branch if arrays equal
  2441                                                          mov     al,1                                            ;positive result
  2442                                                          jnc     .10                                             ;branch if target > source
  2443                                                          mov     al,-1                                           ;negative result
  2444                                  .10                     movsx   ecx,al                                          ;extend sign
  2445                                                          pop     es                                              ;restore non-volatile regs
  2446                                                          pop     edi                                             ;
  2447                                                          pop     esi                                             ;
  2448                                                          ret                                                     ;return
  2449                                  ;-----------------------------------------------------------------------------------------------------------------------
  2450                                  ;
  2451                                  ;       Routine:        UpperCaseString
  2452                                  ;
  2453                                  ;       Description:    This routine places all characters in the given string to upper case.
  2454                                  ;
  2455                                  ;       In:             DS:EDX  string address
  2456                                  ;
  2457                                  ;       Out:            EDX     string address
  2458                                  ;
  2459                                  ;-----------------------------------------------------------------------------------------------------------------------
  2460                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2461                                                          mov     esi,edx                                         ;string address
  2462                                                          cld                                                     ;forward strings
  2463                                  .10                     lodsb                                                   ;string character
  2464                                                          test    al,al                                           ;null?
  2465                                                          jz      .20                                             ;yes, skip ahead
  2466                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2467                                                          jb      .10                                             ;no, continue
  2468                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2469                                                          ja      .10                                             ;no, continue
  2470                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2471                                                          mov     [esi-1],al                                      ;upper character
  2472                                                          jmp     .10                                             ;continue
  2473                                  .20                     pop     esi                                             ;restore non-volatile regs
  2474                                                          ret                                                     ;return
  2475                                  ;=======================================================================================================================
  2476                                  ;
  2477                                  ;       Console Helper Routines
  2478                                  ;
  2479                                  ;       FirstConsoleColumn
  2480                                  ;       GetConsoleChar
  2481                                  ;       GetConsoleString
  2482                                  ;       NextConsoleColumn
  2483                                  ;       NextConsoleRow
  2484                                  ;       PreviousConsoleColumn
  2485                                  ;       PutConsoleChar
  2486                                  ;       PutConsoleHexByte
  2487                                  ;       PutConsoleOIAChar
  2488                                  ;       PutConsoleOIAShift
  2489                                  ;       PutConsoleString
  2490                                  ;       Yield
  2491                                  ;
  2492                                  ;=======================================================================================================================
  2493                                  ;-----------------------------------------------------------------------------------------------------------------------
  2494                                  ;
  2495                                  ;       Routine:        FirstConsoleColumn
  2496                                  ;
  2497                                  ;       Description:    This routine resets the console column to start of the row.
  2498                                  ;
  2499                                  ;       In:             DS      OS data selector
  2500                                  ;
  2501                                  ;-----------------------------------------------------------------------------------------------------------------------
  2502                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2503                                                          mov     [wbConsoleColumn],al                            ;save column
  2504                                                          ret                                                     ;return
  2505                                  ;-----------------------------------------------------------------------------------------------------------------------
  2506                                  ;
  2507                                  ;       Routine:        GetConsoleChar
  2508                                  ;
  2509                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2510                                  ;
  2511                                  ;       Out:            AL      ASCII character code
  2512                                  ;                       AH      keyboard scan code
  2513                                  ;
  2514                                  ;-----------------------------------------------------------------------------------------------------------------------
  2515                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2516                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2517                                                          or      eax,eax                                         ;do we have a message?
  2518                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2519                                                          push    eax                                             ;save key codes
  2520                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2521                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2522                                                          pop     eax                                             ;restore key codes
  2523                                                          jne     GetConsoleChar                                  ;no, try again
  2524                                                          and     eax,0000ffffh                                   ;mask for key codes
  2525                                                          ret                                                     ;return
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  ;
  2528                                  ;       Routine:        GetConsoleString
  2529                                  ;
  2530                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2531                                  ;
  2532                                  ;       In:             DS:EDX  target buffer address
  2533                                  ;                       ECX     maximum number of characters to accept
  2534                                  ;                       BH      echo to terminal
  2535                                  ;                       BL      terminating character
  2536                                  ;
  2537                                  ;-----------------------------------------------------------------------------------------------------------------------
  2538                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2539                                                          push    esi                                             ;
  2540                                                          push    edi                                             ;
  2541                                                          push    es                                              ;
  2542                                                          push    ds                                              ;load data segment selector ...
  2543                                                          pop     es                                              ;... into extra segment register
  2544                                                          mov     edi,edx                                         ;edi = target buffer
  2545                                                          push    ecx                                             ;save maximum characters
  2546                                                          xor     al,al                                           ;zero register
  2547                                                          cld                                                     ;forward strings
  2548                                                          rep     stosb                                           ;zero fill buffer
  2549                                                          pop     ecx                                             ;maximum characters
  2550                                                          mov     edi,edx                                         ;edi = target buffer
  2551                                                          mov     esi,edx                                         ;esi = target buffer
  2552                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2553                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2554                                                          cmp     al,bl                                           ;is this the terminator?
  2555                                                          je      .50                                             ;yes, exit
  2556                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2557                                                          jne     .30                                             ;no, skip ahead
  2558                                                          cmp     esi,edi                                         ;at start of buffer?
  2559                                                          je      .20                                             ;yes, get next character
  2560                                                          dec     edi                                             ;backup target pointer
  2561                                                          mov     byte [edi],0                                    ;zero previous character
  2562                                                          inc     ecx                                             ;increment remaining chars
  2563                                                          test    bh,1                                            ;echo to console?
  2564                                                          jz      .20                                             ;no, get next character
  2565                                                          call    PreviousConsoleColumn                           ;backup console position
  2566                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2567                                                          call    PutConsoleChar                                  ;write space to console
  2568                                                          call    PlaceCursor                                     ;position the cursor
  2569                                                          jmp     .20                                             ;get next character
  2570                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2571                                                          jb      .20                                             ;no, get another character
  2572                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2573                                                          ja      .20                                             ;no, get another character
  2574                                                          stosb                                                   ;store character in buffer
  2575                                                          test    bh,1                                            ;echo to console?
  2576                                                          jz      .40                                             ;no, skip ahead
  2577                                                          call    PutConsoleChar                                  ;write character to console
  2578                                                          call    NextConsoleColumn                               ;advance console position
  2579                                                          call    PlaceCursor                                     ;position the cursor
  2580                                  .40                     dec     ecx                                             ;decrement remaining chars
  2581                                                          jmp     .10                                             ;next
  2582                                  .50                     xor     al,al                                           ;null
  2583                                                          stosb                                                   ;terminate buffer
  2584                                                          pop     es                                              ;restore non-volatile regs
  2585                                                          pop     edi                                             ;
  2586                                                          pop     esi                                             ;
  2587                                                          pop     ecx                                             ;
  2588                                                          ret                                                     ;return
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                  ;
  2591                                  ;       Routine:        NextConsoleColumn
  2592                                  ;
  2593                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2594                                  ;                       incremented if the end of the current row is reached.
  2595                                  ;
  2596                                  ;       In:             DS      OS data selector
  2597                                  ;
  2598                                  ;-----------------------------------------------------------------------------------------------------------------------
  2599                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2600                                                          inc     al                                              ;increment column
  2601                                                          mov     [wbConsoleColumn],al                            ;save column
  2602                                                          cmp     al,ECONCOLS                                     ;end of row?
  2603                                                          jb      .10                                             ;no, skip ahead
  2604                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2605                                                          call    NextConsoleRow                                  ;line feed to next row
  2606                                  .10                     ret                                                     ;return
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                  ;
  2609                                  ;       Routine:        NextConsoleRow
  2610                                  ;
  2611                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2612                                  ;
  2613                                  ;       In:             DS      OS data selector
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2617                                                          inc     al                                              ;increment row
  2618                                                          mov     [wbConsoleRow],al                               ;save row
  2619                                                          cmp     al,ECONROWS                                     ;end of screen?
  2620                                                          jb      .10                                             ;no, skip ahead
  2621                                                          call    ScrollConsoleRow                                ;scroll up one row
  2622                                                          mov     al,[wbConsoleRow]                               ;row
  2623                                                          dec     al                                              ;decrement row
  2624                                                          mov     [wbConsoleRow],al                               ;save row
  2625                                  .10                     ret                                                     ;return
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  ;
  2628                                  ;       Routine:        PreviousConsoleColumn
  2629                                  ;
  2630                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2631                                  ;                       the column is set to the last position in the row and the row is decremented.
  2632                                  ;
  2633                                  ;       In:             DS      OS data selector
  2634                                  ;
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2637                                                          or      al,al                                           ;start of row?
  2638                                                          jnz     .10                                             ;no, skip ahead
  2639                                                          mov     ah,[wbConsoleRow]                               ;current row
  2640                                                          or      ah,ah                                           ;top of screen?
  2641                                                          jz      .20                                             ;yes, exit with no change
  2642                                                          dec     ah                                              ;decrement row
  2643                                                          mov     [wbConsoleRow],ah                               ;save row
  2644                                                          mov     al,ECONCOLS                                     ;set maximum column
  2645                                  .10                     dec     al                                              ;decrement column
  2646                                                          mov     [wbConsoleColumn],al                            ;save column
  2647                                  .20                     ret                                                     ;return
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                  ;
  2650                                  ;       Routine:        PutConsoleChar
  2651                                  ;
  2652                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2653                                  ;
  2654                                  ;       In:             AL      ASCII character
  2655                                  ;                       DS      OS data selector
  2656                                  ;
  2657                                  ;-----------------------------------------------------------------------------------------------------------------------
  2658                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2659                                                          push    es                                              ;
  2660                                                          push    EGDTCGA                                         ;load CGA selector ...
  2661                                                          pop     es                                              ;... into extra segment reg
  2662                                                          mov     cl,[wbConsoleColumn]                            ;column
  2663                                                          mov     ch,[wbConsoleRow]                               ;row
  2664                                                          call    SetConsoleChar                                  ;put character at row, column
  2665                                                          pop     es                                              ;restore non-volatile regs
  2666                                                          pop     ecx                                             ;
  2667                                                          ret                                                     ;return
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;       Routine:        PutConsoleHexByte
  2671                                  ;
  2672                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2673                                  ;
  2674                                  ;       In:             AL      byte value
  2675                                  ;                       CL      column
  2676                                  ;                       CH      row
  2677                                  ;                       DS      OS data selector
  2678                                  ;                       ES      CGA selector
  2679                                  ;
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2682                                                          mov     bl,al                                           ;save byte value
  2683                                                          shr     al,4                                            ;hi-order nybble
  2684                                                          or      al,030h                                         ;apply ASCII zone
  2685                                                          cmp     al,03ah                                         ;numeric?
  2686                                                          jb      .10                                             ;yes, skip ahead
  2687                                                          add     al,7                                            ;add ASCII offset for alpha
  2688                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  2689                                                          mov     al,bl                                           ;byte value
  2690                                                          and     al,0fh                                          ;lo-order nybble
  2691                                                          or      al,30h                                          ;apply ASCII zone
  2692                                                          cmp     al,03ah                                         ;numeric?
  2693                                                          jb      .20                                             ;yes, skip ahead
  2694                                                          add     al,7                                            ;add ASCII offset for alpha
  2695                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2696                                                          pop     ebx                                             ;restore non-volatile regs
  2697                                                          ret                                                     ;return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       Routine:        PutConsoleOIAChar
  2701                                  ;
  2702                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2703                                  ;
  2704                                  ;       In:             DS      OS data selector
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2708                                                          push    ecx                                             ;
  2709                                                          push    esi                                             ;
  2710                                                          push    ds                                              ;
  2711                                                          push    es                                              ;
  2712                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2713                                                          pop     ds                                              ;... into data segment register
  2714                                                          push    EGDTCGA                                         ;load CGA selector ...
  2715                                                          pop     es                                              ;... into extra segment register
  2716                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2717                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2718                                                          mov     bl,0                                            ;starting column
  2719                                                          mov     ecx,6                                           ;maximum scan codes
  2720                                  .10                     push    ecx                                             ;save remaining count
  2721                                                          mov     ecx,ebx                                         ;row, column
  2722                                                          lodsb                                                   ;read scan code
  2723                                                          or      al,al                                           ;scan code present?
  2724                                                          jz      .20                                             ;no, skip ahead
  2725                                                          call    PutConsoleHexByte                               ;display scan code
  2726                                                          jmp     .30                                             ;continue
  2727                                  .20                     mov     al,' '                                          ;ASCII space
  2728                                                          call    SetConsoleChar                                  ;display space
  2729                                                          mov     al,' '                                          ;ASCII space
  2730                                                          call    SetConsoleChar                                  ;display space
  2731                                  .30                     add     bl,2                                            ;next column (+2)
  2732                                                          pop     ecx                                             ;restore remaining
  2733                                                          loop    .10                                             ;next code
  2734                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2735                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2736                                                          jb      .40                                             ;no, skip ahead
  2737                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2738                                                          ja      .40                                             ;no, skip ahead
  2739                                                          mov     ch,bh                                           ;OIA row
  2740                                                          mov     cl,40                                           ;character display column
  2741                                                          call    SetConsoleChar                                  ;display ASCII character
  2742                                  .40                     pop     es                                              ;restore non-volatile regs
  2743                                                          pop     ds                                              ;
  2744                                                          pop     esi                                             ;
  2745                                                          pop     ecx                                             ;
  2746                                                          pop     ebx                                             ;
  2747                                                          ret                                                     ;return
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  ;
  2750                                  ;       Routine:        PutConsoleOIAShift
  2751                                  ;
  2752                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2753                                  ;
  2754                                  ;       In:             BL      shift flags
  2755                                  ;                       BH      lock flags
  2756                                  ;                       DS      OS data selector
  2757                                  ;
  2758                                  ;-----------------------------------------------------------------------------------------------------------------------
  2759                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2760                                                          push    es                                              ;
  2761                                                          push    EGDTCGA                                         ;load CGA selector ...
  2762                                                          pop     es                                              ;... into ES register
  2763                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2764                                                          mov     al,EASCIISPACE                                  ;space is default character
  2765                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2766                                                          jz      .10                                             ;no, skip ahead
  2767                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2768                                  .10                     mov     cl,14                                           ;indicator column
  2769                                                          call    SetConsoleChar                                  ;display ASCII character
  2770                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2771                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2772                                                          jz      .20                                             ;no, skip ahead
  2773                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2774                                  .20                     mov     cl,64                                           ;indicator column
  2775                                                          call    SetConsoleChar                                  ;display ASCII character
  2776                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2777                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2778                                                          jz      .30                                             ;no, skip ahead
  2779                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2780                                  .30                     mov     cl,15                                           ;indicator column
  2781                                                          call    SetConsoleChar                                  ;display ASCII character
  2782                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2783                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2784                                                          jz      .40                                             ;no, skip ahead
  2785                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2786                                  .40                     mov     cl,63                                           ;indicator column
  2787                                                          call    SetConsoleChar                                  ;display ASCII character
  2788                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2789                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2790                                                          jz      .50                                             ;no, skip ahead
  2791                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2792                                  .50                     mov     cl,16                                           ;indicator column
  2793                                                          call    SetConsoleChar                                  ;display ASCII character
  2794                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2795                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2796                                                          jz      .60                                             ;no, skip ahead
  2797                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2798                                  .60                     mov     cl,62                                           ;indicator column
  2799                                                          call    SetConsoleChar                                  ;display ASCII character
  2800                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2801                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2802                                                          jz      .70                                             ;no, skip ahead
  2803                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2804                                  .70                     mov     cl,78                                           ;indicator column
  2805                                                          call    SetConsoleChar                                  ;display ASCII character
  2806                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2807                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2808                                                          jz      .80                                             ;no, skip ahead
  2809                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2810                                  .80                     mov     cl,77                                           ;indicator column
  2811                                                          call    SetConsoleChar                                  ;display ASCII character
  2812                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2813                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2814                                                          jz      .90                                             ;no, skip ahead
  2815                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2816                                  .90                     mov     cl,76                                           ;indicator column
  2817                                                          call    SetConsoleChar                                  ;display ASCII character
  2818                                                          pop     es                                              ;restore non-volatile regs
  2819                                                          pop     ecx                                             ;
  2820                                                          ret                                                     ;return
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  ;
  2823                                  ;       Routine:        PutConsoleString
  2824                                  ;
  2825                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2826                                  ;                       console position as needed.
  2827                                  ;
  2828                                  ;       In:             EDX     source address
  2829                                  ;                       DS      OS data selector
  2830                                  ;
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2833                                                          mov     esi,edx                                         ;source address
  2834                                                          cld                                                     ;forward strings
  2835                                  .10                     lodsb                                                   ;ASCII character
  2836                                                          or      al,al                                           ;end of string?
  2837                                                          jz      .40                                             ;yes, skip ahead
  2838                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2839                                                          jne     .20                                             ;no, skip ahead
  2840                                                          call    FirstConsoleColumn                              ;move to start of row
  2841                                                          jmp     .10                                             ;next character
  2842                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2843                                                          jne     .30                                             ;no, skip ahead
  2844                                                          call    NextConsoleRow                                  ;move to next row
  2845                                                          jmp     .10                                             ;next character
  2846                                  .30                     call    PutConsoleChar                                  ;output character to console
  2847                                                          call    NextConsoleColumn                               ;advance to next column
  2848                                                          jmp     .10                                             ;next character
  2849                                  .40                     pop     esi                                             ;restore non-volatile regs
  2850                                                          ret                                                     ;return
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                  ;
  2853                                  ;       Routine:        Yield
  2854                                  ;
  2855                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2856                                  ;
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  Yield                   sti                                                     ;enable maskagle interrupts
  2859                                                          hlt                                                     ;halt until external interrupt
  2860                                                          ret                                                     ;return
  2861                                  ;=======================================================================================================================
  2862                                  ;
  2863                                  ;       Message Queue Helper Routines
  2864                                  ;
  2865                                  ;       GetMessage
  2866                                  ;       PutMessage
  2867                                  ;
  2868                                  ;=======================================================================================================================
  2869                                  ;-----------------------------------------------------------------------------------------------------------------------
  2870                                  ;
  2871                                  ;       Routine:        GetMessage
  2872                                  ;
  2873                                  ;       Description:    This routine reads and removes a message from the message queue.
  2874                                  ;
  2875                                  ;       Out:            EAX     lo-order message data
  2876                                  ;                       EDX     hi-order message data
  2877                                  ;
  2878                                  ;                       CY      0 = message read
  2879                                  ;                               1 = no message to read
  2880                                  ;
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  GetMessage              push    ebx                                             ;save non-volatile regs
  2883                                                          push    ecx                                             ;
  2884                                                          push    ds                                              ;
  2885                                                          push    ELDTMQ                                          ;load message queue selector ...
  2886                                                          pop     ds                                              ;... into data segment register
  2887                                                          mov     ebx,[MQHead]                                    ;head ptr
  2888                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  2889                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2890                                                          or      eax,edx                                         ;is queue empty?
  2891                                                          stc                                                     ;assume queue is emtpy
  2892                                                          jz      .20                                             ;yes, skip ahead
  2893                                                          xor     ecx,ecx                                         ;store zero
  2894                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  2895                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2896                                                          add     ebx,8                                           ;next queue element
  2897                                                          and     ebx,03fch                                       ;at end of queue?
  2898                                                          jnz     .10                                             ;no, skip ahead
  2899                                                          mov     bl,8                                            ;reset to 1st entry
  2900                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2901                                                          clc                                                     ;indicate message read
  2902                                  .20                     pop     ds                                              ;restore non-volatile regs
  2903                                                          pop     ecx                                             ;
  2904                                                          pop     ebx                                             ;
  2905                                                          ret                                                     ;return
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                  ;
  2908                                  ;       Routine:        PutMessage
  2909                                  ;
  2910                                  ;       Description:    This routine adda a message to the message queue.
  2911                                  ;
  2912                                  ;       In:             ECX     hi-order data word
  2913                                  ;                       EDX     lo-order data word
  2914                                  ;
  2915                                  ;       Out:            CY      0 = success
  2916                                  ;                               1 = fail: queue is full
  2917                                  ;
  2918                                  ;-----------------------------------------------------------------------------------------------------------------------
  2919                                  PutMessage              push    ds                                              ;save non-volatile regs
  2920                                                          push    ELDTMQ                                          ;load task message queue selector ...
  2921                                                          pop     ds                                              ;... into data segment register
  2922                                                          mov     eax,[MQTail]                                    ;tail ptr
  2923                                                          cmp     dword [eax],0                                   ;is queue full?
  2924                                                          stc                                                     ;assume failure
  2925                                                          jne     .20                                             ;yes, cannot store
  2926                                                          mov     [eax],edx                                       ;store lo-order data
  2927                                                          mov     [eax+4],ecx                                     ;store hi-order data
  2928                                                          add     eax,8                                           ;next queue element adr
  2929                                                          and     eax,03fch                                       ;at end of queue?
  2930                                                          jnz     .10                                             ;no, skip ahead
  2931                                                          mov     al,8                                            ;reset to top of queue
  2932                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2933                                                          clc                                                     ;indicate success
  2934                                  .20                     pop     ds                                              ;restore non-volatile regs
  2935                                                          ret                                                     ;return
  2936                                  ;=======================================================================================================================
  2937                                  ;
  2938                                  ;       Memory-Mapped Video Routines
  2939                                  ;
  2940                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2941                                  ;
  2942                                  ;       ClearConsoleScreen
  2943                                  ;       ScrollConsoleRow
  2944                                  ;       SetConsoleChar
  2945                                  ;
  2946                                  ;=======================================================================================================================
  2947                                  ;-----------------------------------------------------------------------------------------------------------------------
  2948                                  ;
  2949                                  ;       Routine:        ClearConsoleScreen
  2950                                  ;
  2951                                  ;       Description:    This routine clears the console (CGA) screen.
  2952                                  ;
  2953                                  ;-----------------------------------------------------------------------------------------------------------------------
  2954                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2955                                                          push    edi                                             ;
  2956                                                          push    ds                                              ;
  2957                                                          push    es                                              ;
  2958                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2959                                                          pop     ds                                              ;... into DS register
  2960                                                          push    EGDTCGA                                         ;load CGA selector ...
  2961                                                          pop     es                                              ;... into ES register
  2962                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2963                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2964                                                          xor     edi,edi                                         ;target offset
  2965                                                          cld                                                     ;forward strings
  2966                                                          rep     stosd                                           ;reset screen body
  2967                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2968                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2969                                                          rep     stosd                                           ;reset OIA line
  2970                                                          xor     al,al                                           ;zero register
  2971                                                          mov     [wbConsoleRow],al                               ;reset console row
  2972                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2973                                                          call    PlaceCursor                                     ;place cursor at current position
  2974                                                          pop     es                                              ;restore non-volatile regs
  2975                                                          pop     ds                                              ;
  2976                                                          pop     edi                                             ;
  2977                                                          pop     ecx                                             ;
  2978                                                          ret                                                     ;return
  2979                                  ;-----------------------------------------------------------------------------------------------------------------------
  2980                                  ;
  2981                                  ;       Routine:        ScrollConsoleRow
  2982                                  ;
  2983                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2984                                  ;
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2987                                                          push    esi                                             ;
  2988                                                          push    edi                                             ;
  2989                                                          push    ds                                              ;
  2990                                                          push    es                                              ;
  2991                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2992                                                          pop     ds                                              ;... into DS
  2993                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2994                                                          pop     es                                              ;... into ES
  2995                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2996                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2997                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2998                                                          cld                                                     ;forward strings
  2999                                                          rep     movsd                                           ;move 24 lines up
  3000                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3001                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3002                                                          rep     stosd                                           ;clear bottom row
  3003                                                          pop     es                                              ;restore non-volatile regs
  3004                                                          pop     ds                                              ;
  3005                                                          pop     edi                                             ;
  3006                                                          pop     esi                                             ;
  3007                                                          pop     ecx                                             ;
  3008                                                          ret                                                     ;return
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010                                  ;
  3011                                  ;       Routine:        SetConsoleChar
  3012                                  ;
  3013                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3014                                  ;
  3015                                  ;       In:             AL      ASCII character
  3016                                  ;                       CL      column
  3017                                  ;                       CH      row
  3018                                  ;                       ES      CGA selector
  3019                                  ;
  3020                                  ;       Out:            EAX     last target address written (ES:)
  3021                                  ;                       CL      column + 1
  3022                                  ;
  3023                                  ;-----------------------------------------------------------------------------------------------------------------------
  3024                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3025                                                          movzx   eax,ch                                          ;row
  3026                                                          mov     ah,ECONCOLS                                     ;cols/row
  3027                                                          mul     ah                                              ;row * cols/row
  3028                                                          add     al,cl                                           ;add column
  3029                                                          adc     ah,0                                            ;handle carry
  3030                                                          shl     eax,1                                           ;screen offset
  3031                                                          mov     [es:eax],dl                                     ;store character
  3032                                                          inc     cl                                              ;next column
  3033                                                          ret                                                     ;return
  3034                                  ;=======================================================================================================================
  3035                                  ;
  3036                                  ;       Input/Output Routines
  3037                                  ;
  3038                                  ;       These routines read and/or write directly to ports.
  3039                                  ;
  3040                                  ;       PlaceCursor
  3041                                  ;       PutPrimaryEndOfInt
  3042                                  ;       PutSecondaryEndOfInt
  3043                                  ;       ResetSystem
  3044                                  ;       SetKeyboardLamps
  3045                                  ;       WaitForKeyInBuffer
  3046                                  ;       WaitForKeyOutBuffer
  3047                                  ;
  3048                                  ;=======================================================================================================================
  3049                                  ;-----------------------------------------------------------------------------------------------------------------------
  3050                                  ;
  3051                                  ;       Routine:        PlaceCursor
  3052                                  ;
  3053                                  ;       Description:    This routine positions the cursor on the console.
  3054                                  ;
  3055                                  ;       In:             DS      OS data selector
  3056                                  ;
  3057                                  ;-----------------------------------------------------------------------------------------------------------------------
  3058                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3059                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3060                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3061                                                          mul     ah                                              ;row offset
  3062                                                          add     al,[wbConsoleColumn]                            ;add column
  3063                                                          adc     ah,0                                            ;add overflow
  3064                                                          mov     ecx,eax                                         ;screen offset
  3065                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3066                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3067                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3068                                                          out     dx,al                                           ;select register
  3069                                                          inc     edx                                             ;data port
  3070                                                          mov     al,ch                                           ;hi-order cursor loc
  3071                                                          out     dx,al                                           ;store hi-order loc
  3072                                                          dec     edx                                             ;register select port
  3073                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3074                                                          out     dx,al                                           ;select register
  3075                                                          inc     edx                                             ;data port
  3076                                                          mov     al,cl                                           ;lo-order cursor loc
  3077                                                          out     dx,al                                           ;store lo-order loc
  3078                                                          pop     ecx                                             ;restore non-volatile regs
  3079                                                          ret                                                     ;return
  3080                                  ;-----------------------------------------------------------------------------------------------------------------------
  3081                                  ;
  3082                                  ;       Routine:        PutPrimaryEndOfInt
  3083                                  ;
  3084                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3085                                  ;
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3088                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3089                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3090                                                          ret                                                     ;return
  3091                                  ;-----------------------------------------------------------------------------------------------------------------------
  3092                                  ;
  3093                                  ;       Routine:        PutSecondaryEndOfInt
  3094                                  ;
  3095                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3096                                  ;
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3099                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3100                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3101                                                          ret                                                     ;return
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103                                  ;
  3104                                  ;       Routine:        ResetSystem
  3105                                  ;
  3106                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3107                                  ;
  3108                                  ;       Out:            N/A     This routine does not return.
  3109                                  ;
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3112                                                          loop    $                                               ;clear interrupts
  3113                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3114                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3115                                  .10                     sti                                                     ;enable maskable interrupts
  3116                                                          hlt                                                     ;halt until interrupt
  3117                                                          jmp     .10                                             ;repeat until reset kicks in
  3118                                  ;-----------------------------------------------------------------------------------------------------------------------
  3119                                  ;
  3120                                  ;       Routine:        SetKeyboardLamps
  3121                                  ;
  3122                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3123                                  ;
  3124                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3125                                  ;
  3126                                  ;-----------------------------------------------------------------------------------------------------------------------
  3127                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3128                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3129                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3130                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3131                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3132                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3133                                                          mov     al,bh                                           ;set/reset lamps value
  3134                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3135                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3136                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3137                                                          ret                                                     ;return
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;       Routine:        WaitForKeyInBuffer
  3141                                  ;
  3142                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3143                                  ;
  3144                                  ;       Out:            ZF      1 = Input buffer ready
  3145                                  ;                               0 = Input buffer not ready after timeout
  3146                                  ;
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3149                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3150                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3151                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3152                                                          loopnz  .10                                             ;yes, repeat till timeout
  3153                                                          pop     ecx                                             ;restore non-volatile regs
  3154                                                          ret                                                     ;return
  3155                                  ;-----------------------------------------------------------------------------------------------------------------------
  3156                                  ;
  3157                                  ;       Routine:        WaitForKeyOutBuffer
  3158                                  ;
  3159                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3160                                  ;
  3161                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3162                                  ;                               0 = Output buffer empty after timeout
  3163                                  ;
  3164                                  ;-----------------------------------------------------------------------------------------------------------------------
  3165                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3166                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3167                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3168                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3169                                                          loopz   .10                                             ;loop until output buffer bit
  3170                                                          pop     ecx                                             ;restore non-volatile regs
  3171                                                          ret                                                     ;return
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173                                  ;
  3174                                  ;       End of the Kernel Function Library
  3175                                  ;
  3176                                  ;-----------------------------------------------------------------------------------------------------------------------
  3177                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3178                                  ;=======================================================================================================================
  3179                                  ;
  3180                                  ;       Console Task
  3181                                  ;
  3182                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3183                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3184                                  ;       screen and responds to user commands.
  3185                                  ;
  3186                                  ;=======================================================================================================================
  3187                                  ;-----------------------------------------------------------------------------------------------------------------------
  3188                                  ;
  3189                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3190                                  ;
  3191                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3192                                  ;
  3193                                  ;-----------------------------------------------------------------------------------------------------------------------
  3194                                  section                 constack                                                ;console task stack
  3195                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197                                  ;
  3198                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3199                                  ;
  3200                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3201                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3202                                  ;       16 descriptors. Six are initially defined.
  3203                                  ;
  3204                                  ;-----------------------------------------------------------------------------------------------------------------------
  3205                                  section                 conldt                                                  ;console local descriptors
  3206                                                          dq      004093004780007Fh                               ;04 TSS alias
  3207                                                          dq      004093004700007Fh                               ;0c LDT alias
  3208                                                          dq      00409300400006FFh                               ;14 stack
  3209                                                          dq      00CF93000000FFFFh                               ;1c data
  3210                                                          dq      00409B0050000FFFh                               ;24 code
  3211                                                          dq      00409300480007FFh                               ;2c message queue
  3212                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3213                                  ;-----------------------------------------------------------------------------------------------------------------------
  3214                                  ;
  3215                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3216                                  ;
  3217                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3218                                  ;       segment. CS to console code.
  3219                                  ;
  3220                                  ;-----------------------------------------------------------------------------------------------------------------------
  3221                                  section                 contss                                                  ;console task state segment
  3222                                                          dd      0                                               ;00 back-link tss
  3223                                                          dd      0700h                                           ;04 esp ring 0
  3224                                                          dd      0014h                                           ;08 ss ring 0
  3225                                                          dd      0700h                                           ;0c esp ring 1
  3226                                                          dd      0014h                                           ;10 es ring 1
  3227                                                          dd      0700h                                           ;14 esp ring 2
  3228                                                          dd      0014h                                           ;18 ss ring 2
  3229                                                          dd      0                                               ;1c cr ring 3
  3230                                                          dd      0                                               ;20 eip
  3231                                                          dd      0200h                                           ;24 eflags
  3232                                                          dd      0                                               ;28 eax
  3233                                                          dd      0                                               ;2c ecx
  3234                                                          dd      0                                               ;30 edx
  3235                                                          dd      0                                               ;34 ebx
  3236                                                          dd      0700h                                           ;38 esp ring 3
  3237                                                          dd      0                                               ;3c ebp
  3238                                                          dd      0                                               ;40 esi
  3239                                                          dd      0                                               ;44 edi
  3240                                                          dd      001Ch                                           ;48 es
  3241                                                          dd      0024h                                           ;4c cs
  3242                                                          dd      0014h                                           ;50 ss ring 3
  3243                                                          dd      001Ch                                           ;54 ds
  3244                                                          dd      0                                               ;58 fs
  3245                                                          dd      0                                               ;5c gs
  3246                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3247                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3248                                  ;-----------------------------------------------------------------------------------------------------------------------
  3249                                  ;
  3250                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3251                                  ;
  3252                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3253                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3254                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3255                                  ;       event.
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  section                 conmque                                                 ;console message queue
  3259                                                          dd      8                                               ;head pointer
  3260                                                          dd      8                                               ;tail pointer
  3261                                                          times   510 dd 0                                        ;queue elements
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  ;
  3264                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3265                                  ;
  3266                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3267                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3268                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3269                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3270                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3271                                  ;       board input, echoing to the console screen and responding to user commands.
  3272                                  ;
  3273                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3274                                  ;
  3275                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3276                                  ;                               |  Real Mode Interrupt Vectors                  |
  3277                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3278                                  ;                               |  Reserved BIOS Memory Area                    |
  3279                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3280                                  ;                               |  Shared Kernel Memory Area                    |
  3281                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3282                                  ;                               |  Global Descriptor Table (GDT)                |
  3283                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3284                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3285                                  ;                       002000  +-----------------------------------------------+
  3286                                  ;                               |  Interrupt Handlers                           |
  3287                                  ;                               |  Kernel Function Library                      |
  3288                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3289                                  ;                               |  Console Task Stack Area                      |
  3290                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3291                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3292                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3293                                  ;                               |  Console Task Task State Segment (TSS)        |
  3294                                  ;                       004800  +-----------------------------------------------+
  3295                                  ;                               |  Console Task Message Queue                   |
  3296                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3297                                  ;                               |  Console Task Code                            |
  3298                                  ;                               |  Console Task Constants                       |
  3299                                  ;                       006000  +===============================================+
  3300                                  ;
  3301                                  ;-----------------------------------------------------------------------------------------------------------------------
  3302                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3303                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3304                                  
  3305                                                          clearConsoleScreen                                      ;clear the console screen
  3306                                                          putConsoleString czTitle                                ;display startup message
  3307                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3308                                                          placeCursor                                             ;set CRT cursor location
  3309                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3310                                                          putConsoleString czNewLine                              ;newline
  3311                                  
  3312                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3313                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3314                                                          call    ConTakeToken                                    ;handle console input
  3315                                                          mov     edx,wzConsoleToken                              ;token buffer
  3316                                                          call    ConDetermineCommand                             ;determine command number
  3317                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3318                                                          jb      .20                                             ;yes, branch
  3319                                  
  3320                                                          putConsoleString czUnknownCommand                       ;display error message
  3321                                  
  3322                                                          jmp     .10                                             ;next command
  3323                                  .20                     shl     eax,2                                           ;index into jump table
  3324                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3325                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3326                                                          call    eax                                             ;call command handler
  3327                                                          jmp     .10                                             ;next command
  3328                                  ;-----------------------------------------------------------------------------------------------------------------------
  3329                                  ;
  3330                                  ;       Routine:        ConInitializeData
  3331                                  ;
  3332                                  ;       Description:    This routine initializes console task variables.
  3333                                  ;
  3334                                  ;-----------------------------------------------------------------------------------------------------------------------
  3335                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3336                                                          push    edi                                             ;
  3337                                                          push    es                                              ;
  3338                                  ;
  3339                                  ;       Initialize console work areas.
  3340                                  ;
  3341                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3342                                                          pop     es                                              ;... into extra segment register
  3343                                                          mov     edi,ECONDATA                                    ;OS console data address
  3344                                                          xor     al,al                                           ;initialization value
  3345                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3346                                                          cld                                                     ;forward strings
  3347                                                          rep     stosb                                           ;initialize data
  3348                                  ;
  3349                                  ;       Restore and return.
  3350                                  ;
  3351                                                          pop     es                                              ;restore non-volatile regs
  3352                                                          pop     edi                                             ;
  3353                                                          pop     ecx                                             ;
  3354                                                          ret                                                     ;return
  3355                                  ;-----------------------------------------------------------------------------------------------------------------------
  3356                                  ;
  3357                                  ;       Routine:        ConTakeToken
  3358                                  ;
  3359                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3360                                  ;
  3361                                  ;       In:             DS:EDX  source buffer address
  3362                                  ;                       DS:EBX  target buffer address
  3363                                  ;
  3364                                  ;       Out:            DS:EDX  source buffer address
  3365                                  ;                       DS:EBX  target buffer address
  3366                                  ;
  3367                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3368                                  ;
  3369                                  ;-----------------------------------------------------------------------------------------------------------------------
  3370                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3371                                                          push    edi                                             ;
  3372                                                          push    es                                              ;
  3373                                                          push    ds                                              ;load data segment selector ...
  3374                                                          pop     es                                              ;... into extra segment reg
  3375                                                          mov     esi,edx                                         ;source buffer address
  3376                                                          mov     edi,ebx                                         ;target buffer address
  3377                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3378                                                          cld                                                     ;forward strings
  3379                                  .10                     lodsb                                                   ;load byte
  3380                                                          cmp     al,EASCIISPACE                                  ;space?
  3381                                                          je      .10                                             ;yes, continue
  3382                                                          test    al,al                                           ;end of line?
  3383                                                          jz      .40                                             ;yes, branch
  3384                                  .20                     stosb                                                   ;store byte
  3385                                                          lodsb                                                   ;load byte
  3386                                                          test    al,al                                           ;end of line?
  3387                                                          jz      .40                                             ;no, continue
  3388                                                          cmp     al,EASCIISPACE                                  ;space?
  3389                                                          jne     .20                                             ;no, continue
  3390                                  .30                     lodsb                                                   ;load byte
  3391                                                          cmp     al,EASCIISPACE                                  ;space?
  3392                                                          je      .30                                             ;yes, continue
  3393                                                          dec     esi                                             ;pre-position
  3394                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3395                                                          mov     edi,edx                                         ;source buffer address
  3396                                  .50                     lodsb                                                   ;remaining byte
  3397                                                          stosb                                                   ;move to front of buffer
  3398                                                          test    al,al                                           ;end of line?
  3399                                                          jnz     .50                                             ;no, continue
  3400                                                          pop     es                                              ;restore non-volatile regs
  3401                                                          pop     edi                                             ;
  3402                                                          pop     esi                                             ;
  3403                                                          ret                                                     ;return
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Routine:        ConDetermineCommand
  3407                                  ;
  3408                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3409                                  ;
  3410                                  ;       input:          DS:EDX  command address
  3411                                  ;
  3412                                  ;       output:         EAX     >=0     = command nbr
  3413                                  ;                               0       = unknown command
  3414                                  ;
  3415                                  ;-----------------------------------------------------------------------------------------------------------------------
  3416                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3417                                                          push    ecx                                             ;
  3418                                                          push    esi                                             ;
  3419                                                          push    edi                                             ;
  3420                                  
  3421                                                          upperCaseString                                         ;upper-case string at EDX
  3422                                  
  3423                                                          mov     esi,tConCmdTbl                                  ;commands table
  3424                                                          xor     edi,edi                                         ;intialize command number
  3425                                                          cld                                                     ;forward strings
  3426                                  .10                     lodsb                                                   ;command length
  3427                                                          movzx   ecx,al                                          ;command length
  3428                                                          jecxz   .20                                             ;branch if end of table
  3429                                                          mov     ebx,esi                                         ;table entry address
  3430                                                          add     esi,ecx                                         ;next table entry address
  3431                                  
  3432                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3433                                  
  3434                                                          jecxz   .20                                             ;branch if equal
  3435                                                          inc     edi                                             ;increment command nbr
  3436                                                          jmp     .10                                             ;repeat
  3437                                  .20                     mov     eax,edi                                         ;command number
  3438                                                          pop     edi                                             ;restore non-volatile regs
  3439                                                          pop     esi                                             ;
  3440                                                          pop     ecx                                             ;
  3441                                                          pop     ebx                                             ;
  3442                                                          ret                                                     ;return
  3443                                  ;-----------------------------------------------------------------------------------------------------------------------
  3444                                  ;
  3445                                  ;       Routine:        ConClear
  3446                                  ;
  3447                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3448                                  ;
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3451                                                          ret                                                     ;return
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;       Routine:        ConExit
  3455                                  ;
  3456                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3457                                  ;
  3458                                  ;-----------------------------------------------------------------------------------------------------------------------
  3459                                  ConExit                 resetSystem                                             ;issue system reset
  3460                                                          ret                                                     ;return
  3461                                  ;-----------------------------------------------------------------------------------------------------------------------
  3462                                  ;
  3463                                  ;       Routine:        ConVersion
  3464                                  ;
  3465                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3466                                  ;
  3467                                  ;-----------------------------------------------------------------------------------------------------------------------
  3468                                  ConVersion              putConsoleString czTitle                                ;display version message
  3469                                                          ret                                                     ;return
  3470                                  ;-----------------------------------------------------------------------------------------------------------------------
  3471                                  ;
  3472                                  ;       Tables
  3473                                  ;
  3474                                  ;-----------------------------------------------------------------------------------------------------------------------
  3475                                                                                                                  ;---------------------------------------
  3476                                                                                                                  ;  Command Jump Table
  3477                                                                                                                  ;---------------------------------------
  3478                                  tConJmpTbl              equ     $                                               ;command jump table
  3479                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3480                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  3481                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  3482                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3483                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3484                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  3485                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  3486                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3487                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3488                                                                                                                  ;---------------------------------------
  3489                                                                                                                  ;  Command Name Table
  3490                                                                                                                  ;---------------------------------------
  3491                                  tConCmdTbl              equ     $                                               ;command name table
  3492                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3493                                                          db      8,"VERSION",0                                   ;version command
  3494                                                          db      6,"CLEAR",0                                     ;clear command
  3495                                                          db      5,"EXIT",0                                      ;exit command
  3496                                                          db      5,"QUIT",0                                      ;quit command
  3497                                                          db      4,"CLS",0                                       ;cls command
  3498                                                          db      4,"VER",0                                       ;ver command
  3499                                                          db      0                                               ;end of table
  3500                                  ;-----------------------------------------------------------------------------------------------------------------------
  3501                                  ;
  3502                                  ;       Constants
  3503                                  ;
  3504                                  ;-----------------------------------------------------------------------------------------------------------------------
  3505                                  czNewLine               db      13,10,0                                         ;new line string
  3506                                  czPrompt                db      ":",0                                           ;prompt string
  3507                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3508                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3509                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3510                                  %endif
  3511                                  %ifdef BUILDDISK
  3512                                  ;-----------------------------------------------------------------------------------------------------------------------
  3513                                  ;
  3514                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3515                                  ;
  3516                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3517                                  ;
  3518                                  ;-----------------------------------------------------------------------------------------------------------------------
  3519                                  section                 unused                                                  ;unused disk space
  3520                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3521                                  %endif
  3522                                  ;=======================================================================================================================
  3523                                  ;
  3524                                  ;       End of Program Code
  3525                                  ;
  3526                                  ;=======================================================================================================================
