     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.007
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;                       clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   317                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   318                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   319                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;
   322                                  ;       Standards-Based Values
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       ASCII                                                                   EASCII...
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   331                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   332                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   333                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   334                                  EASCIISPACE             equ     020h                                            ;space
   335                                  EASCIIUPPERA            equ     041h                                            ;'A'
   336                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   337                                  EASCIILOWERA            equ     061h                                            ;'a'
   338                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   339                                  EASCIITILDE             equ     07Eh                                            ;'~'
   340                                  EASCIICASE              equ     00100000b                                       ;case bit
   341                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;
   344                                  ;       Operating System Values
   345                                  ;
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   350                                  ;
   351                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   352                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   356                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   357                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   358                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   359                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   360                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   361                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   362                                  ;-----------------------------------------------------------------------------------------------------------------------
   363                                  ;       Console Constants                                                       ECON...
   364                                  ;-----------------------------------------------------------------------------------------------------------------------
   365                                  ECONCOLS                equ     80                                              ;columns per row
   366                                  ECONROWS                equ     24                                              ;console rows
   367                                  ECONOIAROW              equ     24                                              ;operator information area row
   368                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   369                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   370                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   371                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   372                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   377                                  EGDTCGA                 equ     020h                                            ;cga video selector
   378                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   379                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   380                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   381                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   382                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   383                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  ;       Keyboard Flags                                                          EKEYF...
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   388                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   389                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   390                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   391                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   392                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   393                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   394                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   395                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   396                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   397                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  ;       Kernel Constants                                                        EKRN...
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   402                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   403                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   404                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;       Local Descriptor Table (LDT) Selectors                                  ESEL...
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Message Identifiers                                                     EMSG...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   413                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   414                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   415                                  ;=======================================================================================================================
   416                                  ;
   417                                  ;       Structures
   418                                  ;
   419                                  ;=======================================================================================================================
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;
   422                                  ;       MQUEUE
   423                                  ;
   424                                  ;       The MQUEUE structure maps memory used for a message queue.
   425                                  ;
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  struc                   MQUEUE
   428 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   429 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   430 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   431                                  endstruc
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  ;
   434                                  ;       OSDATA
   435                                  ;
   436                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   437                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   438                                  ;
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  struc                   OSDATA
   441 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   442 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   443 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   444 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   445 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   446 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   447 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   448 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   449 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   450 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   451 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   452 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   453 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   454 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   455 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   456 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   457 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   458 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   459 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   460 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   461 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   462 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   463 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   464 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   465 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   466 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   467 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   468 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   469 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   470 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   471 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   472 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   473 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   474 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   475 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   476 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   477 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   478 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   479 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   480 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   481 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   482 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   483 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   484 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   485 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   486 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   487 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   488 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   489 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   490 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   491 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   492 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   493 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   494 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   495 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   496 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   497 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   498 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   499 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   500 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   501 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   502 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   503 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   504 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   505 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   506 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   507 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   508 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   509 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   510 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   511 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   512 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   513 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   514 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   515 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   516 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   517 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   518 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   519 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   520 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   521 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   522 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   523 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   524 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   525 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   526 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   527 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   528 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   529 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   530 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   531 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   532 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   533 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   534 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   535 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   536 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   537 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   538 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   539 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   540 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   541 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  ;
   544                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   545                                  ;
   546                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   547                                  ;
   548                                  ;-----------------------------------------------------------------------------------------------------------------------
   549                                  ECONDATA                equ     ($)
   550 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   551 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   552 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   553 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   554 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   555 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   556 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   557 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   558 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   559 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   560 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   561 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   562 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   563 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   564                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   565                                  ;-----------------------------------------------------------------------------------------------------------------------
   566                                  ;
   567                                  ;       End of OS Variables
   568                                  ;
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  endstruc
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  ;
   573                                  ;       Macros
   574                                  ;
   575                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   576                                  ;
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  %macro                  mint    1
   579                                  _%1                     equ     ($-$$) / EX86DESCLEN
   580                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   581                                  %endmacro
   582                                  %macro                  mtrap   1
   583                                  _%1                     equ     ($-$$) / EX86DESCLEN
   584                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   585                                  %endmacro
   586                                  %macro                  menter  1
   587                                  ?%1                     equ     ($-$$)
   588                                  %endmacro
   589                                  %macro                  tsvce   1
   590                                  e%1                     equ     ($-tsvc)/4
   591                                                          dd      %1
   592                                  %endmacro
   593                                  %ifdef BUILDBOOT
   594                                  ;=======================================================================================================================
   595                                  ;
   596                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   597                                  ;
   598                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   599                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   600                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   601                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   602                                  ;
   603                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   604                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   605                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   606                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   607                                  ;       immediately followed by a disk parameter table.
   608                                  ;
   609                                  ;=======================================================================================================================
   610                                                          cpu     8086                                            ;assume minimal CPU
   611                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   612                                                          bits    16                                              ;16-bit code at power-up
   613                                  %ifdef BUILDPREP
   614                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   615                                  %else
   616                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   617                                  %endif
   618                                  ;-----------------------------------------------------------------------------------------------------------------------
   619                                  ;
   620                                  ;       Disk Parameter Table
   621                                  ;
   622                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   623                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   624                                  ;
   625                                  ;-----------------------------------------------------------------------------------------------------------------------
   626                                                          db      "CustomOS"                                      ;eight-byte label
   627                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   628                                  cbClusterSectors        db      1                                               ;sectors per cluster
   629                                  cwReservedSectors       dw      1                                               ;reserved sectors
   630                                  cbFatCount              db      2                                               ;file allocation table copies
   631                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   632                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   633                                  cbDiskType              db      0F0h                                            ;1.44MB
   634                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   635                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   636                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   637                                  cwDiskSides             dw      2                                               ;sides per disk
   638                                  cwSpecialSectors        dw      0                                               ;special sectors
   639                                  ;
   640                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   641                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   642                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   643                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   644                                  ;       given several possible starting values for CS:IP.
   645                                  ;
   646                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   647                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   648                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   649                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   650                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   651                                                          mov     cl,4                                            ;shift count
   652                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   653                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   654                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   655                                  ;
   656                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   657                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   658                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   659                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   660                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   661                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   662                                  ;
   663                                                          sub     bx,16                                           ;BX = 07b0
   664                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   665                                                          mov     es,bx                                           ;ES = 07b0 = psp
   666                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   667                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   668                                  ;
   669                                  ;       Our boot addressability is now set up according to the following diagram.
   670                                  ;
   671                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   672                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   673                                  ;                               |  256 = 100h bytes                             |
   674                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   675                                  ;                               |  Boot Sector (vstart=0100h)                   |
   676                                  ;                               |  1 sector = 512 = 200h bytes                  |
   677                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   678                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   679                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   680                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   681                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   682                                  ;                               |  2 sectors = 1024 = 400h bytes
   683                                  ;                       009400  +-----------------------------------------------+ DS:1900
   684                                  ;
   685                                  ;       On entry, DL indicates the drive being booted from.
   686                                  ;
   687                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   688                                  ;
   689                                  ;       Compute directory i/o buffer address.
   690                                  ;
   691                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   692                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   693                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   694                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   695                                  ;
   696                                  ;       Compute segment where os.com will be loaded.
   697                                  ;
   698                                                          shr     ax,cl                                           ;AX = 0150
   699                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   700                                                          sub     ax,16                                           ;AX = 08f0
   701                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   702                                  ;
   703                                  ;       Set the video mode to 80 column, 25 row, text.
   704                                  ;
   705                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   706                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   707                                  ;
   708                                  ;       Write a message to the console so we know we have our addressability established.
   709                                  ;
   710                                                          mov     si,czLoadMsg                                    ;loading message
   711                                                          call    BootPrint                                       ;display loader message
   712                                  ;
   713                                  ;       Initialize the number of directory sectors to search.
   714                                  ;
   715                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   716                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   717                                  ;
   718                                  ;       Compute number of directory sectors and initialize overhead count.
   719                                  ;
   720                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   721                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   722                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   723                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   724                                  ;
   725                                  ;       Compute directory entries per sector.
   726                                  ;
   727                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   728                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   729                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   730                                  ;
   731                                  ;       Compute first logical directory sector and update overhead count.
   732                                  ;
   733                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   734                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   735                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   736                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   737                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   738                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   739                                  ;
   740                                  ;       Read directory sector.
   741                                  ;
   742                                  .30                     mov     al,1                                            ;sector count
   743                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   744                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   745                                                          call    ReadSector                                      ;read sector into es:bx
   746                                  ;
   747                                  ;       Setup variables to search this directory sector.
   748                                  ;
   749                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   750                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   751                                                          jna     .40                                             ;no, continue
   752                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   753                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   754                                                          mov     si,cbKernelProgram                              ;program name
   755                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   756                                  ;
   757                                  ;       Loop through directory sectors searching for kernel program.
   758                                  ;
   759                                  .50                     push    si                                              ;save kernel name address
   760                                                          push    di                                              ;save dir i/o buffer address
   761                                                          mov     cx,11                                           ;length of 8+3 name
   762                                                          cld                                                     ;forward strings
   763                                                          repe    cmpsb                                           ;compare entry name
   764                                                          pop     di                                              ;restore dir i/o buffer address
   765                                                          pop     si                                              ;restore kernel name address
   766                                                          je      .60                                             ;exit loop if found
   767                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   768                                                          dec     ax                                              ;decrement remaining entries
   769                                                          jnz     .50                                             ;next entry
   770                                  ;
   771                                  ;       Repeat search if we are not at the end of the directory.
   772                                  ;
   773                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   774                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   775                                                          jne     .30                                             ;no, get next sector
   776                                                          mov     si,czNoKernel                                   ;missing kernel message
   777                                                          jmp     BootExit                                        ;display message and exit
   778                                  ;
   779                                  ;       If we find the kernel program in the directory, read the FAT.
   780                                  ;
   781                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   782                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   783                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   784                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   785                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   786                                                          call    ReadSector                                      ;read FAT into buffer
   787                                  ;
   788                                  ;       Get the starting cluster of the kernel program and target address.
   789                                  ;
   790                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   791                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   792                                  ;
   793                                  ;       Read each program cluster into RAM.
   794                                  ;
   795                                  .70                     push    ax                                              ;save cluster nbr
   796                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   797                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   798                                                          mov     [wbReadCount],cl                                ;save sectors to read
   799                                                          xor     ch,ch                                           ;CX = sectors per cluster
   800                                                          mul     cx                                              ;DX:AX = logical cluster sector
   801                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   802                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   803                                                          call    ReadSector                                      ;read sectors into ES:BX
   804                                  ;
   805                                  ;       Update buffer pointer for next cluster.
   806                                  ;
   807                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   808                                                          xor     ah,ah                                           ;AX = sectors per cluster
   809                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   810                                                          add     bx,ax                                           ;BX = next cluster target address
   811                                                          pop     ax                                              ;AX = restore cluster nbr
   812                                  ;
   813                                  ;       Compute next cluster number.
   814                                  ;
   815                                                          mov     cx,ax                                           ;CX = cluster nbr
   816                                                          mov     di,ax                                           ;DI = cluster nbr
   817                                                          shr     ax,1                                            ;AX = cluster/2
   818                                                          mov     dx,ax                                           ;DX = cluster/2
   819                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   820                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   821                                                          and     di,1                                            ;get low bit
   822                                                          add     di,ax                                           ;add one if cluster is odd
   823                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   824                                                          mov     ax,[di]                                         ;get cluster bytes
   825                                  ;
   826                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   827                                  ;
   828                                                          test    cl,1                                            ;is cluster odd?
   829                                                          jz      .80                                             ;no, skip ahead
   830                                                          mov     cl,4                                            ;shift count
   831                                                          shr     ax,cl                                           ;shift nybble low
   832                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   833                                                          cmp     ax,0FFFh                                        ;end of chain?
   834                                                          jne     .70                                             ;no, continue
   835                                  ;
   836                                  ;       Transfer control to the operating system program.
   837                                  ;
   838                                                          db      0EAh                                            ;jmp seg:offset
   839                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   840                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   841                                  ;
   842                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   843                                  ;
   844                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   845                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   846                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   847                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   848                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   849                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   850                                                          mov     ax,dx                                           ;AX = cyl sector
   851                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   852                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   853                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   854                                  ;
   855                                  ;       Try maxtries times to read sector.
   856                                  ;
   857                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   858                                  .10                     push    bx                                              ;save buffer address
   859                                                          push    cx                                              ;save retry count
   860                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   861                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   862                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   863                                                          int     EBIOSINTDISKETTE                                ;read sector
   864                                                          pop     cx                                              ;restore retry count
   865                                                          pop     bx                                              ;restore buffer address
   866                                                          jnc     BootReturn                                      ;skip ahead if done
   867                                                          loop    .10                                             ;retry
   868                                  ;
   869                                  ;       Handle disk error: convert to ASCII and store in error string.
   870                                  ;
   871                                                          mov     al,ah                                           ;AL = bios error code
   872                                                          xor     ah,ah                                           ;AX = bios error code
   873                                                          mov     dl,16                                           ;divisor for base 16
   874                                                          div     dl                                              ;AL = hi order, AH = lo order
   875                                                          or      ax,03030h                                       ;apply ASCII zone bits
   876                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   877                                                          jb      .20                                             ;continue if numeral
   878                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   879                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   880                                                          jb      .30                                             ;continue if numeral
   881                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   882                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   883                                                          mov     si,czErrorMsg                                   ;error message address
   884                                  BootExit                call    BootPrint                                       ;display messge to console
   885                                  ;
   886                                  ;       Wait for a key press.
   887                                  ;
   888                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   889                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   890                                                          jnz     .20                                             ;continue if key pressed
   891                                                          sti                                                     ;enable maskable interrupts
   892                                                          hlt                                                     ;wait for interrupt
   893                                                          jmp     .10                                             ;repeat
   894                                  ;
   895                                  ;       Reset the system.
   896                                  ;
   897                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   898                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   899                                  .30                     sti                                                     ;enable maskable interrupts
   900                                                          hlt                                                     ;stop until reset, int, nmi
   901                                                          jmp     .30                                             ;loop until restart kicks in
   902                                  ;
   903                                  ;       Display text message.
   904                                  ;
   905                                  BootPrint               cld                                                     ;forward strings
   906                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
   907                                                          test    al,al                                           ;end of string?
   908                                                          jz      BootReturn                                      ;... yes, exit our loop
   909                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   910                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   911                                                          jmp     .10                                             ;repeat until done
   912                                  BootReturn              ret                                                     ;return
   913                                  ;-----------------------------------------------------------------------------------------------------------------------
   914                                  ;
   915                                  ;       Constants
   916                                  ;
   917                                  ;-----------------------------------------------------------------------------------------------------------------------
   918                                                          align   2
   919                                  cwEntryLen              dw      32                                              ;length of directory entry
   920                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   921                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   922                                  czErrorMsg              db      "Disk error "                                   ;error message
   923                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   924                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926                                  ;
   927                                  ;       Work Areas
   928                                  ;
   929                                  ;-----------------------------------------------------------------------------------------------------------------------
   930                                                          align   2
   931                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
   932                                  wwEntriesLeft           dw      0                                               ;directory entries to search
   933                                  wwOverhead              dw      0                                               ;overhead sectors
   934                                  wwSectorEntries         dw      0                                               ;directory entries per sector
   935                                  wwLogicalSector         dw      0                                               ;current logical sector
   936                                  wwReadCountCommand      equ     $                                               ;read count and command
   937                                  wbReadCount             db      0                                               ;sectors to read
   938                                  cbReadCommand           db      2                                               ;BIOS read disk fn code
   939                                  wwDriveHead             equ     $                                               ;drive, head (word)
   940                                  wbDrive                 db      0                                               ;drive
   941                                  wbHead                  db      0                                               ;head
   942                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   943                                                          db      0                                               ;sector
   944                                  wbTrack                 db      0                                               ;track
   945                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
   946                                                          db      055h,0AAh                                       ;end of sector signature
   947                                  %endif
   948                                  %ifdef BUILDPREP
   949                                  ;=======================================================================================================================
   950                                  ;
   951                                  ;       Diskette Preparation Code
   952                                  ;
   953                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   954                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   955                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   956                                  ;
   957                                  ;=======================================================================================================================
   958                                  ;
   959                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   960                                  ;
   961                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   962                                                          call    BootPrint                                       ;display message
   963                                  ;
   964                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   965                                  ;
   966                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   967                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   968                                                          jnz     .20                                             ;continue if key pressed
   969                                                          sti                                                     ;enable interrupts
   970                                                          hlt                                                     ;wait for interrupt
   971                                                          jmp     .10                                             ;repeat
   972                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   973                                                          je      .30                                             ;yes, branch
   974                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   975                                                          jne     .10                                             ;no, repeat
   976                                                          jmp     .120                                            ;yes, exit program
   977                                  ;
   978                                  ;       Display writing-sector message and patch the JMP instruction.
   979                                  ;
   980                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   981                                                          call    BootPrint                                       ;display message
   982                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   983                                                          mov     ax,01Bh                                         ;address past disk parameter table
   984                                                          mov     [bx],ax                                         ;update the JMP instruction
   985                                  ;
   986                                  ;       Try to read the boot sector.
   987                                  ;
   988                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   989                                  .40                     push    cx                                              ;save remaining tries
   990                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   991                                                          mov     dx,0                                            ;head zero, drive zero
   992                                                          mov     cx,1                                            ;track zero, sector one
   993                                                          mov     ax,0201h                                        ;read one sector
   994                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   995                                                          pop     cx                                              ;restore remaining retries
   996                                                          jnc     .50                                             ;skip ahead if successful
   997                                                          loop    .40                                             ;try again
   998                                                          mov     si,czPrepMsg20                                  ;read-error message address
   999                                                          jmp     .70                                             ;branch to error routine
  1000                                  ;
  1001                                  ;       Copy diskette parms from input buffer to output buffer.
  1002                                  ;
  1003                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1004                                                          add     si,11                                           ;skip over JMP and system ID
  1005                                                          mov     di,Boot                                         ;output buffer address
  1006                                                          add     di,11                                           ;skip over JMP and system ID
  1007                                                          mov     cx,19                                           ;length of diskette parameters
  1008                                                          cld                                                     ;forward string copies
  1009                                                          rep     movsb                                           ;copy diskette parameters
  1010                                  ;
  1011                                  ;       Try to write boot sector to diskette.
  1012                                  ;
  1013                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1014                                  .60                     push    cx                                              ;save remaining tries
  1015                                                          mov     bx,Boot                                         ;output buffer address
  1016                                                          mov     dx,0                                            ;head zero, drive zero
  1017                                                          mov     cx,1                                            ;track zero, sector one
  1018                                                          mov     ax,0301h                                        ;write one sector
  1019                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1020                                                          pop     cx                                              ;restore remaining retries
  1021                                                          jnc     .100                                            ;skip ahead if successful
  1022                                                          loop    .60                                             ;try again
  1023                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1024                                  ;
  1025                                  ;       Convert the error code to ASCII and display the error message.
  1026                                  ;
  1027                                  .70                     push    ax                                              ;save error code
  1028                                                          mov     al,ah                                           ;copy error code
  1029                                                          mov     ah,0                                            ;AX = error code
  1030                                                          mov     dl,10h                                          ;hexadecimal divisor
  1031                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1032                                                          or      ax,03030h                                       ;add ASCII zone digits
  1033                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1034                                                          jb      .80                                             ;yes, continue
  1035                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1036                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1037                                                          jb      .90                                             ;yes, continue
  1038                                                          add     al,7                                            ;no, make ASCII
  1039                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1040                                                          call    BootPrint                                       ;write error message
  1041                                                          pop     ax                                              ;restore error code
  1042                                  ;
  1043                                  ;       Display the completion message.
  1044                                  ;
  1045                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1046                                                          mov     al,ah                                           ;BIOS return code
  1047                                                          cmp     al,0                                            ;success?
  1048                                                          je      .110                                            ;yes, continue
  1049                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1050                                                          cmp     al,1                                            ;disk parameter error?
  1051                                                          je      .110                                            ;yes, continue
  1052                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1053                                                          cmp     al,2                                            ;address mark not found?
  1054                                                          je      .110                                            ;yes, continue
  1055                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1056                                                          cmp     al,3                                            ;protected disk?
  1057                                                          je      .110                                            ;yes, continue
  1058                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1059                                                          cmp     al,6                                            ;diskette removed?
  1060                                                          je      .110                                            ;yes, continue
  1061                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1062                                                          cmp     al,80H                                          ;drive timed out?
  1063                                                          je      .110                                            ;yes, continue
  1064                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1065                                  .110                    call    BootPrint                                       ;display result message
  1066                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1067                                                          int     021h                                            ;terminate DOS program
  1068                                                          ret                                                     ;return (should not execute)
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070                                  ;
  1071                                  ;       Diskette Preparation Messages
  1072                                  ;
  1073                                  ;-----------------------------------------------------------------------------------------------------------------------
  1074                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1075                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1076                                                          db      13,10
  1077                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1078                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1079                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1080                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1081                                                          db      13,10,0
  1082                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1083                                                          db      13,10,0
  1084                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1085                                                          db      13,10,0
  1086                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1087                                                          db      13,10,0
  1088                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1089                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1090                                                          db      13,10,0
  1091                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1092                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1093                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1094                                                          db      13,10,"and retry."
  1095                                                          db      13,10,0
  1096                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1097                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1098                                                          db      13,10,"using another diskette."
  1099                                                          db      13,10,0
  1100                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1101                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1102                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1103                                                          db      13,10,0
  1104                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1105                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1106                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1107                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1108                                                          db      13,10,"is properly inserted in the diskette drive."
  1109                                                          db      13,10,0
  1110                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1111                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1112                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1113                                                          db      13,10,0
  1114                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1115                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1116                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1117                                                          db      13,10,0
  1118                                  wcPrepInBuf             equ     $
  1119                                  %endif
  1120                                  %ifdef BUILDDISK
  1121                                  ;=======================================================================================================================
  1122                                  ;
  1123                                  ;       File Allocation Tables
  1124                                  ;
  1125                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1126                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1127                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1128                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1129                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1130                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1131                                  ;       the last cluster in the chain.
  1132                                  ;
  1133                                  ;       Every three bytes encode two FAT entries as follows:
  1134                                  ;
  1135                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1136                                  ;
  1137                                  ;=======================================================================================================================
  1138                                  ;-----------------------------------------------------------------------------------------------------------------------
  1139                                  ;
  1140                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1141                                  ;
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  section                 fat1                                                    ;first copy of FAT
  1144                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1145                                                          db      005h,060h,000h, 007h,080h,000h
  1146                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1147                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1148                                                          db      011h,020h,001h, 013h,040h,001h
  1149                                                          db      015h,060h,001h, 017h,080h,001h
  1150                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1151                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1152                                                          db      021h,020h,002h, 023h,040h,002h
  1153                                                          db      025h,060h,002h, 027h,080h,002h
  1154                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1155                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1156                                  ;-----------------------------------------------------------------------------------------------------------------------
  1157                                  ;
  1158                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1159                                  ;
  1160                                  ;-----------------------------------------------------------------------------------------------------------------------
  1161                                  section                 fat2                                                    ;second copy of FAT
  1162                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1163                                                          db      005h,060h,000h, 007h,080h,000h
  1164                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1165                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1166                                                          db      011h,020h,001h, 013h,040h,001h
  1167                                                          db      015h,060h,001h, 017h,080h,001h
  1168                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1169                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1170                                                          db      021h,020h,002h, 023h,040h,002h
  1171                                                          db      025h,060h,002h, 027h,080h,002h
  1172                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1173                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1174                                  ;-----------------------------------------------------------------------------------------------------------------------
  1175                                  ;
  1176                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1177                                  ;
  1178                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1179                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1180                                  ;       copy.
  1181                                  ;
  1182                                  ;-----------------------------------------------------------------------------------------------------------------------
  1183                                  section                 dir                                                     ;diskette directory
  1184                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1185                                                          db      020h                                            ;attribute (archive bit set)
  1186                                                          times   10 db 0                                         ;unused
  1187                                                          dw      0h                                              ;time
  1188                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1189                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1190                                                          dw      2                                               ;first cluster
  1191                                                          dd      05400h                                          ;file size
  1192                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1193                                  %endif
  1194                                  %ifdef BUILDCOM
  1195                                  ;=======================================================================================================================
  1196                                  ;
  1197                                  ;       OS.COM
  1198                                  ;
  1199                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1200                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1201                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1202                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1203                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1204                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1205                                  ;
  1206                                  ;       Our loader addressability is set up according to the following diagram.
  1207                                  ;
  1208                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1209                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1210                                  ;                               |  256 = 100h bytes                             |
  1211                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1212                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1213                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1214                                  ;                       007e00  +-----------------------------------------------+
  1215                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1216                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1217                                  ;                               |                                               |
  1218                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1219                                  ;                               |                                               |
  1220                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1221                                  ;                               |  Loader Code                                  |
  1222                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1223                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1224                                  ;
  1225                                  ;=======================================================================================================================
  1226                                  ;-----------------------------------------------------------------------------------------------------------------------
  1227                                  ;
  1228                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1229                                  ;
  1230                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1231                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1232                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1233                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1234                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1235                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1236                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1237                                  ;       registers.
  1238                                  ;
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240                                                          cpu     8086                                            ;assume minimal CPU
  1241                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1242                                                          bits    16                                              ;this is 16-bit code
  1243 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1244 00000001 1F                                              pop     ds                                              ;...as our data segment
  1245 00000002 0E                                              push    cs                                              ;use the code segment
  1246 00000003 07                                              pop     es                                              ;...as our extra segment
  1247                                  ;
  1248                                  ;       Write a message to the console so we know we have our addressability established.
  1249                                  ;
  1250 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1251 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1252                                  ;
  1253                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1254                                  ;
  1255 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1256 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1257 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1258 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1259                                                          cpu     386                                             ;allow 80386 instructions
  1260 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1261 00000017 E89600                                          call    PutTTYString                                    ;display message
  1262                                  ;
  1263                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1264                                  ;
  1265 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1266 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1267 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1268 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1269 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1270 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1271 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1272 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1273 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1274 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1275                                  ;
  1276                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1277                                  ;
  1278 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1279 00000038 07                                              pop     es                                              ;... as target segment
  1280 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1281 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1282 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1283 00000041 FC                                              cld                                                     ;forward strings
  1284 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1285 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1286 00000047 E86600                                          call    PutTTYString                                    ;display message
  1287                                  ;
  1288                                  ;       Switch to protected mode.
  1289                                  ;
  1290 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1291 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1292 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1293 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1294 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1295 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1296 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1297 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1298 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1299 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1300 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1301                                  ;
  1302                                  ;       Enable hardware and maskable interrupts.
  1303                                  ;
  1304 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1305 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1306 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1307 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1308                                  ;
  1309                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1310                                  ;
  1311 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1312 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1313 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  ;
  1316                                  ;       Routine:        LoaderExit
  1317                                  ;
  1318                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1319                                  ;
  1320                                  ;       In:             DS:SI   string address
  1321                                  ;
  1322                                  ;-----------------------------------------------------------------------------------------------------------------------
  1323 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1324                                  ;
  1325                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1326                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1327                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1328                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1329                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1330                                  ;
  1331 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1332 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1333 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1334 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1335 00000085 F4                                              hlt                                                     ;wait for interrupt
  1336 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1337                                  ;
  1338                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1339                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1340                                  ;       HLT until the system resets.
  1341                                  ;
  1342 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1343 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1344 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1345 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1346 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1347                                  ;-----------------------------------------------------------------------------------------------------------------------
  1348                                  ;
  1349                                  ;       Routine:        GetCPUType
  1350                                  ;
  1351                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1352                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1353                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1354                                  ;
  1355                                  ;       Out:            AX      0 = 808x, v20, etc.
  1356                                  ;                               1 = 80186
  1357                                  ;                               2 = 80286
  1358                                  ;                               3 = 80386
  1359                                  ;
  1360                                  ;-----------------------------------------------------------------------------------------------------------------------
  1361 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1362 00000092 B120                                            mov     cl,32                                           ;shift count
  1363 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1364 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1365 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1366                                                          cpu     186
  1367 0000009A 54                                              push    sp                                              ;save stack pointer
  1368 0000009B 59                                              pop     cx                                              ;...into cx
  1369 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1370 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1371                                                          cpu     286
  1372 000000A0 40                                              inc     ax                                              ;AX = 2
  1373 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1374 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1375 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1376 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1377 000000AE 40                                              inc     ax                                              ;AX = 3
  1378 000000AF C3                      .10                     ret                                                     ;return
  1379                                  ;-----------------------------------------------------------------------------------------------------------------------
  1380                                  ;
  1381                                  ;       Routine:        PutTTYString
  1382                                  ;
  1383                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1384                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1385                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1386                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1387                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1388                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1389                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1390                                  ;                       to LODSB is not needed.
  1391                                  ;
  1392                                  ;       In:             DS:SI   address of string
  1393                                  ;
  1394                                  ;       Out:            DF      0
  1395                                  ;                       ZF      1
  1396                                  ;                       AL      0
  1397                                  ;
  1398                                  ;-----------------------------------------------------------------------------------------------------------------------
  1399 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1400 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1401 000000B2 84C0                                            test    al,al                                           ;end of string?
  1402 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1403 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1404 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1405 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1406 000000BC C3                      .20                     ret                                                     ;return
  1407                                  ;-----------------------------------------------------------------------------------------------------------------------
  1408                                  ;
  1409                                  ;       Loader Data
  1410                                  ;
  1411                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1412                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1413                                  ;
  1414                                  ;-----------------------------------------------------------------------------------------------------------------------
  1415 000000BD 90                                              align   2
  1416 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1417 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1418 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1419 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1420 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1420 000000D1 74696E672073797374-
  1420 000000DA 656D20726571756972-
  1420 000000E3 657320616E20693338-
  1420 000000EC 36206F72206C617465-
  1420 000000F5 722070726F63657373-
  1420 000000FE 6F722E0D0A         
  1421 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1421 0000010C 65737320616E79206B-
  1421 00000115 657920746F20726573-
  1421 0000011E 746172742074686520-
  1421 00000127 636F6D70757465722E-
  1421 00000130 0D0A00             
  1422 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1423 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1423 00000145 7265640D0A00       
  1424 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1424 00000154 616465640D0A00     
  1425 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1425 00000164 4F530D0A00         
  1426 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1427                                  ;=======================================================================================================================
  1428                                  ;
  1429                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1430                                  ;
  1431                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1432                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1433                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1434                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1435                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1436                                  ;
  1437                                  ;=======================================================================================================================
  1438                                  ;=======================================================================================================================
  1439                                  ;
  1440                                  ;       Kernel Tables
  1441                                  ;
  1442                                  ;=======================================================================================================================
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444                                  ;
  1445                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1446                                  ;
  1447                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1448                                  ;       first descriptor must be all nulls.
  1449                                  ;
  1450                                  ;       6   5         4         3         2         1         0
  1451                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1452                                  ;       ----------------------------------------------------------------
  1453                                  ;       h......hffffmmmma......ab......................bn..............n
  1454                                  ;       00000000                        all areas have base addresses below 2^24
  1455                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1456                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1457                                  ;                   1001                present, ring-0, selector
  1458                                  ;
  1459                                  ;       h...h   hi-order base address (bits 24-31)
  1460                                  ;       ffff    flags
  1461                                  ;       mmmm    hi-order limit (bits 16-19)
  1462                                  ;       a...a   access
  1463                                  ;       b...b   lo-order base address (bits 0-23)
  1464                                  ;       n...n   lo-order limit (bits 0-15)
  1465                                  ;
  1466                                  ;-----------------------------------------------------------------------------------------------------------------------
  1467                                  section                 gdt                                                     ;global descriptor table
  1468 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1469 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1470 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1471 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1472 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1473 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1474 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1475 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1476 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1477 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1478 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1479 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1480 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1481 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1482 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1483                                  ;-----------------------------------------------------------------------------------------------------------------------
  1484                                  ;
  1485                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1486                                  ;
  1487                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1488                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1489                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1490                                  ;
  1491                                  ;       6   5         4         3         2         1         0
  1492                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1493                                  ;       ----------------------------------------------------------------
  1494                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1495                                  ;
  1496                                  ;       h...h   high-order offset (bits 16-31)
  1497                                  ;       P       present (0=unused interrupt)
  1498                                  ;       zz      descriptor privilege level
  1499                                  ;       S       storage segment (must be zero for IDT)
  1500                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1501                                  ;       S...S   handling code selector in GDT
  1502                                  ;       l...l   lo-order offset (bits 0-15)
  1503                                  ;
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                  section                 idt                                                     ;interrupt descriptor table
  1506                                                          mint    dividebyzero                                    ;00 divide by zero
  1506                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1506 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1507                                                          mint    singlestep                                      ;01 single step
  1507                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1507 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1508                                                          mint    nmi                                             ;02 non-maskable
  1508                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1508 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1509                                                          mint    break                                           ;03 break
  1509                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1509 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1510                                                          mint    into                                            ;04 into
  1510                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1510 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1511                                                          mint    bounds                                          ;05 bounds
  1511                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1511 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1512                                                          mint    badopcode                                       ;06 bad op code
  1512                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1512 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1513                                                          mint    nocoproc                                        ;07 no coprocessor
  1513                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1513 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1514                                                          mint    doublefault                                     ;08 double-fault
  1514                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1514 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1515                                                          mint    operand                                         ;09 operand
  1515                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1515 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1516                                                          mint    badtss                                          ;0a bad TSS
  1516                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1516 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1517                                                          mint    notpresent                                      ;0b not-present
  1517                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1517 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1518                                                          mint    stacklimit                                      ;0c stack limit
  1518                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1518 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1519                                                          mint    protection                                      ;0d general protection fault
  1519                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1519 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1520                                                          mint    int14                                           ;0e (reserved)
  1520                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1520 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1521                                                          mint    int15                                           ;0f (reserved)
  1521                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1521 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1522                                                          mint    coproccalc                                      ;10 (reserved)
  1522                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1522 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1523                                                          mint    int17                                           ;11 (reserved)
  1523                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1523 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1524                                                          mint    int18                                           ;12 (reserved)
  1524                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1524 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1525                                                          mint    int19                                           ;13 (reserved)
  1525                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1525 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1526                                                          mint    int20                                           ;14 (reserved)
  1526                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1526 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1527                                                          mint    int21                                           ;15 (reserved)
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mint    int22                                           ;16 (reserved)
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529                                                          mint    int23                                           ;17 (reserved)
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mint    int24                                           ;18 (reserved)
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mint    int25                                           ;19 (reserved)
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mint    int26                                           ;1a (reserved)
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mint    int27                                           ;1b (reserved)
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mint    int28                                           ;1c (reserved)
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mint    int29                                           ;1d (reserved)
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mint    int30                                           ;1e (reserved)
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mint    int31                                           ;1f (reserved)
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000100 3C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000108 8C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000110 E7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mtrap   com2                                            ;23 IRQ3 com2
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000118 EA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mtrap   com1                                            ;24 IRQ4 com1
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000120 ED054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000128 F0054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000130 F3054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 00000138 07064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 00000140 0A064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 00000148 0D064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 00000150 10064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 00000158 13064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 00000160 16064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 00000168 19064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 00000170 1C064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 00000178 1F064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mtrap   svc                                             ;30 OS services
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 00000180 30064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1556                                  ;=======================================================================================================================
  1557                                  ;
  1558                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1559                                  ;
  1560                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1561                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1562                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1563                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1564                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1565                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1566                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1567                                  ;
  1568                                  ;=======================================================================================================================
  1569                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1570                                                          cpu     386                                             ;allow 80386 instructions
  1571                                                          bits    32                                              ;this is 32-bit code
  1572                                  ;=======================================================================================================================
  1573                                  ;
  1574                                  ;       CPU Interrupt Handlers
  1575                                  ;
  1576                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1577                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1578                                  ;
  1579                                  ;=======================================================================================================================
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                  ;
  1582                                  ;       INT0    Divide By Zero
  1583                                  ;
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                                          menter  dividebyzero                                    ;divide by zero
  1585                              <1> ?%1 equ ($-$$)
  1586 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1587 00000002 68[56010000]                                    push    czIntDivideByZero                               ;store message offset
  1588 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1589                                  ;-----------------------------------------------------------------------------------------------------------------------
  1590                                  ;
  1591                                  ;       INT1    Single Step
  1592                                  ;
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                                          menter  singlestep                                      ;single step
  1594                              <1> ?%1 equ ($-$$)
  1595 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1596 0000000E 68[67010000]                                    push    czIntSingleStep                                 ;store message offset
  1597 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1598                                  ;-----------------------------------------------------------------------------------------------------------------------
  1599                                  ;
  1600                                  ;       INT2    Non-Maskable Interrupt
  1601                                  ;
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                                          menter  nmi                                             ;non-maskable
  1603                              <1> ?%1 equ ($-$$)
  1604 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1605 0000001A 68[73010000]                                    push    czIntNonMaskable                                ;store message offset
  1606 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                  ;
  1609                                  ;       INT3    Break
  1610                                  ;
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                                          menter  break                                           ;break
  1612                              <1> ?%1 equ ($-$$)
  1613 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1614 00000026 68[8A010000]                                    push    czIntBreak                                      ;store message offset
  1615 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  ;
  1618                                  ;       INT4    Into
  1619                                  ;
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                                          menter  into                                            ;into
  1621                              <1> ?%1 equ ($-$$)
  1622 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1623 00000032 68[90010000]                                    push    czIntInto                                       ;store message offset
  1624 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT5    Bounds
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  bounds                                          ;bounds
  1630                              <1> ?%1 equ ($-$$)
  1631 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1632 0000003E 68[95010000]                                    push    czIntBounds                                     ;store message offset
  1633 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT6    Bad Operation Code
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  badopcode                                       ;bad opcode interrupt
  1639                              <1> ?%1 equ ($-$$)
  1640 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1641 0000004A 68[9C010000]                                    push    czIntBadOpCode                                  ;store message offset
  1642 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT7    No Coprocessor
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1648                              <1> ?%1 equ ($-$$)
  1649 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1650 00000056 68[AF010000]                                    push    czIntNoCoprocessor                              ;store message offset
  1651 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  ;
  1654                                  ;       INT8    Double Fault
  1655                                  ;
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                                          menter  doublefault                                     ;doublefault interrupt
  1657                              <1> ?%1 equ ($-$$)
  1658 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1659 00000062 68[BE010000]                                    push    czIntDoubleFault                                ;store message offset
  1660 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT9    Operand
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  operand                                         ;operand interrupt
  1666                              <1> ?%1 equ ($-$$)
  1667 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1668 0000006E 68[CB010000]                                    push    czIntOperand                                    ;store message offset
  1669 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  ;
  1672                                  ;       INT10   Bad Task State Segment
  1673                                  ;
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                                          menter  badtss                                          ;bad TSS interrupt
  1675                              <1> ?%1 equ ($-$$)
  1676 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1677 0000007A 68[D3010000]                                    push    czIntBadTSS                                     ;store message offset
  1678 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;       INT11   Not Present
  1682                                  ;
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                                          menter  notpresent                                      ;not present interrupt
  1684                              <1> ?%1 equ ($-$$)
  1685 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1686 00000086 68[EA010000]                                    push    czIntNotPresent                                 ;store message offset
  1687 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT12   Stack Limit
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  stacklimit                                      ;stack limit interrupt
  1693                              <1> ?%1 equ ($-$$)
  1694 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1695 00000092 68[F6010000]                                    push    czIntStackLimit                                 ;store message offset
  1696 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT13   General Protection Fault
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  protection                                      ;protection fault interrupt
  1702                              <1> ?%1 equ ($-$$)
  1703 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1704 0000009E 68[02020000]                                    push    czIntProtection                                 ;store message offset
  1705 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT14   Reserved
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  int14                                           ;(reserved)
  1711                              <1> ?%1 equ ($-$$)
  1712 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1713 000000AA 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1714 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT15   Reserved
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  int15                                           ;(reserved)
  1720                              <1> ?%1 equ ($-$$)
  1721 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1722 000000B6 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1723 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT16   Coprocessor Calculation
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  coproccalc                                      ;coprocessor calculation
  1729                              <1> ?%1 equ ($-$$)
  1730 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1731 000000C2 68[1B020000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1732 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT17   Reserved
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  int17                                           ;(reserved)
  1738                              <1> ?%1 equ ($-$$)
  1739 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1740 000000CE 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1741 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT18   Reserved
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  int18                                           ;(reserved)
  1747                              <1> ?%1 equ ($-$$)
  1748 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1749 000000D7 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1750 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT19   Reserved
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  int19                                           ;(reserved)
  1756                              <1> ?%1 equ ($-$$)
  1757 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1758 000000E0 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1759 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT20   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int20                                           ;(reserved)
  1765                              <1> ?%1 equ ($-$$)
  1766 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1767 000000E9 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1768 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT21   Reserved
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  int21                                           ;(reserved)
  1774                              <1> ?%1 equ ($-$$)
  1775 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1776 000000F2 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1777 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT22   Reserved
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  int22                                           ;(reserved)
  1783                              <1> ?%1 equ ($-$$)
  1784 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1785 000000FB 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1786 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT23   Reserved
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  int23                                           ;(reserved)
  1792                              <1> ?%1 equ ($-$$)
  1793 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1794 00000104 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1795 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT24   Reserved
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  int24                                           ;(reserved)
  1801                              <1> ?%1 equ ($-$$)
  1802 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1803 0000010D 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1804 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT25   Reserved
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  int25                                           ;(reserved)
  1810                              <1> ?%1 equ ($-$$)
  1811 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1812 00000116 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1813 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT26   Reserved
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  int26                                           ;(reserved)
  1819                              <1> ?%1 equ ($-$$)
  1820 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1821 0000011F 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1822 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT27   Reserved
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  int27                                           ;(reserved)
  1828                              <1> ?%1 equ ($-$$)
  1829 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1830 00000128 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1831 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT28   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int28                                           ;(reserved)
  1837                              <1> ?%1 equ ($-$$)
  1838 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1839 00000131 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1840 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT29   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int29                                           ;(reserved)
  1846                              <1> ?%1 equ ($-$$)
  1847 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1848 0000013A 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1849 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT30   Reserved
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  int30                                           ;(reserved)
  1855                              <1> ?%1 equ ($-$$)
  1856 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1857 00000143 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1858 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT31   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int31                                           ;(reserved)
  1864                              <1> ?%1 equ ($-$$)
  1865 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1866 0000014C 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1867 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       Routine:        ReportInterrupt
  1871                                  ;
  1872                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1873                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1874                                  ;
  1875                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1876                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1877                                  ;
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879 00000153 58                      ReportInterrupt         pop     eax                                             ;error message address
  1880 00000154 58                                              pop     eax                                             ;interrupt number
  1881 00000155 CF                                              iretd                                                   ;return
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       Processor Interrupt Name Strings
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887 00000156 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  1887 0000015F 6279207A65726F00   
  1888 00000167 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  1888 00000170 657000             
  1889 00000173 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  1889 0000017C 626C6520696E746572-
  1889 00000185 7275707400         
  1890 0000018A 427265616B00            czIntBreak              db      "Break",0
  1891 00000190 496E746F00              czIntInto               db      "Into",0
  1892 00000195 426F756E647300          czIntBounds             db      "Bounds",0
  1893 0000019C 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  1893 000001A5 74696F6E20436F6465-
  1893 000001AE 00                 
  1894 000001AF 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  1894 000001B8 6573736F7200       
  1895 000001BE 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  1895 000001C7 756C7400           
  1896 000001CB 4F706572616E6400        czIntOperand            db      "Operand",0
  1897 000001D3 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  1897 000001DC 537461746520536567-
  1897 000001E5 6D656E7400         
  1898 000001EA 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  1898 000001F3 6E7400             
  1899 000001F6 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  1899 000001FF 697400             
  1900 00000202 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  1900 0000020B 726F74656374696F6E-
  1900 00000214 204661756C7400     
  1901 0000021B 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1901 00000224 6F722043616C63756C-
  1901 0000022D 6174696F6E00       
  1902 00000233 526573657276656400      czIntReserved           db      "Reserved",0
  1903                                  ;=======================================================================================================================
  1904                                  ;
  1905                                  ;       Hardware Device Interupts
  1906                                  ;
  1907                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1908                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1909                                  ;       (BX=2028h).
  1910                                  ;
  1911                                  ;=======================================================================================================================
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;       IRQ0    Clock Tick Interrupt
  1915                                  ;
  1916                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1917                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1918                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1919                                  ;
  1920                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1921                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1922                                  ;
  1923                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1924                                  ;       zero, the floppy disk motors are turned off.
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                                          menter  clocktick                                       ;clock tick interrupt
  1927                              <1> ?%1 equ ($-$$)
  1928 0000023C 50                                              push    eax                                             ;save modified regs
  1929 0000023D 52                                              push    edx                                             ;
  1930 0000023E 1E                                              push    ds                                              ;
  1931                                  ;
  1932                                  ;       Update the clock tick count and the elapsed days as needed.
  1933                                  ;
  1934 0000023F 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1935 00000241 1F                                              pop     ds                                              ;... into data segment register
  1936 00000242 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1937 00000247 40                                              inc     eax                                             ;increment clock ticks
  1938 00000248 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1939 0000024D 7208                                            jb      irq0.10                                         ;no, skip ahead
  1940 0000024F FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1941 00000255 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1942 00000257 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1943                                  ;
  1944                                  ;       Decrement floppy disk motor timeout.
  1945                                  ;
  1946 0000025C 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1947 00000263 741E                                            je      irq0.20                                         ;yes, skip ahead
  1948 00000265 FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1949 0000026B 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1950                                  ;
  1951                                  ;       Turn off the floppy disk motor if appropriate.
  1952                                  ;
  1953 0000026D FB                                              sti                                                     ;enable maskable interrupts
  1954 0000026E B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1955 00000270 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1956 00000272 EC                                              in      al,dx                                           ;FDC main status byte
  1957 00000273 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1958 00000275 75F7                                            jnz     irq0.15                                         ;wait while busy
  1959 00000277 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1960 00000279 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1961 0000027E B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1962 00000280 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1963 00000282 EE                                              out     dx,al                                           ;turn motor off
  1964                                  ;
  1965                                  ;       Signal the end of the hardware interrupt.
  1966                                  ;
  1967 00000283 E869070000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1968                                  ;
  1969                                  ;       Restore and return.
  1970                                  ;
  1971 00000288 1F                                              pop     ds                                              ;restore modified regs
  1972 00000289 5A                                              pop     edx                                             ;
  1973 0000028A 58                                              pop     eax                                             ;
  1974 0000028B CF                                              iretd                                                   ;return
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                  ;
  1977                                  ;       IRQ1    Keyboard Interrupt
  1978                                  ;
  1979                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1980                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1981                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1982                                  ;       ALL modified registers upon return.
  1983                                  ;
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                                          menter  keyboard                                        ;keyboard interrrupt
  1985                              <1> ?%1 equ ($-$$)
  1986 0000028C 50                                              push    eax                                             ;save non-volatile regs
  1987 0000028D 53                                              push    ebx                                             ;
  1988 0000028E 51                                              push    ecx                                             ;
  1989 0000028F 56                                              push    esi                                             ;
  1990 00000290 1E                                              push    ds                                              ;
  1991 00000291 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1992 00000293 1F                                              pop     ds                                              ;... into data segment register
  1993 00000294 30C0                                            xor     al,al                                           ;zero
  1994 00000296 A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  1995 0000029B A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  1996 000002A0 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  1997 000002A5 A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  1998 000002AA A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  1999 000002AF A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2000 000002B4 B020                                            mov     al,' '                                          ;space
  2001 000002B6 A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2002 000002BB B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2003 000002BD F6D0                                            not     al                                              ;controller timeout mask
  2004 000002BF 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2005 000002C5 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2006 000002CB 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2007 000002D1 E865070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2008 000002D6 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2009 000002DC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2010 000002DE A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2011 000002E3 88C4                                            mov     ah,al                                           ;copy scan code 0
  2012 000002E5 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2013 000002E7 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2014 000002EA 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2015 000002F0 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2016 000002F3 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2017 000002F9 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2018 000002FB 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2019 000002FE 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2020 00000304 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2021 00000307 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2022 0000030D B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2023 0000030F 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2024 00000312 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2025 00000318 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2026 0000031B 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2027 00000321 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2028 00000323 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2029 00000326 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2030 0000032C 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2031 0000032F 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2032 00000335 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2033 00000337 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2034 0000033A 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2035 00000340 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2036 00000342 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2037 00000345 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2038 0000034B B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2039 0000034D 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2040 00000350 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2041 00000356 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2042 00000359 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2043 0000035F E8D7060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2044 00000364 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2045 0000036A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2046 0000036C A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2047 00000371 88C4                                            mov     ah,al                                           ;copy scan code 1
  2048 00000373 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2049 00000375 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2050 00000378 7456                                            je      irq1.30                                         ;yes, set flag
  2051 0000037A 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2052 0000037D 7455                                            je      irq1.40                                         ;yes, reset flag
  2053 0000037F B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2054 00000381 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2055 00000384 744A                                            je      irq1.30                                         ;yes, set flag
  2056 00000386 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2057 00000389 7449                                            je      irq1.40                                         ;yes, reset flag
  2058 0000038B 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2059 0000038E 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2060 00000394 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2061 00000397 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2062 0000039D 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2063 000003A0 7405                                            je      irq1.10                                         ;yes, continue
  2064 000003A2 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2065 000003A5 7524                                            jne     irq1.20                                         ;no, skip ahead
  2066 000003A7 E88F060000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2067 000003AC 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2068 000003B2 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2069 000003B4 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2070 000003B9 E87D060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2071 000003BE 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2072 000003C4 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2073 000003C6 A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2074 000003CB E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2075 000003D0 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2076 000003D2 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2077 000003D4 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2078 000003D6 20C3                                            and     bl,al                                           ;reset shift flag
  2079 000003D8 EB07                                            jmp     irq1.60                                         ;skip ahead
  2080 000003DA 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2081 000003DC E82B060000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2082 000003E1 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2083 000003E7 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2084 000003ED E831040000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2085 000003F2 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2086 000003F7 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2087 000003FA 7563                                            jne     irq1.80                                         ;no continue
  2088 000003FC E83A060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2089 00000401 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2090 00000407 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2091 00000409 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2092 0000040E 88C4                                            mov     ah,al                                           ;copy scan code 1
  2093 00000410 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2094 00000413 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2095 00000419 E81D060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2096 0000041E 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2097 00000424 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2098 00000426 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2099 0000042B E80B060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2100 00000430 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2101 00000436 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2102 00000438 A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2103 0000043D E8F9050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2104 00000442 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2105 00000448 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2106 0000044A A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2107 0000044F E8E7050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2108 00000454 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2109 00000456 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2110 00000458 A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2111 0000045D EB78                                            jmp     irq1.150                                        ;continue
  2112 0000045F 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2113 00000461 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2114 00000464 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2115 00000466 BE[E7040000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2116 0000046B F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2117 0000046E 7405                                            jz      irq1.90                                         ;no, skip ahead
  2118 00000470 BE[67050000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2119 00000475 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2120 00000478 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2121 0000047C F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2122 0000047F 7411                                            jz      irq1.100                                        ;no skip ahead
  2123 00000481 88C1                                            mov     cl,al                                           ;copy ASCII code
  2124 00000483 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2125 00000486 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2126 00000489 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2127 0000048B 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2128 0000048E 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2129 00000490 3420                                            xor     al,EASCIICASE                                   ;switch case
  2130 00000492 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2131 00000497 BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2132 0000049C F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2133 0000049F 7405                                            jz      irq1.120                                        ;no, skip ahead
  2134 000004A1 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2135 000004A6 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2136 000004AB 09C2                                            or      edx,eax                                         ;msg id and codes
  2137 000004AD 31C9                                            xor     ecx,ecx                                         ;null param
  2138 000004AF 50                                              push    eax                                             ;save codes
  2139 000004B0 E86D040000                                      call    PutMessage                                      ;put message to console
  2140 000004B5 58                                              pop     eax                                             ;restore codes
  2141 000004B6 84C0                                            test    al,al                                           ;ASCII translation?
  2142 000004B8 7413                                            jz      irq1.130                                        ;no, skip ahead
  2143 000004BA BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2144 000004BF 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2145 000004C4 09C2                                            or      edx,eax                                         ;msg id and codes
  2146 000004C6 31C9                                            xor     ecx,ecx                                         ;null param
  2147 000004C8 E855040000                                      call    PutMessage                                      ;put message to console
  2148 000004CD EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2149 000004CF B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2150 000004D1 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2151 000004D7 E8EF020000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2152 000004DC E810050000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2153 000004E1 1F                                              pop     ds                                              ;restore non-volatile regs
  2154 000004E2 5E                                              pop     esi                                             ;
  2155 000004E3 59                                              pop     ecx                                             ;
  2156 000004E4 5B                                              pop     ebx                                             ;
  2157 000004E5 58                                              pop     eax                                             ;
  2158 000004E6 CF                                              iretd                                                   ;return
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  ;       Scan-Code to ASCII Translation Tables
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162 000004E7 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2163 000004EF 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2164 000004F7 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2165 000004FF 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2166 00000507 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2167 0000050F 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2168 00000517 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2169 0000051F 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2170 00000527 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2171 0000052F 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2172 00000537 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2173 0000053F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2174 00000547 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2175 0000054F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2176 00000557 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2177 0000055F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2178 00000567 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2179 0000056F 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2180 00000577 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2181 0000057F 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2182 00000587 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2183 0000058F 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2184 00000597 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2185 0000059F 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2186 000005A7 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2187 000005AF 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2188 000005B7 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2189 000005BF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2190 000005C7 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2191 000005CF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2192 000005D7 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2193 000005DF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2197                                  ;
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                                          menter  iochannel                                       ;secondary 8259A cascade
  2199                              <1> ?%1 equ ($-$$)
  2200 000005E7 50                                              push    eax                                             ;save modified regs
  2201 000005E8 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                  ;
  2204                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2205                                  ;
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                                          menter  com2                                            ;serial port 2 interrupt
  2207                              <1> ?%1 equ ($-$$)
  2208 000005EA 50                                              push    eax                                             ;save modified regs
  2209 000005EB EB3C                                            jmp     hwint                                           ;end interrupt and return
  2210                                  ;-----------------------------------------------------------------------------------------------------------------------
  2211                                  ;
  2212                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2213                                  ;
  2214                                  ;-----------------------------------------------------------------------------------------------------------------------
  2215                                                          menter  com1                                            ;serial port 1 interrupt
  2215                              <1> ?%1 equ ($-$$)
  2216 000005ED 50                                              push    eax                                             ;save modified regs
  2217 000005EE EB39                                            jmp     hwint                                           ;end interrupt and return
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                  ;
  2220                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2221                                  ;
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2223                              <1> ?%1 equ ($-$$)
  2224 000005F0 50                                              push    eax                                             ;save modified regs
  2225 000005F1 EB36                                            jmp     hwint                                           ;end interrupt and return
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                  ;
  2228                                  ;       IRQ6    Diskette Hardware Interrupt
  2229                                  ;
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                                          menter  diskette                                        ;floppy disk interrupt
  2231                              <1> ?%1 equ ($-$$)
  2232 000005F3 50                                              push    eax                                             ;save non-volatile regs
  2233 000005F4 1E                                              push    ds                                              ;
  2234 000005F5 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2235 000005F7 1F                                              pop     ds                                              ;... into DS register
  2236 000005F8 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2237 000005FD 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2238 000005FF A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2239 00000604 1F                                              pop     ds                                              ;restore non-volatile regs
  2240 00000605 EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  ;
  2243                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2244                                  ;
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2246                              <1> ?%1 equ ($-$$)
  2247 00000607 50                                              push    eax                                             ;save modified regs
  2248 00000608 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  ;
  2251                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                                          menter  rtclock                                         ;real-time clock interrupt
  2254                              <1> ?%1 equ ($-$$)
  2255 0000060A 50                                              push    eax                                             ;save modified regs
  2256 0000060B EB15                                            jmp     hwwint                                          ;end interrupt and return
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                  ;
  2259                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2260                                  ;
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2262                              <1> ?%1 equ ($-$$)
  2263 0000060D 50                                              push    eax                                             ;save modified regs
  2264 0000060E EB12                                            jmp     hwwint                                          ;end interrupt and return
  2265                                  ;-----------------------------------------------------------------------------------------------------------------------
  2266                                  ;
  2267                                  ;       IRQ10   Reserved Hardware Interrupt
  2268                                  ;
  2269                                  ;-----------------------------------------------------------------------------------------------------------------------
  2270                                                          menter  irq10                                           ;reserved
  2270                              <1> ?%1 equ ($-$$)
  2271 00000610 50                                              push    eax                                             ;save modified regs
  2272 00000611 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  ;
  2275                                  ;       IRQ11   Reserved Hardware Interrupt
  2276                                  ;
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278                                                          menter  irq11                                           ;reserved
  2278                              <1> ?%1 equ ($-$$)
  2279 00000613 50                                              push    eax                                             ;save modified regs
  2280 00000614 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2281                                  ;-----------------------------------------------------------------------------------------------------------------------
  2282                                  ;
  2283                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2284                                  ;
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2286                              <1> ?%1 equ ($-$$)
  2287 00000616 50                                              push    eax                                             ;save modified regs
  2288 00000617 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2289                                  ;-----------------------------------------------------------------------------------------------------------------------
  2290                                  ;
  2291                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2292                                  ;
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                                          menter  coprocessor                                     ;coprocessor interrupt
  2294                              <1> ?%1 equ ($-$$)
  2295 00000619 50                                              push    eax                                             ;save modified regs
  2296 0000061A EB06                                            jmp     hwwint                                          ;end interrupt and return
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                  ;
  2299                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2300                                  ;
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2302                              <1> ?%1 equ ($-$$)
  2303 0000061C 50                                              push    eax                                             ;save modified regs
  2304 0000061D EB03                                            jmp     hwwint                                          ;end interrupt and return
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  ;
  2307                                  ;       IRQ15   Reserved Hardware Interrupt
  2308                                  ;
  2309                                  ;-----------------------------------------------------------------------------------------------------------------------
  2310                                                          menter  irq15                                           ;reserved
  2310                              <1> ?%1 equ ($-$$)
  2311 0000061F 50                                              push    eax                                             ;save modified regs
  2312 00000620 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2313                                  ;-----------------------------------------------------------------------------------------------------------------------
  2314                                  ;
  2315                                  ;       Exit from hardware interrupt
  2316                                  ;
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318 00000622 E8D0030000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2319 00000627 EB05                                            jmp     hwint90                                         ;skip ahead
  2320 00000629 E8C3030000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2321 0000062E 58                      hwint90                 pop     eax                                             ;restore modified regs
  2322 0000062F CF                                              iretd                                                   ;return from interrupt
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  ;
  2325                                  ;       INT 30h Operating System Software Service Interrupt
  2326                                  ;
  2327                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2328                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2329                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2330                                  ;       the entry address of the specific function from a table.
  2331                                  ;
  2332                                  ;-----------------------------------------------------------------------------------------------------------------------
  2333                                                          menter  svc
  2333                              <1> ?%1 equ ($-$$)
  2334 00000630 3C07                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2335 00000632 730D                                            jae     svc90                                           ;yes, skip ahead
  2336 00000634 0FB6C0                                          movzx   eax,al                                          ;function
  2337 00000637 C1E002                                          shl     eax,2                                           ;offset into table
  2338 0000063A 2EFF90[42060000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2339 00000641 CF                      svc90                   iretd                                                   ;return from interrupt
  2340                                  ;-----------------------------------------------------------------------------------------------------------------------
  2341                                  ;
  2342                                  ;       Service Request Table
  2343                                  ;
  2344                                  ;
  2345                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2346                                  ;
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2348                              <1> tsvc :
  2348                              <1> e%1 equ ($-tsvc)/4
  2348 00000642 [4A090000]          <1>  dd %1
  2349                                                          tsvce   CompareMemory                                   ;compare memory
  2349                              <1> e%1 equ ($-tsvc)/4
  2349 00000646 [5E060000]          <1>  dd %1
  2350                                                          tsvce   GetConsoleString                                ;get string input
  2350                              <1> e%1 equ ($-tsvc)/4
  2350 0000064A [BF060000]          <1>  dd %1
  2351                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2351                              <1> e%1 equ ($-tsvc)/4
  2351 0000064E [C7090000]          <1>  dd %1
  2352                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2352                              <1> e%1 equ ($-tsvc)/4
  2352 00000652 [BD080000]          <1>  dd %1
  2353                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2353                              <1> e%1 equ ($-tsvc)/4
  2353 00000656 [FD090000]          <1>  dd %1
  2354                                                          tsvce   UpperCaseString                                 ;upper-case string
  2354                              <1> e%1 equ ($-tsvc)/4
  2354 0000065A [7B060000]          <1>  dd %1
  2355                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  ;
  2358                                  ;       Service Request Macros
  2359                                  ;
  2360                                  ;       These macros provide positional parameterization of service request calls.
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363                                  %macro                  clearConsoleScreen 0
  2364                                                          mov     al,eClearConsoleScreen                          ;function code
  2365                                                          int     _svc                                            ;invoke OS service
  2366                                  %endmacro
  2367                                  %macro                  compareMemory 0
  2368                                                          mov     al,eCompareMemory                               ;function code
  2369                                                          int     _svc                                            ;invoke OS service
  2370                                  %endmacro
  2371                                  %macro                  getConsoleString 4
  2372                                                          mov     edx,%1                                          ;buffer address
  2373                                                          mov     ecx,%2                                          ;max characters
  2374                                                          mov     bh,%3                                           ;echo indicator
  2375                                                          mov     bl,%4                                           ;terminator
  2376                                                          mov     al,eGetConsoleString                            ;function code
  2377                                                          int     _svc                                            ;invoke OS service
  2378                                  %endmacro
  2379                                  %macro                  placeCursor 0
  2380                                                          mov     al,ePlaceCursor                                 ;function code
  2381                                                          int     _svc                                            ;invoke OS service
  2382                                  %endmacro
  2383                                  %macro                  putConsoleString 1
  2384                                                          mov     edx,%1                                          ;string address
  2385                                                          mov     al,ePutConsoleString                            ;function code
  2386                                                          int     _svc                                            ;invoke OS service
  2387                                  %endmacro
  2388                                  %macro                  resetSystem 0
  2389                                                          mov     al,eResetSystem                                 ;function code
  2390                                                          int     _svc                                            ;invoke OS service
  2391                                  %endmacro
  2392                                  %macro                  upperCaseString 0
  2393                                                          mov     al,eUpperCaseString                             ;function code
  2394                                                          int     _svc                                            ;invoke OS service
  2395                                  %endmacro
  2396                                  ;=======================================================================================================================
  2397                                  ;
  2398                                  ;       Kernel Function Library
  2399                                  ;
  2400                                  ;=======================================================================================================================
  2401                                  ;=======================================================================================================================
  2402                                  ;
  2403                                  ;       String Helper Routines
  2404                                  ;
  2405                                  ;       CompareMemory
  2406                                  ;       UpperCaseString
  2407                                  ;
  2408                                  ;=======================================================================================================================
  2409                                  ;-----------------------------------------------------------------------------------------------------------------------
  2410                                  ;
  2411                                  ;       Routine:        CompareMemory
  2412                                  ;
  2413                                  ;       Description:    This routine compares two byte arrays.
  2414                                  ;
  2415                                  ;       In:             DS:EDX  first source address
  2416                                  ;                       DS:EBX  second source address
  2417                                  ;                       ECX     comparison length
  2418                                  ;
  2419                                  ;       Out:            EDX     first source address
  2420                                  ;                       EBX     second source address
  2421                                  ;                       ECX     0       array 1 = array 2
  2422                                  ;                               <0      array 1 < array 2
  2423                                  ;                               >0      array 1 > array 2
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426 0000065E 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  2427 0000065F 57                                              push    edi                                             ;
  2428 00000660 06                                              push    es                                              ;
  2429 00000661 1E                                              push    ds                                              ;copy DS
  2430 00000662 07                                              pop     es                                              ;... to ES
  2431 00000663 89D6                                            mov     esi,edx                                         ;first source address
  2432 00000665 89DF                                            mov     edi,ebx                                         ;second source address
  2433 00000667 FC                                              cld                                                     ;forward strings
  2434 00000668 F3A6                                            rep     cmpsb                                           ;compare bytes
  2435 0000066A B000                                            mov     al,0                                            ;default result
  2436 0000066C 7406                                            jz      .10                                             ;branch if arrays equal
  2437 0000066E B001                                            mov     al,1                                            ;positive result
  2438 00000670 7302                                            jnc     .10                                             ;branch if target > source
  2439 00000672 B0FF                                            mov     al,-1                                           ;negative result
  2440 00000674 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  2441 00000677 07                                              pop     es                                              ;restore non-volatile regs
  2442 00000678 5F                                              pop     edi                                             ;
  2443 00000679 5E                                              pop     esi                                             ;
  2444 0000067A C3                                              ret                                                     ;return
  2445                                  ;-----------------------------------------------------------------------------------------------------------------------
  2446                                  ;
  2447                                  ;       Routine:        UpperCaseString
  2448                                  ;
  2449                                  ;       Description:    This routine places all characters in the given string to upper case.
  2450                                  ;
  2451                                  ;       In:             DS:EDX  string address
  2452                                  ;
  2453                                  ;       Out:            EDX     string address
  2454                                  ;
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456 0000067B 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  2457 0000067C 89D6                                            mov     esi,edx                                         ;string address
  2458 0000067E FC                                              cld                                                     ;forward strings
  2459 0000067F AC                      .10                     lodsb                                                   ;string character
  2460 00000680 84C0                                            test    al,al                                           ;null?
  2461 00000682 740F                                            jz      .20                                             ;yes, skip ahead
  2462 00000684 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2463 00000686 72F7                                            jb      .10                                             ;no, continue
  2464 00000688 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2465 0000068A 77F3                                            ja      .10                                             ;no, continue
  2466 0000068C 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  2467 0000068E 8846FF                                          mov     [esi-1],al                                      ;upper character
  2468 00000691 EBEC                                            jmp     .10                                             ;continue
  2469 00000693 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  2470 00000694 C3                                              ret                                                     ;return
  2471                                  ;=======================================================================================================================
  2472                                  ;
  2473                                  ;       Console Helper Routines
  2474                                  ;
  2475                                  ;       FirstConsoleColumn
  2476                                  ;       GetConsoleChar
  2477                                  ;       GetConsoleString
  2478                                  ;       NextConsoleColumn
  2479                                  ;       NextConsoleRow
  2480                                  ;       PreviousConsoleColumn
  2481                                  ;       PutConsoleChar
  2482                                  ;       PutConsoleHexByte
  2483                                  ;       PutConsoleOIAChar
  2484                                  ;       PutConsoleOIAShift
  2485                                  ;       PutConsoleString
  2486                                  ;       Yield
  2487                                  ;
  2488                                  ;=======================================================================================================================
  2489                                  ;-----------------------------------------------------------------------------------------------------------------------
  2490                                  ;
  2491                                  ;       Routine:        FirstConsoleColumn
  2492                                  ;
  2493                                  ;       Description:    This routine resets the console column to start of the row.
  2494                                  ;
  2495                                  ;       In:             DS      OS data selector
  2496                                  ;
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498 00000695 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2499 00000697 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2500 0000069C C3                                              ret                                                     ;return
  2501                                  ;-----------------------------------------------------------------------------------------------------------------------
  2502                                  ;
  2503                                  ;       Routine:        GetConsoleChar
  2504                                  ;
  2505                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2506                                  ;
  2507                                  ;       Out:            AL      ASCII character code
  2508                                  ;                       AH      keyboard scan code
  2509                                  ;
  2510                                  ;-----------------------------------------------------------------------------------------------------------------------
  2511 0000069D E848020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2512 000006A2 E846020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2513 000006A7 09C0                                            or      eax,eax                                         ;do we have a message?
  2514 000006A9 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2515 000006AB 50                                              push    eax                                             ;save key codes
  2516 000006AC 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2517 000006B1 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2518 000006B6 58                                              pop     eax                                             ;restore key codes
  2519 000006B7 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2520 000006B9 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2521 000006BE C3                                              ret                                                     ;return
  2522                                  ;-----------------------------------------------------------------------------------------------------------------------
  2523                                  ;
  2524                                  ;       Routine:        GetConsoleString
  2525                                  ;
  2526                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2527                                  ;
  2528                                  ;       In:             DS:EDX  target buffer address
  2529                                  ;                       ECX     maximum number of characters to accept
  2530                                  ;                       BH      echo to terminal
  2531                                  ;                       BL      terminating character
  2532                                  ;
  2533                                  ;-----------------------------------------------------------------------------------------------------------------------
  2534 000006BF 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2535 000006C0 56                                              push    esi                                             ;
  2536 000006C1 57                                              push    edi                                             ;
  2537 000006C2 06                                              push    es                                              ;
  2538 000006C3 1E                                              push    ds                                              ;load data segment selector ...
  2539 000006C4 07                                              pop     es                                              ;... into extra segment register
  2540 000006C5 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2541 000006C7 51                                              push    ecx                                             ;save maximum characters
  2542 000006C8 30C0                                            xor     al,al                                           ;zero register
  2543 000006CA FC                                              cld                                                     ;forward strings
  2544 000006CB F3AA                                            rep     stosb                                           ;zero fill buffer
  2545 000006CD 59                                              pop     ecx                                             ;maximum characters
  2546 000006CE 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2547 000006D0 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2548 000006D2 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2549 000006D4 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2550 000006D9 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2551 000006DB 7445                                            je      .50                                             ;yes, exit
  2552 000006DD 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2553 000006DF 7521                                            jne     .30                                             ;no, skip ahead
  2554 000006E1 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2555 000006E3 74EF                                            je      .20                                             ;yes, get next character
  2556 000006E5 4F                                              dec     edi                                             ;backup target pointer
  2557 000006E6 C60700                                          mov     byte [edi],0                                    ;zero previous character
  2558 000006E9 41                                              inc     ecx                                             ;increment remaining chars
  2559 000006EA F6C701                                          test    bh,1                                            ;echo to console?
  2560 000006ED 74E5                                            jz      .20                                             ;no, get next character
  2561 000006EF E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  2562 000006F4 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2563 000006F6 E891000000                                      call    PutConsoleChar                                  ;write space to console
  2564 000006FB E8C7020000                                      call    PlaceCursor                                     ;position the cursor
  2565 00000700 EBD2                                            jmp     .20                                             ;get next character
  2566 00000702 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2567 00000704 72CE                                            jb      .20                                             ;no, get another character
  2568 00000706 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2569 00000708 77CA                                            ja      .20                                             ;no, get another character
  2570 0000070A AA                                              stosb                                                   ;store character in buffer
  2571 0000070B F6C701                                          test    bh,1                                            ;echo to console?
  2572 0000070E 740F                                            jz      .40                                             ;no, skip ahead
  2573 00000710 E877000000                                      call    PutConsoleChar                                  ;write character to console
  2574 00000715 E810000000                                      call    NextConsoleColumn                               ;advance console position
  2575 0000071A E8A8020000                                      call    PlaceCursor                                     ;position the cursor
  2576 0000071F 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2577 00000720 EBB0                                            jmp     .10                                             ;next
  2578 00000722 30C0                    .50                     xor     al,al                                           ;null
  2579 00000724 AA                                              stosb                                                   ;terminate buffer
  2580 00000725 07                                              pop     es                                              ;restore non-volatile regs
  2581 00000726 5F                                              pop     edi                                             ;
  2582 00000727 5E                                              pop     esi                                             ;
  2583 00000728 59                                              pop     ecx                                             ;
  2584 00000729 C3                                              ret                                                     ;return
  2585                                  ;-----------------------------------------------------------------------------------------------------------------------
  2586                                  ;
  2587                                  ;       Routine:        NextConsoleColumn
  2588                                  ;
  2589                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2590                                  ;                       incremented if the end of the current row is reached.
  2591                                  ;
  2592                                  ;       In:             DS      OS data selector
  2593                                  ;
  2594                                  ;-----------------------------------------------------------------------------------------------------------------------
  2595 0000072A A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2596 0000072F FEC0                                            inc     al                                              ;increment column
  2597 00000731 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2598 00000736 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2599 00000738 720A                                            jb      .10                                             ;no, skip ahead
  2600 0000073A E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2601 0000073F E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2602 00000744 C3                      .10                     ret                                                     ;return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       Routine:        NextConsoleRow
  2606                                  ;
  2607                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2608                                  ;
  2609                                  ;       In:             DS      OS data selector
  2610                                  ;
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612 00000745 A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2613 0000074A FEC0                                            inc     al                                              ;increment row
  2614 0000074C A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2615 00000751 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2616 00000753 7211                                            jb      .10                                             ;no, skip ahead
  2617 00000755 E82B020000                                      call    ScrollConsoleRow                                ;scroll up one row
  2618 0000075A A001080000                                      mov     al,[wbConsoleRow]                               ;row
  2619 0000075F FEC8                                            dec     al                                              ;decrement row
  2620 00000761 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2621 00000766 C3                      .10                     ret                                                     ;return
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                  ;
  2624                                  ;       Routine:        PreviousConsoleColumn
  2625                                  ;
  2626                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2627                                  ;                       the column is set to the last position in the row and the row is decremented.
  2628                                  ;
  2629                                  ;       In:             DS      OS data selector
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632 00000767 A000080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2633 0000076C 08C0                                            or      al,al                                           ;start of row?
  2634 0000076E 7514                                            jnz     .10                                             ;no, skip ahead
  2635 00000770 8A2501080000                                    mov     ah,[wbConsoleRow]                               ;current row
  2636 00000776 08E4                                            or      ah,ah                                           ;top of screen?
  2637 00000778 7411                                            jz      .20                                             ;yes, exit with no change
  2638 0000077A FECC                                            dec     ah                                              ;decrement row
  2639 0000077C 882501080000                                    mov     [wbConsoleRow],ah                               ;save row
  2640 00000782 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  2641 00000784 FEC8                    .10                     dec     al                                              ;decrement column
  2642 00000786 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2643 0000078B C3                      .20                     ret                                                     ;return
  2644                                  ;-----------------------------------------------------------------------------------------------------------------------
  2645                                  ;
  2646                                  ;       Routine:        PutConsoleChar
  2647                                  ;
  2648                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2649                                  ;
  2650                                  ;       In:             AL      ASCII character
  2651                                  ;                       DS      OS data selector
  2652                                  ;
  2653                                  ;-----------------------------------------------------------------------------------------------------------------------
  2654 0000078C 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2655 0000078D 06                                              push    es                                              ;
  2656 0000078E 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2657 00000790 07                                              pop     es                                              ;... into extra segment reg
  2658 00000791 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2659 00000797 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  2660 0000079D E80F020000                                      call    SetConsoleChar                                  ;put character at row, column
  2661 000007A2 07                                              pop     es                                              ;restore non-volatile regs
  2662 000007A3 59                                              pop     ecx                                             ;
  2663 000007A4 C3                                              ret                                                     ;return
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  ;
  2666                                  ;       Routine:        PutConsoleHexByte
  2667                                  ;
  2668                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2669                                  ;
  2670                                  ;       In:             AL      byte value
  2671                                  ;                       CL      column
  2672                                  ;                       CH      row
  2673                                  ;                       DS      OS data selector
  2674                                  ;                       ES      CGA selector
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677 000007A5 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2678 000007A6 88C3                                            mov     bl,al                                           ;save byte value
  2679 000007A8 C0E804                                          shr     al,4                                            ;hi-order nybble
  2680 000007AB 0C30                                            or      al,030h                                         ;apply ASCII zone
  2681 000007AD 3C3A                                            cmp     al,03ah                                         ;numeric?
  2682 000007AF 7202                                            jb      .10                                             ;yes, skip ahead
  2683 000007B1 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2684 000007B3 E8F9010000              .10                     call    SetConsoleChar                                  ;display ASCII character
  2685 000007B8 88D8                                            mov     al,bl                                           ;byte value
  2686 000007BA 240F                                            and     al,0fh                                          ;lo-order nybble
  2687 000007BC 0C30                                            or      al,30h                                          ;apply ASCII zone
  2688 000007BE 3C3A                                            cmp     al,03ah                                         ;numeric?
  2689 000007C0 7202                                            jb      .20                                             ;yes, skip ahead
  2690 000007C2 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2691 000007C4 E8E8010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2692 000007C9 5B                                              pop     ebx                                             ;restore non-volatile regs
  2693 000007CA C3                                              ret                                                     ;return
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;       Routine:        PutConsoleOIAChar
  2697                                  ;
  2698                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2699                                  ;
  2700                                  ;       In:             DS      OS data selector
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703 000007CB 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2704 000007CC 51                                              push    ecx                                             ;
  2705 000007CD 56                                              push    esi                                             ;
  2706 000007CE 1E                                              push    ds                                              ;
  2707 000007CF 06                                              push    es                                              ;
  2708 000007D0 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2709 000007D2 1F                                              pop     ds                                              ;... into data segment register
  2710 000007D3 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2711 000007D5 07                                              pop     es                                              ;... into extra segment register
  2712 000007D6 BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2713 000007DB B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2714 000007DD B300                                            mov     bl,0                                            ;starting column
  2715 000007DF B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2716 000007E4 51                      .10                     push    ecx                                             ;save remaining count
  2717 000007E5 89D9                                            mov     ecx,ebx                                         ;row, column
  2718 000007E7 AC                                              lodsb                                                   ;read scan code
  2719 000007E8 08C0                                            or      al,al                                           ;scan code present?
  2720 000007EA 7407                                            jz      .20                                             ;no, skip ahead
  2721 000007EC E8B4FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2722 000007F1 EB0E                                            jmp     .30                                             ;continue
  2723 000007F3 B020                    .20                     mov     al,' '                                          ;ASCII space
  2724 000007F5 E8B7010000                                      call    SetConsoleChar                                  ;display space
  2725 000007FA B020                                            mov     al,' '                                          ;ASCII space
  2726 000007FC E8B0010000                                      call    SetConsoleChar                                  ;display space
  2727 00000801 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2728 00000804 59                                              pop     ecx                                             ;restore remaining
  2729 00000805 E2DD                                            loop    .10                                             ;next code
  2730 00000807 A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2731 0000080C 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2732 0000080E 720D                                            jb      .40                                             ;no, skip ahead
  2733 00000810 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2734 00000812 7709                                            ja      .40                                             ;no, skip ahead
  2735 00000814 88FD                                            mov     ch,bh                                           ;OIA row
  2736 00000816 B128                                            mov     cl,40                                           ;character display column
  2737 00000818 E894010000                                      call    SetConsoleChar                                  ;display ASCII character
  2738 0000081D 07                      .40                     pop     es                                              ;restore non-volatile regs
  2739 0000081E 1F                                              pop     ds                                              ;
  2740 0000081F 5E                                              pop     esi                                             ;
  2741 00000820 59                                              pop     ecx                                             ;
  2742 00000821 5B                                              pop     ebx                                             ;
  2743 00000822 C3                                              ret                                                     ;return
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  ;
  2746                                  ;       Routine:        PutConsoleOIAShift
  2747                                  ;
  2748                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2749                                  ;
  2750                                  ;       In:             BL      shift flags
  2751                                  ;                       BH      lock flags
  2752                                  ;                       DS      OS data selector
  2753                                  ;
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755 00000823 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2756 00000824 06                                              push    es                                              ;
  2757 00000825 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2758 00000827 07                                              pop     es                                              ;... into ES register
  2759 00000828 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2760 0000082A B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2761 0000082C F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2762 0000082F 7402                                            jz      .10                                             ;no, skip ahead
  2763 00000831 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2764 00000833 B10E                    .10                     mov     cl,14                                           ;indicator column
  2765 00000835 E877010000                                      call    SetConsoleChar                                  ;display ASCII character
  2766 0000083A B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2767 0000083C F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2768 0000083F 7402                                            jz      .20                                             ;no, skip ahead
  2769 00000841 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2770 00000843 B140                    .20                     mov     cl,64                                           ;indicator column
  2771 00000845 E867010000                                      call    SetConsoleChar                                  ;display ASCII character
  2772 0000084A B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2773 0000084C F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2774 0000084F 7402                                            jz      .30                                             ;no, skip ahead
  2775 00000851 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2776 00000853 B10F                    .30                     mov     cl,15                                           ;indicator column
  2777 00000855 E857010000                                      call    SetConsoleChar                                  ;display ASCII character
  2778 0000085A B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2779 0000085C F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2780 0000085F 7402                                            jz      .40                                             ;no, skip ahead
  2781 00000861 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2782 00000863 B13F                    .40                     mov     cl,63                                           ;indicator column
  2783 00000865 E847010000                                      call    SetConsoleChar                                  ;display ASCII character
  2784 0000086A B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2785 0000086C F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2786 0000086F 7402                                            jz      .50                                             ;no, skip ahead
  2787 00000871 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2788 00000873 B110                    .50                     mov     cl,16                                           ;indicator column
  2789 00000875 E837010000                                      call    SetConsoleChar                                  ;display ASCII character
  2790 0000087A B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2791 0000087C F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2792 0000087F 7402                                            jz      .60                                             ;no, skip ahead
  2793 00000881 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2794 00000883 B13E                    .60                     mov     cl,62                                           ;indicator column
  2795 00000885 E827010000                                      call    SetConsoleChar                                  ;display ASCII character
  2796 0000088A B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2797 0000088C F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2798 0000088F 7402                                            jz      .70                                             ;no, skip ahead
  2799 00000891 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2800 00000893 B14E                    .70                     mov     cl,78                                           ;indicator column
  2801 00000895 E817010000                                      call    SetConsoleChar                                  ;display ASCII character
  2802 0000089A B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2803 0000089C F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2804 0000089F 7402                                            jz      .80                                             ;no, skip ahead
  2805 000008A1 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2806 000008A3 B14D                    .80                     mov     cl,77                                           ;indicator column
  2807 000008A5 E807010000                                      call    SetConsoleChar                                  ;display ASCII character
  2808 000008AA B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2809 000008AC F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2810 000008AF 7402                                            jz      .90                                             ;no, skip ahead
  2811 000008B1 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2812 000008B3 B14C                    .90                     mov     cl,76                                           ;indicator column
  2813 000008B5 E8F7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2814 000008BA 07                                              pop     es                                              ;restore non-volatile regs
  2815 000008BB 59                                              pop     ecx                                             ;
  2816 000008BC C3                                              ret                                                     ;return
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                  ;
  2819                                  ;       Routine:        PutConsoleString
  2820                                  ;
  2821                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2822                                  ;                       console position as needed.
  2823                                  ;
  2824                                  ;       In:             EDX     source address
  2825                                  ;                       DS      OS data selector
  2826                                  ;
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828 000008BD 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  2829 000008BE 89D6                                            mov     esi,edx                                         ;source address
  2830 000008C0 FC                                              cld                                                     ;forward strings
  2831 000008C1 AC                      .10                     lodsb                                                   ;ASCII character
  2832 000008C2 08C0                                            or      al,al                                           ;end of string?
  2833 000008C4 7422                                            jz      .40                                             ;yes, skip ahead
  2834 000008C6 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  2835 000008C8 7507                                            jne     .20                                             ;no, skip ahead
  2836 000008CA E8C6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  2837 000008CF EBF0                                            jmp     .10                                             ;next character
  2838 000008D1 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2839 000008D3 7507                                            jne     .30                                             ;no, skip ahead
  2840 000008D5 E86BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  2841 000008DA EBE5                                            jmp     .10                                             ;next character
  2842 000008DC E8ABFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  2843 000008E1 E844FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  2844 000008E6 EBD9                                            jmp     .10                                             ;next character
  2845 000008E8 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  2846 000008E9 C3                                              ret                                                     ;return
  2847                                  ;-----------------------------------------------------------------------------------------------------------------------
  2848                                  ;
  2849                                  ;       Routine:        Yield
  2850                                  ;
  2851                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2852                                  ;
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854 000008EA FB                      Yield                   sti                                                     ;enable maskagle interrupts
  2855 000008EB F4                                              hlt                                                     ;halt until external interrupt
  2856 000008EC C3                                              ret                                                     ;return
  2857                                  ;=======================================================================================================================
  2858                                  ;
  2859                                  ;       Message Queue Helper Routines
  2860                                  ;
  2861                                  ;       GetMessage
  2862                                  ;       PutMessage
  2863                                  ;
  2864                                  ;=======================================================================================================================
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  ;
  2867                                  ;       Routine:        GetMessage
  2868                                  ;
  2869                                  ;       Description:    This routine reads and removes a message from the message queue.
  2870                                  ;
  2871                                  ;       Out:            EAX     lo-order message data
  2872                                  ;                       EDX     hi-order message data
  2873                                  ;
  2874                                  ;                       CY      0 = message read
  2875                                  ;                               1 = no message to read
  2876                                  ;
  2877                                  ;-----------------------------------------------------------------------------------------------------------------------
  2878 000008ED 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  2879 000008EE 51                                              push    ecx                                             ;
  2880 000008EF 1E                                              push    ds                                              ;
  2881 000008F0 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  2882 000008F2 1F                                              pop     ds                                              ;... into data segment register
  2883 000008F3 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  2884 000008F9 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  2885 000008FB 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2886 000008FE 09D0                                            or      eax,edx                                         ;is queue empty?
  2887 00000900 F9                                              stc                                                     ;assume queue is emtpy
  2888 00000901 741B                                            jz      .20                                             ;yes, skip ahead
  2889 00000903 31C9                                            xor     ecx,ecx                                         ;store zero
  2890 00000905 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  2891 00000907 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2892 0000090A 83C308                                          add     ebx,8                                           ;next queue element
  2893 0000090D 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  2894 00000913 7502                                            jnz     .10                                             ;no, skip ahead
  2895 00000915 B308                                            mov     bl,8                                            ;reset to 1st entry
  2896 00000917 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2897 0000091D F8                                              clc                                                     ;indicate message read
  2898 0000091E 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2899 0000091F 59                                              pop     ecx                                             ;
  2900 00000920 5B                                              pop     ebx                                             ;
  2901 00000921 C3                                              ret                                                     ;return
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;       Routine:        PutMessage
  2905                                  ;
  2906                                  ;       Description:    This routine adda a message to the message queue.
  2907                                  ;
  2908                                  ;       In:             ECX     hi-order data word
  2909                                  ;                       EDX     lo-order data word
  2910                                  ;
  2911                                  ;       Out:            CY      0 = success
  2912                                  ;                               1 = fail: queue is full
  2913                                  ;
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915 00000922 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  2916 00000923 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  2917 00000925 1F                                              pop     ds                                              ;... into data segment register
  2918 00000926 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  2919 0000092B 833800                                          cmp     dword [eax],0                                   ;is queue full?
  2920 0000092E F9                                              stc                                                     ;assume failure
  2921 0000092F 7517                                            jne     .20                                             ;yes, cannot store
  2922 00000931 8910                                            mov     [eax],edx                                       ;store lo-order data
  2923 00000933 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  2924 00000936 83C008                                          add     eax,8                                           ;next queue element adr
  2925 00000939 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  2926 0000093E 7502                                            jnz     .10                                             ;no, skip ahead
  2927 00000940 B008                                            mov     al,8                                            ;reset to top of queue
  2928 00000942 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2929 00000947 F8                                              clc                                                     ;indicate success
  2930 00000948 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2931 00000949 C3                                              ret                                                     ;return
  2932                                  ;=======================================================================================================================
  2933                                  ;
  2934                                  ;       Memory-Mapped Video Routines
  2935                                  ;
  2936                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2937                                  ;
  2938                                  ;       ClearConsoleScreen
  2939                                  ;       ScrollConsoleRow
  2940                                  ;       SetConsoleChar
  2941                                  ;
  2942                                  ;=======================================================================================================================
  2943                                  ;-----------------------------------------------------------------------------------------------------------------------
  2944                                  ;
  2945                                  ;       Routine:        ClearConsoleScreen
  2946                                  ;
  2947                                  ;       Description:    This routine clears the console (CGA) screen.
  2948                                  ;
  2949                                  ;-----------------------------------------------------------------------------------------------------------------------
  2950 0000094A 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2951 0000094B 57                                              push    edi                                             ;
  2952 0000094C 1E                                              push    ds                                              ;
  2953 0000094D 06                                              push    es                                              ;
  2954 0000094E 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  2955 00000950 1F                                              pop     ds                                              ;... into DS register
  2956 00000951 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2957 00000953 07                                              pop     es                                              ;... into ES register
  2958 00000954 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  2959 00000959 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2960 0000095E 31FF                                            xor     edi,edi                                         ;target offset
  2961 00000960 FC                                              cld                                                     ;forward strings
  2962 00000961 F3AB                                            rep     stosd                                           ;reset screen body
  2963 00000963 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2964 00000968 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2965 0000096D F3AB                                            rep     stosd                                           ;reset OIA line
  2966 0000096F 30C0                                            xor     al,al                                           ;zero register
  2967 00000971 A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  2968 00000976 A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  2969 0000097B E847000000                                      call    PlaceCursor                                     ;place cursor at current position
  2970 00000980 07                                              pop     es                                              ;restore non-volatile regs
  2971 00000981 1F                                              pop     ds                                              ;
  2972 00000982 5F                                              pop     edi                                             ;
  2973 00000983 59                                              pop     ecx                                             ;
  2974 00000984 C3                                              ret                                                     ;return
  2975                                  ;-----------------------------------------------------------------------------------------------------------------------
  2976                                  ;
  2977                                  ;       Routine:        ScrollConsoleRow
  2978                                  ;
  2979                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2980                                  ;
  2981                                  ;-----------------------------------------------------------------------------------------------------------------------
  2982 00000985 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2983 00000986 56                                              push    esi                                             ;
  2984 00000987 57                                              push    edi                                             ;
  2985 00000988 1E                                              push    ds                                              ;
  2986 00000989 06                                              push    es                                              ;
  2987 0000098A 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2988 0000098C 1F                                              pop     ds                                              ;... into DS
  2989 0000098D 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2990 0000098F 07                                              pop     es                                              ;... into ES
  2991 00000990 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2992 00000995 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2993 0000099A 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  2994 0000099C FC                                              cld                                                     ;forward strings
  2995 0000099D F3A5                                            rep     movsd                                           ;move 24 lines up
  2996 0000099F B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2997 000009A4 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2998 000009A9 F3AB                                            rep     stosd                                           ;clear bottom row
  2999 000009AB 07                                              pop     es                                              ;restore non-volatile regs
  3000 000009AC 1F                                              pop     ds                                              ;
  3001 000009AD 5F                                              pop     edi                                             ;
  3002 000009AE 5E                                              pop     esi                                             ;
  3003 000009AF 59                                              pop     ecx                                             ;
  3004 000009B0 C3                                              ret                                                     ;return
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  ;
  3007                                  ;       Routine:        SetConsoleChar
  3008                                  ;
  3009                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3010                                  ;
  3011                                  ;       In:             AL      ASCII character
  3012                                  ;                       CL      column
  3013                                  ;                       CH      row
  3014                                  ;                       ES      CGA selector
  3015                                  ;
  3016                                  ;       Out:            EAX     last target address written (ES:)
  3017                                  ;                       CL      column + 1
  3018                                  ;
  3019                                  ;-----------------------------------------------------------------------------------------------------------------------
  3020 000009B1 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  3021 000009B3 0FB6C5                                          movzx   eax,ch                                          ;row
  3022 000009B6 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  3023 000009B8 F6E4                                            mul     ah                                              ;row * cols/row
  3024 000009BA 00C8                                            add     al,cl                                           ;add column
  3025 000009BC 80D400                                          adc     ah,0                                            ;handle carry
  3026 000009BF D1E0                                            shl     eax,1                                           ;screen offset
  3027 000009C1 268810                                          mov     [es:eax],dl                                     ;store character
  3028 000009C4 FEC1                                            inc     cl                                              ;next column
  3029 000009C6 C3                                              ret                                                     ;return
  3030                                  ;=======================================================================================================================
  3031                                  ;
  3032                                  ;       Input/Output Routines
  3033                                  ;
  3034                                  ;       These routines read and/or write directly to ports.
  3035                                  ;
  3036                                  ;       PlaceCursor
  3037                                  ;       PutPrimaryEndOfInt
  3038                                  ;       PutSecondaryEndOfInt
  3039                                  ;       ResetSystem
  3040                                  ;       SetKeyboardLamps
  3041                                  ;       WaitForKeyInBuffer
  3042                                  ;       WaitForKeyOutBuffer
  3043                                  ;
  3044                                  ;=======================================================================================================================
  3045                                  ;-----------------------------------------------------------------------------------------------------------------------
  3046                                  ;
  3047                                  ;       Routine:        PlaceCursor
  3048                                  ;
  3049                                  ;       Description:    This routine positions the cursor on the console.
  3050                                  ;
  3051                                  ;       In:             DS      OS data selector
  3052                                  ;
  3053                                  ;-----------------------------------------------------------------------------------------------------------------------
  3054 000009C7 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  3055 000009C8 A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  3056 000009CD B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  3057 000009CF F6E4                                            mul     ah                                              ;row offset
  3058 000009D1 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  3059 000009D7 80D400                                          adc     ah,0                                            ;add overflow
  3060 000009DA 89C1                                            mov     ecx,eax                                         ;screen offset
  3061 000009DC B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3062 000009DE B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3063 000009E0 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3064 000009E2 EE                                              out     dx,al                                           ;select register
  3065 000009E3 42                                              inc     edx                                             ;data port
  3066 000009E4 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  3067 000009E6 EE                                              out     dx,al                                           ;store hi-order loc
  3068 000009E7 4A                                              dec     edx                                             ;register select port
  3069 000009E8 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3070 000009EA EE                                              out     dx,al                                           ;select register
  3071 000009EB 42                                              inc     edx                                             ;data port
  3072 000009EC 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  3073 000009EE EE                                              out     dx,al                                           ;store lo-order loc
  3074 000009EF 59                                              pop     ecx                                             ;restore non-volatile regs
  3075 000009F0 C3                                              ret                                                     ;return
  3076                                  ;-----------------------------------------------------------------------------------------------------------------------
  3077                                  ;
  3078                                  ;       Routine:        PutPrimaryEndOfInt
  3079                                  ;
  3080                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3081                                  ;
  3082                                  ;-----------------------------------------------------------------------------------------------------------------------
  3083 000009F1 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3084 000009F2 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3085 000009F4 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3086 000009F6 C3                                              ret                                                     ;return
  3087                                  ;-----------------------------------------------------------------------------------------------------------------------
  3088                                  ;
  3089                                  ;       Routine:        PutSecondaryEndOfInt
  3090                                  ;
  3091                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3092                                  ;
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094 000009F7 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3095 000009F8 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3096 000009FA E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3097 000009FC C3                                              ret                                                     ;return
  3098                                  ;-----------------------------------------------------------------------------------------------------------------------
  3099                                  ;
  3100                                  ;       Routine:        ResetSystem
  3101                                  ;
  3102                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3103                                  ;
  3104                                  ;       Out:            N/A     This routine does not return.
  3105                                  ;
  3106                                  ;-----------------------------------------------------------------------------------------------------------------------
  3107 000009FD B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3108 00000A02 E2FE                                            loop    $                                               ;clear interrupts
  3109 00000A04 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3110 00000A06 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3111 00000A08 FB                      .10                     sti                                                     ;enable maskable interrupts
  3112 00000A09 F4                                              hlt                                                     ;halt until interrupt
  3113 00000A0A EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  3114                                  ;-----------------------------------------------------------------------------------------------------------------------
  3115                                  ;
  3116                                  ;       Routine:        SetKeyboardLamps
  3117                                  ;
  3118                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3119                                  ;
  3120                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3121                                  ;
  3122                                  ;-----------------------------------------------------------------------------------------------------------------------
  3123 00000A0C E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3124 00000A11 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3125 00000A13 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  3126 00000A15 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3127 00000A1A E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3128 00000A1C E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3129 00000A21 88F8                                            mov     al,bh                                           ;set/reset lamps value
  3130 00000A23 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  3131 00000A25 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3132 00000A2A E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3133 00000A2C C3                                              ret                                                     ;return
  3134                                  ;-----------------------------------------------------------------------------------------------------------------------
  3135                                  ;
  3136                                  ;       Routine:        WaitForKeyInBuffer
  3137                                  ;
  3138                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3139                                  ;
  3140                                  ;       Out:            ZF      1 = Input buffer ready
  3141                                  ;                               0 = Input buffer not ready after timeout
  3142                                  ;
  3143                                  ;-----------------------------------------------------------------------------------------------------------------------
  3144 00000A2D 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3145 00000A2E B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3146 00000A33 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3147 00000A35 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  3148 00000A37 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  3149 00000A39 59                                              pop     ecx                                             ;restore non-volatile regs
  3150 00000A3A C3                                              ret                                                     ;return
  3151                                  ;-----------------------------------------------------------------------------------------------------------------------
  3152                                  ;
  3153                                  ;       Routine:        WaitForKeyOutBuffer
  3154                                  ;
  3155                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3156                                  ;
  3157                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3158                                  ;                               0 = Output buffer empty after timeout
  3159                                  ;
  3160                                  ;-----------------------------------------------------------------------------------------------------------------------
  3161 00000A3B 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3162 00000A3C B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3163 00000A41 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3164 00000A43 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  3165 00000A45 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  3166 00000A47 59                                              pop     ecx                                             ;restore non-volatile regs
  3167 00000A48 C3                                              ret                                                     ;return
  3168                                  ;-----------------------------------------------------------------------------------------------------------------------
  3169                                  ;
  3170                                  ;       End of the Kernel Function Library
  3171                                  ;
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173 00000A49 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  3174                                  ;=======================================================================================================================
  3175                                  ;
  3176                                  ;       Console Task
  3177                                  ;
  3178                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3179                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3180                                  ;       screen and responds to user commands.
  3181                                  ;
  3182                                  ;=======================================================================================================================
  3183                                  ;-----------------------------------------------------------------------------------------------------------------------
  3184                                  ;
  3185                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3186                                  ;
  3187                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                  section                 constack                                                ;console task stack
  3191 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  3192                                  ;-----------------------------------------------------------------------------------------------------------------------
  3193                                  ;
  3194                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3195                                  ;
  3196                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3197                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3198                                  ;       16 descriptors. Six are initially defined.
  3199                                  ;
  3200                                  ;-----------------------------------------------------------------------------------------------------------------------
  3201                                  section                 conldt                                                  ;console local descriptors
  3202 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  3203 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  3204 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  3205 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  3206 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3207 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3208 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210                                  ;
  3211                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3212                                  ;
  3213                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3214                                  ;       segment. CS to console code.
  3215                                  ;
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  section                 contss                                                  ;console task state segment
  3218 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3219 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3220 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3221 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3222 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3223 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3224 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3225 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3226 00000020 00000000                                        dd      0                                               ;20 eip
  3227 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3228 00000028 00000000                                        dd      0                                               ;28 eax
  3229 0000002C 00000000                                        dd      0                                               ;2c ecx
  3230 00000030 00000000                                        dd      0                                               ;30 edx
  3231 00000034 00000000                                        dd      0                                               ;34 ebx
  3232 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3233 0000003C 00000000                                        dd      0                                               ;3c ebp
  3234 00000040 00000000                                        dd      0                                               ;40 esi
  3235 00000044 00000000                                        dd      0                                               ;44 edi
  3236 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3237 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3238 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3239 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3240 00000058 00000000                                        dd      0                                               ;58 fs
  3241 0000005C 00000000                                        dd      0                                               ;5c gs
  3242 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3243 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3244                                  ;-----------------------------------------------------------------------------------------------------------------------
  3245                                  ;
  3246                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3247                                  ;
  3248                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3249                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3250                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3251                                  ;       event.
  3252                                  ;
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  section                 conmque                                                 ;console message queue
  3255 00000000 08000000                                        dd      8                                               ;head pointer
  3256 00000004 08000000                                        dd      8                                               ;tail pointer
  3257 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  ;
  3260                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3261                                  ;
  3262                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3263                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3264                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3265                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3266                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3267                                  ;       board input, echoing to the console screen and responding to user commands.
  3268                                  ;
  3269                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3270                                  ;
  3271                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3272                                  ;                               |  Real Mode Interrupt Vectors                  |
  3273                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3274                                  ;                               |  Reserved BIOS Memory Area                    |
  3275                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3276                                  ;                               |  Shared Kernel Memory Area                    |
  3277                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3278                                  ;                               |  Global Descriptor Table (GDT)                |
  3279                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3280                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3281                                  ;                       002000  +-----------------------------------------------+
  3282                                  ;                               |  Interrupt Handlers                           |
  3283                                  ;                               |  Kernel Function Library                      |
  3284                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3285                                  ;                               |  Console Task Stack Area                      |
  3286                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3287                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3288                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3289                                  ;                               |  Console Task Task State Segment (TSS)        |
  3290                                  ;                       004800  +-----------------------------------------------+
  3291                                  ;                               |  Console Task Message Queue                   |
  3292                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3293                                  ;                               |  Console Task Code                            |
  3294                                  ;                               |  Console Task Constants                       |
  3295                                  ;                       006000  +===============================================+
  3296                                  ;
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3299 00000000 E86D000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  3300                                  
  3301                                                          clearConsoleScreen                                      ;clear the console screen
  3301 00000005 B000                <1>  mov al,eClearConsoleScreen
  3301 00000007 CD30                <1>  int _svc
  3302                                                          putConsoleString czTitle                                ;display startup message
  3302 00000009 BA[50010000]        <1>  mov edx,%1
  3302 0000000E B004                <1>  mov al,ePutConsoleString
  3302 00000010 CD30                <1>  int _svc
  3303                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3303                              <1> .10 :
  3303 00000012 BA[4E010000]        <1>  mov edx,%1
  3303 00000017 B004                <1>  mov al,ePutConsoleString
  3303 00000019 CD30                <1>  int _svc
  3304                                                          placeCursor                                             ;set CRT cursor location
  3304 0000001B B003                <1>  mov al,ePlaceCursor
  3304 0000001D CD30                <1>  int _svc
  3305                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3305 0000001F BA0C080000          <1>  mov edx,%1
  3305 00000024 B94F000000          <1>  mov ecx,%2
  3305 00000029 B701                <1>  mov bh,%3
  3305 0000002B B30D                <1>  mov bl,%4
  3305 0000002D B002                <1>  mov al,eGetConsoleString
  3305 0000002F CD30                <1>  int _svc
  3306                                                          putConsoleString czNewLine                              ;newline
  3306 00000031 BA[4B010000]        <1>  mov edx,%1
  3306 00000036 B004                <1>  mov al,ePutConsoleString
  3306 00000038 CD30                <1>  int _svc
  3307                                  
  3308 0000003A BA0C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  3309 0000003F BB5C080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  3310 00000044 E842000000                                      call    ConTakeToken                                    ;handle console input
  3311 00000049 BA5C080000                                      mov     edx,wzConsoleToken                              ;token buffer
  3312 0000004E E86D000000                                      call    ConDetermineCommand                             ;determine command number
  3313 00000053 83F807                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3314 00000056 720B                                            jb      .20                                             ;yes, branch
  3315                                  
  3316                                                          putConsoleString czUnknownCommand                       ;display error message
  3316 00000058 BA[6E010000]        <1>  mov edx,%1
  3316 0000005D B004                <1>  mov al,ePutConsoleString
  3316 0000005F CD30                <1>  int _svc
  3317                                  
  3318 00000061 EBAF                                            jmp     .10                                             ;next command
  3319 00000063 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  3320 00000066 BA[FE000000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  3321 0000006B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3322 0000006E FFD0                                            call    eax                                             ;call command handler
  3323 00000070 EBA0                                            jmp     .10                                             ;next command
  3324                                  ;-----------------------------------------------------------------------------------------------------------------------
  3325                                  ;
  3326                                  ;       Routine:        ConInitializeData
  3327                                  ;
  3328                                  ;       Description:    This routine initializes console task variables.
  3329                                  ;
  3330                                  ;-----------------------------------------------------------------------------------------------------------------------
  3331 00000072 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  3332 00000073 57                                              push    edi                                             ;
  3333 00000074 06                                              push    es                                              ;
  3334                                  ;
  3335                                  ;       Initialize console work areas.
  3336                                  ;
  3337 00000075 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3338 00000077 07                                              pop     es                                              ;... into extra segment register
  3339 00000078 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  3340 0000007D 30C0                                            xor     al,al                                           ;initialization value
  3341 0000007F B9AC000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3342 00000084 FC                                              cld                                                     ;forward strings
  3343 00000085 F3AA                                            rep     stosb                                           ;initialize data
  3344                                  ;
  3345                                  ;       Restore and return.
  3346                                  ;
  3347 00000087 07                                              pop     es                                              ;restore non-volatile regs
  3348 00000088 5F                                              pop     edi                                             ;
  3349 00000089 59                                              pop     ecx                                             ;
  3350 0000008A C3                                              ret                                                     ;return
  3351                                  ;-----------------------------------------------------------------------------------------------------------------------
  3352                                  ;
  3353                                  ;       Routine:        ConTakeToken
  3354                                  ;
  3355                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3356                                  ;
  3357                                  ;       In:             DS:EDX  source buffer address
  3358                                  ;                       DS:EBX  target buffer address
  3359                                  ;
  3360                                  ;       Out:            DS:EDX  source buffer address
  3361                                  ;                       DS:EBX  target buffer address
  3362                                  ;
  3363                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3364                                  ;
  3365                                  ;-----------------------------------------------------------------------------------------------------------------------
  3366 0000008B 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  3367 0000008C 57                                              push    edi                                             ;
  3368 0000008D 06                                              push    es                                              ;
  3369 0000008E 1E                                              push    ds                                              ;load data segment selector ...
  3370 0000008F 07                                              pop     es                                              ;... into extra segment reg
  3371 00000090 89D6                                            mov     esi,edx                                         ;source buffer address
  3372 00000092 89DF                                            mov     edi,ebx                                         ;target buffer address
  3373 00000094 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3374 00000097 FC                                              cld                                                     ;forward strings
  3375 00000098 AC                      .10                     lodsb                                                   ;load byte
  3376 00000099 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3377 0000009B 74FB                                            je      .10                                             ;yes, continue
  3378 0000009D 84C0                                            test    al,al                                           ;end of line?
  3379 0000009F 7410                                            jz      .40                                             ;yes, branch
  3380 000000A1 AA                      .20                     stosb                                                   ;store byte
  3381 000000A2 AC                                              lodsb                                                   ;load byte
  3382 000000A3 84C0                                            test    al,al                                           ;end of line?
  3383 000000A5 740A                                            jz      .40                                             ;no, continue
  3384 000000A7 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3385 000000A9 75F6                                            jne     .20                                             ;no, continue
  3386 000000AB AC                      .30                     lodsb                                                   ;load byte
  3387 000000AC 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3388 000000AE 74FB                                            je      .30                                             ;yes, continue
  3389 000000B0 4E                                              dec     esi                                             ;pre-position
  3390 000000B1 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3391 000000B4 89D7                                            mov     edi,edx                                         ;source buffer address
  3392 000000B6 AC                      .50                     lodsb                                                   ;remaining byte
  3393 000000B7 AA                                              stosb                                                   ;move to front of buffer
  3394 000000B8 84C0                                            test    al,al                                           ;end of line?
  3395 000000BA 75FA                                            jnz     .50                                             ;no, continue
  3396 000000BC 07                                              pop     es                                              ;restore non-volatile regs
  3397 000000BD 5F                                              pop     edi                                             ;
  3398 000000BE 5E                                              pop     esi                                             ;
  3399 000000BF C3                                              ret                                                     ;return
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  ;
  3402                                  ;       Routine:        ConDetermineCommand
  3403                                  ;
  3404                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3405                                  ;
  3406                                  ;       input:          DS:EDX  command address
  3407                                  ;
  3408                                  ;       output:         EAX     >=0     = command nbr
  3409                                  ;                               0       = unknown command
  3410                                  ;
  3411                                  ;-----------------------------------------------------------------------------------------------------------------------
  3412 000000C0 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3413 000000C1 51                                              push    ecx                                             ;
  3414 000000C2 56                                              push    esi                                             ;
  3415 000000C3 57                                              push    edi                                             ;
  3416                                  
  3417                                                          upperCaseString                                         ;upper-case string at EDX
  3417 000000C4 B006                <1>  mov al,eUpperCaseString
  3417 000000C6 CD30                <1>  int _svc
  3418                                  
  3419 000000C8 BE[1A010000]                                    mov     esi,tConCmdTbl                                  ;commands table
  3420 000000CD 31FF                                            xor     edi,edi                                         ;intialize command number
  3421 000000CF FC                                              cld                                                     ;forward strings
  3422 000000D0 AC                      .10                     lodsb                                                   ;command length
  3423 000000D1 0FB6C8                                          movzx   ecx,al                                          ;command length
  3424 000000D4 E30D                                            jecxz   .20                                             ;branch if end of table
  3425 000000D6 89F3                                            mov     ebx,esi                                         ;table entry address
  3426 000000D8 01CE                                            add     esi,ecx                                         ;next table entry address
  3427                                  
  3428                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3428 000000DA B001                <1>  mov al,eCompareMemory
  3428 000000DC CD30                <1>  int _svc
  3429                                  
  3430 000000DE E303                                            jecxz   .20                                             ;branch if equal
  3431 000000E0 47                                              inc     edi                                             ;increment command nbr
  3432 000000E1 EBED                                            jmp     .10                                             ;repeat
  3433 000000E3 89F8                    .20                     mov     eax,edi                                         ;command number
  3434 000000E5 5F                                              pop     edi                                             ;restore non-volatile regs
  3435 000000E6 5E                                              pop     esi                                             ;
  3436 000000E7 59                                              pop     ecx                                             ;
  3437 000000E8 5B                                              pop     ebx                                             ;
  3438 000000E9 C3                                              ret                                                     ;return
  3439                                  ;-----------------------------------------------------------------------------------------------------------------------
  3440                                  ;
  3441                                  ;       Routine:        ConClear
  3442                                  ;
  3443                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3444                                  ;
  3445                                  ;-----------------------------------------------------------------------------------------------------------------------
  3446                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3446                              <1> ConClear :
  3446 000000EA B000                <1>  mov al,eClearConsoleScreen
  3446 000000EC CD30                <1>  int _svc
  3447 000000EE C3                                              ret                                                     ;return
  3448                                  ;-----------------------------------------------------------------------------------------------------------------------
  3449                                  ;
  3450                                  ;       Routine:        ConExit
  3451                                  ;
  3452                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3453                                  ;
  3454                                  ;-----------------------------------------------------------------------------------------------------------------------
  3455                                  ConExit                 resetSystem                                             ;issue system reset
  3455                              <1> ConExit :
  3455 000000EF B005                <1>  mov al,eResetSystem
  3455 000000F1 CD30                <1>  int _svc
  3456 000000F3 C3                                              ret                                                     ;return
  3457                                  ;-----------------------------------------------------------------------------------------------------------------------
  3458                                  ;
  3459                                  ;       Routine:        ConVersion
  3460                                  ;
  3461                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3462                                  ;
  3463                                  ;-----------------------------------------------------------------------------------------------------------------------
  3464                                  ConVersion              putConsoleString czTitle                                ;display version message
  3464                              <1> ConVersion :
  3464 000000F4 BA[50010000]        <1>  mov edx,%1
  3464 000000F9 B004                <1>  mov al,ePutConsoleString
  3464 000000FB CD30                <1>  int _svc
  3465 000000FD C3                                              ret                                                     ;return
  3466                                  ;-----------------------------------------------------------------------------------------------------------------------
  3467                                  ;
  3468                                  ;       Tables
  3469                                  ;
  3470                                  ;-----------------------------------------------------------------------------------------------------------------------
  3471                                                                                                                  ;---------------------------------------
  3472                                                                                                                  ;  Command Jump Table
  3473                                                                                                                  ;---------------------------------------
  3474                                  tConJmpTbl              equ     $                                               ;command jump table
  3475 000000FE EF000000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  3476 00000102 F4000000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  3477 00000106 EA000000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  3478 0000010A EF000000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  3479 0000010E EF000000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  3480 00000112 EA000000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  3481 00000116 F4000000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  3482                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3483                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3484                                                                                                                  ;---------------------------------------
  3485                                                                                                                  ;  Command Name Table
  3486                                                                                                                  ;---------------------------------------
  3487                                  tConCmdTbl              equ     $                                               ;command name table
  3488 0000011A 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  3488 00000123 00                 
  3489 00000124 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  3490 0000012D 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  3491 00000134 054558495400                                    db      5,"EXIT",0                                      ;exit command
  3492 0000013A 055155495400                                    db      5,"QUIT",0                                      ;quit command
  3493 00000140 04434C5300                                      db      4,"CLS",0                                       ;cls command
  3494 00000145 0456455200                                      db      4,"VER",0                                       ;ver command
  3495 0000014A 00                                              db      0                                               ;end of table
  3496                                  ;-----------------------------------------------------------------------------------------------------------------------
  3497                                  ;
  3498                                  ;       Constants
  3499                                  ;
  3500                                  ;-----------------------------------------------------------------------------------------------------------------------
  3501 0000014B 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  3502 0000014E 3A00                    czPrompt                db      ":",0                                           ;prompt string
  3503 00000150 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3503 00000159 65726174696E672053-
  3503 00000162 797374656D20312E30-
  3503 0000016B 0D0A00             
  3504 0000016E 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3504 00000177 6F6D6D616E640D0A00 
  3505 00000180 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  3506                                  %endif
  3507                                  %ifdef BUILDDISK
  3508                                  ;-----------------------------------------------------------------------------------------------------------------------
  3509                                  ;
  3510                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3511                                  ;
  3512                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515                                  section                 unused                                                  ;unused disk space
  3516                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3517                                  %endif
  3518                                  ;=======================================================================================================================
  3519                                  ;
  3520                                  ;       End of Program Code
  3521                                  ;
  3522                                  ;=======================================================================================================================
