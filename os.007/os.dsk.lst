     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.007
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;			clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	x86 Descriptor Access Codes						EACC...
   190                                  ;
   191                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   192                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   193                                  ;
   194                                  ;	0.......	Segment is not present in memory (triggers int 11)
   195                                  ;	1.......	Segment is present in memory
   196                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   197                                  ;	...0....	Segment is a system segment
   198                                  ;	...00010		Local Descriptor Table
   199                                  ;	...00101		Task Gate
   200                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   201                                  ;	...01100		Call Gate (386)
   202                                  ;	...01110		Interrupt Gate (386)
   203                                  ;	...01111		Trap Gate (386)
   204                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   205                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   206                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EACCLDT			equ	10000010b					;local descriptor table
   210                                  EACCTASK		equ	10000101b					;task gate
   211                                  EACCTSS			equ	10001001b					;task-state segment
   212                                  EACCGATE		equ	10001100b					;call gate
   213                                  EACCINT			equ	10001110b					;interrupt gate
   214                                  EACCTRAP		equ	10001111b					;trap gate
   215                                  EACCDATA		equ	10010011b					;upward writable data
   216                                  EACCCODE		equ	10011011b					;non-conforming readable code
   217                                  ;-----------------------------------------------------------------------------------------------------------------------
   218                                  ;
   219                                  ;	BIOS Interrupts and Functions						EBIOS...
   220                                  ;
   221                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   222                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   226                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   227                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   228                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   229                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   230                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   231                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	ASCII									EASCII...
   235                                  ;
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   238                                  EASCIILINEFEED		equ	10						;ASCII line feed
   239                                  EASCIIRETURN		equ	13						;ASCII carriage return
   240                                  EASCIIESCAPE		equ	27						;ASCII escape
   241                                  EASCIISPACE		equ	32						;ASCII space
   242                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   243                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   244                                  EASCIILOWERA		equ	97						;ASCII 'a'
   245                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   246                                  EASCIITILDE		equ	126						;ASCII '~'
   247                                  EASCIICASE		equ	00100000b					;ASCII case bit
   248                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;
   251                                  ;	Boot Sector and Loader Constants
   252                                  ;
   253                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   254                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   255                                  ;
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   258                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   259                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   260                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   261                                  EMAXTRIES		equ	5						;max read retries
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ESELDAT			equ	18h						;kernel data selector
   266                                  ESELCGA			equ	20h						;cga video selector
   267                                  ESELOSCODE		equ	48h						;os kernel selector
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;	LDT Selectors								ESEL...
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ESELMQ			equ	2Ch						;console task message queue
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  ;	Kernel Constants							EKRN...
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  EKRNDESLEN		equ	8						;size of descriptor
   276                                  EKRNADR			equ	1000h						;kernel base address
   277                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   278                                  ;-----------------------------------------------------------------------------------------------------------------------
   279                                  ;	Keyboard Flags								EKEY...
   280                                  ;-----------------------------------------------------------------------------------------------------------------------
   281                                  EKEYCTRLLEFT		equ	00000001b					;left control
   282                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   283                                  EKEYALTLEFT		equ	00000100b					;left alt
   284                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   285                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   286                                  EKEYSHIFT		equ	00010010b					;left or right shift
   287                                  EKEYALTRIGHT		equ	00100000b					;right alt
   288                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   289                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   290                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   291                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;	Console Constants							ECON...
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ECONCOLS		equ	80						;columns per row
   296                                  ECONROWS		equ	24						;console rows
   297                                  ECONOIAROW		equ	24						;operator information area row
   298                                  ECONCOLBYTES		equ	2						;bytes per column
   299                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   300                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   301                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   302                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;	Kernel Message Identifiers						EMSG...
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   307                                  EMSGKEYUP		equ	41010000h					;message: key-up
   308                                  EMSGKEYCHAR		equ	41020000h					;message: character
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  ;
   311                                  ;	Structures
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;-----------------------------------------------------------------------------------------------------------------------
   315                                  ;
   316                                  ;	MQUEUE
   317                                  ;
   318                                  ;	The MQUEUE structure maps memory used for a message queue.
   319                                  ;
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  struc			MQUEUE
   322 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   323 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   324 00000008 <res 000003F8>          MQData			resd	254						;message queue
   325                                  endstruc
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;	OSDATA
   329                                  ;
   330                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   331                                  ;	used by the BIOS.
   332                                  ;
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  struc			OSDATA
   335 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   336 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   337 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   338 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   339 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   340 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   341 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   342 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   343 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   344 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   345 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   346 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   347 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   348 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   349 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   350 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   351 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   352 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   353 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   354 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   355 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   356 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   357 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   358 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   359 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   360 00000449 <res 00000001>          			resb	1						;449 current video mode
   361 0000044A <res 00000002>          			resw	1						;44A screen columns
   362 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   363 0000044E <res 00000002>          			resw	1						;44E current video page offset
   364 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   365 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   366 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   367 00000462 <res 00000001>          			resb	1						;462 active display page number
   368 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   369 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   370 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   371 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   372 00000469 <res 00000003>          			resb	3						;469 vague
   373 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   374 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   375 00000471 <res 00000001>          			resb	1						;471 bios break flag
   376 00000472 <res 00000002>          			resw	1						;472 soft reset
   377 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   378 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   379 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   380 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   381 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   382 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   383 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   384 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   385 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   386 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   387 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   388 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   389 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   390 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   391 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   392 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   393 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   394 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   395 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   396 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   397 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   398 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   399 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   400 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   401 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   402 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   403 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   404 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   405 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   406 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   407 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   408 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   409 000004AC <res 00000008>          			resb	8						;4AC reserved
   410 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   411 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   412 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   413 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   414 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   415 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   416 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   417 000004CD <res 00000001>          			resb	1						;4CD unknown
   418 000004CE <res 00000002>          			resw	1						;4CE day counter
   419 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   420 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   421 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   422 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   423 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   424 00000505 <res 0000000A>          			resb	10						;505 POST work area
   425 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   426 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   427 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   428 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   429 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   430 0000051E <res 00000002>          			resw	1						;51E unknown
   431 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   432 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   433 00000530 <res 00000004>          			resb	4						;530 MODE command
   434 00000534 <res 000001CC>          			resb	460						;534 unused
   435 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  ;
   438                                  ;	OS Variables								@disk: N/A	@mem: 000800
   439                                  ;
   440                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   441                                  ;	accessible by any kernel task or interrupt.
   442                                  ;
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ECONDATA		equ	($)
   445 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   446 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   447 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   448 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   449 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   450 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   451 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   452 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   453 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   454 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   455 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   456 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   457 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   458 0000085C <res 00000050>          wzConsoleToken		resb	80						;token buffer
   459                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   460                                  endstruc
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  ;
   463                                  ;	Macros
   464                                  ;
   465                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   466                                  ;
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  %macro			mint	1
   469                                  _%1			equ	($-$$) / EKRNDESLEN
   470                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   471                                  %endmacro
   472                                  %macro			mtrap	1
   473                                  _%1			equ	($-$$) / EKRNDESLEN
   474                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   475                                  %endmacro
   476                                  %macro			menter	1
   477                                  ?%1			equ	($-$$)
   478                                  %endmacro
   479                                  %macro			tsvce	1
   480                                  e%1			equ	($-tsvc)/4
   481                                  			dd	%1
   482                                  %endmacro
   483                                  %ifdef BUILDBOOT
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  ;
   486                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   487                                  ;
   488                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   489                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   490                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   491                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   492                                  ;
   493                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   494                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   495                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   496                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   497                                  ;	immediately followed by a disk parameter table.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  			cpu	8086						;assume minimal CPU
   501                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   502                                  			bits	16						;16-bit code at power-up
   503                                  %ifdef BUILDPREP
   504                                  Boot			jmp	word Prep					;jump to preparation code
   505                                  %else
   506 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   507                                  %endif
   508                                  ;-----------------------------------------------------------------------------------------------------------------------
   509                                  ;
   510                                  ;	Disk Parameter Table
   511                                  ;
   512                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   513                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   514                                  ;
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   517 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   518 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   519 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   520 00000010 02                      cbFatCount		db	2						;file allocation table copies
   521 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   522 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   523 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   524 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   525                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   526 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   527 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   528 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   529                                  ;
   530                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   531                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   532                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   533                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   534                                  ;	given several possible starting values for CS:IP.
   535                                  ;
   536                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   537 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   538                                  .@20			equ	$-$$						;.@20 = 021h
   539 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   540 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   541 00000025 B104                    			mov	cl,4						;shift count
   542 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   543 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   544 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   545                                  ;
   546                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   547                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   548                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   549                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   550                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   551                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   552                                  ;
   553 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   554 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   555 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   556 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   557 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   558                                  ;
   559                                  ;	Our boot addressability is now set up according to the following diagram.
   560                                  ;
   561                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   562                                  ;				|  Unused (DOS Program Segment Prefix)		|
   563                                  ;			007c00	+-----------------------------------------------+ DS:0100
   564                                  ;				|  Boot Sector Code (vstart=100h)		|
   565                                  ;				|						|
   566                                  ;			007e00	+-----------------------------------------------+ DS:0300
   567                                  ;				|  Boot Stack					|
   568                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   569                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   570                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   571                                  ;				|						|
   572                                  ;			009100	+-----------------------------------------------+ DS:1600
   573                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   574                                  ;				|						|
   575                                  ;			009300	+-----------------------------------------------+ DS:1800
   576                                  ;
   577                                  ;	On entry, DL indicates the drive being booted from.
   578                                  ;
   579 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   580                                  ;
   581                                  ;	Compute directory i/o buffer address.
   582                                  ;
   583 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   584 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   585 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   586 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   587                                  ;
   588                                  ;	Compute segment where os.com will be loaded.
   589                                  ;
   590 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   591 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   592 0000004E 83E810                  			sub	ax,16						;AX = 0900
   593 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   594                                  ;
   595                                  ;	Write a message to the console so we know we have our addressability established.
   596                                  ;
   597 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   598 00000057 E84B01                  			call	BootPrint					;display loader message
   599                                  ;
   600                                  ;	Initialize the number of directory sectors to search.
   601                                  ;
   602 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   603 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   604                                  ;
   605                                  ;	Compute number of directory sectors and initialize overhead count.
   606                                  ;
   607 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   608 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   609 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   610 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   611                                  ;
   612                                  ;	Compute directory entries per sector.
   613                                  ;
   614 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   615 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   616 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   617                                  ;
   618                                  ;	Compute first logical directory sector and update overhead count.
   619                                  ;
   620 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   621 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   622 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   623 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   624 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   625 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   626                                  ;
   627                                  ;	Read directory sector.
   628                                  ;
   629 00000089 B001                    .30			mov	al,1						;sector count
   630 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   631 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   632 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   633                                  ;
   634                                  ;	Setup variables to search this directory sector.
   635                                  ;
   636 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   637 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   638 0000009C 7603                    			jna	.40						;no, continue
   639 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   640 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   641 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   642 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   643                                  ;
   644                                  ;	Loop through directory sectors searching for kernel program.
   645                                  ;
   646 000000AC 56                      .50			push	si						;save kernel name address
   647 000000AD 57                      			push	di						;save dir i/o buffer address
   648 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   649 000000B1 FC                      			cld							;forward strings
   650 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   651 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   652 000000B5 5E                      			pop	si						;restore kernel name address
   653 000000B6 7418                    			je	.60						;exit loop if found
   654 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   655 000000BC 48                      			dec	ax						;decrement remaining entries
   656 000000BD 75ED                    			jnz	.50						;next entry
   657                                  ;
   658                                  ;	Repeat search if we are not at the end of the directory.
   659                                  ;
   660 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   661 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   662 000000C8 75BF                    			jne	.30						;no, get next sector
   663 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   664 000000CD E9C000                  			jmp	BootExit					;display message and exit
   665                                  ;
   666                                  ;	If we find the kernel program in the directory, read the FAT.
   667                                  ;
   668 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   669 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   670 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   671 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   672 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   673 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   674                                  ;
   675                                  ;	Get the starting cluster of the kernel program and target address.
   676                                  ;
   677 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   678 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   679                                  ;
   680                                  ;	Read each program cluster into RAM.
   681                                  ;
   682 000000E9 50                      .70			push	ax						;save cluster nbr
   683 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   684 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   685 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   686 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   687 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   688 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   689 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   690 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   691                                  ;
   692                                  ;	Update buffer pointer for next cluster.
   693                                  ;
   694 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   695 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   696 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   697 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   698 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   699                                  ;
   700                                  ;	Compute next cluster number.
   701                                  ;
   702 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   703 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   704 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   705 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   706 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   707 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   708 0000011B 83E701                  			and	di,1						;get low bit
   709 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   710 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   711 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   712                                  ;
   713                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   714                                  ;
   715 00000126 F6C101                  			test	cl,1						;is cluster odd?
   716 00000129 7404                    			jz	.80						;no, skip ahead
   717 0000012B B104                    			mov	cl,4						;shift count
   718 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   719 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   720 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   721 00000135 75B2                    			jne	.70						;no, continue
   722                                  ;
   723                                  ;	Transfer control to the operating system program.
   724                                  ;
   725 00000137 EA                      			db	0EAh						;jmp seg:offset
   726 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   727 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   728                                  ;
   729                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   730                                  ;
   731 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   732 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   733 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   734 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   735 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   736 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   737 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   738 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   739 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   740 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   741                                  ;
   742                                  ;	Try maxtries times to read sector.
   743                                  ;
   744 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   745 0000015B 53                      .10			push	bx						;save buffer address
   746 0000015C 51                      			push	cx						;save retry count
   747 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   748 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   749 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   750 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   751 0000016A 59                      			pop	cx						;restore retry count
   752 0000016B 5B                      			pop	bx						;restore buffer address
   753 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   754 0000016E E2EB                    			loop	.10						;retry
   755                                  ;
   756                                  ;	Handle disk error: convert to ASCII and store in error string.
   757                                  ;
   758 00000170 88E0                    			mov	al,ah						;AL = bios error code
   759 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   760 00000174 B210                    			mov	dl,16						;divisor for base 16
   761 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   762 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   763 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   764 0000017E 7203                    			jb	.20						;continue if numeral
   765 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   766 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   767 00000185 7203                    			jb	.30						;continue if numeral
   768 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   769 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   770 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   771 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   772 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   773 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   774 00000197 7504                    			jnz	.20						;continue if key pressed
   775 00000199 FB                      			sti							;enable maskable interrupts
   776 0000019A F4                      			hlt							;wait for interrupt
   777 0000019B EBF6                    			jmp	.10						;repeat
   778 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   779 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   780 000001A1 FB                      .30			sti							;enable maskable interrupts
   781 000001A2 F4                      			hlt							;stop until reset, int, nmi
   782 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   783                                  ;
   784                                  ;	Display text message.
   785                                  ;
   786 000001A5 FC                      BootPrint		cld							;forward strings
   787 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   788 000001A7 84C0                    			test	al,al						;end of string?
   789 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   790 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   791 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   792 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   793 000001B1 C3                      BootReturn		ret							;return
   794                                  ;-----------------------------------------------------------------------------------------------------------------------
   795                                  ;
   796                                  ;	Constants
   797                                  ;
   798                                  ;-----------------------------------------------------------------------------------------------------------------------
   799                                  			align	2
   800 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   801 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   801 000001BD 4F4D               
   802 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   802 000001C8 2E2E0D0A00         
   803 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   803 000001D6 7220               
   804 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   805 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   805 000001E4 7373696E6700       
   806                                  ;-----------------------------------------------------------------------------------------------------------------------
   807                                  ;
   808                                  ;	Work Areas
   809                                  ;
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811                                  			align	2
   812 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   813 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   814 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   815 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   816 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   817                                  wwReadCountCommand	equ	$						;read count and command
   818 000001F4 00                      wbReadCount		db	0						;sectors to read
   819 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   820                                  wwDriveHead		equ	$						;drive, head (word)
   821 000001F6 00                      wbDrive			db	0						;drive
   822 000001F7 00                      wbHead			db	0						;head
   823                                  wwSectorTrack		equ	$						;sector, track (word)
   824 000001F8 00                      			db	0						;sector
   825 000001F9 00                      wbTrack			db	0						;track
   826 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   827 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   828                                  %endif
   829                                  %ifdef BUILDPREP
   830                                  ;-----------------------------------------------------------------------------------------------------------------------
   831                                  ;
   832                                  ;	Diskette Preparation Code
   833                                  ;
   834                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   835                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   836                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   837                                  ;
   838                                  ;-----------------------------------------------------------------------------------------------------------------------
   839                                  ;
   840                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   841                                  ;
   842                                  Prep			mov	si,czPrepMsg10					;starting message address
   843                                  			call	BootPrint					;display message
   844                                  ;
   845                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   846                                  ;
   847                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   848                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   849                                  			jnz	.12						;continue if key pressed
   850                                  			sti							;enable interrupts
   851                                  			hlt							;wait for interrupt
   852                                  			jmp	.10						;repeat
   853                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   854                                  			je	.15						;yes, branch
   855                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   856                                  			jne	.10						;no, repeat
   857                                  			jmp	.90						;yes, exit program
   858                                  ;
   859                                  ;	Display writing-sector message and patch the JMP instruction.
   860                                  ;
   861                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   862                                  			call	BootPrint					;display message
   863                                  			mov	bx,Boot+1					;address of JMP instruction operand
   864                                  			mov	ax,01Bh						;address past disk parameter table
   865                                  			mov	[bx],ax						;update the JMP instruction
   866                                  ;
   867                                  ;	Try to read the boot sector.
   868                                  ;
   869                                  			mov	cx,EMAXTRIES					;try up to five times
   870                                  .20			push	cx						;save remaining tries
   871                                  			mov	bx,wcPrepInBuf					;input buffer address
   872                                  			mov	dx,0						;head zero, drive zero
   873                                  			mov	cx,1						;track zero, sector one
   874                                  			mov	ax,0201h					;read one sector
   875                                  			int	EBIOSINTDISKETTE				;attempt the read
   876                                  			pop	cx						;restore remaining retries
   877                                  			jnc	.30						;skip ahead if successful
   878                                  			loop	.20						;try again
   879                                  			mov	si,czPrepMsg20					;read-error message address
   880                                  			jmp	.50						;branch to error routine
   881                                  ;
   882                                  ;	Copy diskette parms from input buffer to output buffer.
   883                                  ;
   884                                  .30			mov	si,wcPrepInBuf					;input buffer address
   885                                  			add	si,11						;skip over JMP and system ID
   886                                  			mov	di,Boot						;output buffer address
   887                                  			add	di,11						;skip over JMP and system ID
   888                                  			mov	cx,19						;length of diskette parameters
   889                                  			cld							;forward string copies
   890                                  			rep	movsb						;copy diskette parameters
   891                                  ;
   892                                  ;	Try to write boot sector to diskette.
   893                                  ;
   894                                  			mov	cx,EMAXTRIES					;try up to five times
   895                                  .40			push	cx						;save remaining tries
   896                                  			mov	bx,Boot						;output buffer address
   897                                  			mov	dx,0						;head zero, drive zero
   898                                  			mov	cx,1						;track zero, sector one
   899                                  			mov	ax,0301h					;write one sector
   900                                  			int	EBIOSINTDISKETTE				;attempt the write
   901                                  			pop	cx						;restore remaining retries
   902                                  			jnc	.80						;skip ahead if successful
   903                                  			loop	.40						;try again
   904                                  			mov	si,czPrepMsg30					;write-error message address
   905                                  ;
   906                                  ;	Convert the error code to ASCII and display the error message.
   907                                  ;
   908                                  .50			push	ax						;save error code
   909                                  			mov	al,ah						;copy error code
   910                                  			mov	ah,0						;AX = error code
   911                                  			mov	dl,10h						;hexadecimal divisor
   912                                  			idiv	dl						;AL = hi-order, AH = lo-order
   913                                  			or	ax,3030h					;add ASCII zone digits
   914                                  			cmp	ah,3Ah						;AH ASCII numeral?
   915                                  			jb	.60						;yes, continue
   916                                  			add	ah,7						;no, make ASCII 'A'-'F'
   917                                  .60			cmp	al,3Ah						;al ASCII numeral?
   918                                  			jb	.70						;yes, continue
   919                                  			add	al,7						;no, make ASCII
   920                                  .70			mov	[si+17],ax					;put ASCII error code in message
   921                                  			call	BootPrint					;write error message
   922                                  			pop	ax						;restore error code
   923                                  ;
   924                                  ;	Display the completion message.
   925                                  ;
   926                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   927                                  			mov	al,ah						;BIOS return code
   928                                  			cmp	al,0						;success?
   929                                  			je	.85						;yes, continue
   930                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   931                                  			cmp	al,1						;disk parameter error?
   932                                  			je	.85						;yes, continue
   933                                  			mov	si,czPrepMsgErr2				;address mark not found message
   934                                  			cmp	al,2						;address mark not found?
   935                                  			je	.85						;yes, continue
   936                                  			mov	si,czPrepMsgErr3				;protected disk message
   937                                  			cmp	al,3						;protected disk?
   938                                  			je	.85						;yes, continue
   939                                  			mov	si,czPrepMsgErr6				;diskette removed message
   940                                  			cmp	al,6						;diskette removed?
   941                                  			je	.85						;yes, continue
   942                                  			mov	si,czPrepMsgErr80				;drive timed out message
   943                                  			cmp	al,80H						;drive timed out?
   944                                  			je	.85						;yes, continue
   945                                  			mov	si,czPrepMsgErrXX				;unknown error message
   946                                  .85			call	BootPrint					;display result message
   947                                  .90			mov	ax,4C00H					;terminate with zero result code
   948                                  			int	21h						;terminate DOS program
   949                                  			ret							;return (should not execute)
   950                                  ;-----------------------------------------------------------------------------------------------------------------------
   951                                  ;
   952                                  ;	Diskette Preparation Messages
   953                                  ;
   954                                  ;-----------------------------------------------------------------------------------------------------------------------
   955                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   956                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   957                                  			db	13,10
   958                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   959                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   960                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   961                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   962                                  			db	13,10,0
   963                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   964                                  			db	13,10,0
   965                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   966                                  			db	13,10,0
   967                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   968                                  			db	13,10,0
   969                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   970                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   971                                  			db	13,10,0
   972                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   973                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   974                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   975                                  			db	13,10,"and retry."
   976                                  			db	13,10,0
   977                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   978                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   979                                  			db	13,10,"using another diskette."
   980                                  			db	13,10,0
   981                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   982                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   983                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   984                                  			db	13,10,0
   985                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   986                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   987                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   988                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   989                                  			db	13,10,"is properly inserted in the diskette drive."
   990                                  			db	13,10,0
   991                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   992                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   993                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   994                                  			db	13,10,0
   995                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   996                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   997                                  			db	13,10,"your computer's technical reference for a description of this error code."
   998                                  			db	13,10,0
   999                                  wcPrepInBuf		equ	$
  1000                                  %endif
  1001                                  %ifdef BUILDDISK
  1002                                  ;-----------------------------------------------------------------------------------------------------------------------
  1003                                  ;
  1004                                  ;	File Allocation Tables
  1005                                  ;
  1006                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1007                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1008                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1009                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1010                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1011                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1012                                  ;	the last cluster in the chain.
  1013                                  ;
  1014                                  ;	Every three bytes encode two FAT entries as follows:
  1015                                  ;
  1016                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1017                                  ;
  1018                                  ;-----------------------------------------------------------------------------------------------------------------------
  1019                                  ;-----------------------------------------------------------------------------------------------------------------------
  1020                                  ;
  1021                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1022                                  ;
  1023                                  ;-----------------------------------------------------------------------------------------------------------------------
  1024                                  section			fat1							;first copy of FAT
  1025 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1026 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1027 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1028 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1029 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1030 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1031 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1032 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1033 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1034 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1035 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1036 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1037                                  ;-----------------------------------------------------------------------------------------------------------------------
  1038                                  ;
  1039                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1040                                  ;
  1041                                  ;-----------------------------------------------------------------------------------------------------------------------
  1042                                  section			fat2							;second copy of FAT
  1043 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1044 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1045 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1046 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1047 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1048 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1049 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1050 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1051 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1052 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1053 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1054 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1055                                  ;-----------------------------------------------------------------------------------------------------------------------
  1056                                  ;
  1057                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1058                                  ;
  1059                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1060                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1061                                  ;	copy.
  1062                                  ;
  1063                                  ;-----------------------------------------------------------------------------------------------------------------------
  1064                                  section			dir							;diskette directory
  1065 00000000 4F5320202020202043-     			db	"OS      COM"					;file name (must contain spaces)
  1065 00000009 4F4D               
  1066 0000000B 20                      			db	20h						;attribute (archive bit set)
  1067 0000000C 00<rept>                			times	10 db 0;					;unused
  1068 00000016 0000                    			dw	0h						;time
  1069 00000018 41                      			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1070 00000019 49                      			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1071 0000001A 0200                    			dw	2						;first cluster
  1072 0000001C 00520000                			dd	5200h						;file size
  1073 00000020 00<rept>                			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1074                                  %endif
  1075                                  %ifdef BUILDCOM
  1076                                  ;-----------------------------------------------------------------------------------------------------------------------
  1077                                  ;
  1078                                  ;	OS.COM
  1079                                  ;
  1080                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1081                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1082                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1083                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1084                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1085                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1086                                  ;
  1087                                  ;	Our loader addressability is set up according to the following diagram.
  1088                                  ;
  1089                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1090                                  ;				|  Boot Sector & Loader Stack Area		|
  1091                                  ;				|						|
  1092                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1093                                  ;
  1094                                  ;
  1095                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1096                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1097                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1098                                  ;				|  Loader Code					|
  1099                                  ;				|						|
  1100                                  ;			009300	+-----------------------------------------------+ CS:0200
  1101                                  ;
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103                                  ;-----------------------------------------------------------------------------------------------------------------------
  1104                                  ;
  1105                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1106                                  ;
  1107                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1108                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1109                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1110                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1111                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1112                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1113                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1114                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1115                                  ;	registers.
  1116                                  ;
  1117                                  ;-----------------------------------------------------------------------------------------------------------------------
  1118                                  			cpu	8086						;assume minimal CPU
  1119                                  section			loader	vstart=100h					;use .COM compatible addressing
  1120                                  			bits	16						;this is 16-bit code
  1121 00000000 0E                      Loader			push	cs						;use the code segment
  1122 00000001 1F                      			pop	ds						;...as our data segment
  1123 00000002 0E                      			push	cs						;use the code segment
  1124 00000003 07                      			pop	es						;...as our extra segment
  1125                                  ;
  1126                                  ;	Write a message to the console so we know we have our addressability established.
  1127                                  ;
  1128 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1129 00000007 E8A600                  			call	PutTTYString					;display loader message
  1130                                  ;
  1131                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1132                                  ;
  1133 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1134 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1135 00000010 3C03                    			cmp	al,3						;80386+?
  1136 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1137                                  			cpu	386						;allow 80386 instructions
  1138 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1139 00000017 E89600                  			call	PutTTYString					;display message
  1140                                  ;
  1141                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1142                                  ;
  1143 0000001A BE0003                  			mov	si,300h						;GDT offset
  1144 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1145 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1146 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1147 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1148 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1149 00000029 894432                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1150 0000002C 884C34                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1151 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1152 00000032 E87B00                  			call	PutTTYString					;display message
  1153                                  ;
  1154                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1155                                  ;
  1156 00000035 680001                  			push	EKRNSEG						;use kernel segment ...
  1157 00000038 07                      			pop	es						;... as target segment
  1158 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1159 0000003B BE0003                  			mov	si,300h						;DS:SI = source address
  1160 0000003E B90050                  			mov	cx,5000h					;CX = kernel size
  1161 00000041 FC                      			cld							;forward strings
  1162 00000042 F3A4                    			rep	movsb						;copy kernel image
  1163 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1164 00000047 E86600                  			call	PutTTYString					;display message
  1165                                  ;
  1166                                  ;	Switch to protected mode.
  1167                                  ;
  1168 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1169 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1170 0000004E BC0010                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1171 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1172 00000053 BB2820                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1173 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1174 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1175 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1176 0000005E 4A                      			dec	dx						;restore outer loop count
  1177 0000005F 75F8                    			jnz	.10						;continue outer loop
  1178 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1179                                  ;
  1180                                  ;	Enable hardware and maskable interrupts
  1181                                  ;
  1182 00000063 30C0                    			xor	al,al						;enable all registers code
  1183 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1184 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1185 00000069 FB                      			sti							;enable maskable interrupts
  1186                                  ;
  1187                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1188                                  ;
  1189 0000006A 2E0F001E[BE00]          			ltr	[cs:cwLoaderTSS]				;load task register
  1190 00000070 2E0F0016[C000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1191 00000076 EA00005800              			jmp	0058h:0						;jump to task state segment selector
  1192                                  ;-----------------------------------------------------------------------------------------------------------------------
  1193                                  ;
  1194                                  ;	Routine:	LoaderExit
  1195                                  ;
  1196                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1197                                  ;
  1198                                  ;	In:		DS:SI	string address
  1199                                  ;
  1200                                  ;-----------------------------------------------------------------------------------------------------------------------
  1201 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1202                                  ;
  1203                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1204                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1205                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1206                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1207                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1208                                  ;
  1209 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1210 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1211 00000082 7504                    			jnz	.40						;exit if key pressed
  1212 00000084 FB                      			sti							;enable maskable interrupts
  1213 00000085 F4                      			hlt							;wait for interrupt
  1214 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1215                                  ;
  1216                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1217                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1218                                  ;	HLT until the system resets.
  1219                                  ;
  1220 00000088 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1221 0000008A E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1222 0000008C FB                      .50			sti							;enable maskable interrupts
  1223 0000008D F4                      			hlt							;stop until reset, int, nmi
  1224 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1225                                  ;-----------------------------------------------------------------------------------------------------------------------
  1226                                  ;
  1227                                  ;	Routine:	GetCPUType
  1228                                  ;
  1229                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1230                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1231                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1232                                  ;
  1233                                  ;	Output:		AX	0 = 808x, v20, etc.
  1234                                  ;				1 = 80186
  1235                                  ;				2 = 80286
  1236                                  ;				3 = 80386
  1237                                  ;
  1238                                  ;-----------------------------------------------------------------------------------------------------------------------
  1239 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1240 00000092 B120                    			mov	cl,32						;shift count
  1241 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1242 00000096 08C0                    			or	al,al						;did the shift happen?
  1243 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1244                                  			cpu	186
  1245 0000009A 54                      			push	sp						;save stack pointer
  1246 0000009B 59                      			pop	cx						;...into cx
  1247 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1248 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1249                                  			cpu	286
  1250 000000A0 40                      			inc	ax						;AX = 2
  1251 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1252 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1253 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1254 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1255 000000AE 40                      			inc	ax						;AX = 3
  1256 000000AF C3                      .10			ret							;return
  1257                                  ;-----------------------------------------------------------------------------------------------------------------------
  1258                                  ;
  1259                                  ;	Routine:	PutTTYString
  1260                                  ;
  1261                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1262                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1263                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1264                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1265                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1266                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1267                                  ;			registers and flags unless used to indicate return status.
  1268                                  ;
  1269                                  ;	In:		DS:SI	address of string
  1270                                  ;
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272 000000B0 FC                      PutTTYString		cld							;forward strings
  1273 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1274 000000B2 84C0                    			test	al,al						;end of string?
  1275 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1276 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1277 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1278 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1279 000000BC C3                      .10			ret							;return
  1280                                  ;-----------------------------------------------------------------------------------------------------------------------
  1281                                  ;
  1282                                  ;	Loader Data
  1283                                  ;
  1284                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1285                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1286                                  ;
  1287                                  ;-----------------------------------------------------------------------------------------------------------------------
  1288 000000BD 90                      			align	2
  1289 000000BE 6800                    cwLoaderTSS		dw	0068h						;TSS selector
  1290 000000C0 6000                    cwLoaderLDT		dw	0060h						;LDT selector
  1291 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1292 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1293 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 "
  1293 000000D1 74696E672073797374-
  1293 000000DA 656D20726571756972-
  1293 000000E3 657320616E20693338-
  1293 000000EC 3620               
  1294 000000EE 6F72206C6174657220-     			db	"or later processor.",13,10,
  1294 000000F7 70726F636573736F72-
  1294 00000100 2E0D0A             
  1295 00000103 506C65617365207072-     			db	"Please press any key to restart the "
  1295 0000010C 65737320616E79206B-
  1295 00000115 657920746F20726573-
  1295 0000011E 746172742074686520 
  1296 00000127 636F6D70757465722E-     			db	"computer.",13,10,0
  1296 00000130 0D0A00             
  1297 00000133 435055206F6B0D0A00      czCPUOKMsg		db	"CPU ok",13,10,0
  1298 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1298 00000145 7265640D0A00       
  1299 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1299 00000154 616465640D0A00     
  1300 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1300 00000164 2E2E2E0D0A00       
  1301 0000016A 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1302 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1303                                  ;-----------------------------------------------------------------------------------------------------------------------
  1304                                  ;
  1305                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1306                                  ;
  1307                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1308                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1309                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1310                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1311                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1312                                  ;
  1313                                  ;-----------------------------------------------------------------------------------------------------------------------
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  ;
  1316                                  ;	Tables
  1317                                  ;
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;-----------------------------------------------------------------------------------------------------------------------
  1320                                  ;
  1321                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1322                                  ;
  1323                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1324                                  ;	first descriptor must be all nulls.
  1325                                  ;
  1326                                  ;	6   5         4         3         2         1         0
  1327                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1328                                  ;	----------------------------------------------------------------
  1329                                  ;	h......hffffmmmma......ab......................bn..............n
  1330                                  ;	00000000			all areas have base addresses below 2^24
  1331                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1332                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1333                                  ;	            1001		present, ring-0, selector
  1334                                  ;
  1335                                  ;	h...h	hi-order base address (bits 24-31)
  1336                                  ;	ffff	flags
  1337                                  ;	mmmm	hi-order limit (bits 16-19)
  1338                                  ;	a...a	access
  1339                                  ;	b...b	lo-order base address (bits 0-23)
  1340                                  ;	n...n	lo-order limit (bits 0-15)
  1341                                  ;
  1342                                  ;-----------------------------------------------------------------------------------------------------------------------
  1343                                  section			gdt							;global descriptor table
  1344 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1345 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1346 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1347 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1348 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1349 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1350 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1351 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1352 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1353 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1354 00000050 7F00004700824000        			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1355 00000058 7F00804700894000        			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1356 00000060 7F00000F00824000        			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1357 00000068 7F00800F00894000        			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1358 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1362                                  ;
  1363                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1364                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1365                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1366                                  ;
  1367                                  ;	6   5         4         3         2         1         0
  1368                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1369                                  ;	----------------------------------------------------------------
  1370                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1371                                  ;
  1372                                  ;	h...h	high-order offset (bits 16-31)
  1373                                  ;	P	present (0=unused interrupt)
  1374                                  ;	zz	descriptor privilege level
  1375                                  ;	S	storage segment (must be zero for IDT)
  1376                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1377                                  ;	S...S	handling code selector in GDT
  1378                                  ;	l...l	lo-order offset (bits 0-15)
  1379                                  ;
  1380                                  ;-----------------------------------------------------------------------------------------------------------------------
  1381                                  section			idt							;interrupt descriptor table
  1382                                  			mint	dividebyzero					;00 divide by zero
  1382                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1382 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1383                                  			mint	singlestep					;01 single step
  1383                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1383 00000008 04004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1384                                  			mint	nmi						;02 non-maskable
  1384                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1384 00000010 08004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1385                                  			mint	break						;03 break
  1385                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1385 00000018 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1386                                  			mint	into						;04 into
  1386                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1386 00000020 10004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1387                                  			mint	bounds						;05 bounds
  1387                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1387 00000028 14004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1388                                  			mint	badopcode					;06 bad op code
  1388                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1388 00000030 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1389                                  			mint	nocoproc					;07 no coprocessor
  1389                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1389 00000038 1C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1390                                  			mint	doublefault					;08 double-fault
  1390                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1390 00000040 20004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1391                                  			mint	operand						;09 operand
  1391                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1391 00000048 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1392                                  			mint	badtss						;0A bad TSS
  1392                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1392 00000050 28004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1393                                  			mint	notpresent					;0B not-present
  1393                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1393 00000058 2C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1394                                  			mint	stacklimit					;0C stack limit
  1394                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1394 00000060 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1395                                  			mint	protection					;0D general protection fault
  1395                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1395 00000068 34004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1396                                  			mint	int14						;0E (reserved)
  1396                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1396 00000070 38004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1397                                  			mint	int15						;0F (reserved)
  1397                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1397 00000078 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1398                                  			mint	coproccalc					;10 (reserved)
  1398                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1398 00000080 40004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1399                                  			mint	int17						;11 (reserved)
  1399                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1399 00000088 44004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1400                                  			mint	int18						;12 (reserved)
  1400                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1400 00000090 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1401                                  			mint	int19						;13 (reserved)
  1401                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1401 00000098 4C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1402                                  			mint	int20						;14 (reserved)
  1402                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1402 000000A0 50004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1403                                  			mint	int21						;15 (reserved)
  1403                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1403 000000A8 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1404                                  			mint	int22						;16 (reserved)
  1404                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1404 000000B0 58004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1405                                  			mint	int23						;17 (reserved)
  1405                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1405 000000B8 5C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1406                                  			mint	int24						;18 (reserved)
  1406                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1406 000000C0 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1407                                  			mint	int25						;19 (reserved)
  1407                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1407 000000C8 64004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1408                                  			mint	int26						;1A (reserved)
  1408                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1408 000000D0 68004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1409                                  			mint	int27						;1B (reserved)
  1409                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1409 000000D8 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1410                                  			mint	int28						;1C (reserved)
  1410                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1410 000000E0 70004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1411                                  			mint	int29						;1D (reserved)
  1411                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1411 000000E8 74004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1412                                  			mint	int30						;1E (reserved)
  1412                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1412 000000F0 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1413                                  			mint	int31						;1F (reserved)
  1413                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1413 000000F8 7C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1414                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1414                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1414 00000100 80004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1415                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1415                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1415 00000108 D0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1416                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1416                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1416 00000110 2B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1417                                  			mtrap	com2						;23 IRQ3 com2
  1417                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1417 00000118 2E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1418                                  			mtrap	com1						;24 IRQ4 com1
  1418                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1418 00000120 31044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1419                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1419                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1419 00000128 34044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1420                                  			mtrap	diskette					;26 IRQ6 diskette
  1420                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1420 00000130 37044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1421                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1421                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1421 00000138 4B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1422                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1422                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1422 00000140 4E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1423                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1423                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1423 00000148 51044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1424                                  			mtrap	irq10						;2A IRQA (reserved)
  1424                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1424 00000150 54044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1425                                  			mtrap	irq11						;2B IRQB (reserved)
  1425                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1425 00000158 57044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1426                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1426                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1426 00000160 5A044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1427                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1427                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1427 00000168 5D044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1428                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1428                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1428 00000170 60044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1429                                  			mtrap	irq15						;2F IRQF (reserved)
  1429                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1429 00000178 63044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1430                                  			mtrap	svc						;30 OS services
  1430                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1430 00000180 72044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1431 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1432                                  ;-----------------------------------------------------------------------------------------------------------------------
  1433                                  ;
  1434                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1435                                  ;
  1436                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1437                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1438                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1439                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1440                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1441                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1442                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1443                                  ;
  1444                                  ;-----------------------------------------------------------------------------------------------------------------------
  1445                                  section			kernel	vstart=0h					;data offsets relative to 0
  1446                                  			cpu	386						;allow 80386 instructions
  1447                                  			bits	32						;this is 32-bit code
  1448                                  ;-----------------------------------------------------------------------------------------------------------------------
  1449                                  ;
  1450                                  ;	CPU Interrupt Handlers
  1451                                  ;
  1452                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1453                                  ;
  1454                                  ;-----------------------------------------------------------------------------------------------------------------------
  1455                                  			menter	dividebyzero					;divide by zero
  1455                              <1> ?%1 equ ($-$$)
  1456 00000000 6A00                    			push	0						;
  1457 00000002 EB7A                    			jmp	intcpu						;
  1458                                  			menter	singlestep					;single step
  1458                              <1> ?%1 equ ($-$$)
  1459 00000004 6A01                    			push	1						;
  1460 00000006 EB76                    			jmp	intcpu						;
  1461                                  			menter	nmi						;non-maskable
  1461                              <1> ?%1 equ ($-$$)
  1462 00000008 6A02                    			push	2						;
  1463 0000000A EB72                    			jmp	intcpu						;
  1464                                  			menter	break						;break
  1464                              <1> ?%1 equ ($-$$)
  1465 0000000C 6A03                    			push	3						;
  1466 0000000E EB6E                    			jmp	intcpu						;
  1467                                  			menter	into						;into
  1467                              <1> ?%1 equ ($-$$)
  1468 00000010 6A04                    			push	4						;
  1469 00000012 EB6A                    			jmp	intcpu						;
  1470                                  			menter	bounds						;bounds
  1470                              <1> ?%1 equ ($-$$)
  1471 00000014 6A05                    			push	5						;
  1472 00000016 EB66                    			jmp	intcpu						;
  1473                                  			menter	badopcode					;bad opcode interrupt
  1473                              <1> ?%1 equ ($-$$)
  1474 00000018 6A06                    			push	6						;
  1475 0000001A EB62                    			jmp	intcpu						;
  1476                                  			menter	nocoproc					;no coprocessor interrupt
  1476                              <1> ?%1 equ ($-$$)
  1477 0000001C 6A07                    			push	7						;
  1478 0000001E EB5E                    			jmp	intcpu						;
  1479                                  			menter	doublefault					;doublefault interrupt
  1479                              <1> ?%1 equ ($-$$)
  1480 00000020 6A08                    			push	8						;
  1481 00000022 EB5A                    			jmp	intcpu						;
  1482                                  			menter	operand						;operand interrupt
  1482                              <1> ?%1 equ ($-$$)
  1483 00000024 6A09                    			push	9						;
  1484 00000026 EB56                    			jmp	intcpu						;
  1485                                  			menter	badtss						;bad tss interrupt
  1485                              <1> ?%1 equ ($-$$)
  1486 00000028 6A0A                    			push	10						;
  1487 0000002A EB52                    			jmp	intcpu						;
  1488                                  			menter	notpresent					;not present interrupt
  1488                              <1> ?%1 equ ($-$$)
  1489 0000002C 6A0B                    			push	11						;
  1490 0000002E EB4E                    			jmp	intcpu						;
  1491                                  			menter	stacklimit					;stack limit interrupt
  1491                              <1> ?%1 equ ($-$$)
  1492 00000030 6A0C                    			push	12						;
  1493 00000032 EB4A                    			jmp	intcpu						;
  1494                                  			menter	protection					;protection fault interrupt
  1494                              <1> ?%1 equ ($-$$)
  1495 00000034 6A0D                    			push	13						;
  1496 00000036 EB46                    			jmp	intcpu						;
  1497                                  			menter	int14						;(reserved)
  1497                              <1> ?%1 equ ($-$$)
  1498 00000038 6A0E                    			push	14						;
  1499 0000003A EB42                    			jmp	intcpu						;
  1500                                  			menter	int15						;(reserved)
  1500                              <1> ?%1 equ ($-$$)
  1501 0000003C 6A0F                    			push	15						;
  1502 0000003E EB3E                    			jmp	intcpu						;
  1503                                  			menter	coproccalc					;coprocessor calculation
  1503                              <1> ?%1 equ ($-$$)
  1504 00000040 6A10                    			push	16						;
  1505 00000042 EB3A                    			jmp	intcpu						;
  1506                                  			menter	int17						;(reserved)
  1506                              <1> ?%1 equ ($-$$)
  1507 00000044 6A11                    			push	17						;
  1508 00000046 EB36                    			jmp	intcpu						;
  1509                                  			menter	int18						;(reserved)
  1509                              <1> ?%1 equ ($-$$)
  1510 00000048 6A12                    			push	18						;
  1511 0000004A EB32                    			jmp	intcpu						;
  1512                                  			menter	int19						;(reserved)
  1512                              <1> ?%1 equ ($-$$)
  1513 0000004C 6A13                    			push	19						;
  1514 0000004E EB2E                    			jmp	intcpu						;
  1515                                  			menter	int20						;(reserved)
  1515                              <1> ?%1 equ ($-$$)
  1516 00000050 6A14                    			push	20						;
  1517 00000052 EB2A                    			jmp	intcpu						;
  1518                                  			menter	int21						;(reserved)
  1518                              <1> ?%1 equ ($-$$)
  1519 00000054 6A15                    			push	21						;
  1520 00000056 EB26                    			jmp	intcpu						;
  1521                                  			menter	int22						;(reserved)
  1521                              <1> ?%1 equ ($-$$)
  1522 00000058 6A16                    			push	22						;
  1523 0000005A EB22                    			jmp	intcpu						;
  1524                                  			menter	int23						;(reserved)
  1524                              <1> ?%1 equ ($-$$)
  1525 0000005C 6A17                    			push	23						;
  1526 0000005E EB1E                    			jmp	intcpu						;
  1527                                  			menter	int24						;(reserved)
  1527                              <1> ?%1 equ ($-$$)
  1528 00000060 6A18                    			push	24						;
  1529 00000062 EB1A                    			jmp	intcpu						;
  1530                                  			menter	int25						;(reserved)
  1530                              <1> ?%1 equ ($-$$)
  1531 00000064 6A19                    			push	25						;
  1532 00000066 EB16                    			jmp	intcpu						;
  1533                                  			menter	int26						;(reserved)
  1533                              <1> ?%1 equ ($-$$)
  1534 00000068 6A1A                    			push	26						;
  1535 0000006A EB12                    			jmp	intcpu						;
  1536                                  			menter	int27						;(reserved)
  1536                              <1> ?%1 equ ($-$$)
  1537 0000006C 6A1B                    			push	27						;
  1538 0000006E EB0E                    			jmp	intcpu						;
  1539                                  			menter	int28						;(reserved)
  1539                              <1> ?%1 equ ($-$$)
  1540 00000070 6A1C                    			push	28						;
  1541 00000072 EB0A                    			jmp	intcpu						;
  1542                                  			menter	int29						;(reserved)
  1542                              <1> ?%1 equ ($-$$)
  1543 00000074 6A1D                    			push	29						;
  1544 00000076 EB06                    			jmp	intcpu						;
  1545                                  			menter	int30						;(reserved)
  1545                              <1> ?%1 equ ($-$$)
  1546 00000078 6A1E                    			push	30						;
  1547 0000007A EB02                    			jmp	intcpu						;
  1548                                  			menter	int31						;(reserved)
  1548                              <1> ?%1 equ ($-$$)
  1549 0000007C 6A1F                    			push	31						;
  1550 0000007E 58                      intcpu			pop	eax						;
  1551 0000007F CF                      			iretd							;return
  1552                                  ;-----------------------------------------------------------------------------------------------------------------------
  1553                                  ;
  1554                                  ;	Hardware Device Interupts
  1555                                  ;
  1556                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1557                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1558                                  ;	(BX=2028h).
  1559                                  ;
  1560                                  ;-----------------------------------------------------------------------------------------------------------------------
  1561                                  ;-----------------------------------------------------------------------------------------------------------------------
  1562                                  ;
  1563                                  ;	IRQ0	Clock Tick Interrupt
  1564                                  ;
  1565                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1566                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1567                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1568                                  ;
  1569                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1570                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1571                                  ;
  1572                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1573                                  ;	zero, the floppy disk motors are turned off.
  1574                                  ;
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                  			menter	clocktick					;clock tick interrupt
  1576                              <1> ?%1 equ ($-$$)
  1577 00000080 50                      			push	eax						;save modified regs
  1578 00000081 52                      			push	edx						;
  1579 00000082 1E                      			push	ds						;
  1580 00000083 6A18                    			push	ESELDAT						;load OS data selector ...
  1581 00000085 1F                      			pop	ds						;... into data segment register
  1582 00000086 A16C040000              			mov	eax,[wfClockTicks]				;eax = clock ticks
  1583 0000008B 40                      			inc	eax						;increment clock ticks
  1584 0000008C 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1585 00000091 7208                    			jb	irq0.10						;no, skip ahead
  1586 00000093 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1587 00000099 31C0                    			xor	eax,eax						;reset clock ticks
  1588 0000009B A36C040000              irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1589 000000A0 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1590 000000A7 741E                    			je	irq0.20						;yes, skip ahead
  1591 000000A9 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1592 000000AF 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1593 000000B1 FB                      			sti							;enable maskable interrupts
  1594 000000B2 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1595 000000B4 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1596 000000B6 EC                      			in	al,dx						;FDC main status byte
  1597 000000B7 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1598 000000B9 75F7                    			jnz	irq0.15						;wait while busy
  1599 000000BB B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1600 000000BD A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1601 000000C2 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1602 000000C4 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1603 000000C6 EE                      			out	dx,al						;turn motor off
  1604 000000C7 E869070000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1605 000000CC 1F                      			pop	ds						;restore modified regs
  1606 000000CD 5A                      			pop	edx						;
  1607 000000CE 58                      			pop	eax						;
  1608 000000CF CF                      			iretd							;return
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;	IRQ1	Keyboard Interrupt
  1612                                  ;
  1613                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1614                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1615                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1616                                  ;	ALL modified registers upon return.
  1617                                  ;
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  			menter	keyboard					;keyboard interrrupt
  1619                              <1> ?%1 equ ($-$$)
  1620 000000D0 50                      			push	eax						;save non-volatile regs
  1621 000000D1 53                      			push	ebx						;
  1622 000000D2 51                      			push	ecx						;
  1623 000000D3 56                      			push	esi						;
  1624 000000D4 1E                      			push	ds						;
  1625 000000D5 6A18                    			push	ESELDAT						;load OS data selector ...
  1626 000000D7 1F                      			pop	ds						;... into data segment register
  1627 000000D8 30C0                    			xor	al,al						;zero
  1628 000000DA A205080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1629 000000DF A206080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1630 000000E4 A207080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1631 000000E9 A208080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1632 000000EE A209080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1633 000000F3 A20A080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1634 000000F8 B020                    			mov	al,' '						;space
  1635 000000FA A20B080000              			mov	[wbConsoleChar],al				;set character to space
  1636 000000FF B080                    			mov	al,EKEYTIMEOUT					;controller timeout flag
  1637 00000101 F6D0                    			not	al						;controller timeout mask
  1638 00000103 200504080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1639 00000109 8A1D02080000            			mov	bl,[wbConsoleShift]				;shift flags
  1640 0000010F 8A3D03080000            			mov	bh,[wbConsoleLock]				;lock flags
  1641 00000115 E865070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1642 0000011A 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  1643 00000120 E460                    			in	al,EKEYPORTDATA					;read scan code 0
  1644 00000122 A205080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1645 00000127 88C4                    			mov	ah,al						;copy scan code 0
  1646 00000129 B002                    			mov	al,EKEYSHIFTLEFT				;left shift flag
  1647 0000012B 80FC2A                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1648 0000012E 0F84E0000000            			je	irq1.30						;yes, set flag
  1649 00000134 80FCAA                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1650 00000137 0F84DB000000            			je	irq1.40						;yes, reset flag
  1651 0000013D B010                    			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1652 0000013F 80FC36                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1653 00000142 0F84CC000000            			je	irq1.30						;yes, set flag
  1654 00000148 80FCB6                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1655 0000014B 0F84C7000000            			je	irq1.40						;yes, reset flag
  1656 00000151 B001                    			mov	al,EKEYCTRLLEFT					;left control flag
  1657 00000153 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1658 00000156 0F84B8000000            			je	irq1.30						;yes, set flag
  1659 0000015C 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1660 0000015F 0F84B3000000            			je	irq1.40						;yes, reset flag
  1661 00000165 B004                    			mov	al,EKEYALTLEFT					;left alt flag
  1662 00000167 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1663 0000016A 0F84A4000000            			je	irq1.30						;yes, set flag
  1664 00000170 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1665 00000173 0F849F000000            			je	irq1.40						;yes, reset flag
  1666 00000179 B004                    			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1667 0000017B 80FC3A                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1668 0000017E 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1669 00000184 B002                    			mov	al,EKEYLOCKNUM					;num-lock flag
  1670 00000186 80FC45                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1671 00000189 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1672 0000018F B001                    			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1673 00000191 80FC46                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1674 00000194 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1675 0000019A 80FCE0                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1676 0000019D 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1677 000001A3 E8D7060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1678 000001A8 0F8465010000            			jz	irq1.140					;yes, skip ahead
  1679 000001AE E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1680 000001B0 A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1681 000001B5 88C4                    			mov	ah,al						;copy scan code 1
  1682 000001B7 B008                    			mov	al,EKEYCTRLRIGHT				;right control flag
  1683 000001B9 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1684 000001BC 7456                    			je	irq1.30						;yes, set flag
  1685 000001BE 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1686 000001C1 7455                    			je	irq1.40						;yes, reset flag
  1687 000001C3 B020                    			mov	al,EKEYALTRIGHT					;right alt flag
  1688 000001C5 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1689 000001C8 744A                    			je	irq1.30						;yes, set flag
  1690 000001CA 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1691 000001CD 7449                    			je	irq1.40						;yes, reset flag
  1692 000001CF 80FC35                  			cmp	ah,EKEYSLASH					;slash down code?
  1693 000001D2 0F84CB000000            			je	irq1.80						;yes, skip ahead
  1694 000001D8 80FCB5                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1695 000001DB 0F84C2000000            			je	irq1.80						;yes, skip ahead
  1696 000001E1 80FC2A                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1697 000001E4 7405                    			je	irq1.10						;yes, continue
  1698 000001E6 80FCB7                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1699 000001E9 7524                    			jne	irq1.20						;no, skip ahead
  1700 000001EB E88F060000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1701 000001F0 0F841D010000            			jz	irq1.140					;yes, skip ahead
  1702 000001F6 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1703 000001F8 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1704 000001FD E87D060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1705 00000202 0F840B010000            			jz	irq1.140					;yes, skip ahead
  1706 00000208 E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1707 0000020A A208080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1708 0000020F E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1709 00000214 08C3                    irq1.30			or	bl,al						;set shift flag
  1710 00000216 EB0D                    			jmp	irq1.60						;skip ahead
  1711 00000218 F6D0                    irq1.40			not	al						;convert flag to mask
  1712 0000021A 20C3                    			and	bl,al						;reset shift flag
  1713 0000021C EB07                    			jmp	irq1.60						;skip ahead
  1714 0000021E 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1715 00000220 E82B060000              			call	SetKeyboardLamps				;update keyboard lamps
  1716 00000225 881D02080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1717 0000022B 883D03080000            			mov	[wbConsoleLock],bh				;save lock flags
  1718 00000231 E8E1030000              			call	PutConsoleOIAShift				;update OIA indicators
  1719 00000236 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  1720 0000023B 80FCE1                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1721 0000023E 7563                    			jne	irq1.80						;no continue
  1722 00000240 E83A060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1723 00000245 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  1724 0000024B E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1725 0000024D A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1726 00000252 88C4                    			mov	ah,al						;copy scan code 1
  1727 00000254 80FC1D                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1728 00000257 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  1729 0000025D E81D060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1730 00000262 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  1731 00000268 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1732 0000026A A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1733 0000026F E80B060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1734 00000274 0F8499000000            			jz	irq1.140					;yes, skip ahead
  1735 0000027A E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1736 0000027C A208080000              			mov	[wbConsoleScan3],al				;save scan code 3
  1737 00000281 E8F9050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1738 00000286 0F8487000000            			jz	irq1.140					;yes, skip ahead
  1739 0000028C E460                    			in	al,EKEYPORTDATA					;read scan code 4
  1740 0000028E A209080000              			mov	[wbConsoleScan4],al				;save scan code 4
  1741 00000293 E8E7050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1742 00000298 7479                    			jz	irq1.140					;yes, skip ahead
  1743 0000029A E460                    			in	al,EKEYPORTDATA					;read scan code 5
  1744 0000029C A20A080000              			mov	[wbConsoleScan5],al				;save scan code 5
  1745 000002A1 EB78                    			jmp	irq1.150					;continue
  1746 000002A3 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  1747 000002A5 F6C480                  			test	ah,EKEYUP					;release code?
  1748 000002A8 7531                    			jnz	irq1.110					;yes, skip ahead
  1749 000002AA BE[2B030000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  1750 000002AF F6C312                  			test	bl,EKEYSHIFT					;either shift key down?
  1751 000002B2 7405                    			jz	irq1.90						;no, skip ahead
  1752 000002B4 BE[AB030000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  1753 000002B9 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  1754 000002BC 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  1755 000002C0 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1756 000002C3 7411                    			jz	irq1.100					;no skip ahead
  1757 000002C5 88C1                    			mov	cl,al						;copy ASCII code
  1758 000002C7 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1759 000002CA 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1760 000002CD 7207                    			jb	irq1.100					;yes, skip ahead
  1761 000002CF 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1762 000002D2 7702                    			ja	irq1.100					;yes, skip ahead
  1763 000002D4 3420                    			xor	al,EASCIICASE					;switch case
  1764 000002D6 A20B080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1765 000002DB BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1766 000002E0 F6C480                  			test	ah,EKEYUP					;release scan-code?
  1767 000002E3 7405                    			jz	irq1.120					;no, skip ahead
  1768 000002E5 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  1769 000002EA 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  1770 000002EF 09C2                    			or	edx,eax						;msg id and codes
  1771 000002F1 31C9                    			xor	ecx,ecx						;null param
  1772 000002F3 50                      			push	eax						;save codes
  1773 000002F4 E83A040000              			call	PutMessage					;put message to console
  1774 000002F9 58                      			pop	eax						;restore codes
  1775 000002FA 84C0                    			test	al,al						;ASCII translation?
  1776 000002FC 7413                    			jz	irq1.130					;no, skip ahead
  1777 000002FE BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  1778 00000303 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  1779 00000308 09C2                    			or	edx,eax						;msg id and codes
  1780 0000030A 31C9                    			xor	ecx,ecx						;null param
  1781 0000030C E822040000              			call	PutMessage					;put message to console
  1782 00000311 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  1783 00000313 B080                    irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1784 00000315 080504080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  1785 0000031B E891030000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  1786 00000320 E810050000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1787 00000325 1F                      			pop	ds						;restore non-volatile regs
  1788 00000326 5E                      			pop	esi						;
  1789 00000327 59                      			pop	ecx						;
  1790 00000328 5B                      			pop	ebx						;
  1791 00000329 58                      			pop	eax						;
  1792 0000032A CF                      			iretd							;return
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;	Scan-Code to ASCII Translation Tables
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796 0000032B 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1797 00000333 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1798 0000033B 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1799 00000343 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1800 0000034B 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1801 00000353 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1802 0000035B 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1803 00000363 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1804 0000036B 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1805 00000373 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1806 0000037B 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1807 00000383 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1808 0000038B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1809 00000393 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1810 0000039B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1811 000003A3 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1812 000003AB 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1813 000003B3 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1814 000003BB 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1815 000003C3 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1816 000003CB 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1817 000003D3 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1818 000003DB 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1819 000003E3 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1820 000003EB 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1821 000003F3 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1822 000003FB 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1823 00000403 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1824 0000040B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1825 00000413 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1826 0000041B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1827 00000423 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  			menter	iochannel					;secondary 8259A cascade
  1833                              <1> ?%1 equ ($-$$)
  1834 0000042B 50                      			push	eax						;
  1835 0000042C EB3D                    			jmp	hwint						;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  			menter	com2						;serial port 2 interrupt
  1841                              <1> ?%1 equ ($-$$)
  1842 0000042E 50                      			push	eax						;
  1843 0000042F EB3A                    			jmp	hwint						;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  			menter	com1						;serial port 1 interrupt
  1849                              <1> ?%1 equ ($-$$)
  1850 00000431 50                      			push	eax						;
  1851 00000432 EB37                    			jmp	hwint						;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  			menter	lpt2						;parallel port 2 interrupt
  1857                              <1> ?%1 equ ($-$$)
  1858 00000434 50                      			push	eax						;
  1859 00000435 EB34                    			jmp	hwint						;
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861                                  ;
  1862                                  ;	IRQ6	Diskette Hardware Interrupt
  1863                                  ;
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  			menter	diskette					;floppy disk interrupt
  1865                              <1> ?%1 equ ($-$$)
  1866 00000437 50                      			push	eax						;save non-volatile regs
  1867 00000438 1E                      			push	ds						;
  1868 00000439 6A18                    			push	ESELDAT						;load OS data selector ...
  1869 0000043B 1F                      			pop	ds						;... into DS register
  1870 0000043C A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1871 00000441 0C80                    			or	al,10000000b					;set IRQ flag
  1872 00000443 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  1873 00000448 1F                      			pop	ds						;restore non-volatile regs
  1874 00000449 EB20                    			jmp	hwint						;end primary PIC interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  			menter	lpt1						;parallel port 1 interrupt
  1880                              <1> ?%1 equ ($-$$)
  1881 0000044B 50                      			push	eax						;
  1882 0000044C EB1D                    			jmp	hwint						;
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  ;
  1885                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1886                                  ;
  1887                                  ;-----------------------------------------------------------------------------------------------------------------------
  1888                                  			menter	rtclock						;real-time clock interrupt
  1888                              <1> ?%1 equ ($-$$)
  1889 0000044E 50                      			push	eax						;
  1890 0000044F EB13                    			jmp	hwwint						;
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  			menter	retrace						;CGA vertical retrace interrupt
  1896                              <1> ?%1 equ ($-$$)
  1897 00000451 50                      			push	eax						;
  1898 00000452 EB10                    			jmp	hwwint						;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;	IRQ10	Reserved Hardware Interrupt
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  			menter	irq10						;reserved
  1904                              <1> ?%1 equ ($-$$)
  1905 00000454 50                      			push	eax						;
  1906 00000455 EB0D                    			jmp	hwwint						;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                  ;
  1909                                  ;	IRQ11	Reserved Hardware Interrupt
  1910                                  ;
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  			menter	irq11						;reserved
  1912                              <1> ?%1 equ ($-$$)
  1913 00000457 50                      			push	eax						;
  1914 00000458 EB0A                    			jmp	hwwint						;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                  ;
  1917                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1920                              <1> ?%1 equ ($-$$)
  1921 0000045A 50                      			push	eax						;
  1922 0000045B EB07                    			jmp	hwwint						;
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                  ;
  1925                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1926                                  ;
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  			menter	coprocessor					;coprocessor interrupt
  1928                              <1> ?%1 equ ($-$$)
  1929 0000045D 50                      			push	eax						;
  1930 0000045E EB04                    			jmp	hwwint						;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                  ;
  1933                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  			menter	fixeddisk					;fixed disk interrupt
  1936                              <1> ?%1 equ ($-$$)
  1937 00000460 50                      			push	eax						;
  1938 00000461 EB01                    			jmp	hwwint						;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                  ;
  1941                                  ;	IRQ15	Reserved Hardware Interrupt
  1942                                  ;
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  			menter	irq15						;reserved
  1944                              <1> ?%1 equ ($-$$)
  1945 00000463 50                      			push	eax						;save modified regs
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;	Exit from hardware interrupt
  1949                                  ;
  1950                                  ;-----------------------------------------------------------------------------------------------------------------------
  1951 00000464 E8D2030000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1952 00000469 EB05                    			jmp	hwint90						;skip ahead
  1953 0000046B E8C5030000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1954 00000470 58                      hwint90			pop	eax						;restore modified regs
  1955 00000471 CF                      			iretd							;return from interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;	INT 30h Operating System Software Service Interrupt
  1959                                  ;
  1960                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1961                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1962                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1963                                  ;	the entry address of the specific function from a table.
  1964                                  ;
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  			menter	svc
  1966                              <1> ?%1 equ ($-$$)
  1967 00000472 3C07                    			cmp	al,maxtsvc					;is our function out of range?
  1968 00000474 730D                    			jae	svc90						;yes, skip ahead
  1969 00000476 0FB6C0                  			movzx	eax,al						;function
  1970 00000479 C1E002                  			shl	eax,2						;offset into table
  1971 0000047C 2EFF90[84040000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  1972 00000483 CF                      svc90			iretd							;return from interrupt
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                  ;
  1975                                  ;	Service Request Table
  1976                                  ;
  1977                                  ;
  1978                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1981                              <1> tsvc :
  1981                              <1> e%1 equ ($-tsvc)/4
  1981 00000484 [D7040000]          <1>  dd %1
  1982                                  			tsvce	GetConsoleString				;get string input
  1982                              <1> e%1 equ ($-tsvc)/4
  1982 00000488 [04050000]          <1>  dd %1
  1983                                  			tsvce	ClearConsoleScreen				;clear console screen
  1983                              <1> e%1 equ ($-tsvc)/4
  1983 0000048C [90070000]          <1>  dd %1
  1984                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1984                              <1> e%1 equ ($-tsvc)/4
  1984 00000490 [0B080000]          <1>  dd %1
  1985                                  			tsvce	UpperCaseString					;upper-case string
  1985                              <1> e%1 equ ($-tsvc)/4
  1985 00000494 [A0040000]          <1>  dd %1
  1986                                  			tsvce	CompareMemory					;compare memory
  1986                              <1> e%1 equ ($-tsvc)/4
  1986 00000498 [BA040000]          <1>  dd %1
  1987                                  			tsvce	ResetSystem					;reset system using 8042 chip
  1987                              <1> e%1 equ ($-tsvc)/4
  1987 0000049C [41080000]          <1>  dd %1
  1988                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;	Service Request Macros
  1992                                  ;
  1993                                  ;	These macros provide positional parameterization of service request calls.
  1994                                  ;
  1995                                  ;-----------------------------------------------------------------------------------------------------------------------
  1996                                  %macro			putConsoleString 1
  1997                                  			mov	edx,%1						;EDX = string address
  1998                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1999                                  			int	_svc						;invoke OS service
  2000                                  %endmacro
  2001                                  %macro			getConsoleString 4
  2002                                  			mov	edx,%1						;EDX = buffer address
  2003                                  			mov	ecx,%2						;ECX = max characters
  2004                                  			mov	bh,%3						;BH = echo indicator
  2005                                  			mov	bl,%4						;BL = terminator
  2006                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2007                                  			int	_svc						;invoke OS service
  2008                                  %endmacro
  2009                                  %macro			clearConsoleScreen 0
  2010                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2011                                  			int	_svc						;invoke OS service
  2012                                  %endmacro
  2013                                  %macro			placeCursor 0
  2014                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2015                                  			int	_svc						;invoke OS service
  2016                                  %endmacro
  2017                                  %macro			upperCaseString 0
  2018                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2019                                  			int	_svc						;invoke OS service
  2020                                  %endmacro
  2021                                  %macro			compareMemory 0
  2022                                  			mov	al,eCompareMemory				;AL = compare memory fn.
  2023                                  			int	_svc						;invoke OS service
  2024                                  %endmacro
  2025                                  %macro			resetSystem 0
  2026                                  			mov	al,eResetSystem					;AL = system reset fn.
  2027                                  			int	_svc						;invoke OS service
  2028                                  %endmacro
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                  ;
  2031                                  ;	Kernel Function Library
  2032                                  ;
  2033                                  ;-----------------------------------------------------------------------------------------------------------------------
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;
  2036                                  ;	String Helper Routines
  2037                                  ;
  2038                                  ;	UpperCaseString
  2039                                  ;	CompareMemory
  2040                                  ;
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;-----------------------------------------------------------------------------------------------------------------------
  2043                                  ;
  2044                                  ;	Routine:	UpperCaseString
  2045                                  ;
  2046                                  ;	Description:	This routine places all characters in the given string to upper case.
  2047                                  ;
  2048                                  ;	In:		DS:EDX	string address
  2049                                  ;
  2050                                  ;	Out:		EDX	string address
  2051                                  ;
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053 000004A0 56                      UpperCaseString		push	esi						;save non-volatile regs
  2054 000004A1 89D6                    			mov	esi,edx						;string address
  2055 000004A3 FC                      			cld							;forward strings
  2056 000004A4 AC                      .10			lodsb							;string character
  2057 000004A5 84C0                    			test	al,al						;null?
  2058 000004A7 740F                    			jz	.20						;yes, skip ahead
  2059 000004A9 3C61                    			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2060 000004AB 72F7                    			jb	.10						;no, continue
  2061 000004AD 3C7A                    			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2062 000004AF 77F3                    			ja	.10						;no, continue
  2063 000004B1 24DF                    			and	al,EASCIICASEMASK				;mask for upper case
  2064 000004B3 8846FF                  			mov	[esi-1],al					;upper character
  2065 000004B6 EBEC                    			jmp	.10						;continue
  2066 000004B8 5E                      .20			pop	esi						;restore non-volatile regs
  2067 000004B9 C3                      			ret							;return
  2068                                  ;-----------------------------------------------------------------------------------------------------------------------
  2069                                  ;
  2070                                  ;	Routine:	CompareMemory
  2071                                  ;
  2072                                  ;	Description:	This routine compares two byte arrays.
  2073                                  ;
  2074                                  ;	In:		DS:EDX	first source address
  2075                                  ;			DS:EBX	second source address
  2076                                  ;			ECX	comparison length
  2077                                  ;
  2078                                  ;	Out:		EDX	first source address
  2079                                  ;			EBX	second source address
  2080                                  ;			ECX	0	array 1 = array 2
  2081                                  ;				<0	array 1 < array 2
  2082                                  ;				>0	array 1 > array 2
  2083                                  ;
  2084                                  ;-----------------------------------------------------------------------------------------------------------------------
  2085 000004BA 56                      CompareMemory		push	esi						;save non-volatile regs
  2086 000004BB 57                      			push	edi						;
  2087 000004BC 06                      			push	es						;
  2088 000004BD 1E                      			push	ds						;copy DS
  2089 000004BE 07                      			pop	es						;... to ES
  2090 000004BF 89D6                    			mov	esi,edx						;first source address
  2091 000004C1 89DF                    			mov	edi,ebx						;second source address
  2092 000004C3 FC                      			cld							;forward strings
  2093 000004C4 F3A6                    			rep	cmpsb						;compare bytes
  2094 000004C6 B000                    			mov	al,0						;default result
  2095 000004C8 7406                    			jz	.10						;branch if arrays equal
  2096 000004CA B001                    			mov	al,1						;positive result
  2097 000004CC 7302                    			jnc	.10						;branch if target > source
  2098 000004CE B0FF                    			mov	al,-1						;negative result
  2099 000004D0 0FBEC8                  .10			movsx	ecx,al						;extend sign
  2100 000004D3 07                      			pop	es						;restore regs
  2101 000004D4 5F                      			pop	edi						;
  2102 000004D5 5E                      			pop	esi						;
  2103 000004D6 C3                      			ret							;return
  2104                                  ;-----------------------------------------------------------------------------------------------------------------------
  2105                                  ;
  2106                                  ;	Console Helper Routines
  2107                                  ;
  2108                                  ;	PutConsoleString
  2109                                  ;	GetConsoleString
  2110                                  ;	GetConsoleChar
  2111                                  ;	Yield
  2112                                  ;	PreviousConsoleColumn
  2113                                  ;	NextConsoleColumn
  2114                                  ;	FirstConsoleColumn
  2115                                  ;	NextConsoleRow
  2116                                  ;	PutConsoleChar
  2117                                  ;	PutConsoleOIAShift
  2118                                  ;	PutConsoleOIAChar
  2119                                  ;	PutConsoleHexByte
  2120                                  ;
  2121                                  ;-----------------------------------------------------------------------------------------------------------------------
  2122                                  ;-----------------------------------------------------------------------------------------------------------------------
  2123                                  ;
  2124                                  ;	Routine:	PutConsoleString
  2125                                  ;
  2126                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2127                                  ;			console position as needed.
  2128                                  ;
  2129                                  ;	In:		EDX	source address
  2130                                  ;			DS	OS data selector
  2131                                  ;
  2132                                  ;-----------------------------------------------------------------------------------------------------------------------
  2133 000004D7 56                      PutConsoleString	push	esi						;save non-volatile regs
  2134 000004D8 89D6                    			mov	esi,edx						;source address
  2135 000004DA FC                      			cld							;forward strings
  2136 000004DB AC                      .10			lodsb							;ASCII character
  2137 000004DC 08C0                    			or	al,al						;end of string?
  2138 000004DE 7422                    			jz	.40						;yes, skip ahead
  2139 000004E0 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  2140 000004E2 7507                    			jne	.20						;no, skip ahead
  2141 000004E4 E8EB000000              			call	FirstConsoleColumn				;move to start of row
  2142 000004E9 EBF0                    			jmp	.10						;next character
  2143 000004EB 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2144 000004ED 7507                    			jne	.30						;no, skip ahead
  2145 000004EF E8E8000000              			call	NextConsoleRow					;move to next row
  2146 000004F4 EBE5                    			jmp	.10						;next character
  2147 000004F6 E803010000              .30			call	PutConsoleChar					;output character to console
  2148 000004FB E8B9000000              			call	NextConsoleColumn				;advance to next column
  2149 00000500 EBD9                    			jmp	.10						;next character
  2150 00000502 5E                      .40			pop	esi						;restore non-volatile regs
  2151 00000503 C3                      			ret							;return
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153                                  ;
  2154                                  ;	Routine:	GetConsoleString
  2155                                  ;
  2156                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2157                                  ;
  2158                                  ;	Input:		DS:EDX	target buffer address
  2159                                  ;			ECX	maximum number of characters to accept
  2160                                  ;			BH	echo to terminal
  2161                                  ;			BL	terminating character
  2162                                  ;
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164 00000504 51                      GetConsoleString	push	ecx						;save non-volatile regs
  2165 00000505 56                      			push	esi						;
  2166 00000506 57                      			push	edi						;
  2167 00000507 06                      			push	es						;
  2168 00000508 1E                      			push	ds						;load data segment selector ...
  2169 00000509 07                      			pop	es						;... into extra segment register
  2170 0000050A 89D7                    			mov	edi,edx						;edi = target buffer
  2171 0000050C 51                      			push	ecx						;save maximum characters
  2172 0000050D 30C0                    			xor	al,al						;zero register
  2173 0000050F FC                      			cld							;forward strings
  2174 00000510 F3AA                    			rep	stosb						;zero fill buffer
  2175 00000512 59                      			pop	ecx						;maximum characters
  2176 00000513 89D7                    			mov	edi,edx						;edi = target buffer
  2177 00000515 89D6                    			mov	esi,edx						;esi = target buffer
  2178 00000517 E34E                    .10			jecxz	.50						;exit if max-length is zero
  2179 00000519 E856000000              .20			call	GetConsoleChar					;al = next input char
  2180 0000051E 38D8                    			cmp	al,bl						;is this the terminator?
  2181 00000520 7445                    			je	.50						;yes, exit
  2182 00000522 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2183 00000524 7521                    			jne	.30						;no, skip ahead
  2184 00000526 39FE                    			cmp	esi,edi						;at start of buffer?
  2185 00000528 74EF                    			je	.20						;yes, get next character
  2186 0000052A 4F                      			dec	edi						;backup target pointer
  2187 0000052B C60700                  			mov	byte [edi],0					;zero previous character
  2188 0000052E 41                      			inc	ecx						;increment remaining chars
  2189 0000052F F6C701                  			test	bh,1						;echo to console?
  2190 00000532 74E5                    			jz	.20						;no, get next character
  2191 00000534 E85B000000              			call	PreviousConsoleColumn				;backup console position
  2192 00000539 B020                    			mov	al,EASCIISPACE					;ASCII space
  2193 0000053B E8BE000000              			call	PutConsoleChar					;write space to console
  2194 00000540 E8C6020000              			call	PlaceCursor					;position the cursor
  2195 00000545 EBD2                    			jmp	.20						;get next character
  2196 00000547 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2197 00000549 72CE                    			jb	.20						;no, get another character
  2198 0000054B 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2199 0000054D 77CA                    			ja	.20						;no, get another character
  2200 0000054F AA                      			stosb							;store character in buffer
  2201 00000550 F6C701                  			test	bh,1						;echo to console?
  2202 00000553 740F                    			jz	.40						;no, skip ahead
  2203 00000555 E8A4000000              			call	PutConsoleChar					;write character to console
  2204 0000055A E85A000000              			call	NextConsoleColumn				;advance console position
  2205 0000055F E8A7020000              			call	PlaceCursor					;position the cursor
  2206 00000564 49                      .40			dec	ecx						;decrement remaining chars
  2207 00000565 EBB0                    			jmp	.10						;next
  2208 00000567 30C0                    .50			xor	al,al						;null
  2209 00000569 AA                      			stosb							;terminate buffer
  2210 0000056A 07                      			pop	es						;restore non-volatile regs
  2211 0000056B 5F                      			pop	edi						;
  2212 0000056C 5E                      			pop	esi						;
  2213 0000056D 59                      			pop	ecx						;
  2214 0000056E C3                      			ret							;return
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;	Routine:	GetConsoleChar
  2218                                  ;
  2219                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2220                                  ;
  2221                                  ;	Output:		AL	ASCII character code
  2222                                  ;			AH	keyboard scan code
  2223                                  ;
  2224                                  ;-----------------------------------------------------------------------------------------------------------------------
  2225 0000056F E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  2226 00000574 E8E2010000              GetConsoleChar		call	GetMessage					;get the next message
  2227 00000579 09C0                    			or	eax,eax						;do we have a message?
  2228 0000057B 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  2229 0000057D 50                      			push	eax						;save key codes
  2230 0000057E 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  2231 00000583 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  2232 00000588 58                      			pop	eax						;restore key codes
  2233 00000589 75E9                    			jne	GetConsoleChar					;no, try again
  2234 0000058B 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  2235 00000590 C3                      			ret							;return
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                  ;
  2238                                  ;	Routine:	Yield
  2239                                  ;
  2240                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2241                                  ;
  2242                                  ;-----------------------------------------------------------------------------------------------------------------------
  2243 00000591 FB                      Yield			sti							;enable maskagle interrupts
  2244 00000592 F4                      			hlt							;halt until external interrupt
  2245 00000593 C3                      			ret							;return
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  ;
  2248                                  ;	Routine:	PreviousConsoleColumn
  2249                                  ;
  2250                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2251                                  ;			the column is set to the last position in the row and the row is decremented.
  2252                                  ;
  2253                                  ;	Input:		DS	OS data selector
  2254                                  ;
  2255                                  ;-----------------------------------------------------------------------------------------------------------------------
  2256 00000594 A000080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2257 00000599 08C0                    			or	al,al						;start of row?
  2258 0000059B 7514                    			jnz	.10						;no, skip ahead
  2259 0000059D 8A2501080000            			mov	ah,[wbConsoleRow]				;current row
  2260 000005A3 08E4                    			or	ah,ah						;top of screen?
  2261 000005A5 7411                    			jz	.20						;yes, exit with no change
  2262 000005A7 FECC                    			dec	ah						;decrement row
  2263 000005A9 882501080000            			mov	[wbConsoleRow],ah				;save row
  2264 000005AF B050                    			mov	al,ECONCOLS					;set maximum column
  2265 000005B1 FEC8                    .10			dec	al						;decrement column
  2266 000005B3 A200080000              			mov	[wbConsoleColumn],al				;save column
  2267 000005B8 C3                      .20			ret							;return
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269                                  ;
  2270                                  ;	Routine:	NextConsoleColumn
  2271                                  ;
  2272                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2273                                  ;			incremented if the end of the current row is reached.
  2274                                  ;
  2275                                  ;	In:		DS	OS data selector
  2276                                  ;
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278 000005B9 A000080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2279 000005BE FEC0                    			inc	al						;increment column
  2280 000005C0 A200080000              			mov	[wbConsoleColumn],al				;save column
  2281 000005C5 3C50                    			cmp	al,ECONCOLS					;end of row?
  2282 000005C7 720A                    			jb	.10						;no, skip ahead
  2283 000005C9 E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2284 000005CE E809000000              			call	NextConsoleRow					;line feed to next row
  2285 000005D3 C3                      .10			ret							;return
  2286                                  ;-----------------------------------------------------------------------------------------------------------------------
  2287                                  ;
  2288                                  ;	Routine:	FirstConsoleColumn
  2289                                  ;
  2290                                  ;	Description:	This routine resets the console column to start of the row.
  2291                                  ;
  2292                                  ;	In:		DS	OS data selector
  2293                                  ;
  2294                                  ;-----------------------------------------------------------------------------------------------------------------------
  2295 000005D4 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2296 000005D6 A200080000              			mov	[wbConsoleColumn],al				;save column
  2297 000005DB C3                      			ret							;return
  2298                                  ;-----------------------------------------------------------------------------------------------------------------------
  2299                                  ;
  2300                                  ;	Routine:	NextConsoleRow
  2301                                  ;
  2302                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2303                                  ;
  2304                                  ;	In:		DS	OS data selector
  2305                                  ;
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307 000005DC A001080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2308 000005E1 FEC0                    			inc	al						;increment row
  2309 000005E3 A201080000              			mov	[wbConsoleRow],al				;save row
  2310 000005E8 3C18                    			cmp	al,ECONROWS					;end of screen?
  2311 000005EA 7211                    			jb	.10						;no, skip ahead
  2312 000005EC E8DA010000              			call	ScrollConsoleRow				;scroll up one row
  2313 000005F1 A001080000              			mov	al,[wbConsoleRow]				;row
  2314 000005F6 FEC8                    			dec	al						;decrement row
  2315 000005F8 A201080000              			mov	[wbConsoleRow],al				;save row
  2316 000005FD C3                      .10			ret							;return
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  ;
  2319                                  ;	Routine:	PutConsoleChar
  2320                                  ;
  2321                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2322                                  ;
  2323                                  ;	In:		AL	ASCII character
  2324                                  ;			DS	OS data selector
  2325                                  ;
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327 000005FE 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  2328 000005FF 06                      			push	es						;
  2329 00000600 6A20                    			push	ESELCGA						;load CGA selector ...
  2330 00000602 07                      			pop	es						;... into extra segment reg
  2331 00000603 8A0D00080000            			mov	cl,[wbConsoleColumn]				;column
  2332 00000609 8A2D01080000            			mov	ch,[wbConsoleRow]				;row
  2333 0000060F E8E3010000              			call	SetConsoleChar					;put character at row, column
  2334 00000614 07                      			pop	es						;restore non-volatile regs
  2335 00000615 59                      			pop	ecx						;
  2336 00000616 C3                      			ret							;return
  2337                                  ;-----------------------------------------------------------------------------------------------------------------------
  2338                                  ;
  2339                                  ;	Routine:	PutConsoleOIAShift
  2340                                  ;
  2341                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2342                                  ;
  2343                                  ;	In:		BL	shift flags
  2344                                  ;			BH	lock flags
  2345                                  ;			DS	OS data selector
  2346                                  ;
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348 00000617 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2349 00000618 06                      			push	es						;
  2350 00000619 6A20                    			push	ESELCGA						;load CGA selector ...
  2351 0000061B 07                      			pop	es						;... into ES register
  2352 0000061C B518                    			mov	ch,ECONOIAROW					;OIA row
  2353 0000061E B020                    			mov	al,EASCIISPACE					;space is default character
  2354 00000620 F6C302                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2355 00000623 7402                    			jz	.10						;no, skip ahead
  2356 00000625 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2357 00000627 B10E                    .10			mov	cl,14						;indicator column
  2358 00000629 E8C9010000              			call	SetConsoleChar					;display ASCII character
  2359 0000062E B020                    			mov	al,EASCIISPACE					;ASCII space
  2360 00000630 F6C310                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2361 00000633 7402                    			jz	.20						;no, skip ahead
  2362 00000635 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2363 00000637 B140                    .20			mov	cl,64						;indicator column
  2364 00000639 E8B9010000              			call	SetConsoleChar					;display ASCII character
  2365 0000063E B020                    			mov	al,EASCIISPACE					;ASCII space
  2366 00000640 F6C301                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2367 00000643 7402                    			jz	.30						;no, skip ahead
  2368 00000645 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2369 00000647 B10F                    .30			mov	cl,15						;indicator column
  2370 00000649 E8A9010000              			call	SetConsoleChar					;display ASCII character
  2371 0000064E B020                    			mov	al,EASCIISPACE					;ASCII space
  2372 00000650 F6C308                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2373 00000653 7402                    			jz	.40						;no, skip ahead
  2374 00000655 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2375 00000657 B13F                    .40			mov	cl,63						;indicator column
  2376 00000659 E899010000              			call	SetConsoleChar					;display ASCII character
  2377 0000065E B020                    			mov	al,EASCIISPACE					;ASCII space
  2378 00000660 F6C304                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2379 00000663 7402                    			jz	.50						;no, skip ahead
  2380 00000665 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2381 00000667 B110                    .50			mov	cl,16						;indicator column
  2382 00000669 E889010000              			call	SetConsoleChar					;display ASCII character
  2383 0000066E B020                    			mov	al,EASCIISPACE					;ASCII space
  2384 00000670 F6C320                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2385 00000673 7402                    			jz	.60						;no, skip ahead
  2386 00000675 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2387 00000677 B13E                    .60			mov	cl,62						;indicator column
  2388 00000679 E879010000              			call	SetConsoleChar					;display ASCII character
  2389 0000067E B020                    			mov	al,EASCIISPACE					;ASCII space
  2390 00000680 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2391 00000683 7402                    			jz	.70						;no, skip ahead
  2392 00000685 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2393 00000687 B14E                    .70			mov	cl,78						;indicator column
  2394 00000689 E869010000              			call	SetConsoleChar					;display ASCII character
  2395 0000068E B020                    			mov	al,EASCIISPACE					;ASCII space
  2396 00000690 F6C702                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2397 00000693 7402                    			jz	.80						;no, skip ahead
  2398 00000695 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2399 00000697 B14D                    .80			mov	cl,77						;indicator column
  2400 00000699 E859010000              			call	SetConsoleChar					;display ASCII character
  2401 0000069E B020                    			mov	al,EASCIISPACE					;ASCII space
  2402 000006A0 F6C701                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2403 000006A3 7402                    			jz	.90						;no, skip ahead
  2404 000006A5 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2405 000006A7 B14C                    .90			mov	cl,76						;indicator column
  2406 000006A9 E849010000              			call	SetConsoleChar					;display ASCII character
  2407 000006AE 07                      			pop	es						;restore non-volatile regs
  2408 000006AF 59                      			pop	ecx						;
  2409 000006B0 C3                      			ret							;return
  2410                                  ;-----------------------------------------------------------------------------------------------------------------------
  2411                                  ;
  2412                                  ;	Routine:	PutConsoleOIAChar
  2413                                  ;
  2414                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2415                                  ;
  2416                                  ;	In:		DS	OS data selector
  2417                                  ;
  2418                                  ;-----------------------------------------------------------------------------------------------------------------------
  2419 000006B1 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2420 000006B2 51                      			push	ecx						;
  2421 000006B3 56                      			push	esi						;
  2422 000006B4 1E                      			push	ds						;
  2423 000006B5 06                      			push	es						;
  2424 000006B6 6A18                    			push	ESELDAT						;load OS data selector ...
  2425 000006B8 1F                      			pop	ds						;... into data segment register
  2426 000006B9 6A20                    			push	ESELCGA						;load CGA selector ...
  2427 000006BB 07                      			pop	es						;... into extra segment register
  2428 000006BC BE05080000              			mov	esi,wbConsoleScan0				;scan codes address
  2429 000006C1 B718                    			mov	bh,ECONOIAROW					;OIA row
  2430 000006C3 B300                    			mov	bl,0						;starting column
  2431 000006C5 B906000000              			mov	ecx,6						;maximum scan codes
  2432 000006CA 51                      .10			push	ecx						;save remaining count
  2433 000006CB 89D9                    			mov	ecx,ebx						;row, column
  2434 000006CD AC                      			lodsb							;read scan code
  2435 000006CE 08C0                    			or	al,al						;scan code present?
  2436 000006D0 7407                    			jz	.20						;no, skip ahead
  2437 000006D2 E834000000              			call	PutConsoleHexByte				;display scan code
  2438 000006D7 EB10                    			jmp	.30						;continue
  2439 000006D9 B020                    .20			mov	al,' '						;ASCII space
  2440 000006DB E817010000              			call	SetConsoleChar					;display space
  2441 000006E0 FEC1                    			inc	cl
  2442 000006E2 B020                    			mov	al,' '						;ASCII space
  2443 000006E4 E80E010000              			call	SetConsoleChar					;display space
  2444 000006E9 80C302                  .30			add	bl,2						;next column (+2)
  2445 000006EC 59                      			pop	ecx						;restore remaining
  2446 000006ED E2DB                    			loop	.10						;next code
  2447 000006EF A00B080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2448 000006F4 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2449 000006F6 720D                    			jb	.40						;no, skip ahead
  2450 000006F8 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2451 000006FA 7709                    			ja	.40						;no, skip ahead
  2452 000006FC 88FD                    			mov	ch,bh						;OIA row
  2453 000006FE B128                    			mov	cl,40						;character display column
  2454 00000700 E8F2000000              			call	SetConsoleChar					;display ASCII character
  2455 00000705 07                      .40			pop	es						;restore non-volatile regs
  2456 00000706 1F                      			pop	ds						;
  2457 00000707 5E                      			pop	esi						;
  2458 00000708 59                      			pop	ecx						;
  2459 00000709 5B                      			pop	ebx						;
  2460 0000070A C3                      			ret							;return
  2461                                  ;-----------------------------------------------------------------------------------------------------------------------
  2462                                  ;
  2463                                  ;	Routine:	PutConsoleHexByte
  2464                                  ;
  2465                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2466                                  ;
  2467                                  ;	In:		AL	byte value
  2468                                  ;			CH	row
  2469                                  ;			CL	column
  2470                                  ;			DS	OS data selector
  2471                                  ;			ES	CGA selector
  2472                                  ;
  2473                                  ;-----------------------------------------------------------------------------------------------------------------------
  2474 0000070B 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  2475 0000070C 88C3                    			mov	bl,al						;save byte value
  2476 0000070E C0E804                  			shr	al,4						;hi-order nybble
  2477 00000711 0C30                    			or	al,030h						;apply ASCII zone
  2478 00000713 3C3A                    			cmp	al,03ah						;numeric?
  2479 00000715 7202                    			jb	.10						;yes, skip ahead
  2480 00000717 0407                    			add	al,7						;add ASCII offset for alpha
  2481 00000719 E8D9000000              .10			call	SetConsoleChar					;display ASCII character
  2482 0000071E FEC1                    			inc	cl						;increment column
  2483 00000720 88D8                    			mov	al,bl						;byte value
  2484 00000722 240F                    			and	al,0fh						;lo-order nybble
  2485 00000724 0C30                    			or	al,30h						;apply ASCII zone
  2486 00000726 3C3A                    			cmp	al,03ah						;numeric?
  2487 00000728 7202                    			jb	.20						;yes, skip ahead
  2488 0000072A 0407                    			add	al,7						;add ASCII offset for alpha
  2489 0000072C E8C6000000              .20			call	SetConsoleChar					;display ASCII character
  2490 00000731 5B                      			pop	ebx						;restore non-volatile regs
  2491 00000732 C3                      			ret							;return
  2492                                  ;-----------------------------------------------------------------------------------------------------------------------
  2493                                  ;
  2494                                  ;	Message Queue Helper Routines
  2495                                  ;
  2496                                  ;	PutMessage
  2497                                  ;	GetMessage
  2498                                  ;
  2499                                  ;-----------------------------------------------------------------------------------------------------------------------
  2500                                  ;-----------------------------------------------------------------------------------------------------------------------
  2501                                  ;
  2502                                  ;	Routine:	PutMessage
  2503                                  ;
  2504                                  ;	Description:	This routine adda a message to the message queue.
  2505                                  ;
  2506                                  ;	Input:		ECX	hi-order data word
  2507                                  ;			EDX	lo-order data word
  2508                                  ;
  2509                                  ;	Output:		CY	0 = success
  2510                                  ;				1 = fail: queue is full
  2511                                  ;
  2512                                  ;-----------------------------------------------------------------------------------------------------------------------
  2513 00000733 1E                      PutMessage		push	ds						;save non-volatile regs
  2514 00000734 6A2C                    			push	ESELMQ						;load task message queue selector ...
  2515 00000736 1F                      			pop	ds						;... into data segment register
  2516 00000737 A104000000              			mov	eax,[MQTail]					;tail ptr
  2517 0000073C 833800                  			cmp	dword [eax],0					;is queue full?
  2518 0000073F F9                      			stc							;assume failure
  2519 00000740 7517                    			jne	.20						;yes, cannot store
  2520 00000742 8910                    			mov	[eax],edx					;store lo-order data
  2521 00000744 894804                  			mov	[eax+4],ecx					;store hi-order data
  2522 00000747 83C008                  			add	eax,8						;next queue element adr
  2523 0000074A 25FC030000              			and	eax,03fch					;at end of queue?
  2524 0000074F 7502                    			jnz	.10						;no, skip ahead
  2525 00000751 B008                    			mov	al,8						;reset to top of queue
  2526 00000753 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  2527 00000758 F8                      			clc							;indicate success
  2528 00000759 1F                      .20			pop	ds						;restore non-volatile regs
  2529 0000075A C3                      			ret							;return
  2530                                  ;-----------------------------------------------------------------------------------------------------------------------
  2531                                  ;
  2532                                  ;	Routine:	GetMessage
  2533                                  ;
  2534                                  ;	Description:	This routine reads and removes a message from the message queue.
  2535                                  ;
  2536                                  ;	Output:		EAX	lo-order message data
  2537                                  ;			EDX	hi-order message data
  2538                                  ;
  2539                                  ;			CY	0 = message read
  2540                                  ;				1 = no message to read
  2541                                  ;
  2542                                  ;-----------------------------------------------------------------------------------------------------------------------
  2543 0000075B 53                      GetMessage		push	ebx						;save non-volatile regs
  2544 0000075C 51                      			push	ecx						;
  2545 0000075D 1E                      			push	ds						;
  2546 0000075E 6A2C                    			push	ESELMQ						;load message queue selector ...
  2547 00000760 1F                      			pop	ds						;... into data segment register
  2548 00000761 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  2549 00000767 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  2550 00000769 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2551 0000076C 09D0                    			or	eax,edx						;is queue empty?
  2552 0000076E F9                      			stc							;assume queue is emtpy
  2553 0000076F 741B                    			jz	.20						;yes, skip ahead
  2554 00000771 31C9                    			xor	ecx,ecx						;store zero
  2555 00000773 890B                    			mov	[ebx],ecx					;... in lo-order dword
  2556 00000775 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  2557 00000778 83C308                  			add	ebx,8						;next queue element
  2558 0000077B 81E3FC030000            			and	ebx,03fch					;at end of queue?
  2559 00000781 7502                    			jnz	.10						;no, skip ahead
  2560 00000783 B308                    			mov	bl,8						;reset to 1st entry
  2561 00000785 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  2562 0000078B F8                      			clc							;indicate message read
  2563 0000078C 1F                      .20			pop	ds						;restore non-volatile regs
  2564 0000078D 59                      			pop	ecx						;
  2565 0000078E 5B                      			pop	ebx						;
  2566 0000078F C3                      			ret							;return
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568                                  ;
  2569                                  ;	Memory-Mapped Video Routines
  2570                                  ;
  2571                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2572                                  ;
  2573                                  ;	ClearConsoleScreen
  2574                                  ;	ScrollConsoleRow
  2575                                  ;	SetConsoleChar
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  ;
  2580                                  ;	Routine:	ClearConsoleScreen
  2581                                  ;
  2582                                  ;	Description:	This routine clears the console (CGA) screen.
  2583                                  ;
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585 00000790 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  2586 00000791 57                      			push	edi						;
  2587 00000792 1E                      			push	ds						;
  2588 00000793 06                      			push	es						;
  2589 00000794 6A18                    			push	ESELDAT						;load OS Data selector ...
  2590 00000796 1F                      			pop	ds						;... into DS register
  2591 00000797 6A20                    			push	ESELCGA						;load CGA selector ...
  2592 00000799 07                      			pop	es						;... into ES register
  2593 0000079A B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  2594 0000079F B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2595 000007A4 31FF                    			xor	edi,edi						;target offset
  2596 000007A6 FC                      			cld							;forward strings
  2597 000007A7 F3AB                    			rep	stosd						;reset screen body
  2598 000007A9 B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  2599 000007AE B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2600 000007B3 F3AB                    			rep	stosd						;reset OIA line
  2601 000007B5 30C0                    			xor	al,al						;zero register
  2602 000007B7 A201080000              			mov	[wbConsoleRow],al				;reset console row
  2603 000007BC A200080000              			mov	[wbConsoleColumn],al				;reset console column
  2604 000007C1 E845000000              			call	PlaceCursor					;place cursor at current position
  2605 000007C6 07                      			pop	es						;restore non-volatile regs
  2606 000007C7 1F                      			pop	ds						;
  2607 000007C8 5F                      			pop	edi						;
  2608 000007C9 59                      			pop	ecx						;
  2609 000007CA C3                      			ret							;return
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  ;
  2612                                  ;	Routine:	ScrollConsoleRow
  2613                                  ;
  2614                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2615                                  ;
  2616                                  ;-----------------------------------------------------------------------------------------------------------------------
  2617 000007CB 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  2618 000007CC 56                      			push	esi						;
  2619 000007CD 57                      			push	edi						;
  2620 000007CE 1E                      			push	ds						;
  2621 000007CF 06                      			push	es						;
  2622 000007D0 6A20                    			push	ESELCGA						;load CGA video selector ...
  2623 000007D2 1F                      			pop	ds						;... into DS
  2624 000007D3 6A20                    			push	ESELCGA						;load CGA video selector ...
  2625 000007D5 07                      			pop	es						;... into ES
  2626 000007D6 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2627 000007DB BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2628 000007E0 31FF                    			xor	edi,edi						;edi = target (line 1)
  2629 000007E2 FC                      			cld							;forward strings
  2630 000007E3 F3A5                    			rep	movsd						;move 24 lines up
  2631 000007E5 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2632 000007EA B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2633 000007EF F3AB                    			rep	stosd						;clear bottom row
  2634 000007F1 07                      			pop	es						;restore non-volatile regs
  2635 000007F2 1F                      			pop	ds						;
  2636 000007F3 5F                      			pop	edi						;
  2637 000007F4 5E                      			pop	esi						;
  2638 000007F5 59                      			pop	ecx						;
  2639 000007F6 C3                      			ret							;return
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                  ;
  2642                                  ;	Routine:	SetConsoleChar
  2643                                  ;
  2644                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2645                                  ;
  2646                                  ;	In:		AL	ASCII character
  2647                                  ;			CL	column
  2648                                  ;			CH	row
  2649                                  ;			ES	CGA selector
  2650                                  ;
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652 000007F7 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  2653 000007F9 0FB6C5                  			movzx	eax,ch						;row
  2654 000007FC B450                    			mov	ah,ECONCOLS					;cols/row
  2655 000007FE F6E4                    			mul	ah						;row * cols/row
  2656 00000800 00C8                    			add	al,cl						;add column
  2657 00000802 80D400                  			adc	ah,0						;handle carry
  2658 00000805 D1E0                    			shl	eax,1						;screen offset
  2659 00000807 268810                  			mov	[es:eax],dl					;store character
  2660 0000080A C3                      			ret							;return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;	Input/Output Routines
  2664                                  ;
  2665                                  ;	These routines read and/or write directly to ports.
  2666                                  ;
  2667                                  ;	PlaceCursor
  2668                                  ;	PutPrimaryEndOfInt
  2669                                  ;	PutSecondaryEndOfInt
  2670                                  ;	ResetSystem
  2671                                  ;	SetKeyboardLamps
  2672                                  ;	WaitForKeyInBuffer
  2673                                  ;	WaitForKeyOutBuffer
  2674                                  ;
  2675                                  ;-----------------------------------------------------------------------------------------------------------------------
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  ;
  2678                                  ;	Routine:	PlaceCursor
  2679                                  ;
  2680                                  ;	Description:	This routine positions the cursor on the console.
  2681                                  ;
  2682                                  ;	In:		DS	OS data selector
  2683                                  ;
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685 0000080B 51                      PlaceCursor		push	ecx						;save non-volatile regs
  2686 0000080C A001080000              			mov	al,[wbConsoleRow]				;al = row
  2687 00000811 B450                    			mov	ah,ECONCOLS					;ah = cols/row
  2688 00000813 F6E4                    			mul	ah						;row offset
  2689 00000815 020500080000            			add	al,[wbConsoleColumn]				;add column
  2690 0000081B 80D400                  			adc	ah,0						;add overflow
  2691 0000081E 89C1                    			mov	ecx,eax						;screen offset
  2692 00000820 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  2693 00000822 B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  2694 00000824 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2695 00000826 EE                      			out	dx,al						;select register
  2696 00000827 42                      			inc	edx						;data port
  2697 00000828 88E8                    			mov	al,ch						;hi-order cursor loc
  2698 0000082A EE                      			out	dx,al						;store hi-order loc
  2699 0000082B 4A                      			dec	edx						;register select port
  2700 0000082C B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2701 0000082E EE                      			out	dx,al						;select register
  2702 0000082F 42                      			inc	edx						;data port
  2703 00000830 88C8                    			mov	al,cl						;lo-order cursor loc
  2704 00000832 EE                      			out	dx,al						;store lo-order loc
  2705 00000833 59                      			pop	ecx						;restore non-volatile regs
  2706 00000834 C3                      			ret							;return
  2707                                  ;-----------------------------------------------------------------------------------------------------------------------
  2708                                  ;
  2709                                  ;	Routine:	PutPrimaryEndOfInt
  2710                                  ;
  2711                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2712                                  ;
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714 00000835 FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2715 00000836 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2716 00000838 E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  2717 0000083A C3                      			ret							;return
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;	Routine:	PutSecondaryEndOfInt
  2721                                  ;
  2722                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2723                                  ;
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725 0000083B FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2726 0000083C B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2727 0000083E E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2728 00000840 C3                      			ret							;return
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730                                  ;
  2731                                  ;	Routine:	ResetSystem
  2732                                  ;
  2733                                  ;	Description:	This routine restarts the system using the 8042 controller.
  2734                                  ;
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736 00000841 B9FFFF1F00              ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  2737 00000846 E2FE                    			loop	$						;clear interrupts
  2738 00000848 B0FE                    			mov	al,EKEYCMDRESET					;mask out bit zero
  2739 0000084A E664                    			out	EKEYPORTSTAT,al					;drive bit zero low
  2740 0000084C FB                      .10			sti							;enable maskable interrupts
  2741 0000084D F4                      			hlt							;halt until interrupt
  2742 0000084E EBFC                    			jmp	.10						;repeat until reset kicks in
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  ;
  2745                                  ;	Routine:	SetKeyboardLamps
  2746                                  ;
  2747                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2748                                  ;
  2749                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2750                                  ;
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752 00000850 E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2753 00000855 B0ED                    			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2754 00000857 E660                    			out	EKEYPORTDATA,al					;send command to 8042
  2755 00000859 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2756 0000085E E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2757 00000860 E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  2758 00000865 88F8                    			mov	al,bh						;set/reset lamps value
  2759 00000867 E660                    			out	EKEYPORTDATA,al					;send lamps value
  2760 00000869 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2761 0000086E E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2762 00000870 C3                      			ret							;return
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;	Routine:	WaitForKeyInBuffer
  2766                                  ;
  2767                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2768                                  ;
  2769                                  ;	Out:		ZF	1 = Input buffer ready
  2770                                  ;				0 = Input buffer not ready after timeout
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773 00000871 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2774 00000872 B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2775 00000877 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2776 00000879 A802                    			test	al,EKEYBITIN					;is input buffer still full?
  2777 0000087B E0FA                    			loopnz	.10						;yes, repeat till timeout
  2778 0000087D 59                      			pop	ecx						;restore non-volatile regs
  2779 0000087E C3                      			ret							;return
  2780                                  ;-----------------------------------------------------------------------------------------------------------------------
  2781                                  ;
  2782                                  ;	Routine:	WaitForKeyOutBuffer
  2783                                  ;
  2784                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2785                                  ;
  2786                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2787                                  ;				1 = Output buffer empty after timeout
  2788                                  ;
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790 0000087F 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2791 00000880 B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2792 00000885 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2793 00000887 A801                    			test	al,EKEYBITOUT					;output buffer status bit
  2794 00000889 E1FA                    			loopz	.10						;loop until output buffer bit
  2795 0000088B 59                      			pop	ecx						;restore non-volatile regs
  2796 0000088C C3                      			ret							;return
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                  ;
  2799                                  ;	End of the Kernel Function Library
  2800                                  ;
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802 0000088D 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  2803 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                  ;
  2806                                  ;	Console Task
  2807                                  ;
  2808                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2809                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2810                                  ;	screen and responds to user commands.
  2811                                  ;
  2812                                  ;-----------------------------------------------------------------------------------------------------------------------
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ;
  2815                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2816                                  ;
  2817                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2818                                  ;
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  section			constack						;console task stack
  2821 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  2822                                  ;-----------------------------------------------------------------------------------------------------------------------
  2823                                  ;
  2824                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2825                                  ;
  2826                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2827                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2828                                  ;	16 descriptors. Six are initially defined.
  2829                                  ;
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831                                  section			conldt							;console local descriptors
  2832 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  2833 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  2834 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  2835 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  2836 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  2837 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  2838 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840                                  ;
  2841                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2842                                  ;
  2843                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2844                                  ;	segment. CS to console code.
  2845                                  ;
  2846                                  ;-----------------------------------------------------------------------------------------------------------------------
  2847                                  section			contss							;console task state segment
  2848 00000000 00000000                			dd	0						;00 back-link tss
  2849 00000004 00070000                			dd	0700h						;04 esp ring 0
  2850 00000008 14000000                			dd	0014h						;08 ss ring 0
  2851 0000000C 00070000                			dd	0700h						;0C esp ring 1
  2852 00000010 14000000                			dd	0014h						;10 es ring 1
  2853 00000014 00070000                			dd	0700h						;14 esp ring 2
  2854 00000018 14000000                			dd	0014h						;18 ss ring 2
  2855 0000001C 00000000                			dd	0						;1C cr ring 3
  2856 00000020 00000000                			dd	0						;20 eip
  2857 00000024 00020000                			dd	0200h						;24 eflags
  2858 00000028 00000000                			dd	0						;28 eax
  2859 0000002C 00000000                			dd	0						;2C ecx
  2860 00000030 00000000                			dd	0						;30 edx
  2861 00000034 00000000                			dd	0						;34 ebx
  2862 00000038 00070000                			dd	0700h						;38 esp ring 3
  2863 0000003C 00000000                			dd	0						;3C ebp
  2864 00000040 00000000                			dd	0						;40 esi
  2865 00000044 00000000                			dd	0						;44 edi
  2866 00000048 1C000000                			dd	001Ch						;48 es
  2867 0000004C 24000000                			dd	0024h						;4C cs
  2868 00000050 14000000                			dd	0014h						;50 ss ring 3
  2869 00000054 1C000000                			dd	001Ch						;54 ds
  2870 00000058 00000000                			dd	0						;58 fs
  2871 0000005C 00000000                			dd	0						;5c gs
  2872 00000060 50000000                			dd	0050h						;60 ldt selector in gdt
  2873 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2877                                  ;
  2878                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2879                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2880                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2881                                  ;	event.
  2882                                  ;
  2883                                  ;-----------------------------------------------------------------------------------------------------------------------
  2884                                  section			conmque							;console message queue
  2885 00000000 08000000                			dd	8						;head pointer
  2886 00000004 08000000                			dd	8						;tail pointer
  2887 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  2888                                  ;-----------------------------------------------------------------------------------------------------------------------
  2889                                  ;
  2890                                  ;	Console Code								@disk: 008400	@mem: 005000
  2891                                  ;
  2892                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2893                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2894                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2895                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2896                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2897                                  ;	board input, echoing to the console screen and responding to user commands.
  2898                                  ;
  2899                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2900                                  ;
  2901                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2902                                  ;				|  Real Mode Interrupt Vectors			|
  2903                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2904                                  ;				|  Reserved BIOS Memory Area			|
  2905                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2906                                  ;				|  Shared Kernel Memory Area			|
  2907                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2908                                  ;				|  Global Descriptor Table (GDT)		|
  2909                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2910                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2911                                  ;			002000	+-----------------------------------------------+
  2912                                  ;				|  Interrupt Handlers				|
  2913                                  ;				|  Kernel Function Library			|
  2914                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2915                                  ;				|  Console Task Stack Area			|
  2916                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2917                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2918                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2919                                  ;				|  Console Task Task State Segment (TSS)	|
  2920                                  ;			004800	+-----------------------------------------------+
  2921                                  ;				|  Console Task Message Queue			|
  2922                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2923                                  ;				|  Console Task Code				|
  2924                                  ;				|  Console Task Constants			|
  2925                                  ;			006000	+===============================================+
  2926                                  ;
  2927                                  ;-----------------------------------------------------------------------------------------------------------------------
  2928                                  section			concode	vstart=5000h					;labels relative to 5000h
  2929 00000000 E874000000              ConCode			call	ConInitializeData				;initialize console variables
  2930                                  
  2931                                  			clearConsoleScreen					;clear the console screen
  2931 00000005 B002                <1>  mov al,eClearConsoleScreen
  2931 00000007 CD30                <1>  int _svc
  2932                                  			putConsoleString czTitle				;display startup message
  2932 00000009 BA[49010000]        <1>  mov edx,%1
  2932 0000000E B000                <1>  mov al,ePutConsoleString
  2932 00000010 CD30                <1>  int _svc
  2933                                  .10			putConsoleString czPrompt				;display input prompt
  2933                              <1> .10 :
  2933 00000012 BA[67010000]        <1>  mov edx,%1
  2933 00000017 B000                <1>  mov al,ePutConsoleString
  2933 00000019 CD30                <1>  int _svc
  2934                                  			placeCursor						;set CRT cursor location
  2934 0000001B B003                <1>  mov al,ePlaceCursor
  2934 0000001D CD30                <1>  int _svc
  2935                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  2935 0000001F BA0C080000          <1>  mov edx,%1
  2935 00000024 B94F000000          <1>  mov ecx,%2
  2935 00000029 B701                <1>  mov bh,%3
  2935 0000002B B30D                <1>  mov bl,%4
  2935 0000002D B001                <1>  mov al,eGetConsoleString
  2935 0000002F CD30                <1>  int _svc
  2936                                  			putConsoleString czNewLine				;newline
  2936 00000031 BA[7B010000]        <1>  mov edx,%1
  2936 00000036 B000                <1>  mov al,ePutConsoleString
  2936 00000038 CD30                <1>  int _svc
  2937                                  
  2938 0000003A C6055C08000000          			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  2939 00000041 BA0C080000              			mov	edx,wzConsoleInBuffer				;console input buffer
  2940 00000046 BB5C080000              			mov	ebx,wzConsoleToken				;token buffer
  2941 0000004B E842000000              			call	ConTakeToken					;handle console input
  2942 00000050 BA5C080000              			mov	edx,wzConsoleToken				;token buffer
  2943 00000055 E866000000              			call	ConDetermineCommand				;determine command number
  2944 0000005A 83F807                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  2945 0000005D 720B                    			jb	.20						;yes, branch
  2946                                  
  2947                                  			putConsoleString czUnknownCommand			;display error message
  2947 0000005F BA[69010000]        <1>  mov edx,%1
  2947 00000064 B000                <1>  mov al,ePutConsoleString
  2947 00000066 CD30                <1>  int _svc
  2948                                  
  2949 00000068 EBA8                    			jmp	.10						;next command
  2950 0000006A C1E002                  .20			shl	eax,2						;index into jump table
  2951 0000006D BA[FC000000]            			mov	edx,tConJmpTbl					;jump table base address
  2952 00000072 8B0402                  			mov	eax,[edx+eax]					;command handler routine address
  2953 00000075 FFD0                    			call	eax						;call command handler
  2954 00000077 EB99                    			jmp	.10						;next command
  2955                                  ;-----------------------------------------------------------------------------------------------------------------------
  2956                                  ;
  2957                                  ;	Routine:	ConInitializeData
  2958                                  ;
  2959                                  ;	Description:	This routine initializes console task variables.
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962 00000079 51                      ConInitializeData	push	ecx						;save non-volatile regs
  2963 0000007A 57                      			push	edi						;
  2964 0000007B 06                      			push	es						;
  2965 0000007C 6A18                    			push	ESELDAT						;load OS data selector ...
  2966 0000007E 07                      			pop	es						;... into extra segment register
  2967 0000007F BF00080000              			mov	edi,ECONDATA					;OS console data address
  2968 00000084 30C0                    			xor	al,al						;initialization value
  2969 00000086 B9AC000000              			mov	ecx,ECONDATALEN					;size of OS console data
  2970 0000008B FC                      			cld							;forward strings
  2971 0000008C F3AA                    			rep	stosb						;initialize data
  2972 0000008E 07                      			pop	es						;restore non-volatile regs
  2973 0000008F 5F                      			pop	edi						;
  2974 00000090 59                      			pop	ecx						;
  2975 00000091 C3                      			ret							;return
  2976                                  ;-----------------------------------------------------------------------------------------------------------------------
  2977                                  ;
  2978                                  ;	Routine:	ConTakeToken
  2979                                  ;
  2980                                  ;	Description:	This routine extracts the next token from the given source buffer.
  2981                                  ;
  2982                                  ;	In:		DS:EDX	source buffer address
  2983                                  ;			DS:EBX	target buffer address
  2984                                  ;
  2985                                  ;	Out:		DS:EDX	source buffer address
  2986                                  ;			DS:EBX	target buffer address
  2987                                  ;
  2988                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  2989                                  ;
  2990                                  ;-----------------------------------------------------------------------------------------------------------------------
  2991 00000092 56                      ConTakeToken		push	esi						;save non-volatile regs
  2992 00000093 57                      			push	edi						;
  2993 00000094 89D6                    			mov	esi,edx						;source buffer address
  2994 00000096 89DF                    			mov	edi,ebx						;target buffer address
  2995 00000098 FC                      			cld							;forward strings
  2996 00000099 AC                      .10			lodsb							;load byte
  2997 0000009A 3C20                    			cmp	al,EASCIISPACE					;space?
  2998 0000009C 74FB                    			je	.10						;yes, continue
  2999 0000009E 84C0                    			test	al,al						;end of line?
  3000 000000A0 7410                    			jz	.40						;yes, branch
  3001 000000A2 AA                      .20			stosb							;store byte
  3002 000000A3 AC                      			lodsb							;load byte
  3003 000000A4 84C0                    			test	al,al						;end of line?
  3004 000000A6 740A                    			jz	.40						;no, continue
  3005 000000A8 3C20                    			cmp	al,EASCIISPACE					;space?
  3006 000000AA 75F6                    			jne	.20						;no, continue
  3007 000000AC AC                      .30			lodsb							;load byte
  3008 000000AD 3C20                    			cmp	al,EASCIISPACE					;space?
  3009 000000AF 74FB                    			je	.30						;yes, continue
  3010 000000B1 4E                      			dec	esi						;pre-position
  3011 000000B2 C60700                  .40			mov	byte [edi],0					;terminate buffer
  3012 000000B5 89D7                    			mov	edi,edx						;source buffer address
  3013 000000B7 AC                      .50			lodsb							;remaining byte
  3014 000000B8 AA                      			stosb							;move to front of buffer
  3015 000000B9 84C0                    			test	al,al						;end of line?
  3016 000000BB 75FA                    			jnz	.50						;no, continue
  3017 000000BD 5F                      			pop	edi						;restore non-volatile regs
  3018 000000BE 5E                      			pop	esi						;
  3019 000000BF C3                      			ret							;return
  3020                                  ;-----------------------------------------------------------------------------------------------------------------------
  3021                                  ;
  3022                                  ;	Routine:	ConDetermineCommand
  3023                                  ;
  3024                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3025                                  ;
  3026                                  ;	input:		DS:EDX	command address
  3027                                  ;
  3028                                  ;	output:		EAX	>=0	= command nbr
  3029                                  ;				0	= unknown command
  3030                                  ;
  3031                                  ;-----------------------------------------------------------------------------------------------------------------------
  3032 000000C0 53                      ConDetermineCommand	push	ebx						;save non-volatile regs
  3033 000000C1 56                      			push	esi						;
  3034 000000C2 57                      			push	edi						;
  3035                                  
  3036                                  			upperCaseString						;upper-case string at EDX
  3036 000000C3 B004                <1>  mov al,eUpperCaseString
  3036 000000C5 CD30                <1>  int _svc
  3037                                  
  3038 000000C7 BE[18010000]            			mov	esi,tConCmdTbl					;commands table
  3039 000000CC 31FF                    			xor	edi,edi						;intialize command number
  3040 000000CE FC                      			cld							;forward strings
  3041 000000CF AC                      .10			lodsb							;command length
  3042 000000D0 0FB6C8                  			movzx	ecx,al						;command length
  3043 000000D3 E30D                    			jecxz	.20						;branch if end of table
  3044 000000D5 89F3                    			mov	ebx,esi						;table entry address
  3045 000000D7 01CE                    			add	esi,ecx						;next table entry address
  3046                                  
  3047                                  			compareMemory						;compare byte arrays at EDX, EBX
  3047 000000D9 B005                <1>  mov al,eCompareMemory
  3047 000000DB CD30                <1>  int _svc
  3048                                  
  3049 000000DD E303                    			jecxz	.20						;branch if equal
  3050 000000DF 47                      			inc	edi						;increment command nbr
  3051 000000E0 EBED                    			jmp	.10						;repeat
  3052 000000E2 89F8                    .20			mov	eax,edi						;command number
  3053 000000E4 5F                      			pop	edi						;restore non-volatile regs
  3054 000000E5 5E                      			pop	esi						;
  3055 000000E6 5B                      			pop	ebx						;
  3056 000000E7 C3                      			ret							;return
  3057                                  ;-----------------------------------------------------------------------------------------------------------------------
  3058                                  ;
  3059                                  ;	Routine:	ConClear
  3060                                  ;
  3061                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3062                                  ;
  3063                                  ;-----------------------------------------------------------------------------------------------------------------------
  3064                                  ConClear		clearConsoleScreen					;clear console screen
  3064                              <1> ConClear :
  3064 000000E8 B002                <1>  mov al,eClearConsoleScreen
  3064 000000EA CD30                <1>  int _svc
  3065 000000EC C3                      			ret							;return
  3066                                  ;-----------------------------------------------------------------------------------------------------------------------
  3067                                  ;
  3068                                  ;	Routine:	ConExit
  3069                                  ;
  3070                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3071                                  ;
  3072                                  ;-----------------------------------------------------------------------------------------------------------------------
  3073                                  ConExit			resetSystem						;issue system reset
  3073                              <1> ConExit :
  3073 000000ED B006                <1>  mov al,eResetSystem
  3073 000000EF CD30                <1>  int _svc
  3074 000000F1 C3                      			ret							;return
  3075                                  ;-----------------------------------------------------------------------------------------------------------------------
  3076                                  ;
  3077                                  ;	Routine:	ConVersion
  3078                                  ;
  3079                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3080                                  ;
  3081                                  ;-----------------------------------------------------------------------------------------------------------------------
  3082                                  ConVersion		putConsoleString czTitle				;display version message
  3082                              <1> ConVersion :
  3082 000000F2 BA[49010000]        <1>  mov edx,%1
  3082 000000F7 B000                <1>  mov al,ePutConsoleString
  3082 000000F9 CD30                <1>  int _svc
  3083 000000FB C3                      			ret							;return
  3084                                  ;-----------------------------------------------------------------------------------------------------------------------
  3085                                  ;
  3086                                  ;	Tables
  3087                                  ;
  3088                                  ;-----------------------------------------------------------------------------------------------------------------------
  3089                                  										;---------------------------------------
  3090                                  										;  Command Jump Table
  3091                                  										;---------------------------------------
  3092                                  tConJmpTbl		equ	$						;command jump table
  3093 000000FC ED000000                			dd	ConExit		- ConCode			;shutdown command routine offset
  3094 00000100 F2000000                			dd	ConVersion	- ConCode			;version command routine offset
  3095 00000104 E8000000                			dd	ConClear	- ConCode			;clear command routine offset
  3096 00000108 ED000000                			dd	ConExit		- ConCode			;exit command routine offset
  3097 0000010C ED000000                			dd	ConExit		- ConCode			;quit command routine offset
  3098 00000110 E8000000                			dd	ConClear	- ConCode			;cls command routine offset
  3099 00000114 F2000000                			dd	ConVersion	- ConCode			;ver command routine offset
  3100                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3101                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3102                                  										;---------------------------------------
  3103                                  										;  Command Name Table
  3104                                  										;---------------------------------------
  3105                                  tConCmdTbl		equ	$						;command name table
  3106 00000118 0953485554444F574E-     			db	9,"SHUTDOWN",0					;shutdown command
  3106 00000121 00                 
  3107 00000122 0856455253494F4E00      			db	8,"VERSION",0					;version command
  3108 0000012B 06434C45415200          			db	6,"CLEAR",0					;clear command
  3109 00000132 054558495400            			db	5,"EXIT",0					;exit command
  3110 00000138 055155495400            			db	5,"QUIT",0					;quit command
  3111 0000013E 04434C5300              			db	4,"CLS",0					;cls command
  3112 00000143 0456455200              			db	4,"VER",0					;ver command
  3113 00000148 00                      			db	0						;end of table
  3114                                  ;-----------------------------------------------------------------------------------------------------------------------
  3115                                  ;
  3116                                  ;	Constants
  3117                                  ;
  3118                                  ;-----------------------------------------------------------------------------------------------------------------------
  3119 00000149 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3119 00000152 65726174696E672053-
  3119 0000015B 797374656D20312E30-
  3119 00000164 0D0A00             
  3120 00000167 3A00                    czPrompt		db	":",0						;prompt string
  3121 00000169 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3121 00000172 6F6D6D616E640D0A00 
  3122 0000017B 0D0A00                  czNewLine		db	13,10,0						;new line string
  3123 0000017E 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  3124 00000FFE 55AA                    			db	055h,0AAh					;end of section
  3125                                  %endif
  3126                                  %ifdef BUILDDISK
  3127                                  ;-----------------------------------------------------------------------------------------------------------------------
  3128                                  ;
  3129                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3130                                  ;
  3131                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3132                                  ;
  3133                                  ;-----------------------------------------------------------------------------------------------------------------------
  3134                                  section			unused							;unused disk space
  3135 00000000 F6<rept>                			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3136                                  %endif
