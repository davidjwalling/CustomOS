     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.007
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;                       clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   294                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  ;
   297                                  ;       Firmware-Defined Values
   298                                  ;
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   303                                  ;
   304                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   305                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   309                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   310                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   311                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   312                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   313                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   314                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   315                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   316                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   317                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   318                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  ;
   321                                  ;       Standards-Based Values
   322                                  ;
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;
   326                                  ;       ASCII                                                                   EASCII...
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   330                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   331                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   332                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   333                                  EASCIISPACE             equ     020h                                            ;space
   334                                  EASCIIUPPERA            equ     041h                                            ;'A'
   335                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   336                                  EASCIILOWERA            equ     061h                                            ;'a'
   337                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   338                                  EASCIITILDE             equ     07Eh                                            ;'~'
   339                                  EASCIICASE              equ     00100000b                                       ;case bit
   340                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;
   343                                  ;       Operating System Values
   344                                  ;
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   349                                  ;
   350                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   351                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   352                                  ;
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   355                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   356                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   357                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   358                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   359                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   360                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  ;       Console Constants                                                       ECON...
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ECONCOLS                equ     80                                              ;columns per row
   365                                  ECONROWS                equ     24                                              ;console rows
   366                                  ECONOIAROW              equ     24                                              ;operator information area row
   367                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   368                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   369                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   370                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   371                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   376                                  EGDTCGA                 equ     020h                                            ;cga video selector
   377                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   378                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   379                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   380                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   381                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   382                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;       Keyboard Flags                                                          EKEYF...
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   387                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   388                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   389                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   390                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   391                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   392                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   393                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   394                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   395                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   396                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;       Kernel Constants                                                        EKRN...
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   401                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   402                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   403                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;       Message Identifiers                                                     EMSG...
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   412                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   413                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   414                                  ;=======================================================================================================================
   415                                  ;
   416                                  ;       Structures
   417                                  ;
   418                                  ;=======================================================================================================================
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;
   421                                  ;       MQUEUE
   422                                  ;
   423                                  ;       The MQUEUE structure maps memory used for a message queue.
   424                                  ;
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  struc                   MQUEUE
   427 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   428 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   429 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   430                                  endstruc
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ;
   433                                  ;       OSDATA
   434                                  ;
   435                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   436                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   437                                  ;
   438                                  ;-----------------------------------------------------------------------------------------------------------------------
   439                                  struc                   OSDATA
   440 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   441 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   442 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   443 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   444 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   445 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   446 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   447 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   448 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   449 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   450 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   451 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   452 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   453 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   454 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   455 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   456 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   457 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   458 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   459 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   460 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   461 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   462 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   463 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   464 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   465 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   466 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   467 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   468 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   469 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   470 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   471 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   472 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   473 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   474 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   475 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   476 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   477 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   478 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   479 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   480 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   481 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   482 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   483 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   484 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   485 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   486 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   487 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   488 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   489 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   490 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   491 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   492 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   493 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   494 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   495 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   496 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   497 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   498 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   499 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   500 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   501 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   502 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   503 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   504 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   505 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   506 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   507 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   508 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   509 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   510 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   511 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   512 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   513 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   514 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   515 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   516 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   517 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   518 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   519 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   520 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   521 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   522 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   523 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   524 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   525 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   526 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   527 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   528 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   529 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   530 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   531 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   532 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   533 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   534 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   535 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   536 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   537 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   538 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   539 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   540 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  ;
   543                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   544                                  ;
   545                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   546                                  ;
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ECONDATA                equ     ($)
   549 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   550 00000804 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   551 00000808 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   552 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   553 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   554 000008AC <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   555 000008AD <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   556 000008AE <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   557 000008AF <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   558 000008B0 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   559 000008B1 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   560 000008B2 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   561 000008B3 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   562 000008B4 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   563 000008B5 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   564 000008B6 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   565 000008B7 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   566                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   567                                  ;-----------------------------------------------------------------------------------------------------------------------
   568                                  ;
   569                                  ;       End of OS Variables
   570                                  ;
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  endstruc
   573                                  ;-----------------------------------------------------------------------------------------------------------------------
   574                                  ;
   575                                  ;       Macros
   576                                  ;
   577                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   578                                  ;
   579                                  ;-----------------------------------------------------------------------------------------------------------------------
   580                                  %macro                  mint    1
   581                                  _%1                     equ     ($-$$) / EX86DESCLEN
   582                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   583                                  %endmacro
   584                                  %macro                  mtrap   1
   585                                  _%1                     equ     ($-$$) / EX86DESCLEN
   586                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   587                                  %endmacro
   588                                  %macro                  menter  1
   589                                  ?%1                     equ     ($-$$)
   590                                  %endmacro
   591                                  %macro                  tsvce   1
   592                                  e%1                     equ     ($-tsvc)/4
   593                                                          dd      %1
   594                                  %endmacro
   595                                  %ifdef BUILDBOOT
   596                                  ;=======================================================================================================================
   597                                  ;
   598                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   599                                  ;
   600                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   601                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   602                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   603                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   604                                  ;
   605                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   606                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   607                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   608                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   609                                  ;       immediately followed by a disk parameter table.
   610                                  ;
   611                                  ;=======================================================================================================================
   612                                                          cpu     8086                                            ;assume minimal CPU
   613                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   614                                                          bits    16                                              ;16-bit code at power-up
   615                                  %ifdef BUILDPREP
   616                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   617                                  %else
   618 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   619                                  %endif
   620                                  ;-----------------------------------------------------------------------------------------------------------------------
   621                                  ;
   622                                  ;       Disk Parameter Table
   623                                  ;
   624                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   625                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   626                                  ;
   627                                  ;-----------------------------------------------------------------------------------------------------------------------
   628 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   629 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   630 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   631 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   632 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   633 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   634 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   635 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   636 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   637                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   638 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   639 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   640 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   641                                  ;
   642                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   643                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   644                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   645                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   646                                  ;       given several possible starting values for CS:IP.
   647                                  ;
   648                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   649 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   650                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   651 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   652 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   653 00000025 B104                                            mov     cl,4                                            ;shift count
   654 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   655 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   656 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   657                                  ;
   658                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   659                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   660                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   661                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   662                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   663                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   664                                  ;
   665 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   666 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   667 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   668 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   669 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   670                                  ;
   671                                  ;       Our boot addressability is now set up according to the following diagram.
   672                                  ;
   673                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   674                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   675                                  ;                               |  256 = 100h bytes                             |
   676                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   677                                  ;                               |  Boot Sector (vstart=0100h)                   |
   678                                  ;                               |  1 sector = 512 = 200h bytes                  |
   679                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   680                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   681                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   682                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   683                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   684                                  ;                               |  2 sectors = 1024 = 400h bytes
   685                                  ;                       009400  +-----------------------------------------------+ DS:1900
   686                                  ;
   687                                  ;       On entry, DL indicates the drive being booted from.
   688                                  ;
   689 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   690                                  ;
   691                                  ;       Compute directory i/o buffer address.
   692                                  ;
   693 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   694 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   695 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   696 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   697                                  ;
   698                                  ;       Compute segment where os.com will be loaded.
   699                                  ;
   700 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   701 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   702 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   703 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   704                                  ;
   705                                  ;       Set the video mode to 80 column, 25 row, text.
   706                                  ;
   707 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   708 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   709                                  ;
   710                                  ;       Write a message to the console so we know we have our addressability established.
   711                                  ;
   712 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   713 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   714                                  ;
   715                                  ;       Initialize the number of directory sectors to search.
   716                                  ;
   717 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   718 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   719                                  ;
   720                                  ;       Compute number of directory sectors and initialize overhead count.
   721                                  ;
   722 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   723 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   724 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   725 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   726                                  ;
   727                                  ;       Compute directory entries per sector.
   728                                  ;
   729 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   730 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   731 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   732                                  ;
   733                                  ;       Compute first logical directory sector and update overhead count.
   734                                  ;
   735 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   736 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   737 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   738 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   739 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   740 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   741                                  ;
   742                                  ;       Read directory sector.
   743                                  ;
   744 0000008E B001                    .30                     mov     al,1                                            ;sector count
   745 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   746 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   747 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   748                                  ;
   749                                  ;       Setup variables to search this directory sector.
   750                                  ;
   751 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   752 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   753 000000A1 7603                                            jna     .40                                             ;no, continue
   754 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   755 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   756 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   757 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   758                                  ;
   759                                  ;       Loop through directory sectors searching for kernel program.
   760                                  ;
   761 000000B1 56                      .50                     push    si                                              ;save kernel name address
   762 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   763 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   764 000000B6 FC                                              cld                                                     ;forward strings
   765 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   766 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   767 000000BA 5E                                              pop     si                                              ;restore kernel name address
   768 000000BB 7418                                            je      .60                                             ;exit loop if found
   769 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   770 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   771 000000C2 75ED                                            jnz     .50                                             ;next entry
   772                                  ;
   773                                  ;       Repeat search if we are not at the end of the directory.
   774                                  ;
   775 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   776 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   777 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   778 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   779 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   780                                  ;
   781                                  ;       If we find the kernel program in the directory, read the FAT.
   782                                  ;
   783 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   784 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   785 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   786 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   787 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   788 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   789                                  ;
   790                                  ;       Get the starting cluster of the kernel program and target address.
   791                                  ;
   792 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   793 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   794                                  ;
   795                                  ;       Read each program cluster into RAM.
   796                                  ;
   797 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   798 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   799 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   800 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   801 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   802 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   803 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   804 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   805 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   806                                  ;
   807                                  ;       Update buffer pointer for next cluster.
   808                                  ;
   809 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   810 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   811 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   812 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   813 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   814                                  ;
   815                                  ;       Compute next cluster number.
   816                                  ;
   817 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   818 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   819 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   820 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   821 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   822 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   823 00000120 83E701                                          and     di,1                                            ;get low bit
   824 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   825 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   826 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   827                                  ;
   828                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   829                                  ;
   830 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   831 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   832 00000130 B104                                            mov     cl,4                                            ;shift count
   833 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   834 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   835 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   836 0000013A 75B2                                            jne     .70                                             ;no, continue
   837                                  ;
   838                                  ;       Transfer control to the operating system program.
   839                                  ;
   840 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   841 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   842 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   843                                  ;
   844                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   845                                  ;
   846 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   847 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   848 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   849 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   850 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   851 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   852 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   853 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   854 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   855 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   856                                  ;
   857                                  ;       Try maxtries times to read sector.
   858                                  ;
   859 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   860 00000160 53                      .10                     push    bx                                              ;save buffer address
   861 00000161 51                                              push    cx                                              ;save retry count
   862 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   863 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   864 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   865 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   866 0000016F 59                                              pop     cx                                              ;restore retry count
   867 00000170 5B                                              pop     bx                                              ;restore buffer address
   868 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   869 00000173 E2EB                                            loop    .10                                             ;retry
   870                                  ;
   871                                  ;       Handle disk error: convert to ASCII and store in error string.
   872                                  ;
   873 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   874 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   875 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   876 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   877 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   878 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   879 00000183 7203                                            jb      .20                                             ;continue if numeral
   880 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   881 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   882 0000018A 7203                                            jb      .30                                             ;continue if numeral
   883 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   884 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   885 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   886 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   887                                  ;
   888                                  ;       Wait for a key press.
   889                                  ;
   890 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   891 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   892 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   893 0000019E FB                                              sti                                                     ;enable maskable interrupts
   894 0000019F F4                                              hlt                                                     ;wait for interrupt
   895 000001A0 EBF6                                            jmp     .10                                             ;repeat
   896                                  ;
   897                                  ;       Reset the system.
   898                                  ;
   899 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   900 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   901 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   902 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   903 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   904                                  ;
   905                                  ;       Display text message.
   906                                  ;
   907 000001AA FC                      BootPrint               cld                                                     ;forward strings
   908 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   909 000001AC 84C0                                            test    al,al                                           ;end of string?
   910 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   911 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   912 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   913 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   914 000001B6 C3                      BootReturn              ret                                                     ;return
   915                                  ;-----------------------------------------------------------------------------------------------------------------------
   916                                  ;
   917                                  ;       Constants
   918                                  ;
   919                                  ;-----------------------------------------------------------------------------------------------------------------------
   920 000001B7 90                                              align   2
   921 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   922 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   922 000001C3 4F4D               
   923 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   923 000001CE 530D0A00           
   924 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   924 000001DB 7220               
   925 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   926 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   926 000001E9 6700               
   927                                  ;-----------------------------------------------------------------------------------------------------------------------
   928                                  ;
   929                                  ;       Work Areas
   930                                  ;
   931                                  ;-----------------------------------------------------------------------------------------------------------------------
   932 000001EB 90                                              align   2
   933 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   934 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   935 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   936 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   937 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   938                                  wwReadCountCommand      equ     $                                               ;read count and command
   939 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   940 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   941                                  wwDriveHead             equ     $                                               ;drive, head (word)
   942 000001F8 00                      wbDrive                 db      0                                               ;drive
   943 000001F9 00                      wbHead                  db      0                                               ;head
   944                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   945 000001FA 00                                              db      0                                               ;sector
   946 000001FB 00                      wbTrack                 db      0                                               ;track
   947 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   948 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   949                                  %endif
   950                                  %ifdef BUILDPREP
   951                                  ;=======================================================================================================================
   952                                  ;
   953                                  ;       Diskette Preparation Code
   954                                  ;
   955                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   956                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   957                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   958                                  ;
   959                                  ;=======================================================================================================================
   960                                  ;
   961                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   962                                  ;
   963                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   964                                                          call    BootPrint                                       ;display message
   965                                  ;
   966                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   967                                  ;
   968                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   969                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   970                                                          jnz     .20                                             ;continue if key pressed
   971                                                          sti                                                     ;enable interrupts
   972                                                          hlt                                                     ;wait for interrupt
   973                                                          jmp     .10                                             ;repeat
   974                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   975                                                          je      .30                                             ;yes, branch
   976                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   977                                                          jne     .10                                             ;no, repeat
   978                                                          jmp     .120                                            ;yes, exit program
   979                                  ;
   980                                  ;       Display writing-sector message and patch the JMP instruction.
   981                                  ;
   982                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   983                                                          call    BootPrint                                       ;display message
   984                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   985                                                          mov     ax,01Bh                                         ;address past disk parameter table
   986                                                          mov     [bx],ax                                         ;update the JMP instruction
   987                                  ;
   988                                  ;       Try to read the boot sector.
   989                                  ;
   990                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   991                                  .40                     push    cx                                              ;save remaining tries
   992                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   993                                                          mov     dx,0                                            ;head zero, drive zero
   994                                                          mov     cx,1                                            ;track zero, sector one
   995                                                          mov     al,1                                            ;one sector
   996                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   997                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   998                                                          pop     cx                                              ;restore remaining retries
   999                                                          jnc     .50                                             ;skip ahead if successful
  1000                                                          loop    .40                                             ;try again
  1001                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1002                                                          jmp     .70                                             ;branch to error routine
  1003                                  ;
  1004                                  ;       Copy diskette parms from input buffer to output buffer.
  1005                                  ;
  1006                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1007                                                          add     si,11                                           ;skip over JMP and system ID
  1008                                                          mov     di,Boot                                         ;output buffer address
  1009                                                          add     di,11                                           ;skip over JMP and system ID
  1010                                                          mov     cx,19                                           ;length of diskette parameters
  1011                                                          cld                                                     ;forward string copies
  1012                                                          rep     movsb                                           ;copy diskette parameters
  1013                                  ;
  1014                                  ;       Try to write boot sector to diskette.
  1015                                  ;
  1016                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1017                                  .60                     push    cx                                              ;save remaining tries
  1018                                                          mov     bx,Boot                                         ;output buffer address
  1019                                                          mov     dx,0                                            ;head zero, drive zero
  1020                                                          mov     cx,1                                            ;track zero, sector one
  1021                                                          mov     al,1                                            ;one sector
  1022                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1023                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1024                                                          pop     cx                                              ;restore remaining retries
  1025                                                          jnc     .100                                            ;skip ahead if successful
  1026                                                          loop    .60                                             ;try again
  1027                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1028                                  ;
  1029                                  ;       Convert the error code to ASCII and display the error message.
  1030                                  ;
  1031                                  .70                     push    ax                                              ;save error code
  1032                                                          mov     al,ah                                           ;copy error code
  1033                                                          mov     ah,0                                            ;AX = error code
  1034                                                          mov     dl,10h                                          ;hexadecimal divisor
  1035                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1036                                                          or      ax,03030h                                       ;add ASCII zone digits
  1037                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1038                                                          jb      .80                                             ;yes, continue
  1039                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1040                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1041                                                          jb      .90                                             ;yes, continue
  1042                                                          add     al,7                                            ;no, make ASCII
  1043                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1044                                                          call    BootPrint                                       ;write error message
  1045                                                          pop     ax                                              ;restore error code
  1046                                  ;
  1047                                  ;       Display the completion message.
  1048                                  ;
  1049                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1050                                                          mov     al,ah                                           ;BIOS return code
  1051                                                          cmp     al,0                                            ;success?
  1052                                                          je      .110                                            ;yes, continue
  1053                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1054                                                          cmp     al,1                                            ;disk parameter error?
  1055                                                          je      .110                                            ;yes, continue
  1056                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1057                                                          cmp     al,2                                            ;address mark not found?
  1058                                                          je      .110                                            ;yes, continue
  1059                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1060                                                          cmp     al,3                                            ;protected disk?
  1061                                                          je      .110                                            ;yes, continue
  1062                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1063                                                          cmp     al,6                                            ;diskette removed?
  1064                                                          je      .110                                            ;yes, continue
  1065                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1066                                                          cmp     al,80H                                          ;drive timed out?
  1067                                                          je      .110                                            ;yes, continue
  1068                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1069                                  .110                    call    BootPrint                                       ;display result message
  1070                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1071                                                          int     021h                                            ;terminate DOS program
  1072                                                          ret                                                     ;return (should not execute)
  1073                                  ;-----------------------------------------------------------------------------------------------------------------------
  1074                                  ;
  1075                                  ;       Diskette Preparation Messages
  1076                                  ;
  1077                                  ;-----------------------------------------------------------------------------------------------------------------------
  1078                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1079                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1080                                                          db      13,10
  1081                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1082                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1083                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1084                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1085                                                          db      13,10,0
  1086                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1087                                                          db      13,10,0
  1088                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1089                                                          db      13,10,0
  1090                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1091                                                          db      13,10,0
  1092                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1093                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1094                                                          db      13,10,0
  1095                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1096                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1097                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1098                                                          db      13,10,"and retry."
  1099                                                          db      13,10,0
  1100                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1101                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1102                                                          db      13,10,"using another diskette."
  1103                                                          db      13,10,0
  1104                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1105                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1106                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1107                                                          db      13,10,0
  1108                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1109                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1110                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1111                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1112                                                          db      13,10,"is properly inserted in the diskette drive."
  1113                                                          db      13,10,0
  1114                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1115                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1116                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1117                                                          db      13,10,0
  1118                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1119                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1120                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1121                                                          db      13,10,0
  1122                                  wcPrepInBuf             equ     $
  1123                                  %endif
  1124                                  %ifdef BUILDDISK
  1125                                  ;=======================================================================================================================
  1126                                  ;
  1127                                  ;       File Allocation Tables
  1128                                  ;
  1129                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1130                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1131                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1132                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1133                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1134                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1135                                  ;       the last cluster in the chain.
  1136                                  ;
  1137                                  ;       Every three bytes encode two FAT entries as follows:
  1138                                  ;
  1139                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1140                                  ;
  1141                                  ;=======================================================================================================================
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  ;
  1144                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1145                                  ;
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                  section                 fat1                                                    ;first copy of FAT
  1148 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1149 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1150 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1151 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1152 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1153 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1154 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1155 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1156 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1157 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1158 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1159 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1160                                  ;-----------------------------------------------------------------------------------------------------------------------
  1161                                  ;
  1162                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1163                                  ;
  1164                                  ;-----------------------------------------------------------------------------------------------------------------------
  1165                                  section                 fat2                                                    ;second copy of FAT
  1166 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1167 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1168 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1169 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1170 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1171 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1172 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1173 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1174 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1175 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1176 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1177 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1178                                  ;-----------------------------------------------------------------------------------------------------------------------
  1179                                  ;
  1180                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1181                                  ;
  1182                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1183                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1184                                  ;       copy.
  1185                                  ;
  1186                                  ;-----------------------------------------------------------------------------------------------------------------------
  1187                                  section                 dir                                                     ;diskette directory
  1188 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1188 00000009 4F4D               
  1189 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1190 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1191 00000016 0000                                            dw      0h                                              ;time
  1192 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1193 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1194 0000001A 0200                                            dw      2                                               ;first cluster
  1195 0000001C 00540000                                        dd      05400h                                          ;file size
  1196 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1197                                  %endif
  1198                                  %ifdef BUILDCOM
  1199                                  ;=======================================================================================================================
  1200                                  ;
  1201                                  ;       OS.COM
  1202                                  ;
  1203                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1204                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1205                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1206                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1207                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1208                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1209                                  ;
  1210                                  ;       Our loader addressability is set up according to the following diagram.
  1211                                  ;
  1212                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1213                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1214                                  ;                               |  256 = 100h bytes                             |
  1215                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1216                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1217                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1218                                  ;                       007e00  +-----------------------------------------------+
  1219                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1220                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1221                                  ;                               |                                               |
  1222                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1223                                  ;                               |                                               |
  1224                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1225                                  ;                               |  Loader Code                                  |
  1226                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1227                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1228                                  ;
  1229                                  ;=======================================================================================================================
  1230                                  ;-----------------------------------------------------------------------------------------------------------------------
  1231                                  ;
  1232                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1233                                  ;
  1234                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1235                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1236                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1237                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1238                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1239                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1240                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1241                                  ;       registers.
  1242                                  ;
  1243                                  ;-----------------------------------------------------------------------------------------------------------------------
  1244                                                          cpu     8086                                            ;assume minimal CPU
  1245                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1246                                                          bits    16                                              ;this is 16-bit code
  1247 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1248 00000001 1F                                              pop     ds                                              ;...as our data segment
  1249 00000002 0E                                              push    cs                                              ;use the code segment
  1250 00000003 07                                              pop     es                                              ;...as our extra segment
  1251                                  ;
  1252                                  ;       Write a message to the console so we know we have our addressability established.
  1253                                  ;
  1254 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1255 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1256                                  ;
  1257                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1258                                  ;
  1259 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1260 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1261 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1262 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1263                                                          cpu     386                                             ;allow 80386 instructions
  1264 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1265 00000017 E89600                                          call    PutTTYString                                    ;display message
  1266                                  ;
  1267                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1268                                  ;
  1269 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1270 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1271 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1272 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1273 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1274 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1275 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1276 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1277 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1278 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1279                                  ;
  1280                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1281                                  ;
  1282 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1283 00000038 07                                              pop     es                                              ;... as target segment
  1284 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1285 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1286 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1287 00000041 FC                                              cld                                                     ;forward strings
  1288 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1289 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1290 00000047 E86600                                          call    PutTTYString                                    ;display message
  1291                                  ;
  1292                                  ;       Switch to protected mode.
  1293                                  ;
  1294 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1295 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1296 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1297 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1298 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1299 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1300 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1301 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1302 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1303 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1304 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1305                                  ;
  1306                                  ;       Enable hardware and maskable interrupts.
  1307                                  ;
  1308 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1309 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1310 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1311 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1312                                  ;
  1313                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1314                                  ;
  1315 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1316 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1317 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;       Routine:        LoaderExit
  1321                                  ;
  1322                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1323                                  ;
  1324                                  ;       In:             DS:SI   string address
  1325                                  ;
  1326                                  ;-----------------------------------------------------------------------------------------------------------------------
  1327 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1328                                  ;
  1329                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1330                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1331                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1332                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1333                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1334                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1335                                  ;
  1336 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1337 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1338 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1339 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1340 00000085 F4                                              hlt                                                     ;wait for interrupt
  1341 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1342                                  ;
  1343                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1344                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1345                                  ;       HLT until the system resets.
  1346                                  ;
  1347 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1348 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1349 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1350 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1351 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  ;
  1354                                  ;       Routine:        GetCPUType
  1355                                  ;
  1356                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1357                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1358                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1359                                  ;
  1360                                  ;       Out:            AX      0 = 808x, v20, etc.
  1361                                  ;                               1 = 80186
  1362                                  ;                               2 = 80286
  1363                                  ;                               3 = 80386
  1364                                  ;
  1365                                  ;-----------------------------------------------------------------------------------------------------------------------
  1366 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1367 00000092 B120                                            mov     cl,32                                           ;shift count
  1368 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1369 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1370 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1371                                                          cpu     186
  1372 0000009A 54                                              push    sp                                              ;save stack pointer
  1373 0000009B 59                                              pop     cx                                              ;...into cx
  1374 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1375 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1376                                                          cpu     286
  1377 000000A0 40                                              inc     ax                                              ;AX = 2
  1378 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1379 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1380 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1381 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1382 000000AE 40                                              inc     ax                                              ;AX = 3
  1383 000000AF C3                      .10                     ret                                                     ;return
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  ;
  1386                                  ;       Routine:        PutTTYString
  1387                                  ;
  1388                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1389                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1390                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1391                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1392                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1393                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1394                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1395                                  ;                       to LODSB is not needed.
  1396                                  ;
  1397                                  ;       In:             DS:SI   address of string
  1398                                  ;
  1399                                  ;       Out:            DF      0
  1400                                  ;                       ZF      1
  1401                                  ;                       AL      0
  1402                                  ;
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1405 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1406 000000B2 84C0                                            test    al,al                                           ;end of string?
  1407 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1408 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1409 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1410 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1411 000000BC C3                      .20                     ret                                                     ;return
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                  ;
  1414                                  ;       Loader Data
  1415                                  ;
  1416                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1417                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1418                                  ;
  1419                                  ;-----------------------------------------------------------------------------------------------------------------------
  1420 000000BD 90                                              align   2
  1421 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1422 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1423 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1424 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1425 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1425 000000D1 74696E672073797374-
  1425 000000DA 656D20726571756972-
  1425 000000E3 657320616E20693338-
  1425 000000EC 36206F72206C617465-
  1425 000000F5 722070726F63657373-
  1425 000000FE 6F722E0D0A         
  1426 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1426 0000010C 65737320616E79206B-
  1426 00000115 657920746F20726573-
  1426 0000011E 746172742074686520-
  1426 00000127 636F6D70757465722E-
  1426 00000130 0D0A00             
  1427 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1428 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1428 00000145 7265640D0A00       
  1429 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1429 00000154 616465640D0A00     
  1430 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1430 00000164 4F530D0A00         
  1431 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1432                                  ;=======================================================================================================================
  1433                                  ;
  1434                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1435                                  ;
  1436                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1437                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1438                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1439                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1440                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1441                                  ;
  1442                                  ;=======================================================================================================================
  1443                                  ;=======================================================================================================================
  1444                                  ;
  1445                                  ;       Kernel Tables
  1446                                  ;
  1447                                  ;=======================================================================================================================
  1448                                  ;-----------------------------------------------------------------------------------------------------------------------
  1449                                  ;
  1450                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1451                                  ;
  1452                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1453                                  ;       first descriptor must be all nulls.
  1454                                  ;
  1455                                  ;       6   5         4         3         2         1         0
  1456                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1457                                  ;       ----------------------------------------------------------------
  1458                                  ;       h......hffffmmmma......ab......................bn..............n
  1459                                  ;
  1460                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1461                                  ;               ffff                                                            flags
  1462                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1463                                  ;                       a......a                                                access
  1464                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1465                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1466                                  ;
  1467                                  ;       00000000                                                                all areas have base addresses below 2^24
  1468                                  ;               0...                                                            single-byte size granularity
  1469                                  ;               1...                                                            4-kilobyte size granularity
  1470                                  ;               .0..                                                            16-bit default for code segments
  1471                                  ;               .1..                                                            32-bit default for code segments
  1472                                  ;               ..0.                                                            intel-reserved; should be zero
  1473                                  ;               ...0                                                            available for operating system use
  1474                                  ;                   0000                                                        segment is less than 2^16 in size
  1475                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1476                                  ;                       1.......                                                segment is present in memory
  1477                                  ;                       .00.....                                                segment is of privilege level 0
  1478                                  ;                       ...0....                                                segment is of system or gate type
  1479                                  ;                       ...00010                                                local decriptor table (LDT)
  1480                                  ;                       ...01001                                                task state segment (TSS) available
  1481                                  ;                       ...01011                                                task state segment (TSS) busy
  1482                                  ;                       ...10...                                                data segment
  1483                                  ;                       ...10011                                                writable data (accessed)
  1484                                  ;                       ...11...                                                code segment
  1485                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1486                                  ;
  1487                                  ;-----------------------------------------------------------------------------------------------------------------------
  1488                                  section                 gdt                                                     ;global descriptor table
  1489 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1490 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1491 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1492 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1493 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1494 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1495 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1496 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1497 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1498 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1499 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1500 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1501 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1502 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1503 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                  ;
  1506                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1507                                  ;
  1508                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1509                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1510                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1511                                  ;
  1512                                  ;       6   5         4         3         2         1         0
  1513                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1514                                  ;       ----------------------------------------------------------------
  1515                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1516                                  ;
  1517                                  ;       h...h   high-order offset (bits 16-31)
  1518                                  ;       P       present (0=unused interrupt)
  1519                                  ;       zz      descriptor privilege level
  1520                                  ;       S       storage segment (must be zero for IDT)
  1521                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1522                                  ;       S...S   handling code selector in GDT
  1523                                  ;       l...l   lo-order offset (bits 0-15)
  1524                                  ;
  1525                                  ;-----------------------------------------------------------------------------------------------------------------------
  1526                                  section                 idt                                                     ;interrupt descriptor table
  1527                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 00000000 00004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mtrap   singlestep                                      ;01 single step
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 00000008 02004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529                                                          mtrap   nmi                                             ;02 non-maskable
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 00000010 04004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mtrap   break                                           ;03 break
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 00000018 06004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mtrap   into                                            ;04 into
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 00000020 08004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mtrap   bounds                                          ;05 bounds
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 00000028 0A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mtrap   badopcode                                       ;06 bad op code
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 00000030 0C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 00000038 0E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mtrap   doublefault                                     ;08 double-fault
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000040 10004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mtrap   operand                                         ;09 operand
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000048 12004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mtrap   badtss                                          ;0a bad TSS
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000050 14004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mtrap   notpresent                                      ;0b not-present
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000058 16004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mtrap   stacklimit                                      ;0c stack limit
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000060 18004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mtrap   protection                                      ;0d general protection fault
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000068 1A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mtrap   int14                                           ;0e (reserved)
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000070 1C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mtrap   int15                                           ;0f (reserved)
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000078 1E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mtrap   coproccalc                                      ;10 (reserved)
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000080 20004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mtrap   int17                                           ;11 (reserved)
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000088 22004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mtrap   int18                                           ;12 (reserved)
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 00000090 24004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mtrap   int19                                           ;13 (reserved)
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 00000098 26004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mtrap   int20                                           ;14 (reserved)
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 000000A0 28004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mtrap   int21                                           ;15 (reserved)
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 000000A8 2A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mtrap   int22                                           ;16 (reserved)
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 000000B0 2C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mtrap   int23                                           ;17 (reserved)
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 000000B8 2E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mtrap   int24                                           ;18 (reserved)
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 000000C0 30004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mtrap   int25                                           ;19 (reserved)
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 000000C8 32004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mtrap   int26                                           ;1a (reserved)
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 000000D0 34004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mtrap   int27                                           ;1b (reserved)
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 000000D8 36004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mtrap   int28                                           ;1c (reserved)
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 000000E0 38004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mtrap   int29                                           ;1d (reserved)
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 000000E8 3A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mtrap   int30                                           ;1e (reserved)
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 000000F0 3C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mtrap   int31                                           ;1f (reserved)
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 000000F8 3E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000100 41004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000108 92004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000110 EE034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mint    com2                                            ;23 IRQ3 com2
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000118 F1034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mint    com1                                            ;24 IRQ4 com1
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000120 F4034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000128 F7034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mint    diskette                                        ;26 IRQ6 diskette
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000130 FA034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000138 14044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000140 17044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000148 1A044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mint    irq10                                           ;2a IRQA (reserved)
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000150 1D044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mint    irq11                                           ;2b IRQB (reserved)
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000158 20044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 00000160 23044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 00000168 26044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 00000170 29044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mint    irq15                                           ;2f IRQF (reserved)
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 00000178 2C044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mtrap   svc                                             ;30 OS services
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 00000180 3E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1577                                  ;=======================================================================================================================
  1578                                  ;
  1579                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1580                                  ;
  1581                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1582                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1583                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1584                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1585                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1586                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1587                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1588                                  ;
  1589                                  ;=======================================================================================================================
  1590                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1591                                                          cpu     386                                             ;allow 80386 instructions
  1592                                                          bits    32                                              ;this is 32-bit code
  1593                                  ;=======================================================================================================================
  1594                                  ;
  1595                                  ;       CPU Interrupt Handlers
  1596                                  ;
  1597                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1598                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1599                                  ;
  1600                                  ;=======================================================================================================================
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;       INT0    Divide By Zero
  1604                                  ;
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                                          menter  dividebyzero                                    ;divide by zero
  1606                              <1> ?%1 equ ($-$$)
  1607 00000000 EB3E                                            jmp     ReportInterrupt                                 ;report interrupt
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  ;
  1610                                  ;       INT1    Single Step
  1611                                  ;
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                                          menter  singlestep                                      ;single step
  1613                              <1> ?%1 equ ($-$$)
  1614 00000002 EB3C                                            jmp     ReportInterrupt                                 ;report interrupt
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                  ;
  1617                                  ;       INT2    Non-Maskable Interrupt
  1618                                  ;
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                                          menter  nmi                                             ;non-maskable
  1620                              <1> ?%1 equ ($-$$)
  1621 00000004 EB3A                                            jmp     ReportInterrupt                                 ;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;       INT3    Break
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                                          menter  break                                           ;break
  1627                              <1> ?%1 equ ($-$$)
  1628 00000006 EB38                                            jmp     ReportInterrupt                                 ;report interrupt
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  ;
  1631                                  ;       INT4    Into
  1632                                  ;
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                                          menter  into                                            ;into
  1634                              <1> ?%1 equ ($-$$)
  1635 00000008 EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT5    Bounds
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  bounds                                          ;bounds
  1641                              <1> ?%1 equ ($-$$)
  1642 0000000A EB34                                            jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT6    Bad Operation Code
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  badopcode                                       ;bad opcode interrupt
  1648                              <1> ?%1 equ ($-$$)
  1649 0000000C EB32                                            jmp     ReportInterrupt                                 ;report interrupt
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  ;
  1652                                  ;       INT7    No Coprocessor
  1653                                  ;
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1655                              <1> ?%1 equ ($-$$)
  1656 0000000E EB30                                            jmp     ReportInterrupt                                 ;report interrupt
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;       INT8    Double Fault
  1660                                  ;
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                                          menter  doublefault                                     ;doublefault interrupt
  1662                              <1> ?%1 equ ($-$$)
  1663 00000010 EB2E                                            jmp     ReportInterrupt                                 ;report interrupt
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  ;
  1666                                  ;       INT9    Operand
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                                          menter  operand                                         ;operand interrupt
  1669                              <1> ?%1 equ ($-$$)
  1670 00000012 EB2C                                            jmp     ReportInterrupt                                 ;report interrupt
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  ;
  1673                                  ;       INT10   Bad Task State Segment
  1674                                  ;
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                                          menter  badtss                                          ;bad TSS interrupt
  1676                              <1> ?%1 equ ($-$$)
  1677 00000014 EB2A                                            jmp     ReportInterrupt                                 ;report interrupt
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  ;
  1680                                  ;       INT11   Not Present
  1681                                  ;
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                                          menter  notpresent                                      ;not present interrupt
  1683                              <1> ?%1 equ ($-$$)
  1684 00000016 EB28                                            jmp     ReportInterrupt                                 ;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       INT12   Stack Limit
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                                          menter  stacklimit                                      ;stack limit interrupt
  1690                              <1> ?%1 equ ($-$$)
  1691 00000018 EB26                                            jmp     ReportInterrupt                                 ;report interrupt
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                  ;
  1694                                  ;       INT13   General Protection Fault
  1695                                  ;
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                                          menter  protection                                      ;protection fault interrupt
  1697                              <1> ?%1 equ ($-$$)
  1698 0000001A EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT14   Reserved
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  int14                                           ;(reserved)
  1704                              <1> ?%1 equ ($-$$)
  1705 0000001C EB22                                            jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT15   Reserved
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  int15                                           ;(reserved)
  1711                              <1> ?%1 equ ($-$$)
  1712 0000001E EB20                                            jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT16   Coprocessor Calculation
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  coproccalc                                      ;coprocessor calculation
  1718                              <1> ?%1 equ ($-$$)
  1719 00000020 EB1E                                            jmp     ReportInterrupt                                 ;report interrupt
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                  ;
  1722                                  ;       INT17   Reserved
  1723                                  ;
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                                          menter  int17                                           ;(reserved)
  1725                              <1> ?%1 equ ($-$$)
  1726 00000022 EB1C                                            jmp     ReportInterrupt                                 ;report interrupt
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  ;
  1729                                  ;       INT18   Reserved
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                                          menter  int18                                           ;(reserved)
  1732                              <1> ?%1 equ ($-$$)
  1733 00000024 EB1A                                            jmp     ReportInterrupt                                 ;report interrupt
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  ;
  1736                                  ;       INT19   Reserved
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                                          menter  int19                                           ;(reserved)
  1739                              <1> ?%1 equ ($-$$)
  1740 00000026 EB18                                            jmp     ReportInterrupt                                 ;report interrupt
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;       INT20   Reserved
  1744                                  ;
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                                          menter  int20                                           ;(reserved)
  1746                              <1> ?%1 equ ($-$$)
  1747 00000028 EB16                                            jmp     ReportInterrupt                                 ;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       INT21   Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                                          menter  int21                                           ;(reserved)
  1753                              <1> ?%1 equ ($-$$)
  1754 0000002A EB14                                            jmp     ReportInterrupt                                 ;report interrupt
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                  ;
  1757                                  ;       INT22   Reserved
  1758                                  ;
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                                          menter  int22                                           ;(reserved)
  1760                              <1> ?%1 equ ($-$$)
  1761 0000002C EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT23   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int23                                           ;(reserved)
  1767                              <1> ?%1 equ ($-$$)
  1768 0000002E EB10                                            jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT24   Reserved
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  int24                                           ;(reserved)
  1774                              <1> ?%1 equ ($-$$)
  1775 00000030 EB0E                                            jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT25   Reserved
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  int25                                           ;(reserved)
  1781                              <1> ?%1 equ ($-$$)
  1782 00000032 EB0C                                            jmp     ReportInterrupt                                 ;report interrupt
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT26   Reserved
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  int26                                           ;(reserved)
  1788                              <1> ?%1 equ ($-$$)
  1789 00000034 EB0A                                            jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT27   Reserved
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  int27                                           ;(reserved)
  1795                              <1> ?%1 equ ($-$$)
  1796 00000036 EB08                                            jmp     ReportInterrupt                                 ;report interrupt
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                  ;
  1799                                  ;       INT28   Reserved
  1800                                  ;
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                                          menter  int28                                           ;(reserved)
  1802                              <1> ?%1 equ ($-$$)
  1803 00000038 EB06                                            jmp     ReportInterrupt                                 ;report interrupt
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                  ;
  1806                                  ;       INT29   Reserved
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                                          menter  int29                                           ;(reserved)
  1809                              <1> ?%1 equ ($-$$)
  1810 0000003A EB04                                            jmp     ReportInterrupt                                 ;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;       INT30   Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                                          menter  int30                                           ;(reserved)
  1816                              <1> ?%1 equ ($-$$)
  1817 0000003C EB02                                            jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT31   Reserved
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  int31                                           ;(reserved)
  1823                              <1> ?%1 equ ($-$$)
  1824 0000003E EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       Routine:        ReportInterrupt
  1828                                  ;
  1829                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1830                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833 00000040 CF                      ReportInterrupt         iretd                                                   ;return
  1834                                  ;=======================================================================================================================
  1835                                  ;
  1836                                  ;       Hardware Device Interupts
  1837                                  ;
  1838                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1839                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1840                                  ;       (BX=2028h).
  1841                                  ;
  1842                                  ;=======================================================================================================================
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       IRQ0    Clock Tick Interrupt
  1846                                  ;
  1847                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1848                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1849                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1850                                  ;
  1851                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1852                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1853                                  ;
  1854                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1855                                  ;       zero, the floppy disk motors are turned off.
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  clocktick                                       ;clock tick interrupt
  1858                              <1> ?%1 equ ($-$$)
  1859 00000041 50                                              push    eax                                             ;save non-volatile regs
  1860 00000042 52                                              push    edx                                             ;
  1861 00000043 1E                                              push    ds                                              ;
  1862                                  ;
  1863                                  ;       End the interrupt.
  1864                                  ;
  1865 00000044 E8C6060000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1866                                  ;
  1867                                  ;       Update the clock tick count and the elapsed days as needed.
  1868                                  ;
  1869 00000049 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1870 0000004B 1F                                              pop     ds                                              ;... into data segment register
  1871 0000004C A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1872 00000051 40                                              inc     eax                                             ;increment clock ticks
  1873 00000052 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1874 00000057 7208                                            jb      irq0.10                                         ;no, skip ahead
  1875 00000059 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1876 0000005F 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1877 00000061 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1878                                  ;
  1879                                  ;       Decrement floppy disk motor timeout.
  1880                                  ;
  1881 00000066 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1882 0000006D 741E                                            je      irq0.20                                         ;yes, skip ahead
  1883 0000006F FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1884 00000075 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1885                                  ;
  1886                                  ;       Turn off the floppy disk motor if appropriate.
  1887                                  ;
  1888 00000077 FB                                              sti                                                     ;enable maskable interrupts
  1889 00000078 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1890 0000007A B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1891 0000007C EC                                              in      al,dx                                           ;FDC main status byte
  1892 0000007D A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1893 0000007F 75F7                                            jnz     irq0.15                                         ;wait while busy
  1894 00000081 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1895 00000083 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1896 00000088 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1897 0000008A B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1898 0000008C EE                                              out     dx,al                                           ;turn motor off
  1899                                  ;
  1900                                  ;       Enable maskable interrupts.
  1901                                  ;
  1902 0000008D FB                      irq0.20                 sti                                                     ;enable maskable interrupts
  1903                                  ;
  1904                                  ;       Restore and return.
  1905                                  ;
  1906 0000008E 1F                                              pop     ds                                              ;restore modified regs
  1907 0000008F 5A                                              pop     edx                                             ;
  1908 00000090 58                                              pop     eax                                             ;
  1909 00000091 CF                                              iretd                                                   ;return
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  ;
  1912                                  ;       IRQ1    Keyboard Interrupt
  1913                                  ;
  1914                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1915                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1916                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1917                                  ;       ALL modified registers upon return.
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                                          menter  keyboard                                        ;keyboard interrrupt
  1920                              <1> ?%1 equ ($-$$)
  1921 00000092 50                                              push    eax                                             ;save non-volatile regs
  1922 00000093 53                                              push    ebx                                             ;
  1923 00000094 51                                              push    ecx                                             ;
  1924 00000095 56                                              push    esi                                             ;
  1925 00000096 1E                                              push    ds                                              ;
  1926                                  ;
  1927                                  ;       End the interrupt.
  1928                                  ;
  1929 00000097 E873060000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1930                                  ;
  1931                                  ;       Handle keyboard scan-codes.
  1932                                  ;
  1933 0000009C 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1934 0000009E 1F                                              pop     ds                                              ;... into data segment register
  1935 0000009F 30C0                                            xor     al,al                                           ;zero
  1936 000000A1 A2B1080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  1937 000000A6 A2B2080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  1938 000000AB A2B3080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  1939 000000B0 A2B4080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  1940 000000B5 A2B5080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  1941 000000BA A2B6080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  1942 000000BF B020                                            mov     al,' '                                          ;space
  1943 000000C1 A2B7080000                                      mov     [wbConsoleChar],al                              ;set character to space
  1944 000000C6 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1945 000000C8 F6D0                                            not     al                                              ;controller timeout mask
  1946 000000CA 2005B0080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1947 000000D0 8A1DAE080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  1948 000000D6 8A3DAF080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  1949 000000DC E876060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1950 000000E1 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  1951 000000E7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  1952 000000E9 A2B1080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  1953 000000EE 88C4                                            mov     ah,al                                           ;copy scan code 0
  1954 000000F0 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1955 000000F2 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1956 000000F5 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  1957 000000FB 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1958 000000FE 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  1959 00000104 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1960 00000106 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1961 00000109 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  1962 0000010F 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1963 00000112 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  1964 00000118 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  1965 0000011A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1966 0000011D 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  1967 00000123 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1968 00000126 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  1969 0000012C B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  1970 0000012E 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1971 00000131 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  1972 00000137 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1973 0000013A 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  1974 00000140 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  1975 00000142 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  1976 00000145 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1977 0000014B B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  1978 0000014D 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  1979 00000150 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1980 00000156 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  1981 00000158 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  1982 0000015B 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1983 00000161 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  1984 00000164 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  1985 0000016A E8E8050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1986 0000016F 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  1987 00000175 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  1988 00000177 A2B2080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  1989 0000017C 88C4                                            mov     ah,al                                           ;copy scan code 1
  1990 0000017E B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  1991 00000180 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1992 00000183 7456                                            je      irq1.30                                         ;yes, set flag
  1993 00000185 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1994 00000188 7455                                            je      irq1.40                                         ;yes, reset flag
  1995 0000018A B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  1996 0000018C 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1997 0000018F 744A                                            je      irq1.30                                         ;yes, set flag
  1998 00000191 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1999 00000194 7449                                            je      irq1.40                                         ;yes, reset flag
  2000 00000196 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2001 00000199 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2002 0000019F 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2003 000001A2 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2004 000001A8 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2005 000001AB 7405                                            je      irq1.10                                         ;yes, continue
  2006 000001AD 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2007 000001B0 7524                                            jne     irq1.20                                         ;no, skip ahead
  2008 000001B2 E8A0050000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2009 000001B7 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2010 000001BD E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2011 000001BF A2B3080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2012 000001C4 E88E050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2013 000001C9 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2014 000001CF E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2015 000001D1 A2B4080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2016 000001D6 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2017 000001DB 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2018 000001DD EB0D                                            jmp     irq1.60                                         ;skip ahead
  2019 000001DF F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2020 000001E1 20C3                                            and     bl,al                                           ;reset shift flag
  2021 000001E3 EB07                                            jmp     irq1.60                                         ;skip ahead
  2022 000001E5 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2023 000001E7 E83C050000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2024 000001EC 881DAE080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2025 000001F2 883DAF080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2026 000001F8 E8D8030000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2027 000001FD E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2028 00000202 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2029 00000205 7563                                            jne     irq1.80                                         ;no continue
  2030 00000207 E84B050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2031 0000020C 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2032 00000212 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2033 00000214 A2B2080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2034 00000219 88C4                                            mov     ah,al                                           ;copy scan code 1
  2035 0000021B 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2036 0000021E 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2037 00000224 E82E050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2038 00000229 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2039 0000022F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2040 00000231 A2B3080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2041 00000236 E81C050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2042 0000023B 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2043 00000241 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2044 00000243 A2B4080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2045 00000248 E80A050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2046 0000024D 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2047 00000253 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2048 00000255 A2B5080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2049 0000025A E8F8040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2050 0000025F 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2051 00000261 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2052 00000263 A2B6080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2053 00000268 EB78                                            jmp     irq1.150                                        ;continue
  2054 0000026A 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2055 0000026C F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2056 0000026F 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2057 00000271 BE[EE020000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2058 00000276 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2059 00000279 7405                                            jz      irq1.90                                         ;no, skip ahead
  2060 0000027B BE[6E030000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2061 00000280 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2062 00000283 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2063 00000287 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2064 0000028A 7411                                            jz      irq1.100                                        ;no skip ahead
  2065 0000028C 88C1                                            mov     cl,al                                           ;copy ASCII code
  2066 0000028E 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2067 00000291 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2068 00000294 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2069 00000296 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2070 00000299 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2071 0000029B 3420                                            xor     al,EASCIICASE                                   ;switch case
  2072 0000029D A2B7080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2073 000002A2 BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2074 000002A7 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2075 000002AA 7405                                            jz      irq1.120                                        ;no, skip ahead
  2076 000002AC BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2077 000002B1 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2078 000002B6 09C2                                            or      edx,eax                                         ;msg id and codes
  2079 000002B8 31C9                                            xor     ecx,ecx                                         ;null param
  2080 000002BA 50                                              push    eax                                             ;save codes
  2081 000002BB E8E7030000                                      call    PutMessage                                      ;put message to console
  2082 000002C0 58                                              pop     eax                                             ;restore codes
  2083 000002C1 84C0                                            test    al,al                                           ;ASCII translation?
  2084 000002C3 7413                                            jz      irq1.130                                        ;no, skip ahead
  2085 000002C5 BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2086 000002CA 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2087 000002CF 09C2                                            or      edx,eax                                         ;msg id and codes
  2088 000002D1 31C9                                            xor     ecx,ecx                                         ;null param
  2089 000002D3 E8CF030000                                      call    PutMessage                                      ;put message to console
  2090 000002D8 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2091 000002DA B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2092 000002DC 0805B0080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2093 000002E2 E896020000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2094                                  ;
  2095                                  ;       Enable maskable interrupts.
  2096                                  ;
  2097 000002E7 FB                                              sti                                                     ;enable maskable interrupts
  2098                                  ;
  2099                                  ;       Restore and return.
  2100                                  ;
  2101 000002E8 1F                                              pop     ds                                              ;restore non-volatile regs
  2102 000002E9 5E                                              pop     esi                                             ;
  2103 000002EA 59                                              pop     ecx                                             ;
  2104 000002EB 5B                                              pop     ebx                                             ;
  2105 000002EC 58                                              pop     eax                                             ;
  2106 000002ED CF                                              iretd                                                   ;return
  2107                                  ;-----------------------------------------------------------------------------------------------------------------------
  2108                                  ;       Scan-Code to ASCII Translation Tables
  2109                                  ;-----------------------------------------------------------------------------------------------------------------------
  2110 000002EE 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2111 000002F6 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2112 000002FE 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2113 00000306 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2114 0000030E 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2115 00000316 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2116 0000031E 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2117 00000326 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2118 0000032E 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2119 00000336 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2120 0000033E 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2121 00000346 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2122 0000034E 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2123 00000356 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2124 0000035E 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2125 00000366 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2126 0000036E 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2127 00000376 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2128 0000037E 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2129 00000386 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2130 0000038E 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2131 00000396 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2132 0000039E 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2133 000003A6 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2134 000003AE 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2135 000003B6 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2136 000003BE 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2137 000003C6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2138 000003CE 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2139 000003D6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2140 000003DE 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2141 000003E6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2142                                  ;-----------------------------------------------------------------------------------------------------------------------
  2143                                  ;
  2144                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2145                                  ;
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                                          menter  iochannel                                       ;secondary 8259A cascade
  2147                              <1> ?%1 equ ($-$$)
  2148 000003EE 50                                              push    eax                                             ;save modified regs
  2149 000003EF EB45                                            jmp     hwint                                           ;end interrupt and return
  2150                                  ;-----------------------------------------------------------------------------------------------------------------------
  2151                                  ;
  2152                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2153                                  ;
  2154                                  ;-----------------------------------------------------------------------------------------------------------------------
  2155                                                          menter  com2                                            ;serial port 2 interrupt
  2155                              <1> ?%1 equ ($-$$)
  2156 000003F1 50                                              push    eax                                             ;save modified regs
  2157 000003F2 EB42                                            jmp     hwint                                           ;end interrupt and return
  2158                                  ;-----------------------------------------------------------------------------------------------------------------------
  2159                                  ;
  2160                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2161                                  ;
  2162                                  ;-----------------------------------------------------------------------------------------------------------------------
  2163                                                          menter  com1                                            ;serial port 1 interrupt
  2163                              <1> ?%1 equ ($-$$)
  2164 000003F4 50                                              push    eax                                             ;save modified regs
  2165 000003F5 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2166                                  ;-----------------------------------------------------------------------------------------------------------------------
  2167                                  ;
  2168                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2169                                  ;
  2170                                  ;-----------------------------------------------------------------------------------------------------------------------
  2171                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2171                              <1> ?%1 equ ($-$$)
  2172 000003F7 50                                              push    eax                                             ;save modified regs
  2173 000003F8 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                  ;
  2176                                  ;       IRQ6    Diskette Hardware Interrupt
  2177                                  ;
  2178                                  ;-----------------------------------------------------------------------------------------------------------------------
  2179                                                          menter  diskette                                        ;floppy disk interrupt
  2179                              <1> ?%1 equ ($-$$)
  2180 000003FA 50                                              push    eax                                             ;save non-volatile regs
  2181 000003FB 1E                                              push    ds                                              ;
  2182 000003FC E80E030000                                      call    PutPrimaryEndOfInt                              ;end the interrupt
  2183 00000401 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2184 00000403 1F                                              pop     ds                                              ;... into DS register
  2185 00000404 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2186 00000409 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2187 0000040B A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2188 00000410 FB                                              sti                                                     ;enable maskable interrupts
  2189 00000411 1F                                              pop     ds                                              ;restore non-volatile regs
  2190 00000412 58                                              pop     eax                                             ;
  2191 00000413 CF                                              iretd                                                   ;return from interrupt
  2192                                  ;-----------------------------------------------------------------------------------------------------------------------
  2193                                  ;
  2194                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2195                                  ;
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2197                              <1> ?%1 equ ($-$$)
  2198 00000414 50                                              push    eax                                             ;save modified regs
  2199 00000415 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                  ;
  2202                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2203                                  ;
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205                                                          menter  rtclock                                         ;real-time clock interrupt
  2205                              <1> ?%1 equ ($-$$)
  2206 00000417 50                                              push    eax                                             ;save modified regs
  2207 00000418 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209                                  ;
  2210                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2211                                  ;
  2212                                  ;-----------------------------------------------------------------------------------------------------------------------
  2213                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2213                              <1> ?%1 equ ($-$$)
  2214 0000041A 50                                              push    eax                                             ;save modified regs
  2215 0000041B EB12                                            jmp     hwwint                                          ;end interrupt and return
  2216                                  ;-----------------------------------------------------------------------------------------------------------------------
  2217                                  ;
  2218                                  ;       IRQ10   Reserved Hardware Interrupt
  2219                                  ;
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221                                                          menter  irq10                                           ;reserved
  2221                              <1> ?%1 equ ($-$$)
  2222 0000041D 50                                              push    eax                                             ;save modified regs
  2223 0000041E EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2224                                  ;-----------------------------------------------------------------------------------------------------------------------
  2225                                  ;
  2226                                  ;       IRQ11   Reserved Hardware Interrupt
  2227                                  ;
  2228                                  ;-----------------------------------------------------------------------------------------------------------------------
  2229                                                          menter  irq11                                           ;reserved
  2229                              <1> ?%1 equ ($-$$)
  2230 00000420 50                                              push    eax                                             ;save modified regs
  2231 00000421 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2232                                  ;-----------------------------------------------------------------------------------------------------------------------
  2233                                  ;
  2234                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2235                                  ;
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2237                              <1> ?%1 equ ($-$$)
  2238 00000423 50                                              push    eax                                             ;save modified regs
  2239 00000424 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2240                                  ;-----------------------------------------------------------------------------------------------------------------------
  2241                                  ;
  2242                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2243                                  ;
  2244                                  ;-----------------------------------------------------------------------------------------------------------------------
  2245                                                          menter  coprocessor                                     ;coprocessor interrupt
  2245                              <1> ?%1 equ ($-$$)
  2246 00000426 50                                              push    eax                                             ;save modified regs
  2247 00000427 EB06                                            jmp     hwwint                                          ;end interrupt and return
  2248                                  ;-----------------------------------------------------------------------------------------------------------------------
  2249                                  ;
  2250                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2251                                  ;
  2252                                  ;-----------------------------------------------------------------------------------------------------------------------
  2253                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2253                              <1> ?%1 equ ($-$$)
  2254 00000429 50                                              push    eax                                             ;save modified regs
  2255 0000042A EB03                                            jmp     hwwint                                          ;end interrupt and return
  2256                                  ;-----------------------------------------------------------------------------------------------------------------------
  2257                                  ;
  2258                                  ;       IRQ15   Reserved Hardware Interrupt
  2259                                  ;
  2260                                  ;-----------------------------------------------------------------------------------------------------------------------
  2261                                                          menter  irq15                                           ;reserved
  2261                              <1> ?%1 equ ($-$$)
  2262 0000042C 50                                              push    eax                                             ;save modified regs
  2263 0000042D EB00                                            jmp     hwwint                                          ;end interrupt and return
  2264                                  ;-----------------------------------------------------------------------------------------------------------------------
  2265                                  ;
  2266                                  ;       Exit from hardware interrupt
  2267                                  ;
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269 0000042F E8E0020000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2270 00000434 EB05                                            jmp     hwint90                                         ;skip ahead
  2271 00000436 E8D4020000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2272 0000043B FB                      hwint90                 sti                                                     ;enable maskable interrupts
  2273 0000043C 58                                              pop     eax                                             ;restore modified regs
  2274 0000043D CF                                              iretd                                                   ;return from interrupt
  2275                                  ;-----------------------------------------------------------------------------------------------------------------------
  2276                                  ;
  2277                                  ;       INT 30h Operating System Software Service Interrupt
  2278                                  ;
  2279                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2280                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2281                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2282                                  ;       the entry address of the specific function from a table.
  2283                                  ;
  2284                                  ;-----------------------------------------------------------------------------------------------------------------------
  2285                                                          menter  svc
  2285                              <1> ?%1 equ ($-$$)
  2286 0000043E 3C05                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2287 00000440 730D                                            jae     svc90                                           ;yes, skip ahead
  2288 00000442 0FB6C0                                          movzx   eax,al                                          ;function
  2289 00000445 C1E002                                          shl     eax,2                                           ;offset into table
  2290 00000448 2EFF90[50040000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2291 0000044F CF                      svc90                   iretd                                                   ;return from interrupt
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                  ;
  2294                                  ;       Service Request Table
  2295                                  ;
  2296                                  ;
  2297                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2298                                  ;
  2299                                  ;-----------------------------------------------------------------------------------------------------------------------
  2300                                  tsvc                    tsvce   CompareMemory                                   ;compare memory
  2300                              <1> tsvc :
  2300                              <1> e%1 equ ($-tsvc)/4
  2300 00000450 [64040000]          <1>  dd %1
  2301                                                          tsvce   GetConsoleString                                ;get string input
  2301                              <1> e%1 equ ($-tsvc)/4
  2301 00000454 [BD040000]          <1>  dd %1
  2302                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2302                              <1> e%1 equ ($-tsvc)/4
  2302 00000458 [E5060000]          <1>  dd %1
  2303                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2303                              <1> e%1 equ ($-tsvc)/4
  2303 0000045C [19070000]          <1>  dd %1
  2304                                                          tsvce   UpperCaseString                                 ;upper-case string
  2304                              <1> e%1 equ ($-tsvc)/4
  2304 00000460 [81040000]          <1>  dd %1
  2305                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307                                  ;
  2308                                  ;       Service Request Macros
  2309                                  ;
  2310                                  ;       These macros provide positional parameterization of service request calls.
  2311                                  ;
  2312                                  ;-----------------------------------------------------------------------------------------------------------------------
  2313                                  %macro                  compareMemory 0
  2314                                                          mov     al,eCompareMemory                               ;function code
  2315                                                          int     _svc                                            ;invoke OS service
  2316                                  %endmacro
  2317                                  %macro                  getConsoleString 0
  2318                                                          mov     al,eGetConsoleString                            ;function code
  2319                                                          int     _svc                                            ;invoke OS service
  2320                                  %endmacro
  2321                                  %macro                  placeCursor 0
  2322                                                          mov     al,ePlaceCursor                                 ;function code
  2323                                                          int     _svc                                            ;invoke OS service
  2324                                  %endmacro
  2325                                  %macro                  resetSystem 0
  2326                                                          mov     al,eResetSystem                                 ;function code
  2327                                                          int     _svc                                            ;invoke OS service
  2328                                  %endmacro
  2329                                  %macro                  upperCaseString 0
  2330                                                          mov     al,eUpperCaseString                             ;function code
  2331                                                          int     _svc                                            ;invoke OS service
  2332                                  %endmacro
  2333                                  ;=======================================================================================================================
  2334                                  ;
  2335                                  ;       Kernel Function Library
  2336                                  ;
  2337                                  ;=======================================================================================================================
  2338                                  ;=======================================================================================================================
  2339                                  ;
  2340                                  ;       String Helper Routines
  2341                                  ;
  2342                                  ;       CompareMemory
  2343                                  ;       UpperCaseString
  2344                                  ;
  2345                                  ;=======================================================================================================================
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       Routine:        CompareMemory
  2349                                  ;
  2350                                  ;       Description:    This routine compares two byte arrays.
  2351                                  ;
  2352                                  ;       In:             DS:EDX  first source address
  2353                                  ;                       DS:EBX  second source address
  2354                                  ;                       ECX     comparison length
  2355                                  ;
  2356                                  ;       Out:            EDX     first source address
  2357                                  ;                       EBX     second source address
  2358                                  ;                       ECX     0       array 1 = array 2
  2359                                  ;                               <0      array 1 < array 2
  2360                                  ;                               >0      array 1 > array 2
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363 00000464 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  2364 00000465 57                                              push    edi                                             ;
  2365 00000466 06                                              push    es                                              ;
  2366 00000467 1E                                              push    ds                                              ;copy DS
  2367 00000468 07                                              pop     es                                              ;... to ES
  2368 00000469 89D6                                            mov     esi,edx                                         ;first source address
  2369 0000046B 89DF                                            mov     edi,ebx                                         ;second source address
  2370 0000046D FC                                              cld                                                     ;forward strings
  2371 0000046E F3A6                                            rep     cmpsb                                           ;compare bytes
  2372 00000470 B000                                            mov     al,0                                            ;default result
  2373 00000472 7406                                            jz      .10                                             ;branch if arrays equal
  2374 00000474 B001                                            mov     al,1                                            ;positive result
  2375 00000476 7302                                            jnc     .10                                             ;branch if target > source
  2376 00000478 B0FF                                            mov     al,-1                                           ;negative result
  2377 0000047A 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  2378 0000047D 07                                              pop     es                                              ;restore non-volatile regs
  2379 0000047E 5F                                              pop     edi                                             ;
  2380 0000047F 5E                                              pop     esi                                             ;
  2381 00000480 C3                                              ret                                                     ;return
  2382                                  ;-----------------------------------------------------------------------------------------------------------------------
  2383                                  ;
  2384                                  ;       Routine:        UpperCaseString
  2385                                  ;
  2386                                  ;       Description:    This routine places all characters in the given string to upper case.
  2387                                  ;
  2388                                  ;       In:             DS:EDX  string address
  2389                                  ;
  2390                                  ;       Out:            EDX     string address
  2391                                  ;
  2392                                  ;-----------------------------------------------------------------------------------------------------------------------
  2393 00000481 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  2394 00000482 89D6                                            mov     esi,edx                                         ;string address
  2395 00000484 FC                                              cld                                                     ;forward strings
  2396 00000485 AC                      .10                     lodsb                                                   ;string character
  2397 00000486 84C0                                            test    al,al                                           ;null?
  2398 00000488 740F                                            jz      .20                                             ;yes, skip ahead
  2399 0000048A 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2400 0000048C 72F7                                            jb      .10                                             ;no, continue
  2401 0000048E 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2402 00000490 77F3                                            ja      .10                                             ;no, continue
  2403 00000492 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  2404 00000494 8846FF                                          mov     [esi-1],al                                      ;upper character
  2405 00000497 EBEC                                            jmp     .10                                             ;continue
  2406 00000499 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  2407 0000049A C3                                              ret                                                     ;return
  2408                                  ;=======================================================================================================================
  2409                                  ;
  2410                                  ;       Console Helper Routines
  2411                                  ;
  2412                                  ;       GetConsoleChar
  2413                                  ;       GetConsoleString
  2414                                  ;       NextConsoleColumn
  2415                                  ;       PreviousConsoleColumn
  2416                                  ;       PutConsoleChar
  2417                                  ;       PutConsoleHexByte
  2418                                  ;       PutConsoleOIAChar
  2419                                  ;       PutConsoleOIAShift
  2420                                  ;       Yield
  2421                                  ;
  2422                                  ;=======================================================================================================================
  2423                                  ;-----------------------------------------------------------------------------------------------------------------------
  2424                                  ;
  2425                                  ;       Routine:        GetConsoleChar
  2426                                  ;
  2427                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2428                                  ;
  2429                                  ;       Out:            AL      ASCII character code
  2430                                  ;                       AH      keyboard scan code
  2431                                  ;
  2432                                  ;-----------------------------------------------------------------------------------------------------------------------
  2433 0000049B E8CF010000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2434 000004A0 E8CD010000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2435 000004A5 09C0                                            or      eax,eax                                         ;do we have a message?
  2436 000004A7 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2437 000004A9 50                                              push    eax                                             ;save key codes
  2438 000004AA 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2439 000004AF 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2440 000004B4 58                                              pop     eax                                             ;restore key codes
  2441 000004B5 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2442 000004B7 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2443 000004BC C3                                              ret                                                     ;return
  2444                                  ;-----------------------------------------------------------------------------------------------------------------------
  2445                                  ;
  2446                                  ;       Routine:        GetConsoleString
  2447                                  ;
  2448                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2449                                  ;
  2450                                  ;       In:             DS:EDX  target buffer address
  2451                                  ;                       ECX     maximum number of characters to accept
  2452                                  ;                       BH      echo to terminal
  2453                                  ;                       BL      terminating character
  2454                                  ;
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456 000004BD 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2457 000004BE 56                                              push    esi                                             ;
  2458 000004BF 57                                              push    edi                                             ;
  2459 000004C0 06                                              push    es                                              ;
  2460 000004C1 1E                                              push    ds                                              ;load data segment selector ...
  2461 000004C2 07                                              pop     es                                              ;... into extra segment register
  2462 000004C3 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2463 000004C5 51                                              push    ecx                                             ;save maximum characters
  2464 000004C6 30C0                                            xor     al,al                                           ;zero register
  2465 000004C8 FC                                              cld                                                     ;forward strings
  2466 000004C9 F3AA                                            rep     stosb                                           ;zero fill buffer
  2467 000004CB 59                                              pop     ecx                                             ;maximum characters
  2468 000004CC 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2469 000004CE 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2470 000004D0 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2471 000004D2 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2472 000004D7 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2473 000004D9 7445                                            je      .50                                             ;yes, exit
  2474 000004DB 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2475 000004DD 7521                                            jne     .30                                             ;no, skip ahead
  2476 000004DF 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2477 000004E1 74EF                                            je      .20                                             ;yes, get next character
  2478 000004E3 4F                                              dec     edi                                             ;backup target pointer
  2479 000004E4 C60700                                          mov     byte [edi],0                                    ;zero previous character
  2480 000004E7 41                                              inc     ecx                                             ;increment remaining chars
  2481 000004E8 F6C701                                          test    bh,1                                            ;echo to console?
  2482 000004EB 74E5                                            jz      .20                                             ;no, get next character
  2483 000004ED E847000000                                      call    PreviousConsoleColumn                           ;backup console position
  2484 000004F2 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2485 000004F4 E851000000                                      call    PutConsoleChar                                  ;write space to console
  2486 000004F9 E8E7010000                                      call    PlaceCursor                                     ;position the cursor
  2487 000004FE EBD2                                            jmp     .20                                             ;get next character
  2488 00000500 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2489 00000502 72CE                                            jb      .20                                             ;no, get another character
  2490 00000504 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2491 00000506 77CA                                            ja      .20                                             ;no, get another character
  2492 00000508 AA                                              stosb                                                   ;store character in buffer
  2493 00000509 F6C701                                          test    bh,1                                            ;echo to console?
  2494 0000050C 740F                                            jz      .40                                             ;no, skip ahead
  2495 0000050E E837000000                                      call    PutConsoleChar                                  ;write character to console
  2496 00000513 E810000000                                      call    NextConsoleColumn                               ;advance console position
  2497 00000518 E8C8010000                                      call    PlaceCursor                                     ;position the cursor
  2498 0000051D 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2499 0000051E EBB0                                            jmp     .10                                             ;next
  2500 00000520 30C0                    .50                     xor     al,al                                           ;null
  2501 00000522 AA                                              stosb                                                   ;terminate buffer
  2502 00000523 07                                              pop     es                                              ;restore non-volatile regs
  2503 00000524 5F                                              pop     edi                                             ;
  2504 00000525 5E                                              pop     esi                                             ;
  2505 00000526 59                                              pop     ecx                                             ;
  2506 00000527 C3                                              ret                                                     ;return
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  ;
  2509                                  ;       Routine:        NextConsoleColumn
  2510                                  ;
  2511                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2512                                  ;                       incremented if the end of the current row is reached.
  2513                                  ;
  2514                                  ;       In:             DS      OS data selector
  2515                                  ;
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517 00000528 A0AC080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2518 0000052D 3C4F                                            cmp     al,ECONCOLS-1                                   ;end of row?
  2519 0000052F 7307                                            jnb     .10
  2520 00000531 FEC0                                            inc     al
  2521 00000533 A2AC080000                                      mov     [wbConsoleColumn],al
  2522 00000538 C3                      .10                     ret                                                     ;return
  2523                                  ;-----------------------------------------------------------------------------------------------------------------------
  2524                                  ;
  2525                                  ;       Routine:        PreviousConsoleColumn
  2526                                  ;
  2527                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2528                                  ;                       the column is set to the last position in the row and the row is decremented.
  2529                                  ;
  2530                                  ;       In:             DS      OS data selector
  2531                                  ;
  2532                                  ;-----------------------------------------------------------------------------------------------------------------------
  2533 00000539 A0AC080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2534 0000053E 08C0                                            or      al,al                                           ;start of row?
  2535 00000540 7407                                            jz      .10
  2536 00000542 FEC8                                            dec     al
  2537 00000544 A2AC080000                                      mov     [wbConsoleColumn],al
  2538 00000549 C3                      .10                     ret                                                     ;return
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  ;
  2541                                  ;       Routine:        PutConsoleChar
  2542                                  ;
  2543                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2544                                  ;
  2545                                  ;       In:             AL      ASCII character
  2546                                  ;                       DS      OS data selector
  2547                                  ;
  2548                                  ;-----------------------------------------------------------------------------------------------------------------------
  2549 0000054A 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2550 0000054B 06                                              push    es                                              ;
  2551 0000054C 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2552 0000054E 07                                              pop     es                                              ;... into extra segment reg
  2553 0000054F 8A0DAC080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2554 00000555 8A2DAD080000                                    mov     ch,[wbConsoleRow]                               ;row
  2555 0000055B E86F010000                                      call    SetConsoleChar                                  ;put character at row, column
  2556 00000560 07                                              pop     es                                              ;restore non-volatile regs
  2557 00000561 59                                              pop     ecx                                             ;
  2558 00000562 C3                                              ret                                                     ;return
  2559                                  ;-----------------------------------------------------------------------------------------------------------------------
  2560                                  ;
  2561                                  ;       Routine:        PutConsoleHexByte
  2562                                  ;
  2563                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2564                                  ;
  2565                                  ;       In:             AL      byte value
  2566                                  ;                       CL      column
  2567                                  ;                       CH      row
  2568                                  ;                       DS      OS data selector
  2569                                  ;                       ES      CGA selector
  2570                                  ;
  2571                                  ;-----------------------------------------------------------------------------------------------------------------------
  2572 00000563 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2573 00000564 C0E804                                          shr     al,4                                            ;hi-order nybble
  2574 00000567 E803000000                                      call    .10                                             ;make ASCII and store
  2575 0000056C 58                                              pop     eax                                             ;byte value
  2576 0000056D 240F                                            and     al,0Fh                                          ;lo-order nybble
  2577 0000056F 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  2578 00000571 3C3A                                            cmp     al,03Ah                                         ;numeric?
  2579 00000573 7202                                            jb      .20                                             ;yes, skip ahead
  2580 00000575 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2581 00000577 E853010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2582 0000057C C3                                              ret                                                     ;return
  2583                                  ;-----------------------------------------------------------------------------------------------------------------------
  2584                                  ;
  2585                                  ;       Routine:        PutConsoleOIAChar
  2586                                  ;
  2587                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2588                                  ;
  2589                                  ;       In:             DS      OS data selector
  2590                                  ;
  2591                                  ;-----------------------------------------------------------------------------------------------------------------------
  2592 0000057D 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2593 0000057E 51                                              push    ecx                                             ;
  2594 0000057F 56                                              push    esi                                             ;
  2595 00000580 1E                                              push    ds                                              ;
  2596 00000581 06                                              push    es                                              ;
  2597 00000582 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2598 00000584 1F                                              pop     ds                                              ;... into data segment register
  2599 00000585 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2600 00000587 07                                              pop     es                                              ;... into extra segment register
  2601 00000588 BEB1080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2602 0000058D B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2603 0000058F B300                                            mov     bl,0                                            ;starting column
  2604 00000591 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2605 00000596 51                      .10                     push    ecx                                             ;save remaining count
  2606 00000597 89D9                                            mov     ecx,ebx                                         ;row, column
  2607 00000599 AC                                              lodsb                                                   ;read scan code
  2608 0000059A 08C0                                            or      al,al                                           ;scan code present?
  2609 0000059C 7407                                            jz      .20                                             ;no, skip ahead
  2610 0000059E E8C0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2611 000005A3 EB0E                                            jmp     .30                                             ;continue
  2612 000005A5 B020                    .20                     mov     al,' '                                          ;ASCII space
  2613 000005A7 E823010000                                      call    SetConsoleChar                                  ;display space
  2614 000005AC B020                                            mov     al,' '                                          ;ASCII space
  2615 000005AE E81C010000                                      call    SetConsoleChar                                  ;display space
  2616 000005B3 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2617 000005B6 59                                              pop     ecx                                             ;restore remaining
  2618 000005B7 E2DD                                            loop    .10                                             ;next code
  2619 000005B9 A0B7080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2620 000005BE 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2621 000005C0 720D                                            jb      .40                                             ;no, skip ahead
  2622 000005C2 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2623 000005C4 7709                                            ja      .40                                             ;no, skip ahead
  2624 000005C6 88FD                                            mov     ch,bh                                           ;OIA row
  2625 000005C8 B128                                            mov     cl,40                                           ;character display column
  2626 000005CA E800010000                                      call    SetConsoleChar                                  ;display ASCII character
  2627 000005CF 07                      .40                     pop     es                                              ;restore non-volatile regs
  2628 000005D0 1F                                              pop     ds                                              ;
  2629 000005D1 5E                                              pop     esi                                             ;
  2630 000005D2 59                                              pop     ecx                                             ;
  2631 000005D3 5B                                              pop     ebx                                             ;
  2632 000005D4 C3                                              ret                                                     ;return
  2633                                  ;-----------------------------------------------------------------------------------------------------------------------
  2634                                  ;
  2635                                  ;       Routine:        PutConsoleOIAShift
  2636                                  ;
  2637                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2638                                  ;
  2639                                  ;       In:             BL      shift flags
  2640                                  ;                       BH      lock flags
  2641                                  ;                       DS      OS data selector
  2642                                  ;
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644 000005D5 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2645 000005D6 06                                              push    es                                              ;
  2646 000005D7 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2647 000005D9 07                                              pop     es                                              ;... into ES register
  2648 000005DA B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2649 000005DC B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2650 000005DE F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2651 000005E1 7402                                            jz      .10                                             ;no, skip ahead
  2652 000005E3 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2653 000005E5 B10E                    .10                     mov     cl,14                                           ;indicator column
  2654 000005E7 E8E3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2655 000005EC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2656 000005EE F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2657 000005F1 7402                                            jz      .20                                             ;no, skip ahead
  2658 000005F3 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2659 000005F5 B140                    .20                     mov     cl,64                                           ;indicator column
  2660 000005F7 E8D3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2661 000005FC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2662 000005FE F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2663 00000601 7402                                            jz      .30                                             ;no, skip ahead
  2664 00000603 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2665 00000605 B10F                    .30                     mov     cl,15                                           ;indicator column
  2666 00000607 E8C3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2667 0000060C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2668 0000060E F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2669 00000611 7402                                            jz      .40                                             ;no, skip ahead
  2670 00000613 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2671 00000615 B13F                    .40                     mov     cl,63                                           ;indicator column
  2672 00000617 E8B3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2673 0000061C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2674 0000061E F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2675 00000621 7402                                            jz      .50                                             ;no, skip ahead
  2676 00000623 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2677 00000625 B110                    .50                     mov     cl,16                                           ;indicator column
  2678 00000627 E8A3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2679 0000062C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2680 0000062E F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2681 00000631 7402                                            jz      .60                                             ;no, skip ahead
  2682 00000633 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2683 00000635 B13E                    .60                     mov     cl,62                                           ;indicator column
  2684 00000637 E893000000                                      call    SetConsoleChar                                  ;display ASCII character
  2685 0000063C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2686 0000063E F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2687 00000641 7402                                            jz      .70                                             ;no, skip ahead
  2688 00000643 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2689 00000645 B14E                    .70                     mov     cl,78                                           ;indicator column
  2690 00000647 E883000000                                      call    SetConsoleChar                                  ;display ASCII character
  2691 0000064C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2692 0000064E F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2693 00000651 7402                                            jz      .80                                             ;no, skip ahead
  2694 00000653 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2695 00000655 B14D                    .80                     mov     cl,77                                           ;indicator column
  2696 00000657 E873000000                                      call    SetConsoleChar                                  ;display ASCII character
  2697 0000065C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2698 0000065E F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2699 00000661 7402                                            jz      .90                                             ;no, skip ahead
  2700 00000663 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2701 00000665 B14C                    .90                     mov     cl,76                                           ;indicator column
  2702 00000667 E863000000                                      call    SetConsoleChar                                  ;display ASCII character
  2703 0000066C 07                                              pop     es                                              ;restore non-volatile regs
  2704 0000066D 59                                              pop     ecx                                             ;
  2705 0000066E C3                                              ret                                                     ;return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       Routine:        Yield
  2709                                  ;
  2710                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2711                                  ;
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713 0000066F FB                      Yield                   sti                                                     ;enable maskagle interrupts
  2714 00000670 F4                                              hlt                                                     ;halt until external interrupt
  2715 00000671 C3                                              ret                                                     ;return
  2716                                  ;=======================================================================================================================
  2717                                  ;
  2718                                  ;       Message Queue Helper Routines
  2719                                  ;
  2720                                  ;       GetMessage
  2721                                  ;       PutMessage
  2722                                  ;
  2723                                  ;=======================================================================================================================
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;       Routine:        GetMessage
  2727                                  ;
  2728                                  ;       Description:    This routine reads and removes a message from the message queue.
  2729                                  ;
  2730                                  ;       Out:            EAX     lo-order message data
  2731                                  ;                       EDX     hi-order message data
  2732                                  ;
  2733                                  ;                       CY      0 = message read
  2734                                  ;                               1 = no message to read
  2735                                  ;
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737 00000672 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  2738 00000673 51                                              push    ecx                                             ;
  2739 00000674 1E                                              push    ds                                              ;
  2740 00000675 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  2741 00000677 1F                                              pop     ds                                              ;... into data segment register
  2742 00000678 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  2743 0000067E 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  2744 00000680 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2745 00000683 09D0                                            or      eax,edx                                         ;is queue empty?
  2746 00000685 F9                                              stc                                                     ;assume queue is emtpy
  2747 00000686 741B                                            jz      .20                                             ;yes, skip ahead
  2748 00000688 31C9                                            xor     ecx,ecx                                         ;store zero
  2749 0000068A 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  2750 0000068C 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2751 0000068F 83C308                                          add     ebx,8                                           ;next queue element
  2752 00000692 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  2753 00000698 7502                                            jnz     .10                                             ;no, skip ahead
  2754 0000069A B308                                            mov     bl,8                                            ;reset to 1st entry
  2755 0000069C 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2756 000006A2 F8                                              clc                                                     ;indicate message read
  2757 000006A3 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2758 000006A4 59                                              pop     ecx                                             ;
  2759 000006A5 5B                                              pop     ebx                                             ;
  2760 000006A6 C3                                              ret                                                     ;return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       Routine:        PutMessage
  2764                                  ;
  2765                                  ;       Description:    This routine adda a message to the message queue.
  2766                                  ;
  2767                                  ;       In:             ECX     hi-order data word
  2768                                  ;                       EDX     lo-order data word
  2769                                  ;
  2770                                  ;       Out:            CY      0 = success
  2771                                  ;                               1 = fail: queue is full
  2772                                  ;
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774 000006A7 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  2775 000006A8 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  2776 000006AA 1F                                              pop     ds                                              ;... into data segment register
  2777 000006AB A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  2778 000006B0 833800                                          cmp     dword [eax],0                                   ;is queue full?
  2779 000006B3 F9                                              stc                                                     ;assume failure
  2780 000006B4 7517                                            jne     .20                                             ;yes, cannot store
  2781 000006B6 8910                                            mov     [eax],edx                                       ;store lo-order data
  2782 000006B8 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  2783 000006BB 83C008                                          add     eax,8                                           ;next queue element adr
  2784 000006BE 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  2785 000006C3 7502                                            jnz     .10                                             ;no, skip ahead
  2786 000006C5 B008                                            mov     al,8                                            ;reset to top of queue
  2787 000006C7 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2788 000006CC F8                                              clc                                                     ;indicate success
  2789 000006CD 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2790 000006CE C3                                              ret                                                     ;return
  2791                                  ;=======================================================================================================================
  2792                                  ;
  2793                                  ;       Memory-Mapped Video Routines
  2794                                  ;
  2795                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2796                                  ;
  2797                                  ;       SetConsoleChar
  2798                                  ;
  2799                                  ;=======================================================================================================================
  2800                                  ;-----------------------------------------------------------------------------------------------------------------------
  2801                                  ;
  2802                                  ;       Routine:        SetConsoleChar
  2803                                  ;
  2804                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2805                                  ;
  2806                                  ;       In:             AL      ASCII character
  2807                                  ;                       CL      column
  2808                                  ;                       CH      row
  2809                                  ;                       ES      CGA selector
  2810                                  ;
  2811                                  ;       Out:            EAX     last target address written (ES:)
  2812                                  ;                       CL      column + 1
  2813                                  ;
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815 000006CF 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  2816 000006D1 0FB6C5                                          movzx   eax,ch                                          ;row
  2817 000006D4 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  2818 000006D6 F6E4                                            mul     ah                                              ;row * cols/row
  2819 000006D8 00C8                                            add     al,cl                                           ;add column
  2820 000006DA 80D400                                          adc     ah,0                                            ;handle carry
  2821 000006DD D1E0                                            shl     eax,1                                           ;screen offset
  2822 000006DF 268810                                          mov     [es:eax],dl                                     ;store character
  2823 000006E2 FEC1                                            inc     cl                                              ;next column
  2824 000006E4 C3                                              ret                                                     ;return
  2825                                  ;=======================================================================================================================
  2826                                  ;
  2827                                  ;       Input/Output Routines
  2828                                  ;
  2829                                  ;       These routines read and/or write directly to ports.
  2830                                  ;
  2831                                  ;       PlaceCursor
  2832                                  ;       PutPrimaryEndOfInt
  2833                                  ;       PutSecondaryEndOfInt
  2834                                  ;       ResetSystem
  2835                                  ;       SetKeyboardLamps
  2836                                  ;       WaitForKeyInBuffer
  2837                                  ;       WaitForKeyOutBuffer
  2838                                  ;
  2839                                  ;=======================================================================================================================
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;       Routine:        PlaceCursor
  2843                                  ;
  2844                                  ;       Description:    This routine positions the cursor on the console.
  2845                                  ;
  2846                                  ;       In:             DS      OS data selector
  2847                                  ;
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849 000006E5 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2850 000006E6 A0AD080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2851 000006EB B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2852 000006ED F6E4                                            mul     ah                                              ;row offset
  2853 000006EF 0205AC080000                                    add     al,[wbConsoleColumn]                            ;add column
  2854 000006F5 80D400                                          adc     ah,0                                            ;add overflow
  2855 000006F8 89C1                                            mov     ecx,eax                                         ;screen offset
  2856 000006FA B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2857 000006FC B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2858 000006FE B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2859 00000700 EE                                              out     dx,al                                           ;select register
  2860 00000701 42                                              inc     edx                                             ;data port
  2861 00000702 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2862 00000704 EE                                              out     dx,al                                           ;store hi-order loc
  2863 00000705 4A                                              dec     edx                                             ;register select port
  2864 00000706 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2865 00000708 EE                                              out     dx,al                                           ;select register
  2866 00000709 42                                              inc     edx                                             ;data port
  2867 0000070A 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2868 0000070C EE                                              out     dx,al                                           ;store lo-order loc
  2869 0000070D 59                                              pop     ecx                                             ;restore non-volatile regs
  2870 0000070E C3                                              ret                                                     ;return
  2871                                  ;-----------------------------------------------------------------------------------------------------------------------
  2872                                  ;
  2873                                  ;       Routine:        PutPrimaryEndOfInt
  2874                                  ;
  2875                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2876                                  ;
  2877                                  ;-----------------------------------------------------------------------------------------------------------------------
  2878 0000070F B020                    PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2879 00000711 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2880 00000713 C3                                              ret                                                     ;return
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  ;
  2883                                  ;       Routine:        PutSecondaryEndOfInt
  2884                                  ;
  2885                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2886                                  ;
  2887                                  ;-----------------------------------------------------------------------------------------------------------------------
  2888 00000714 B020                    PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2889 00000716 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2890 00000718 C3                                              ret                                                     ;return
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;       Routine:        ResetSystem
  2894                                  ;
  2895                                  ;       Description:    This routine restarts the system using the 8042 controller.
  2896                                  ;
  2897                                  ;       Out:            N/A     This routine does not return.
  2898                                  ;
  2899                                  ;-----------------------------------------------------------------------------------------------------------------------
  2900 00000719 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  2901 0000071E E2FE                                            loop    $                                               ;clear interrupts
  2902 00000720 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  2903 00000722 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  2904 00000724 FB                      .10                     sti                                                     ;enable maskable interrupts
  2905 00000725 F4                                              hlt                                                     ;halt until interrupt
  2906 00000726 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  2907                                  ;-----------------------------------------------------------------------------------------------------------------------
  2908                                  ;
  2909                                  ;       Routine:        SetKeyboardLamps
  2910                                  ;
  2911                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2912                                  ;
  2913                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2914                                  ;
  2915                                  ;-----------------------------------------------------------------------------------------------------------------------
  2916 00000728 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2917 0000072D B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2918 0000072F E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  2919 00000731 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2920 00000736 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2921 00000738 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2922 0000073D 88F8                                            mov     al,bh                                           ;set/reset lamps value
  2923 0000073F E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  2924 00000741 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2925 00000746 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2926 00000748 C3                                              ret                                                     ;return
  2927                                  ;-----------------------------------------------------------------------------------------------------------------------
  2928                                  ;
  2929                                  ;       Routine:        WaitForKeyInBuffer
  2930                                  ;
  2931                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2932                                  ;
  2933                                  ;       Out:            ZF      1 = Input buffer ready
  2934                                  ;                               0 = Input buffer not ready after timeout
  2935                                  ;
  2936                                  ;-----------------------------------------------------------------------------------------------------------------------
  2937 00000749 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2938 0000074A B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2939 0000074F E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2940 00000751 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  2941 00000753 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  2942 00000755 59                                              pop     ecx                                             ;restore non-volatile regs
  2943 00000756 C3                                              ret                                                     ;return
  2944                                  ;-----------------------------------------------------------------------------------------------------------------------
  2945                                  ;
  2946                                  ;       Routine:        WaitForKeyOutBuffer
  2947                                  ;
  2948                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2949                                  ;
  2950                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2951                                  ;                               0 = Output buffer empty after timeout
  2952                                  ;
  2953                                  ;-----------------------------------------------------------------------------------------------------------------------
  2954 00000757 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2955 00000758 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2956 0000075D E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2957 0000075F A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  2958 00000761 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  2959 00000763 59                                              pop     ecx                                             ;restore non-volatile regs
  2960 00000764 C3                                              ret                                                     ;return
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  ;
  2963                                  ;       End of the Kernel Function Library
  2964                                  ;
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966 00000765 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2967                                  ;=======================================================================================================================
  2968                                  ;
  2969                                  ;       Console Task
  2970                                  ;
  2971                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2972                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2973                                  ;       screen and responds to user commands.
  2974                                  ;
  2975                                  ;=======================================================================================================================
  2976                                  ;-----------------------------------------------------------------------------------------------------------------------
  2977                                  ;
  2978                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2979                                  ;
  2980                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2981                                  ;
  2982                                  ;-----------------------------------------------------------------------------------------------------------------------
  2983                                  section                 constack                                                ;console task stack
  2984 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ;
  2987                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2988                                  ;
  2989                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2990                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2991                                  ;       16 descriptors. Six are initially defined.
  2992                                  ;
  2993                                  ;-----------------------------------------------------------------------------------------------------------------------
  2994                                  section                 conldt                                                  ;console local descriptors
  2995 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2996 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2997 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2998 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2999 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3000 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3001 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  ;
  3004                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3005                                  ;
  3006                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3007                                  ;       segment. CS to console code.
  3008                                  ;
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010                                  section                 contss                                                  ;console task state segment
  3011 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3012 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3013 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3014 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3015 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3016 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3017 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3018 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3019 00000020 00000000                                        dd      0                                               ;20 eip
  3020 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3021 00000028 00000000                                        dd      0                                               ;28 eax
  3022 0000002C 00000000                                        dd      0                                               ;2c ecx
  3023 00000030 00000000                                        dd      0                                               ;30 edx
  3024 00000034 00000000                                        dd      0                                               ;34 ebx
  3025 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3026 0000003C 00000000                                        dd      0                                               ;3c ebp
  3027 00000040 00000000                                        dd      0                                               ;40 esi
  3028 00000044 00000000                                        dd      0                                               ;44 edi
  3029 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3030 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3031 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3032 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3033 00000058 00000000                                        dd      0                                               ;58 fs
  3034 0000005C 00000000                                        dd      0                                               ;5c gs
  3035 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3036 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3037                                  ;-----------------------------------------------------------------------------------------------------------------------
  3038                                  ;
  3039                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3040                                  ;
  3041                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3042                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3043                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3044                                  ;       event.
  3045                                  ;
  3046                                  ;-----------------------------------------------------------------------------------------------------------------------
  3047                                  section                 conmque                                                 ;console message queue
  3048 00000000 08000000                                        dd      8                                               ;head pointer
  3049 00000004 08000000                                        dd      8                                               ;tail pointer
  3050 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3051                                  ;-----------------------------------------------------------------------------------------------------------------------
  3052                                  ;
  3053                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3054                                  ;
  3055                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3056                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3057                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3058                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3059                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3060                                  ;       board input, echoing to the console screen and responding to user commands.
  3061                                  ;
  3062                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3063                                  ;
  3064                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3065                                  ;                               |  Real Mode Interrupt Vectors                  |
  3066                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3067                                  ;                               |  Reserved BIOS Memory Area                    |
  3068                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3069                                  ;                               |  Shared Kernel Memory Area                    |
  3070                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3071                                  ;                               |  Global Descriptor Table (GDT)                |
  3072                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3073                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3074                                  ;                       002000  +-----------------------------------------------+
  3075                                  ;                               |  Interrupt Handlers                           |
  3076                                  ;                               |  Kernel Function Library                      |
  3077                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3078                                  ;                               |  Console Task Stack Area                      |
  3079                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3080                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3081                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3082                                  ;                               |  Console Task Task State Segment (TSS)        |
  3083                                  ;                       004800  +-----------------------------------------------+
  3084                                  ;                               |  Console Task Message Queue                   |
  3085                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3086                                  ;                               |  Console Task Code                            |
  3087                                  ;                               |  Console Task Constants                       |
  3088                                  ;                       006000  +===============================================+
  3089                                  ;
  3090                                  ;-----------------------------------------------------------------------------------------------------------------------
  3091                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3092                                  ;
  3093                                  ;       Initialize console work areas to low values.
  3094                                  ;
  3095 00000000 BF00080000              ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  3096 00000005 30C0                                            xor     al,al                                           ;initialization value
  3097 00000007 B9B8000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3098 0000000C FC                                              cld                                                     ;forward strings
  3099 0000000D F3AA                                            rep     stosb                                           ;initialize data
  3100                                  ;
  3101                                  ;       Initialize the active panel variables.
  3102                                  ;
  3103 0000000F B8[85010000]                                    mov     eax,czPnlCon001                                 ;initial console panel
  3104 00000014 A300080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  3105                                  ;
  3106                                  ;       Address the console screen memory.
  3107                                  ;
  3108 00000019 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  3109 0000001B 07                                              pop     es                                              ;...into extra segment reg
  3110                                  ;
  3111                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  3112                                  ;
  3113 0000001C BF000F0000                                      mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  3114 00000021 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3115 00000026 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3116 0000002B F3AB                                            rep     stosd                                           ;reset OIA
  3117                                  ;
  3118                                  ;       Clear the console rows. (This is done after every attention key).
  3119                                  ;
  3120 0000002D 31FF                    .20                     xor     edi,edi                                         ;target offset
  3121 0000002F B9C0030000                                      mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  3122 00000034 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initialization value
  3123 00000039 F3AB                                            rep     stosd                                           ;reset screen body
  3124                                  ;
  3125                                  ;       Reset the input field input address, row and column.
  3126                                  ;
  3127 0000003B 31C0                                            xor     eax,eax                                         ;zero register
  3128 0000003D A304080000                                      mov     [wdConsoleField],eax                            ;zero field addr
  3129 00000042 A308080000                                      mov     [wdConsoleInput],eax                            ;zero input addr
  3130 00000047 A2AD080000                                      mov     [wbConsoleRow],al                               ;zero console row
  3131 0000004C A2AC080000                                      mov     [wbConsoleColumn],al                            ;zero console column
  3132                                  ;
  3133                                  ;       Load the field address from the panel. Exit loop if address is null.
  3134                                  ;
  3135 00000051 8B1D00080000                                    mov     ebx,[wdConsolePanel]                            ;first field template addr
  3136 00000057 8B33                    .30                     mov     esi,[ebx]                                       ;field value addr
  3137 00000059 85F6                                            test    esi,esi                                         ;end of panel?
  3138 0000005B 746B                                            jz      .70                                             ;yes, exit loop
  3139                                  ;
  3140                                  ;       Load the field row, column, color and length.
  3141                                  ;
  3142 0000005D 8A6B04                                          mov     ch,[ebx+4]                                      ;row
  3143 00000060 8A4B05                                          mov     cl,[ebx+5]                                      ;column
  3144 00000063 8A7306                                          mov     dh,[ebx+6]                                      ;color
  3145 00000066 8A5307                                          mov     dl,[ebx+7]                                      ;length
  3146                                  ;
  3147                                  ;       Test the row high-bit for input field indication.
  3148                                  ;
  3149 00000069 F6C580                                          test    ch,080h                                         ;input field?
  3150 0000006C 7437                                            jz      .40                                             ;no, branch
  3151 0000006E 80E57F                                          and     ch,07Fh                                         ;clear input field indicator
  3152                                  ;
  3153                                  ;       Save the row and column if this is the first input field.
  3154                                  ;
  3155 00000071 A0AD080000                                      mov     al,[wbConsoleRow]                               ;console row
  3156 00000076 0A05AC080000                                    or      al,[wbConsoleColumn]                            ;already have an input field?
  3157 0000007C 7527                                            jnz     .40                                             ;yes, branch
  3158 0000007E 891D04080000                                    mov     [wdConsoleField],ebx                            ;save field template addr
  3159 00000084 893508080000                                    mov     [wdConsoleInput],esi                            ;update console input buffer
  3160 0000008A 882DAD080000                                    mov     [wbConsoleRow],ch                               ;update console row
  3161 00000090 880DAC080000                                    mov     [wbConsoleColumn],cl                            ;update console column
  3162                                  ;
  3163                                  ;       Clear input field contents.
  3164                                  ;
  3165 00000096 51                                              push    ecx                                             ;save row, col
  3166 00000097 06                                              push    es                                              ;save CGA segment
  3167 00000098 1E                                              push    ds                                              ;load OS data ...
  3168 00000099 07                                              pop     es                                              ;... into extra segment reg
  3169 0000009A 89F7                                            mov     edi,esi                                         ;target is field data addr
  3170 0000009C 30C0                                            xor     al,al                                           ;fill byte is NUL
  3171 0000009E 0FB6CA                                          movzx   ecx,dl                                          ;field length
  3172 000000A1 F3AA                                            rep     stosb                                           ;fill field with fill byte
  3173 000000A3 07                                              pop     es                                              ;restore CGA segment
  3174 000000A4 59                                              pop     ecx                                             ;restore row, col
  3175                                  ;
  3176                                  ;       Compute the target offset.
  3177                                  ;
  3178 000000A5 0FB6C5                  .40                     movzx   eax,ch                                          ;row
  3179 000000A8 B450                                            mov     ah,ECONCOLS                                     ;columns per row
  3180 000000AA F6E4                                            mul     ah                                              ;row offset
  3181 000000AC 00C8                                            add     al,cl                                           ;add column
  3182 000000AE 80D400                                          adc     ah,0                                            ;handle overflow
  3183 000000B1 D1E0                                            shl     eax,1                                           ;two-bytes per column
  3184 000000B3 89C7                                            mov     edi,eax                                         ;target offset
  3185                                  ;
  3186                                  ;       Display the field contents.
  3187                                  ;
  3188 000000B5 0FB6CA                                          movzx   ecx,dl                                          ;length
  3189 000000B8 88F4                                            mov     ah,dh                                           ;color
  3190 000000BA AC                      .50                     lodsb                                                   ;field character
  3191 000000BB 84C0                                            test    al,al                                           ;end of value?
  3192 000000BD 7404                                            jz      .60                                             ;yes, branch
  3193 000000BF 66AB                                            stosw                                                   ;store character and color
  3194 000000C1 E2F7                                            loop    .50                                             ;next character
  3195 000000C3 83C308                  .60                     add     ebx,8                                           ;next field addr
  3196 000000C6 EB8F                                            jmp     short .30                                       ;next field
  3197                                  ;
  3198                                  ;       Place the cursor at the input field.
  3199                                  ;
  3200 000000C8 8A25AD080000            .70                     mov     ah,[wbConsoleRow]                               ;field row
  3201 000000CE A0AC080000                                      mov     al,[wbConsoleColumn]                            ;field column
  3202                                                          placeCursor                                             ;position the cursor
  3202 000000D3 B002                <1>  mov al,ePlaceCursor
  3202 000000D5 CD30                <1>  int _svc
  3203                                  ;
  3204                                  ;       Get command.
  3205                                  ;
  3206 000000D7 8B3504080000                                    mov     esi,[wdConsoleField]                            ;input field template addr
  3207 000000DD 8B1508080000                                    mov     edx,[wdConsoleInput]                            ;target buffer addr
  3208 000000E3 31C9                                            xor     ecx,ecx                                         ;zero register
  3209 000000E5 8A4E07                                          mov     cl,[esi+7]                                      ;maximum chars to accept
  3210 000000E8 B701                                            mov     bh,1                                            ;echo to terminal
  3211 000000EA B30D                                            mov     bl,13                                           ;terminating character
  3212                                                          getConsoleString                                        ;accept keyboard input
  3212 000000EC B001                <1>  mov al,eGetConsoleString
  3212 000000EE CD30                <1>  int _svc
  3213                                  ;
  3214                                  ;       Take the first token entered.
  3215                                  ;
  3216 000000F0 8B1508080000                                    mov     edx,[wdConsoleInput]                            ;console input buffer addr
  3217 000000F6 BB5C080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  3218 000000FB E821000000                                      call    ConTakeToken                                    ;take first command token
  3219                                  ;
  3220                                  ;       Evaluate token
  3221                                  ;
  3222 00000100 BA5C080000                                      mov     edx,wzConsoleToken                              ;token buffer
  3223 00000105 E84C000000                                      call    ConDetermineCommand                             ;determine if this is a command
  3224 0000010A 83F803                                          cmp     eax,ECONJMPTBLCNT                               ;command number in range?
  3225 0000010D 730D                                            jnb     .80                                             ;no, branch
  3226 0000010F C1E002                                          shl     eax,2                                           ;convert number to array offset
  3227 00000112 BA[B1010000]                                    mov     edx,tConJmpTbl                                  ;command handler address table base
  3228 00000117 8B0402                                          mov     eax,[edx+eax]                                   ;command handler address
  3229 0000011A FFD0                                            call    eax                                             ;handler command
  3230                                  ;
  3231                                  ;       Refresh Panel.
  3232                                  ;
  3233 0000011C E90CFFFFFF              .80                      jmp     .20                                            ;refresh panel
  3234                                  ;-----------------------------------------------------------------------------------------------------------------------
  3235                                  ;
  3236                                  ;       Routine:        ConTakeToken
  3237                                  ;
  3238                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3239                                  ;
  3240                                  ;       In:             DS:EDX  source buffer address
  3241                                  ;                       DS:EBX  target buffer address
  3242                                  ;
  3243                                  ;       Out:            DS:EDX  source buffer address
  3244                                  ;                       DS:EBX  target buffer address
  3245                                  ;
  3246                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3247                                  ;
  3248                                  ;-----------------------------------------------------------------------------------------------------------------------
  3249 00000121 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  3250 00000122 57                                              push    edi                                             ;
  3251 00000123 06                                              push    es                                              ;
  3252 00000124 1E                                              push    ds                                              ;load data segment selector ...
  3253 00000125 07                                              pop     es                                              ;... into extra segment reg
  3254 00000126 89D6                                            mov     esi,edx                                         ;source buffer address
  3255 00000128 89DF                                            mov     edi,ebx                                         ;target buffer address
  3256 0000012A C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3257 0000012D FC                                              cld                                                     ;forward strings
  3258 0000012E AC                      .10                     lodsb                                                   ;load byte
  3259 0000012F 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3260 00000131 74FB                                            je      .10                                             ;yes, continue
  3261 00000133 84C0                                            test    al,al                                           ;end of line?
  3262 00000135 7410                                            jz      .40                                             ;yes, branch
  3263 00000137 AA                      .20                     stosb                                                   ;store byte
  3264 00000138 AC                                              lodsb                                                   ;load byte
  3265 00000139 84C0                                            test    al,al                                           ;end of line?
  3266 0000013B 740A                                            jz      .40                                             ;no, continue
  3267 0000013D 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3268 0000013F 75F6                                            jne     .20                                             ;no, continue
  3269 00000141 AC                      .30                     lodsb                                                   ;load byte
  3270 00000142 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3271 00000144 74FB                                            je      .30                                             ;yes, continue
  3272 00000146 4E                                              dec     esi                                             ;pre-position
  3273 00000147 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3274 0000014A 89D7                                            mov     edi,edx                                         ;source buffer address
  3275 0000014C AC                      .50                     lodsb                                                   ;remaining byte
  3276 0000014D AA                                              stosb                                                   ;move to front of buffer
  3277 0000014E 84C0                                            test    al,al                                           ;end of line?
  3278 00000150 75FA                                            jnz     .50                                             ;no, continue
  3279 00000152 07                                              pop     es                                              ;restore non-volatile regs
  3280 00000153 5F                                              pop     edi                                             ;
  3281 00000154 5E                                              pop     esi                                             ;
  3282 00000155 C3                                              ret                                                     ;return
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;       Routine:        ConDetermineCommand
  3286                                  ;
  3287                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3288                                  ;
  3289                                  ;       input:          DS:EDX  command address
  3290                                  ;
  3291                                  ;       output:         EAX     >=0     = command nbr
  3292                                  ;                               0       = unknown command
  3293                                  ;
  3294                                  ;-----------------------------------------------------------------------------------------------------------------------
  3295 00000156 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3296 00000157 51                                              push    ecx                                             ;
  3297 00000158 56                                              push    esi                                             ;
  3298 00000159 57                                              push    edi                                             ;
  3299                                                          upperCaseString                                         ;upper-case string at EDX
  3299 0000015A B004                <1>  mov al,eUpperCaseString
  3299 0000015C CD30                <1>  int _svc
  3300 0000015E BE[BD010000]                                    mov     esi,tConCmdTbl                                  ;commands table
  3301 00000163 31FF                                            xor     edi,edi                                         ;intialize command number
  3302 00000165 FC                                              cld                                                     ;forward strings
  3303 00000166 AC                      .10                     lodsb                                                   ;command length
  3304 00000167 0FB6C8                                          movzx   ecx,al                                          ;command length
  3305 0000016A E30D                                            jecxz   .20                                             ;branch if end of table
  3306 0000016C 89F3                                            mov     ebx,esi                                         ;table entry address
  3307 0000016E 01CE                                            add     esi,ecx                                         ;next table entry address
  3308                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3308 00000170 B000                <1>  mov al,eCompareMemory
  3308 00000172 CD30                <1>  int _svc
  3309 00000174 E303                                            jecxz   .20                                             ;branch if equal
  3310 00000176 47                                              inc     edi                                             ;increment command nbr
  3311 00000177 EBED                                            jmp     .10                                             ;repeat
  3312 00000179 89F8                    .20                     mov     eax,edi                                         ;command number
  3313 0000017B 5F                                              pop     edi                                             ;restore non-volatile regs
  3314 0000017C 5E                                              pop     esi                                             ;
  3315 0000017D 59                                              pop     ecx                                             ;
  3316 0000017E 5B                                              pop     ebx                                             ;
  3317 0000017F C3                                              ret                                                     ;return
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  ;
  3320                                  ;       Routine:        ConExit
  3321                                  ;
  3322                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3323                                  ;
  3324                                  ;-----------------------------------------------------------------------------------------------------------------------
  3325                                  ConExit                 resetSystem                                             ;issue system reset
  3325                              <1> ConExit :
  3325 00000180 B003                <1>  mov al,eResetSystem
  3325 00000182 CD30                <1>  int _svc
  3326 00000184 C3                                              ret                                                     ;return
  3327                                  ;-----------------------------------------------------------------------------------------------------------------------
  3328                                  ;
  3329                                  ;       Constants
  3330                                  ;
  3331                                  ;-----------------------------------------------------------------------------------------------------------------------
  3332                                  ;-----------------------------------------------------------------------------------------------------------------------
  3333                                  ;
  3334                                  ;       Panels
  3335                                  ;
  3336                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  3337                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  3338                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  3339                                  ;
  3340                                  ;-----------------------------------------------------------------------------------------------------------------------
  3341 00000185 [D4010000]              czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  3342 00000189 00000206                                        db      00,00,02h,06                                    ;flags+row, col, attr, length
  3343 0000018D [DA010000]                                      dd      czFldTitleCon001
  3344 00000191 001E0714                                        db      00,30,07h,20
  3345 00000195 [EE010000]                                      dd      czFldDatTmCon001
  3346 00000199 003F0211                                        db      00,63,02h,17
  3347 0000019D [FF010000]                                      dd      czFldPrmptCon001
  3348 000001A1 17000701                                        db      23,00,07h,01
  3349 000001A5 0C080000                                        dd      wzConsoleInBuffer
  3350 000001A9 9701074F                                        db      128+23,01,07h,79
  3351 000001AD 00000000                                        dd      0                                               ;end of panel
  3352                                  ;-----------------------------------------------------------------------------------------------------------------------
  3353                                  ;
  3354                                  ;       Tables
  3355                                  ;
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357                                                                                                                  ;---------------------------------------
  3358                                                                                                                  ;  Command Jump Table
  3359                                                                                                                  ;---------------------------------------
  3360                                  tConJmpTbl              equ     $                                               ;command jump table
  3361 000001B1 80010000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  3362 000001B5 80010000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  3363 000001B9 80010000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  3364                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3365                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3366                                                                                                                  ;---------------------------------------
  3367                                                                                                                  ;  Command Name Table
  3368                                                                                                                  ;---------------------------------------
  3369                                  tConCmdTbl              equ     $                                               ;command name table
  3370 000001BD 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  3370 000001C6 00                 
  3371 000001C7 054558495400                                    db      5,"EXIT",0                                      ;exit command
  3372 000001CD 055155495400                                    db      5,"QUIT",0                                      ;quit command
  3373 000001D3 00                                              db      0                                               ;end of table
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;       Strings
  3377                                  ;
  3378                                  ;-----------------------------------------------------------------------------------------------------------------------
  3379 000001D4 434F4E303031            czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  3380 000001DA 437573746F6D4F5320-     czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  3380 000001E3 56657273696F6E2031-
  3380 000001EC 2E30               
  3381 000001EE 44442D4D4D4D2D5959-     czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  3381 000001F7 59592048483A4D4D   
  3382 000001FF 3A                      czFldPrmptCon001        db      ":"                                             ;command prompt
  3383 00000200 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  3384                                  %endif
  3385                                  %ifdef BUILDDISK
  3386                                  ;-----------------------------------------------------------------------------------------------------------------------
  3387                                  ;
  3388                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3389                                  ;
  3390                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3391                                  ;
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                  section                 unused                                                  ;unused disk space
  3394 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3395                                  %endif
  3396                                  ;=======================================================================================================================
  3397                                  ;
  3398                                  ;       End of Program Code
  3399                                  ;
  3400                                  ;=======================================================================================================================
