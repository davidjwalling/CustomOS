     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.007
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;			clear, exit, and ver.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Register EAX is preferred for returning a response/result value.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX and ECX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	x86 Descriptor Access Codes						EACC...
   190                                  ;
   191                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   192                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   193                                  ;
   194                                  ;	0.......	Segment is not present in memory (triggers int 11)
   195                                  ;	1.......	Segment is present in memory
   196                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   197                                  ;	...0....	Segment is a system segment
   198                                  ;	...00010		Local Descriptor Table
   199                                  ;	...00101		Task Gate
   200                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   201                                  ;	...01100		Call Gate (386)
   202                                  ;	...01110		Interrupt Gate (386)
   203                                  ;	...01111		Trap Gate (386)
   204                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   205                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   206                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EACCLDT			equ	10000010b					;local descriptor table
   210                                  EACCTASK		equ	10000101b					;task gate
   211                                  EACCTSS			equ	10001001b					;task-state segment
   212                                  EACCGATE		equ	10001100b					;call gate
   213                                  EACCINT			equ	10001110b					;interrupt gate
   214                                  EACCTRAP		equ	10001111b					;trap gate
   215                                  EACCDATA		equ	10010011b					;upward writable data
   216                                  EACCCODE		equ	10011011b					;non-conforming readable code
   217                                  ;-----------------------------------------------------------------------------------------------------------------------
   218                                  ;
   219                                  ;	BIOS Interrupts and Functions						EBIOS...
   220                                  ;
   221                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   222                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   226                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   227                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   228                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   229                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   230                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   231                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	ASCII									EASC...
   235                                  ;
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   238                                  EASCIILINEFEED		equ	10						;ASCII line feed
   239                                  EASCIIRETURN		equ	13						;ASCII carriage return
   240                                  EASCIIESCAPE		equ	27						;ASCII escape
   241                                  EASCIISPACE		equ	32						;ASCII space
   242                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   243                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   244                                  EASCIILOWERA		equ	97						;ASCII 'a'
   245                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   246                                  EASCIITILDE		equ	126						;ASCII '~'
   247                                  EASCIICASE		equ	00100000b					;ASCII case bit
   248                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;
   251                                  ;	Boot Sector and Loader Constants
   252                                  ;
   253                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   254                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   255                                  ;
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   258                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   259                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   260                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   261                                  EMAXTRIES		equ	5						;max read retries
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ESELDAT			equ	18h						;kernel data selector
   266                                  ESELCGA			equ	20h						;cga video selector
   267                                  ESELOSCODE		equ	48h						;os kernel selector
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;	LDT Selectors								ESEL...
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ESELMQ			equ	2Ch						;console task message queue
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  ;	Kernel Constants							EKRN...
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  EKRNDESLEN		equ	8						;size of descriptor
   276                                  EKRNADR			equ	1000h						;kernel base address
   277                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   278                                  ;-----------------------------------------------------------------------------------------------------------------------
   279                                  ;	Keyboard Flags
   280                                  ;-----------------------------------------------------------------------------------------------------------------------
   281                                  EKEYCTRLLEFT		equ	00000001b					;left control
   282                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   283                                  EKEYALTLEFT		equ	00000100b					;left alt
   284                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   285                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   286                                  EKEYSHIFT		equ	00010010b					;left or right shift
   287                                  EKEYALTRIGHT		equ	00100000b					;right alt
   288                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   289                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   290                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   291                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;	Console Constants							ECON...
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ECONCOLS		equ	80						;columns per row
   296                                  ECONROWS		equ	24						;console rows
   297                                  ECONOIAROW		equ	24						;operator information area row
   298                                  ECONCOLBYTES		equ	2						;bytes per column
   299                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   300                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   301                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   302                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;	Kernel Message Identifiers						EMSG...
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   307                                  EMSGKEYUP		equ	41010000h					;message: key-up
   308                                  EMSGKEYCHAR		equ	41020000h					;message: character
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  ;
   311                                  ;	Structures
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;-----------------------------------------------------------------------------------------------------------------------
   315                                  ;
   316                                  ;	OSDATA
   317                                  ;
   318                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   319                                  ;	used by the BIOS.
   320                                  ;
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  struc			OSDATA
   323 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   324 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   325 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   326 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   327 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   328 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   329 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   330 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   331 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   332 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   333 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   334 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   335 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   336 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   337 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   338 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   339 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   340 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   341 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   342 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   343 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   344 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   345 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   346 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   347 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   348 00000449 <res 00000001>          			resb	1						;449 current video mode
   349 0000044A <res 00000002>          			resw	1						;44A screen columns
   350 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   351 0000044E <res 00000002>          			resw	1						;44E current video page offset
   352 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   353 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   354 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   355 00000462 <res 00000001>          			resb	1						;462 active display page number
   356 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   357 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   358 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   359 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   360 00000469 <res 00000003>          			resb	3						;469 vague
   361 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   362 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   363 00000471 <res 00000001>          			resb	1						;471 bios break flag
   364 00000472 <res 00000002>          			resw	1						;472 soft reset
   365 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   366 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   367 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   368 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   369 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   370 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   371 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   372 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   373 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   374 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   375 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   376 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   377 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   378 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   379 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   380 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   381 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   382 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   383 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   384 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   385 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   386 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   387 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   388 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   389 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   390 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   391 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   392 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   393 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   394 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   395 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   396 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   397 000004AC <res 00000008>          			resb	8						;4AC reserved
   398 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   399 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   400 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   401 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   402 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   403 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   404 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   405 000004CD <res 00000001>          			resb	1						;4CD unknown
   406 000004CE <res 00000002>          			resw	1						;4CE day counter
   407 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   408 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   409 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   410 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   411 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   412 00000505 <res 0000000A>          			resb	10						;505 POST work area
   413 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   414 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   415 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   416 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   417 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   418 0000051E <res 00000002>          			resw	1						;51E unknown
   419 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   420 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   421 00000530 <res 00000004>          			resb	4						;530 MODE command
   422 00000534 <res 000001CC>          			resb	460						;534 unused
   423 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;
   426                                  ;	OS Variables								@disk: N/A	@mem: 000800
   427                                  ;
   428                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   429                                  ;	accessible by any kernel task or interrupt.
   430                                  ;
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ECONDATA		equ	($)
   433 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   434 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   435 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   436 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   437 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   438 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   439 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   440 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   441 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   442 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   443 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   444 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   445 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   446                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   447                                  endstruc
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;
   450                                  ;	MQUEUE
   451                                  ;
   452                                  ;	The MQUEUE structure maps memory used for a message queue.
   453                                  ;
   454                                  ;-----------------------------------------------------------------------------------------------------------------------
   455                                  struc			MQUEUE
   456 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   457 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   458 00000008 <res 000003F8>          MQData			resd	254						;message queue
   459                                  endstruc
   460                                  ;-----------------------------------------------------------------------------------------------------------------------
   461                                  ;
   462                                  ;	Macros
   463                                  ;
   464                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   465                                  ;
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  %macro			mint	1
   468                                  _%1			equ	($-$$) / EKRNDESLEN
   469                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   470                                  %endmacro
   471                                  %macro			mtrap	1
   472                                  _%1			equ	($-$$) / EKRNDESLEN
   473                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   474                                  %endmacro
   475                                  %macro			menter	1
   476                                  ?%1			equ	($-$$)
   477                                  %endmacro
   478                                  %macro			tsvce	1
   479                                  e%1			equ	($-tsvc)/4
   480                                  			dd	%1
   481                                  %endmacro
   482                                  %ifdef BUILDBOOT
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   486                                  ;
   487                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   488                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   489                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   490                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   491                                  ;
   492                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   493                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   494                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   495                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   496                                  ;	immediately followed by a disk parameter table.
   497                                  ;
   498                                  ;-----------------------------------------------------------------------------------------------------------------------
   499                                  			cpu	8086						;assume minimal CPU
   500                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   501                                  			bits	16						;16-bit code at power-up
   502                                  %ifdef BUILDPREP
   503                                  Boot			jmp	word Prep					;jump to preparation code
   504                                  %else
   505 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   506                                  %endif
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  ;
   509                                  ;	Disk Parameter Table
   510                                  ;
   511                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   512                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   513                                  ;
   514                                  ;-----------------------------------------------------------------------------------------------------------------------
   515 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   516 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   517 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   518 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   519 00000010 02                      cbFatCount		db	2						;file allocation table copies
   520 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   521 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   522 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   523 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   524                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   525 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   526 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   527 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   528                                  ;
   529                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   530                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   531                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   532                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   533                                  ;	given several possible starting values for CS:IP.
   534                                  ;
   535                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   536 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   537                                  .@20			equ	$-$$						;.@20 = 021h
   538 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   539 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   540 00000025 B104                    			mov	cl,4						;shift count
   541 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   542 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   543 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   544                                  ;
   545                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   546                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   547                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   548                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   549                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   550                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   551                                  ;
   552 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   553 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   554 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   555 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   556 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   557                                  ;
   558                                  ;	Our boot addressability is now set up according to the following diagram.
   559                                  ;
   560                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   561                                  ;				|  Unused (DOS Program Segment Prefix)		|
   562                                  ;			007c00	+-----------------------------------------------+ DS:0100
   563                                  ;				|  Boot Sector Code (vstart=100h)		|
   564                                  ;				|						|
   565                                  ;			007e00	+-----------------------------------------------+ DS:0300
   566                                  ;				|  Boot Stack					|
   567                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   568                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   569                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   570                                  ;				|						|
   571                                  ;			009100	+-----------------------------------------------+ DS:1600
   572                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   573                                  ;				|						|
   574                                  ;			009300	+-----------------------------------------------+ DS:1800
   575                                  ;
   576                                  ;	On entry, DL indicates the drive being booted from.
   577                                  ;
   578 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   579                                  ;
   580                                  ;	Compute directory i/o buffer address.
   581                                  ;
   582 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   583 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   584 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   585 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   586                                  ;
   587                                  ;	Compute segment where os.com will be loaded.
   588                                  ;
   589 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   590 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   591 0000004E 83E810                  			sub	ax,16						;AX = 0900
   592 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   593                                  ;
   594                                  ;	Write a message to the console so we know we have our addressability established.
   595                                  ;
   596 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   597 00000057 E84B01                  			call	BootPrint					;display loader message
   598                                  ;
   599                                  ;	Initialize the number of directory sectors to search.
   600                                  ;
   601 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   602 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   603                                  ;
   604                                  ;	Compute number of directory sectors and initialize overhead count.
   605                                  ;
   606 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   607 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   608 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   609 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   610                                  ;
   611                                  ;	Compute directory entries per sector.
   612                                  ;
   613 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   614 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   615 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   616                                  ;
   617                                  ;	Compute first logical directory sector and update overhead count.
   618                                  ;
   619 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   620 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   621 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   622 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   623 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   624 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   625                                  ;
   626                                  ;	Read directory sector.
   627                                  ;
   628 00000089 B001                    .30			mov	al,1						;sector count
   629 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   630 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   631 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   632                                  ;
   633                                  ;	Setup variables to search this directory sector.
   634                                  ;
   635 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   636 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   637 0000009C 7603                    			jna	.40						;no, continue
   638 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   639 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   640 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   641 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   642                                  ;
   643                                  ;	Loop through directory sectors searching for kernel program.
   644                                  ;
   645 000000AC 56                      .50			push	si						;save kernel name address
   646 000000AD 57                      			push	di						;save dir i/o buffer address
   647 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   648 000000B1 FC                      			cld							;forward strings
   649 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   650 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   651 000000B5 5E                      			pop	si						;restore kernel name address
   652 000000B6 7418                    			je	.60						;exit loop if found
   653 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   654 000000BC 48                      			dec	ax						;decrement remaining entries
   655 000000BD 75ED                    			jnz	.50						;next entry
   656                                  ;
   657                                  ;	Repeat search if we are not at the end of the directory.
   658                                  ;
   659 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   660 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   661 000000C8 75BF                    			jne	.30						;no, get next sector
   662 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   663 000000CD E9C000                  			jmp	BootExit					;display message and exit
   664                                  ;
   665                                  ;	If we find the kernel program in the directory, read the FAT.
   666                                  ;
   667 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   668 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   669 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   670 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   671 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0500
   672 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   673                                  ;
   674                                  ;	Get the starting cluster of the kernel program and target address.
   675                                  ;
   676 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   677 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   678                                  ;
   679                                  ;	Read each program cluster into RAM.
   680                                  ;
   681 000000E9 50                      .70			push	ax						;save cluster nbr
   682 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   683 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   684 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   685 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   686 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   687 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   688 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   689 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   690                                  ;
   691                                  ;	Update buffer pointer for next cluster.
   692                                  ;
   693 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   694 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   695 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   696 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   697 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   698                                  ;
   699                                  ;	Compute next cluster number.
   700                                  ;
   701 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   702 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   703 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   704 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   705 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   706 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   707 0000011B 83E701                  			and	di,1						;get low bit
   708 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   709 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   710 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   711                                  ;
   712                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   713                                  ;
   714 00000126 F6C101                  			test	cl,1						;is cluster odd?
   715 00000129 7404                    			jz	.80						;no, skip ahead
   716 0000012B B104                    			mov	cl,4						;shift count
   717 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   718 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   719 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   720 00000135 75B2                    			jne	.70						;no, continue
   721                                  ;
   722                                  ;	Transfer control to the operating system program.
   723                                  ;
   724 00000137 EA                      			db	0EAh						;jmp seg:offset
   725 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   726 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   727                                  ;
   728                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   729                                  ;
   730 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   731 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   732 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   733 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   734 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   735 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   736 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   737 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   738 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   739 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   740                                  ;
   741                                  ;	Try maxtries times to read sector.
   742                                  ;
   743 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   744 0000015B 53                      .10			push	bx						;save buffer address
   745 0000015C 51                      			push	cx						;save retry count
   746 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   747 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   748 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   749 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   750 0000016A 59                      			pop	cx						;restore retry count
   751 0000016B 5B                      			pop	bx						;restore buffer address
   752 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   753 0000016E E2EB                    			loop	.10						;retry
   754                                  ;
   755                                  ;	Handle disk error: convert to ASCII and store in error string.
   756                                  ;
   757 00000170 88E0                    			mov	al,ah						;AL = bios error code
   758 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   759 00000174 B210                    			mov	dl,16						;divisor for base 16
   760 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   761 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   762 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   763 0000017E 7203                    			jb	.20						;continue if numeral
   764 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   765 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   766 00000185 7203                    			jb	.30						;continue if numeral
   767 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   768 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   769 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   770 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   771 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   772 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   773 00000197 7504                    			jnz	.20						;continue if key pressed
   774 00000199 FB                      			sti							;enable interrupts
   775 0000019A F4                      			hlt							;wait for interrupt
   776 0000019B EBF6                    			jmp	.10						;repeat
   777 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   778 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   779 000001A1 FB                      .30			sti							;enable interrupts
   780 000001A2 F4                      			hlt							;stop until reset, int, nmi
   781 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   782                                  ;
   783                                  ;	Display text message.
   784                                  ;
   785 000001A5 FC                      BootPrint		cld							;forward strings
   786 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   787 000001A7 84C0                    			test	al,al						;end of string?
   788 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   789 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   790 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   791 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   792 000001B1 C3                      BootReturn		ret							;return to caller
   793                                  ;-----------------------------------------------------------------------------------------------------------------------
   794                                  ;
   795                                  ;	Constants
   796                                  ;
   797                                  ;-----------------------------------------------------------------------------------------------------------------------
   798                                  			align	2
   799 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   800 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   800 000001BD 4F4D               
   801 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   801 000001C8 2E2E0D0A00         
   802 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   802 000001D6 7220               
   803 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   804 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   804 000001E4 7373696E6700       
   805                                  ;-----------------------------------------------------------------------------------------------------------------------
   806                                  ;
   807                                  ;	Work Areas
   808                                  ;
   809                                  ;-----------------------------------------------------------------------------------------------------------------------
   810                                  			align	2
   811 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   812 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   813 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   814 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   815 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   816                                  wwReadCountCommand	equ	$						;read count and command
   817 000001F4 00                      wbReadCount		db	0						;sectors to read
   818 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   819                                  wwDriveHead		equ	$						;drive, head (word)
   820 000001F6 00                      wbDrive			db	0						;drive
   821 000001F7 00                      wbHead			db	0						;head
   822                                  wwSectorTrack		equ	$						;sector, track (word)
   823 000001F8 00                      			db	0						;sector
   824 000001F9 00                      wbTrack			db	0						;track
   825 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   826 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   827                                  %endif
   828                                  %ifdef BUILDPREP
   829                                  ;-----------------------------------------------------------------------------------------------------------------------
   830                                  ;
   831                                  ;	Diskette Preparation Code
   832                                  ;
   833                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   834                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   835                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   836                                  ;
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838                                  ;
   839                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   840                                  ;
   841                                  Prep			mov	si,czPrepMsg10					;starting message address
   842                                  			call	BootPrint					;display message
   843                                  ;
   844                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   845                                  ;
   846                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   847                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   848                                  			jnz	.12						;continue if key pressed
   849                                  			sti							;enable interrupts
   850                                  			hlt							;wait for interrupt
   851                                  			jmp	.10						;repeat
   852                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   853                                  			je	.15						;yes, branch
   854                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   855                                  			jne	.10						;no, repeat
   856                                  			jmp	.90						;yes, exit program
   857                                  ;
   858                                  ;	Display writing-sector message and patch the JMP instruction.
   859                                  ;
   860                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   861                                  			call	BootPrint					;display message
   862                                  			mov	bx,Boot+1					;address of JMP instruction operand
   863                                  			mov	ax,01Bh						;address past disk parameter table
   864                                  			mov	[bx],ax						;update the JMP instruction
   865                                  ;
   866                                  ;	Try to read the boot sector.
   867                                  ;
   868                                  			mov	cx,EMAXTRIES					;try up to five times
   869                                  .20			push	cx						;save remaining tries
   870                                  			mov	bx,wcPrepInBuf					;input buffer address
   871                                  			mov	dx,0						;head zero, drive zero
   872                                  			mov	cx,1						;track zero, sector one
   873                                  			mov	ax,0201h					;read one sector
   874                                  			int	EBIOSINTDISKETTE				;attempt the read
   875                                  			pop	cx						;restore remaining retries
   876                                  			jnc	.30						;skip ahead if successful
   877                                  			loop	.20						;try again
   878                                  			mov	si,czPrepMsg20					;read-error message address
   879                                  			jmp	.50						;branch to error routine
   880                                  ;
   881                                  ;	Copy diskette parms from input buffer to output buffer.
   882                                  ;
   883                                  .30			mov	si,wcPrepInBuf					;input buffer address
   884                                  			add	si,11						;skip over JMP and system ID
   885                                  			mov	di,Boot						;output buffer address
   886                                  			add	di,11						;skip over JMP and system ID
   887                                  			mov	cx,19						;length of diskette parameters
   888                                  			cld							;forward string copies
   889                                  			rep	movsb						;copy diskette parameters
   890                                  ;
   891                                  ;	Try to write boot sector to diskette.
   892                                  ;
   893                                  			mov	cx,EMAXTRIES					;try up to five times
   894                                  .40			push	cx						;save remaining tries
   895                                  			mov	bx,Boot						;output buffer address
   896                                  			mov	dx,0						;head zero, drive zero
   897                                  			mov	cx,1						;track zero, sector one
   898                                  			mov	ax,0301h					;write one sector
   899                                  			int	EBIOSINTDISKETTE				;attempt the write
   900                                  			pop	cx						;restore remaining retries
   901                                  			jnc	.80						;skip ahead if successful
   902                                  			loop	.40						;try again
   903                                  			mov	si,czPrepMsg30					;write-error message address
   904                                  ;
   905                                  ;	Convert the error code to ASCII and display the error message.
   906                                  ;
   907                                  .50			push	ax						;save error code
   908                                  			mov	al,ah						;copy error code
   909                                  			mov	ah,0						;AX = error code
   910                                  			mov	dl,10h						;hexadecimal divisor
   911                                  			idiv	dl						;AL = hi-order, AH = lo-order
   912                                  			or	ax,3030h					;add ASCII zone digits
   913                                  			cmp	ah,3Ah						;AH ASCII numeral?
   914                                  			jb	.60						;yes, continue
   915                                  			add	ah,7						;no, make ASCII 'A'-'F'
   916                                  .60			cmp	al,3Ah						;al ASCII numeral?
   917                                  			jb	.70						;yes, continue
   918                                  			add	al,7						;no, make ASCII
   919                                  .70			mov	[si+17],ax					;put ASCII error code in message
   920                                  			call	BootPrint					;write error message
   921                                  			pop	ax						;restore error code
   922                                  ;
   923                                  ;	Display the completion message.
   924                                  ;
   925                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   926                                  			mov	al,ah						;BIOS return code
   927                                  			cmp	al,0						;success?
   928                                  			je	.85						;yes, continue
   929                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   930                                  			cmp	al,1						;disk parameter error?
   931                                  			je	.85						;yes, continue
   932                                  			mov	si,czPrepMsgErr2				;address mark not found message
   933                                  			cmp	al,2						;address mark not found?
   934                                  			je	.85						;yes, continue
   935                                  			mov	si,czPrepMsgErr3				;protected disk message
   936                                  			cmp	al,3						;protected disk?
   937                                  			je	.85						;yes, continue
   938                                  			mov	si,czPrepMsgErr6				;diskette removed message
   939                                  			cmp	al,6						;diskette removed?
   940                                  			je	.85						;yes, continue
   941                                  			mov	si,czPrepMsgErr80				;drive timed out message
   942                                  			cmp	al,80H						;drive timed out?
   943                                  			je	.85						;yes, continue
   944                                  			mov	si,czPrepMsgErrXX				;unknown error message
   945                                  .85			call	BootPrint					;display result message
   946                                  .90			mov	ax,4C00H					;terminate with zero result code
   947                                  			int	21h						;terminate DOS program
   948                                  			ret							;return (should not execute)
   949                                  ;-----------------------------------------------------------------------------------------------------------------------
   950                                  ;
   951                                  ;	Diskette Preparation Messages
   952                                  ;
   953                                  ;-----------------------------------------------------------------------------------------------------------------------
   954                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   955                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   956                                  			db	13,10
   957                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   958                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   959                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   960                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   961                                  			db	13,10,0
   962                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   963                                  			db	13,10,0
   964                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   965                                  			db	13,10,0
   966                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   967                                  			db	13,10,0
   968                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   969                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   970                                  			db	13,10,0
   971                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   972                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   973                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   974                                  			db	13,10,"and retry."
   975                                  			db	13,10,0
   976                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   977                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   978                                  			db	13,10,"using another diskette."
   979                                  			db	13,10,0
   980                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   981                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   982                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   983                                  			db	13,10,0
   984                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   985                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   986                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   987                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   988                                  			db	13,10,"is properly inserted in the diskette drive."
   989                                  			db	13,10,0
   990                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   991                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   992                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   993                                  			db	13,10,0
   994                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   995                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   996                                  			db	13,10,"your computer's technical reference for a description of this error code."
   997                                  			db	13,10,0
   998                                  wcPrepInBuf		equ	$
   999                                  %endif
  1000                                  %ifdef BUILDDISK
  1001                                  ;-----------------------------------------------------------------------------------------------------------------------
  1002                                  ;
  1003                                  ;	File Allocation Tables
  1004                                  ;
  1005                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1006                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1007                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1008                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1009                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1010                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1011                                  ;	the last cluster in the chain.
  1012                                  ;
  1013                                  ;	Every three bytes encode two FAT entries as follows:
  1014                                  ;
  1015                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1016                                  ;
  1017                                  ;-----------------------------------------------------------------------------------------------------------------------
  1018                                  ;-----------------------------------------------------------------------------------------------------------------------
  1019                                  ;
  1020                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1021                                  ;
  1022                                  ;-----------------------------------------------------------------------------------------------------------------------
  1023                                  section			fat1							;first copy of FAT
  1024 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1025 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1026 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1027 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1028 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1029 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1030 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1031 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1032 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1033 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1034 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1035 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1036                                  ;-----------------------------------------------------------------------------------------------------------------------
  1037                                  ;
  1038                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1039                                  ;
  1040                                  ;-----------------------------------------------------------------------------------------------------------------------
  1041                                  section			fat2							;second copy of FAT
  1042 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1043 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1044 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1045 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1046 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1047 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1048 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1049 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1050 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1051 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1052 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1053 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1054                                  ;-----------------------------------------------------------------------------------------------------------------------
  1055                                  ;
  1056                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1057                                  ;
  1058                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1059                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1060                                  ;	copy.
  1061                                  ;
  1062                                  ;-----------------------------------------------------------------------------------------------------------------------
  1063                                  section			dir							;diskette directory
  1064 00000000 4F5320202020202043-     			db	"OS      COM"					;file name (must contain spaces)
  1064 00000009 4F4D               
  1065 0000000B 20                      			db	20h						;attribute (archive bit set)
  1066 0000000C 00<rept>                			times	10 db 0;					;unused
  1067 00000016 0000                    			dw	0h						;time
  1068 00000018 41                      			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1069 00000019 49                      			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1070 0000001A 0200                    			dw	2						;first cluster
  1071 0000001C 00520000                			dd	5200h						;file size
  1072 00000020 00<rept>                			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1073                                  %endif
  1074                                  %ifdef BUILDCOM
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076                                  ;
  1077                                  ;	OS.COM
  1078                                  ;
  1079                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1080                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1081                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1082                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1083                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1084                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1085                                  ;
  1086                                  ;	Our loader addressability is set up according to the following diagram.
  1087                                  ;
  1088                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1089                                  ;				|  Boot Sector & Loader Stack Area		|
  1090                                  ;				|						|
  1091                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1092                                  ;
  1093                                  ;
  1094                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1095                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1096                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1097                                  ;				|  Loader Code					|
  1098                                  ;				|						|
  1099                                  ;			009300	+-----------------------------------------------+ CS:0200
  1100                                  ;
  1101                                  ;-----------------------------------------------------------------------------------------------------------------------
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103                                  ;
  1104                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1105                                  ;
  1106                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1107                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1108                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1109                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1110                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1111                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1112                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1113                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1114                                  ;	registers.
  1115                                  ;
  1116                                  ;-----------------------------------------------------------------------------------------------------------------------
  1117                                  			cpu	8086						;assume minimal CPU
  1118                                  section			loader	vstart=100h					;use .COM compatible addressing
  1119                                  			bits	16						;this is 16-bit code
  1120 00000000 0E                      Loader			push	cs						;use the code segment
  1121 00000001 1F                      			pop	ds						;...as our data segment
  1122 00000002 0E                      			push	cs						;use the code segment
  1123 00000003 07                      			pop	es						;...as our extra segment
  1124                                  ;
  1125                                  ;	Write a message to the console so we know we have our addressability established.
  1126                                  ;
  1127 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1128 00000007 E8A600                  			call	PutTTYString					;display loader message
  1129                                  ;
  1130                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1131                                  ;
  1132 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1133 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1134 00000010 3C03                    			cmp	al,3						;80386+?
  1135 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1136                                  			cpu	386						;allow 80386 instructions
  1137 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1138 00000017 E89600                  			call	PutTTYString					;display message
  1139                                  ;
  1140                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1141                                  ;
  1142 0000001A BE0003                  			mov	si,300h						;GDT offset
  1143 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1144 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1145 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1146 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1147 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1148 00000029 894432                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1149 0000002C 884C34                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1150 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1151 00000032 E87B00                  			call	PutTTYString					;display message
  1152                                  ;
  1153                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1154                                  ;
  1155 00000035 680001                  			push	EKRNSEG						;use kernel segment ...
  1156 00000038 07                      			pop	es						;... as target segment
  1157 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1158 0000003B BE0003                  			mov	si,300h						;DS:SI = source address
  1159 0000003E B90050                  			mov	cx,5000h					;CX = kernel size
  1160 00000041 FC                      			cld							;forward strings
  1161 00000042 F3A4                    			rep	movsb						;copy kernel image
  1162 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1163 00000047 E86600                  			call	PutTTYString					;display message
  1164                                  ;
  1165                                  ;	Switch to protected mode.
  1166                                  ;
  1167 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1168 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1169 0000004E BC0010                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1170 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1171 00000053 BB2820                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1172 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1173 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1174 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1175 0000005E 4A                      			dec	dx						;restore outer loop count
  1176 0000005F 75F8                    			jnz	.10						;continue outer loop
  1177 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1178                                  ;
  1179                                  ;	Enable hardware and maskable interrupts
  1180                                  ;
  1181 00000063 30C0                    			xor	al,al						;enable all registers code
  1182 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1183 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1184 00000069 FB                      			sti							;enable maskable interrupts
  1185                                  ;
  1186                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1187                                  ;
  1188 0000006A 2E0F001E[BE00]          			ltr	[cs:cwLoaderTSS]				;load task register
  1189 00000070 2E0F0016[C000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1190 00000076 EA00005800              			jmp	0058h:0						;jump to task state segment selector
  1191                                  ;-----------------------------------------------------------------------------------------------------------------------
  1192                                  ;
  1193                                  ;	Routine:	LoaderExit
  1194                                  ;
  1195                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1196                                  ;
  1197                                  ;	In:		DS:SI	string address
  1198                                  ;
  1199                                  ;-----------------------------------------------------------------------------------------------------------------------
  1200 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1201                                  ;
  1202                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1203                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1204                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1205                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1206                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1207                                  ;
  1208 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1209 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1210 00000082 7504                    			jnz	.40						;exit if key pressed
  1211 00000084 FB                      			sti							;enable maskable interrupts
  1212 00000085 F4                      			hlt							;wait for interrupt
  1213 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1214                                  ;
  1215                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1216                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1217                                  ;	HLT until the system resets.
  1218                                  ;
  1219 00000088 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1220 0000008A E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1221 0000008C FB                      .50			sti							;enable maskable interrupts
  1222 0000008D F4                      			hlt							;stop until reset, int, nmi
  1223 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1224                                  ;-----------------------------------------------------------------------------------------------------------------------
  1225                                  ;
  1226                                  ;	Routine:	GetCPUType
  1227                                  ;
  1228                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1229                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1230                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1231                                  ;
  1232                                  ;	Output:		AX	0 = 808x, v20, etc.
  1233                                  ;				1 = 80186
  1234                                  ;				2 = 80286
  1235                                  ;				3 = 80386
  1236                                  ;
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1239 00000092 B120                    			mov	cl,32						;shift count
  1240 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1241 00000096 08C0                    			or	al,al						;did the shift happen?
  1242 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1243                                  			cpu	186
  1244 0000009A 54                      			push	sp						;save stack pointer
  1245 0000009B 59                      			pop	cx						;...into cx
  1246 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1247 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1248                                  			cpu	286
  1249 000000A0 40                      			inc	ax						;AX = 2
  1250 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1251 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1252 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1253 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1254 000000AE 40                      			inc	ax						;AX = 3
  1255 000000AF C3                      .10			ret							;return to caller
  1256                                  ;-----------------------------------------------------------------------------------------------------------------------
  1257                                  ;
  1258                                  ;	Routine:	PutTTYString
  1259                                  ;
  1260                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1261                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1262                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1263                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1264                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1265                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1266                                  ;			registers and flags unless used to indicate return status.
  1267                                  ;
  1268                                  ;	In:		DS:SI	address of string
  1269                                  ;
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271 000000B0 FC                      PutTTYString		cld							;forward strings
  1272 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1273 000000B2 84C0                    			test	al,al						;end of string?
  1274 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1275 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1276 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1277 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1278 000000BC C3                      .10			ret							;return to caller
  1279                                  ;-----------------------------------------------------------------------------------------------------------------------
  1280                                  ;
  1281                                  ;	Loader Data
  1282                                  ;
  1283                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1284                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1285                                  ;
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287 000000BD 90                      			align	2
  1288 000000BE 6800                    cwLoaderTSS		dw	0068h						;TSS selector
  1289 000000C0 6000                    cwLoaderLDT		dw	0060h						;LDT selector
  1290 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1291 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1292 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 "
  1292 000000D1 74696E672073797374-
  1292 000000DA 656D20726571756972-
  1292 000000E3 657320616E20693338-
  1292 000000EC 3620               
  1293 000000EE 6F72206C6174657220-     			db	"or later processor.",13,10,
  1293 000000F7 70726F636573736F72-
  1293 00000100 2E0D0A             
  1294 00000103 506C65617365207072-     			db	"Please press any key to restart the "
  1294 0000010C 65737320616E79206B-
  1294 00000115 657920746F20726573-
  1294 0000011E 746172742074686520 
  1295 00000127 636F6D70757465722E-     			db	"computer.",13,10,0
  1295 00000130 0D0A00             
  1296 00000133 435055206F6B0D0A00      czCPUOKMsg		db	"CPU ok",13,10,0
  1297 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1297 00000145 7265640D0A00       
  1298 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1298 00000154 616465640D0A00     
  1299 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1299 00000164 2E2E2E0D0A00       
  1300 0000016A 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1301 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1302                                  ;-----------------------------------------------------------------------------------------------------------------------
  1303                                  ;
  1304                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1305                                  ;
  1306                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1307                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1308                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1309                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1310                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1311                                  ;
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  ;-----------------------------------------------------------------------------------------------------------------------
  1314                                  ;
  1315                                  ;	Tables
  1316                                  ;
  1317                                  ;-----------------------------------------------------------------------------------------------------------------------
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1321                                  ;
  1322                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1323                                  ;	first descriptor must be all nulls.
  1324                                  ;
  1325                                  ;	6   5         4         3         2         1         0
  1326                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1327                                  ;	----------------------------------------------------------------
  1328                                  ;	h......hffffmmmma......ab......................bn..............n
  1329                                  ;	00000000			all areas have base addresses below 2^24
  1330                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1331                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1332                                  ;	            1001		present, ring-0, selector
  1333                                  ;
  1334                                  ;	h...h	hi-order base address (bits 24-31)
  1335                                  ;	ffff	flags
  1336                                  ;	mmmm	hi-order limit (bits 16-19)
  1337                                  ;	a...a	access
  1338                                  ;	b...b	lo-order base address (bits 0-23)
  1339                                  ;	n...n	lo-order limit (bits 0-15)
  1340                                  ;
  1341                                  ;-----------------------------------------------------------------------------------------------------------------------
  1342                                  section			gdt							;global descriptor table
  1343 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1344 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1345 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1346 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1347 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1348 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1349 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1350 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1351 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1352 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1353 00000050 7F00004700824000        			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1354 00000058 7F00804700894000        			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1355 00000060 7F00000F00824000        			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1356 00000068 7F00800F00894000        			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1357 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;
  1360                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1361                                  ;
  1362                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1363                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1364                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1365                                  ;
  1366                                  ;	6   5         4         3         2         1         0
  1367                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1368                                  ;	----------------------------------------------------------------
  1369                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1370                                  ;
  1371                                  ;	h...h	high-order offset (bits 16-31)
  1372                                  ;	P	present (0=unused interrupt)
  1373                                  ;	zz	descriptor privilege level
  1374                                  ;	S	storage segment (must be zero for IDT)
  1375                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1376                                  ;	S...S	handling code selector in GDT
  1377                                  ;	l...l	lo-order offset (bits 0-15)
  1378                                  ;
  1379                                  ;-----------------------------------------------------------------------------------------------------------------------
  1380                                  section			idt							;interrupt descriptor table
  1381                                  			mint	dividebyzero					;00 divide by zero
  1381                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1381 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1382                                  			mint	singlestep					;01 single step
  1382                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1382 00000008 04004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1383                                  			mint	nmi						;02 non-maskable
  1383                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1383 00000010 08004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1384                                  			mint	break						;03 break
  1384                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1384 00000018 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1385                                  			mint	into						;04 into
  1385                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1385 00000020 10004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1386                                  			mint	bounds						;05 bounds
  1386                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1386 00000028 14004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1387                                  			mint	badopcode					;06 bad op code
  1387                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1387 00000030 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1388                                  			mint	nocoproc					;07 no coprocessor
  1388                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1388 00000038 1C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1389                                  			mint	doublefault					;08 double-fault
  1389                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1389 00000040 20004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1390                                  			mint	operand						;09 operand
  1390                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1390 00000048 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1391                                  			mint	badtss						;0A bad TSS
  1391                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1391 00000050 28004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1392                                  			mint	notpresent					;0B not-present
  1392                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1392 00000058 2C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1393                                  			mint	stacklimit					;0C stack limit
  1393                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1393 00000060 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1394                                  			mint	protection					;0D general protection fault
  1394                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1394 00000068 34004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1395                                  			mint	int14						;0E (reserved)
  1395                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1395 00000070 38004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1396                                  			mint	int15						;0F (reserved)
  1396                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1396 00000078 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1397                                  			mint	coproccalc					;10 (reserved)
  1397                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1397 00000080 40004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1398                                  			mint	int17						;11 (reserved)
  1398                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1398 00000088 44004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1399                                  			mint	int18						;12 (reserved)
  1399                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1399 00000090 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1400                                  			mint	int19						;13 (reserved)
  1400                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1400 00000098 4C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1401                                  			mint	int20						;14 (reserved)
  1401                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1401 000000A0 50004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1402                                  			mint	int21						;15 (reserved)
  1402                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1402 000000A8 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1403                                  			mint	int22						;16 (reserved)
  1403                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1403 000000B0 58004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1404                                  			mint	int23						;17 (reserved)
  1404                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1404 000000B8 5C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1405                                  			mint	int24						;18 (reserved)
  1405                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1405 000000C0 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1406                                  			mint	int25						;19 (reserved)
  1406                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1406 000000C8 64004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1407                                  			mint	int26						;1A (reserved)
  1407                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1407 000000D0 68004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1408                                  			mint	int27						;1B (reserved)
  1408                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1408 000000D8 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1409                                  			mint	int28						;1C (reserved)
  1409                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1409 000000E0 70004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1410                                  			mint	int29						;1D (reserved)
  1410                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1410 000000E8 74004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1411                                  			mint	int30						;1E (reserved)
  1411                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1411 000000F0 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1412                                  			mint	int31						;1F (reserved)
  1412                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1412 000000F8 7C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1413                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1413                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1413 00000100 80004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1414                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1414                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1414 00000108 D0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1415                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1415                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1415 00000110 2B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1416                                  			mtrap	com2						;23 IRQ3 com2
  1416                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1416 00000118 2E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1417                                  			mtrap	com1						;24 IRQ4 com1
  1417                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1417 00000120 31044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1418                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1418                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1418 00000128 34044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1419                                  			mtrap	diskette					;26 IRQ6 diskette
  1419                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1419 00000130 37044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1420                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1420                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1420 00000138 50044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1421                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1421                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1421 00000140 53044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1422                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1422                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1422 00000148 56044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1423                                  			mtrap	irq10						;2A IRQA (reserved)
  1423                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1423 00000150 59044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1424                                  			mtrap	irq11						;2B IRQB (reserved)
  1424                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1424 00000158 5C044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1425                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1425                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1425 00000160 5F044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1426                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1426                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1426 00000168 62044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1427                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1427                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1427 00000170 65044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1428                                  			mtrap	irq15						;2F IRQF (reserved)
  1428                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1428 00000178 68044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1429                                  			mtrap	svc						;30 OS services
  1429                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1429 00000180 77044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1430 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1431                                  ;-----------------------------------------------------------------------------------------------------------------------
  1432                                  ;
  1433                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1434                                  ;
  1435                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1436                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1437                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1438                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1439                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1440                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1441                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1442                                  ;
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444                                  section			kernel	vstart=0h					;data offsets relative to 0
  1445                                  			cpu	386						;allow 80386 instructions
  1446                                  			bits	32						;this is 32-bit code
  1447                                  ;-----------------------------------------------------------------------------------------------------------------------
  1448                                  ;
  1449                                  ;	CPU Interrupt Handlers
  1450                                  ;
  1451                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1452                                  ;
  1453                                  ;-----------------------------------------------------------------------------------------------------------------------
  1454                                  			menter	dividebyzero					;divide by zero
  1454                              <1> ?%1 equ ($-$$)
  1455 00000000 6A00                    			push	0						;
  1456 00000002 EB7A                    			jmp	intcpu						;
  1457                                  
  1458                                  			menter	singlestep					;single step
  1458                              <1> ?%1 equ ($-$$)
  1459 00000004 6A01                    			push	1						;
  1460 00000006 EB76                    			jmp	intcpu						;
  1461                                  
  1462                                  			menter	nmi						;non-maskable
  1462                              <1> ?%1 equ ($-$$)
  1463 00000008 6A02                    			push	2						;
  1464 0000000A EB72                    			jmp	intcpu						;
  1465                                  
  1466                                  			menter	break						;break
  1466                              <1> ?%1 equ ($-$$)
  1467 0000000C 6A03                    			push	3						;
  1468 0000000E EB6E                    			jmp	intcpu						;
  1469                                  
  1470                                  			menter	into						;into
  1470                              <1> ?%1 equ ($-$$)
  1471 00000010 6A04                    			push	4						;
  1472 00000012 EB6A                    			jmp	intcpu						;
  1473                                  
  1474                                  			menter	bounds						;bounds
  1474                              <1> ?%1 equ ($-$$)
  1475 00000014 6A05                    			push	5						;
  1476 00000016 EB66                    			jmp	intcpu						;
  1477                                  
  1478                                  			menter	badopcode					;bad opcode interrupt
  1478                              <1> ?%1 equ ($-$$)
  1479 00000018 6A06                    			push	6						;
  1480 0000001A EB62                    			jmp	intcpu						;
  1481                                  
  1482                                  			menter	nocoproc					;no coprocessor interrupt
  1482                              <1> ?%1 equ ($-$$)
  1483 0000001C 6A07                    			push	7						;
  1484 0000001E EB5E                    			jmp	intcpu						;
  1485                                  
  1486                                  			menter	doublefault					;doublefault interrupt
  1486                              <1> ?%1 equ ($-$$)
  1487 00000020 6A08                    			push	8						;
  1488 00000022 EB5A                    			jmp	intcpu						;
  1489                                  
  1490                                  			menter	operand						;operand interrupt
  1490                              <1> ?%1 equ ($-$$)
  1491 00000024 6A09                    			push	9						;
  1492 00000026 EB56                    			jmp	intcpu						;
  1493                                  
  1494                                  			menter	badtss						;bad tss interrupt
  1494                              <1> ?%1 equ ($-$$)
  1495 00000028 6A0A                    			push	10						;
  1496 0000002A EB52                    			jmp	intcpu						;
  1497                                  
  1498                                  			menter	notpresent					;not present interrupt
  1498                              <1> ?%1 equ ($-$$)
  1499 0000002C 6A0B                    			push	11						;
  1500 0000002E EB4E                    			jmp	intcpu						;
  1501                                  
  1502                                  			menter	stacklimit					;stack limit interrupt
  1502                              <1> ?%1 equ ($-$$)
  1503 00000030 6A0C                    			push	12						;
  1504 00000032 EB4A                    			jmp	intcpu						;
  1505                                  
  1506                                  			menter	protection					;protection fault interrupt
  1506                              <1> ?%1 equ ($-$$)
  1507 00000034 6A0D                    			push	13						;
  1508 00000036 EB46                    			jmp	intcpu						;
  1509                                  
  1510                                  			menter	int14						;(reserved)
  1510                              <1> ?%1 equ ($-$$)
  1511 00000038 6A0E                    			push	14						;
  1512 0000003A EB42                    			jmp	intcpu						;
  1513                                  
  1514                                  			menter	int15						;(reserved)
  1514                              <1> ?%1 equ ($-$$)
  1515 0000003C 6A0F                    			push	15						;
  1516 0000003E EB3E                    			jmp	intcpu						;
  1517                                  
  1518                                  			menter	coproccalc					;coprocessor calculation
  1518                              <1> ?%1 equ ($-$$)
  1519 00000040 6A10                    			push	16						;
  1520 00000042 EB3A                    			jmp	intcpu						;
  1521                                  
  1522                                  			menter	int17						;(reserved)
  1522                              <1> ?%1 equ ($-$$)
  1523 00000044 6A11                    			push	17						;
  1524 00000046 EB36                    			jmp	intcpu						;
  1525                                  
  1526                                  			menter	int18						;(reserved)
  1526                              <1> ?%1 equ ($-$$)
  1527 00000048 6A12                    			push	18						;
  1528 0000004A EB32                    			jmp	intcpu						;
  1529                                  
  1530                                  			menter	int19						;(reserved)
  1530                              <1> ?%1 equ ($-$$)
  1531 0000004C 6A13                    			push	19						;
  1532 0000004E EB2E                    			jmp	intcpu						;
  1533                                  
  1534                                  			menter	int20						;(reserved)
  1534                              <1> ?%1 equ ($-$$)
  1535 00000050 6A14                    			push	20						;
  1536 00000052 EB2A                    			jmp	intcpu						;
  1537                                  
  1538                                  			menter	int21						;(reserved)
  1538                              <1> ?%1 equ ($-$$)
  1539 00000054 6A15                    			push	21						;
  1540 00000056 EB26                    			jmp	intcpu						;
  1541                                  
  1542                                  			menter	int22						;(reserved)
  1542                              <1> ?%1 equ ($-$$)
  1543 00000058 6A16                    			push	22						;
  1544 0000005A EB22                    			jmp	intcpu						;
  1545                                  
  1546                                  			menter	int23						;(reserved)
  1546                              <1> ?%1 equ ($-$$)
  1547 0000005C 6A17                    			push	23						;
  1548 0000005E EB1E                    			jmp	intcpu						;
  1549                                  
  1550                                  			menter	int24						;(reserved)
  1550                              <1> ?%1 equ ($-$$)
  1551 00000060 6A18                    			push	24						;
  1552 00000062 EB1A                    			jmp	intcpu						;
  1553                                  
  1554                                  			menter	int25						;(reserved)
  1554                              <1> ?%1 equ ($-$$)
  1555 00000064 6A19                    			push	25						;
  1556 00000066 EB16                    			jmp	intcpu						;
  1557                                  
  1558                                  			menter	int26						;(reserved)
  1558                              <1> ?%1 equ ($-$$)
  1559 00000068 6A1A                    			push	26						;
  1560 0000006A EB12                    			jmp	intcpu						;
  1561                                  
  1562                                  			menter	int27						;(reserved)
  1562                              <1> ?%1 equ ($-$$)
  1563 0000006C 6A1B                    			push	27						;
  1564 0000006E EB0E                    			jmp	intcpu						;
  1565                                  
  1566                                  			menter	int28						;(reserved)
  1566                              <1> ?%1 equ ($-$$)
  1567 00000070 6A1C                    			push	28						;
  1568 00000072 EB0A                    			jmp	intcpu						;
  1569                                  
  1570                                  			menter	int29						;(reserved)
  1570                              <1> ?%1 equ ($-$$)
  1571 00000074 6A1D                    			push	29						;
  1572 00000076 EB06                    			jmp	intcpu						;
  1573                                  
  1574                                  			menter	int30						;(reserved)
  1574                              <1> ?%1 equ ($-$$)
  1575 00000078 6A1E                    			push	30						;
  1576 0000007A EB02                    			jmp	intcpu						;
  1577                                  
  1578                                  			menter	int31						;(reserved)
  1578                              <1> ?%1 equ ($-$$)
  1579 0000007C 6A1F                    			push	31						;
  1580 0000007E 58                      intcpu			pop	eax						;
  1581 0000007F CF                      			iretd
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                  ;
  1584                                  ;	Hardware Device Interupts
  1585                                  ;
  1586                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1587                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1588                                  ;	(BX=2028h).
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;	IRQ0	Clock Tick Interrupt
  1594                                  ;
  1595                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1596                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1597                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1598                                  ;
  1599                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1600                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1601                                  ;
  1602                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1603                                  ;	zero, the floppy disk motors are turned off.
  1604                                  ;
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  			menter	clocktick					;clock tick interrupt
  1606                              <1> ?%1 equ ($-$$)
  1607 00000080 50                      			push	eax						;save volatile regs
  1608 00000081 52                      			push	edx						;
  1609 00000082 1E                      			push	ds						;
  1610 00000083 6A18                    			push	ESELDAT						;load OS data selector ...
  1611 00000085 1F                      			pop	ds						;... into data segment register
  1612                                  
  1613 00000086 A16C040000              			mov	eax,[wfClockTicks]				;eax = clock ticks
  1614 0000008B 40                      			inc	eax						;increment clock ticks
  1615 0000008C 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1616 00000091 7208                    			jb	irq0.10						;no, skip ahead
  1617 00000093 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1618 00000099 31C0                    			xor	eax,eax						;reset clock ticks
  1619 0000009B A36C040000              irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1620                                  
  1621 000000A0 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1622 000000A7 741E                    			je	irq0.20						;yes, skip ahead
  1623 000000A9 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1624 000000AF 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1625                                  
  1626 000000B1 FB                      			sti							;enable maskable interrupts
  1627 000000B2 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1628 000000B4 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1629 000000B6 EC                      			in	al,dx						;FDC main status byte
  1630 000000B7 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1631 000000B9 75F7                    			jnz	irq0.15						;wait while busy
  1632                                  
  1633 000000BB B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1634 000000BD A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1635 000000C2 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1636 000000C4 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1637 000000C6 EE                      			out	dx,al						;turn motor off
  1638                                  
  1639 000000C7 E8C7070000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1640 000000CC 1F                      			pop	ds						;restore volatile regs
  1641 000000CD 5A                      			pop	edx						;
  1642 000000CE 58                      			pop	eax						;
  1643 000000CF CF                      			iretd							;return to caller
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  ;
  1646                                  ;	IRQ1	Keyboard Interrupt
  1647                                  ;
  1648                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1649                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1650                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1651                                  ;	ALL modified registers upon return.
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  			menter	keyboard					;keyboard interrrupt
  1654                              <1> ?%1 equ ($-$$)
  1655 000000D0 50                      			push	eax						;save volatile regs
  1656 000000D1 53                      			push	ebx						;
  1657 000000D2 51                      			push	ecx						;
  1658 000000D3 56                      			push	esi						;
  1659 000000D4 1E                      			push	ds						;
  1660 000000D5 6A18                    			push	ESELDAT						;load OS data selector ...
  1661 000000D7 1F                      			pop	ds						;... into data segment register
  1662 000000D8 30C0                    			xor	al,al						;zero
  1663 000000DA A205080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1664 000000DF A206080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1665 000000E4 A207080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1666 000000E9 A208080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1667 000000EE A209080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1668 000000F3 A20A080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1669 000000F8 B020                    			mov	al,' '						;space
  1670 000000FA A20B080000              			mov	[wbConsoleChar],al				;set character to space
  1671 000000FF B080                    			mov	al,EKEYTIMEOUT					;controller timeout flag
  1672 00000101 F6D0                    			not	al						;controller timeout mask
  1673 00000103 200504080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1674 00000109 8A1D02080000            			mov	bl,[wbConsoleShift]				;shift flags
  1675 0000010F 8A3D03080000            			mov	bh,[wbConsoleLock]				;lock flags
  1676 00000115 E8C3070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1677 0000011A 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  1678 00000120 E460                    			in	al,EKEYPORTDATA					;read scan code 0
  1679 00000122 A205080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1680 00000127 88C4                    			mov	ah,al						;copy scan code 0
  1681 00000129 B002                    			mov	al,EKEYSHIFTLEFT				;left shift flag
  1682 0000012B 80FC2A                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1683 0000012E 0F84E0000000            			je	irq1.30						;yes, set flag
  1684 00000134 80FCAA                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1685 00000137 0F84DB000000            			je	irq1.40						;yes, reset flag
  1686 0000013D B010                    			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1687 0000013F 80FC36                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1688 00000142 0F84CC000000            			je	irq1.30						;yes, set flag
  1689 00000148 80FCB6                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1690 0000014B 0F84C7000000            			je	irq1.40						;yes, reset flag
  1691 00000151 B001                    			mov	al,EKEYCTRLLEFT					;left control flag
  1692 00000153 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1693 00000156 0F84B8000000            			je	irq1.30						;yes, set flag
  1694 0000015C 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1695 0000015F 0F84B3000000            			je	irq1.40						;yes, reset flag
  1696 00000165 B004                    			mov	al,EKEYALTLEFT					;left alt flag
  1697 00000167 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1698 0000016A 0F84A4000000            			je	irq1.30						;yes, set flag
  1699 00000170 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1700 00000173 0F849F000000            			je	irq1.40						;yes, reset flag
  1701 00000179 B004                    			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1702 0000017B 80FC3A                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1703 0000017E 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1704 00000184 B002                    			mov	al,EKEYLOCKNUM					;num-lock flag
  1705 00000186 80FC45                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1706 00000189 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1707 0000018F B001                    			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1708 00000191 80FC46                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1709 00000194 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1710 0000019A 80FCE0                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1711 0000019D 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1712 000001A3 E835070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1713 000001A8 0F8465010000            			jz	irq1.140					;yes, skip ahead
  1714 000001AE E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1715 000001B0 A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1716 000001B5 88C4                    			mov	ah,al						;copy scan code 1
  1717 000001B7 B008                    			mov	al,EKEYCTRLRIGHT				;right control flag
  1718 000001B9 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1719 000001BC 7456                    			je	irq1.30						;yes, set flag
  1720 000001BE 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1721 000001C1 7455                    			je	irq1.40						;yes, reset flag
  1722 000001C3 B020                    			mov	al,EKEYALTRIGHT					;right alt flag
  1723 000001C5 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1724 000001C8 744A                    			je	irq1.30						;yes, set flag
  1725 000001CA 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1726 000001CD 7449                    			je	irq1.40						;yes, reset flag
  1727 000001CF 80FC35                  			cmp	ah,EKEYSLASH					;slash down code?
  1728 000001D2 0F84CB000000            			je	irq1.80						;yes, skip ahead
  1729 000001D8 80FCB5                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1730 000001DB 0F84C2000000            			je	irq1.80						;yes, skip ahead
  1731 000001E1 80FC2A                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1732 000001E4 7405                    			je	irq1.10						;yes, continue
  1733 000001E6 80FCB7                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1734 000001E9 7524                    			jne	irq1.20						;no, skip ahead
  1735 000001EB E8ED060000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1736 000001F0 0F841D010000            			jz	irq1.140					;yes, skip ahead
  1737 000001F6 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1738 000001F8 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1739 000001FD E8DB060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1740 00000202 0F840B010000            			jz	irq1.140					;yes, skip ahead
  1741 00000208 E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1742 0000020A A208080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1743 0000020F E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1744 00000214 08C3                    irq1.30			or	bl,al						;set shift flag
  1745 00000216 EB0D                    			jmp	irq1.60						;skip ahead
  1746 00000218 F6D0                    irq1.40			not	al						;convert flag to mask
  1747 0000021A 20C3                    			and	bl,al						;reset shift flag
  1748 0000021C EB07                    			jmp	irq1.60						;skip ahead
  1749 0000021E 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1750 00000220 E889060000              			call	SetKeyboardLamps				;update keyboard lamps
  1751 00000225 881D02080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1752 0000022B 883D03080000            			mov	[wbConsoleLock],bh				;save lock flags
  1753 00000231 E83F040000              			call	PutConsoleOIAShift				;update OIA indicators
  1754 00000236 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  1755 0000023B 80FCE1                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1756 0000023E 7563                    			jne	irq1.80						;no continue
  1757 00000240 E898060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1758 00000245 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  1759 0000024B E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1760 0000024D A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1761 00000252 88C4                    			mov	ah,al						;copy scan code 1
  1762 00000254 80FC1D                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1763 00000257 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  1764 0000025D E87B060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1765 00000262 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  1766 00000268 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1767 0000026A A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1768 0000026F E869060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1769 00000274 0F8499000000            			jz	irq1.140					;yes, skip ahead
  1770 0000027A E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1771 0000027C A208080000              			mov	[wbConsoleScan3],al				;save scan code 3
  1772 00000281 E857060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1773 00000286 0F8487000000            			jz	irq1.140					;yes, skip ahead
  1774 0000028C E460                    			in	al,EKEYPORTDATA					;read scan code 4
  1775 0000028E A209080000              			mov	[wbConsoleScan4],al				;save scan code 4
  1776 00000293 E845060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1777 00000298 7479                    			jz	irq1.140					;yes, skip ahead
  1778 0000029A E460                    			in	al,EKEYPORTDATA					;read scan code 5
  1779 0000029C A20A080000              			mov	[wbConsoleScan5],al				;save scan code 5
  1780 000002A1 EB78                    			jmp	irq1.150					;continue
  1781 000002A3 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  1782 000002A5 F6C480                  			test	ah,EKEYUP					;release code?
  1783 000002A8 7531                    			jnz	irq1.110					;yes, skip ahead
  1784 000002AA BE[2B030000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  1785 000002AF F6C312                  			test	bl,EKEYSHIFT					;either shift key down?
  1786 000002B2 7405                    			jz	irq1.90						;no, skip ahead
  1787 000002B4 BE[AB030000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  1788 000002B9 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  1789 000002BC 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  1790 000002C0 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1791 000002C3 7411                    			jz	irq1.100					;no skip ahead
  1792 000002C5 88C1                    			mov	cl,al						;copy ASCII code
  1793 000002C7 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1794 000002CA 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1795 000002CD 7207                    			jb	irq1.100					;yes, skip ahead
  1796 000002CF 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1797 000002D2 7702                    			ja	irq1.100					;yes, skip ahead
  1798 000002D4 3420                    			xor	al,EASCIICASE					;switch case
  1799 000002D6 A20B080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1800 000002DB BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1801 000002E0 F6C480                  			test	ah,EKEYUP					;release scan-code?
  1802 000002E3 7405                    			jz	irq1.120					;no, skip ahead
  1803 000002E5 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  1804 000002EA 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  1805 000002EF 09C2                    			or	edx,eax						;msg id and codes
  1806 000002F1 31C9                    			xor	ecx,ecx						;null param
  1807 000002F3 50                      			push	eax						;save codes
  1808 000002F4 E898040000              			call	PutMessage					;put message to console
  1809 000002F9 58                      			pop	eax						;restore codes
  1810 000002FA 08C0                    			or	al,al						;ASCII translation?
  1811 000002FC 7413                    			jz	irq1.130					;no, skip ahead
  1812 000002FE BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  1813 00000303 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  1814 00000308 09C2                    			or	edx,eax						;msg id and codes
  1815 0000030A 31C9                    			xor	ecx,ecx						;null param
  1816 0000030C E880040000              			call	PutMessage					;put message to console
  1817 00000311 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  1818 00000313 B080                    irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1819 00000315 080504080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  1820 0000031B E8EF030000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  1821 00000320 E86E050000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1822 00000325 1F                      			pop	ds						;restore volatile regs
  1823 00000326 5E                      			pop	esi						;
  1824 00000327 59                      			pop	ecx						;
  1825 00000328 5B                      			pop	ebx						;
  1826 00000329 58                      			pop	eax						;
  1827 0000032A CF                      			iretd							;return to caller
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;	Scan-Code to ASCII Translation Tables
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831 0000032B 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1832 00000333 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1833 0000033B 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1834 00000343 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1835 0000034B 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1836 00000353 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1837 0000035B 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1838 00000363 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1839 0000036B 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1840 00000373 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1841 0000037B 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1842 00000383 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1843 0000038B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1844 00000393 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1845 0000039B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1846 000003A3 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1847 000003AB 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1848 000003B3 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1849 000003BB 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1850 000003C3 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1851 000003CB 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1852 000003D3 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1853 000003DB 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1854 000003E3 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1855 000003EB 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1856 000003F3 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1857 000003FB 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1858 00000403 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1859 0000040B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1860 00000413 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1861 0000041B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1862 00000423 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1863                                  
  1864                                  			menter	iochannel					;secondary 8259A cascade
  1864                              <1> ?%1 equ ($-$$)
  1865 0000042B 50                      			push	eax						;
  1866 0000042C EB42                    			jmp	hwint						;
  1867                                  
  1868                                  			menter	com2						;serial port 2 interrupt
  1868                              <1> ?%1 equ ($-$$)
  1869 0000042E 50                      			push	eax						;
  1870 0000042F EB3F                    			jmp	hwint						;
  1871                                  
  1872                                  			menter	com1						;serial port 1 interrupt
  1872                              <1> ?%1 equ ($-$$)
  1873 00000431 50                      			push	eax						;
  1874 00000432 EB3C                    			jmp	hwint						;
  1875                                  
  1876                                  			menter	lpt2						;parallel port 2 interrupt
  1876                              <1> ?%1 equ ($-$$)
  1877 00000434 50                      			push	eax						;
  1878 00000435 EB39                    			jmp	hwint						;
  1879                                  
  1880                                  			menter	diskette					;floppy disk interrupt
  1880                              <1> ?%1 equ ($-$$)
  1881 00000437 50                      			push	eax						;save non-volatile regs
  1882 00000438 1E                      			push	ds						;
  1883 00000439 6A18                    			push	ESELDAT						;load OS data selector ...
  1884 0000043B 1F                      			pop	ds						;... into DS register
  1885 0000043C A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1886 00000441 0C80                    			or	al,10000000b					;set IRQ flag
  1887 00000443 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  1888 00000448 FB                      			sti							;enable maskable interrupts
  1889 00000449 B020                    			mov	al,20h						;non-specific end-of-interrupt
  1890 0000044B E620                    			out	20h,al						;signal end of interrupt
  1891 0000044D 1F                      			pop	ds						;restore non-volatile regs
  1892 0000044E 58                      			pop	eax						;
  1893 0000044F CF                      			iretd							;return from interrupt
  1894                                  
  1895                                  			menter	lpt1						;parallel port 1 interrupt
  1895                              <1> ?%1 equ ($-$$)
  1896 00000450 50                      			push	eax						;
  1897 00000451 EB1D                    			jmp	hwint						;
  1898                                  
  1899                                  			menter	rtclock						;real-time clock interrupt
  1899                              <1> ?%1 equ ($-$$)
  1900 00000453 50                      			push	eax						;
  1901 00000454 EB13                    			jmp	hwwint						;
  1902                                  
  1903                                  			menter	retrace						;CGA vertical retrace interrupt
  1903                              <1> ?%1 equ ($-$$)
  1904 00000456 50                      			push	eax						;
  1905 00000457 EB10                    			jmp	hwwint						;
  1906                                  
  1907                                  			menter	irq10						;reserved
  1907                              <1> ?%1 equ ($-$$)
  1908 00000459 50                      			push	eax						;
  1909 0000045A EB0D                    			jmp	hwwint						;
  1910                                  
  1911                                  			menter	irq11						;reserved
  1911                              <1> ?%1 equ ($-$$)
  1912 0000045C 50                      			push	eax						;
  1913 0000045D EB0A                    			jmp	hwwint						;
  1914                                  
  1915                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1915                              <1> ?%1 equ ($-$$)
  1916 0000045F 50                      			push	eax						;
  1917 00000460 EB07                    			jmp	hwwint						;
  1918                                  
  1919                                  			menter	coprocessor					;coprocessor interrupt
  1919                              <1> ?%1 equ ($-$$)
  1920 00000462 50                      			push	eax						;
  1921 00000463 EB04                    			jmp	hwwint						;
  1922                                  
  1923                                  			menter	fixeddisk					;fixed disk interrupt
  1923                              <1> ?%1 equ ($-$$)
  1924 00000465 50                      			push	eax						;
  1925 00000466 EB01                    			jmp	hwwint						;
  1926                                  
  1927                                  			menter	irq15						;reserved
  1927                              <1> ?%1 equ ($-$$)
  1928 00000468 50                      			push	eax						;save volatile reg
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;	Exit from hardware interrupt
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934 00000469 E82B040000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1935 0000046E EB05                    			jmp	hwint90						;skip ahead
  1936 00000470 E81E040000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1937 00000475 58                      hwint90			pop	eax						;restore volatile reg
  1938 00000476 CF                      			iretd							;return from interrupt
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                  ;
  1941                                  ;	INT 30h Operating System Software Service Interrupt
  1942                                  ;
  1943                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1944                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1945                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1946                                  ;	the entry address of the specific function from a table.
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                  			menter	svc
  1949                              <1> ?%1 equ ($-$$)
  1950 00000477 3C09                    			cmp	al,maxtsvc					;is our function out of range?
  1951 00000479 730D                    			jae	svc90						;yes, skip ahead
  1952 0000047B 0FB6C0                  			movzx	eax,al						;function
  1953 0000047E C1E002                  			shl	eax,2						;offset into table
  1954 00000481 2EFF90[89040000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  1955 00000488 CF                      svc90			iretd							;return from interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;	Service Request Table
  1959                                  ;
  1960                                  ;
  1961                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1962                                  ;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1964                              <1> tsvc :
  1964                              <1> e%1 equ ($-tsvc)/4
  1964 00000489 [3E050000]          <1>  dd %1
  1965                                  			tsvce	GetConsoleString				;get string input
  1965                              <1> e%1 equ ($-tsvc)/4
  1965 0000048D [6B050000]          <1>  dd %1
  1966                                  			tsvce	ClearConsoleScreen				;clear console screen
  1966                              <1> e%1 equ ($-tsvc)/4
  1966 00000491 [EE070000]          <1>  dd %1
  1967                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1967                              <1> e%1 equ ($-tsvc)/4
  1967 00000495 [69080000]          <1>  dd %1
  1968                                  			tsvce	LeftTrimString					;left-trim string
  1968                              <1> e%1 equ ($-tsvc)/4
  1968 00000499 [AD040000]          <1>  dd %1
  1969                                  			tsvce	RightTrimString					;right-trim string
  1969                              <1> e%1 equ ($-tsvc)/4
  1969 0000049D [C9040000]          <1>  dd %1
  1970                                  			tsvce	UpperCaseString					;upper-case string
  1970                              <1> e%1 equ ($-tsvc)/4
  1970 000004A1 [02050000]          <1>  dd %1
  1971                                  			tsvce	CompareStrings					;compare strings
  1971                              <1> e%1 equ ($-tsvc)/4
  1971 000004A5 [1D050000]          <1>  dd %1
  1972                                  			tsvce	ResetSystem					;reset system using 8042 chip
  1972                              <1> e%1 equ ($-tsvc)/4
  1972 000004A9 [9F080000]          <1>  dd %1
  1973                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  ;
  1976                                  ;	Service Request Macros
  1977                                  ;
  1978                                  ;	These macros provide positional parameterization of service request calls.
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  %macro			putConsoleString 1
  1982                                  			mov	edx,%1						;EDX = string address
  1983                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1984                                  			int	_svc						;invoke OS service
  1985                                  %endmacro
  1986                                  %macro			getConsoleString 4
  1987                                  			mov	edx,%1						;EDX = buffer address
  1988                                  			mov	ecx,%2						;ECX = max characters
  1989                                  			mov	bh,%3						;BH = echo indicator
  1990                                  			mov	bl,%4						;BL = terminator
  1991                                  			mov	al,eGetConsoleString				;AL = get string fn.
  1992                                  			int	_svc						;invoke OS service
  1993                                  %endmacro
  1994                                  %macro			clearConsoleScreen 0
  1995                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  1996                                  			int	_svc						;invoke OS service
  1997                                  %endmacro
  1998                                  %macro			placeCursor 0
  1999                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2000                                  			int	_svc						;invoke OS service
  2001                                  %endmacro
  2002                                  %macro			leftTrimString 0
  2003                                  			mov	al,eLeftTrimString				;al = left trim fn.
  2004                                  			int	_svc						;invoke OS service
  2005                                  %endmacro
  2006                                  %macro			rightTrimString 0
  2007                                  			mov	al,eRightTrimString				;AL = right trim fn.
  2008                                  			int	_svc						;invoke OS service
  2009                                  %endmacro
  2010                                  %macro			upperCaseString 0
  2011                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2012                                  			int	_svc						;invoke OS service
  2013                                  %endmacro
  2014                                  %macro			compareStrings 0
  2015                                  			mov	al,eCompareStrings				;AL = compare strings fn.
  2016                                  			int	_svc						;invoke OS service
  2017                                  %endmacro
  2018                                  %macro			resetSystem 0
  2019                                  			mov	al,eResetSystem					;AL = system reset fn.
  2020                                  			int	_svc						;invoke OS service
  2021                                  %endmacro
  2022                                  ;-----------------------------------------------------------------------------------------------------------------------
  2023                                  ;
  2024                                  ;	Kernel Function Library
  2025                                  ;
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027                                  ;-----------------------------------------------------------------------------------------------------------------------
  2028                                  ;
  2029                                  ;	String Helper Routines
  2030                                  ;
  2031                                  ;	LeftTrimString
  2032                                  ;	RightTrimString
  2033                                  ;	GetStringLength
  2034                                  ;	UpperCaseString
  2035                                  ;	CompareStrings
  2036                                  ;
  2037                                  ;-----------------------------------------------------------------------------------------------------------------------
  2038                                  ;-----------------------------------------------------------------------------------------------------------------------
  2039                                  ;
  2040                                  ;	Routine:	LeftTrimString
  2041                                  ;
  2042                                  ;	Description:	Trim leading blanks from a given string.
  2043                                  ;
  2044                                  ;	In:		DX:EBX	string address
  2045                                  ;
  2046                                  ;	Out:		EAX	string address
  2047                                  ;
  2048                                  ;-----------------------------------------------------------------------------------------------------------------------
  2049 000004AD 56                      LeftTrimString		push	esi						;save volatile regs
  2050 000004AE 57                      			push	edi						;
  2051 000004AF 06                      			push	es						;
  2052 000004B0 1E                      			push	ds						;store data selector ...
  2053 000004B1 07                      			pop	es						;... in extra segment
  2054 000004B2 89DE                    			mov	esi,ebx						;string address
  2055 000004B4 89DF                    			mov	edi,ebx						;string address
  2056 000004B6 FC                      			cld							;forward strings
  2057 000004B7 AC                      .10			lodsb							;string char
  2058 000004B8 3C20                    			cmp	al,EASCIISPACE					;space?
  2059 000004BA 74FB                    			je	.10						;yes, repeat
  2060 000004BC 4E                      			dec	esi						;non-space char address
  2061 000004BD AC                      .20			lodsb							;non-space char
  2062 000004BE AA                      			stosb							;store in output
  2063 000004BF 08C0                    			or	al,al						;null?
  2064 000004C1 75FA                    			jnz	.20						;repeat until done
  2065 000004C3 89D8                    			mov	eax,ebx						;string address
  2066 000004C5 07                      			pop	es						;restore volatile regs
  2067 000004C6 5F                      			pop	edi						;
  2068 000004C7 5E                      			pop	esi						;
  2069 000004C8 C3                      			ret							;return to caller
  2070                                  ;-----------------------------------------------------------------------------------------------------------------------
  2071                                  ;
  2072                                  ;	Routine:	RightTrimString
  2073                                  ;
  2074                                  ;	Description:	Trim trailing blanks from a given string.
  2075                                  ;
  2076                                  ;	In:		DS:EBX	string address
  2077                                  ;
  2078                                  ;	Out:		EAX	string address
  2079                                  ;
  2080                                  ;-----------------------------------------------------------------------------------------------------------------------
  2081 000004C9 57                      RightTrimString		push	edi						;save volatile regs
  2082 000004CA 06                      			push	es						;
  2083 000004CB 1E                      			push	ds						;store data selector ...
  2084 000004CC 07                      			pop	es						;... in extra segment
  2085 000004CD E818000000              			call	GetStringLength					;string length in eax
  2086 000004D2 89C1                    			mov	ecx,eax						;string length
  2087 000004D4 E30F                    			jecxz	.10						;skip ahead if no length
  2088 000004D6 89DF                    			mov	edi,ebx						;string address
  2089 000004D8 01CF                    			add	edi,ecx						;null address
  2090 000004DA 4F                      			dec	edi						;last char address
  2091 000004DB FD                      			std							;backward strings
  2092 000004DC B020                    			mov	al,EASCIISPACE					;ascii space comparator
  2093 000004DE F3AE                    			repe	scasb						;search backward for non-space
  2094 000004E0 FC                      			cld							;forward strings
  2095 000004E1 C6470200                			mov	byte [edi+2],0					;null-terminate string
  2096 000004E5 89D8                    .10			mov	eax,ebx						;string address
  2097 000004E7 07                      			pop	es						;restore volatile regs
  2098 000004E8 5F                      			pop	edi						;
  2099 000004E9 C3                      			ret							;return to caller
  2100                                  ;-----------------------------------------------------------------------------------------------------------------------
  2101                                  ;
  2102                                  ;	Routine:	GetStringLength
  2103                                  ;
  2104                                  ;	Description:	Return count of characters in string.
  2105                                  ;
  2106                                  ;	In:		DS:EBX	string address
  2107                                  ;
  2108                                  ;	Out:		EAX	length of string
  2109                                  ;
  2110                                  ;-----------------------------------------------------------------------------------------------------------------------
  2111 000004EA 51                      GetStringLength		push	ecx						;save volatile regs
  2112 000004EB 56                      			push	esi						;
  2113 000004EC 31C0                    			xor	eax,eax						;zero length
  2114 000004EE 89D9                    			mov	ecx,ebx						;string address
  2115 000004F0 E30D                    			jecxz	.20						;exit if no address
  2116 000004F2 89DE                    			mov	esi,ebx						;string address
  2117 000004F4 FC                      			cld							;forward strings
  2118 000004F5 AC                      .10			lodsb							;string char
  2119 000004F6 08C0                    			or	al,al						;null?
  2120 000004F8 75FB                    			jnz	.10						;no, repeat
  2121 000004FA 89F0                    			mov	eax,esi						;after-null address
  2122 000004FC 48                      			dec	eax						;null address
  2123 000004FD 29C8                    			sub	eax,ecx						;length of string
  2124 000004FF 5E                      .20			pop	esi						;restore volatile regs
  2125 00000500 59                      			pop	ecx						;
  2126 00000501 C3                      			ret							;return to caller
  2127                                  ;-----------------------------------------------------------------------------------------------------------------------
  2128                                  ;
  2129                                  ;	Routine:	UpperCaseString
  2130                                  ;
  2131                                  ;	Description:	Uppercase string
  2132                                  ;
  2133                                  ;	In:		DS:EBX	string address
  2134                                  ;
  2135                                  ;	Out:		EAX	string address
  2136                                  ;
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138 00000502 56                      UpperCaseString		push	esi						;save volatile regs
  2139 00000503 89DE                    			mov	esi,ebx						;string address
  2140 00000505 AC                      .10			lodsb							;string character
  2141 00000506 08C0                    			or	al,al						;null?
  2142 00000508 740F                    			jz	.20						;yes, skip ahead
  2143 0000050A 3C61                    			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2144 0000050C 72F7                    			jb	.10						;no, continue
  2145 0000050E 3C7A                    			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2146 00000510 77F3                    			ja	.10						;no, continue
  2147 00000512 24DF                    			and	al,EASCIICASEMASK				;mask for upper case
  2148 00000514 8846FF                  			mov	[esi-1],al					;upper character
  2149 00000517 EBEC                    			jmp	.10						;continue
  2150 00000519 89D8                    .20			mov	eax,ebx						;string address
  2151 0000051B 5E                      			pop	esi						;restore volatile regs
  2152 0000051C C3                      			ret							;return to caller
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                  ;
  2155                                  ;	Routine:	CompareStrings
  2156                                  ;
  2157                                  ;	Description:	Compare two strings.
  2158                                  ;
  2159                                  ;	In:		DS:EBX	string 1 address
  2160                                  ;			DS:EDX	string 2 address
  2161                                  ;
  2162                                  ;	Out:		EAX	0	strings are equal
  2163                                  ;				<0	string 1 < string 2
  2164                                  ;				>0	string 1 > string 2
  2165                                  ;
  2166                                  ;-----------------------------------------------------------------------------------------------------------------------
  2167 0000051D 51                      CompareStrings		push	ecx						;save volatile regs
  2168 0000051E 56                      			push	esi						;
  2169 0000051F 57                      			push	edi						;
  2170 00000520 06                      			push	es						;
  2171 00000521 1E                      			push	ds						;store data selector ...
  2172 00000522 07                      			pop	es						;... into es register
  2173 00000523 89D7                    			mov	edi,edx						;string 2 address
  2174 00000525 89DE                    			mov	esi,ebx						;string 1 address
  2175 00000527 31C0                    			xor	eax,eax						;prime result
  2176 00000529 8A0E                    .10			mov	cl,[esi]					;string 1 char
  2177 0000052B A6                      			cmpsb							;compare char
  2178 0000052C 7506                    			jne	.20						;exit if not equal
  2179 0000052E 08C9                    			or	cl,cl						;end of strings?
  2180 00000530 75F7                    			jnz	.10						;no, repeat
  2181 00000532 EB05                    			jmp	.30						;yes, exit
  2182 00000534 40                      .20			inc	eax						;+1 : assume string 1 > string 2
  2183 00000535 7302                    			jnc	.30						;exit if true
  2184 00000537 F7D8                    			neg	eax						;-1 : string 1 < string 2
  2185 00000539 07                      .30			pop	es						;restore volatile regs
  2186 0000053A 5F                      			pop	edi						;
  2187 0000053B 5E                      			pop	esi						;
  2188 0000053C 59                      			pop	ecx						;
  2189 0000053D C3                      			ret							;return to caller
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                  ;
  2192                                  ;	Console Helper Routines
  2193                                  ;
  2194                                  ;	PutConsoleString
  2195                                  ;	GetConsoleString
  2196                                  ;	GetConsoleChar
  2197                                  ;	Yield
  2198                                  ;	PreviousConsoleColumn
  2199                                  ;	NextConsoleColumn
  2200                                  ;	FirstConsoleColumn
  2201                                  ;	NextConsoleRow
  2202                                  ;	PutConsoleChar
  2203                                  ;	PutConsoleOIAShift
  2204                                  ;	PutConsoleOIAChar
  2205                                  ;	PutConsoleHexByte
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209                                  ;
  2210                                  ;	Routine:	PutConsoleString
  2211                                  ;
  2212                                  ;	Description:	Write a sequence of ASCII characters to the console until null and update the console position
  2213                                  ;			as needed.
  2214                                  ;
  2215                                  ;	In:		EDX	source address
  2216                                  ;			DS	OS data selector
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219 0000053E 56                      PutConsoleString	push	esi						;save volatile regs
  2220 0000053F 89D6                    			mov	esi,edx						;source address
  2221 00000541 FC                      			cld							;forward strings
  2222 00000542 AC                      .10			lodsb							;ASCII character
  2223 00000543 08C0                    			or	al,al						;end of string?
  2224 00000545 7422                    			jz	.40						;yes, skip ahead
  2225 00000547 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  2226 00000549 7507                    			jne	.20						;no, skip ahead
  2227 0000054B E8E2000000              			call	FirstConsoleColumn				;move to start of row
  2228 00000550 EBF0                    			jmp	.10						;next character
  2229 00000552 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2230 00000554 7507                    			jne	.30						;no, skip ahead
  2231 00000556 E8DF000000              			call	NextConsoleRow					;move to next row
  2232 0000055B EBE5                    			jmp	.10						;next character
  2233 0000055D E8FA000000              .30			call	PutConsoleChar					;output character to console
  2234 00000562 E8B0000000              			call	NextConsoleColumn				;advance to next column
  2235 00000567 EBD9                    			jmp	.10						;next character
  2236 00000569 5E                      .40			pop	esi						;restore volatile regs
  2237 0000056A C3                      			ret							;return to caller
  2238                                  ;-----------------------------------------------------------------------------------------------------------------------
  2239                                  ;
  2240                                  ;	Routine:	GetConsoleString
  2241                                  ;
  2242                                  ;	Description:	Accept keyboard input into a buffer.
  2243                                  ;
  2244                                  ;	Input:		ds:edx	target buffer address
  2245                                  ;			ecx	size of input buffer
  2246                                  ;			bh	echo to terminal
  2247                                  ;			bl	terminating character
  2248                                  ;
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250 0000056B 51                      GetConsoleString	push	ecx						;save volatile regs
  2251 0000056C 56                      			push	esi						;
  2252 0000056D 57                      			push	edi						;
  2253 0000056E 06                      			push	es						;
  2254 0000056F 1E                      			push	ds						;load data segment selector ...
  2255 00000570 07                      			pop	es						;... into extra segment register
  2256 00000571 89D7                    			mov	edi,edx						;edi = target buffer
  2257 00000573 89D6                    			mov	esi,edx						;esi = target buffer
  2258 00000575 E34E                    .10			jecxz	.50						;exit if max-length is zero
  2259 00000577 E856000000              .20			call	GetConsoleChar					;al = next input char
  2260 0000057C 38D8                    			cmp	al,bl						;is this the terminator?
  2261 0000057E 7445                    			je	.50						;yes, exit
  2262 00000580 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2263 00000582 7521                    			jne	.30						;no, skip ahead
  2264 00000584 39FE                    			cmp	esi,edi						;at start of buffer?
  2265 00000586 74EF                    			je	.20						;yes, get next character
  2266 00000588 4F                      			dec	edi						;backup target pointer
  2267 00000589 C60700                  			mov	byte [edi],0					;zero previous character
  2268 0000058C 41                      			inc	ecx						;increment remaining chars
  2269 0000058D F6C701                  			test	bh,1						;echo to console?
  2270 00000590 74E5                    			jz	.20						;no, get next character
  2271 00000592 E85B000000              			call	PreviousConsoleColumn				;backup console position
  2272 00000597 B020                    			mov	al,EASCIISPACE					;ASCII space
  2273 00000599 E8BE000000              			call	PutConsoleChar					;write space to console
  2274 0000059E E8C6020000              			call	PlaceCursor					;position the cursor
  2275 000005A3 EBD2                    			jmp	.20						;get next character
  2276 000005A5 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2277 000005A7 72CE                    			jb	.20						;no, get another character
  2278 000005A9 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2279 000005AB 77CA                    			ja	.20						;no, get another character
  2280 000005AD AA                      			stosb							;store character in buffer
  2281 000005AE F6C701                  			test	bh,1						;echo to console?
  2282 000005B1 740F                    			jz	.40						;no, skip ahead
  2283 000005B3 E8A4000000              			call	PutConsoleChar					;write character to console
  2284 000005B8 E85A000000              			call	NextConsoleColumn				;advance console position
  2285 000005BD E8A7020000              			call	PlaceCursor					;position the cursor
  2286 000005C2 49                      .40			dec	ecx						;decrement remaining chars
  2287 000005C3 EBB0                    			jmp	.10						;next
  2288 000005C5 30C0                    .50			xor	al,al						;null
  2289 000005C7 AA                      			stosb							;terminate buffer
  2290 000005C8 07                      			pop	es						;restore volatile regs
  2291 000005C9 5F                      			pop	edi						;
  2292 000005CA 5E                      			pop	esi						;
  2293 000005CB 59                      			pop	ecx						;
  2294 000005CC C3                      			ret							;return to caller
  2295                                  ;-----------------------------------------------------------------------------------------------------------------------
  2296                                  ;
  2297                                  ;	Routine:	GetConsoleChar
  2298                                  ;
  2299                                  ;	Description:	Wait for EMSGKEYCHAR message and return character code.
  2300                                  ;
  2301                                  ;	Output:		al	ASCII character code
  2302                                  ;			ah	keyboard scan code
  2303                                  ;
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305 000005CD E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  2306 000005D2 E8E2010000              GetConsoleChar		call	GetMessage					;get the next message
  2307 000005D7 09C0                    			or	eax,eax						;do we have a message?
  2308 000005D9 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  2309 000005DB 50                      			push	eax						;save key codes
  2310 000005DC 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  2311 000005E1 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  2312 000005E6 58                      			pop	eax						;restore key codes
  2313 000005E7 75E9                    			jne	GetConsoleChar					;no, try again
  2314 000005E9 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  2315 000005EE C3                      			ret							;return to caller
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                  ;
  2318                                  ;	Routine:	Yield
  2319                                  ;
  2320                                  ;	Description:	Pass control to the next ready task or enter halt.
  2321                                  ;
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323 000005EF FB                      Yield			sti							;enable maskagle interrupts
  2324 000005F0 F4                      			hlt							;halt until external interrupt
  2325 000005F1 C3                      			ret							;return to caller
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327                                  ;
  2328                                  ;	Routine:	PreviousConsoleColumn
  2329                                  ;
  2330                                  ;	Description:	Retreat the cursor one logical column. Wrap the logical position to the previous row if needed.
  2331                                  ;
  2332                                  ;	Input:		ds	OS data selector
  2333                                  ;
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335 000005F2 A000080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2336 000005F7 08C0                    			or	al,al						;start of row?
  2337 000005F9 7514                    			jnz	.10						;no, skip ahead
  2338 000005FB 8A2501080000            			mov	ah,[wbConsoleRow]				;current row
  2339 00000601 08E4                    			or	ah,ah						;top of screen?
  2340 00000603 7411                    			jz	.20						;yes, exit with no change
  2341 00000605 FECC                    			dec	ah						;decrement row
  2342 00000607 882501080000            			mov	[wbConsoleRow],ah				;save row
  2343 0000060D B050                    			mov	al,ECONCOLS					;set maximum column
  2344 0000060F FEC8                    .10			dec	al						;decrement column
  2345 00000611 A200080000              			mov	[wbConsoleColumn],al				;save column
  2346 00000616 C3                      .20			ret							;return to caller
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348                                  ;
  2349                                  ;	Routine:	NextConsoleColumn
  2350                                  ;
  2351                                  ;	Description:	Advance the console position one column. Wrap the column and advance one row if needed.
  2352                                  ;
  2353                                  ;	In:		DS	OS data selector
  2354                                  ;
  2355                                  ;-----------------------------------------------------------------------------------------------------------------------
  2356 00000617 A000080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2357 0000061C FEC0                    			inc	al						;increment column
  2358 0000061E A200080000              			mov	[wbConsoleColumn],al				;save column
  2359 00000623 3C50                    			cmp	al,ECONCOLS					;end of row?
  2360 00000625 720A                    			jb	.10						;no, skip ahead
  2361 00000627 E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2362 0000062C E809000000              			call	NextConsoleRow					;line feed to next row
  2363 00000631 C3                      .10			ret							;return to caller
  2364                                  ;-----------------------------------------------------------------------------------------------------------------------
  2365                                  ;
  2366                                  ;	Routine:	FirstConsoleColumn
  2367                                  ;
  2368                                  ;	Description:	Reset the console column to start of the row.
  2369                                  ;
  2370                                  ;	In:		DS	OS data selector
  2371                                  ;
  2372                                  ;-----------------------------------------------------------------------------------------------------------------------
  2373 00000632 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2374 00000634 A200080000              			mov	[wbConsoleColumn],al				;save column
  2375 00000639 C3                      			ret							;return to caller
  2376                                  ;-----------------------------------------------------------------------------------------------------------------------
  2377                                  ;
  2378                                  ;	Routine:	NextConsoleRow
  2379                                  ;
  2380                                  ;	Description:	Advance the console position one line. Scroll the screen one row if needed.
  2381                                  ;
  2382                                  ;	In:		DS	OS data selector
  2383                                  ;
  2384                                  ;-----------------------------------------------------------------------------------------------------------------------
  2385 0000063A A001080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2386 0000063F FEC0                    			inc	al						;increment row
  2387 00000641 A201080000              			mov	[wbConsoleRow],al				;save row
  2388 00000646 3C18                    			cmp	al,ECONROWS					;end of screen?
  2389 00000648 7211                    			jb	.10						;no, skip ahead
  2390 0000064A E8DA010000              			call	ScrollConsoleRow				;scroll up one row
  2391 0000064F A001080000              			mov	al,[wbConsoleRow]				;row
  2392 00000654 FEC8                    			dec	al						;decrement row
  2393 00000656 A201080000              			mov	[wbConsoleRow],al				;save row
  2394 0000065B C3                      .10			ret							;return to caller
  2395                                  ;-----------------------------------------------------------------------------------------------------------------------
  2396                                  ;
  2397                                  ;	Routine:	PutConsoleChar
  2398                                  ;
  2399                                  ;	Description:	Write one ASCII character to the console screen.
  2400                                  ;
  2401                                  ;	In:		AL	ASCII character
  2402                                  ;			DS	OS data selector
  2403                                  ;
  2404                                  ;-----------------------------------------------------------------------------------------------------------------------
  2405 0000065C 51                      PutConsoleChar		push	ecx						;save volatile regs
  2406 0000065D 06                      			push	es						;
  2407 0000065E 6A20                    			push	ESELCGA						;load CGA selector ...
  2408 00000660 07                      			pop	es						;... into extra segment reg
  2409 00000661 8A0D00080000            			mov	cl,[wbConsoleColumn]				;column
  2410 00000667 8A2D01080000            			mov	ch,[wbConsoleRow]				;row
  2411 0000066D E8E3010000              			call	SetConsoleChar					;put character at row, column
  2412 00000672 07                      			pop	es						;restore volatile regs
  2413 00000673 59                      			pop	ecx						;
  2414 00000674 C3                      			ret							;return to caller
  2415                                  ;-----------------------------------------------------------------------------------------------------------------------
  2416                                  ;
  2417                                  ;	Routine:	PutConsoleOIAShift
  2418                                  ;
  2419                                  ;	Description:	Update the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2420                                  ;
  2421                                  ;	Input:		bl	shift flags
  2422                                  ;			bh	lock flags
  2423                                  ;			ds	OS data selector
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426 00000675 51                      PutConsoleOIAShift	push	ecx						;save volatile regs
  2427 00000676 06                      			push	es						;
  2428 00000677 6A20                    			push	ESELCGA						;load CGA selector ...
  2429 00000679 07                      			pop	es						;... into ES register
  2430 0000067A B518                    			mov	ch,ECONOIAROW					;OIA row
  2431 0000067C B020                    			mov	al,EASCIISPACE					;space is default character
  2432 0000067E F6C302                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2433 00000681 7402                    			jz	.10						;no, skip ahead
  2434 00000683 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2435 00000685 B10E                    .10			mov	cl,14						;indicator column
  2436 00000687 E8C9010000              			call	SetConsoleChar					;display ASCII character
  2437 0000068C B020                    			mov	al,EASCIISPACE					;ASCII space
  2438 0000068E F6C310                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2439 00000691 7402                    			jz	.20						;no, skip ahead
  2440 00000693 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2441 00000695 B140                    .20			mov	cl,64						;indicator column
  2442 00000697 E8B9010000              			call	SetConsoleChar					;display ASCII character
  2443 0000069C B020                    			mov	al,EASCIISPACE					;ASCII space
  2444 0000069E F6C301                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2445 000006A1 7402                    			jz	.30						;no, skip ahead
  2446 000006A3 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2447 000006A5 B10F                    .30			mov	cl,15						;indicator column
  2448 000006A7 E8A9010000              			call	SetConsoleChar					;display ASCII character
  2449 000006AC B020                    			mov	al,EASCIISPACE					;ASCII space
  2450 000006AE F6C308                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2451 000006B1 7402                    			jz	.40						;no, skip ahead
  2452 000006B3 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2453 000006B5 B13F                    .40			mov	cl,63						;indicator column
  2454 000006B7 E899010000              			call	SetConsoleChar					;display ASCII character
  2455 000006BC B020                    			mov	al,EASCIISPACE					;ASCII space
  2456 000006BE F6C304                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2457 000006C1 7402                    			jz	.50						;no, skip ahead
  2458 000006C3 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2459 000006C5 B110                    .50			mov	cl,16						;indicator column
  2460 000006C7 E889010000              			call	SetConsoleChar					;display ASCII character
  2461 000006CC B020                    			mov	al,EASCIISPACE					;ASCII space
  2462 000006CE F6C320                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2463 000006D1 7402                    			jz	.60						;no, skip ahead
  2464 000006D3 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2465 000006D5 B13E                    .60			mov	cl,62						;indicator column
  2466 000006D7 E879010000              			call	SetConsoleChar					;display ASCII character
  2467 000006DC B020                    			mov	al,EASCIISPACE					;ASCII space
  2468 000006DE F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2469 000006E1 7402                    			jz	.70						;no, skip ahead
  2470 000006E3 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2471 000006E5 B14E                    .70			mov	cl,78						;indicator column
  2472 000006E7 E869010000              			call	SetConsoleChar					;display ASCII character
  2473 000006EC B020                    			mov	al,EASCIISPACE					;ASCII space
  2474 000006EE F6C702                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2475 000006F1 7402                    			jz	.80						;no, skip ahead
  2476 000006F3 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2477 000006F5 B14D                    .80			mov	cl,77						;indicator column
  2478 000006F7 E859010000              			call	SetConsoleChar					;display ASCII character
  2479 000006FC B020                    			mov	al,EASCIISPACE					;ASCII space
  2480 000006FE F6C701                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2481 00000701 7402                    			jz	.90						;no, skip ahead
  2482 00000703 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2483 00000705 B14C                    .90			mov	cl,76						;indicator column
  2484 00000707 E849010000              			call	SetConsoleChar					;display ASCII character
  2485 0000070C 07                      			pop	es						;restore volatile regs
  2486 0000070D 59                      			pop	ecx						;
  2487 0000070E C3                      			ret							;return to caller
  2488                                  ;-----------------------------------------------------------------------------------------------------------------------
  2489                                  ;
  2490                                  ;	Routine:	PutConsoleOIAChar
  2491                                  ;
  2492                                  ;	Description:	Update the Operator Information Area (OIA).
  2493                                  ;
  2494                                  ;	In:		ds	OS data selector
  2495                                  ;
  2496                                  ;-----------------------------------------------------------------------------------------------------------------------
  2497 0000070F 53                      PutConsoleOIAChar	push	ebx						;save volatile regs
  2498 00000710 51                      			push	ecx						;
  2499 00000711 56                      			push	esi						;
  2500 00000712 1E                      			push	ds						;
  2501 00000713 06                      			push	es						;
  2502 00000714 6A18                    			push	ESELDAT						;load OS data selector ...
  2503 00000716 1F                      			pop	ds						;... into data segment register
  2504 00000717 6A20                    			push	ESELCGA						;load CGA selector ...
  2505 00000719 07                      			pop	es						;... into extra segment register
  2506 0000071A BE05080000              			mov	esi,wbConsoleScan0				;scan codes address
  2507 0000071F B718                    			mov	bh,ECONOIAROW					;OIA row
  2508 00000721 B300                    			mov	bl,0						;starting column
  2509 00000723 B906000000              			mov	ecx,6						;maximum scan codes
  2510 00000728 51                      .10			push	ecx						;save remaining count
  2511 00000729 89D9                    			mov	ecx,ebx						;row, column
  2512 0000072B AC                      			lodsb							;read scan code
  2513 0000072C 08C0                    			or	al,al						;scan code present?
  2514 0000072E 7407                    			jz	.20						;no, skip ahead
  2515 00000730 E834000000              			call	PutConsoleHexByte				;display scan code
  2516 00000735 EB10                    			jmp	.30						;continue
  2517 00000737 B020                    .20			mov	al,' '						;ASCII space
  2518 00000739 E817010000              			call	SetConsoleChar					;display space
  2519 0000073E FEC1                    			inc	cl
  2520 00000740 B020                    			mov	al,' '						;ASCII space
  2521 00000742 E80E010000              			call	SetConsoleChar					;display space
  2522 00000747 80C302                  .30			add	bl,2						;next column (+2)
  2523 0000074A 59                      			pop	ecx						;restore remaining
  2524 0000074B E2DB                    			loop	.10						;next code
  2525 0000074D A00B080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2526 00000752 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2527 00000754 720D                    			jb	.40						;no, skip ahead
  2528 00000756 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2529 00000758 7709                    			ja	.40						;no, skip ahead
  2530 0000075A 88FD                    			mov	ch,bh						;OIA row
  2531 0000075C B128                    			mov	cl,40						;character display column
  2532 0000075E E8F2000000              			call	SetConsoleChar					;display ASCII character
  2533 00000763 07                      .40			pop	es						;restore volatile regs
  2534 00000764 1F                      			pop	ds						;
  2535 00000765 5E                      			pop	esi						;
  2536 00000766 59                      			pop	ecx						;
  2537 00000767 5B                      			pop	ebx						;
  2538 00000768 C3                      			ret							;return to caller
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  ;
  2541                                  ;	Routine:	PutConsoleHexByte
  2542                                  ;
  2543                                  ;	Description:	Write two ASCII characters to the console screen representing the value of a byte.
  2544                                  ;
  2545                                  ;	In:		al	byte value
  2546                                  ;			ch	row
  2547                                  ;			cl	column
  2548                                  ;			ds	OS data selector
  2549                                  ;			es	CGA selector
  2550                                  ;
  2551                                  ;-----------------------------------------------------------------------------------------------------------------------
  2552 00000769 53                      PutConsoleHexByte	push	ebx						;save volatile regs
  2553 0000076A 88C3                    			mov	bl,al						;save byte value
  2554 0000076C C0E804                  			shr	al,4						;hi-order nybble
  2555 0000076F 0C30                    			or	al,030h						;apply ASCII zone
  2556 00000771 3C3A                    			cmp	al,03ah						;numeric?
  2557 00000773 7202                    			jb	.10						;yes, skip ahead
  2558 00000775 0407                    			add	al,7						;add ASCII offset for alpha
  2559 00000777 E8D9000000              .10			call	SetConsoleChar					;display ASCII character
  2560 0000077C FEC1                    			inc	cl						;increment column
  2561 0000077E 88D8                    			mov	al,bl						;byte value
  2562 00000780 240F                    			and	al,0fh						;lo-order nybble
  2563 00000782 0C30                    			or	al,30h						;apply ASCII zone
  2564 00000784 3C3A                    			cmp	al,03ah						;numeric?
  2565 00000786 7202                    			jb	.20						;yes, skip ahead
  2566 00000788 0407                    			add	al,7						;add ASCII offset for alpha
  2567 0000078A E8C6000000              .20			call	SetConsoleChar					;display ASCII character
  2568 0000078F 5B                      			pop	ebx						;restore volatile regs
  2569 00000790 C3                      			ret							;return to caller
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  ;
  2572                                  ;	Message Queue Helper Routines
  2573                                  ;
  2574                                  ;	PutMessage
  2575                                  ;	GetMessage
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  ;
  2580                                  ;	Routine:	PutMessage
  2581                                  ;
  2582                                  ;	Description:	Add a message to the message queue.
  2583                                  ;
  2584                                  ;	Input:		ecx	hi-order data word
  2585                                  ;			edx	lo-order data word
  2586                                  ;
  2587                                  ;	Output:		CY	0 = success
  2588                                  ;				1 = fail: queue is full
  2589                                  ;
  2590                                  ;-----------------------------------------------------------------------------------------------------------------------
  2591 00000791 1E                      PutMessage		push	ds						;save volatile regs
  2592 00000792 6A2C                    			push	ESELMQ						;load task message queue selector ...
  2593 00000794 1F                      			pop	ds						;... into data segment register
  2594 00000795 A104000000              			mov	eax,[MQTail]					;tail ptr
  2595 0000079A 833800                  			cmp	dword [eax],0					;is queue full?
  2596 0000079D F9                      			stc							;assume failure
  2597 0000079E 7517                    			jne	.20						;yes, cannot store
  2598 000007A0 8910                    			mov	[eax],edx					;store lo-order data
  2599 000007A2 894804                  			mov	[eax+4],ecx					;store hi-order data
  2600 000007A5 83C008                  			add	eax,8						;next queue element adr
  2601 000007A8 25FC030000              			and	eax,03fch					;at end of queue?
  2602 000007AD 7502                    			jnz	.10						;no, skip ahead
  2603 000007AF B008                    			mov	al,8						;reset to top of queue
  2604 000007B1 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  2605 000007B6 F8                      			clc							;indicate success
  2606 000007B7 1F                      .20			pop	ds						;restore volatile regs
  2607 000007B8 C3                      			ret							;return to caller
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                  ;
  2610                                  ;	Routine:	GetMessage
  2611                                  ;
  2612                                  ;	Description:	Read and remove a message from the message queue.
  2613                                  ;
  2614                                  ;	Output:		eax	lo-order message data
  2615                                  ;			edx	hi-order message data
  2616                                  ;
  2617                                  ;			CY	0 = message read
  2618                                  ;				1 = no message to read
  2619                                  ;
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621 000007B9 53                      GetMessage		push	ebx						;save volatile regs
  2622 000007BA 51                      			push	ecx						;
  2623 000007BB 1E                      			push	ds						;
  2624 000007BC 6A2C                    			push	ESELMQ						;load message queue selector ...
  2625 000007BE 1F                      			pop	ds						;... into data segment register
  2626 000007BF 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  2627 000007C5 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  2628 000007C7 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2629 000007CA 09D0                    			or	eax,edx						;is queue empty?
  2630 000007CC F9                      			stc							;assume queue is emtpy
  2631 000007CD 741B                    			jz	.20						;yes, skip ahead
  2632 000007CF 31C9                    			xor	ecx,ecx						;store zero
  2633 000007D1 890B                    			mov	[ebx],ecx					;... in lo-order dword
  2634 000007D3 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  2635 000007D6 83C308                  			add	ebx,8						;next queue element
  2636 000007D9 81E3FC030000            			and	ebx,03fch					;at end of queue?
  2637 000007DF 7502                    			jnz	.10						;no, skip ahead
  2638 000007E1 B308                    			mov	bl,8						;reset to 1st entry
  2639 000007E3 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  2640 000007E9 F8                      			clc							;indicate message read
  2641 000007EA 1F                      .20			pop	ds						;restore volatile regs
  2642 000007EB 59                      			pop	ecx						;
  2643 000007EC 5B                      			pop	ebx						;
  2644 000007ED C3                      			ret							;return to caller
  2645                                  ;-----------------------------------------------------------------------------------------------------------------------
  2646                                  ;
  2647                                  ;	Memory-Mapped Video Routines
  2648                                  ;
  2649                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2650                                  ;
  2651                                  ;	ClearConsoleScreen
  2652                                  ;	ScrollConsoleRow
  2653                                  ;	SetConsoleChar
  2654                                  ;
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;	Routine:	ClearConsoleScreen
  2659                                  ;
  2660                                  ;	Description:	Clear the console (CGA) screen.
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663 000007EE 51                      ClearConsoleScreen	push	ecx						;save volatile regs
  2664 000007EF 57                      			push	edi						;
  2665 000007F0 1E                      			push	ds						;
  2666 000007F1 06                      			push	es						;
  2667 000007F2 6A18                    			push	ESELDAT						;load OS Data selector ...
  2668 000007F4 1F                      			pop	ds						;... into DS register
  2669 000007F5 6A20                    			push	ESELCGA						;load CGA selector ...
  2670 000007F7 07                      			pop	es						;... into ES register
  2671 000007F8 B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  2672 000007FD B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2673 00000802 31FF                    			xor	edi,edi						;target offset
  2674 00000804 FC                      			cld							;forward strings
  2675 00000805 F3AB                    			rep	stosd						;reset screen body
  2676 00000807 B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  2677 0000080C B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2678 00000811 F3AB                    			rep	stosd						;reset OIA line
  2679 00000813 30C0                    			xor	al,al						;zero register
  2680 00000815 A201080000              			mov	[wbConsoleRow],al				;reset console row
  2681 0000081A A200080000              			mov	[wbConsoleColumn],al				;reset console column
  2682 0000081F E845000000              			call	PlaceCursor					;place cursor at current position
  2683 00000824 07                      			pop	es						;restore volatile regs
  2684 00000825 1F                      			pop	ds						;
  2685 00000826 5F                      			pop	edi						;
  2686 00000827 59                      			pop	ecx						;
  2687 00000828 C3                      			ret							;return to caller
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                  ;
  2690                                  ;	Routine:	ScrollConsoleRow
  2691                                  ;
  2692                                  ;	Description:	Scroll console (text) screen up one row.
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695 00000829 51                      ScrollConsoleRow	push	ecx						;save volatile regs
  2696 0000082A 56                      			push	esi						;
  2697 0000082B 57                      			push	edi						;
  2698 0000082C 1E                      			push	ds						;
  2699 0000082D 06                      			push	es						;
  2700 0000082E 6A20                    			push	ESELCGA						;load CGA video selector ...
  2701 00000830 1F                      			pop	ds						;... into DS
  2702 00000831 6A20                    			push	ESELCGA						;load CGA video selector ...
  2703 00000833 07                      			pop	es						;... into ES
  2704 00000834 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2705 00000839 BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2706 0000083E 31FF                    			xor	edi,edi						;edi = target (line 1)
  2707 00000840 FC                      			cld							;forward strings
  2708 00000841 F3A5                    			rep	movsd						;move 24 lines up
  2709 00000843 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2710 00000848 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2711 0000084D F3AB                    			rep	stosd						;clear bottom row
  2712 0000084F 07                      			pop	es						;restore volatile regs
  2713 00000850 1F                      			pop	ds						;
  2714 00000851 5F                      			pop	edi						;
  2715 00000852 5E                      			pop	esi						;
  2716 00000853 59                      			pop	ecx						;
  2717 00000854 C3                      			ret							;return to caller
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;	Routine:	SetConsoleChar
  2721                                  ;
  2722                                  ;	Description:	Output an ASCII character at the given row and column.
  2723                                  ;
  2724                                  ;	In:		AL	ASCII character
  2725                                  ;			CL	column
  2726                                  ;			CH	row
  2727                                  ;			ES	CGA selector
  2728                                  ;
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730 00000855 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  2731 00000857 0FB6C5                  			movzx	eax,ch						;row
  2732 0000085A B450                    			mov	ah,ECONCOLS					;cols/row
  2733 0000085C F6E4                    			mul	ah						;row * cols/row
  2734 0000085E 00C8                    			add	al,cl						;add column
  2735 00000860 80D400                  			adc	ah,0						;handle carry
  2736 00000863 D1E0                    			shl	eax,1						;screen offset
  2737 00000865 268810                  			mov	[es:eax],dl					;store character
  2738 00000868 C3                      			ret							;return to caller
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  ;
  2741                                  ;	Input/Output Routines
  2742                                  ;
  2743                                  ;	These routines read and/or write directly to ports.
  2744                                  ;
  2745                                  ;	PlaceCursor
  2746                                  ;	PutPrimaryEndOfInt
  2747                                  ;	PutSecondaryEndOfInt
  2748                                  ;	ResetSystem
  2749                                  ;	SetKeyboardLamps
  2750                                  ;	WaitForKeyInBuffer
  2751                                  ;	WaitForKeyOutBuffer
  2752                                  ;
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                  ;
  2756                                  ;	Routine:	PlaceCursor
  2757                                  ;
  2758                                  ;	Description:	Position the cursor on the console.
  2759                                  ;
  2760                                  ;	In:		DS	OS data selector
  2761                                  ;
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763 00000869 51                      PlaceCursor		push	ecx						;save volatile regs
  2764 0000086A A001080000              			mov	al,[wbConsoleRow]				;al = row
  2765 0000086F B450                    			mov	ah,ECONCOLS					;ah = cols/row
  2766 00000871 F6E4                    			mul	ah						;row offset
  2767 00000873 020500080000            			add	al,[wbConsoleColumn]				;add column
  2768 00000879 80D400                  			adc	ah,0						;add overflow
  2769 0000087C 89C1                    			mov	ecx,eax						;screen offset
  2770 0000087E B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  2771 00000880 B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  2772 00000882 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2773 00000884 EE                      			out	dx,al						;select register
  2774 00000885 42                      			inc	edx						;data port
  2775 00000886 88E8                    			mov	al,ch						;hi-order cursor loc
  2776 00000888 EE                      			out	dx,al						;store hi-order loc
  2777 00000889 4A                      			dec	edx						;register select port
  2778 0000088A B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2779 0000088C EE                      			out	dx,al						;select register
  2780 0000088D 42                      			inc	edx						;data port
  2781 0000088E 88C8                    			mov	al,cl						;lo-order cursor loc
  2782 00000890 EE                      			out	dx,al						;store lo-order loc
  2783 00000891 59                      			pop	ecx						;restore volatile regs
  2784 00000892 C3                      			ret							;return to caller
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786                                  ;
  2787                                  ;	Routine:	PutPrimaryEndOfInt
  2788                                  ;
  2789                                  ;	Description:	Send non-specific end-of-interrupt signal to the primary PIC.
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792 00000893 FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2793 00000894 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2794 00000896 E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  2795 00000898 C3                      			ret							;return to caller
  2796                                  ;-----------------------------------------------------------------------------------------------------------------------
  2797                                  ;
  2798                                  ;	Routine:	PutSecondaryEndOfInt
  2799                                  ;
  2800                                  ;	Description:	Send non-specific end-of-interrupt signal to the secondary PIC.
  2801                                  ;
  2802                                  ;-----------------------------------------------------------------------------------------------------------------------
  2803 00000899 FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2804 0000089A B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2805 0000089C E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2806 0000089E C3                      			ret							;return to caller
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                  ;
  2809                                  ;	Routine:	ResetSystem
  2810                                  ;
  2811                                  ;	Description:	Restart the system using the 8042 controller
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814 0000089F B9FFFF1F00              ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  2815 000008A4 E2FE                    			loop	$						;clear interrupts
  2816 000008A6 B0FE                    			mov	al,EKEYCMDRESET					;mask out bit zero
  2817 000008A8 E664                    			out	EKEYPORTSTAT,al					;drive bit zero low
  2818 000008AA FB                      .10			sti							;enable maskable interrupts
  2819 000008AB F4                      			hlt							;halt until interrupt
  2820 000008AC EBFC                    			jmp	.10						;repeat until reset kicks in
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  ;
  2823                                  ;	Routine:	SetKeyboardLamps
  2824                                  ;
  2825                                  ;	Description:	Send the set/reset mode indicators command.
  2826                                  ;
  2827                                  ;	In:		bh	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2828                                  ;
  2829                                  ;-----------------------------------------------------------------------------------------------------------------------
  2830 000008AE E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2831 000008B3 B0ED                    			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2832 000008B5 E660                    			out	EKEYPORTDATA,al					;send command to 8042
  2833 000008B7 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2834 000008BC E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2835 000008BE E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  2836 000008C3 88F8                    			mov	al,bh						;set/reset lamps value
  2837 000008C5 E660                    			out	EKEYPORTDATA,al					;send lamps value
  2838 000008C7 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2839 000008CC E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2840 000008CE C3                      			ret							;return to caller
  2841                                  ;-----------------------------------------------------------------------------------------------------------------------
  2842                                  ;
  2843                                  ;	Routine:	WaitForKeyInBuffer
  2844                                  ;
  2845                                  ;	Description:	Wait for keyboard input buffer to be ready for input.
  2846                                  ;
  2847                                  ;	Out:		ZF	1 = Input buffer ready
  2848                                  ;				0 = Input buffer not ready after timeout
  2849                                  ;
  2850                                  ;-----------------------------------------------------------------------------------------------------------------------
  2851 000008CF 51                      WaitForKeyInBuffer	push	ecx						;save volatile regs
  2852 000008D0 B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2853 000008D5 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2854 000008D7 A802                    			test	al,EKEYBITIN					;is input buffer still full?
  2855 000008D9 E0FA                    			loopnz	.10						;yes, repeat till timeout
  2856 000008DB 59                      			pop	ecx						;restore volatile regs
  2857 000008DC C3                      			ret							;return to caller
  2858                                  ;-----------------------------------------------------------------------------------------------------------------------
  2859                                  ;
  2860                                  ;	Routine:	WaitForKeyOutBuffer
  2861                                  ;
  2862                                  ;	Description:	Wait for keyboard output buffer to have data to read.
  2863                                  ;
  2864                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2865                                  ;				1 = Output buffer empty after timeout
  2866                                  ;
  2867                                  ;-----------------------------------------------------------------------------------------------------------------------
  2868 000008DD 51                      WaitForKeyOutBuffer	push	ecx						;save volatile regs
  2869 000008DE B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2870 000008E3 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2871 000008E5 A801                    			test	al,EKEYBITOUT					;output buffer status bit
  2872 000008E7 E1FA                    			loopz	.10						;loop until output buffer bit
  2873 000008E9 59                      			pop	ecx						;restore volatile regs
  2874 000008EA C3                      			ret							;return to caller
  2875                                  ;-----------------------------------------------------------------------------------------------------------------------
  2876                                  ;
  2877                                  ;	End of the Kernel Function Library
  2878                                  ;
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880 000008EB 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  2881 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;	Console Task
  2885                                  ;
  2886                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2887                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2888                                  ;	screen and responds to user commands.
  2889                                  ;
  2890                                  ;-----------------------------------------------------------------------------------------------------------------------
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2894                                  ;
  2895                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2896                                  ;
  2897                                  ;-----------------------------------------------------------------------------------------------------------------------
  2898                                  section			constack						;console task stack
  2899 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901                                  ;
  2902                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2903                                  ;
  2904                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2905                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2906                                  ;	16 descriptors. Six are initially defined.
  2907                                  ;
  2908                                  ;-----------------------------------------------------------------------------------------------------------------------
  2909                                  section			conldt							;console local descriptors
  2910 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  2911 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  2912 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  2913 00000018 FFFF00000093C000        			dq	00C093000000FFFFh				;1C data
  2914 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  2915 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  2916 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2917                                  ;-----------------------------------------------------------------------------------------------------------------------
  2918                                  ;
  2919                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2920                                  ;
  2921                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2922                                  ;	segment. CS to console code.
  2923                                  ;
  2924                                  ;-----------------------------------------------------------------------------------------------------------------------
  2925                                  section			contss							;console task state segment
  2926 00000000 00000000                			dd	0						;00 back-link tss
  2927 00000004 00070000                			dd	0700h						;04 esp ring 0
  2928 00000008 14000000                			dd	0014h						;08 ss ring 0
  2929 0000000C 00070000                			dd	0700h						;0C esp ring 1
  2930 00000010 14000000                			dd	0014h						;10 es ring 1
  2931 00000014 00070000                			dd	0700h						;14 esp ring 2
  2932 00000018 14000000                			dd	0014h						;18 ss ring 2
  2933 0000001C 00000000                			dd	0						;1C cr ring 3
  2934 00000020 00000000                			dd	0						;20 eip
  2935 00000024 00020000                			dd	0200h						;24 eflags
  2936 00000028 00000000                			dd	0						;28 eax
  2937 0000002C 00000000                			dd	0						;2C ecx
  2938 00000030 00000000                			dd	0						;30 edx
  2939 00000034 00000000                			dd	0						;34 ebx
  2940 00000038 00070000                			dd	0700h						;38 esp ring 3
  2941 0000003C 00000000                			dd	0						;3C ebp
  2942 00000040 00000000                			dd	0						;40 esi
  2943 00000044 00000000                			dd	0						;44 edi
  2944 00000048 1C000000                			dd	001Ch						;48 es
  2945 0000004C 24000000                			dd	0024h						;4C cs
  2946 00000050 14000000                			dd	0014h						;50 ss ring 3
  2947 00000054 1C000000                			dd	001Ch						;54 ds
  2948 00000058 00000000                			dd	0						;58 fs
  2949 0000005C 00000000                			dd	0						;5c gs
  2950 00000060 50000000                			dd	0050h						;60 ldt selector in gdt
  2951 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2952                                  ;-----------------------------------------------------------------------------------------------------------------------
  2953                                  ;
  2954                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2955                                  ;
  2956                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2957                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2958                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2959                                  ;	event.
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  section			conmque							;console message queue
  2963 00000000 08000000                			dd	8						;head pointer
  2964 00000004 08000000                			dd	8						;tail pointer
  2965 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  2966                                  ;-----------------------------------------------------------------------------------------------------------------------
  2967                                  ;
  2968                                  ;	Console Code								@disk: 008400	@mem: 005000
  2969                                  ;
  2970                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2971                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2972                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2973                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2974                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2975                                  ;	board input, echoing to the console screen and responding to user commands.
  2976                                  ;
  2977                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2978                                  ;
  2979                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2980                                  ;				|  Real Mode Interrupt Vectors			|
  2981                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2982                                  ;				|  Reserved BIOS Memory Area			|
  2983                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2984                                  ;				|  Shared Kernel Memory Area			|
  2985                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2986                                  ;				|  Global Descriptor Table (GDT)		|
  2987                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2988                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2989                                  ;			002000	+-----------------------------------------------+
  2990                                  ;				|  Interrupt Handlers				|
  2991                                  ;				|  Kernel Function Library			|
  2992                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2993                                  ;				|  Console Task Stack Area			|
  2994                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2995                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2996                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2997                                  ;				|  Console Task Task State Segment (TSS)	|
  2998                                  ;			004800	+-----------------------------------------------+
  2999                                  ;				|  Console Task Message Queue			|
  3000                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3001                                  ;				|  Console Task Code				|
  3002                                  ;				|  Console Task Constants			|
  3003                                  ;			006000	+===============================================+
  3004                                  ;
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  section			concode	vstart=5000h					;labels relative to 5000h
  3007 00000000 E85E000000              ConCode			call	ConInitializeData				;initialize console variables
  3008                                  			clearConsoleScreen					;clear the console screen
  3008 00000005 B002                <1>  mov al,eClearConsoleScreen
  3008 00000007 CD30                <1>  int _svc
  3009                                  			putConsoleString czTitle				;display startup message
  3009 00000009 BA[E3000000]        <1>  mov edx,%1
  3009 0000000E B000                <1>  mov al,ePutConsoleString
  3009 00000010 CD30                <1>  int _svc
  3010                                  .10			putConsoleString czPrompt				;display input prompt
  3010                              <1> .10 :
  3010 00000012 BA[01010000]        <1>  mov edx,%1
  3010 00000017 B000                <1>  mov al,ePutConsoleString
  3010 00000019 CD30                <1>  int _svc
  3011                                  			placeCursor						;set CRT cursor location
  3011 0000001B B003                <1>  mov al,ePlaceCursor
  3011 0000001D CD30                <1>  int _svc
  3012                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3012 0000001F BA0C080000          <1>  mov edx,%1
  3012 00000024 B94F000000          <1>  mov ecx,%2
  3012 00000029 B701                <1>  mov bh,%3
  3012 0000002B B30D                <1>  mov bl,%4
  3012 0000002D B001                <1>  mov al,eGetConsoleString
  3012 0000002F CD30                <1>  int _svc
  3013                                  			putConsoleString czNewLine				;newline
  3013 00000031 BA[15010000]        <1>  mov edx,%1
  3013 00000036 B000                <1>  mov al,ePutConsoleString
  3013 00000038 CD30                <1>  int _svc
  3014 0000003A BB0C080000              			mov	ebx,wzConsoleInBuffer				;input buffer address
  3015 0000003F E838000000              			call	ConParseCommand					;parse the command line
  3016 00000044 83F803                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3017 00000047 720B                    			jb	.20						;yes, branch
  3018                                  			putConsoleString czUnknownCommand			;display error message
  3018 00000049 BA[03010000]        <1>  mov edx,%1
  3018 0000004E B000                <1>  mov al,ePutConsoleString
  3018 00000050 CD30                <1>  int _svc
  3019 00000052 EBBE                    			jmp	.10						;next command
  3020 00000054 C1E002                  .20			shl	eax,2						;index into jump table
  3021 00000057 BA[C4000000]            			mov	edx,tConJmpTbl					;jump table base address
  3022 0000005C 8B0402                  			mov	eax,[edx+eax]					;command handler routine address
  3023 0000005F FFD0                    			call	eax						;call command handler
  3024 00000061 EBAF                    			jmp	.10						;next command
  3025                                  ;-----------------------------------------------------------------------------------------------------------------------
  3026                                  ;
  3027                                  ;	Routine:	ConInitializeData
  3028                                  ;
  3029                                  ;	Description:	Initialize console variables used by the console task.
  3030                                  ;
  3031                                  ;-----------------------------------------------------------------------------------------------------------------------
  3032 00000063 51                      ConInitializeData	push	ecx						;save volatile regs
  3033 00000064 57                      			push	edi						;
  3034 00000065 06                      			push	es						;
  3035 00000066 6A18                    			push	ESELDAT						;load OS data selector ...
  3036 00000068 07                      			pop	es						;... into extra segment register
  3037 00000069 BF00080000              			mov	edi,ECONDATA					;OS console data address
  3038 0000006E 30C0                    			xor	al,al						;initialization value
  3039 00000070 B95C000000              			mov	ecx,ECONDATALEN					;size of OS console data
  3040 00000075 FC                      			cld							;forward strings
  3041 00000076 F3AA                    			rep	stosb						;initialize data
  3042 00000078 07                      			pop	es						;restore volatile regs
  3043 00000079 5F                      			pop	edi						;
  3044 0000007A 59                      			pop	ecx						;
  3045 0000007B C3                      			ret							;return to caller
  3046                                  ;-----------------------------------------------------------------------------------------------------------------------
  3047                                  ;
  3048                                  ;	Routine:	ConParseCommand
  3049                                  ;
  3050                                  ;	Description:	Parse console command
  3051                                  ;
  3052                                  ;	input:		ds:ebx	command address
  3053                                  ;
  3054                                  ;	output:		eax	command nbr
  3055                                  ;
  3056                                  ;-----------------------------------------------------------------------------------------------------------------------
  3057 0000007C 56                      ConParseCommand		push	esi						;save volatile regs
  3058 0000007D 57                      			push	edi						;
  3059                                  			leftTrimString						;left-trim string at ebx
  3059 0000007E B004                <1>  mov al,eLeftTrimString
  3059 00000080 CD30                <1>  int _svc
  3060                                  			rightTrimString						;right-trim string at ebx
  3060 00000082 B005                <1>  mov al,eRightTrimString
  3060 00000084 CD30                <1>  int _svc
  3061                                  			upperCaseString						;upper-case string at ebx
  3061 00000086 B006                <1>  mov al,eUpperCaseString
  3061 00000088 CD30                <1>  int _svc
  3062 0000008A 31FF                    			xor	edi,edi						;command nbr
  3063 0000008C BE[D0000000]            			mov	esi,tConCmdTbl					;commands table
  3064 00000091 FC                      .10			cld							;forward strings
  3065 00000092 AC                      			lodsb							;command length (including null)
  3066 00000093 08C0                    			or	al,al						;end of table?
  3067 00000095 7414                    			jz	.20						;yes, exit
  3068 00000097 0FB6C8                  			movzx	ecx,al						;length
  3069 0000009A 51                      			push	ecx						;save length
  3070 0000009B 89F2                    			mov	edx,esi						;command
  3071                                  			compareStrings						;compare strings at ebx,edx
  3071 0000009D B007                <1>  mov al,eCompareStrings
  3071 0000009F CD30                <1>  int _svc
  3072 000000A1 59                      			pop	ecx						;restore length
  3073 000000A2 09C0                    			or	eax,eax						;equal?
  3074 000000A4 7405                    			jz	.20						;yes, exit
  3075 000000A6 47                      			inc	edi						;increment command nbr
  3076 000000A7 01CE                    			add	esi,ecx						;point to next command
  3077 000000A9 EBE6                    			jmp	.10						;repeat
  3078 000000AB 89F8                    .20			mov	eax,edi						;command number
  3079 000000AD 5F                      			pop	edi						;restore volatile regs
  3080 000000AE 5E                      			pop	esi						;
  3081 000000AF C3                      			ret							;return to caller
  3082                                  ;-----------------------------------------------------------------------------------------------------------------------
  3083                                  ;
  3084                                  ;	Routine:	ConClearCommand
  3085                                  ;
  3086                                  ;	Description:	Handle the clear command
  3087                                  ;
  3088                                  ;-----------------------------------------------------------------------------------------------------------------------
  3089                                  ConClearCommand		clearConsoleScreen					;clear console screen
  3089                              <1> ConClearCommand :
  3089 000000B0 B002                <1>  mov al,eClearConsoleScreen
  3089 000000B2 CD30                <1>  int _svc
  3090 000000B4 C3                      			ret							;return to caller
  3091                                  ;-----------------------------------------------------------------------------------------------------------------------
  3092                                  ;
  3093                                  ;	Routine:	ConExit
  3094                                  ;
  3095                                  ;	Description:	Handle the exit  command
  3096                                  ;
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098                                  ConExit			resetSystem						;issue system reset
  3098                              <1> ConExit :
  3098 000000B5 B008                <1>  mov al,eResetSystem
  3098 000000B7 CD30                <1>  int _svc
  3099 000000B9 C3                      			ret							;return to caller
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101                                  ;
  3102                                  ;	Routine:	ConVersion
  3103                                  ;
  3104                                  ;	Description:	Handle the ver (version) command
  3105                                  ;
  3106                                  ;-----------------------------------------------------------------------------------------------------------------------
  3107                                  ConVersion		putConsoleString	czTitle				;display version message
  3107                              <1> ConVersion :
  3107 000000BA BA[E3000000]        <1>  mov edx,%1
  3107 000000BF B000                <1>  mov al,ePutConsoleString
  3107 000000C1 CD30                <1>  int _svc
  3108 000000C3 C3                      			ret							;return to caller
  3109                                  ;;-----------------------------------------------------------------------------------------------------------------------
  3110                                  ;
  3111                                  ;	Tables
  3112                                  ;
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114                                  tConJmpTbl		equ	$						;command jump table
  3115 000000C4 B0000000                			dd	ConClearCommand - ConCode			;clear command routine offset
  3116 000000C8 B5000000                			dd	ConExit - ConCode				;exit command routine offset
  3117 000000CC BA000000                			dd	ConVersion - ConCode				;ver command routine offset
  3118                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3119                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3120                                  tConCmdTbl		equ	$						;command name table
  3121 000000D0 06434C45415200          			db	6,"CLEAR",0					;clear screen command
  3122 000000D7 054558495400            			db	5,"EXIT",0					;exit command
  3123 000000DD 0456455200              			db	4,"VER",0					;version command
  3124 000000E2 00                      			db	0						;end of table
  3125                                  ;-----------------------------------------------------------------------------------------------------------------------
  3126                                  ;
  3127                                  ;	Constants
  3128                                  ;
  3129                                  ;-----------------------------------------------------------------------------------------------------------------------
  3130 000000E3 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3130 000000EC 65726174696E672053-
  3130 000000F5 797374656D20312E30-
  3130 000000FE 0D0A00             
  3131 00000101 3A00                    czPrompt		db	":",0						;prompt string
  3132 00000103 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3132 0000010C 6F6D6D616E640D0A00 
  3133 00000115 0D0A00                  czNewLine		db	13,10,0						;new line string
  3134 00000118 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  3135 00000FFE 55AA                    			db	055h,0AAh					;end of section
  3136                                  %endif
  3137                                  %ifdef BUILDDISK
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3141                                  ;
  3142                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3143                                  ;
  3144                                  ;-----------------------------------------------------------------------------------------------------------------------
  3145                                  section			unused							;unused disk space
  3146 00000000 F6<rept>                			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3147                                  %endif
