     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.007
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;                       clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   294                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   295                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   296                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   297                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   298                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   299                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   300                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Firmware-Defined Values
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;
   308                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   309                                  ;
   310                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   311                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   315                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   316                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   317                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   318                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   319                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   320                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   321                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   322                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   323                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   324                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       Standards-Based Values
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;
   332                                  ;       ASCII                                                                   EASCII...
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   336                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   337                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   338                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   339                                  EASCIISPACE             equ     020h                                            ;space
   340                                  EASCIIUPPERA            equ     041h                                            ;'A'
   341                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   342                                  EASCIILOWERA            equ     061h                                            ;'a'
   343                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   344                                  EASCIITILDE             equ     07Eh                                            ;'~'
   345                                  EASCIICASE              equ     00100000b                                       ;case bit
   346                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       Operating System Values
   350                                  ;
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   355                                  ;
   356                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   357                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   361                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   362                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   363                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   364                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   365                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   366                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  ;       Console Constants                                                       ECON...
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ECONCOLS                equ     80                                              ;columns per row
   371                                  ECONROWS                equ     24                                              ;console rows
   372                                  ECONOIAROW              equ     24                                              ;operator information area row
   373                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   374                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   375                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   376                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   377                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   382                                  EGDTCGA                 equ     020h                                            ;cga video selector
   383                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   384                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   385                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   386                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   387                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   388                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   389                                  ;-----------------------------------------------------------------------------------------------------------------------
   390                                  ;       Keyboard Flags                                                          EKEYF...
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   393                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   394                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   395                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   396                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   397                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   398                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   399                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   400                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   401                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   402                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;       Kernel Constants                                                        EKRN...
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   407                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   408                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   409                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ;       Message Identifiers                                                     EMSG...
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   418                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   419                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   420                                  ;=======================================================================================================================
   421                                  ;
   422                                  ;       Structures
   423                                  ;
   424                                  ;=======================================================================================================================
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  ;
   427                                  ;       MQUEUE
   428                                  ;
   429                                  ;       The MQUEUE structure maps memory used for a message queue.
   430                                  ;
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  struc                   MQUEUE
   433 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   434 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   435 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   436                                  endstruc
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ;
   439                                  ;       OSDATA
   440                                  ;
   441                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   442                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   443                                  ;
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  struc                   OSDATA
   446 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   447 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   448 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   449 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   450 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   451 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   452 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   453 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   454 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   455 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   456 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   457 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   458 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   459 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   460 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   461 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   462 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   463 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   464 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   465 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   466 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   467 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   468 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   469 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   470 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   471 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   472 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   473 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   474 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   475 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   476 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   477 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   478 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   479 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   480 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   481 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   482 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   483 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   484 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   485 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   486 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   487 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   488 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   489 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   490 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   491 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   492 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   493 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   494 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   495 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   496 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   497 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   498 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   499 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   500 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   501 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   502 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   503 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   504 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   505 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   506 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   507 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   508 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   509 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   510 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   511 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   512 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   513 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   514 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   515 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   516 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   517 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   518 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   519 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   520 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   521 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   522 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   523 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   524 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   525 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   526 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   527 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   528 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   529 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   530 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   531 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   532 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   533 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   534 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   535 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   536 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   537 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   538 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   539 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   540 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   541 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   542 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   543 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   544 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   545 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   546 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   550                                  ;
   551                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   552                                  ;
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ECONDATA                equ     ($)
   555 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   556 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   557 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   558 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   559 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   560 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   561 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   562 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   563 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   564 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   565 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   566 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   567 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   568 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   569                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   570                                  ;-----------------------------------------------------------------------------------------------------------------------
   571                                  ;
   572                                  ;       End of OS Variables
   573                                  ;
   574                                  ;-----------------------------------------------------------------------------------------------------------------------
   575                                  endstruc
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  ;
   578                                  ;       Macros
   579                                  ;
   580                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   581                                  ;
   582                                  ;-----------------------------------------------------------------------------------------------------------------------
   583                                  %macro                  mint    1
   584                                  _%1                     equ     ($-$$) / EX86DESCLEN
   585                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   586                                  %endmacro
   587                                  %macro                  mtrap   1
   588                                  _%1                     equ     ($-$$) / EX86DESCLEN
   589                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   590                                  %endmacro
   591                                  %macro                  menter  1
   592                                  ?%1                     equ     ($-$$)
   593                                  %endmacro
   594                                  %macro                  tsvce   1
   595                                  e%1                     equ     ($-tsvc)/4
   596                                                          dd      %1
   597                                  %endmacro
   598                                  %ifdef BUILDBOOT
   599                                  ;=======================================================================================================================
   600                                  ;
   601                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   602                                  ;
   603                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   604                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   605                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   606                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   607                                  ;
   608                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   609                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   610                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   611                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   612                                  ;       immediately followed by a disk parameter table.
   613                                  ;
   614                                  ;=======================================================================================================================
   615                                                          cpu     8086                                            ;assume minimal CPU
   616                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   617                                                          bits    16                                              ;16-bit code at power-up
   618                                  %ifdef BUILDPREP
   619                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   620                                  %else
   621 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   622                                  %endif
   623                                  ;-----------------------------------------------------------------------------------------------------------------------
   624                                  ;
   625                                  ;       Disk Parameter Table
   626                                  ;
   627                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   628                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   629                                  ;
   630                                  ;-----------------------------------------------------------------------------------------------------------------------
   631 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   632 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   633 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   634 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   635 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   636 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   637 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   638 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   639 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   640                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   641 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   642 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   643 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   644                                  ;
   645                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   646                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   647                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   648                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   649                                  ;       given several possible starting values for CS:IP.
   650                                  ;
   651                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   652 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   653                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   654 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   655 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   656 00000025 B104                                            mov     cl,4                                            ;shift count
   657 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   658 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   659 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   660                                  ;
   661                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   662                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   663                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   664                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   665                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   666                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   667                                  ;
   668 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   669 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   670 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   671 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   672 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   673                                  ;
   674                                  ;       Our boot addressability is now set up according to the following diagram.
   675                                  ;
   676                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   677                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   678                                  ;                               |  256 = 100h bytes                             |
   679                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   680                                  ;                               |  Boot Sector (vstart=0100h)                   |
   681                                  ;                               |  1 sector = 512 = 200h bytes                  |
   682                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   683                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   684                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   685                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   686                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   687                                  ;                               |  2 sectors = 1024 = 400h bytes
   688                                  ;                       009400  +-----------------------------------------------+ DS:1900
   689                                  ;
   690                                  ;       On entry, DL indicates the drive being booted from.
   691                                  ;
   692 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   693                                  ;
   694                                  ;       Compute directory i/o buffer address.
   695                                  ;
   696 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   697 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   698 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   699 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   700                                  ;
   701                                  ;       Compute segment where os.com will be loaded.
   702                                  ;
   703 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   704 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   705 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   706 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   707                                  ;
   708                                  ;       Set the video mode to 80 column, 25 row, text.
   709                                  ;
   710 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   711 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   712                                  ;
   713                                  ;       Write a message to the console so we know we have our addressability established.
   714                                  ;
   715 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   716 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   717                                  ;
   718                                  ;       Initialize the number of directory sectors to search.
   719                                  ;
   720 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   721 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   722                                  ;
   723                                  ;       Compute number of directory sectors and initialize overhead count.
   724                                  ;
   725 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   726 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   727 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   728 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   729                                  ;
   730                                  ;       Compute directory entries per sector.
   731                                  ;
   732 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   733 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   734 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   735                                  ;
   736                                  ;       Compute first logical directory sector and update overhead count.
   737                                  ;
   738 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   739 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   740 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   741 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   742 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   743 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   744                                  ;
   745                                  ;       Read directory sector.
   746                                  ;
   747 0000008E B001                    .30                     mov     al,1                                            ;sector count
   748 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   749 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   750 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   751                                  ;
   752                                  ;       Setup variables to search this directory sector.
   753                                  ;
   754 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   755 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   756 000000A1 7603                                            jna     .40                                             ;no, continue
   757 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   758 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   759 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   760 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   761                                  ;
   762                                  ;       Loop through directory sectors searching for kernel program.
   763                                  ;
   764 000000B1 56                      .50                     push    si                                              ;save kernel name address
   765 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   766 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   767 000000B6 FC                                              cld                                                     ;forward strings
   768 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   769 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   770 000000BA 5E                                              pop     si                                              ;restore kernel name address
   771 000000BB 7418                                            je      .60                                             ;exit loop if found
   772 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   773 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   774 000000C2 75ED                                            jnz     .50                                             ;next entry
   775                                  ;
   776                                  ;       Repeat search if we are not at the end of the directory.
   777                                  ;
   778 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   779 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   780 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   781 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   782 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   783                                  ;
   784                                  ;       If we find the kernel program in the directory, read the FAT.
   785                                  ;
   786 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   787 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   788 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   789 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   790 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   791 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   792                                  ;
   793                                  ;       Get the starting cluster of the kernel program and target address.
   794                                  ;
   795 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   796 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   797                                  ;
   798                                  ;       Read each program cluster into RAM.
   799                                  ;
   800 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   801 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   802 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   803 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   804 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   805 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   806 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   807 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   808 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   809                                  ;
   810                                  ;       Update buffer pointer for next cluster.
   811                                  ;
   812 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   813 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   814 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   815 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   816 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   817                                  ;
   818                                  ;       Compute next cluster number.
   819                                  ;
   820 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   821 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   822 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   823 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   824 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   825 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   826 00000120 83E701                                          and     di,1                                            ;get low bit
   827 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   828 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   829 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   830                                  ;
   831                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   832                                  ;
   833 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   834 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   835 00000130 B104                                            mov     cl,4                                            ;shift count
   836 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   837 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   838 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   839 0000013A 75B2                                            jne     .70                                             ;no, continue
   840                                  ;
   841                                  ;       Transfer control to the operating system program.
   842                                  ;
   843 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   844 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   845 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   846                                  ;
   847                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   848                                  ;
   849 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   850 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   851 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   852 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   853 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   854 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   855 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   856 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   857 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   858 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   859                                  ;
   860                                  ;       Try maxtries times to read sector.
   861                                  ;
   862 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   863 00000160 53                      .10                     push    bx                                              ;save buffer address
   864 00000161 51                                              push    cx                                              ;save retry count
   865 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   866 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   867 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   868 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   869 0000016F 59                                              pop     cx                                              ;restore retry count
   870 00000170 5B                                              pop     bx                                              ;restore buffer address
   871 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   872 00000173 E2EB                                            loop    .10                                             ;retry
   873                                  ;
   874                                  ;       Handle disk error: convert to ASCII and store in error string.
   875                                  ;
   876 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   877 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   878 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   879 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   880 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   881 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   882 00000183 7203                                            jb      .20                                             ;continue if numeral
   883 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   884 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   885 0000018A 7203                                            jb      .30                                             ;continue if numeral
   886 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   887 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   888 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   889 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   890                                  ;
   891                                  ;       Wait for a key press.
   892                                  ;
   893 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   894 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   895 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   896 0000019E FB                                              sti                                                     ;enable maskable interrupts
   897 0000019F F4                                              hlt                                                     ;wait for interrupt
   898 000001A0 EBF6                                            jmp     .10                                             ;repeat
   899                                  ;
   900                                  ;       Reset the system.
   901                                  ;
   902 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   903 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   904 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   905 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   906 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   907                                  ;
   908                                  ;       Display text message.
   909                                  ;
   910 000001AA FC                      BootPrint               cld                                                     ;forward strings
   911 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   912 000001AC 84C0                                            test    al,al                                           ;end of string?
   913 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   914 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   915 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   916 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   917 000001B6 C3                      BootReturn              ret                                                     ;return
   918                                  ;-----------------------------------------------------------------------------------------------------------------------
   919                                  ;
   920                                  ;       Constants
   921                                  ;
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923 000001B7 90                                              align   2
   924 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   925 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   925 000001C3 4F4D               
   926 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   926 000001CE 530D0A00           
   927 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   927 000001DB 7220               
   928 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   929 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   929 000001E9 6700               
   930                                  ;-----------------------------------------------------------------------------------------------------------------------
   931                                  ;
   932                                  ;       Work Areas
   933                                  ;
   934                                  ;-----------------------------------------------------------------------------------------------------------------------
   935 000001EB 90                                              align   2
   936 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   937 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   938 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   939 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   940 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   941                                  wwReadCountCommand      equ     $                                               ;read count and command
   942 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   943 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   944                                  wwDriveHead             equ     $                                               ;drive, head (word)
   945 000001F8 00                      wbDrive                 db      0                                               ;drive
   946 000001F9 00                      wbHead                  db      0                                               ;head
   947                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   948 000001FA 00                                              db      0                                               ;sector
   949 000001FB 00                      wbTrack                 db      0                                               ;track
   950 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   951 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   952                                  %endif
   953                                  %ifdef BUILDPREP
   954                                  ;=======================================================================================================================
   955                                  ;
   956                                  ;       Diskette Preparation Code
   957                                  ;
   958                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   959                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   960                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   961                                  ;
   962                                  ;=======================================================================================================================
   963                                  ;
   964                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   965                                  ;
   966                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   967                                                          call    BootPrint                                       ;display message
   968                                  ;
   969                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   970                                  ;
   971                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   972                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   973                                                          jnz     .20                                             ;continue if key pressed
   974                                                          sti                                                     ;enable interrupts
   975                                                          hlt                                                     ;wait for interrupt
   976                                                          jmp     .10                                             ;repeat
   977                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   978                                                          je      .30                                             ;yes, branch
   979                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   980                                                          jne     .10                                             ;no, repeat
   981                                                          jmp     .120                                            ;yes, exit program
   982                                  ;
   983                                  ;       Display writing-sector message and patch the JMP instruction.
   984                                  ;
   985                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   986                                                          call    BootPrint                                       ;display message
   987                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   988                                                          mov     ax,01Bh                                         ;address past disk parameter table
   989                                                          mov     [bx],ax                                         ;update the JMP instruction
   990                                  ;
   991                                  ;       Try to read the boot sector.
   992                                  ;
   993                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   994                                  .40                     push    cx                                              ;save remaining tries
   995                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   996                                                          mov     dx,0                                            ;head zero, drive zero
   997                                                          mov     cx,1                                            ;track zero, sector one
   998                                                          mov     al,1                                            ;one sector
   999                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1000                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1001                                                          pop     cx                                              ;restore remaining retries
  1002                                                          jnc     .50                                             ;skip ahead if successful
  1003                                                          loop    .40                                             ;try again
  1004                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1005                                                          jmp     .70                                             ;branch to error routine
  1006                                  ;
  1007                                  ;       Copy diskette parms from input buffer to output buffer.
  1008                                  ;
  1009                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1010                                                          add     si,11                                           ;skip over JMP and system ID
  1011                                                          mov     di,Boot                                         ;output buffer address
  1012                                                          add     di,11                                           ;skip over JMP and system ID
  1013                                                          mov     cx,19                                           ;length of diskette parameters
  1014                                                          cld                                                     ;forward string copies
  1015                                                          rep     movsb                                           ;copy diskette parameters
  1016                                  ;
  1017                                  ;       Try to write boot sector to diskette.
  1018                                  ;
  1019                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1020                                  .60                     push    cx                                              ;save remaining tries
  1021                                                          mov     bx,Boot                                         ;output buffer address
  1022                                                          mov     dx,0                                            ;head zero, drive zero
  1023                                                          mov     cx,1                                            ;track zero, sector one
  1024                                                          mov     al,1                                            ;one sector
  1025                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1026                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1027                                                          pop     cx                                              ;restore remaining retries
  1028                                                          jnc     .100                                            ;skip ahead if successful
  1029                                                          loop    .60                                             ;try again
  1030                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1031                                  ;
  1032                                  ;       Convert the error code to ASCII and display the error message.
  1033                                  ;
  1034                                  .70                     push    ax                                              ;save error code
  1035                                                          mov     al,ah                                           ;copy error code
  1036                                                          mov     ah,0                                            ;AX = error code
  1037                                                          mov     dl,10h                                          ;hexadecimal divisor
  1038                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1039                                                          or      ax,03030h                                       ;add ASCII zone digits
  1040                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1041                                                          jb      .80                                             ;yes, continue
  1042                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1043                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1044                                                          jb      .90                                             ;yes, continue
  1045                                                          add     al,7                                            ;no, make ASCII
  1046                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1047                                                          call    BootPrint                                       ;write error message
  1048                                                          pop     ax                                              ;restore error code
  1049                                  ;
  1050                                  ;       Display the completion message.
  1051                                  ;
  1052                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1053                                                          mov     al,ah                                           ;BIOS return code
  1054                                                          cmp     al,0                                            ;success?
  1055                                                          je      .110                                            ;yes, continue
  1056                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1057                                                          cmp     al,1                                            ;disk parameter error?
  1058                                                          je      .110                                            ;yes, continue
  1059                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1060                                                          cmp     al,2                                            ;address mark not found?
  1061                                                          je      .110                                            ;yes, continue
  1062                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1063                                                          cmp     al,3                                            ;protected disk?
  1064                                                          je      .110                                            ;yes, continue
  1065                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1066                                                          cmp     al,6                                            ;diskette removed?
  1067                                                          je      .110                                            ;yes, continue
  1068                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1069                                                          cmp     al,80H                                          ;drive timed out?
  1070                                                          je      .110                                            ;yes, continue
  1071                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1072                                  .110                    call    BootPrint                                       ;display result message
  1073                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1074                                                          int     021h                                            ;terminate DOS program
  1075                                                          ret                                                     ;return (should not execute)
  1076                                  ;-----------------------------------------------------------------------------------------------------------------------
  1077                                  ;
  1078                                  ;       Diskette Preparation Messages
  1079                                  ;
  1080                                  ;-----------------------------------------------------------------------------------------------------------------------
  1081                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1082                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1083                                                          db      13,10
  1084                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1085                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1086                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1087                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1088                                                          db      13,10,0
  1089                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1090                                                          db      13,10,0
  1091                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1092                                                          db      13,10,0
  1093                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1094                                                          db      13,10,0
  1095                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1096                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1097                                                          db      13,10,0
  1098                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1099                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1100                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1101                                                          db      13,10,"and retry."
  1102                                                          db      13,10,0
  1103                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1104                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1105                                                          db      13,10,"using another diskette."
  1106                                                          db      13,10,0
  1107                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1108                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1109                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1110                                                          db      13,10,0
  1111                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1112                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1113                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1114                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1115                                                          db      13,10,"is properly inserted in the diskette drive."
  1116                                                          db      13,10,0
  1117                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1118                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1119                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1120                                                          db      13,10,0
  1121                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1122                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1123                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1124                                                          db      13,10,0
  1125                                  wcPrepInBuf             equ     $
  1126                                  %endif
  1127                                  %ifdef BUILDDISK
  1128                                  ;=======================================================================================================================
  1129                                  ;
  1130                                  ;       File Allocation Tables
  1131                                  ;
  1132                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1133                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1134                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1135                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1136                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1137                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1138                                  ;       the last cluster in the chain.
  1139                                  ;
  1140                                  ;       Every three bytes encode two FAT entries as follows:
  1141                                  ;
  1142                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1143                                  ;
  1144                                  ;=======================================================================================================================
  1145                                  ;-----------------------------------------------------------------------------------------------------------------------
  1146                                  ;
  1147                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1148                                  ;
  1149                                  ;-----------------------------------------------------------------------------------------------------------------------
  1150                                  section                 fat1                                                    ;first copy of FAT
  1151 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1152 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1153 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1154 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1155 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1156 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1157 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1158 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1159 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1160 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1161 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1162 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1163                                  ;-----------------------------------------------------------------------------------------------------------------------
  1164                                  ;
  1165                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1166                                  ;
  1167                                  ;-----------------------------------------------------------------------------------------------------------------------
  1168                                  section                 fat2                                                    ;second copy of FAT
  1169 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1170 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1171 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1172 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1173 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1174 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1175 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1176 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1177 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1178 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1179 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1180 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1181                                  ;-----------------------------------------------------------------------------------------------------------------------
  1182                                  ;
  1183                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1184                                  ;
  1185                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1186                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1187                                  ;       copy.
  1188                                  ;
  1189                                  ;-----------------------------------------------------------------------------------------------------------------------
  1190                                  section                 dir                                                     ;diskette directory
  1191 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1191 00000009 4F4D               
  1192 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1193 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1194 00000016 0000                                            dw      0h                                              ;time
  1195 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1196 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1197 0000001A 0200                                            dw      2                                               ;first cluster
  1198 0000001C 00540000                                        dd      05400h                                          ;file size
  1199 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1200                                  %endif
  1201                                  %ifdef BUILDCOM
  1202                                  ;=======================================================================================================================
  1203                                  ;
  1204                                  ;       OS.COM
  1205                                  ;
  1206                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1207                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1208                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1209                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1210                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1211                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1212                                  ;
  1213                                  ;       Our loader addressability is set up according to the following diagram.
  1214                                  ;
  1215                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1216                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1217                                  ;                               |  256 = 100h bytes                             |
  1218                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1219                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1220                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1221                                  ;                       007e00  +-----------------------------------------------+
  1222                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1223                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1224                                  ;                               |                                               |
  1225                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1226                                  ;                               |                                               |
  1227                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1228                                  ;                               |  Loader Code                                  |
  1229                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1230                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1231                                  ;
  1232                                  ;=======================================================================================================================
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  ;
  1235                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1236                                  ;
  1237                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1238                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1239                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1240                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1241                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1242                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1243                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1244                                  ;       registers.
  1245                                  ;
  1246                                  ;-----------------------------------------------------------------------------------------------------------------------
  1247                                                          cpu     8086                                            ;assume minimal CPU
  1248                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1249                                                          bits    16                                              ;this is 16-bit code
  1250 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1251 00000001 1F                                              pop     ds                                              ;...as our data segment
  1252 00000002 0E                                              push    cs                                              ;use the code segment
  1253 00000003 07                                              pop     es                                              ;...as our extra segment
  1254                                  ;
  1255                                  ;       Write a message to the console so we know we have our addressability established.
  1256                                  ;
  1257 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1258 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1259                                  ;
  1260                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1261                                  ;
  1262 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1263 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1264 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1265 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1266                                                          cpu     386                                             ;allow 80386 instructions
  1267 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1268 00000017 E89600                                          call    PutTTYString                                    ;display message
  1269                                  ;
  1270                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1271                                  ;
  1272 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1273 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1274 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1275 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1276 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1277 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1278 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1279 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1280 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1281 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1282                                  ;
  1283                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1284                                  ;
  1285 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1286 00000038 07                                              pop     es                                              ;... as target segment
  1287 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1288 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1289 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1290 00000041 FC                                              cld                                                     ;forward strings
  1291 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1292 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1293 00000047 E86600                                          call    PutTTYString                                    ;display message
  1294                                  ;
  1295                                  ;       Switch to protected mode.
  1296                                  ;
  1297 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1298 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1299 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1300 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1301 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1302 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1303 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1304 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1305 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1306 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1307 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1308                                  ;
  1309                                  ;       Enable hardware and maskable interrupts.
  1310                                  ;
  1311 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1312 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1313 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1314 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1315                                  ;
  1316                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1317                                  ;
  1318 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1319 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1320 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1321                                  ;-----------------------------------------------------------------------------------------------------------------------
  1322                                  ;
  1323                                  ;       Routine:        LoaderExit
  1324                                  ;
  1325                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1326                                  ;
  1327                                  ;       In:             DS:SI   string address
  1328                                  ;
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1331                                  ;
  1332                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1333                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1334                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1335                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1336                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1337                                  ;
  1338 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1339 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1340 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1341 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1342 00000085 F4                                              hlt                                                     ;wait for interrupt
  1343 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1344                                  ;
  1345                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1346                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1347                                  ;       HLT until the system resets.
  1348                                  ;
  1349 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1350 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1351 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1352 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1353 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;       Routine:        GetCPUType
  1357                                  ;
  1358                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1359                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1360                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1361                                  ;
  1362                                  ;       Out:            AX      0 = 808x, v20, etc.
  1363                                  ;                               1 = 80186
  1364                                  ;                               2 = 80286
  1365                                  ;                               3 = 80386
  1366                                  ;
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1369 00000092 B120                                            mov     cl,32                                           ;shift count
  1370 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1371 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1372 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1373                                                          cpu     186
  1374 0000009A 54                                              push    sp                                              ;save stack pointer
  1375 0000009B 59                                              pop     cx                                              ;...into cx
  1376 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1377 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1378                                                          cpu     286
  1379 000000A0 40                                              inc     ax                                              ;AX = 2
  1380 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1381 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1382 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1383 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1384 000000AE 40                                              inc     ax                                              ;AX = 3
  1385 000000AF C3                      .10                     ret                                                     ;return
  1386                                  ;-----------------------------------------------------------------------------------------------------------------------
  1387                                  ;
  1388                                  ;       Routine:        PutTTYString
  1389                                  ;
  1390                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1391                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1392                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1393                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1394                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1395                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1396                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1397                                  ;                       to LODSB is not needed.
  1398                                  ;
  1399                                  ;       In:             DS:SI   address of string
  1400                                  ;
  1401                                  ;       Out:            DF      0
  1402                                  ;                       ZF      1
  1403                                  ;                       AL      0
  1404                                  ;
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1407 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1408 000000B2 84C0                                            test    al,al                                           ;end of string?
  1409 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1410 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1411 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1412 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1413 000000BC C3                      .20                     ret                                                     ;return
  1414                                  ;-----------------------------------------------------------------------------------------------------------------------
  1415                                  ;
  1416                                  ;       Loader Data
  1417                                  ;
  1418                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1419                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1420                                  ;
  1421                                  ;-----------------------------------------------------------------------------------------------------------------------
  1422 000000BD 90                                              align   2
  1423 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1424 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1425 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1426 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1427 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1427 000000D1 74696E672073797374-
  1427 000000DA 656D20726571756972-
  1427 000000E3 657320616E20693338-
  1427 000000EC 36206F72206C617465-
  1427 000000F5 722070726F63657373-
  1427 000000FE 6F722E0D0A         
  1428 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1428 0000010C 65737320616E79206B-
  1428 00000115 657920746F20726573-
  1428 0000011E 746172742074686520-
  1428 00000127 636F6D70757465722E-
  1428 00000130 0D0A00             
  1429 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1430 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1430 00000145 7265640D0A00       
  1431 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1431 00000154 616465640D0A00     
  1432 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1432 00000164 4F530D0A00         
  1433 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1434                                  ;=======================================================================================================================
  1435                                  ;
  1436                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1437                                  ;
  1438                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1439                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1440                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1441                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1442                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1443                                  ;
  1444                                  ;=======================================================================================================================
  1445                                  ;=======================================================================================================================
  1446                                  ;
  1447                                  ;       Kernel Tables
  1448                                  ;
  1449                                  ;=======================================================================================================================
  1450                                  ;-----------------------------------------------------------------------------------------------------------------------
  1451                                  ;
  1452                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1453                                  ;
  1454                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1455                                  ;       first descriptor must be all nulls.
  1456                                  ;
  1457                                  ;       6   5         4         3         2         1         0
  1458                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1459                                  ;       ----------------------------------------------------------------
  1460                                  ;       h......hffffmmmma......ab......................bn..............n
  1461                                  ;
  1462                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1463                                  ;               ffff                                                            flags
  1464                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1465                                  ;                       a......a                                                access
  1466                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1467                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1468                                  ;
  1469                                  ;       00000000                                                                all areas have base addresses below 2^24
  1470                                  ;               0...                                                            single-byte size granularity
  1471                                  ;               1...                                                            4-kilobyte size granularity
  1472                                  ;               .0..                                                            16-bit default for code segments
  1473                                  ;               .1..                                                            32-bit default for code segments
  1474                                  ;               ..0.                                                            intel-reserved; should be zero
  1475                                  ;               ...0                                                            available for operating system use
  1476                                  ;                   0000                                                        segment is less than 2^16 in size
  1477                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1478                                  ;                       1.......                                                segment is present in memory
  1479                                  ;                       .00.....                                                segment is of privilege level 0
  1480                                  ;                       ...0....                                                segment is of system or gate type
  1481                                  ;                       ...00010                                                local decriptor table (LDT)
  1482                                  ;                       ...01001                                                task state segment (TSS) available
  1483                                  ;                       ...01011                                                task state segment (TSS) busy
  1484                                  ;                       ...10...                                                data segment
  1485                                  ;                       ...10011                                                writable data (accessed)
  1486                                  ;                       ...11...                                                code segment
  1487                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1488                                  ;
  1489                                  ;-----------------------------------------------------------------------------------------------------------------------
  1490                                  section                 gdt                                                     ;global descriptor table
  1491 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1492 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1493 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1494 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1495 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1496 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1497 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1498 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1499 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1500 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1501 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1502 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1503 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1504 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1505 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1506                                  ;-----------------------------------------------------------------------------------------------------------------------
  1507                                  ;
  1508                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1509                                  ;
  1510                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1511                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1512                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1513                                  ;
  1514                                  ;       6   5         4         3         2         1         0
  1515                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1516                                  ;       ----------------------------------------------------------------
  1517                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1518                                  ;
  1519                                  ;       h...h   high-order offset (bits 16-31)
  1520                                  ;       P       present (0=unused interrupt)
  1521                                  ;       zz      descriptor privilege level
  1522                                  ;       S       storage segment (must be zero for IDT)
  1523                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1524                                  ;       S...S   handling code selector in GDT
  1525                                  ;       l...l   lo-order offset (bits 0-15)
  1526                                  ;
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  section                 idt                                                     ;interrupt descriptor table
  1529                                                          mint    dividebyzero                                    ;00 divide by zero
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mint    singlestep                                      ;01 single step
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mint    nmi                                             ;02 non-maskable
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mint    break                                           ;03 break
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mint    into                                            ;04 into
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mint    bounds                                          ;05 bounds
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mint    badopcode                                       ;06 bad op code
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mint    nocoproc                                        ;07 no coprocessor
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mint    doublefault                                     ;08 double-fault
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mint    operand                                         ;09 operand
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mint    badtss                                          ;0a bad TSS
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mint    notpresent                                      ;0b not-present
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mint    stacklimit                                      ;0c stack limit
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mint    protection                                      ;0d general protection fault
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mint    int14                                           ;0e (reserved)
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mint    int15                                           ;0f (reserved)
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mint    coproccalc                                      ;10 (reserved)
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mint    int17                                           ;11 (reserved)
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mint    int18                                           ;12 (reserved)
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mint    int19                                           ;13 (reserved)
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mint    int20                                           ;14 (reserved)
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mint    int21                                           ;15 (reserved)
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mint    int22                                           ;16 (reserved)
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mint    int23                                           ;17 (reserved)
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mint    int24                                           ;18 (reserved)
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mint    int25                                           ;19 (reserved)
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mint    int26                                           ;1a (reserved)
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mint    int27                                           ;1b (reserved)
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mint    int28                                           ;1c (reserved)
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mint    int29                                           ;1d (reserved)
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mint    int30                                           ;1e (reserved)
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    int31                                           ;1f (reserved)
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000100 3C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000108 8C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000110 E7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mtrap   com2                                            ;23 IRQ3 com2
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000118 EA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mtrap   com1                                            ;24 IRQ4 com1
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000120 ED054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000128 F0054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000130 F3054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000138 07064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000140 0A064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000148 0D064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 00000150 10064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 00000158 13064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 00000160 16064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 00000168 19064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 00000170 1C064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1576                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1576 00000178 1F064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                                          mtrap   svc                                             ;30 OS services
  1577                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1577 00000180 30064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1579                                  ;=======================================================================================================================
  1580                                  ;
  1581                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1582                                  ;
  1583                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1584                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1585                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1586                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1587                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1588                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1589                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1590                                  ;
  1591                                  ;=======================================================================================================================
  1592                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1593                                                          cpu     386                                             ;allow 80386 instructions
  1594                                                          bits    32                                              ;this is 32-bit code
  1595                                  ;=======================================================================================================================
  1596                                  ;
  1597                                  ;       CPU Interrupt Handlers
  1598                                  ;
  1599                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1600                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1601                                  ;
  1602                                  ;=======================================================================================================================
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                  ;
  1605                                  ;       INT0    Divide By Zero
  1606                                  ;
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                                          menter  dividebyzero                                    ;divide by zero
  1608                              <1> ?%1 equ ($-$$)
  1609 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1610 00000002 68[56010000]                                    push    czIntDivideByZero                               ;store message offset
  1611 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                  ;
  1614                                  ;       INT1    Single Step
  1615                                  ;
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                                          menter  singlestep                                      ;single step
  1617                              <1> ?%1 equ ($-$$)
  1618 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1619 0000000E 68[67010000]                                    push    czIntSingleStep                                 ;store message offset
  1620 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1621                                  ;-----------------------------------------------------------------------------------------------------------------------
  1622                                  ;
  1623                                  ;       INT2    Non-Maskable Interrupt
  1624                                  ;
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                                          menter  nmi                                             ;non-maskable
  1626                              <1> ?%1 equ ($-$$)
  1627 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1628 0000001A 68[73010000]                                    push    czIntNonMaskable                                ;store message offset
  1629 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  ;
  1632                                  ;       INT3    Break
  1633                                  ;
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                                          menter  break                                           ;break
  1635                              <1> ?%1 equ ($-$$)
  1636 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1637 00000026 68[8A010000]                                    push    czIntBreak                                      ;store message offset
  1638 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                  ;
  1641                                  ;       INT4    Into
  1642                                  ;
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                                          menter  into                                            ;into
  1644                              <1> ?%1 equ ($-$$)
  1645 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1646 00000032 68[90010000]                                    push    czIntInto                                       ;store message offset
  1647 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                  ;
  1650                                  ;       INT5    Bounds
  1651                                  ;
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                                          menter  bounds                                          ;bounds
  1653                              <1> ?%1 equ ($-$$)
  1654 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1655 0000003E 68[95010000]                                    push    czIntBounds                                     ;store message offset
  1656 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;       INT6    Bad Operation Code
  1660                                  ;
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                                          menter  badopcode                                       ;bad opcode interrupt
  1662                              <1> ?%1 equ ($-$$)
  1663 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1664 0000004A 68[9C010000]                                    push    czIntBadOpCode                                  ;store message offset
  1665 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                  ;
  1668                                  ;       INT7    No Coprocessor
  1669                                  ;
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1671                              <1> ?%1 equ ($-$$)
  1672 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1673 00000056 68[AF010000]                                    push    czIntNoCoprocessor                              ;store message offset
  1674 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                  ;
  1677                                  ;       INT8    Double Fault
  1678                                  ;
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                                          menter  doublefault                                     ;doublefault interrupt
  1680                              <1> ?%1 equ ($-$$)
  1681 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1682 00000062 68[BE010000]                                    push    czIntDoubleFault                                ;store message offset
  1683 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                  ;
  1686                                  ;       INT9    Operand
  1687                                  ;
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                                          menter  operand                                         ;operand interrupt
  1689                              <1> ?%1 equ ($-$$)
  1690 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1691 0000006E 68[CB010000]                                    push    czIntOperand                                    ;store message offset
  1692 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                  ;
  1695                                  ;       INT10   Bad Task State Segment
  1696                                  ;
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                                          menter  badtss                                          ;bad TSS interrupt
  1698                              <1> ?%1 equ ($-$$)
  1699 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1700 0000007A 68[D3010000]                                    push    czIntBadTSS                                     ;store message offset
  1701 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;       INT11   Not Present
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                                          menter  notpresent                                      ;not present interrupt
  1707                              <1> ?%1 equ ($-$$)
  1708 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1709 00000086 68[EA010000]                                    push    czIntNotPresent                                 ;store message offset
  1710 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                  ;
  1713                                  ;       INT12   Stack Limit
  1714                                  ;
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                                          menter  stacklimit                                      ;stack limit interrupt
  1716                              <1> ?%1 equ ($-$$)
  1717 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1718 00000092 68[F6010000]                                    push    czIntStackLimit                                 ;store message offset
  1719 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                  ;
  1722                                  ;       INT13   General Protection Fault
  1723                                  ;
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                                          menter  protection                                      ;protection fault interrupt
  1725                              <1> ?%1 equ ($-$$)
  1726 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1727 0000009E 68[02020000]                                    push    czIntProtection                                 ;store message offset
  1728 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                  ;
  1731                                  ;       INT14   Reserved
  1732                                  ;
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                                          menter  int14                                           ;(reserved)
  1734                              <1> ?%1 equ ($-$$)
  1735 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1736 000000AA 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1737 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                  ;
  1740                                  ;       INT15   Reserved
  1741                                  ;
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                                          menter  int15                                           ;(reserved)
  1743                              <1> ?%1 equ ($-$$)
  1744 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1745 000000B6 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1746 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                  ;
  1749                                  ;       INT16   Coprocessor Calculation
  1750                                  ;
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                                          menter  coproccalc                                      ;coprocessor calculation
  1752                              <1> ?%1 equ ($-$$)
  1753 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1754 000000C2 68[1B020000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1755 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                  ;
  1758                                  ;       INT17   Reserved
  1759                                  ;
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                                          menter  int17                                           ;(reserved)
  1761                              <1> ?%1 equ ($-$$)
  1762 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1763 000000CE 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1764 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                  ;
  1767                                  ;       INT18   Reserved
  1768                                  ;
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                                          menter  int18                                           ;(reserved)
  1770                              <1> ?%1 equ ($-$$)
  1771 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1772 000000D7 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1773 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                  ;
  1776                                  ;       INT19   Reserved
  1777                                  ;
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                                          menter  int19                                           ;(reserved)
  1779                              <1> ?%1 equ ($-$$)
  1780 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1781 000000E0 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1782 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT20   Reserved
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  int20                                           ;(reserved)
  1788                              <1> ?%1 equ ($-$$)
  1789 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1790 000000E9 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1791 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ;
  1794                                  ;       INT21   Reserved
  1795                                  ;
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                                          menter  int21                                           ;(reserved)
  1797                              <1> ?%1 equ ($-$$)
  1798 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1799 000000F2 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1800 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                  ;
  1803                                  ;       INT22   Reserved
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                                          menter  int22                                           ;(reserved)
  1806                              <1> ?%1 equ ($-$$)
  1807 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1808 000000FB 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1809 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  ;
  1812                                  ;       INT23   Reserved
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                                          menter  int23                                           ;(reserved)
  1815                              <1> ?%1 equ ($-$$)
  1816 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1817 00000104 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1818 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       INT24   Reserved
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                                          menter  int24                                           ;(reserved)
  1824                              <1> ?%1 equ ($-$$)
  1825 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1826 0000010D 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1827 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;       INT25   Reserved
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                                          menter  int25                                           ;(reserved)
  1833                              <1> ?%1 equ ($-$$)
  1834 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1835 00000116 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1836 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                  ;
  1839                                  ;       INT26   Reserved
  1840                                  ;
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                                          menter  int26                                           ;(reserved)
  1842                              <1> ?%1 equ ($-$$)
  1843 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1844 0000011F 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1845 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;       INT27   Reserved
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                                          menter  int27                                           ;(reserved)
  1851                              <1> ?%1 equ ($-$$)
  1852 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1853 00000128 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1854 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       INT28   Reserved
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  int28                                           ;(reserved)
  1860                              <1> ?%1 equ ($-$$)
  1861 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1862 00000131 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1863 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  ;
  1866                                  ;       INT29   Reserved
  1867                                  ;
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                                          menter  int29                                           ;(reserved)
  1869                              <1> ?%1 equ ($-$$)
  1870 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1871 0000013A 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1872 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       INT30   Reserved
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  int30                                           ;(reserved)
  1878                              <1> ?%1 equ ($-$$)
  1879 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1880 00000143 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1881 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       INT31   Reserved
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  int31                                           ;(reserved)
  1887                              <1> ?%1 equ ($-$$)
  1888 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1889 0000014C 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1890 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       Routine:        ReportInterrupt
  1894                                  ;
  1895                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1896                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1897                                  ;
  1898                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1899                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1900                                  ;
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902 00000153 58                      ReportInterrupt         pop     eax                                             ;error message address
  1903 00000154 58                                              pop     eax                                             ;interrupt number
  1904 00000155 CF                                              iretd                                                   ;return
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;       Processor Interrupt Name Strings
  1908                                  ;
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910 00000156 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  1910 0000015F 6279207A65726F00   
  1911 00000167 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  1911 00000170 657000             
  1912 00000173 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  1912 0000017C 626C6520696E746572-
  1912 00000185 7275707400         
  1913 0000018A 427265616B00            czIntBreak              db      "Break",0
  1914 00000190 496E746F00              czIntInto               db      "Into",0
  1915 00000195 426F756E647300          czIntBounds             db      "Bounds",0
  1916 0000019C 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  1916 000001A5 74696F6E20436F6465-
  1916 000001AE 00                 
  1917 000001AF 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  1917 000001B8 6573736F7200       
  1918 000001BE 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  1918 000001C7 756C7400           
  1919 000001CB 4F706572616E6400        czIntOperand            db      "Operand",0
  1920 000001D3 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  1920 000001DC 537461746520536567-
  1920 000001E5 6D656E7400         
  1921 000001EA 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  1921 000001F3 6E7400             
  1922 000001F6 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  1922 000001FF 697400             
  1923 00000202 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  1923 0000020B 726F74656374696F6E-
  1923 00000214 204661756C7400     
  1924 0000021B 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1924 00000224 6F722043616C63756C-
  1924 0000022D 6174696F6E00       
  1925 00000233 526573657276656400      czIntReserved           db      "Reserved",0
  1926                                  ;=======================================================================================================================
  1927                                  ;
  1928                                  ;       Hardware Device Interupts
  1929                                  ;
  1930                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1931                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1932                                  ;       (BX=2028h).
  1933                                  ;
  1934                                  ;=======================================================================================================================
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       IRQ0    Clock Tick Interrupt
  1938                                  ;
  1939                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1940                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1941                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1942                                  ;
  1943                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1944                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1945                                  ;
  1946                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1947                                  ;       zero, the floppy disk motors are turned off.
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  clocktick                                       ;clock tick interrupt
  1950                              <1> ?%1 equ ($-$$)
  1951 0000023C 50                                              push    eax                                             ;save non-volatile regs
  1952 0000023D 52                                              push    edx                                             ;
  1953 0000023E 1E                                              push    ds                                              ;
  1954                                  ;
  1955                                  ;       Update the clock tick count and the elapsed days as needed.
  1956                                  ;
  1957 0000023F 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1958 00000241 1F                                              pop     ds                                              ;... into data segment register
  1959 00000242 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1960 00000247 40                                              inc     eax                                             ;increment clock ticks
  1961 00000248 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1962 0000024D 7208                                            jb      irq0.10                                         ;no, skip ahead
  1963 0000024F FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1964 00000255 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1965 00000257 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1966                                  ;
  1967                                  ;       Decrement floppy disk motor timeout.
  1968                                  ;
  1969 0000025C 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1970 00000263 741E                                            je      irq0.20                                         ;yes, skip ahead
  1971 00000265 FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1972 0000026B 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1973                                  ;
  1974                                  ;       Turn off the floppy disk motor if appropriate.
  1975                                  ;
  1976 0000026D FB                                              sti                                                     ;enable maskable interrupts
  1977 0000026E B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1978 00000270 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1979 00000272 EC                                              in      al,dx                                           ;FDC main status byte
  1980 00000273 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1981 00000275 75F7                                            jnz     irq0.15                                         ;wait while busy
  1982 00000277 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1983 00000279 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1984 0000027E B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1985 00000280 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1986 00000282 EE                                              out     dx,al                                           ;turn motor off
  1987                                  ;
  1988                                  ;       Signal the end of the hardware interrupt.
  1989                                  ;
  1990 00000283 E85D070000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1991                                  ;
  1992                                  ;       Restore and return.
  1993                                  ;
  1994 00000288 1F                                              pop     ds                                              ;restore modified regs
  1995 00000289 5A                                              pop     edx                                             ;
  1996 0000028A 58                                              pop     eax                                             ;
  1997 0000028B CF                                              iretd                                                   ;return
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                  ;
  2000                                  ;       IRQ1    Keyboard Interrupt
  2001                                  ;
  2002                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2003                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2004                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2005                                  ;       ALL modified registers upon return.
  2006                                  ;
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                                          menter  keyboard                                        ;keyboard interrrupt
  2008                              <1> ?%1 equ ($-$$)
  2009 0000028C 50                                              push    eax                                             ;save non-volatile regs
  2010 0000028D 53                                              push    ebx                                             ;
  2011 0000028E 51                                              push    ecx                                             ;
  2012 0000028F 56                                              push    esi                                             ;
  2013 00000290 1E                                              push    ds                                              ;
  2014 00000291 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2015 00000293 1F                                              pop     ds                                              ;... into data segment register
  2016 00000294 30C0                                            xor     al,al                                           ;zero
  2017 00000296 A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2018 0000029B A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2019 000002A0 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2020 000002A5 A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2021 000002AA A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2022 000002AF A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2023 000002B4 B020                                            mov     al,' '                                          ;space
  2024 000002B6 A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2025 000002BB B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2026 000002BD F6D0                                            not     al                                              ;controller timeout mask
  2027 000002BF 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2028 000002C5 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2029 000002CB 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2030 000002D1 E859070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2031 000002D6 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2032 000002DC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2033 000002DE A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2034 000002E3 88C4                                            mov     ah,al                                           ;copy scan code 0
  2035 000002E5 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2036 000002E7 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2037 000002EA 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2038 000002F0 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2039 000002F3 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2040 000002F9 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2041 000002FB 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2042 000002FE 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2043 00000304 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2044 00000307 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2045 0000030D B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2046 0000030F 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2047 00000312 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2048 00000318 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2049 0000031B 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2050 00000321 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2051 00000323 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2052 00000326 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2053 0000032C 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2054 0000032F 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2055 00000335 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2056 00000337 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2057 0000033A 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2058 00000340 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2059 00000342 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2060 00000345 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2061 0000034B B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2062 0000034D 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2063 00000350 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2064 00000356 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2065 00000359 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2066 0000035F E8CB060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2067 00000364 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2068 0000036A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2069 0000036C A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2070 00000371 88C4                                            mov     ah,al                                           ;copy scan code 1
  2071 00000373 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2072 00000375 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2073 00000378 7456                                            je      irq1.30                                         ;yes, set flag
  2074 0000037A 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2075 0000037D 7455                                            je      irq1.40                                         ;yes, reset flag
  2076 0000037F B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2077 00000381 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2078 00000384 744A                                            je      irq1.30                                         ;yes, set flag
  2079 00000386 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2080 00000389 7449                                            je      irq1.40                                         ;yes, reset flag
  2081 0000038B 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2082 0000038E 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2083 00000394 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2084 00000397 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2085 0000039D 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2086 000003A0 7405                                            je      irq1.10                                         ;yes, continue
  2087 000003A2 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2088 000003A5 7524                                            jne     irq1.20                                         ;no, skip ahead
  2089 000003A7 E883060000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2090 000003AC 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2091 000003B2 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2092 000003B4 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2093 000003B9 E871060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2094 000003BE 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2095 000003C4 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2096 000003C6 A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2097 000003CB E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2098 000003D0 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2099 000003D2 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2100 000003D4 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2101 000003D6 20C3                                            and     bl,al                                           ;reset shift flag
  2102 000003D8 EB07                                            jmp     irq1.60                                         ;skip ahead
  2103 000003DA 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2104 000003DC E81F060000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2105 000003E1 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2106 000003E7 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2107 000003ED E825040000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2108 000003F2 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2109 000003F7 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2110 000003FA 7563                                            jne     irq1.80                                         ;no continue
  2111 000003FC E82E060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2112 00000401 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2113 00000407 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2114 00000409 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2115 0000040E 88C4                                            mov     ah,al                                           ;copy scan code 1
  2116 00000410 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2117 00000413 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2118 00000419 E811060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2119 0000041E 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2120 00000424 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2121 00000426 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2122 0000042B E8FF050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2123 00000430 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2124 00000436 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2125 00000438 A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2126 0000043D E8ED050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2127 00000442 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2128 00000448 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2129 0000044A A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2130 0000044F E8DB050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2131 00000454 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2132 00000456 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2133 00000458 A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2134 0000045D EB78                                            jmp     irq1.150                                        ;continue
  2135 0000045F 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2136 00000461 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2137 00000464 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2138 00000466 BE[E7040000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2139 0000046B F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2140 0000046E 7405                                            jz      irq1.90                                         ;no, skip ahead
  2141 00000470 BE[67050000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2142 00000475 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2143 00000478 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2144 0000047C F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2145 0000047F 7411                                            jz      irq1.100                                        ;no skip ahead
  2146 00000481 88C1                                            mov     cl,al                                           ;copy ASCII code
  2147 00000483 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2148 00000486 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2149 00000489 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2150 0000048B 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2151 0000048E 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2152 00000490 3420                                            xor     al,EASCIICASE                                   ;switch case
  2153 00000492 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2154 00000497 BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2155 0000049C F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2156 0000049F 7405                                            jz      irq1.120                                        ;no, skip ahead
  2157 000004A1 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2158 000004A6 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2159 000004AB 09C2                                            or      edx,eax                                         ;msg id and codes
  2160 000004AD 31C9                                            xor     ecx,ecx                                         ;null param
  2161 000004AF 50                                              push    eax                                             ;save codes
  2162 000004B0 E861040000                                      call    PutMessage                                      ;put message to console
  2163 000004B5 58                                              pop     eax                                             ;restore codes
  2164 000004B6 84C0                                            test    al,al                                           ;ASCII translation?
  2165 000004B8 7413                                            jz      irq1.130                                        ;no, skip ahead
  2166 000004BA BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2167 000004BF 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2168 000004C4 09C2                                            or      edx,eax                                         ;msg id and codes
  2169 000004C6 31C9                                            xor     ecx,ecx                                         ;null param
  2170 000004C8 E849040000                                      call    PutMessage                                      ;put message to console
  2171 000004CD EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2172 000004CF B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2173 000004D1 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2174 000004D7 E8E3020000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2175 000004DC E804050000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2176 000004E1 1F                                              pop     ds                                              ;restore non-volatile regs
  2177 000004E2 5E                                              pop     esi                                             ;
  2178 000004E3 59                                              pop     ecx                                             ;
  2179 000004E4 5B                                              pop     ebx                                             ;
  2180 000004E5 58                                              pop     eax                                             ;
  2181 000004E6 CF                                              iretd                                                   ;return
  2182                                  ;-----------------------------------------------------------------------------------------------------------------------
  2183                                  ;       Scan-Code to ASCII Translation Tables
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185 000004E7 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2186 000004EF 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2187 000004F7 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2188 000004FF 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2189 00000507 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2190 0000050F 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2191 00000517 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2192 0000051F 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2193 00000527 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2194 0000052F 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2195 00000537 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2196 0000053F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2197 00000547 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2198 0000054F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2199 00000557 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2200 0000055F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2201 00000567 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2202 0000056F 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2203 00000577 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2204 0000057F 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2205 00000587 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2206 0000058F 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2207 00000597 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2208 0000059F 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2209 000005A7 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2210 000005AF 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2211 000005B7 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2212 000005BF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2213 000005C7 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2214 000005CF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2215 000005D7 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2216 000005DF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                                          menter  iochannel                                       ;secondary 8259A cascade
  2222                              <1> ?%1 equ ($-$$)
  2223 000005E7 50                                              push    eax                                             ;save modified regs
  2224 000005E8 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2225                                  ;-----------------------------------------------------------------------------------------------------------------------
  2226                                  ;
  2227                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2228                                  ;
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230                                                          menter  com2                                            ;serial port 2 interrupt
  2230                              <1> ?%1 equ ($-$$)
  2231 000005EA 50                                              push    eax                                             ;save modified regs
  2232 000005EB EB3C                                            jmp     hwint                                           ;end interrupt and return
  2233                                  ;-----------------------------------------------------------------------------------------------------------------------
  2234                                  ;
  2235                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2236                                  ;
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                                          menter  com1                                            ;serial port 1 interrupt
  2238                              <1> ?%1 equ ($-$$)
  2239 000005ED 50                                              push    eax                                             ;save modified regs
  2240 000005EE EB39                                            jmp     hwint                                           ;end interrupt and return
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  ;
  2243                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2244                                  ;
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2246                              <1> ?%1 equ ($-$$)
  2247 000005F0 50                                              push    eax                                             ;save modified regs
  2248 000005F1 EB36                                            jmp     hwint                                           ;end interrupt and return
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  ;
  2251                                  ;       IRQ6    Diskette Hardware Interrupt
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                                          menter  diskette                                        ;floppy disk interrupt
  2254                              <1> ?%1 equ ($-$$)
  2255 000005F3 50                                              push    eax                                             ;save non-volatile regs
  2256 000005F4 1E                                              push    ds                                              ;
  2257 000005F5 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2258 000005F7 1F                                              pop     ds                                              ;... into DS register
  2259 000005F8 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2260 000005FD 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2261 000005FF A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2262 00000604 1F                                              pop     ds                                              ;restore non-volatile regs
  2263 00000605 EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2264                                  ;-----------------------------------------------------------------------------------------------------------------------
  2265                                  ;
  2266                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2267                                  ;
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2269                              <1> ?%1 equ ($-$$)
  2270 00000607 50                                              push    eax                                             ;save modified regs
  2271 00000608 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2272                                  ;-----------------------------------------------------------------------------------------------------------------------
  2273                                  ;
  2274                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2275                                  ;
  2276                                  ;-----------------------------------------------------------------------------------------------------------------------
  2277                                                          menter  rtclock                                         ;real-time clock interrupt
  2277                              <1> ?%1 equ ($-$$)
  2278 0000060A 50                                              push    eax                                             ;save modified regs
  2279 0000060B EB15                                            jmp     hwwint                                          ;end interrupt and return
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281                                  ;
  2282                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2283                                  ;
  2284                                  ;-----------------------------------------------------------------------------------------------------------------------
  2285                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2285                              <1> ?%1 equ ($-$$)
  2286 0000060D 50                                              push    eax                                             ;save modified regs
  2287 0000060E EB12                                            jmp     hwwint                                          ;end interrupt and return
  2288                                  ;-----------------------------------------------------------------------------------------------------------------------
  2289                                  ;
  2290                                  ;       IRQ10   Reserved Hardware Interrupt
  2291                                  ;
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                                          menter  irq10                                           ;reserved
  2293                              <1> ?%1 equ ($-$$)
  2294 00000610 50                                              push    eax                                             ;save modified regs
  2295 00000611 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2296                                  ;-----------------------------------------------------------------------------------------------------------------------
  2297                                  ;
  2298                                  ;       IRQ11   Reserved Hardware Interrupt
  2299                                  ;
  2300                                  ;-----------------------------------------------------------------------------------------------------------------------
  2301                                                          menter  irq11                                           ;reserved
  2301                              <1> ?%1 equ ($-$$)
  2302 00000613 50                                              push    eax                                             ;save modified regs
  2303 00000614 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  ;
  2306                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2307                                  ;
  2308                                  ;-----------------------------------------------------------------------------------------------------------------------
  2309                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2309                              <1> ?%1 equ ($-$$)
  2310 00000616 50                                              push    eax                                             ;save modified regs
  2311 00000617 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2312                                  ;-----------------------------------------------------------------------------------------------------------------------
  2313                                  ;
  2314                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2315                                  ;
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                                          menter  coprocessor                                     ;coprocessor interrupt
  2317                              <1> ?%1 equ ($-$$)
  2318 00000619 50                                              push    eax                                             ;save modified regs
  2319 0000061A EB06                                            jmp     hwwint                                          ;end interrupt and return
  2320                                  ;-----------------------------------------------------------------------------------------------------------------------
  2321                                  ;
  2322                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2323                                  ;
  2324                                  ;-----------------------------------------------------------------------------------------------------------------------
  2325                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2325                              <1> ?%1 equ ($-$$)
  2326 0000061C 50                                              push    eax                                             ;save modified regs
  2327 0000061D EB03                                            jmp     hwwint                                          ;end interrupt and return
  2328                                  ;-----------------------------------------------------------------------------------------------------------------------
  2329                                  ;
  2330                                  ;       IRQ15   Reserved Hardware Interrupt
  2331                                  ;
  2332                                  ;-----------------------------------------------------------------------------------------------------------------------
  2333                                                          menter  irq15                                           ;reserved
  2333                              <1> ?%1 equ ($-$$)
  2334 0000061F 50                                              push    eax                                             ;save modified regs
  2335 00000620 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2336                                  ;-----------------------------------------------------------------------------------------------------------------------
  2337                                  ;
  2338                                  ;       Exit from hardware interrupt
  2339                                  ;
  2340                                  ;-----------------------------------------------------------------------------------------------------------------------
  2341 00000622 E8C4030000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2342 00000627 EB05                                            jmp     hwint90                                         ;skip ahead
  2343 00000629 E8B7030000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2344 0000062E 58                      hwint90                 pop     eax                                             ;restore modified regs
  2345 0000062F CF                                              iretd                                                   ;return from interrupt
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       INT 30h Operating System Software Service Interrupt
  2349                                  ;
  2350                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2351                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2352                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2353                                  ;       the entry address of the specific function from a table.
  2354                                  ;
  2355                                  ;-----------------------------------------------------------------------------------------------------------------------
  2356                                                          menter  svc
  2356                              <1> ?%1 equ ($-$$)
  2357 00000630 3C07                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2358 00000632 730D                                            jae     svc90                                           ;yes, skip ahead
  2359 00000634 0FB6C0                                          movzx   eax,al                                          ;function
  2360 00000637 C1E002                                          shl     eax,2                                           ;offset into table
  2361 0000063A 2EFF90[42060000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2362 00000641 CF                      svc90                   iretd                                                   ;return from interrupt
  2363                                  ;-----------------------------------------------------------------------------------------------------------------------
  2364                                  ;
  2365                                  ;       Service Request Table
  2366                                  ;
  2367                                  ;
  2368                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2369                                  ;
  2370                                  ;-----------------------------------------------------------------------------------------------------------------------
  2371                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2371                              <1> tsvc :
  2371                              <1> e%1 equ ($-tsvc)/4
  2371 00000642 [3E090000]          <1>  dd %1
  2372                                                          tsvce   CompareMemory                                   ;compare memory
  2372                              <1> e%1 equ ($-tsvc)/4
  2372 00000646 [5E060000]          <1>  dd %1
  2373                                                          tsvce   GetConsoleString                                ;get string input
  2373                              <1> e%1 equ ($-tsvc)/4
  2373 0000064A [BF060000]          <1>  dd %1
  2374                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2374                              <1> e%1 equ ($-tsvc)/4
  2374 0000064E [BB090000]          <1>  dd %1
  2375                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2375                              <1> e%1 equ ($-tsvc)/4
  2375 00000652 [B1080000]          <1>  dd %1
  2376                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2376                              <1> e%1 equ ($-tsvc)/4
  2376 00000656 [F1090000]          <1>  dd %1
  2377                                                          tsvce   UpperCaseString                                 ;upper-case string
  2377                              <1> e%1 equ ($-tsvc)/4
  2377 0000065A [7B060000]          <1>  dd %1
  2378                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2379                                  ;-----------------------------------------------------------------------------------------------------------------------
  2380                                  ;
  2381                                  ;       Service Request Macros
  2382                                  ;
  2383                                  ;       These macros provide positional parameterization of service request calls.
  2384                                  ;
  2385                                  ;-----------------------------------------------------------------------------------------------------------------------
  2386                                  %macro                  clearConsoleScreen 0
  2387                                                          mov     al,eClearConsoleScreen                          ;function code
  2388                                                          int     _svc                                            ;invoke OS service
  2389                                  %endmacro
  2390                                  %macro                  compareMemory 0
  2391                                                          mov     al,eCompareMemory                               ;function code
  2392                                                          int     _svc                                            ;invoke OS service
  2393                                  %endmacro
  2394                                  %macro                  getConsoleString 4
  2395                                                          mov     edx,%1                                          ;buffer address
  2396                                                          mov     ecx,%2                                          ;max characters
  2397                                                          mov     bh,%3                                           ;echo indicator
  2398                                                          mov     bl,%4                                           ;terminator
  2399                                                          mov     al,eGetConsoleString                            ;function code
  2400                                                          int     _svc                                            ;invoke OS service
  2401                                  %endmacro
  2402                                  %macro                  placeCursor 0
  2403                                                          mov     al,ePlaceCursor                                 ;function code
  2404                                                          int     _svc                                            ;invoke OS service
  2405                                  %endmacro
  2406                                  %macro                  putConsoleString 1
  2407                                                          mov     edx,%1                                          ;string address
  2408                                                          mov     al,ePutConsoleString                            ;function code
  2409                                                          int     _svc                                            ;invoke OS service
  2410                                  %endmacro
  2411                                  %macro                  resetSystem 0
  2412                                                          mov     al,eResetSystem                                 ;function code
  2413                                                          int     _svc                                            ;invoke OS service
  2414                                  %endmacro
  2415                                  %macro                  upperCaseString 0
  2416                                                          mov     al,eUpperCaseString                             ;function code
  2417                                                          int     _svc                                            ;invoke OS service
  2418                                  %endmacro
  2419                                  ;=======================================================================================================================
  2420                                  ;
  2421                                  ;       Kernel Function Library
  2422                                  ;
  2423                                  ;=======================================================================================================================
  2424                                  ;=======================================================================================================================
  2425                                  ;
  2426                                  ;       String Helper Routines
  2427                                  ;
  2428                                  ;       CompareMemory
  2429                                  ;       UpperCaseString
  2430                                  ;
  2431                                  ;=======================================================================================================================
  2432                                  ;-----------------------------------------------------------------------------------------------------------------------
  2433                                  ;
  2434                                  ;       Routine:        CompareMemory
  2435                                  ;
  2436                                  ;       Description:    This routine compares two byte arrays.
  2437                                  ;
  2438                                  ;       In:             DS:EDX  first source address
  2439                                  ;                       DS:EBX  second source address
  2440                                  ;                       ECX     comparison length
  2441                                  ;
  2442                                  ;       Out:            EDX     first source address
  2443                                  ;                       EBX     second source address
  2444                                  ;                       ECX     0       array 1 = array 2
  2445                                  ;                               <0      array 1 < array 2
  2446                                  ;                               >0      array 1 > array 2
  2447                                  ;
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449 0000065E 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  2450 0000065F 57                                              push    edi                                             ;
  2451 00000660 06                                              push    es                                              ;
  2452 00000661 1E                                              push    ds                                              ;copy DS
  2453 00000662 07                                              pop     es                                              ;... to ES
  2454 00000663 89D6                                            mov     esi,edx                                         ;first source address
  2455 00000665 89DF                                            mov     edi,ebx                                         ;second source address
  2456 00000667 FC                                              cld                                                     ;forward strings
  2457 00000668 F3A6                                            rep     cmpsb                                           ;compare bytes
  2458 0000066A B000                                            mov     al,0                                            ;default result
  2459 0000066C 7406                                            jz      .10                                             ;branch if arrays equal
  2460 0000066E B001                                            mov     al,1                                            ;positive result
  2461 00000670 7302                                            jnc     .10                                             ;branch if target > source
  2462 00000672 B0FF                                            mov     al,-1                                           ;negative result
  2463 00000674 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  2464 00000677 07                                              pop     es                                              ;restore non-volatile regs
  2465 00000678 5F                                              pop     edi                                             ;
  2466 00000679 5E                                              pop     esi                                             ;
  2467 0000067A C3                                              ret                                                     ;return
  2468                                  ;-----------------------------------------------------------------------------------------------------------------------
  2469                                  ;
  2470                                  ;       Routine:        UpperCaseString
  2471                                  ;
  2472                                  ;       Description:    This routine places all characters in the given string to upper case.
  2473                                  ;
  2474                                  ;       In:             DS:EDX  string address
  2475                                  ;
  2476                                  ;       Out:            EDX     string address
  2477                                  ;
  2478                                  ;-----------------------------------------------------------------------------------------------------------------------
  2479 0000067B 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  2480 0000067C 89D6                                            mov     esi,edx                                         ;string address
  2481 0000067E FC                                              cld                                                     ;forward strings
  2482 0000067F AC                      .10                     lodsb                                                   ;string character
  2483 00000680 84C0                                            test    al,al                                           ;null?
  2484 00000682 740F                                            jz      .20                                             ;yes, skip ahead
  2485 00000684 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2486 00000686 72F7                                            jb      .10                                             ;no, continue
  2487 00000688 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2488 0000068A 77F3                                            ja      .10                                             ;no, continue
  2489 0000068C 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  2490 0000068E 8846FF                                          mov     [esi-1],al                                      ;upper character
  2491 00000691 EBEC                                            jmp     .10                                             ;continue
  2492 00000693 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  2493 00000694 C3                                              ret                                                     ;return
  2494                                  ;=======================================================================================================================
  2495                                  ;
  2496                                  ;       Console Helper Routines
  2497                                  ;
  2498                                  ;       FirstConsoleColumn
  2499                                  ;       GetConsoleChar
  2500                                  ;       GetConsoleString
  2501                                  ;       NextConsoleColumn
  2502                                  ;       NextConsoleRow
  2503                                  ;       PreviousConsoleColumn
  2504                                  ;       PutConsoleChar
  2505                                  ;       PutConsoleHexByte
  2506                                  ;       PutConsoleOIAChar
  2507                                  ;       PutConsoleOIAShift
  2508                                  ;       PutConsoleString
  2509                                  ;       Yield
  2510                                  ;
  2511                                  ;=======================================================================================================================
  2512                                  ;-----------------------------------------------------------------------------------------------------------------------
  2513                                  ;
  2514                                  ;       Routine:        FirstConsoleColumn
  2515                                  ;
  2516                                  ;       Description:    This routine resets the console column to start of the row.
  2517                                  ;
  2518                                  ;       In:             DS      OS data selector
  2519                                  ;
  2520                                  ;-----------------------------------------------------------------------------------------------------------------------
  2521 00000695 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2522 00000697 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2523 0000069C C3                                              ret                                                     ;return
  2524                                  ;-----------------------------------------------------------------------------------------------------------------------
  2525                                  ;
  2526                                  ;       Routine:        GetConsoleChar
  2527                                  ;
  2528                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2529                                  ;
  2530                                  ;       Out:            AL      ASCII character code
  2531                                  ;                       AH      keyboard scan code
  2532                                  ;
  2533                                  ;-----------------------------------------------------------------------------------------------------------------------
  2534 0000069D E83C020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2535 000006A2 E83A020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2536 000006A7 09C0                                            or      eax,eax                                         ;do we have a message?
  2537 000006A9 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2538 000006AB 50                                              push    eax                                             ;save key codes
  2539 000006AC 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2540 000006B1 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2541 000006B6 58                                              pop     eax                                             ;restore key codes
  2542 000006B7 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2543 000006B9 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2544 000006BE C3                                              ret                                                     ;return
  2545                                  ;-----------------------------------------------------------------------------------------------------------------------
  2546                                  ;
  2547                                  ;       Routine:        GetConsoleString
  2548                                  ;
  2549                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2550                                  ;
  2551                                  ;       In:             DS:EDX  target buffer address
  2552                                  ;                       ECX     maximum number of characters to accept
  2553                                  ;                       BH      echo to terminal
  2554                                  ;                       BL      terminating character
  2555                                  ;
  2556                                  ;-----------------------------------------------------------------------------------------------------------------------
  2557 000006BF 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2558 000006C0 56                                              push    esi                                             ;
  2559 000006C1 57                                              push    edi                                             ;
  2560 000006C2 06                                              push    es                                              ;
  2561 000006C3 1E                                              push    ds                                              ;load data segment selector ...
  2562 000006C4 07                                              pop     es                                              ;... into extra segment register
  2563 000006C5 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2564 000006C7 51                                              push    ecx                                             ;save maximum characters
  2565 000006C8 30C0                                            xor     al,al                                           ;zero register
  2566 000006CA FC                                              cld                                                     ;forward strings
  2567 000006CB F3AA                                            rep     stosb                                           ;zero fill buffer
  2568 000006CD 59                                              pop     ecx                                             ;maximum characters
  2569 000006CE 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2570 000006D0 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2571 000006D2 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2572 000006D4 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2573 000006D9 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2574 000006DB 7445                                            je      .50                                             ;yes, exit
  2575 000006DD 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2576 000006DF 7521                                            jne     .30                                             ;no, skip ahead
  2577 000006E1 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2578 000006E3 74EF                                            je      .20                                             ;yes, get next character
  2579 000006E5 4F                                              dec     edi                                             ;backup target pointer
  2580 000006E6 C60700                                          mov     byte [edi],0                                    ;zero previous character
  2581 000006E9 41                                              inc     ecx                                             ;increment remaining chars
  2582 000006EA F6C701                                          test    bh,1                                            ;echo to console?
  2583 000006ED 74E5                                            jz      .20                                             ;no, get next character
  2584 000006EF E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  2585 000006F4 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2586 000006F6 E891000000                                      call    PutConsoleChar                                  ;write space to console
  2587 000006FB E8BB020000                                      call    PlaceCursor                                     ;position the cursor
  2588 00000700 EBD2                                            jmp     .20                                             ;get next character
  2589 00000702 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2590 00000704 72CE                                            jb      .20                                             ;no, get another character
  2591 00000706 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2592 00000708 77CA                                            ja      .20                                             ;no, get another character
  2593 0000070A AA                                              stosb                                                   ;store character in buffer
  2594 0000070B F6C701                                          test    bh,1                                            ;echo to console?
  2595 0000070E 740F                                            jz      .40                                             ;no, skip ahead
  2596 00000710 E877000000                                      call    PutConsoleChar                                  ;write character to console
  2597 00000715 E810000000                                      call    NextConsoleColumn                               ;advance console position
  2598 0000071A E89C020000                                      call    PlaceCursor                                     ;position the cursor
  2599 0000071F 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2600 00000720 EBB0                                            jmp     .10                                             ;next
  2601 00000722 30C0                    .50                     xor     al,al                                           ;null
  2602 00000724 AA                                              stosb                                                   ;terminate buffer
  2603 00000725 07                                              pop     es                                              ;restore non-volatile regs
  2604 00000726 5F                                              pop     edi                                             ;
  2605 00000727 5E                                              pop     esi                                             ;
  2606 00000728 59                                              pop     ecx                                             ;
  2607 00000729 C3                                              ret                                                     ;return
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                  ;
  2610                                  ;       Routine:        NextConsoleColumn
  2611                                  ;
  2612                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2613                                  ;                       incremented if the end of the current row is reached.
  2614                                  ;
  2615                                  ;       In:             DS      OS data selector
  2616                                  ;
  2617                                  ;-----------------------------------------------------------------------------------------------------------------------
  2618 0000072A A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2619 0000072F FEC0                                            inc     al                                              ;increment column
  2620 00000731 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2621 00000736 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2622 00000738 720A                                            jb      .10                                             ;no, skip ahead
  2623 0000073A E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2624 0000073F E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2625 00000744 C3                      .10                     ret                                                     ;return
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  ;
  2628                                  ;       Routine:        NextConsoleRow
  2629                                  ;
  2630                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2631                                  ;
  2632                                  ;       In:             DS      OS data selector
  2633                                  ;
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635 00000745 A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2636 0000074A FEC0                                            inc     al                                              ;increment row
  2637 0000074C A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2638 00000751 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2639 00000753 7211                                            jb      .10                                             ;no, skip ahead
  2640 00000755 E81F020000                                      call    ScrollConsoleRow                                ;scroll up one row
  2641 0000075A A001080000                                      mov     al,[wbConsoleRow]                               ;row
  2642 0000075F FEC8                                            dec     al                                              ;decrement row
  2643 00000761 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2644 00000766 C3                      .10                     ret                                                     ;return
  2645                                  ;-----------------------------------------------------------------------------------------------------------------------
  2646                                  ;
  2647                                  ;       Routine:        PreviousConsoleColumn
  2648                                  ;
  2649                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2650                                  ;                       the column is set to the last position in the row and the row is decremented.
  2651                                  ;
  2652                                  ;       In:             DS      OS data selector
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655 00000767 A000080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2656 0000076C 08C0                                            or      al,al                                           ;start of row?
  2657 0000076E 7514                                            jnz     .10                                             ;no, skip ahead
  2658 00000770 8A2501080000                                    mov     ah,[wbConsoleRow]                               ;current row
  2659 00000776 08E4                                            or      ah,ah                                           ;top of screen?
  2660 00000778 7411                                            jz      .20                                             ;yes, exit with no change
  2661 0000077A FECC                                            dec     ah                                              ;decrement row
  2662 0000077C 882501080000                                    mov     [wbConsoleRow],ah                               ;save row
  2663 00000782 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  2664 00000784 FEC8                    .10                     dec     al                                              ;decrement column
  2665 00000786 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2666 0000078B C3                      .20                     ret                                                     ;return
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  ;
  2669                                  ;       Routine:        PutConsoleChar
  2670                                  ;
  2671                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2672                                  ;
  2673                                  ;       In:             AL      ASCII character
  2674                                  ;                       DS      OS data selector
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677 0000078C 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2678 0000078D 06                                              push    es                                              ;
  2679 0000078E 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2680 00000790 07                                              pop     es                                              ;... into extra segment reg
  2681 00000791 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2682 00000797 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  2683 0000079D E803020000                                      call    SetConsoleChar                                  ;put character at row, column
  2684 000007A2 07                                              pop     es                                              ;restore non-volatile regs
  2685 000007A3 59                                              pop     ecx                                             ;
  2686 000007A4 C3                                              ret                                                     ;return
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                  ;
  2689                                  ;       Routine:        PutConsoleHexByte
  2690                                  ;
  2691                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2692                                  ;
  2693                                  ;       In:             AL      byte value
  2694                                  ;                       CL      column
  2695                                  ;                       CH      row
  2696                                  ;                       DS      OS data selector
  2697                                  ;                       ES      CGA selector
  2698                                  ;
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700 000007A5 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2701 000007A6 C0E804                                          shr     al,4                                            ;hi-order nybble
  2702 000007A9 E803000000                                      call    .10                                             ;make ASCII and store
  2703 000007AE 58                                              pop     eax                                             ;byte value
  2704 000007AF 240F                                            and     al,0Fh                                          ;lo-order nybble
  2705 000007B1 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  2706 000007B3 3C3A                                            cmp     al,03Ah                                         ;numeric?
  2707 000007B5 7202                                            jb      .20                                             ;yes, skip ahead
  2708 000007B7 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2709 000007B9 E8E7010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2710 000007BE C3                                              ret                                                     ;return
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;
  2713                                  ;       Routine:        PutConsoleOIAChar
  2714                                  ;
  2715                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2716                                  ;
  2717                                  ;       In:             DS      OS data selector
  2718                                  ;
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720 000007BF 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2721 000007C0 51                                              push    ecx                                             ;
  2722 000007C1 56                                              push    esi                                             ;
  2723 000007C2 1E                                              push    ds                                              ;
  2724 000007C3 06                                              push    es                                              ;
  2725 000007C4 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2726 000007C6 1F                                              pop     ds                                              ;... into data segment register
  2727 000007C7 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2728 000007C9 07                                              pop     es                                              ;... into extra segment register
  2729 000007CA BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2730 000007CF B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2731 000007D1 B300                                            mov     bl,0                                            ;starting column
  2732 000007D3 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2733 000007D8 51                      .10                     push    ecx                                             ;save remaining count
  2734 000007D9 89D9                                            mov     ecx,ebx                                         ;row, column
  2735 000007DB AC                                              lodsb                                                   ;read scan code
  2736 000007DC 08C0                                            or      al,al                                           ;scan code present?
  2737 000007DE 7407                                            jz      .20                                             ;no, skip ahead
  2738 000007E0 E8C0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2739 000007E5 EB0E                                            jmp     .30                                             ;continue
  2740 000007E7 B020                    .20                     mov     al,' '                                          ;ASCII space
  2741 000007E9 E8B7010000                                      call    SetConsoleChar                                  ;display space
  2742 000007EE B020                                            mov     al,' '                                          ;ASCII space
  2743 000007F0 E8B0010000                                      call    SetConsoleChar                                  ;display space
  2744 000007F5 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2745 000007F8 59                                              pop     ecx                                             ;restore remaining
  2746 000007F9 E2DD                                            loop    .10                                             ;next code
  2747 000007FB A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2748 00000800 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2749 00000802 720D                                            jb      .40                                             ;no, skip ahead
  2750 00000804 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2751 00000806 7709                                            ja      .40                                             ;no, skip ahead
  2752 00000808 88FD                                            mov     ch,bh                                           ;OIA row
  2753 0000080A B128                                            mov     cl,40                                           ;character display column
  2754 0000080C E894010000                                      call    SetConsoleChar                                  ;display ASCII character
  2755 00000811 07                      .40                     pop     es                                              ;restore non-volatile regs
  2756 00000812 1F                                              pop     ds                                              ;
  2757 00000813 5E                                              pop     esi                                             ;
  2758 00000814 59                                              pop     ecx                                             ;
  2759 00000815 5B                                              pop     ebx                                             ;
  2760 00000816 C3                                              ret                                                     ;return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       Routine:        PutConsoleOIAShift
  2764                                  ;
  2765                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2766                                  ;
  2767                                  ;       In:             BL      shift flags
  2768                                  ;                       BH      lock flags
  2769                                  ;                       DS      OS data selector
  2770                                  ;
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772 00000817 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2773 00000818 06                                              push    es                                              ;
  2774 00000819 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2775 0000081B 07                                              pop     es                                              ;... into ES register
  2776 0000081C B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2777 0000081E B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2778 00000820 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2779 00000823 7402                                            jz      .10                                             ;no, skip ahead
  2780 00000825 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2781 00000827 B10E                    .10                     mov     cl,14                                           ;indicator column
  2782 00000829 E877010000                                      call    SetConsoleChar                                  ;display ASCII character
  2783 0000082E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2784 00000830 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2785 00000833 7402                                            jz      .20                                             ;no, skip ahead
  2786 00000835 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2787 00000837 B140                    .20                     mov     cl,64                                           ;indicator column
  2788 00000839 E867010000                                      call    SetConsoleChar                                  ;display ASCII character
  2789 0000083E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2790 00000840 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2791 00000843 7402                                            jz      .30                                             ;no, skip ahead
  2792 00000845 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2793 00000847 B10F                    .30                     mov     cl,15                                           ;indicator column
  2794 00000849 E857010000                                      call    SetConsoleChar                                  ;display ASCII character
  2795 0000084E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2796 00000850 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2797 00000853 7402                                            jz      .40                                             ;no, skip ahead
  2798 00000855 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2799 00000857 B13F                    .40                     mov     cl,63                                           ;indicator column
  2800 00000859 E847010000                                      call    SetConsoleChar                                  ;display ASCII character
  2801 0000085E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2802 00000860 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2803 00000863 7402                                            jz      .50                                             ;no, skip ahead
  2804 00000865 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2805 00000867 B110                    .50                     mov     cl,16                                           ;indicator column
  2806 00000869 E837010000                                      call    SetConsoleChar                                  ;display ASCII character
  2807 0000086E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2808 00000870 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2809 00000873 7402                                            jz      .60                                             ;no, skip ahead
  2810 00000875 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2811 00000877 B13E                    .60                     mov     cl,62                                           ;indicator column
  2812 00000879 E827010000                                      call    SetConsoleChar                                  ;display ASCII character
  2813 0000087E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2814 00000880 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2815 00000883 7402                                            jz      .70                                             ;no, skip ahead
  2816 00000885 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2817 00000887 B14E                    .70                     mov     cl,78                                           ;indicator column
  2818 00000889 E817010000                                      call    SetConsoleChar                                  ;display ASCII character
  2819 0000088E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2820 00000890 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2821 00000893 7402                                            jz      .80                                             ;no, skip ahead
  2822 00000895 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2823 00000897 B14D                    .80                     mov     cl,77                                           ;indicator column
  2824 00000899 E807010000                                      call    SetConsoleChar                                  ;display ASCII character
  2825 0000089E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2826 000008A0 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2827 000008A3 7402                                            jz      .90                                             ;no, skip ahead
  2828 000008A5 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2829 000008A7 B14C                    .90                     mov     cl,76                                           ;indicator column
  2830 000008A9 E8F7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2831 000008AE 07                                              pop     es                                              ;restore non-volatile regs
  2832 000008AF 59                                              pop     ecx                                             ;
  2833 000008B0 C3                                              ret                                                     ;return
  2834                                  ;-----------------------------------------------------------------------------------------------------------------------
  2835                                  ;
  2836                                  ;       Routine:        PutConsoleString
  2837                                  ;
  2838                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2839                                  ;                       console position as needed.
  2840                                  ;
  2841                                  ;       In:             EDX     source address
  2842                                  ;                       DS      OS data selector
  2843                                  ;
  2844                                  ;-----------------------------------------------------------------------------------------------------------------------
  2845 000008B1 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  2846 000008B2 89D6                                            mov     esi,edx                                         ;source address
  2847 000008B4 FC                                              cld                                                     ;forward strings
  2848 000008B5 AC                      .10                     lodsb                                                   ;ASCII character
  2849 000008B6 08C0                                            or      al,al                                           ;end of string?
  2850 000008B8 7422                                            jz      .40                                             ;yes, skip ahead
  2851 000008BA 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  2852 000008BC 7507                                            jne     .20                                             ;no, skip ahead
  2853 000008BE E8D2FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  2854 000008C3 EBF0                                            jmp     .10                                             ;next character
  2855 000008C5 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2856 000008C7 7507                                            jne     .30                                             ;no, skip ahead
  2857 000008C9 E877FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  2858 000008CE EBE5                                            jmp     .10                                             ;next character
  2859 000008D0 E8B7FEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  2860 000008D5 E850FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  2861 000008DA EBD9                                            jmp     .10                                             ;next character
  2862 000008DC 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  2863 000008DD C3                                              ret                                                     ;return
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  ;
  2866                                  ;       Routine:        Yield
  2867                                  ;
  2868                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2869                                  ;
  2870                                  ;-----------------------------------------------------------------------------------------------------------------------
  2871 000008DE FB                      Yield                   sti                                                     ;enable maskagle interrupts
  2872 000008DF F4                                              hlt                                                     ;halt until external interrupt
  2873 000008E0 C3                                              ret                                                     ;return
  2874                                  ;=======================================================================================================================
  2875                                  ;
  2876                                  ;       Message Queue Helper Routines
  2877                                  ;
  2878                                  ;       GetMessage
  2879                                  ;       PutMessage
  2880                                  ;
  2881                                  ;=======================================================================================================================
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;       Routine:        GetMessage
  2885                                  ;
  2886                                  ;       Description:    This routine reads and removes a message from the message queue.
  2887                                  ;
  2888                                  ;       Out:            EAX     lo-order message data
  2889                                  ;                       EDX     hi-order message data
  2890                                  ;
  2891                                  ;                       CY      0 = message read
  2892                                  ;                               1 = no message to read
  2893                                  ;
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895 000008E1 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  2896 000008E2 51                                              push    ecx                                             ;
  2897 000008E3 1E                                              push    ds                                              ;
  2898 000008E4 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  2899 000008E6 1F                                              pop     ds                                              ;... into data segment register
  2900 000008E7 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  2901 000008ED 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  2902 000008EF 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2903 000008F2 09D0                                            or      eax,edx                                         ;is queue empty?
  2904 000008F4 F9                                              stc                                                     ;assume queue is emtpy
  2905 000008F5 741B                                            jz      .20                                             ;yes, skip ahead
  2906 000008F7 31C9                                            xor     ecx,ecx                                         ;store zero
  2907 000008F9 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  2908 000008FB 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2909 000008FE 83C308                                          add     ebx,8                                           ;next queue element
  2910 00000901 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  2911 00000907 7502                                            jnz     .10                                             ;no, skip ahead
  2912 00000909 B308                                            mov     bl,8                                            ;reset to 1st entry
  2913 0000090B 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2914 00000911 F8                                              clc                                                     ;indicate message read
  2915 00000912 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2916 00000913 59                                              pop     ecx                                             ;
  2917 00000914 5B                                              pop     ebx                                             ;
  2918 00000915 C3                                              ret                                                     ;return
  2919                                  ;-----------------------------------------------------------------------------------------------------------------------
  2920                                  ;
  2921                                  ;       Routine:        PutMessage
  2922                                  ;
  2923                                  ;       Description:    This routine adda a message to the message queue.
  2924                                  ;
  2925                                  ;       In:             ECX     hi-order data word
  2926                                  ;                       EDX     lo-order data word
  2927                                  ;
  2928                                  ;       Out:            CY      0 = success
  2929                                  ;                               1 = fail: queue is full
  2930                                  ;
  2931                                  ;-----------------------------------------------------------------------------------------------------------------------
  2932 00000916 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  2933 00000917 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  2934 00000919 1F                                              pop     ds                                              ;... into data segment register
  2935 0000091A A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  2936 0000091F 833800                                          cmp     dword [eax],0                                   ;is queue full?
  2937 00000922 F9                                              stc                                                     ;assume failure
  2938 00000923 7517                                            jne     .20                                             ;yes, cannot store
  2939 00000925 8910                                            mov     [eax],edx                                       ;store lo-order data
  2940 00000927 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  2941 0000092A 83C008                                          add     eax,8                                           ;next queue element adr
  2942 0000092D 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  2943 00000932 7502                                            jnz     .10                                             ;no, skip ahead
  2944 00000934 B008                                            mov     al,8                                            ;reset to top of queue
  2945 00000936 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2946 0000093B F8                                              clc                                                     ;indicate success
  2947 0000093C 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2948 0000093D C3                                              ret                                                     ;return
  2949                                  ;=======================================================================================================================
  2950                                  ;
  2951                                  ;       Memory-Mapped Video Routines
  2952                                  ;
  2953                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2954                                  ;
  2955                                  ;       ClearConsoleScreen
  2956                                  ;       ScrollConsoleRow
  2957                                  ;       SetConsoleChar
  2958                                  ;
  2959                                  ;=======================================================================================================================
  2960                                  ;-----------------------------------------------------------------------------------------------------------------------
  2961                                  ;
  2962                                  ;       Routine:        ClearConsoleScreen
  2963                                  ;
  2964                                  ;       Description:    This routine clears the console (CGA) screen.
  2965                                  ;
  2966                                  ;-----------------------------------------------------------------------------------------------------------------------
  2967 0000093E 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2968 0000093F 57                                              push    edi                                             ;
  2969 00000940 1E                                              push    ds                                              ;
  2970 00000941 06                                              push    es                                              ;
  2971 00000942 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  2972 00000944 1F                                              pop     ds                                              ;... into DS register
  2973 00000945 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2974 00000947 07                                              pop     es                                              ;... into ES register
  2975 00000948 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  2976 0000094D B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2977 00000952 31FF                                            xor     edi,edi                                         ;target offset
  2978 00000954 FC                                              cld                                                     ;forward strings
  2979 00000955 F3AB                                            rep     stosd                                           ;reset screen body
  2980 00000957 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2981 0000095C B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2982 00000961 F3AB                                            rep     stosd                                           ;reset OIA line
  2983 00000963 30C0                                            xor     al,al                                           ;zero register
  2984 00000965 A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  2985 0000096A A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  2986 0000096F E847000000                                      call    PlaceCursor                                     ;place cursor at current position
  2987 00000974 07                                              pop     es                                              ;restore non-volatile regs
  2988 00000975 1F                                              pop     ds                                              ;
  2989 00000976 5F                                              pop     edi                                             ;
  2990 00000977 59                                              pop     ecx                                             ;
  2991 00000978 C3                                              ret                                                     ;return
  2992                                  ;-----------------------------------------------------------------------------------------------------------------------
  2993                                  ;
  2994                                  ;       Routine:        ScrollConsoleRow
  2995                                  ;
  2996                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2997                                  ;
  2998                                  ;-----------------------------------------------------------------------------------------------------------------------
  2999 00000979 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3000 0000097A 56                                              push    esi                                             ;
  3001 0000097B 57                                              push    edi                                             ;
  3002 0000097C 1E                                              push    ds                                              ;
  3003 0000097D 06                                              push    es                                              ;
  3004 0000097E 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3005 00000980 1F                                              pop     ds                                              ;... into DS
  3006 00000981 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3007 00000983 07                                              pop     es                                              ;... into ES
  3008 00000984 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3009 00000989 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3010 0000098E 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  3011 00000990 FC                                              cld                                                     ;forward strings
  3012 00000991 F3A5                                            rep     movsd                                           ;move 24 lines up
  3013 00000993 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3014 00000998 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3015 0000099D F3AB                                            rep     stosd                                           ;clear bottom row
  3016 0000099F 07                                              pop     es                                              ;restore non-volatile regs
  3017 000009A0 1F                                              pop     ds                                              ;
  3018 000009A1 5F                                              pop     edi                                             ;
  3019 000009A2 5E                                              pop     esi                                             ;
  3020 000009A3 59                                              pop     ecx                                             ;
  3021 000009A4 C3                                              ret                                                     ;return
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ;
  3024                                  ;       Routine:        SetConsoleChar
  3025                                  ;
  3026                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3027                                  ;
  3028                                  ;       In:             AL      ASCII character
  3029                                  ;                       CL      column
  3030                                  ;                       CH      row
  3031                                  ;                       ES      CGA selector
  3032                                  ;
  3033                                  ;       Out:            EAX     last target address written (ES:)
  3034                                  ;                       CL      column + 1
  3035                                  ;
  3036                                  ;-----------------------------------------------------------------------------------------------------------------------
  3037 000009A5 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  3038 000009A7 0FB6C5                                          movzx   eax,ch                                          ;row
  3039 000009AA B450                                            mov     ah,ECONCOLS                                     ;cols/row
  3040 000009AC F6E4                                            mul     ah                                              ;row * cols/row
  3041 000009AE 00C8                                            add     al,cl                                           ;add column
  3042 000009B0 80D400                                          adc     ah,0                                            ;handle carry
  3043 000009B3 D1E0                                            shl     eax,1                                           ;screen offset
  3044 000009B5 268810                                          mov     [es:eax],dl                                     ;store character
  3045 000009B8 FEC1                                            inc     cl                                              ;next column
  3046 000009BA C3                                              ret                                                     ;return
  3047                                  ;=======================================================================================================================
  3048                                  ;
  3049                                  ;       Input/Output Routines
  3050                                  ;
  3051                                  ;       These routines read and/or write directly to ports.
  3052                                  ;
  3053                                  ;       PlaceCursor
  3054                                  ;       PutPrimaryEndOfInt
  3055                                  ;       PutSecondaryEndOfInt
  3056                                  ;       ResetSystem
  3057                                  ;       SetKeyboardLamps
  3058                                  ;       WaitForKeyInBuffer
  3059                                  ;       WaitForKeyOutBuffer
  3060                                  ;
  3061                                  ;=======================================================================================================================
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063                                  ;
  3064                                  ;       Routine:        PlaceCursor
  3065                                  ;
  3066                                  ;       Description:    This routine positions the cursor on the console.
  3067                                  ;
  3068                                  ;       In:             DS      OS data selector
  3069                                  ;
  3070                                  ;-----------------------------------------------------------------------------------------------------------------------
  3071 000009BB 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  3072 000009BC A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  3073 000009C1 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  3074 000009C3 F6E4                                            mul     ah                                              ;row offset
  3075 000009C5 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  3076 000009CB 80D400                                          adc     ah,0                                            ;add overflow
  3077 000009CE 89C1                                            mov     ecx,eax                                         ;screen offset
  3078 000009D0 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3079 000009D2 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3080 000009D4 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3081 000009D6 EE                                              out     dx,al                                           ;select register
  3082 000009D7 42                                              inc     edx                                             ;data port
  3083 000009D8 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  3084 000009DA EE                                              out     dx,al                                           ;store hi-order loc
  3085 000009DB 4A                                              dec     edx                                             ;register select port
  3086 000009DC B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3087 000009DE EE                                              out     dx,al                                           ;select register
  3088 000009DF 42                                              inc     edx                                             ;data port
  3089 000009E0 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  3090 000009E2 EE                                              out     dx,al                                           ;store lo-order loc
  3091 000009E3 59                                              pop     ecx                                             ;restore non-volatile regs
  3092 000009E4 C3                                              ret                                                     ;return
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  ;
  3095                                  ;       Routine:        PutPrimaryEndOfInt
  3096                                  ;
  3097                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3098                                  ;
  3099                                  ;-----------------------------------------------------------------------------------------------------------------------
  3100 000009E5 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3101 000009E6 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3102 000009E8 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3103 000009EA C3                                              ret                                                     ;return
  3104                                  ;-----------------------------------------------------------------------------------------------------------------------
  3105                                  ;
  3106                                  ;       Routine:        PutSecondaryEndOfInt
  3107                                  ;
  3108                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3109                                  ;
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111 000009EB FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3112 000009EC B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3113 000009EE E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3114 000009F0 C3                                              ret                                                     ;return
  3115                                  ;-----------------------------------------------------------------------------------------------------------------------
  3116                                  ;
  3117                                  ;       Routine:        ResetSystem
  3118                                  ;
  3119                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3120                                  ;
  3121                                  ;       Out:            N/A     This routine does not return.
  3122                                  ;
  3123                                  ;-----------------------------------------------------------------------------------------------------------------------
  3124 000009F1 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3125 000009F6 E2FE                                            loop    $                                               ;clear interrupts
  3126 000009F8 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3127 000009FA E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3128 000009FC FB                      .10                     sti                                                     ;enable maskable interrupts
  3129 000009FD F4                                              hlt                                                     ;halt until interrupt
  3130 000009FE EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  ;
  3133                                  ;       Routine:        SetKeyboardLamps
  3134                                  ;
  3135                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3136                                  ;
  3137                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3138                                  ;
  3139                                  ;-----------------------------------------------------------------------------------------------------------------------
  3140 00000A00 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3141 00000A05 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3142 00000A07 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  3143 00000A09 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3144 00000A0E E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3145 00000A10 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3146 00000A15 88F8                                            mov     al,bh                                           ;set/reset lamps value
  3147 00000A17 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  3148 00000A19 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3149 00000A1E E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3150 00000A20 C3                                              ret                                                     ;return
  3151                                  ;-----------------------------------------------------------------------------------------------------------------------
  3152                                  ;
  3153                                  ;       Routine:        WaitForKeyInBuffer
  3154                                  ;
  3155                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3156                                  ;
  3157                                  ;       Out:            ZF      1 = Input buffer ready
  3158                                  ;                               0 = Input buffer not ready after timeout
  3159                                  ;
  3160                                  ;-----------------------------------------------------------------------------------------------------------------------
  3161 00000A21 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3162 00000A22 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3163 00000A27 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3164 00000A29 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  3165 00000A2B E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  3166 00000A2D 59                                              pop     ecx                                             ;restore non-volatile regs
  3167 00000A2E C3                                              ret                                                     ;return
  3168                                  ;-----------------------------------------------------------------------------------------------------------------------
  3169                                  ;
  3170                                  ;       Routine:        WaitForKeyOutBuffer
  3171                                  ;
  3172                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3173                                  ;
  3174                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3175                                  ;                               0 = Output buffer empty after timeout
  3176                                  ;
  3177                                  ;-----------------------------------------------------------------------------------------------------------------------
  3178 00000A2F 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3179 00000A30 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3180 00000A35 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3181 00000A37 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  3182 00000A39 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  3183 00000A3B 59                                              pop     ecx                                             ;restore non-volatile regs
  3184 00000A3C C3                                              ret                                                     ;return
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  ;
  3187                                  ;       End of the Kernel Function Library
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190 00000A3D 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  3191                                  ;=======================================================================================================================
  3192                                  ;
  3193                                  ;       Console Task
  3194                                  ;
  3195                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3196                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3197                                  ;       screen and responds to user commands.
  3198                                  ;
  3199                                  ;=======================================================================================================================
  3200                                  ;-----------------------------------------------------------------------------------------------------------------------
  3201                                  ;
  3202                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3203                                  ;
  3204                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3205                                  ;
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207                                  section                 constack                                                ;console task stack
  3208 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210                                  ;
  3211                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3212                                  ;
  3213                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3214                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3215                                  ;       16 descriptors. Six are initially defined.
  3216                                  ;
  3217                                  ;-----------------------------------------------------------------------------------------------------------------------
  3218                                  section                 conldt                                                  ;console local descriptors
  3219 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  3220 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  3221 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  3222 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  3223 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3224 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3225 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                  ;
  3228                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3229                                  ;
  3230                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3231                                  ;       segment. CS to console code.
  3232                                  ;
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  section                 contss                                                  ;console task state segment
  3235 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3236 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3237 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3238 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3239 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3240 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3241 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3242 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3243 00000020 00000000                                        dd      0                                               ;20 eip
  3244 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3245 00000028 00000000                                        dd      0                                               ;28 eax
  3246 0000002C 00000000                                        dd      0                                               ;2c ecx
  3247 00000030 00000000                                        dd      0                                               ;30 edx
  3248 00000034 00000000                                        dd      0                                               ;34 ebx
  3249 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3250 0000003C 00000000                                        dd      0                                               ;3c ebp
  3251 00000040 00000000                                        dd      0                                               ;40 esi
  3252 00000044 00000000                                        dd      0                                               ;44 edi
  3253 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3254 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3255 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3256 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3257 00000058 00000000                                        dd      0                                               ;58 fs
  3258 0000005C 00000000                                        dd      0                                               ;5c gs
  3259 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3260 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3261                                  ;-----------------------------------------------------------------------------------------------------------------------
  3262                                  ;
  3263                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3264                                  ;
  3265                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3266                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3267                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3268                                  ;       event.
  3269                                  ;
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  section                 conmque                                                 ;console message queue
  3272 00000000 08000000                                        dd      8                                               ;head pointer
  3273 00000004 08000000                                        dd      8                                               ;tail pointer
  3274 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3275                                  ;-----------------------------------------------------------------------------------------------------------------------
  3276                                  ;
  3277                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3278                                  ;
  3279                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3280                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3281                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3282                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3283                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3284                                  ;       board input, echoing to the console screen and responding to user commands.
  3285                                  ;
  3286                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3287                                  ;
  3288                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3289                                  ;                               |  Real Mode Interrupt Vectors                  |
  3290                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3291                                  ;                               |  Reserved BIOS Memory Area                    |
  3292                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3293                                  ;                               |  Shared Kernel Memory Area                    |
  3294                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3295                                  ;                               |  Global Descriptor Table (GDT)                |
  3296                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3297                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3298                                  ;                       002000  +-----------------------------------------------+
  3299                                  ;                               |  Interrupt Handlers                           |
  3300                                  ;                               |  Kernel Function Library                      |
  3301                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3302                                  ;                               |  Console Task Stack Area                      |
  3303                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3304                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3305                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3306                                  ;                               |  Console Task Task State Segment (TSS)        |
  3307                                  ;                       004800  +-----------------------------------------------+
  3308                                  ;                               |  Console Task Message Queue                   |
  3309                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3310                                  ;                               |  Console Task Code                            |
  3311                                  ;                               |  Console Task Constants                       |
  3312                                  ;                       006000  +===============================================+
  3313                                  ;
  3314                                  ;-----------------------------------------------------------------------------------------------------------------------
  3315                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3316 00000000 E869000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  3317                                                          clearConsoleScreen                                      ;clear the console screen
  3317 00000005 B000                <1>  mov al,eClearConsoleScreen
  3317 00000007 CD30                <1>  int _svc
  3318                                                          putConsoleString czTitle                                ;display startup message
  3318 00000009 BA[56010000]        <1>  mov edx,%1
  3318 0000000E B004                <1>  mov al,ePutConsoleString
  3318 00000010 CD30                <1>  int _svc
  3319                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3319                              <1> .10 :
  3319 00000012 BA[54010000]        <1>  mov edx,%1
  3319 00000017 B004                <1>  mov al,ePutConsoleString
  3319 00000019 CD30                <1>  int _svc
  3320                                                          placeCursor                                             ;set CRT cursor location
  3320 0000001B B003                <1>  mov al,ePlaceCursor
  3320 0000001D CD30                <1>  int _svc
  3321                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3321 0000001F BA0C080000          <1>  mov edx,%1
  3321 00000024 B94F000000          <1>  mov ecx,%2
  3321 00000029 B701                <1>  mov bh,%3
  3321 0000002B B30D                <1>  mov bl,%4
  3321 0000002D B002                <1>  mov al,eGetConsoleString
  3321 0000002F CD30                <1>  int _svc
  3322 00000031 E851000000                                      call    ConPutNewLine                                   ;newline
  3323 00000036 BA0C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  3324 0000003B BB5C080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  3325 00000040 E84C000000                                      call    ConTakeToken                                    ;handle console input
  3326 00000045 BA5C080000                                      mov     edx,wzConsoleToken                              ;token buffer
  3327 0000004A E877000000                                      call    ConDetermineCommand                             ;determine command number
  3328 0000004F 83F807                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3329 00000052 720B                                            jb      .20                                             ;yes, branch
  3330                                                          putConsoleString czUnknownCommand                       ;display error message
  3330 00000054 BA[74010000]        <1>  mov edx,%1
  3330 00000059 B004                <1>  mov al,ePutConsoleString
  3330 0000005B CD30                <1>  int _svc
  3331 0000005D EBB3                                            jmp     .10                                             ;next command
  3332 0000005F C1E002                  .20                     shl     eax,2                                           ;index into jump table
  3333 00000062 BA[04010000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  3334 00000067 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3335 0000006A FFD0                                            call    eax                                             ;call command handler
  3336 0000006C EBA4                                            jmp     .10                                             ;next command
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338                                  ;
  3339                                  ;       Routine:        ConInitializeData
  3340                                  ;
  3341                                  ;       Description:    This routine initializes console task variables.
  3342                                  ;
  3343                                  ;-----------------------------------------------------------------------------------------------------------------------
  3344 0000006E 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  3345 0000006F 57                                              push    edi                                             ;
  3346 00000070 06                                              push    es                                              ;
  3347                                  ;
  3348                                  ;       Initialize console work areas.
  3349                                  ;
  3350 00000071 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3351 00000073 07                                              pop     es                                              ;... into extra segment register
  3352 00000074 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  3353 00000079 30C0                                            xor     al,al                                           ;initialization value
  3354 0000007B B9AC000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3355 00000080 FC                                              cld                                                     ;forward strings
  3356 00000081 F3AA                                            rep     stosb                                           ;initialize data
  3357                                  ;
  3358                                  ;       Restore and return.
  3359                                  ;
  3360 00000083 07                                              pop     es                                              ;restore non-volatile regs
  3361 00000084 5F                                              pop     edi                                             ;
  3362 00000085 59                                              pop     ecx                                             ;
  3363 00000086 C3                                              ret                                                     ;return
  3364                                  ;-----------------------------------------------------------------------------------------------------------------------
  3365                                  ;
  3366                                  ;       Routine:        ConPutNewLine
  3367                                  ;
  3368                                  ;       Description:    Write a new-line to the console.
  3369                                  ;
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  3371                              <1> ConPutNewLine :
  3371 00000087 BA[51010000]        <1>  mov edx,%1
  3371 0000008C B004                <1>  mov al,ePutConsoleString
  3371 0000008E CD30                <1>  int _svc
  3372 00000090 C3                                              ret                                                     ;return
  3373                                  ;-----------------------------------------------------------------------------------------------------------------------
  3374                                  ;
  3375                                  ;       Routine:        ConTakeToken
  3376                                  ;
  3377                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3378                                  ;
  3379                                  ;       In:             DS:EDX  source buffer address
  3380                                  ;                       DS:EBX  target buffer address
  3381                                  ;
  3382                                  ;       Out:            DS:EDX  source buffer address
  3383                                  ;                       DS:EBX  target buffer address
  3384                                  ;
  3385                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3386                                  ;
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388 00000091 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  3389 00000092 57                                              push    edi                                             ;
  3390 00000093 06                                              push    es                                              ;
  3391 00000094 1E                                              push    ds                                              ;load data segment selector ...
  3392 00000095 07                                              pop     es                                              ;... into extra segment reg
  3393 00000096 89D6                                            mov     esi,edx                                         ;source buffer address
  3394 00000098 89DF                                            mov     edi,ebx                                         ;target buffer address
  3395 0000009A C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3396 0000009D FC                                              cld                                                     ;forward strings
  3397 0000009E AC                      .10                     lodsb                                                   ;load byte
  3398 0000009F 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3399 000000A1 74FB                                            je      .10                                             ;yes, continue
  3400 000000A3 84C0                                            test    al,al                                           ;end of line?
  3401 000000A5 7410                                            jz      .40                                             ;yes, branch
  3402 000000A7 AA                      .20                     stosb                                                   ;store byte
  3403 000000A8 AC                                              lodsb                                                   ;load byte
  3404 000000A9 84C0                                            test    al,al                                           ;end of line?
  3405 000000AB 740A                                            jz      .40                                             ;no, continue
  3406 000000AD 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3407 000000AF 75F6                                            jne     .20                                             ;no, continue
  3408 000000B1 AC                      .30                     lodsb                                                   ;load byte
  3409 000000B2 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3410 000000B4 74FB                                            je      .30                                             ;yes, continue
  3411 000000B6 4E                                              dec     esi                                             ;pre-position
  3412 000000B7 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3413 000000BA 89D7                                            mov     edi,edx                                         ;source buffer address
  3414 000000BC AC                      .50                     lodsb                                                   ;remaining byte
  3415 000000BD AA                                              stosb                                                   ;move to front of buffer
  3416 000000BE 84C0                                            test    al,al                                           ;end of line?
  3417 000000C0 75FA                                            jnz     .50                                             ;no, continue
  3418 000000C2 07                                              pop     es                                              ;restore non-volatile regs
  3419 000000C3 5F                                              pop     edi                                             ;
  3420 000000C4 5E                                              pop     esi                                             ;
  3421 000000C5 C3                                              ret                                                     ;return
  3422                                  ;-----------------------------------------------------------------------------------------------------------------------
  3423                                  ;
  3424                                  ;       Routine:        ConDetermineCommand
  3425                                  ;
  3426                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3427                                  ;
  3428                                  ;       input:          DS:EDX  command address
  3429                                  ;
  3430                                  ;       output:         EAX     >=0     = command nbr
  3431                                  ;                               0       = unknown command
  3432                                  ;
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434 000000C6 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3435 000000C7 51                                              push    ecx                                             ;
  3436 000000C8 56                                              push    esi                                             ;
  3437 000000C9 57                                              push    edi                                             ;
  3438                                                          upperCaseString                                         ;upper-case string at EDX
  3438 000000CA B006                <1>  mov al,eUpperCaseString
  3438 000000CC CD30                <1>  int _svc
  3439 000000CE BE[20010000]                                    mov     esi,tConCmdTbl                                  ;commands table
  3440 000000D3 31FF                                            xor     edi,edi                                         ;intialize command number
  3441 000000D5 FC                                              cld                                                     ;forward strings
  3442 000000D6 AC                      .10                     lodsb                                                   ;command length
  3443 000000D7 0FB6C8                                          movzx   ecx,al                                          ;command length
  3444 000000DA E30D                                            jecxz   .20                                             ;branch if end of table
  3445 000000DC 89F3                                            mov     ebx,esi                                         ;table entry address
  3446 000000DE 01CE                                            add     esi,ecx                                         ;next table entry address
  3447                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3447 000000E0 B001                <1>  mov al,eCompareMemory
  3447 000000E2 CD30                <1>  int _svc
  3448 000000E4 E303                                            jecxz   .20                                             ;branch if equal
  3449 000000E6 47                                              inc     edi                                             ;increment command nbr
  3450 000000E7 EBED                                            jmp     .10                                             ;repeat
  3451 000000E9 89F8                    .20                     mov     eax,edi                                         ;command number
  3452 000000EB 5F                                              pop     edi                                             ;restore non-volatile regs
  3453 000000EC 5E                                              pop     esi                                             ;
  3454 000000ED 59                                              pop     ecx                                             ;
  3455 000000EE 5B                                              pop     ebx                                             ;
  3456 000000EF C3                                              ret                                                     ;return
  3457                                  ;-----------------------------------------------------------------------------------------------------------------------
  3458                                  ;
  3459                                  ;       Routine:        ConClear
  3460                                  ;
  3461                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3462                                  ;
  3463                                  ;-----------------------------------------------------------------------------------------------------------------------
  3464                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3464                              <1> ConClear :
  3464 000000F0 B000                <1>  mov al,eClearConsoleScreen
  3464 000000F2 CD30                <1>  int _svc
  3465 000000F4 C3                                              ret                                                     ;return
  3466                                  ;-----------------------------------------------------------------------------------------------------------------------
  3467                                  ;
  3468                                  ;       Routine:        ConExit
  3469                                  ;
  3470                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3471                                  ;
  3472                                  ;-----------------------------------------------------------------------------------------------------------------------
  3473                                  ConExit                 resetSystem                                             ;issue system reset
  3473                              <1> ConExit :
  3473 000000F5 B005                <1>  mov al,eResetSystem
  3473 000000F7 CD30                <1>  int _svc
  3474 000000F9 C3                                              ret                                                     ;return
  3475                                  ;-----------------------------------------------------------------------------------------------------------------------
  3476                                  ;
  3477                                  ;       Routine:        ConVersion
  3478                                  ;
  3479                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3480                                  ;
  3481                                  ;-----------------------------------------------------------------------------------------------------------------------
  3482                                  ConVersion              putConsoleString czTitle                                ;display version message
  3482                              <1> ConVersion :
  3482 000000FA BA[56010000]        <1>  mov edx,%1
  3482 000000FF B004                <1>  mov al,ePutConsoleString
  3482 00000101 CD30                <1>  int _svc
  3483 00000103 C3                                              ret                                                     ;return
  3484                                  ;-----------------------------------------------------------------------------------------------------------------------
  3485                                  ;
  3486                                  ;       Tables
  3487                                  ;
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                                                                                                  ;---------------------------------------
  3490                                                                                                                  ;  Command Jump Table
  3491                                                                                                                  ;---------------------------------------
  3492                                  tConJmpTbl              equ     $                                               ;command jump table
  3493 00000104 F5000000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  3494 00000108 FA000000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  3495 0000010C F0000000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  3496 00000110 F5000000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  3497 00000114 F5000000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  3498 00000118 F0000000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  3499 0000011C FA000000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  3500                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3501                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3502                                                                                                                  ;---------------------------------------
  3503                                                                                                                  ;  Command Name Table
  3504                                                                                                                  ;---------------------------------------
  3505                                  tConCmdTbl              equ     $                                               ;command name table
  3506 00000120 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  3506 00000129 00                 
  3507 0000012A 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  3508 00000133 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  3509 0000013A 054558495400                                    db      5,"EXIT",0                                      ;exit command
  3510 00000140 055155495400                                    db      5,"QUIT",0                                      ;quit command
  3511 00000146 04434C5300                                      db      4,"CLS",0                                       ;cls command
  3512 0000014B 0456455200                                      db      4,"VER",0                                       ;ver command
  3513 00000150 00                                              db      0                                               ;end of table
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515                                  ;
  3516                                  ;       Constants
  3517                                  ;
  3518                                  ;-----------------------------------------------------------------------------------------------------------------------
  3519 00000151 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  3520 00000154 3A00                    czPrompt                db      ":",0                                           ;prompt string
  3521 00000156 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3521 0000015F 65726174696E672053-
  3521 00000168 797374656D20312E30-
  3521 00000171 0D0A00             
  3522 00000174 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3522 0000017D 6F6D6D616E640D0A00 
  3523 00000186 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  3524                                  %endif
  3525                                  %ifdef BUILDDISK
  3526                                  ;-----------------------------------------------------------------------------------------------------------------------
  3527                                  ;
  3528                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3529                                  ;
  3530                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3531                                  ;
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533                                  section                 unused                                                  ;unused disk space
  3534 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3535                                  %endif
  3536                                  ;=======================================================================================================================
  3537                                  ;
  3538                                  ;       End of Program Code
  3539                                  ;
  3540                                  ;=======================================================================================================================
