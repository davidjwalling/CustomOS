     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.002
     6                                  ;
     7                                  ;	Description:	This sample program adds code to load the operating system kernel program from the disk image.
     8                                  ;			The boot sector now searches the disk for the loader program, loads it into memory and runs it.
     9                                  ;			The loader program in this sample simply displays a greeting.
    10                                  ;
    11                                  ;	Revised:	January 1, 2017
    12                                  ;
    13                                  ;	Assembly:	nasm os.asm -f bin -o os.dat -l os.dat.lst -DBUILDBOOT
    14                                  ;			nasm os.asm -f bin -o os.dsk -l os.dsk.lst -DBUILDDISK
    15                                  ;			nasm os.asm -f bin -o os.com -l os.com.lst -DBUILDCOM
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK
    34                                  %define BUILDBOOT
    35                                  %define BUILDCOM
    36                                  %endif
    37                                  ;-----------------------------------------------------------------------------------------------------------------------
    38                                  ;
    39                                  ;	Conventions
    40                                  ;
    41                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    42                                  ;			Labels within a routine begin at ".10" and increment by 10.
    43                                  ;
    44                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    45                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    46                                  ;
    47                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    48                                  ;			Assembly operands begin in column 33.
    49                                  ;			Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    52                                  ;			Routine names begin with a verb (Get, Read, etc.)
    53                                  ;
    54                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    55                                  ;			Constant stored values are named in camel case, starting with 'c'.
    56                                  ;			The 2nd letter of the constant label indicates the storage type.
    57                                  ;
    58                                  ;			cq......	constant quad-word (dq)
    59                                  ;			cd......	constant double-word (dd)
    60                                  ;			cw......	constant word (dw)
    61                                  ;			cb......	constant byte (db)
    62                                  ;			cz......	constant ASCIIZ (null-terminated) string
    63                                  ;
    64                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    65                                  ;			The 2nd letter of the variable label indicates the storage type.
    66                                  ;
    67                                  ;			wq......	variable quad-word (resq)
    68                                  ;			wd......	variable double-word (resd)
    69                                  ;			ww......	variable word (resw)
    70                                  ;			wb......	variable byte (resb)
    71                                  ;
    72                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    73                                  ;			Structure names do not begin with a verb.
    74                                  ;
    75                                  ;	Macros:		Macro names are in camel case (getDateString).
    76                                  ;			Macro names do begin with a verb.
    77                                  ;
    78                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    79                                  ;			Register EAX is preferred for returning a response/result value.
    80                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    81                                  ;			Registers EAX, EDX and ECX are preferred for passing integral parameters.
    82                                  ;
    83                                  ;-----------------------------------------------------------------------------------------------------------------------
    84                                  ;-----------------------------------------------------------------------------------------------------------------------
    85                                  ;
    86                                  ;	Equates
    87                                  ;
    88                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    89                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    90                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    91                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    92                                  ;	values and, lastly, application values.
    93                                  ;
    94                                  ;-----------------------------------------------------------------------------------------------------------------------
    95                                  ;-----------------------------------------------------------------------------------------------------------------------
    96                                  ;
    97                                  ;	8042 Keyboard Controller						EKEY...
    98                                  ;
    99                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   100                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   101                                  ;
   102                                  ;-----------------------------------------------------------------------------------------------------------------------
   103                                  EKEYPORTSTAT		equ	064h						;8042 status port
   104                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   105                                  ;-----------------------------------------------------------------------------------------------------------------------
   106                                  ;
   107                                  ;	BIOS Interrupts and Functions						EBIOS...
   108                                  ;
   109                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   110                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   111                                  ;
   112                                  ;-----------------------------------------------------------------------------------------------------------------------
   113                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   114                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   115                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   116                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   117                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   118                                  ;-----------------------------------------------------------------------------------------------------------------------
   119                                  ;
   120                                  ;	Boot Sector and Loader Constants
   121                                  ;
   122                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   123                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   124                                  ;
   125                                  ;-----------------------------------------------------------------------------------------------------------------------
   126                                  EBOOTSECTORBYTES	equ	512						;bytes per floppy disk sector
   127                                  EBOOTDISKSECTORS	equ	2880						;sectors on a 1.44MB 3.5" floppy disk
   128                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;calculated total bytes on disk
   129                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   130                                  EMAXTRIES		equ	5						;max read retries
   131                                  %ifdef BUILDBOOT
   132                                  ;-----------------------------------------------------------------------------------------------------------------------
   133                                  ;
   134                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   135                                  ;
   136                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   137                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   138                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   139                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   140                                  ;
   141                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   142                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   143                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   144                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   145                                  ;	immediately followed by a disk parameter table.
   146                                  ;
   147                                  ;-----------------------------------------------------------------------------------------------------------------------
   148                                  			cpu	8086						;assume minimal CPU
   149                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   150                                  			bits	16						;16-bit code at power-up
   151 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   152                                  ;-----------------------------------------------------------------------------------------------------------------------
   153                                  ;
   154                                  ;	Disk Parameter Table
   155                                  ;
   156                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   157                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   158                                  ;
   159                                  ;-----------------------------------------------------------------------------------------------------------------------
   160 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   161 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   162 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   163 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   164 00000010 02                      cbFatCount		db	2						;file allocation table copies
   165 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   166 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   167 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   168 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   169                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   170 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   171 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   172 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   173                                  ;
   174                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   175                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   176                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   177                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   178                                  ;	given several possible starting values for CS:IP.
   179                                  ;
   180                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   181 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   182                                  .@20			equ	$-$$						;.@20 = 021h
   183 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   184 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   185 00000025 B104                    			mov	cl,4						;shift count
   186 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   187 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   188 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   189                                  ;
   190                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   191                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   192                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   193                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   194                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   195                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   196                                  ;
   197 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   198 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   199 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   200 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   201 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   202                                  ;
   203                                  ;	Our boot addressability is now set up according to the following diagram.
   204                                  ;
   205                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   206                                  ;				|  Unused (DOS Program Segment Prefix)		|
   207                                  ;			007c00	+-----------------------------------------------+ DS:0100
   208                                  ;				|  Boot Sector Code (vstart=100h)		|
   209                                  ;				|						|
   210                                  ;			007e00	+-----------------------------------------------+ DS:0300
   211                                  ;				|  Boot Stack					|
   212                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   213                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   214                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   215                                  ;				|						|
   216                                  ;			009100	+-----------------------------------------------+ DS:1600
   217                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   218                                  ;				|						|
   219                                  ;			009300	+-----------------------------------------------+ DS:1800
   220                                  ;
   221                                  ;	On entry, DL indicates the drive being booted from.
   222                                  ;
   223 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   224                                  ;
   225                                  ;	Compute directory i/o buffer address.
   226                                  ;
   227 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   228 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   229 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   230 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   231                                  ;
   232                                  ;	Compute segment where os.com will be loaded.
   233                                  ;
   234 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   235 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   236 0000004E 83E810                  			sub	ax,16						;AX = 0900
   237 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   238                                  ;
   239                                  ;	Write a message to the console so we know we have our addressability established.
   240                                  ;
   241 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   242 00000057 E84B01                  			call	BootPrint					;display loader message
   243                                  ;
   244                                  ;	Initialize the number of directory sectors to search.
   245                                  ;
   246 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   247 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   248                                  ;
   249                                  ;	Compute number of directory sectors and initialize overhead count.
   250                                  ;
   251 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   252 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   253 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   254 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   255                                  ;
   256                                  ;	Compute directory entries per sector.
   257                                  ;
   258 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   259 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   260 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   261                                  ;
   262                                  ;	Compute first logical directory sector and update overhead count.
   263                                  ;
   264 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   265 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   266 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   267 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   268 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   269 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   270                                  ;
   271                                  ;	Read directory sector.
   272                                  ;
   273 00000089 B001                    .30			mov	al,1						;sector count
   274 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   275 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   276 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   277                                  ;
   278                                  ;	Setup variables to search this directory sector.
   279                                  ;
   280 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   281 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   282 0000009C 7603                    			jna	.40						;no, continue
   283 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   284 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   285 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   286 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   287                                  ;
   288                                  ;	Loop through directory sectors searching for kernel program.
   289                                  ;
   290 000000AC 56                      .50			push	si						;save kernel name address
   291 000000AD 57                      			push	di						;save dir i/o buffer address
   292 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   293 000000B1 FC                      			cld							;forward strings
   294 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   295 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   296 000000B5 5E                      			pop	si						;restore kernel name address
   297 000000B6 7418                    			je	.60						;exit loop if found
   298 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   299 000000BC 48                      			dec	ax						;decrement remaining entries
   300 000000BD 75ED                    			jnz	.50						;next entry
   301                                  ;
   302                                  ;	Repeat search if we are not at the end of the directory.
   303                                  ;
   304 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   305 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   306 000000C8 75BF                    			jne	.30						;no, get next sector
   307 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   308 000000CD E9C000                  			jmp	BootExit					;display message and exit
   309                                  ;
   310                                  ;	If we find the kernel program in the directory, read the FAT.
   311                                  ;
   312 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   313 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   314 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   315 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   316 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0500
   317 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   318                                  ;
   319                                  ;	Get the starting cluster of the kernel program and target address.
   320                                  ;
   321 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   322 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   323                                  ;
   324                                  ;	Read each program cluster into RAM.
   325                                  ;
   326 000000E9 50                      .70			push	ax						;save cluster nbr
   327 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   328 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   329 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   330 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   331 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   332 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   333 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   334 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   335                                  ;
   336                                  ;	Update buffer pointer for next cluster.
   337                                  ;
   338 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   339 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   340 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   341 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   342 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   343                                  ;
   344                                  ;	Compute next cluster number.
   345                                  ;
   346 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   347 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   348 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   349 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   350 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   351 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   352 0000011B 83E701                  			and	di,1						;get low bit
   353 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   354 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   355 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   356                                  ;
   357                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   358                                  ;
   359 00000126 F6C101                  			test	cl,1						;is cluster odd?
   360 00000129 7404                    			jz	.80						;no, skip ahead
   361 0000012B B104                    			mov	cl,4						;shift count
   362 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   363 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   364 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   365 00000135 75B2                    			jne	.70						;no, continue
   366                                  ;
   367                                  ;	Transfer control to the operating system program.
   368                                  ;
   369 00000137 EA                      			db	0EAh						;jmp seg:offset
   370 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   371 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   372                                  ;
   373                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   374                                  ;
   375 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   376 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   377 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   378 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   379 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   380 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   381 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   382 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   383 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   384 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   385                                  ;
   386                                  ;	Try maxtries times to read sector.
   387                                  ;
   388 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   389 0000015B 53                      .10			push	bx						;save buffer address
   390 0000015C 51                      			push	cx						;save retry count
   391 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   392 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   393 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   394 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   395 0000016A 59                      			pop	cx						;restore retry count
   396 0000016B 5B                      			pop	bx						;restore buffer address
   397 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   398 0000016E E2EB                    			loop	.10						;retry
   399                                  ;
   400                                  ;	Handle disk error: convert to ASCII and store in error string.
   401                                  ;
   402 00000170 88E0                    			mov	al,ah						;AL = bios error code
   403 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   404 00000174 B210                    			mov	dl,16						;divisor for base 16
   405 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   406 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   407 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   408 0000017E 7203                    			jb	.20						;continue if numeral
   409 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   410 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   411 00000185 7203                    			jb	.30						;continue if numeral
   412 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   413 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   414 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   415 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   416 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   417 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   418 00000197 7504                    			jnz	.20						;continue if key pressed
   419 00000199 FB                      			sti							;enable interrupts
   420 0000019A F4                      			hlt							;wait for interrupt
   421 0000019B EBF6                    			jmp	short .10					;repeat
   422 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   423 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   424 000001A1 FB                      .30			sti							;enable interrupts
   425 000001A2 F4                      			hlt							;stop until reset, int, nmi
   426 000001A3 EBFC                    			jmp	short .30					;loop until restart kicks in
   427                                  ;
   428                                  ;	Display text message.
   429                                  ;
   430 000001A5 FC                      BootPrint		cld							;forward strings
   431 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   432 000001A7 84C0                    			test	al,al						;end of string?
   433 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   434 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   435 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   436 000001AF EBF4                    			jmp	short BootPrint					;repeat until done
   437 000001B1 C3                      BootReturn		ret							;return to caller
   438                                  ;-----------------------------------------------------------------------------------------------------------------------
   439                                  ;
   440                                  ;	Constants
   441                                  ;
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  			align	2
   444 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   445 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   445 000001BD 4F4D               
   446 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   446 000001C8 2E2E0D0A00         
   447 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   447 000001D6 7220               
   448 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   449 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   449 000001E4 7373696E6700       
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  ;
   452                                  ;	Work Areas
   453                                  ;
   454                                  ;-----------------------------------------------------------------------------------------------------------------------
   455                                  			align	2
   456 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   457 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   458 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   459 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   460 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   461                                  wwReadCountCommand	equ	$						;read count and command
   462 000001F4 00                      wbReadCount		db	0						;sectors to read
   463 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   464                                  wwDriveHead		equ	$						;drive, head (word)
   465 000001F6 00                      wbDrive			db	0						;drive
   466 000001F7 00                      wbHead			db	0						;head
   467                                  wwSectorTrack		equ	$						;sector, track (word)
   468 000001F8 00                      			db	0						;sector
   469 000001F9 00                      wbTrack			db	0						;track
   470 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   471 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   472                                  %endif
   473                                  %ifdef BUILDDISK
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ;
   476                                  ;	File Allocation Tables
   477                                  ;
   478                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
   479                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
   480                                  ;	OS.COM file here is 200h bytes in length. These 200h bytes contain familiar code that displays a message to the
   481                                  ;	screen. Our disk parameter table defines a cluster as containing one sector and each sector having 200h bytes.
   482                                  ;	Therefore, our FAT table must reserve only one cluster for OS.COM. The cluster used by OS.COM, then, will be
   483                                  ;	cluster 2. The entry value for this cluster is set to "0fffh" to indicate that it is the last cluster in the
   484                                  ;	chain.
   485                                  ;
   486                                  ;	Every three bytes encode two FAT entries as follows:
   487                                  ;
   488                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
   489                                  ;
   490                                  ;-----------------------------------------------------------------------------------------------------------------------
   491                                  ;-----------------------------------------------------------------------------------------------------------------------
   492                                  ;
   493                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
   494                                  ;
   495                                  ;-----------------------------------------------------------------------------------------------------------------------
   496                                  section			fat1							;first copy of FAT
   497 00000000 F0FFFFFF0F00            			db	0F0h,0FFh,0FFh,	0FFh,00Fh,000h
   498 00000006 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  ;
   501                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
   502                                  ;
   503                                  ;-----------------------------------------------------------------------------------------------------------------------
   504                                  section			fat2							;second copy of FAT
   505 00000000 F0FFFFFF0F00            			db	0F0h,0FFh,0FFh,	0FFh,00Fh,000h
   506 00000006 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  ;
   509                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
   510                                  ;
   511                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
   512                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
   513                                  ;	copy.
   514                                  ;
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516                                  section			dir							;diskette directory
   517 00000000 4F5320202020202043-     			db	"OS      COM"					;file name (must contain spaces)
   517 00000009 4F4D               
   518 0000000B 20                      			db	20h						;attribute (archive bit set)
   519 0000000C 00<rept>                			times	10 db 0;					;unused
   520 00000016 0000                    			dw	0h						;time
   521 00000018 41                      			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
   522 00000019 49                      			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
   523 0000001A 0200                    			dw	2						;first cluster
   524 0000001C 00020000                			dd	200h						;file size
   525 00000020 00<rept>                			times	(224*32)-($-$$) db 0h				;zero fill to end of section
   526                                  %endif
   527                                  %ifdef BUILDCOM
   528                                  ;-----------------------------------------------------------------------------------------------------------------------
   529                                  ;
   530                                  ;	OS.COM
   531                                  ;
   532                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
   533                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
   534                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
   535                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
   536                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
   537                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
   538                                  ;
   539                                  ;	Our loader addressability is set up according to the following diagram.
   540                                  ;
   541                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
   542                                  ;				|  Boot Sector & Loader Stack Area		|
   543                                  ;				|						|
   544                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
   545                                  ;
   546                                  ;
   547                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
   548                                  ;				|  Unused (DOS Program Segment Prefix)		|
   549                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
   550                                  ;				|  Loader Code					|
   551                                  ;				|						|
   552                                  ;			009300	+-----------------------------------------------+ CS:0200
   553                                  ;
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555                                  ;-----------------------------------------------------------------------------------------------------------------------
   556                                  ;
   557                                  ;	OS Loader								@disk: 004200	@mem: 009100
   558                                  ;
   559                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
   560                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
   561                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
   562                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
   563                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
   564                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
   565                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
   566                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
   567                                  ;	registers.
   568                                  ;
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  			cpu	8086						;assume minimal CPU
   571                                  section			loader	vstart=100h					;use .COM compatible addressing
   572                                  			bits	16						;this is 16-bit code
   573 00000000 0E                      Loader			push	cs						;use the code segment
   574 00000001 1F                      			pop	ds						;...as our data segment
   575 00000002 0E                      			push	cs						;use the code segment
   576 00000003 07                      			pop	es						;...as our extra segment
   577                                  ;
   578                                  ;	Write a message to the console so we know we have our addressability established.
   579                                  ;
   580 00000004 BE[2900]                			mov	si,czStartingMsg				;starting message
   581 00000007 E81200                  			call	PutTTYString					;display loader message
   582                                  ;
   583                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
   584                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
   585                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
   586                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
   587                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
   588                                  ;
   589 0000000A B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
   590 0000000C CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
   591 0000000E 7504                    			jnz	.40						;exit if key pressed
   592 00000010 FB                      			sti							;enable maskable interrupts
   593 00000011 F4                      			hlt							;wait for interrupt
   594 00000012 EBF6                    			jmp	short .30					;repeat until keypress
   595                                  ;
   596                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
   597                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
   598                                  ;	HLT until the system resets.
   599                                  ;
   600 00000014 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   601 00000016 E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   602 00000018 FB                      .50			sti							;enable maskable interrupts
   603 00000019 F4                      			hlt							;stop until reset, int, nmi
   604 0000001A EBFC                    			jmp	short .50					;loop until restart kicks in
   605                                  ;-----------------------------------------------------------------------------------------------------------------------
   606                                  ;
   607                                  ;	Routine:	PutTTYString
   608                                  ;
   609                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
   610                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
   611                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
   612                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
   613                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
   614                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
   615                                  ;			registers and flags unless used to indicate return status.
   616                                  ;
   617                                  ;	In:		DS:SI	address of string
   618                                  ;
   619                                  ;-----------------------------------------------------------------------------------------------------------------------
   620 0000001C FC                      PutTTYString		cld							;forward strings
   621 0000001D AC                      			lodsb							;load next byte at DS:SI in AL
   622 0000001E 84C0                    			test	al,al						;end of string?
   623 00000020 7406                    			jz	.10						;... yes, exit our loop
   624 00000022 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   625 00000024 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   626 00000026 EBF4                    			jmp	short PutTTYString				;repeat until done
   627 00000028 C3                      .10			ret							;return to caller
   628                                  ;-----------------------------------------------------------------------------------------------------------------------
   629                                  ;
   630                                  ;	Loader Data
   631                                  ;
   632                                  ;	Our only "data" is the string displayed when system starts. It ends with ASCII carriage-return (13) and line-
   633                                  ;	feed (10) values. The remainder of the boot sector is filled with NUL. The boot sector finally ends with the
   634                                  ;	required two-byte signature checked by the BIOS. Note that recent versions of NASM will issue a warning if
   635                                  ;	the calculated address for the end-of-sector signature produces a negative value for "510-($-$$)". This will
   636                                  ;	indicate if we have added too much data and exceeded the length of the sector.
   637                                  ;
   638                                  ;-----------------------------------------------------------------------------------------------------------------------
   639 00000029 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
   639 00000032 2E2E2E0D0A00       
   640 00000038 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   641 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   642                                  %endif
   643                                  %ifdef BUILDDISK
   644                                  ;-----------------------------------------------------------------------------------------------------------------------
   645                                  ;
   646                                  ;	Free Disk Space								@disk: 004400	@mem:  n/a
   647                                  ;
   648                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
   649                                  ;
   650                                  ;-----------------------------------------------------------------------------------------------------------------------
   651                                  section			unused							;unused disk space
   652 00000000 F6<rept>                			times 	EBOOTDISKBYTES-04400h db 0F6h			;fill to end of disk image
   653                                  %endif
