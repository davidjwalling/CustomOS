     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.006
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;                       are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;                       console task.
    10                                  ;
    11                                  ;       Revised:        July 4, 2018
    12                                  ;
    13                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    19                                  ;
    20                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;=======================================================================================================================
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;       Assembly Directives
    26                                  ;
    27                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    36                                  %define BUILDBOOT                                                               ;... build the boot sector
    37                                  %define BUILDCOM                                                                ;... and the OS kernel
    38                                  %endif
    39                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    40                                  %define BUILDBOOT                                                               ;... also build the boot sector
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;       Conventions
    45                                  ;
    46                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    47                                  ;                       Logical tabs are set after each eight columns.
    48                                  ;                       Tabs are simulated using SPACE characters.
    49                                  ;                       For comments that span an entire line, comment text begins in column 9.
    50                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    51                                  ;                       Assembly operands begin in column 33.
    52                                  ;                       Inline comments begin in column 81.
    53                                  ;                       Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    56                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    57                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    58                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    59                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    60                                  ;                       ouput buffers, respectively.
    61                                  ;
    62                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    63                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    64                                  ;
    65                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    66                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    67                                  ;                       Register names in comments are in upper case (EAX, EDI).
    68                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    69                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    70                                  ;                       register contents on entry and exit.
    71                                  ;
    72                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    73                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    74                                  ;                       The 2nd letter of the constant label indicates the storage type.
    75                                  ;
    76                                  ;                       cq......        constant quad-word (dq)
    77                                  ;                       cd......        constant double-word (dd)
    78                                  ;                       cw......        constant word (dw)
    79                                  ;                       cb......        constant byte (db)
    80                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    81                                  ;
    82                                  ;       Instructions:   32-bit instructions are generally favored.
    83                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    84                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    85                                  ;
    86                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    87                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    88                                  ;
    89                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    90                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    91                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    92                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    93                                  ;                       Octal literal values are avoided.
    94                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    95                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    96                                  ;
    97                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    98                                  ;                       Macro names describe an action and so DO begin with a verb.
    99                                  ;
   100                                  ;       Memory Use:     Operating system memory allocation is minimized.
   101                                  ;                       Buffers are kept to as small a size as practicable.
   102                                  ;                       Data and code intermingling is avoided wherever possible.
   103                                  ;
   104                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   105                                  ;                       Register names in source code are in lower case (eax, edx).
   106                                  ;
   107                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   108                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   109                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   110                                  ;
   111                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   112                                  ;                       Routine names begin with a verb (Get, Read, Load).
   113                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   114                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   115                                  ;                       function but begin with a leading underscore (_) character.
   116                                  ;
   117                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   118                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   119                                  ;
   120                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   121                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   122                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   123                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   124                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   125                                  ;
   126                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   127                                  ;                       The 2nd letter of the variable label indicates the storage type.
   128                                  ;
   129                                  ;                       wq......        variable quad-word (resq)
   130                                  ;                       wd......        variable double-word (resd)
   131                                  ;                       ww......        variable word (resw)
   132                                  ;                       wb......        variable byte (resb)
   133                                  ;                       ws......        writable structure
   134                                  ;
   135                                  ;-----------------------------------------------------------------------------------------------------------------------
   136                                  ;=======================================================================================================================
   137                                  ;
   138                                  ;       Equates
   139                                  ;
   140                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   141                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   142                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   143                                  ;       sets. Equates here are defined in the following groupings:
   144                                  ;
   145                                  ;       Hardware-Defined Values
   146                                  ;
   147                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   148                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   149                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   150                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   151                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EKEYF...        Keyboard status flags
   168                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   169                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   170                                  ;       EMSG...         Message identifers
   171                                  ;
   172                                  ;=======================================================================================================================
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;
   175                                  ;       Hardware-Defined Values
   176                                  ;
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;
   180                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   181                                  ;
   182                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   183                                  ;       for CGA, EGA, VGA and compatible video modes.
   184                                  ;
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   187                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   188                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   189                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  ;
   192                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   193                                  ;
   194                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   195                                  ;
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   198                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   199                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   200                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   201                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  ;
   204                                  ;       8042 Keyboard Controller                                                EKEYB...
   205                                  ;
   206                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   207                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   208                                  ;
   209                                  ;-----------------------------------------------------------------------------------------------------------------------
   210                                  EKEYBPORTDATA           equ     060h                                            ;data port
   211                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   212                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   213                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   214                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   215                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   216                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   217                                                                                                                  ;---------------------------------------
   218                                                                                                                  ;       Keyboard Scan Codes
   219                                                                                                                  ;---------------------------------------
   220                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   221                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   222                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   223                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   224                                  EKEYBSLASH              equ     035h                                            ;slash
   225                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   226                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   227                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   228                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   229                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   230                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   231                                  EKEYBUP                 equ     080h                                            ;up
   232                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   233                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   234                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   235                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   236                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   237                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   238                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   239                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   240                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   241                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   242                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   243                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   244                                  ;-----------------------------------------------------------------------------------------------------------------------
   245                                  ;
   246                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   247                                  ;
   248                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   249                                  ;       external devices and signals a hardware interrupt to the CPU.
   250                                  ;
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   253                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   254                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   255                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   256                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  ;
   259                                  ;       8253 Programmable Interval Timer                                        EPIT...
   260                                  ;
   261                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   262                                  ;       approximately 18.2 times per second.
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  ;
   268                                  ;       x86 CPU Architecture                                                    ;EX86...
   269                                  ;
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  ;
   274                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   275                                  ;
   276                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   277                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   278                                  ;
   279                                  ;       0.......        Segment is not present in memory (triggers int 11)
   280                                  ;       1.......        Segment is present in memory
   281                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   282                                  ;       ...0....        Segment is a system segment
   283                                  ;       ...00010                Local Descriptor Table
   284                                  ;       ...00101                Task Gate
   285                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   286                                  ;       ...01100                Call Gate (386)
   287                                  ;       ...01110                Interrupt Gate (386)
   288                                  ;       ...01111                Trap Gate (386)
   289                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   290                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   291                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   292                                  ;
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   295                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   296                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   297                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   298                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   299                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   300                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   301                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;
   304                                  ;       Firmware-Defined Values
   305                                  ;
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  ;
   309                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   310                                  ;
   311                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   312                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   313                                  ;
   314                                  ;-----------------------------------------------------------------------------------------------------------------------
   315                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   316                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   317                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   318                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   319                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   320                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   321                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   322                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   323                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   324                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   325                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;       Standards-Based Values
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;
   333                                  ;       ASCII                                                                   EASCII...
   334                                  ;
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   337                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   338                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   339                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   340                                  EASCIISPACE             equ     020h                                            ;space
   341                                  EASCIIUPPERA            equ     041h                                            ;'A'
   342                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   343                                  EASCIITILDE             equ     07Eh                                            ;'~'
   344                                  EASCIICASE              equ     00100000b                                       ;case bit
   345                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Operating System Values
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   354                                  ;
   355                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   356                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   357                                  ;
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   360                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   361                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   362                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   363                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   364                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   365                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ;       Console Constants                                                       ECON...
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ECONCOLS                equ     80                                              ;columns per row
   370                                  ECONROWS                equ     24                                              ;console rows
   371                                  ECONOIAROW              equ     24                                              ;operator information area row
   372                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   373                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   374                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   375                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   376                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   381                                  EGDTCGA                 equ     020h                                            ;cga video selector
   382                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   383                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   384                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   385                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   386                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   387                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ;       Keyboard Flags                                                          EKEYF...
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   392                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   393                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   394                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   395                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   396                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   397                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   398                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   399                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   400                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   401                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;       Kernel Constants                                                        EKRN...
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   406                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   407                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   408                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  ;       Message Identifiers                                                     EMSG...
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   417                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   418                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   419                                  ;=======================================================================================================================
   420                                  ;
   421                                  ;       Structures
   422                                  ;
   423                                  ;=======================================================================================================================
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;
   426                                  ;       MQUEUE
   427                                  ;
   428                                  ;       The MQUEUE structure maps memory used for a message queue.
   429                                  ;
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  struc                   MQUEUE
   432 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   433 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   434 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   435                                  endstruc
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  ;
   438                                  ;       OSDATA
   439                                  ;
   440                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   441                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   442                                  ;
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  struc                   OSDATA
   445 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   446 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   447 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   448 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   449 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   450 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   451 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   452 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   453 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   454 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   455 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   456 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   457 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   458 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   459 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   460 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   461 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   462 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   463 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   464 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   465 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   466 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   467 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   468 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   469 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   470 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   471 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   472 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   473 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   474 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   475 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   476 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   477 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   478 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   479 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   480 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   481 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   482 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   483 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   484 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   485 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   486 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   487 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   488 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   489 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   490 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   491 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   492 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   493 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   494 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   495 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   496 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   497 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   498 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   499 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   500 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   501 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   502 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   503 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   504 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   505 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   506 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   507 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   508 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   509 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   510 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   511 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   512 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   513 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   514 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   515 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   516 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   517 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   518 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   519 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   520 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   521 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   522 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   523 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   524 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   525 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   526 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   527 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   528 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   529 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   530 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   531 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   532 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   533 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   534 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   535 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   536 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   537 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   538 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   539 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   540 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   541 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   542 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   543 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   544 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   545 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  ;
   548                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   549                                  ;
   550                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   551                                  ;
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ECONDATA                equ     ($)
   554 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   555 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   556 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   557 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   558 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   559 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   560 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   561 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   562 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   563 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   564 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   565 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   566 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   567                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   568                                  ;-----------------------------------------------------------------------------------------------------------------------
   569                                  ;
   570                                  ;       End of OS Variables
   571                                  ;
   572                                  ;-----------------------------------------------------------------------------------------------------------------------
   573                                  endstruc
   574                                  ;-----------------------------------------------------------------------------------------------------------------------
   575                                  ;
   576                                  ;       Macros
   577                                  ;
   578                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   579                                  ;
   580                                  ;-----------------------------------------------------------------------------------------------------------------------
   581                                  %macro                  mint    1
   582                                  _%1                     equ     ($-$$) / EX86DESCLEN
   583                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   584                                  %endmacro
   585                                  %macro                  mtrap   1
   586                                  _%1                     equ     ($-$$) / EX86DESCLEN
   587                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   588                                  %endmacro
   589                                  %macro                  menter  1
   590                                  ?%1                     equ     ($-$$)
   591                                  %endmacro
   592                                  %macro                  tsvce   1
   593                                  e%1                     equ     ($-tsvc)/4
   594                                                          dd      %1
   595                                  %endmacro
   596                                  %ifdef BUILDBOOT
   597                                  ;=======================================================================================================================
   598                                  ;
   599                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   600                                  ;
   601                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   602                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   603                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   604                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   605                                  ;
   606                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   607                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   608                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   609                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   610                                  ;       immediately followed by a disk parameter table.
   611                                  ;
   612                                  ;=======================================================================================================================
   613                                                          cpu     8086                                            ;assume minimal CPU
   614                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   615                                                          bits    16                                              ;16-bit code at power-up
   616                                  %ifdef BUILDPREP
   617                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   618                                  %else
   619 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   620                                  %endif
   621                                  ;-----------------------------------------------------------------------------------------------------------------------
   622                                  ;
   623                                  ;       Disk Parameter Table
   624                                  ;
   625                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   626                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   627                                  ;
   628                                  ;-----------------------------------------------------------------------------------------------------------------------
   629 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   630 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   631 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   632 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   633 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   634 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   635 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   636 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   637 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   638                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   639 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   640 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   641 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   642                                  ;
   643                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   644                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   645                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   646                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   647                                  ;       given several possible starting values for CS:IP.
   648                                  ;
   649                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   650 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   651                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   652 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   653 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   654 00000025 B104                                            mov     cl,4                                            ;shift count
   655 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   656 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   657 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   658                                  ;
   659                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   660                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   661                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   662                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   663                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   664                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   665                                  ;
   666 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   667 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   668 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   669 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   670 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   671                                  ;
   672                                  ;       Our boot addressability is now set up according to the following diagram.
   673                                  ;
   674                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   675                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   676                                  ;                               |  256 = 100h bytes                             |
   677                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   678                                  ;                               |  Boot Sector (vstart=0100h)                   |
   679                                  ;                               |  1 sector = 512 = 200h bytes                  |
   680                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   681                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   682                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   683                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   684                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   685                                  ;                               |  2 sectors = 1024 = 400h bytes
   686                                  ;                       009400  +-----------------------------------------------+ DS:1900
   687                                  ;
   688                                  ;       On entry, DL indicates the drive being booted from.
   689                                  ;
   690 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   691                                  ;
   692                                  ;       Compute directory i/o buffer address.
   693                                  ;
   694 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   695 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   696 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   697 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   698                                  ;
   699                                  ;       Compute segment where os.com will be loaded.
   700                                  ;
   701 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   702 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   703 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   704 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   705                                  ;
   706                                  ;       Set the video mode to 80 column, 25 row, text.
   707                                  ;
   708 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   709 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   710                                  ;
   711                                  ;       Write a message to the console so we know we have our addressability established.
   712                                  ;
   713 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   714 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   715                                  ;
   716                                  ;       Initialize the number of directory sectors to search.
   717                                  ;
   718 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   719 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   720                                  ;
   721                                  ;       Compute number of directory sectors and initialize overhead count.
   722                                  ;
   723 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   724 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   725 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   726 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   727                                  ;
   728                                  ;       Compute directory entries per sector.
   729                                  ;
   730 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   731 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   732 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   733                                  ;
   734                                  ;       Compute first logical directory sector and update overhead count.
   735                                  ;
   736 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   737 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   738 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   739 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   740 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   741 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   742                                  ;
   743                                  ;       Read directory sector.
   744                                  ;
   745 0000008E B001                    .30                     mov     al,1                                            ;sector count
   746 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   747 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   748 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   749                                  ;
   750                                  ;       Setup variables to search this directory sector.
   751                                  ;
   752 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   753 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   754 000000A1 7603                                            jna     .40                                             ;no, continue
   755 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   756 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   757 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   758 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   759                                  ;
   760                                  ;       Loop through directory sectors searching for kernel program.
   761                                  ;
   762 000000B1 56                      .50                     push    si                                              ;save kernel name address
   763 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   764 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   765 000000B6 FC                                              cld                                                     ;forward strings
   766 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   767 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   768 000000BA 5E                                              pop     si                                              ;restore kernel name address
   769 000000BB 7418                                            je      .60                                             ;exit loop if found
   770 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   771 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   772 000000C2 75ED                                            jnz     .50                                             ;next entry
   773                                  ;
   774                                  ;       Repeat search if we are not at the end of the directory.
   775                                  ;
   776 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   777 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   778 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   779 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   780 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   781                                  ;
   782                                  ;       If we find the kernel program in the directory, read the FAT.
   783                                  ;
   784 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   785 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   786 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   787 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   788 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   789 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   790                                  ;
   791                                  ;       Get the starting cluster of the kernel program and target address.
   792                                  ;
   793 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   794 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   795                                  ;
   796                                  ;       Read each program cluster into RAM.
   797                                  ;
   798 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   799 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   800 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   801 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   802 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   803 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   804 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   805 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   806 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   807                                  ;
   808                                  ;       Update buffer pointer for next cluster.
   809                                  ;
   810 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   811 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   812 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   813 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   814 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   815                                  ;
   816                                  ;       Compute next cluster number.
   817                                  ;
   818 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   819 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   820 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   821 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   822 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   823 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   824 00000120 83E701                                          and     di,1                                            ;get low bit
   825 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   826 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   827 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   828                                  ;
   829                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   830                                  ;
   831 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   832 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   833 00000130 B104                                            mov     cl,4                                            ;shift count
   834 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   835 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   836 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   837 0000013A 75B2                                            jne     .70                                             ;no, continue
   838                                  ;
   839                                  ;       Transfer control to the operating system program.
   840                                  ;
   841 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   842 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   843 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   844                                  ;
   845                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   846                                  ;
   847 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   848 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   849 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   850 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   851 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   852 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   853 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   854 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   855 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   856 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   857                                  ;
   858                                  ;       Try maxtries times to read sector.
   859                                  ;
   860 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   861 00000160 53                      .10                     push    bx                                              ;save buffer address
   862 00000161 51                                              push    cx                                              ;save retry count
   863 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   864 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   865 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   866 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   867 0000016F 59                                              pop     cx                                              ;restore retry count
   868 00000170 5B                                              pop     bx                                              ;restore buffer address
   869 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   870 00000173 E2EB                                            loop    .10                                             ;retry
   871                                  ;
   872                                  ;       Handle disk error: convert to ASCII and store in error string.
   873                                  ;
   874 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   875 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   876 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   877 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   878 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   879 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   880 00000183 7203                                            jb      .20                                             ;continue if numeral
   881 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   882 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   883 0000018A 7203                                            jb      .30                                             ;continue if numeral
   884 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   885 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   886 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   887 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   888                                  ;
   889                                  ;       Wait for a key press.
   890                                  ;
   891 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   892 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   893 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   894 0000019E FB                                              sti                                                     ;enable maskable interrupts
   895 0000019F F4                                              hlt                                                     ;wait for interrupt
   896 000001A0 EBF6                                            jmp     .10                                             ;repeat
   897                                  ;
   898                                  ;       Reset the system.
   899                                  ;
   900 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   901 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   902 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   903 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   904 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   905                                  ;
   906                                  ;       Display text message.
   907                                  ;
   908 000001AA FC                      BootPrint               cld                                                     ;forward strings
   909 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   910 000001AC 84C0                                            test    al,al                                           ;end of string?
   911 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   912 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   913 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   914 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   915 000001B6 C3                      BootReturn              ret                                                     ;return
   916                                  ;-----------------------------------------------------------------------------------------------------------------------
   917                                  ;
   918                                  ;       Constants
   919                                  ;
   920                                  ;-----------------------------------------------------------------------------------------------------------------------
   921 000001B7 90                                              align   2
   922 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   923 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   923 000001C3 4F4D               
   924 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   924 000001CE 530D0A00           
   925 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   925 000001DB 7220               
   926 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   927 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   927 000001E9 6700               
   928                                  ;-----------------------------------------------------------------------------------------------------------------------
   929                                  ;
   930                                  ;       Work Areas
   931                                  ;
   932                                  ;-----------------------------------------------------------------------------------------------------------------------
   933 000001EB 90                                              align   2
   934 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   935 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   936 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   937 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   938 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   939                                  wwReadCountCommand      equ     $                                               ;read count and command
   940 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   941 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   942                                  wwDriveHead             equ     $                                               ;drive, head (word)
   943 000001F8 00                      wbDrive                 db      0                                               ;drive
   944 000001F9 00                      wbHead                  db      0                                               ;head
   945                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   946 000001FA 00                                              db      0                                               ;sector
   947 000001FB 00                      wbTrack                 db      0                                               ;track
   948 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   949 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   950                                  %endif
   951                                  %ifdef BUILDPREP
   952                                  ;=======================================================================================================================
   953                                  ;
   954                                  ;       Diskette Preparation Code
   955                                  ;
   956                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   957                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   958                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   959                                  ;
   960                                  ;=======================================================================================================================
   961                                  ;
   962                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   963                                  ;
   964                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   965                                                          call    BootPrint                                       ;display message
   966                                  ;
   967                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   968                                  ;
   969                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   970                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   971                                                          jnz     .20                                             ;continue if key pressed
   972                                                          sti                                                     ;enable interrupts
   973                                                          hlt                                                     ;wait for interrupt
   974                                                          jmp     .10                                             ;repeat
   975                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   976                                                          je      .30                                             ;yes, branch
   977                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   978                                                          jne     .10                                             ;no, repeat
   979                                                          jmp     .120                                            ;yes, exit program
   980                                  ;
   981                                  ;       Display writing-sector message and patch the JMP instruction.
   982                                  ;
   983                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   984                                                          call    BootPrint                                       ;display message
   985                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   986                                                          mov     ax,01Bh                                         ;address past disk parameter table
   987                                                          mov     [bx],ax                                         ;update the JMP instruction
   988                                  ;
   989                                  ;       Try to read the boot sector.
   990                                  ;
   991                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   992                                  .40                     push    cx                                              ;save remaining tries
   993                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   994                                                          mov     dx,0                                            ;head zero, drive zero
   995                                                          mov     cx,1                                            ;track zero, sector one
   996                                                          mov     al,1                                            ;one sector
   997                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   998                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   999                                                          pop     cx                                              ;restore remaining retries
  1000                                                          jnc     .50                                             ;skip ahead if successful
  1001                                                          loop    .40                                             ;try again
  1002                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1003                                                          jmp     .70                                             ;branch to error routine
  1004                                  ;
  1005                                  ;       Copy diskette parms from input buffer to output buffer.
  1006                                  ;
  1007                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1008                                                          add     si,11                                           ;skip over JMP and system ID
  1009                                                          mov     di,Boot                                         ;output buffer address
  1010                                                          add     di,11                                           ;skip over JMP and system ID
  1011                                                          mov     cx,19                                           ;length of diskette parameters
  1012                                                          cld                                                     ;forward string copies
  1013                                                          rep     movsb                                           ;copy diskette parameters
  1014                                  ;
  1015                                  ;       Try to write boot sector to diskette.
  1016                                  ;
  1017                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1018                                  .60                     push    cx                                              ;save remaining tries
  1019                                                          mov     bx,Boot                                         ;output buffer address
  1020                                                          mov     dx,0                                            ;head zero, drive zero
  1021                                                          mov     cx,1                                            ;track zero, sector one
  1022                                                          mov     al,1                                            ;one sector
  1023                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1024                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1025                                                          pop     cx                                              ;restore remaining retries
  1026                                                          jnc     .100                                            ;skip ahead if successful
  1027                                                          loop    .60                                             ;try again
  1028                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1029                                  ;
  1030                                  ;       Convert the error code to ASCII and display the error message.
  1031                                  ;
  1032                                  .70                     push    ax                                              ;save error code
  1033                                                          mov     al,ah                                           ;copy error code
  1034                                                          mov     ah,0                                            ;AX = error code
  1035                                                          mov     dl,10h                                          ;hexadecimal divisor
  1036                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1037                                                          or      ax,03030h                                       ;add ASCII zone digits
  1038                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1039                                                          jb      .80                                             ;yes, continue
  1040                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1041                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1042                                                          jb      .90                                             ;yes, continue
  1043                                                          add     al,7                                            ;no, make ASCII
  1044                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1045                                                          call    BootPrint                                       ;write error message
  1046                                                          pop     ax                                              ;restore error code
  1047                                  ;
  1048                                  ;       Display the completion message.
  1049                                  ;
  1050                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1051                                                          mov     al,ah                                           ;BIOS return code
  1052                                                          cmp     al,0                                            ;success?
  1053                                                          je      .110                                            ;yes, continue
  1054                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1055                                                          cmp     al,1                                            ;disk parameter error?
  1056                                                          je      .110                                            ;yes, continue
  1057                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1058                                                          cmp     al,2                                            ;address mark not found?
  1059                                                          je      .110                                            ;yes, continue
  1060                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1061                                                          cmp     al,3                                            ;protected disk?
  1062                                                          je      .110                                            ;yes, continue
  1063                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1064                                                          cmp     al,6                                            ;diskette removed?
  1065                                                          je      .110                                            ;yes, continue
  1066                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1067                                                          cmp     al,80H                                          ;drive timed out?
  1068                                                          je      .110                                            ;yes, continue
  1069                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1070                                  .110                    call    BootPrint                                       ;display result message
  1071                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1072                                                          int     021h                                            ;terminate DOS program
  1073                                                          ret                                                     ;return (should not execute)
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;
  1076                                  ;       Diskette Preparation Messages
  1077                                  ;
  1078                                  ;-----------------------------------------------------------------------------------------------------------------------
  1079                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1080                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1081                                                          db      13,10
  1082                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1083                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1084                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1085                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1086                                                          db      13,10,0
  1087                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1088                                                          db      13,10,0
  1089                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1090                                                          db      13,10,0
  1091                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1092                                                          db      13,10,0
  1093                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1094                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1095                                                          db      13,10,0
  1096                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1097                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1098                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1099                                                          db      13,10,"and retry."
  1100                                                          db      13,10,0
  1101                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1102                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1103                                                          db      13,10,"using another diskette."
  1104                                                          db      13,10,0
  1105                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1106                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1107                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1108                                                          db      13,10,0
  1109                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1110                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1111                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1112                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1113                                                          db      13,10,"is properly inserted in the diskette drive."
  1114                                                          db      13,10,0
  1115                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1116                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1117                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1118                                                          db      13,10,0
  1119                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1120                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1121                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1122                                                          db      13,10,0
  1123                                  wcPrepInBuf             equ     $
  1124                                  %endif
  1125                                  %ifdef BUILDDISK
  1126                                  ;=======================================================================================================================
  1127                                  ;
  1128                                  ;       File Allocation Tables
  1129                                  ;
  1130                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1131                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1132                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1133                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1134                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1135                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1136                                  ;       the last cluster in the chain.
  1137                                  ;
  1138                                  ;       Every three bytes encode two FAT entries as follows:
  1139                                  ;
  1140                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1141                                  ;
  1142                                  ;=======================================================================================================================
  1143                                  ;-----------------------------------------------------------------------------------------------------------------------
  1144                                  ;
  1145                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1146                                  ;
  1147                                  ;-----------------------------------------------------------------------------------------------------------------------
  1148                                  section                 fat1                                                    ;first copy of FAT
  1149 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1150 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1151 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1152 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1153 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1154 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1155 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1156 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1157 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1158 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1159 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1160 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1161                                  ;-----------------------------------------------------------------------------------------------------------------------
  1162                                  ;
  1163                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1164                                  ;
  1165                                  ;-----------------------------------------------------------------------------------------------------------------------
  1166                                  section                 fat2                                                    ;second copy of FAT
  1167 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1168 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1169 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1170 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1171 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1172 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1173 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1174 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1175 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1176 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1177 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1178 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1179                                  ;-----------------------------------------------------------------------------------------------------------------------
  1180                                  ;
  1181                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1182                                  ;
  1183                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1184                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1185                                  ;       copy.
  1186                                  ;
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  section                 dir                                                     ;diskette directory
  1189 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1189 00000009 4F4D               
  1190 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1191 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1192 00000016 0000                                            dw      0h                                              ;time
  1193 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1194 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1195 0000001A 0200                                            dw      2                                               ;first cluster
  1196 0000001C 00540000                                        dd      05400h                                          ;file size
  1197 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1198                                  %endif
  1199                                  %ifdef BUILDCOM
  1200                                  ;=======================================================================================================================
  1201                                  ;
  1202                                  ;       OS.COM
  1203                                  ;
  1204                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1205                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1206                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1207                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1208                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1209                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1210                                  ;
  1211                                  ;       Our loader addressability is set up according to the following diagram.
  1212                                  ;
  1213                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1214                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1215                                  ;                               |  256 = 100h bytes                             |
  1216                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1217                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1218                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1219                                  ;                       007e00  +-----------------------------------------------+
  1220                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1221                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1222                                  ;                               |                                               |
  1223                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1224                                  ;                               |                                               |
  1225                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1226                                  ;                               |  Loader Code                                  |
  1227                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1228                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1229                                  ;
  1230                                  ;=======================================================================================================================
  1231                                  ;-----------------------------------------------------------------------------------------------------------------------
  1232                                  ;
  1233                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1234                                  ;
  1235                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1236                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1237                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1238                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1239                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1240                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1241                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1242                                  ;       registers.
  1243                                  ;
  1244                                  ;-----------------------------------------------------------------------------------------------------------------------
  1245                                                          cpu     8086                                            ;assume minimal CPU
  1246                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1247                                                          bits    16                                              ;this is 16-bit code
  1248 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1249 00000001 1F                                              pop     ds                                              ;...as our data segment
  1250 00000002 0E                                              push    cs                                              ;use the code segment
  1251 00000003 07                                              pop     es                                              ;...as our extra segment
  1252                                  ;
  1253                                  ;       Write a message to the console so we know we have our addressability established.
  1254                                  ;
  1255 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1256 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1257                                  ;
  1258                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1259                                  ;
  1260 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1261 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1262 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1263 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1264                                                          cpu     386                                             ;allow 80386 instructions
  1265 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1266 00000017 E89600                                          call    PutTTYString                                    ;display message
  1267                                  ;
  1268                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1269                                  ;
  1270 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1271 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1272 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1273 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1274 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1275 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1276 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1277 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1278 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1279 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1280                                  ;
  1281                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1282                                  ;
  1283 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1284 00000038 07                                              pop     es                                              ;... as target segment
  1285 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1286 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1287 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1288 00000041 FC                                              cld                                                     ;forward strings
  1289 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1290 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1291 00000047 E86600                                          call    PutTTYString                                    ;display message
  1292                                  ;
  1293                                  ;       Switch to protected mode.
  1294                                  ;
  1295 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1296 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1297 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1298 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1299 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1300 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1301 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1302 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1303 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1304 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1305 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1306                                  ;
  1307                                  ;       Enable hardware and maskable interrupts.
  1308                                  ;
  1309 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1310 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1311 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1312 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1313                                  ;
  1314                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1315                                  ;
  1316 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1317 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1318 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1319                                  ;-----------------------------------------------------------------------------------------------------------------------
  1320                                  ;
  1321                                  ;       Routine:        LoaderExit
  1322                                  ;
  1323                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1324                                  ;
  1325                                  ;       In:             DS:SI   string address
  1326                                  ;
  1327                                  ;-----------------------------------------------------------------------------------------------------------------------
  1328 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1329                                  ;
  1330                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1331                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1332                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1333                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1334                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1335                                  ;
  1336 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1337 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1338 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1339 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1340 00000085 F4                                              hlt                                                     ;wait for interrupt
  1341 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1342                                  ;
  1343                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1344                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1345                                  ;       HLT until the system resets.
  1346                                  ;
  1347 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1348 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1349 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1350 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1351 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  ;
  1354                                  ;       Routine:        GetCPUType
  1355                                  ;
  1356                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1357                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1358                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1359                                  ;
  1360                                  ;       Out:            AX      0 = 808x, v20, etc.
  1361                                  ;                               1 = 80186
  1362                                  ;                               2 = 80286
  1363                                  ;                               3 = 80386
  1364                                  ;
  1365                                  ;-----------------------------------------------------------------------------------------------------------------------
  1366 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1367 00000092 B120                                            mov     cl,32                                           ;shift count
  1368 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1369 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1370 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1371                                                          cpu     186
  1372 0000009A 54                                              push    sp                                              ;save stack pointer
  1373 0000009B 59                                              pop     cx                                              ;...into cx
  1374 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1375 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1376                                                          cpu     286
  1377 000000A0 40                                              inc     ax                                              ;AX = 2
  1378 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1379 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1380 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1381 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1382 000000AE 40                                              inc     ax                                              ;AX = 3
  1383 000000AF C3                      .10                     ret                                                     ;return
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  ;
  1386                                  ;       Routine:        PutTTYString
  1387                                  ;
  1388                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1389                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1390                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1391                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1392                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1393                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1394                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1395                                  ;                       to LODSB is not needed.
  1396                                  ;
  1397                                  ;       In:             DS:SI   address of string
  1398                                  ;
  1399                                  ;       Out:            DF      0
  1400                                  ;                       ZF      1
  1401                                  ;                       AL      0
  1402                                  ;
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1405 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1406 000000B2 84C0                                            test    al,al                                           ;end of string?
  1407 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1408 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1409 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1410 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1411 000000BC C3                      .20                     ret                                                     ;return
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                  ;
  1414                                  ;       Loader Data
  1415                                  ;
  1416                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1417                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1418                                  ;
  1419                                  ;-----------------------------------------------------------------------------------------------------------------------
  1420 000000BD 90                                              align   2
  1421 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1422 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1423 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1424 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1425 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1425 000000D1 74696E672073797374-
  1425 000000DA 656D20726571756972-
  1425 000000E3 657320616E20693338-
  1425 000000EC 36206F72206C617465-
  1425 000000F5 722070726F63657373-
  1425 000000FE 6F722E0D0A         
  1426 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1426 0000010C 65737320616E79206B-
  1426 00000115 657920746F20726573-
  1426 0000011E 746172742074686520-
  1426 00000127 636F6D70757465722E-
  1426 00000130 0D0A00             
  1427 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1428 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1428 00000145 7265640D0A00       
  1429 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1429 00000154 616465640D0A00     
  1430 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1430 00000164 4F530D0A00         
  1431 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1432                                  ;=======================================================================================================================
  1433                                  ;
  1434                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1435                                  ;
  1436                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1437                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1438                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1439                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1440                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1441                                  ;
  1442                                  ;=======================================================================================================================
  1443                                  ;=======================================================================================================================
  1444                                  ;
  1445                                  ;       Kernel Tables
  1446                                  ;
  1447                                  ;=======================================================================================================================
  1448                                  ;-----------------------------------------------------------------------------------------------------------------------
  1449                                  ;
  1450                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1451                                  ;
  1452                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1453                                  ;       first descriptor must be all nulls.
  1454                                  ;
  1455                                  ;       6   5         4         3         2         1         0
  1456                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1457                                  ;       ----------------------------------------------------------------
  1458                                  ;       h......hffffmmmma......ab......................bn..............n
  1459                                  ;
  1460                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1461                                  ;               ffff                                                            flags
  1462                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1463                                  ;                       a......a                                                access
  1464                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1465                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1466                                  ;
  1467                                  ;       00000000                                                                all areas have base addresses below 2^24
  1468                                  ;               0...                                                            single-byte size granularity
  1469                                  ;               1...                                                            4-kilobyte size granularity
  1470                                  ;               .0..                                                            16-bit default for code segments
  1471                                  ;               .1..                                                            32-bit default for code segments
  1472                                  ;               ..0.                                                            intel-reserved; should be zero
  1473                                  ;               ...0                                                            available for operating system use
  1474                                  ;                   0000                                                        segment is less than 2^16 in size
  1475                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1476                                  ;                       1.......                                                segment is present in memory
  1477                                  ;                       .00.....                                                segment is of privilege level 0
  1478                                  ;                       ...0....                                                segment is of system or gate type
  1479                                  ;                       ...00010                                                local decriptor table (LDT)
  1480                                  ;                       ...01001                                                task state segment (TSS) available
  1481                                  ;                       ...01011                                                task state segment (TSS) busy
  1482                                  ;                       ...10...                                                data segment
  1483                                  ;                       ...10011                                                writable data (accessed)
  1484                                  ;                       ...11...                                                code segment
  1485                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1486                                  ;
  1487                                  ;-----------------------------------------------------------------------------------------------------------------------
  1488                                  section                 gdt                                                     ;global descriptor table
  1489 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1490 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1491 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1492 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1493 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1494 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1495 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1496 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1497 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1498 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1499 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1500 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1501 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1502 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1503 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                  ;
  1506                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1507                                  ;
  1508                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1509                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1510                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1511                                  ;
  1512                                  ;       6   5         4         3         2         1         0
  1513                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1514                                  ;       ----------------------------------------------------------------
  1515                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1516                                  ;
  1517                                  ;       h...h   high-order offset (bits 16-31)
  1518                                  ;       P       present (0=unused interrupt)
  1519                                  ;       zz      descriptor privilege level
  1520                                  ;       S       storage segment (must be zero for IDT)
  1521                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1522                                  ;       S...S   handling code selector in GDT
  1523                                  ;       l...l   lo-order offset (bits 0-15)
  1524                                  ;
  1525                                  ;-----------------------------------------------------------------------------------------------------------------------
  1526                                  section                 idt                                                     ;interrupt descriptor table
  1527                                                          mint    dividebyzero                                    ;00 divide by zero
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mint    singlestep                                      ;01 single step
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529                                                          mint    nmi                                             ;02 non-maskable
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mint    break                                           ;03 break
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mint    into                                            ;04 into
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mint    bounds                                          ;05 bounds
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mint    badopcode                                       ;06 bad op code
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mint    nocoproc                                        ;07 no coprocessor
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mint    doublefault                                     ;08 double-fault
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mint    operand                                         ;09 operand
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mint    badtss                                          ;0a bad TSS
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mint    notpresent                                      ;0b not-present
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mint    stacklimit                                      ;0c stack limit
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mint    protection                                      ;0d general protection fault
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mint    int14                                           ;0e (reserved)
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mint    int15                                           ;0f (reserved)
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mint    coproccalc                                      ;10 (reserved)
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mint    int17                                           ;11 (reserved)
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mint    int18                                           ;12 (reserved)
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mint    int19                                           ;13 (reserved)
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mint    int20                                           ;14 (reserved)
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mint    int21                                           ;15 (reserved)
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mint    int22                                           ;16 (reserved)
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mint    int23                                           ;17 (reserved)
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mint    int24                                           ;18 (reserved)
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mint    int25                                           ;19 (reserved)
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mint    int26                                           ;1a (reserved)
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mint    int27                                           ;1b (reserved)
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mint    int28                                           ;1c (reserved)
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mint    int29                                           ;1d (reserved)
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mint    int30                                           ;1e (reserved)
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mint    int31                                           ;1f (reserved)
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000100 3C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000108 8C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000110 E7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mtrap   com2                                            ;23 IRQ3 com2
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000118 EA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mtrap   com1                                            ;24 IRQ4 com1
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000120 ED054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000128 F0054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000130 F3054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000138 07064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000140 0A064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000148 0D064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000150 10064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000158 13064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 00000160 16064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 00000168 19064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 00000170 1C064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 00000178 1F064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mtrap   svc                                             ;30 OS services
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 00000180 30064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1577                                  ;=======================================================================================================================
  1578                                  ;
  1579                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1580                                  ;
  1581                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1582                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1583                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1584                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1585                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1586                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1587                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1588                                  ;
  1589                                  ;=======================================================================================================================
  1590                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1591                                                          cpu     386                                             ;allow 80386 instructions
  1592                                                          bits    32                                              ;this is 32-bit code
  1593                                  ;=======================================================================================================================
  1594                                  ;
  1595                                  ;       CPU Interrupt Handlers
  1596                                  ;
  1597                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1598                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1599                                  ;
  1600                                  ;=======================================================================================================================
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;       INT0    Divide By Zero
  1604                                  ;
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                                          menter  dividebyzero                                    ;divide by zero
  1606                              <1> ?%1 equ ($-$$)
  1607 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1608 00000002 68[56010000]                                    push    czIntDivideByZero                               ;store message offset
  1609 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                  ;
  1612                                  ;       INT1    Single Step
  1613                                  ;
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                                          menter  singlestep                                      ;single step
  1615                              <1> ?%1 equ ($-$$)
  1616 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1617 0000000E 68[67010000]                                    push    czIntSingleStep                                 ;store message offset
  1618 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                  ;
  1621                                  ;       INT2    Non-Maskable Interrupt
  1622                                  ;
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                                          menter  nmi                                             ;non-maskable
  1624                              <1> ?%1 equ ($-$$)
  1625 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1626 0000001A 68[73010000]                                    push    czIntNonMaskable                                ;store message offset
  1627 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                  ;
  1630                                  ;       INT3    Break
  1631                                  ;
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                                          menter  break                                           ;break
  1633                              <1> ?%1 equ ($-$$)
  1634 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1635 00000026 68[8A010000]                                    push    czIntBreak                                      ;store message offset
  1636 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  ;
  1639                                  ;       INT4    Into
  1640                                  ;
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                                          menter  into                                            ;into
  1642                              <1> ?%1 equ ($-$$)
  1643 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1644 00000032 68[90010000]                                    push    czIntInto                                       ;store message offset
  1645 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;       INT5    Bounds
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                                          menter  bounds                                          ;bounds
  1651                              <1> ?%1 equ ($-$$)
  1652 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1653 0000003E 68[95010000]                                    push    czIntBounds                                     ;store message offset
  1654 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                  ;
  1657                                  ;       INT6    Bad Operation Code
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                                          menter  badopcode                                       ;bad opcode interrupt
  1660                              <1> ?%1 equ ($-$$)
  1661 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1662 0000004A 68[9C010000]                                    push    czIntBadOpCode                                  ;store message offset
  1663 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  ;
  1666                                  ;       INT7    No Coprocessor
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1669                              <1> ?%1 equ ($-$$)
  1670 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1671 00000056 68[AF010000]                                    push    czIntNoCoprocessor                              ;store message offset
  1672 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                  ;
  1675                                  ;       INT8    Double Fault
  1676                                  ;
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                                          menter  doublefault                                     ;doublefault interrupt
  1678                              <1> ?%1 equ ($-$$)
  1679 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1680 00000062 68[BE010000]                                    push    czIntDoubleFault                                ;store message offset
  1681 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  ;
  1684                                  ;       INT9    Operand
  1685                                  ;
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                                          menter  operand                                         ;operand interrupt
  1687                              <1> ?%1 equ ($-$$)
  1688 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1689 0000006E 68[CB010000]                                    push    czIntOperand                                    ;store message offset
  1690 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                  ;
  1693                                  ;       INT10   Bad Task State Segment
  1694                                  ;
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                                          menter  badtss                                          ;bad TSS interrupt
  1696                              <1> ?%1 equ ($-$$)
  1697 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1698 0000007A 68[D3010000]                                    push    czIntBadTSS                                     ;store message offset
  1699 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                  ;
  1702                                  ;       INT11   Not Present
  1703                                  ;
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                                          menter  notpresent                                      ;not present interrupt
  1705                              <1> ?%1 equ ($-$$)
  1706 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1707 00000086 68[EA010000]                                    push    czIntNotPresent                                 ;store message offset
  1708 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;       INT12   Stack Limit
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                                          menter  stacklimit                                      ;stack limit interrupt
  1714                              <1> ?%1 equ ($-$$)
  1715 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1716 00000092 68[F6010000]                                    push    czIntStackLimit                                 ;store message offset
  1717 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  ;
  1720                                  ;       INT13   General Protection Fault
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                                          menter  protection                                      ;protection fault interrupt
  1723                              <1> ?%1 equ ($-$$)
  1724 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1725 0000009E 68[02020000]                                    push    czIntProtection                                 ;store message offset
  1726 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  ;
  1729                                  ;       INT14   Reserved
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                                          menter  int14                                           ;(reserved)
  1732                              <1> ?%1 equ ($-$$)
  1733 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1734 000000AA 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1735 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                  ;
  1738                                  ;       INT15   Reserved
  1739                                  ;
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                                          menter  int15                                           ;(reserved)
  1741                              <1> ?%1 equ ($-$$)
  1742 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1743 000000B6 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1744 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                  ;
  1747                                  ;       INT16   Coprocessor Calculation
  1748                                  ;
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                                          menter  coproccalc                                      ;coprocessor calculation
  1750                              <1> ?%1 equ ($-$$)
  1751 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1752 000000C2 68[1B020000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1753 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  ;
  1756                                  ;       INT17   Reserved
  1757                                  ;
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                                          menter  int17                                           ;(reserved)
  1759                              <1> ?%1 equ ($-$$)
  1760 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1761 000000CE 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1762 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  ;
  1765                                  ;       INT18   Reserved
  1766                                  ;
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                                          menter  int18                                           ;(reserved)
  1768                              <1> ?%1 equ ($-$$)
  1769 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1770 000000D7 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1771 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;       INT19   Reserved
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                                          menter  int19                                           ;(reserved)
  1777                              <1> ?%1 equ ($-$$)
  1778 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1779 000000E0 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1780 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT20   Reserved
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  int20                                           ;(reserved)
  1786                              <1> ?%1 equ ($-$$)
  1787 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1788 000000E9 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1789 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT21   Reserved
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  int21                                           ;(reserved)
  1795                              <1> ?%1 equ ($-$$)
  1796 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1797 000000F2 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1798 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  ;
  1801                                  ;       INT22   Reserved
  1802                                  ;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                                          menter  int22                                           ;(reserved)
  1804                              <1> ?%1 equ ($-$$)
  1805 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1806 000000FB 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1807 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  ;
  1810                                  ;       INT23   Reserved
  1811                                  ;
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                                          menter  int23                                           ;(reserved)
  1813                              <1> ?%1 equ ($-$$)
  1814 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1815 00000104 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1816 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                  ;
  1819                                  ;       INT24   Reserved
  1820                                  ;
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                                          menter  int24                                           ;(reserved)
  1822                              <1> ?%1 equ ($-$$)
  1823 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1824 0000010D 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1825 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;       INT25   Reserved
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                                          menter  int25                                           ;(reserved)
  1831                              <1> ?%1 equ ($-$$)
  1832 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1833 00000116 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1834 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;       INT26   Reserved
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                                          menter  int26                                           ;(reserved)
  1840                              <1> ?%1 equ ($-$$)
  1841 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1842 0000011F 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1843 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;       INT27   Reserved
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                                          menter  int27                                           ;(reserved)
  1849                              <1> ?%1 equ ($-$$)
  1850 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1851 00000128 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1852 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  ;
  1855                                  ;       INT28   Reserved
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  int28                                           ;(reserved)
  1858                              <1> ?%1 equ ($-$$)
  1859 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1860 00000131 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1861 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;       INT29   Reserved
  1865                                  ;
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                                          menter  int29                                           ;(reserved)
  1867                              <1> ?%1 equ ($-$$)
  1868 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1869 0000013A 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1870 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  ;
  1873                                  ;       INT30   Reserved
  1874                                  ;
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                                          menter  int30                                           ;(reserved)
  1876                              <1> ?%1 equ ($-$$)
  1877 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1878 00000143 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1879 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       INT31   Reserved
  1883                                  ;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                                          menter  int31                                           ;(reserved)
  1885                              <1> ?%1 equ ($-$$)
  1886 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1887 0000014C 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1888 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       Routine:        ReportInterrupt
  1892                                  ;
  1893                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1894                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1895                                  ;
  1896                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1897                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1898                                  ;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900 00000153 58                      ReportInterrupt         pop     eax                                             ;error message address
  1901 00000154 58                                              pop     eax                                             ;interrupt number
  1902 00000155 CF                                              iretd                                                   ;return
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  ;
  1905                                  ;       Processor Interrupt Name Strings
  1906                                  ;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908 00000156 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  1908 0000015F 6279207A65726F00   
  1909 00000167 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  1909 00000170 657000             
  1910 00000173 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  1910 0000017C 626C6520696E746572-
  1910 00000185 7275707400         
  1911 0000018A 427265616B00            czIntBreak              db      "Break",0
  1912 00000190 496E746F00              czIntInto               db      "Into",0
  1913 00000195 426F756E647300          czIntBounds             db      "Bounds",0
  1914 0000019C 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  1914 000001A5 74696F6E20436F6465-
  1914 000001AE 00                 
  1915 000001AF 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  1915 000001B8 6573736F7200       
  1916 000001BE 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  1916 000001C7 756C7400           
  1917 000001CB 4F706572616E6400        czIntOperand            db      "Operand",0
  1918 000001D3 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  1918 000001DC 537461746520536567-
  1918 000001E5 6D656E7400         
  1919 000001EA 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  1919 000001F3 6E7400             
  1920 000001F6 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  1920 000001FF 697400             
  1921 00000202 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  1921 0000020B 726F74656374696F6E-
  1921 00000214 204661756C7400     
  1922 0000021B 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1922 00000224 6F722043616C63756C-
  1922 0000022D 6174696F6E00       
  1923 00000233 526573657276656400      czIntReserved           db      "Reserved",0
  1924                                  ;=======================================================================================================================
  1925                                  ;
  1926                                  ;       Hardware Device Interupts
  1927                                  ;
  1928                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1929                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1930                                  ;       (BX=2028h).
  1931                                  ;
  1932                                  ;=======================================================================================================================
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                  ;
  1935                                  ;       IRQ0    Clock Tick Interrupt
  1936                                  ;
  1937                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1938                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1939                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1940                                  ;
  1941                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1942                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1943                                  ;
  1944                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1945                                  ;       zero, the floppy disk motors are turned off.
  1946                                  ;
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                                          menter  clocktick                                       ;clock tick interrupt
  1948                              <1> ?%1 equ ($-$$)
  1949 0000023C 50                                              push    eax                                             ;save non-volatile regs
  1950 0000023D 52                                              push    edx                                             ;
  1951 0000023E 1E                                              push    ds                                              ;
  1952                                  ;
  1953                                  ;       Update the clock tick count and the elapsed days as needed.
  1954                                  ;
  1955 0000023F 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1956 00000241 1F                                              pop     ds                                              ;... into data segment register
  1957 00000242 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1958 00000247 40                                              inc     eax                                             ;increment clock ticks
  1959 00000248 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1960 0000024D 7208                                            jb      irq0.10                                         ;no, skip ahead
  1961 0000024F FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1962 00000255 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1963 00000257 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1964                                  ;
  1965                                  ;       Decrement floppy disk motor timeout.
  1966                                  ;
  1967 0000025C 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1968 00000263 741E                                            je      irq0.20                                         ;yes, skip ahead
  1969 00000265 FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1970 0000026B 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1971                                  ;
  1972                                  ;       Turn off the floppy disk motor if appropriate.
  1973                                  ;
  1974 0000026D FB                                              sti                                                     ;enable maskable interrupts
  1975 0000026E B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1976 00000270 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1977 00000272 EC                                              in      al,dx                                           ;FDC main status byte
  1978 00000273 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1979 00000275 75F7                                            jnz     irq0.15                                         ;wait while busy
  1980 00000277 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1981 00000279 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1982 0000027E B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1983 00000280 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1984 00000282 EE                                              out     dx,al                                           ;turn motor off
  1985                                  ;
  1986                                  ;       Signal the end of the hardware interrupt.
  1987                                  ;
  1988 00000283 E826070000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1989                                  ;
  1990                                  ;       Restore and return.
  1991                                  ;
  1992 00000288 1F                                              pop     ds                                              ;restore modified regs
  1993 00000289 5A                                              pop     edx                                             ;
  1994 0000028A 58                                              pop     eax                                             ;
  1995 0000028B CF                                              iretd                                                   ;return
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                  ;
  1998                                  ;       IRQ1    Keyboard Interrupt
  1999                                  ;
  2000                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2001                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2002                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2003                                  ;       ALL modified registers upon return.
  2004                                  ;
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                                          menter  keyboard                                        ;keyboard interrrupt
  2006                              <1> ?%1 equ ($-$$)
  2007 0000028C 50                                              push    eax                                             ;save non-volatile regs
  2008 0000028D 53                                              push    ebx                                             ;
  2009 0000028E 51                                              push    ecx                                             ;
  2010 0000028F 56                                              push    esi                                             ;
  2011 00000290 1E                                              push    ds                                              ;
  2012 00000291 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2013 00000293 1F                                              pop     ds                                              ;... into data segment register
  2014 00000294 30C0                                            xor     al,al                                           ;zero
  2015 00000296 A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2016 0000029B A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2017 000002A0 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2018 000002A5 A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2019 000002AA A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2020 000002AF A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2021 000002B4 B020                                            mov     al,' '                                          ;space
  2022 000002B6 A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2023 000002BB B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2024 000002BD F6D0                                            not     al                                              ;controller timeout mask
  2025 000002BF 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2026 000002C5 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2027 000002CB 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2028 000002D1 E813070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2029 000002D6 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2030 000002DC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2031 000002DE A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2032 000002E3 88C4                                            mov     ah,al                                           ;copy scan code 0
  2033 000002E5 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2034 000002E7 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2035 000002EA 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2036 000002F0 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2037 000002F3 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2038 000002F9 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2039 000002FB 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2040 000002FE 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2041 00000304 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2042 00000307 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2043 0000030D B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2044 0000030F 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2045 00000312 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2046 00000318 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2047 0000031B 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2048 00000321 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2049 00000323 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2050 00000326 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2051 0000032C 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2052 0000032F 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2053 00000335 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2054 00000337 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2055 0000033A 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2056 00000340 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2057 00000342 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2058 00000345 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2059 0000034B B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2060 0000034D 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2061 00000350 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2062 00000356 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2063 00000359 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2064 0000035F E885060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2065 00000364 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2066 0000036A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2067 0000036C A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2068 00000371 88C4                                            mov     ah,al                                           ;copy scan code 1
  2069 00000373 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2070 00000375 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2071 00000378 7456                                            je      irq1.30                                         ;yes, set flag
  2072 0000037A 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2073 0000037D 7455                                            je      irq1.40                                         ;yes, reset flag
  2074 0000037F B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2075 00000381 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2076 00000384 744A                                            je      irq1.30                                         ;yes, set flag
  2077 00000386 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2078 00000389 7449                                            je      irq1.40                                         ;yes, reset flag
  2079 0000038B 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2080 0000038E 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2081 00000394 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2082 00000397 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2083 0000039D 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2084 000003A0 7405                                            je      irq1.10                                         ;yes, continue
  2085 000003A2 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2086 000003A5 7524                                            jne     irq1.20                                         ;no, skip ahead
  2087 000003A7 E83D060000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2088 000003AC 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2089 000003B2 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2090 000003B4 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2091 000003B9 E82B060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2092 000003BE 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2093 000003C4 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2094 000003C6 A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2095 000003CB E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2096 000003D0 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2097 000003D2 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2098 000003D4 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2099 000003D6 20C3                                            and     bl,al                                           ;reset shift flag
  2100 000003D8 EB07                                            jmp     irq1.60                                         ;skip ahead
  2101 000003DA 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2102 000003DC E8D9050000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2103 000003E1 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2104 000003E7 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2105 000003ED E8EE030000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2106 000003F2 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2107 000003F7 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2108 000003FA 7563                                            jne     irq1.80                                         ;no continue
  2109 000003FC E8E8050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2110 00000401 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2111 00000407 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2112 00000409 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2113 0000040E 88C4                                            mov     ah,al                                           ;copy scan code 1
  2114 00000410 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2115 00000413 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2116 00000419 E8CB050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2117 0000041E 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2118 00000424 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2119 00000426 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2120 0000042B E8B9050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2121 00000430 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2122 00000436 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2123 00000438 A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2124 0000043D E8A7050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2125 00000442 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2126 00000448 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2127 0000044A A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2128 0000044F E895050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2129 00000454 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2130 00000456 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2131 00000458 A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2132 0000045D EB78                                            jmp     irq1.150                                        ;continue
  2133 0000045F 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2134 00000461 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2135 00000464 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2136 00000466 BE[E7040000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2137 0000046B F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2138 0000046E 7405                                            jz      irq1.90                                         ;no, skip ahead
  2139 00000470 BE[67050000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2140 00000475 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2141 00000478 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2142 0000047C F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2143 0000047F 7411                                            jz      irq1.100                                        ;no skip ahead
  2144 00000481 88C1                                            mov     cl,al                                           ;copy ASCII code
  2145 00000483 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2146 00000486 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2147 00000489 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2148 0000048B 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2149 0000048E 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2150 00000490 3420                                            xor     al,EASCIICASE                                   ;switch case
  2151 00000492 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2152 00000497 BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2153 0000049C F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2154 0000049F 7405                                            jz      irq1.120                                        ;no, skip ahead
  2155 000004A1 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2156 000004A6 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2157 000004AB 09C2                                            or      edx,eax                                         ;msg id and codes
  2158 000004AD 31C9                                            xor     ecx,ecx                                         ;null param
  2159 000004AF 50                                              push    eax                                             ;save codes
  2160 000004B0 E82A040000                                      call    PutMessage                                      ;put message to console
  2161 000004B5 58                                              pop     eax                                             ;restore codes
  2162 000004B6 84C0                                            test    al,al                                           ;ASCII translation?
  2163 000004B8 7413                                            jz      irq1.130                                        ;no, skip ahead
  2164 000004BA BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2165 000004BF 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2166 000004C4 09C2                                            or      edx,eax                                         ;msg id and codes
  2167 000004C6 31C9                                            xor     ecx,ecx                                         ;null param
  2168 000004C8 E812040000                                      call    PutMessage                                      ;put message to console
  2169 000004CD EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2170 000004CF B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2171 000004D1 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2172 000004D7 E8AC020000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2173 000004DC E8CD040000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2174 000004E1 1F                                              pop     ds                                              ;restore non-volatile regs
  2175 000004E2 5E                                              pop     esi                                             ;
  2176 000004E3 59                                              pop     ecx                                             ;
  2177 000004E4 5B                                              pop     ebx                                             ;
  2178 000004E5 58                                              pop     eax                                             ;
  2179 000004E6 CF                                              iretd                                                   ;return
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                  ;       Scan-Code to ASCII Translation Tables
  2182                                  ;-----------------------------------------------------------------------------------------------------------------------
  2183 000004E7 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2184 000004EF 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2185 000004F7 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2186 000004FF 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2187 00000507 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2188 0000050F 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2189 00000517 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2190 0000051F 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2191 00000527 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2192 0000052F 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2193 00000537 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2194 0000053F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2195 00000547 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2196 0000054F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2197 00000557 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2198 0000055F 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2199 00000567 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2200 0000056F 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2201 00000577 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2202 0000057F 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2203 00000587 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2204 0000058F 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2205 00000597 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2206 0000059F 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2207 000005A7 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2208 000005AF 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2209 000005B7 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2210 000005BF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2211 000005C7 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2212 000005CF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2213 000005D7 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2214 000005DF 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                                          menter  iochannel                                       ;secondary 8259A cascade
  2220                              <1> ?%1 equ ($-$$)
  2221 000005E7 50                                              push    eax                                             ;save modified regs
  2222 000005E8 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                  ;
  2225                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2226                                  ;
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                                          menter  com2                                            ;serial port 2 interrupt
  2228                              <1> ?%1 equ ($-$$)
  2229 000005EA 50                                              push    eax                                             ;save modified regs
  2230 000005EB EB3C                                            jmp     hwint                                           ;end interrupt and return
  2231                                  ;-----------------------------------------------------------------------------------------------------------------------
  2232                                  ;
  2233                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2234                                  ;
  2235                                  ;-----------------------------------------------------------------------------------------------------------------------
  2236                                                          menter  com1                                            ;serial port 1 interrupt
  2236                              <1> ?%1 equ ($-$$)
  2237 000005ED 50                                              push    eax                                             ;save modified regs
  2238 000005EE EB39                                            jmp     hwint                                           ;end interrupt and return
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                  ;
  2241                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2242                                  ;
  2243                                  ;-----------------------------------------------------------------------------------------------------------------------
  2244                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2244                              <1> ?%1 equ ($-$$)
  2245 000005F0 50                                              push    eax                                             ;save modified regs
  2246 000005F1 EB36                                            jmp     hwint                                           ;end interrupt and return
  2247                                  ;-----------------------------------------------------------------------------------------------------------------------
  2248                                  ;
  2249                                  ;       IRQ6    Diskette Hardware Interrupt
  2250                                  ;
  2251                                  ;-----------------------------------------------------------------------------------------------------------------------
  2252                                                          menter  diskette                                        ;floppy disk interrupt
  2252                              <1> ?%1 equ ($-$$)
  2253 000005F3 50                                              push    eax                                             ;save non-volatile regs
  2254 000005F4 1E                                              push    ds                                              ;
  2255 000005F5 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2256 000005F7 1F                                              pop     ds                                              ;... into DS register
  2257 000005F8 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2258 000005FD 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2259 000005FF A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2260 00000604 1F                                              pop     ds                                              ;restore non-volatile regs
  2261 00000605 EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2262                                  ;-----------------------------------------------------------------------------------------------------------------------
  2263                                  ;
  2264                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2265                                  ;
  2266                                  ;-----------------------------------------------------------------------------------------------------------------------
  2267                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2267                              <1> ?%1 equ ($-$$)
  2268 00000607 50                                              push    eax                                             ;save modified regs
  2269 00000608 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271                                  ;
  2272                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2273                                  ;
  2274                                  ;-----------------------------------------------------------------------------------------------------------------------
  2275                                                          menter  rtclock                                         ;real-time clock interrupt
  2275                              <1> ?%1 equ ($-$$)
  2276 0000060A 50                                              push    eax                                             ;save modified regs
  2277 0000060B EB15                                            jmp     hwwint                                          ;end interrupt and return
  2278                                  ;-----------------------------------------------------------------------------------------------------------------------
  2279                                  ;
  2280                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2281                                  ;
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2283                              <1> ?%1 equ ($-$$)
  2284 0000060D 50                                              push    eax                                             ;save modified regs
  2285 0000060E EB12                                            jmp     hwwint                                          ;end interrupt and return
  2286                                  ;-----------------------------------------------------------------------------------------------------------------------
  2287                                  ;
  2288                                  ;       IRQ10   Reserved Hardware Interrupt
  2289                                  ;
  2290                                  ;-----------------------------------------------------------------------------------------------------------------------
  2291                                                          menter  irq10                                           ;reserved
  2291                              <1> ?%1 equ ($-$$)
  2292 00000610 50                                              push    eax                                             ;save modified regs
  2293 00000611 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2294                                  ;-----------------------------------------------------------------------------------------------------------------------
  2295                                  ;
  2296                                  ;       IRQ11   Reserved Hardware Interrupt
  2297                                  ;
  2298                                  ;-----------------------------------------------------------------------------------------------------------------------
  2299                                                          menter  irq11                                           ;reserved
  2299                              <1> ?%1 equ ($-$$)
  2300 00000613 50                                              push    eax                                             ;save modified regs
  2301 00000614 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2302                                  ;-----------------------------------------------------------------------------------------------------------------------
  2303                                  ;
  2304                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2305                                  ;
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2307                              <1> ?%1 equ ($-$$)
  2308 00000616 50                                              push    eax                                             ;save modified regs
  2309 00000617 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2310                                  ;-----------------------------------------------------------------------------------------------------------------------
  2311                                  ;
  2312                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2313                                  ;
  2314                                  ;-----------------------------------------------------------------------------------------------------------------------
  2315                                                          menter  coprocessor                                     ;coprocessor interrupt
  2315                              <1> ?%1 equ ($-$$)
  2316 00000619 50                                              push    eax                                             ;save modified regs
  2317 0000061A EB06                                            jmp     hwwint                                          ;end interrupt and return
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319                                  ;
  2320                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2321                                  ;
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2323                              <1> ?%1 equ ($-$$)
  2324 0000061C 50                                              push    eax                                             ;save modified regs
  2325 0000061D EB03                                            jmp     hwwint                                          ;end interrupt and return
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327                                  ;
  2328                                  ;       IRQ15   Reserved Hardware Interrupt
  2329                                  ;
  2330                                  ;-----------------------------------------------------------------------------------------------------------------------
  2331                                                          menter  irq15                                           ;reserved
  2331                              <1> ?%1 equ ($-$$)
  2332 0000061F 50                                              push    eax                                             ;save modified regs
  2333 00000620 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;       Exit from hardware interrupt
  2337                                  ;
  2338                                  ;-----------------------------------------------------------------------------------------------------------------------
  2339 00000622 E88D030000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2340 00000627 EB05                                            jmp     hwint90                                         ;skip ahead
  2341 00000629 E880030000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2342 0000062E 58                      hwint90                 pop     eax                                             ;restore modified regs
  2343 0000062F CF                                              iretd                                                   ;return from interrupt
  2344                                  ;-----------------------------------------------------------------------------------------------------------------------
  2345                                  ;
  2346                                  ;       INT 30h Operating System Software Service Interrupt
  2347                                  ;
  2348                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2349                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2350                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2351                                  ;       the entry address of the specific function from a table.
  2352                                  ;
  2353                                  ;-----------------------------------------------------------------------------------------------------------------------
  2354                                                          menter  svc
  2354                              <1> ?%1 equ ($-$$)
  2355 00000630 3C04                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2356 00000632 730D                                            jae     svc90                                           ;yes, skip ahead
  2357 00000634 0FB6C0                                          movzx   eax,al                                          ;function
  2358 00000637 C1E002                                          shl     eax,2                                           ;offset into table
  2359 0000063A 2EFF90[42060000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2360 00000641 CF                      svc90                   iretd                                                   ;return from interrupt
  2361                                  ;-----------------------------------------------------------------------------------------------------------------------
  2362                                  ;
  2363                                  ;       Service Request Table
  2364                                  ;
  2365                                  ;
  2366                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2367                                  ;
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2369                              <1> tsvc :
  2369                              <1> e%1 equ ($-tsvc)/4
  2369 00000642 [07090000]          <1>  dd %1
  2370                                                          tsvce   GetConsoleString                                ;get string input
  2370                              <1> e%1 equ ($-tsvc)/4
  2370 00000646 [7C060000]          <1>  dd %1
  2371                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2371                              <1> e%1 equ ($-tsvc)/4
  2371 0000064A [84090000]          <1>  dd %1
  2372                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2372                              <1> e%1 equ ($-tsvc)/4
  2372 0000064E [7A080000]          <1>  dd %1
  2373                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2374                                  ;-----------------------------------------------------------------------------------------------------------------------
  2375                                  ;
  2376                                  ;       Service Request Macros
  2377                                  ;
  2378                                  ;       These macros provide positional parameterization of service request calls.
  2379                                  ;
  2380                                  ;-----------------------------------------------------------------------------------------------------------------------
  2381                                  %macro                  clearConsoleScreen 0
  2382                                                          mov     al,eClearConsoleScreen                          ;function code
  2383                                                          int     _svc                                            ;invoke OS service
  2384                                  %endmacro
  2385                                  %macro                  getConsoleString 4
  2386                                                          mov     edx,%1                                          ;buffer address
  2387                                                          mov     ecx,%2                                          ;max characters
  2388                                                          mov     bh,%3                                           ;echo indicator
  2389                                                          mov     bl,%4                                           ;terminator
  2390                                                          mov     al,eGetConsoleString                            ;function code
  2391                                                          int     _svc                                            ;invoke OS service
  2392                                  %endmacro
  2393                                  %macro                  placeCursor 0
  2394                                                          mov     al,ePlaceCursor                                 ;function code
  2395                                                          int     _svc                                            ;invoke OS service
  2396                                  %endmacro
  2397                                  %macro                  putConsoleString 1
  2398                                                          mov     edx,%1                                          ;string address
  2399                                                          mov     al,ePutConsoleString                            ;function code
  2400                                                          int     _svc                                            ;invoke OS service
  2401                                  %endmacro
  2402                                  ;=======================================================================================================================
  2403                                  ;
  2404                                  ;       Kernel Function Library
  2405                                  ;
  2406                                  ;=======================================================================================================================
  2407                                  ;=======================================================================================================================
  2408                                  ;
  2409                                  ;       Console Helper Routines
  2410                                  ;
  2411                                  ;       FirstConsoleColumn
  2412                                  ;       GetConsoleChar
  2413                                  ;       GetConsoleString
  2414                                  ;       NextConsoleColumn
  2415                                  ;       NextConsoleRow
  2416                                  ;       PreviousConsoleColumn
  2417                                  ;       PutConsoleChar
  2418                                  ;       PutConsoleHexByte
  2419                                  ;       PutConsoleOIAChar
  2420                                  ;       PutConsoleOIAShift
  2421                                  ;       PutConsoleString
  2422                                  ;       Yield
  2423                                  ;
  2424                                  ;=======================================================================================================================
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  ;
  2427                                  ;       Routine:        FirstConsoleColumn
  2428                                  ;
  2429                                  ;       Description:    This routine resets the console column to start of the row.
  2430                                  ;
  2431                                  ;       In:             DS      OS data selector
  2432                                  ;
  2433                                  ;-----------------------------------------------------------------------------------------------------------------------
  2434 00000652 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2435 00000654 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2436 00000659 C3                                              ret                                                     ;return
  2437                                  ;-----------------------------------------------------------------------------------------------------------------------
  2438                                  ;
  2439                                  ;       Routine:        GetConsoleChar
  2440                                  ;
  2441                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2442                                  ;
  2443                                  ;       Out:            AL      ASCII character code
  2444                                  ;                       AH      keyboard scan code
  2445                                  ;
  2446                                  ;-----------------------------------------------------------------------------------------------------------------------
  2447 0000065A E848020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2448 0000065F E846020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2449 00000664 09C0                                            or      eax,eax                                         ;do we have a message?
  2450 00000666 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2451 00000668 50                                              push    eax                                             ;save key codes
  2452 00000669 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2453 0000066E 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2454 00000673 58                                              pop     eax                                             ;restore key codes
  2455 00000674 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2456 00000676 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2457 0000067B C3                                              ret                                                     ;return
  2458                                  ;-----------------------------------------------------------------------------------------------------------------------
  2459                                  ;
  2460                                  ;       Routine:        GetConsoleString
  2461                                  ;
  2462                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2463                                  ;
  2464                                  ;       In:             DS:EDX  target buffer address
  2465                                  ;                       ECX     maximum number of characters to accept
  2466                                  ;                       BH      echo to terminal
  2467                                  ;                       BL      terminating character
  2468                                  ;
  2469                                  ;-----------------------------------------------------------------------------------------------------------------------
  2470 0000067C 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2471 0000067D 56                                              push    esi                                             ;
  2472 0000067E 57                                              push    edi                                             ;
  2473 0000067F 06                                              push    es                                              ;
  2474 00000680 1E                                              push    ds                                              ;load data segment selector ...
  2475 00000681 07                                              pop     es                                              ;... into extra segment register
  2476 00000682 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2477 00000684 51                                              push    ecx                                             ;save maximum characters
  2478 00000685 30C0                                            xor     al,al                                           ;zero register
  2479 00000687 FC                                              cld                                                     ;forward strings
  2480 00000688 F3AA                                            rep     stosb                                           ;zero fill buffer
  2481 0000068A 59                                              pop     ecx                                             ;maximum characters
  2482 0000068B 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2483 0000068D 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2484 0000068F E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2485 00000691 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2486 00000696 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2487 00000698 7445                                            je      .50                                             ;yes, exit
  2488 0000069A 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2489 0000069C 7521                                            jne     .30                                             ;no, skip ahead
  2490 0000069E 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2491 000006A0 74EF                                            je      .20                                             ;yes, get next character
  2492 000006A2 4F                                              dec     edi                                             ;backup target pointer
  2493 000006A3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  2494 000006A6 41                                              inc     ecx                                             ;increment remaining chars
  2495 000006A7 F6C701                                          test    bh,1                                            ;echo to console?
  2496 000006AA 74E5                                            jz      .20                                             ;no, get next character
  2497 000006AC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  2498 000006B1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2499 000006B3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  2500 000006B8 E8C7020000                                      call    PlaceCursor                                     ;position the cursor
  2501 000006BD EBD2                                            jmp     .20                                             ;get next character
  2502 000006BF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2503 000006C1 72CE                                            jb      .20                                             ;no, get another character
  2504 000006C3 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2505 000006C5 77CA                                            ja      .20                                             ;no, get another character
  2506 000006C7 AA                                              stosb                                                   ;store character in buffer
  2507 000006C8 F6C701                                          test    bh,1                                            ;echo to console?
  2508 000006CB 740F                                            jz      .40                                             ;no, skip ahead
  2509 000006CD E877000000                                      call    PutConsoleChar                                  ;write character to console
  2510 000006D2 E810000000                                      call    NextConsoleColumn                               ;advance console position
  2511 000006D7 E8A8020000                                      call    PlaceCursor                                     ;position the cursor
  2512 000006DC 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2513 000006DD EBB0                                            jmp     .10                                             ;next
  2514 000006DF 30C0                    .50                     xor     al,al                                           ;null
  2515 000006E1 AA                                              stosb                                                   ;terminate buffer
  2516 000006E2 07                                              pop     es                                              ;restore non-volatile regs
  2517 000006E3 5F                                              pop     edi                                             ;
  2518 000006E4 5E                                              pop     esi                                             ;
  2519 000006E5 59                                              pop     ecx                                             ;
  2520 000006E6 C3                                              ret                                                     ;return
  2521                                  ;-----------------------------------------------------------------------------------------------------------------------
  2522                                  ;
  2523                                  ;       Routine:        NextConsoleColumn
  2524                                  ;
  2525                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2526                                  ;                       incremented if the end of the current row is reached.
  2527                                  ;
  2528                                  ;       In:             DS      OS data selector
  2529                                  ;
  2530                                  ;-----------------------------------------------------------------------------------------------------------------------
  2531 000006E7 A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2532 000006EC FEC0                                            inc     al                                              ;increment column
  2533 000006EE A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2534 000006F3 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2535 000006F5 720A                                            jb      .10                                             ;no, skip ahead
  2536 000006F7 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2537 000006FC E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2538 00000701 C3                      .10                     ret                                                     ;return
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  ;
  2541                                  ;       Routine:        NextConsoleRow
  2542                                  ;
  2543                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2544                                  ;
  2545                                  ;       In:             DS      OS data selector
  2546                                  ;
  2547                                  ;-----------------------------------------------------------------------------------------------------------------------
  2548 00000702 A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2549 00000707 FEC0                                            inc     al                                              ;increment row
  2550 00000709 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2551 0000070E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2552 00000710 7211                                            jb      .10                                             ;no, skip ahead
  2553 00000712 E82B020000                                      call    ScrollConsoleRow                                ;scroll up one row
  2554 00000717 A001080000                                      mov     al,[wbConsoleRow]                               ;row
  2555 0000071C FEC8                                            dec     al                                              ;decrement row
  2556 0000071E A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2557 00000723 C3                      .10                     ret                                                     ;return
  2558                                  ;-----------------------------------------------------------------------------------------------------------------------
  2559                                  ;
  2560                                  ;       Routine:        PreviousConsoleColumn
  2561                                  ;
  2562                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2563                                  ;                       the column is set to the last position in the row and the row is decremented.
  2564                                  ;
  2565                                  ;       In:             DS      OS data selector
  2566                                  ;
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568 00000724 A000080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2569 00000729 08C0                                            or      al,al                                           ;start of row?
  2570 0000072B 7514                                            jnz     .10                                             ;no, skip ahead
  2571 0000072D 8A2501080000                                    mov     ah,[wbConsoleRow]                               ;current row
  2572 00000733 08E4                                            or      ah,ah                                           ;top of screen?
  2573 00000735 7411                                            jz      .20                                             ;yes, exit with no change
  2574 00000737 FECC                                            dec     ah                                              ;decrement row
  2575 00000739 882501080000                                    mov     [wbConsoleRow],ah                               ;save row
  2576 0000073F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  2577 00000741 FEC8                    .10                     dec     al                                              ;decrement column
  2578 00000743 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2579 00000748 C3                      .20                     ret                                                     ;return
  2580                                  ;-----------------------------------------------------------------------------------------------------------------------
  2581                                  ;
  2582                                  ;       Routine:        PutConsoleChar
  2583                                  ;
  2584                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2585                                  ;
  2586                                  ;       In:             AL      ASCII character
  2587                                  ;                       DS      OS data selector
  2588                                  ;
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590 00000749 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2591 0000074A 06                                              push    es                                              ;
  2592 0000074B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2593 0000074D 07                                              pop     es                                              ;... into extra segment reg
  2594 0000074E 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2595 00000754 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  2596 0000075A E80F020000                                      call    SetConsoleChar                                  ;put character at row, column
  2597 0000075F 07                                              pop     es                                              ;restore non-volatile regs
  2598 00000760 59                                              pop     ecx                                             ;
  2599 00000761 C3                                              ret                                                     ;return
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                  ;
  2602                                  ;       Routine:        PutConsoleHexByte
  2603                                  ;
  2604                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2605                                  ;
  2606                                  ;       In:             AL      byte value
  2607                                  ;                       CL      column
  2608                                  ;                       CH      row
  2609                                  ;                       DS      OS data selector
  2610                                  ;                       ES      CGA selector
  2611                                  ;
  2612                                  ;-----------------------------------------------------------------------------------------------------------------------
  2613 00000762 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2614 00000763 88C3                                            mov     bl,al                                           ;save byte value
  2615 00000765 C0E804                                          shr     al,4                                            ;hi-order nybble
  2616 00000768 0C30                                            or      al,030h                                         ;apply ASCII zone
  2617 0000076A 3C3A                                            cmp     al,03ah                                         ;numeric?
  2618 0000076C 7202                                            jb      .10                                             ;yes, skip ahead
  2619 0000076E 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2620 00000770 E8F9010000              .10                     call    SetConsoleChar                                  ;display ASCII character
  2621 00000775 88D8                                            mov     al,bl                                           ;byte value
  2622 00000777 240F                                            and     al,0fh                                          ;lo-order nybble
  2623 00000779 0C30                                            or      al,30h                                          ;apply ASCII zone
  2624 0000077B 3C3A                                            cmp     al,03ah                                         ;numeric?
  2625 0000077D 7202                                            jb      .20                                             ;yes, skip ahead
  2626 0000077F 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2627 00000781 E8E8010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2628 00000786 5B                                              pop     ebx                                             ;restore non-volatile regs
  2629 00000787 C3                                              ret                                                     ;return
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  ;
  2632                                  ;       Routine:        PutConsoleOIAChar
  2633                                  ;
  2634                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2635                                  ;
  2636                                  ;       In:             DS      OS data selector
  2637                                  ;
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639 00000788 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2640 00000789 51                                              push    ecx                                             ;
  2641 0000078A 56                                              push    esi                                             ;
  2642 0000078B 1E                                              push    ds                                              ;
  2643 0000078C 06                                              push    es                                              ;
  2644 0000078D 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2645 0000078F 1F                                              pop     ds                                              ;... into data segment register
  2646 00000790 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2647 00000792 07                                              pop     es                                              ;... into extra segment register
  2648 00000793 BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2649 00000798 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2650 0000079A B300                                            mov     bl,0                                            ;starting column
  2651 0000079C B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2652 000007A1 51                      .10                     push    ecx                                             ;save remaining count
  2653 000007A2 89D9                                            mov     ecx,ebx                                         ;row, column
  2654 000007A4 AC                                              lodsb                                                   ;read scan code
  2655 000007A5 08C0                                            or      al,al                                           ;scan code present?
  2656 000007A7 7407                                            jz      .20                                             ;no, skip ahead
  2657 000007A9 E8B4FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2658 000007AE EB0E                                            jmp     .30                                             ;continue
  2659 000007B0 B020                    .20                     mov     al,' '                                          ;ASCII space
  2660 000007B2 E8B7010000                                      call    SetConsoleChar                                  ;display space
  2661 000007B7 B020                                            mov     al,' '                                          ;ASCII space
  2662 000007B9 E8B0010000                                      call    SetConsoleChar                                  ;display space
  2663 000007BE 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2664 000007C1 59                                              pop     ecx                                             ;restore remaining
  2665 000007C2 E2DD                                            loop    .10                                             ;next code
  2666 000007C4 A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2667 000007C9 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2668 000007CB 720D                                            jb      .40                                             ;no, skip ahead
  2669 000007CD 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2670 000007CF 7709                                            ja      .40                                             ;no, skip ahead
  2671 000007D1 88FD                                            mov     ch,bh                                           ;OIA row
  2672 000007D3 B128                                            mov     cl,40                                           ;character display column
  2673 000007D5 E894010000                                      call    SetConsoleChar                                  ;display ASCII character
  2674 000007DA 07                      .40                     pop     es                                              ;restore non-volatile regs
  2675 000007DB 1F                                              pop     ds                                              ;
  2676 000007DC 5E                                              pop     esi                                             ;
  2677 000007DD 59                                              pop     ecx                                             ;
  2678 000007DE 5B                                              pop     ebx                                             ;
  2679 000007DF C3                                              ret                                                     ;return
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                  ;
  2682                                  ;       Routine:        PutConsoleOIAShift
  2683                                  ;
  2684                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2685                                  ;
  2686                                  ;       In:             BL      shift flags
  2687                                  ;                       BH      lock flags
  2688                                  ;                       DS      OS data selector
  2689                                  ;
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691 000007E0 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2692 000007E1 06                                              push    es                                              ;
  2693 000007E2 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2694 000007E4 07                                              pop     es                                              ;... into ES register
  2695 000007E5 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2696 000007E7 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2697 000007E9 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2698 000007EC 7402                                            jz      .10                                             ;no, skip ahead
  2699 000007EE B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2700 000007F0 B10E                    .10                     mov     cl,14                                           ;indicator column
  2701 000007F2 E877010000                                      call    SetConsoleChar                                  ;display ASCII character
  2702 000007F7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2703 000007F9 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2704 000007FC 7402                                            jz      .20                                             ;no, skip ahead
  2705 000007FE B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2706 00000800 B140                    .20                     mov     cl,64                                           ;indicator column
  2707 00000802 E867010000                                      call    SetConsoleChar                                  ;display ASCII character
  2708 00000807 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2709 00000809 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2710 0000080C 7402                                            jz      .30                                             ;no, skip ahead
  2711 0000080E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2712 00000810 B10F                    .30                     mov     cl,15                                           ;indicator column
  2713 00000812 E857010000                                      call    SetConsoleChar                                  ;display ASCII character
  2714 00000817 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2715 00000819 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2716 0000081C 7402                                            jz      .40                                             ;no, skip ahead
  2717 0000081E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2718 00000820 B13F                    .40                     mov     cl,63                                           ;indicator column
  2719 00000822 E847010000                                      call    SetConsoleChar                                  ;display ASCII character
  2720 00000827 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2721 00000829 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2722 0000082C 7402                                            jz      .50                                             ;no, skip ahead
  2723 0000082E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2724 00000830 B110                    .50                     mov     cl,16                                           ;indicator column
  2725 00000832 E837010000                                      call    SetConsoleChar                                  ;display ASCII character
  2726 00000837 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2727 00000839 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2728 0000083C 7402                                            jz      .60                                             ;no, skip ahead
  2729 0000083E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2730 00000840 B13E                    .60                     mov     cl,62                                           ;indicator column
  2731 00000842 E827010000                                      call    SetConsoleChar                                  ;display ASCII character
  2732 00000847 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2733 00000849 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2734 0000084C 7402                                            jz      .70                                             ;no, skip ahead
  2735 0000084E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2736 00000850 B14E                    .70                     mov     cl,78                                           ;indicator column
  2737 00000852 E817010000                                      call    SetConsoleChar                                  ;display ASCII character
  2738 00000857 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2739 00000859 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2740 0000085C 7402                                            jz      .80                                             ;no, skip ahead
  2741 0000085E B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2742 00000860 B14D                    .80                     mov     cl,77                                           ;indicator column
  2743 00000862 E807010000                                      call    SetConsoleChar                                  ;display ASCII character
  2744 00000867 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2745 00000869 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2746 0000086C 7402                                            jz      .90                                             ;no, skip ahead
  2747 0000086E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2748 00000870 B14C                    .90                     mov     cl,76                                           ;indicator column
  2749 00000872 E8F7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2750 00000877 07                                              pop     es                                              ;restore non-volatile regs
  2751 00000878 59                                              pop     ecx                                             ;
  2752 00000879 C3                                              ret                                                     ;return
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;
  2755                                  ;       Routine:        PutConsoleString
  2756                                  ;
  2757                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2758                                  ;                       console position as needed.
  2759                                  ;
  2760                                  ;       In:             EDX     source address
  2761                                  ;                       DS      OS data selector
  2762                                  ;
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764 0000087A 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  2765 0000087B 89D6                                            mov     esi,edx                                         ;source address
  2766 0000087D FC                                              cld                                                     ;forward strings
  2767 0000087E AC                      .10                     lodsb                                                   ;ASCII character
  2768 0000087F 08C0                                            or      al,al                                           ;end of string?
  2769 00000881 7422                                            jz      .40                                             ;yes, skip ahead
  2770 00000883 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  2771 00000885 7507                                            jne     .20                                             ;no, skip ahead
  2772 00000887 E8C6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  2773 0000088C EBF0                                            jmp     .10                                             ;next character
  2774 0000088E 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2775 00000890 7507                                            jne     .30                                             ;no, skip ahead
  2776 00000892 E86BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  2777 00000897 EBE5                                            jmp     .10                                             ;next character
  2778 00000899 E8ABFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  2779 0000089E E844FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  2780 000008A3 EBD9                                            jmp     .10                                             ;next character
  2781 000008A5 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  2782 000008A6 C3                                              ret                                                     ;return
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                  ;
  2785                                  ;       Routine:        Yield
  2786                                  ;
  2787                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2788                                  ;
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790 000008A7 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  2791 000008A8 F4                                              hlt                                                     ;halt until external interrupt
  2792 000008A9 C3                                              ret                                                     ;return
  2793                                  ;=======================================================================================================================
  2794                                  ;
  2795                                  ;       Message Queue Helper Routines
  2796                                  ;
  2797                                  ;       GetMessage
  2798                                  ;       PutMessage
  2799                                  ;
  2800                                  ;=======================================================================================================================
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                  ;
  2803                                  ;       Routine:        GetMessage
  2804                                  ;
  2805                                  ;       Description:    This routine reads and removes a message from the message queue.
  2806                                  ;
  2807                                  ;       Out:            EAX     lo-order message data
  2808                                  ;                       EDX     hi-order message data
  2809                                  ;
  2810                                  ;                       CY      0 = message read
  2811                                  ;                               1 = no message to read
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814 000008AA 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  2815 000008AB 51                                              push    ecx                                             ;
  2816 000008AC 1E                                              push    ds                                              ;
  2817 000008AD 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  2818 000008AF 1F                                              pop     ds                                              ;... into data segment register
  2819 000008B0 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  2820 000008B6 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  2821 000008B8 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2822 000008BB 09D0                                            or      eax,edx                                         ;is queue empty?
  2823 000008BD F9                                              stc                                                     ;assume queue is emtpy
  2824 000008BE 741B                                            jz      .20                                             ;yes, skip ahead
  2825 000008C0 31C9                                            xor     ecx,ecx                                         ;store zero
  2826 000008C2 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  2827 000008C4 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2828 000008C7 83C308                                          add     ebx,8                                           ;next queue element
  2829 000008CA 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  2830 000008D0 7502                                            jnz     .10                                             ;no, skip ahead
  2831 000008D2 B308                                            mov     bl,8                                            ;reset to 1st entry
  2832 000008D4 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2833 000008DA F8                                              clc                                                     ;indicate message read
  2834 000008DB 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2835 000008DC 59                                              pop     ecx                                             ;
  2836 000008DD 5B                                              pop     ebx                                             ;
  2837 000008DE C3                                              ret                                                     ;return
  2838                                  ;-----------------------------------------------------------------------------------------------------------------------
  2839                                  ;
  2840                                  ;       Routine:        PutMessage
  2841                                  ;
  2842                                  ;       Description:    This routine adda a message to the message queue.
  2843                                  ;
  2844                                  ;       In:             ECX     hi-order data word
  2845                                  ;                       EDX     lo-order data word
  2846                                  ;
  2847                                  ;       Out:            CY      0 = success
  2848                                  ;                               1 = fail: queue is full
  2849                                  ;
  2850                                  ;-----------------------------------------------------------------------------------------------------------------------
  2851 000008DF 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  2852 000008E0 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  2853 000008E2 1F                                              pop     ds                                              ;... into data segment register
  2854 000008E3 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  2855 000008E8 833800                                          cmp     dword [eax],0                                   ;is queue full?
  2856 000008EB F9                                              stc                                                     ;assume failure
  2857 000008EC 7517                                            jne     .20                                             ;yes, cannot store
  2858 000008EE 8910                                            mov     [eax],edx                                       ;store lo-order data
  2859 000008F0 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  2860 000008F3 83C008                                          add     eax,8                                           ;next queue element adr
  2861 000008F6 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  2862 000008FB 7502                                            jnz     .10                                             ;no, skip ahead
  2863 000008FD B008                                            mov     al,8                                            ;reset to top of queue
  2864 000008FF A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2865 00000904 F8                                              clc                                                     ;indicate success
  2866 00000905 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2867 00000906 C3                                              ret                                                     ;return
  2868                                  ;=======================================================================================================================
  2869                                  ;
  2870                                  ;       Memory-Mapped Video Routines
  2871                                  ;
  2872                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2873                                  ;
  2874                                  ;       ClearConsoleScreen
  2875                                  ;       ScrollConsoleRow
  2876                                  ;       SetConsoleChar
  2877                                  ;
  2878                                  ;=======================================================================================================================
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880                                  ;
  2881                                  ;       Routine:        ClearConsoleScreen
  2882                                  ;
  2883                                  ;       Description:    This routine clears the console (CGA) screen.
  2884                                  ;
  2885                                  ;-----------------------------------------------------------------------------------------------------------------------
  2886 00000907 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2887 00000908 57                                              push    edi                                             ;
  2888 00000909 1E                                              push    ds                                              ;
  2889 0000090A 06                                              push    es                                              ;
  2890 0000090B 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  2891 0000090D 1F                                              pop     ds                                              ;... into DS register
  2892 0000090E 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2893 00000910 07                                              pop     es                                              ;... into ES register
  2894 00000911 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  2895 00000916 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2896 0000091B 31FF                                            xor     edi,edi                                         ;target offset
  2897 0000091D FC                                              cld                                                     ;forward strings
  2898 0000091E F3AB                                            rep     stosd                                           ;reset screen body
  2899 00000920 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2900 00000925 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2901 0000092A F3AB                                            rep     stosd                                           ;reset OIA line
  2902 0000092C 30C0                                            xor     al,al                                           ;zero register
  2903 0000092E A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  2904 00000933 A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  2905 00000938 E847000000                                      call    PlaceCursor                                     ;place cursor at current position
  2906 0000093D 07                                              pop     es                                              ;restore non-volatile regs
  2907 0000093E 1F                                              pop     ds                                              ;
  2908 0000093F 5F                                              pop     edi                                             ;
  2909 00000940 59                                              pop     ecx                                             ;
  2910 00000941 C3                                              ret                                                     ;return
  2911                                  ;-----------------------------------------------------------------------------------------------------------------------
  2912                                  ;
  2913                                  ;       Routine:        ScrollConsoleRow
  2914                                  ;
  2915                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2916                                  ;
  2917                                  ;-----------------------------------------------------------------------------------------------------------------------
  2918 00000942 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2919 00000943 56                                              push    esi                                             ;
  2920 00000944 57                                              push    edi                                             ;
  2921 00000945 1E                                              push    ds                                              ;
  2922 00000946 06                                              push    es                                              ;
  2923 00000947 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2924 00000949 1F                                              pop     ds                                              ;... into DS
  2925 0000094A 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2926 0000094C 07                                              pop     es                                              ;... into ES
  2927 0000094D B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2928 00000952 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2929 00000957 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  2930 00000959 FC                                              cld                                                     ;forward strings
  2931 0000095A F3A5                                            rep     movsd                                           ;move 24 lines up
  2932 0000095C B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2933 00000961 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2934 00000966 F3AB                                            rep     stosd                                           ;clear bottom row
  2935 00000968 07                                              pop     es                                              ;restore non-volatile regs
  2936 00000969 1F                                              pop     ds                                              ;
  2937 0000096A 5F                                              pop     edi                                             ;
  2938 0000096B 5E                                              pop     esi                                             ;
  2939 0000096C 59                                              pop     ecx                                             ;
  2940 0000096D C3                                              ret                                                     ;return
  2941                                  ;-----------------------------------------------------------------------------------------------------------------------
  2942                                  ;
  2943                                  ;       Routine:        SetConsoleChar
  2944                                  ;
  2945                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2946                                  ;
  2947                                  ;       In:             AL      ASCII character
  2948                                  ;                       CL      column
  2949                                  ;                       CH      row
  2950                                  ;                       ES      CGA selector
  2951                                  ;
  2952                                  ;       Out:            EAX     last target address written (ES:)
  2953                                  ;                       CL      column + 1
  2954                                  ;
  2955                                  ;-----------------------------------------------------------------------------------------------------------------------
  2956 0000096E 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  2957 00000970 0FB6C5                                          movzx   eax,ch                                          ;row
  2958 00000973 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  2959 00000975 F6E4                                            mul     ah                                              ;row * cols/row
  2960 00000977 00C8                                            add     al,cl                                           ;add column
  2961 00000979 80D400                                          adc     ah,0                                            ;handle carry
  2962 0000097C D1E0                                            shl     eax,1                                           ;screen offset
  2963 0000097E 268810                                          mov     [es:eax],dl                                     ;store character
  2964 00000981 FEC1                                            inc     cl                                              ;next column
  2965 00000983 C3                                              ret                                                     ;return
  2966                                  ;=======================================================================================================================
  2967                                  ;
  2968                                  ;       Input/Output Routines
  2969                                  ;
  2970                                  ;       These routines read and/or write directly to ports.
  2971                                  ;
  2972                                  ;       PlaceCursor
  2973                                  ;       PutPrimaryEndOfInt
  2974                                  ;       PutSecondaryEndOfInt
  2975                                  ;       SetKeyboardLamps
  2976                                  ;       WaitForKeyInBuffer
  2977                                  ;       WaitForKeyOutBuffer
  2978                                  ;
  2979                                  ;=======================================================================================================================
  2980                                  ;-----------------------------------------------------------------------------------------------------------------------
  2981                                  ;
  2982                                  ;       Routine:        PlaceCursor
  2983                                  ;
  2984                                  ;       Description:    This routine positions the cursor on the console.
  2985                                  ;
  2986                                  ;       In:             DS      OS data selector
  2987                                  ;
  2988                                  ;-----------------------------------------------------------------------------------------------------------------------
  2989 00000984 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2990 00000985 A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2991 0000098A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2992 0000098C F6E4                                            mul     ah                                              ;row offset
  2993 0000098E 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  2994 00000994 80D400                                          adc     ah,0                                            ;add overflow
  2995 00000997 89C1                                            mov     ecx,eax                                         ;screen offset
  2996 00000999 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2997 0000099B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2998 0000099D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2999 0000099F EE                                              out     dx,al                                           ;select register
  3000 000009A0 42                                              inc     edx                                             ;data port
  3001 000009A1 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  3002 000009A3 EE                                              out     dx,al                                           ;store hi-order loc
  3003 000009A4 4A                                              dec     edx                                             ;register select port
  3004 000009A5 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3005 000009A7 EE                                              out     dx,al                                           ;select register
  3006 000009A8 42                                              inc     edx                                             ;data port
  3007 000009A9 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  3008 000009AB EE                                              out     dx,al                                           ;store lo-order loc
  3009 000009AC 59                                              pop     ecx                                             ;restore non-volatile regs
  3010 000009AD C3                                              ret                                                     ;return
  3011                                  ;-----------------------------------------------------------------------------------------------------------------------
  3012                                  ;
  3013                                  ;       Routine:        PutPrimaryEndOfInt
  3014                                  ;
  3015                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3016                                  ;
  3017                                  ;-----------------------------------------------------------------------------------------------------------------------
  3018 000009AE FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3019 000009AF B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3020 000009B1 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3021 000009B3 C3                                              ret                                                     ;return
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ;
  3024                                  ;       Routine:        PutSecondaryEndOfInt
  3025                                  ;
  3026                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3027                                  ;
  3028                                  ;-----------------------------------------------------------------------------------------------------------------------
  3029 000009B4 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3030 000009B5 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3031 000009B7 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3032 000009B9 C3                                              ret                                                     ;return
  3033                                  ;-----------------------------------------------------------------------------------------------------------------------
  3034                                  ;
  3035                                  ;       Routine:        SetKeyboardLamps
  3036                                  ;
  3037                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3038                                  ;
  3039                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3040                                  ;
  3041                                  ;-----------------------------------------------------------------------------------------------------------------------
  3042 000009BA E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3043 000009BF B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3044 000009C1 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  3045 000009C3 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3046 000009C8 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3047 000009CA E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3048 000009CF 88F8                                            mov     al,bh                                           ;set/reset lamps value
  3049 000009D1 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  3050 000009D3 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3051 000009D8 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3052 000009DA C3                                              ret                                                     ;return
  3053                                  ;-----------------------------------------------------------------------------------------------------------------------
  3054                                  ;
  3055                                  ;       Routine:        WaitForKeyInBuffer
  3056                                  ;
  3057                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3058                                  ;
  3059                                  ;       Out:            ZF      1 = Input buffer ready
  3060                                  ;                               0 = Input buffer not ready after timeout
  3061                                  ;
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063 000009DB 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3064 000009DC B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3065 000009E1 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3066 000009E3 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  3067 000009E5 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  3068 000009E7 59                                              pop     ecx                                             ;restore non-volatile regs
  3069 000009E8 C3                                              ret                                                     ;return
  3070                                  ;-----------------------------------------------------------------------------------------------------------------------
  3071                                  ;
  3072                                  ;       Routine:        WaitForKeyOutBuffer
  3073                                  ;
  3074                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3075                                  ;
  3076                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3077                                  ;                               0 = Output buffer empty after timeout
  3078                                  ;
  3079                                  ;-----------------------------------------------------------------------------------------------------------------------
  3080 000009E9 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3081 000009EA B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3082 000009EF E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3083 000009F1 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  3084 000009F3 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  3085 000009F5 59                                              pop     ecx                                             ;restore non-volatile regs
  3086 000009F6 C3                                              ret                                                     ;return
  3087                                  ;-----------------------------------------------------------------------------------------------------------------------
  3088                                  ;
  3089                                  ;       End of the Kernel Function Library
  3090                                  ;
  3091                                  ;-----------------------------------------------------------------------------------------------------------------------
  3092 000009F7 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  3093                                  ;=======================================================================================================================
  3094                                  ;
  3095                                  ;       Console Task
  3096                                  ;
  3097                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3098                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3099                                  ;       screen and responds to user commands.
  3100                                  ;
  3101                                  ;=======================================================================================================================
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103                                  ;
  3104                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3105                                  ;
  3106                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3107                                  ;
  3108                                  ;-----------------------------------------------------------------------------------------------------------------------
  3109                                  section                 constack                                                ;console task stack
  3110 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  3111                                  ;-----------------------------------------------------------------------------------------------------------------------
  3112                                  ;
  3113                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3114                                  ;
  3115                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3116                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3117                                  ;       16 descriptors. Six are initially defined.
  3118                                  ;
  3119                                  ;-----------------------------------------------------------------------------------------------------------------------
  3120                                  section                 conldt                                                  ;console local descriptors
  3121 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  3122 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  3123 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  3124 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  3125 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3126 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3127 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3128                                  ;-----------------------------------------------------------------------------------------------------------------------
  3129                                  ;
  3130                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3131                                  ;
  3132                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3133                                  ;       segment. CS to console code.
  3134                                  ;
  3135                                  ;-----------------------------------------------------------------------------------------------------------------------
  3136                                  section                 contss                                                  ;console task state segment
  3137 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3138 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3139 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3140 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3141 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3142 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3143 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3144 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3145 00000020 00000000                                        dd      0                                               ;20 eip
  3146 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3147 00000028 00000000                                        dd      0                                               ;28 eax
  3148 0000002C 00000000                                        dd      0                                               ;2c ecx
  3149 00000030 00000000                                        dd      0                                               ;30 edx
  3150 00000034 00000000                                        dd      0                                               ;34 ebx
  3151 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3152 0000003C 00000000                                        dd      0                                               ;3c ebp
  3153 00000040 00000000                                        dd      0                                               ;40 esi
  3154 00000044 00000000                                        dd      0                                               ;44 edi
  3155 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3156 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3157 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3158 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3159 00000058 00000000                                        dd      0                                               ;58 fs
  3160 0000005C 00000000                                        dd      0                                               ;5c gs
  3161 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3162 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3163                                  ;-----------------------------------------------------------------------------------------------------------------------
  3164                                  ;
  3165                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3166                                  ;
  3167                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3168                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3169                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3170                                  ;       event.
  3171                                  ;
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173                                  section                 conmque                                                 ;console message queue
  3174 00000000 08000000                                        dd      8                                               ;head pointer
  3175 00000004 08000000                                        dd      8                                               ;tail pointer
  3176 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3177                                  ;-----------------------------------------------------------------------------------------------------------------------
  3178                                  ;
  3179                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3180                                  ;
  3181                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3182                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3183                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3184                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3185                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3186                                  ;       board input, echoing to the console screen and responding to user commands.
  3187                                  ;
  3188                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3189                                  ;
  3190                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3191                                  ;                               |  Real Mode Interrupt Vectors                  |
  3192                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3193                                  ;                               |  Reserved BIOS Memory Area                    |
  3194                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3195                                  ;                               |  Shared Kernel Memory Area                    |
  3196                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3197                                  ;                               |  Global Descriptor Table (GDT)                |
  3198                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3199                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3200                                  ;                       002000  +-----------------------------------------------+
  3201                                  ;                               |  Interrupt Handlers                           |
  3202                                  ;                               |  Kernel Function Library                      |
  3203                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3204                                  ;                               |  Console Task Stack Area                      |
  3205                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3206                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3207                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3208                                  ;                               |  Console Task Task State Segment (TSS)        |
  3209                                  ;                       004800  +-----------------------------------------------+
  3210                                  ;                               |  Console Task Message Queue                   |
  3211                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3212                                  ;                               |  Console Task Code                            |
  3213                                  ;                               |  Console Task Constants                       |
  3214                                  ;                       006000  +===============================================+
  3215                                  ;
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3218 00000000 E852000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  3219                                  
  3220                                                          clearConsoleScreen                                      ;clear the console screen
  3220 00000005 B000                <1>  mov al,eClearConsoleScreen
  3220 00000007 CD30                <1>  int _svc
  3221                                                          putConsoleString czTitle                                ;display startup message
  3221 00000009 BA[75000000]        <1>  mov edx,%1
  3221 0000000E B003                <1>  mov al,ePutConsoleString
  3221 00000010 CD30                <1>  int _svc
  3222                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3222                              <1> .10 :
  3222 00000012 BA[73000000]        <1>  mov edx,%1
  3222 00000017 B003                <1>  mov al,ePutConsoleString
  3222 00000019 CD30                <1>  int _svc
  3223                                                          placeCursor                                             ;set CRT cursor location
  3223 0000001B B002                <1>  mov al,ePlaceCursor
  3223 0000001D CD30                <1>  int _svc
  3224                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3224 0000001F BA0C080000          <1>  mov edx,%1
  3224 00000024 B94F000000          <1>  mov ecx,%2
  3224 00000029 B701                <1>  mov bh,%3
  3224 0000002B B30D                <1>  mov bl,%4
  3224 0000002D B001                <1>  mov al,eGetConsoleString
  3224 0000002F CD30                <1>  int _svc
  3225                                                          putConsoleString czNewLine                              ;newline
  3225 00000031 BA[70000000]        <1>  mov edx,%1
  3225 00000036 B003                <1>  mov al,ePutConsoleString
  3225 00000038 CD30                <1>  int _svc
  3226                                                          putConsoleString wzConsoleInBuffer                      ;print entered command
  3226 0000003A BA0C080000          <1>  mov edx,%1
  3226 0000003F B003                <1>  mov al,ePutConsoleString
  3226 00000041 CD30                <1>  int _svc
  3227                                                          putConsoleString czNewLine                              ;new line
  3227 00000043 BA[70000000]        <1>  mov edx,%1
  3227 00000048 B003                <1>  mov al,ePutConsoleString
  3227 0000004A CD30                <1>  int _svc
  3228                                                          putConsoleString czUnknownCommand                       ;display error message
  3228 0000004C BA[93000000]        <1>  mov edx,%1
  3228 00000051 B003                <1>  mov al,ePutConsoleString
  3228 00000053 CD30                <1>  int _svc
  3229                                  
  3230 00000055 EBBB                                            jmp     .10                                             ;next command
  3231                                  ;-----------------------------------------------------------------------------------------------------------------------
  3232                                  ;
  3233                                  ;       Routine:        ConInitializeData
  3234                                  ;
  3235                                  ;       Description:    This routine initializes console task variables.
  3236                                  ;
  3237                                  ;-----------------------------------------------------------------------------------------------------------------------
  3238 00000057 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  3239 00000058 57                                              push    edi                                             ;
  3240 00000059 06                                              push    es                                              ;
  3241                                  ;
  3242                                  ;       Initialize console work areas.
  3243                                  ;
  3244 0000005A 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3245 0000005C 07                                              pop     es                                              ;... into extra segment register
  3246 0000005D BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  3247 00000062 30C0                                            xor     al,al                                           ;initialization value
  3248 00000064 B95C000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3249 00000069 FC                                              cld                                                     ;forward strings
  3250 0000006A F3AA                                            rep     stosb                                           ;initialize data
  3251                                  ;
  3252                                  ;       Restore and return.
  3253                                  ;
  3254 0000006C 07                                              pop     es                                              ;restore non-volatile regs
  3255 0000006D 5F                                              pop     edi                                             ;
  3256 0000006E 59                                              pop     ecx                                             ;
  3257 0000006F C3                                              ret                                                     ;return
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  ;
  3260                                  ;       Constants
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263 00000070 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  3264 00000073 3A00                    czPrompt                db      ":",0                                           ;prompt string
  3265 00000075 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3265 0000007E 65726174696E672053-
  3265 00000087 797374656D20312E30-
  3265 00000090 0D0A00             
  3266 00000093 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3266 0000009C 6F6D6D616E640D0A00 
  3267 000000A5 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  3268                                  %endif
  3269                                  %ifdef BUILDDISK
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  ;
  3272                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3273                                  ;
  3274                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3275                                  ;
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  section                 unused                                                  ;unused disk space
  3278 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3279                                  %endif
  3280                                  ;=======================================================================================================================
  3281                                  ;
  3282                                  ;       End of Program Code
  3283                                  ;
  3284                                  ;=======================================================================================================================
