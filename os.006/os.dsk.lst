     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.006
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;			are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;			console task.
    10                                  ;
    11                                  ;	Revised:	January 1, 2017
    12                                  ;
    13                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    19                                  ;
    20                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;	Assembly Directives
    26                                  ;
    27                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK
    36                                  %define BUILDBOOT
    37                                  %define BUILDCOM
    38                                  %endif
    39                                  %ifdef BUILDPREP
    40                                  %define BUILDBOOT
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;	Conventions
    45                                  ;
    46                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    47                                  ;			Labels within a routine begin at ".10" and increment by 10.
    48                                  ;
    49                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    50                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    51                                  ;
    52                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    53                                  ;			Assembly operands begin in column 33.
    54                                  ;			Lines should not extend beyond column 120.
    55                                  ;
    56                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    57                                  ;			Routine names begin with a verb (Get, Read, etc.)
    58                                  ;
    59                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    60                                  ;			Constant stored values are named in camel case, starting with 'c'.
    61                                  ;			The 2nd letter of the constant label indicates the storage type.
    62                                  ;
    63                                  ;			cq......	constant quad-word (dq)
    64                                  ;			cd......	constant double-word (dd)
    65                                  ;			cw......	constant word (dw)
    66                                  ;			cb......	constant byte (db)
    67                                  ;			cz......	constant ASCIIZ (null-terminated) string
    68                                  ;
    69                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    70                                  ;			The 2nd letter of the variable label indicates the storage type.
    71                                  ;
    72                                  ;			wq......	variable quad-word (resq)
    73                                  ;			wd......	variable double-word (resd)
    74                                  ;			ww......	variable word (resw)
    75                                  ;			wb......	variable byte (resb)
    76                                  ;
    77                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    78                                  ;			Structure names do not begin with a verb.
    79                                  ;
    80                                  ;	Macros:		Macro names are in camel case (getDateString).
    81                                  ;			Macro names do begin with a verb.
    82                                  ;
    83                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    84                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    85                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    86                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    87                                  ;
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;-----------------------------------------------------------------------------------------------------------------------
    90                                  ;
    91                                  ;	Equates
    92                                  ;
    93                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    94                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    95                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    96                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    97                                  ;	values and, lastly, application values.
    98                                  ;
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;-----------------------------------------------------------------------------------------------------------------------
   101                                  ;
   102                                  ;	8042 Keyboard Controller						EKEY...
   103                                  ;
   104                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   105                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   106                                  ;
   107                                  ;-----------------------------------------------------------------------------------------------------------------------
   108                                  EKEYPORTDATA		equ	060h						;8042 data port
   109                                  EKEYPORTSTAT		equ	064h						;8042 status port
   110                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   111                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   112                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   113                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   114                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   115                                  										;---------------------------------------
   116                                  										;	Keyboard Scan Codes
   117                                  										;---------------------------------------
   118                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   119                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   120                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   121                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   122                                  EKEYSLASH		equ	035h						;slash
   123                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   124                                  EKEYALTDOWN		equ	038h						;alt key down
   125                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   126                                  EKEYNUMDOWN		equ	045h						;num-lock down
   127                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   128                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   129                                  EKEYUP			equ	080h						;up
   130                                  EKEYCTRLUP		equ	09Dh						;control key up
   131                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   132                                  EKEYSLASHUP		equ	0B5h						;slash key up
   133                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   134                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   135                                  EKEYALTUP		equ	0B8h						;alt key up
   136                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   137                                  EKEYNUMUP		equ	0C5h						;num-lock up
   138                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   139                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   140                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   141                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   142                                  ;-----------------------------------------------------------------------------------------------------------------------
   143                                  ;
   144                                  ;	8253 Programmable Interrupt Timer					EPIT...
   145                                  ;
   146                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   147                                  ;	approximately 18.2 times per second.
   148                                  ;
   149                                  ;-----------------------------------------------------------------------------------------------------------------------
   150                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   151                                  ;-----------------------------------------------------------------------------------------------------------------------
   152                                  ;
   153                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   154                                  ;
   155                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   156                                  ;	external devices and signals a hardware interrupt to the CPU.
   157                                  ;
   158                                  ;-----------------------------------------------------------------------------------------------------------------------
   159                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   160                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   161                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   162                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   163                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  ;
   166                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   167                                  ;
   168                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   169                                  ;	for CGA, EGA, VGA and compatible video modes.
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   173                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   174                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   175                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   179                                  ;
   180                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   184                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   185                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   186                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   187                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ;
   190                                  ;	x86 Descriptor Access Codes						EACC...
   191                                  ;
   192                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   193                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   194                                  ;
   195                                  ;	0.......	Segment is not present in memory (triggers int 11)
   196                                  ;	1.......	Segment is present in memory
   197                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   198                                  ;	...0....	Segment is a system segment
   199                                  ;	...00010		Local Descriptor Table
   200                                  ;	...00101		Task Gate
   201                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   202                                  ;	...01100		Call Gate (386)
   203                                  ;	...01110		Interrupt Gate (386)
   204                                  ;	...01111		Trap Gate (386)
   205                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   206                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   207                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   208                                  ;
   209                                  ;-----------------------------------------------------------------------------------------------------------------------
   210                                  EACCLDT			equ	10000010b					;local descriptor table
   211                                  EACCTASK		equ	10000101b					;task gate
   212                                  EACCTSS			equ	10001001b					;task-state segment
   213                                  EACCGATE		equ	10001100b					;call gate
   214                                  EACCINT			equ	10001110b					;interrupt gate
   215                                  EACCTRAP		equ	10001111b					;trap gate
   216                                  EACCDATA		equ	10010011b					;upward writable data
   217                                  EACCCODE		equ	10011011b					;non-conforming readable code
   218                                  ;-----------------------------------------------------------------------------------------------------------------------
   219                                  ;
   220                                  ;	BIOS Interrupts and Functions						EBIOS...
   221                                  ;
   222                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   223                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   224                                  ;
   225                                  ;-----------------------------------------------------------------------------------------------------------------------
   226                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   227                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   228                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   229                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   230                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   231                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   232                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;
   235                                  ;	ASCII									EASCII...
   236                                  ;
   237                                  ;-----------------------------------------------------------------------------------------------------------------------
   238                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   239                                  EASCIILINEFEED		equ	10						;ASCII line feed
   240                                  EASCIIRETURN		equ	13						;ASCII carriage return
   241                                  EASCIIESCAPE		equ	27						;ASCII escape
   242                                  EASCIISPACE		equ	32						;ASCII space
   243                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   244                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   245                                  EASCIITILDE		equ	126						;ASCII '~'
   246                                  EASCIICASE		equ	00100000b					;ASCII case bit
   247                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  ;
   250                                  ;	Boot Sector and Loader Constants
   251                                  ;
   252                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   253                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   254                                  ;
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   257                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   258                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   259                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   260                                  EMAXTRIES		equ	5						;max read retries
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ESELDAT			equ	18h						;kernel data selector
   265                                  ESELCGA			equ	20h						;cga video selector
   266                                  ESELOSCODE		equ	48h						;os kernel selector
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;	LDT Selectors								ESEL...
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ESELMQ			equ	2Ch						;console task message queue
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;	Kernel Constants							EKRN...
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  EKRNDESLEN		equ	8						;size of descriptor
   275                                  EKRNADR			equ	1000h						;kernel base address
   276                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   277                                  ;-----------------------------------------------------------------------------------------------------------------------
   278                                  ;	Keyboard Flags								EKEY...
   279                                  ;-----------------------------------------------------------------------------------------------------------------------
   280                                  EKEYCTRLLEFT		equ	00000001b					;left control
   281                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   282                                  EKEYALTLEFT		equ	00000100b					;left alt
   283                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   284                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   285                                  EKEYSHIFT		equ	00010010b					;left or right shift
   286                                  EKEYALTRIGHT		equ	00100000b					;right alt
   287                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   288                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   289                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   290                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;	Console Constants							ECON...
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  ECONCOLS		equ	80						;columns per row
   295                                  ECONROWS		equ	24						;console rows
   296                                  ECONOIAROW		equ	24						;operator information area row
   297                                  ECONCOLBYTES		equ	2						;bytes per column
   298                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   299                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   300                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   301                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;	Kernel Message Identifiers						EMSG...
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   306                                  EMSGKEYUP		equ	41010000h					;message: key-up
   307                                  EMSGKEYCHAR		equ	41020000h					;message: character
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  ;
   310                                  ;	Structures
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;
   315                                  ;	MQUEUE
   316                                  ;
   317                                  ;	The MQUEUE structure maps memory used for a message queue.
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  struc			MQUEUE
   321 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   322 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   323 00000008 <res 000003F8>          MQData			resd	254						;message queue
   324                                  endstruc
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;	OSDATA
   328                                  ;
   329                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   330                                  ;	used by the BIOS.
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  struc			OSDATA
   334 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   335 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   336 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   337 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   338 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   339 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   340 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   341 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   342 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   343 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   344 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   345 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   346 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   347 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   348 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   349 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   350 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   351 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   352 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   353 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   354 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   355 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   356 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   357 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   358 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   359 00000449 <res 00000001>          			resb	1						;449 current video mode
   360 0000044A <res 00000002>          			resw	1						;44A screen columns
   361 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   362 0000044E <res 00000002>          			resw	1						;44E current video page offset
   363 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   364 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   365 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   366 00000462 <res 00000001>          			resb	1						;462 active display page number
   367 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   368 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   369 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   370 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   371 00000469 <res 00000003>          			resb	3						;469 vague
   372 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   373 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   374 00000471 <res 00000001>          			resb	1						;471 bios break flag
   375 00000472 <res 00000002>          			resw	1						;472 soft reset
   376 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   377 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   378 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   379 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   380 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   381 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   382 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   383 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   384 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   385 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   386 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   387 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   388 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   389 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   390 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   391 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   392 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   393 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   394 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   395 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   396 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   397 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   398 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   399 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   400 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   401 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   402 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   403 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   404 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   405 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   406 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   407 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   408 000004AC <res 00000008>          			resb	8						;4AC reserved
   409 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   410 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   411 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   412 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   413 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   414 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   415 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   416 000004CD <res 00000001>          			resb	1						;4CD unknown
   417 000004CE <res 00000002>          			resw	1						;4CE day counter
   418 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   419 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   420 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   421 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   422 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   423 00000505 <res 0000000A>          			resb	10						;505 POST work area
   424 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   425 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   426 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   427 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   428 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   429 0000051E <res 00000002>          			resw	1						;51E unknown
   430 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   431 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   432 00000530 <res 00000004>          			resb	4						;530 MODE command
   433 00000534 <res 000001CC>          			resb	460						;534 unused
   434 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ;
   437                                  ;	OS Variables								@disk: N/A	@mem: 000800
   438                                  ;
   439                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   440                                  ;	accessible by any kernel task or interrupt.
   441                                  ;
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  ECONDATA		equ	($)
   444 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   445 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   446 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   447 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   448 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   449 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   450 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   451 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   452 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   453 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   454 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   455 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   456 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   457                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   458                                  endstruc
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ;
   461                                  ;	Macros
   462                                  ;
   463                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   464                                  ;
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  %macro			mint	1
   467                                  _%1			equ	($-$$) / EKRNDESLEN
   468                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   469                                  %endmacro
   470                                  %macro			mtrap	1
   471                                  _%1			equ	($-$$) / EKRNDESLEN
   472                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   473                                  %endmacro
   474                                  %macro			menter	1
   475                                  ?%1			equ	($-$$)
   476                                  %endmacro
   477                                  %macro			tsvce	1
   478                                  e%1			equ	($-tsvc)/4
   479                                  			dd	%1
   480                                  %endmacro
   481                                  %ifdef BUILDBOOT
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;
   484                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   485                                  ;
   486                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   487                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   488                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   489                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   490                                  ;
   491                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   492                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   493                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   494                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   495                                  ;	immediately followed by a disk parameter table.
   496                                  ;
   497                                  ;-----------------------------------------------------------------------------------------------------------------------
   498                                  			cpu	8086						;assume minimal CPU
   499                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   500                                  			bits	16						;16-bit code at power-up
   501                                  %ifdef BUILDPREP
   502                                  Boot			jmp	word Prep					;jump to preparation code
   503                                  %else
   504 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   505                                  %endif
   506                                  ;-----------------------------------------------------------------------------------------------------------------------
   507                                  ;
   508                                  ;	Disk Parameter Table
   509                                  ;
   510                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   511                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   512                                  ;
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   515 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   516 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   517 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   518 00000010 02                      cbFatCount		db	2						;file allocation table copies
   519 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   520 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   521 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   522 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   523                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   524 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   525 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   526 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   527                                  ;
   528                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   529                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   530                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   531                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   532                                  ;	given several possible starting values for CS:IP.
   533                                  ;
   534                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   535 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   536                                  .@20			equ	$-$$						;.@20 = 021h
   537 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   538 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   539 00000025 B104                    			mov	cl,4						;shift count
   540 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   541 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   542 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   543                                  ;
   544                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   545                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   546                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   547                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   548                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   549                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   550                                  ;
   551 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   552 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   553 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   554 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   555 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   556                                  ;
   557                                  ;	Our boot addressability is now set up according to the following diagram.
   558                                  ;
   559                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   560                                  ;				|  Unused (DOS Program Segment Prefix)		|
   561                                  ;			007c00	+-----------------------------------------------+ DS:0100
   562                                  ;				|  Boot Sector Code (vstart=100h)		|
   563                                  ;				|						|
   564                                  ;			007e00	+-----------------------------------------------+ DS:0300
   565                                  ;				|  Boot Stack					|
   566                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   567                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   568                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   569                                  ;				|						|
   570                                  ;			009100	+-----------------------------------------------+ DS:1600
   571                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   572                                  ;				|						|
   573                                  ;			009300	+-----------------------------------------------+ DS:1800
   574                                  ;
   575                                  ;	On entry, DL indicates the drive being booted from.
   576                                  ;
   577 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   578                                  ;
   579                                  ;	Compute directory i/o buffer address.
   580                                  ;
   581 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   582 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   583 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   584 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   585                                  ;
   586                                  ;	Compute segment where os.com will be loaded.
   587                                  ;
   588 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   589 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   590 0000004E 83E810                  			sub	ax,16						;AX = 0900
   591 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   592                                  ;
   593                                  ;	Write a message to the console so we know we have our addressability established.
   594                                  ;
   595 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   596 00000057 E84B01                  			call	BootPrint					;display loader message
   597                                  ;
   598                                  ;	Initialize the number of directory sectors to search.
   599                                  ;
   600 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   601 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   602                                  ;
   603                                  ;	Compute number of directory sectors and initialize overhead count.
   604                                  ;
   605 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   606 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   607 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   608 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   609                                  ;
   610                                  ;	Compute directory entries per sector.
   611                                  ;
   612 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   613 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   614 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   615                                  ;
   616                                  ;	Compute first logical directory sector and update overhead count.
   617                                  ;
   618 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   619 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   620 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   621 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   622 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   623 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   624                                  ;
   625                                  ;	Read directory sector.
   626                                  ;
   627 00000089 B001                    .30			mov	al,1						;sector count
   628 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   629 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   630 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   631                                  ;
   632                                  ;	Setup variables to search this directory sector.
   633                                  ;
   634 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   635 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   636 0000009C 7603                    			jna	.40						;no, continue
   637 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   638 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   639 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   640 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   641                                  ;
   642                                  ;	Loop through directory sectors searching for kernel program.
   643                                  ;
   644 000000AC 56                      .50			push	si						;save kernel name address
   645 000000AD 57                      			push	di						;save dir i/o buffer address
   646 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   647 000000B1 FC                      			cld							;forward strings
   648 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   649 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   650 000000B5 5E                      			pop	si						;restore kernel name address
   651 000000B6 7418                    			je	.60						;exit loop if found
   652 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   653 000000BC 48                      			dec	ax						;decrement remaining entries
   654 000000BD 75ED                    			jnz	.50						;next entry
   655                                  ;
   656                                  ;	Repeat search if we are not at the end of the directory.
   657                                  ;
   658 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   659 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   660 000000C8 75BF                    			jne	.30						;no, get next sector
   661 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   662 000000CD E9C000                  			jmp	BootExit					;display message and exit
   663                                  ;
   664                                  ;	If we find the kernel program in the directory, read the FAT.
   665                                  ;
   666 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   667 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   668 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   669 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   670 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   671 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   672                                  ;
   673                                  ;	Get the starting cluster of the kernel program and target address.
   674                                  ;
   675 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   676 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   677                                  ;
   678                                  ;	Read each program cluster into RAM.
   679                                  ;
   680 000000E9 50                      .70			push	ax						;save cluster nbr
   681 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   682 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   683 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   684 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   685 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   686 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   687 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   688 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   689                                  ;
   690                                  ;	Update buffer pointer for next cluster.
   691                                  ;
   692 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   693 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   694 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   695 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   696 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   697                                  ;
   698                                  ;	Compute next cluster number.
   699                                  ;
   700 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   701 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   702 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   703 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   704 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   705 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   706 0000011B 83E701                  			and	di,1						;get low bit
   707 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   708 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   709 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   710                                  ;
   711                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   712                                  ;
   713 00000126 F6C101                  			test	cl,1						;is cluster odd?
   714 00000129 7404                    			jz	.80						;no, skip ahead
   715 0000012B B104                    			mov	cl,4						;shift count
   716 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   717 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   718 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   719 00000135 75B2                    			jne	.70						;no, continue
   720                                  ;
   721                                  ;	Transfer control to the operating system program.
   722                                  ;
   723 00000137 EA                      			db	0EAh						;jmp seg:offset
   724 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   725 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   726                                  ;
   727                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   728                                  ;
   729 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   730 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   731 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   732 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   733 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   734 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   735 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   736 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   737 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   738 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   739                                  ;
   740                                  ;	Try maxtries times to read sector.
   741                                  ;
   742 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   743 0000015B 53                      .10			push	bx						;save buffer address
   744 0000015C 51                      			push	cx						;save retry count
   745 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   746 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   747 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   748 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   749 0000016A 59                      			pop	cx						;restore retry count
   750 0000016B 5B                      			pop	bx						;restore buffer address
   751 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   752 0000016E E2EB                    			loop	.10						;retry
   753                                  ;
   754                                  ;	Handle disk error: convert to ASCII and store in error string.
   755                                  ;
   756 00000170 88E0                    			mov	al,ah						;AL = bios error code
   757 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   758 00000174 B210                    			mov	dl,16						;divisor for base 16
   759 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   760 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   761 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   762 0000017E 7203                    			jb	.20						;continue if numeral
   763 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   764 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   765 00000185 7203                    			jb	.30						;continue if numeral
   766 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   767 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   768 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   769 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   770 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   771 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   772 00000197 7504                    			jnz	.20						;continue if key pressed
   773 00000199 FB                      			sti							;enable maskable interrupts
   774 0000019A F4                      			hlt							;wait for interrupt
   775 0000019B EBF6                    			jmp	.10						;repeat
   776 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   777 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   778 000001A1 FB                      .30			sti							;enable maskable interrupts
   779 000001A2 F4                      			hlt							;stop until reset, int, nmi
   780 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   781                                  ;
   782                                  ;	Display text message.
   783                                  ;
   784 000001A5 FC                      BootPrint		cld							;forward strings
   785 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   786 000001A7 84C0                    			test	al,al						;end of string?
   787 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   788 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   789 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   790 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   791 000001B1 C3                      BootReturn		ret							;return
   792                                  ;-----------------------------------------------------------------------------------------------------------------------
   793                                  ;
   794                                  ;	Constants
   795                                  ;
   796                                  ;-----------------------------------------------------------------------------------------------------------------------
   797                                  			align	2
   798 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   799 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   799 000001BD 4F4D               
   800 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   800 000001C8 2E2E0D0A00         
   801 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   801 000001D6 7220               
   802 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   803 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   803 000001E4 7373696E6700       
   804                                  ;-----------------------------------------------------------------------------------------------------------------------
   805                                  ;
   806                                  ;	Work Areas
   807                                  ;
   808                                  ;-----------------------------------------------------------------------------------------------------------------------
   809                                  			align	2
   810 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   811 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   812 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   813 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   814 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   815                                  wwReadCountCommand	equ	$						;read count and command
   816 000001F4 00                      wbReadCount		db	0						;sectors to read
   817 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   818                                  wwDriveHead		equ	$						;drive, head (word)
   819 000001F6 00                      wbDrive			db	0						;drive
   820 000001F7 00                      wbHead			db	0						;head
   821                                  wwSectorTrack		equ	$						;sector, track (word)
   822 000001F8 00                      			db	0						;sector
   823 000001F9 00                      wbTrack			db	0						;track
   824 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   825 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   826                                  %endif
   827                                  %ifdef BUILDPREP
   828                                  ;-----------------------------------------------------------------------------------------------------------------------
   829                                  ;
   830                                  ;	Diskette Preparation Code
   831                                  ;
   832                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   833                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   834                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   835                                  ;
   836                                  ;-----------------------------------------------------------------------------------------------------------------------
   837                                  ;
   838                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   839                                  ;
   840                                  Prep			mov	si,czPrepMsg10					;starting message address
   841                                  			call	BootPrint					;display message
   842                                  ;
   843                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   844                                  ;
   845                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   846                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   847                                  			jnz	.12						;continue if key pressed
   848                                  			sti							;enable interrupts
   849                                  			hlt							;wait for interrupt
   850                                  			jmp	.10						;repeat
   851                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   852                                  			je	.15						;yes, branch
   853                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   854                                  			jne	.10						;no, repeat
   855                                  			jmp	.90						;yes, exit program
   856                                  ;
   857                                  ;	Display writing-sector message and patch the JMP instruction.
   858                                  ;
   859                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   860                                  			call	BootPrint					;display message
   861                                  			mov	bx,Boot+1					;address of JMP instruction operand
   862                                  			mov	ax,01Bh						;address past disk parameter table
   863                                  			mov	[bx],ax						;update the JMP instruction
   864                                  ;
   865                                  ;	Try to read the boot sector.
   866                                  ;
   867                                  			mov	cx,EMAXTRIES					;try up to five times
   868                                  .20			push	cx						;save remaining tries
   869                                  			mov	bx,wcPrepInBuf					;input buffer address
   870                                  			mov	dx,0						;head zero, drive zero
   871                                  			mov	cx,1						;track zero, sector one
   872                                  			mov	ax,0201h					;read one sector
   873                                  			int	EBIOSINTDISKETTE				;attempt the read
   874                                  			pop	cx						;restore remaining retries
   875                                  			jnc	.30						;skip ahead if successful
   876                                  			loop	.20						;try again
   877                                  			mov	si,czPrepMsg20					;read-error message address
   878                                  			jmp	.50						;branch to error routine
   879                                  ;
   880                                  ;	Copy diskette parms from input buffer to output buffer.
   881                                  ;
   882                                  .30			mov	si,wcPrepInBuf					;input buffer address
   883                                  			add	si,11						;skip over JMP and system ID
   884                                  			mov	di,Boot						;output buffer address
   885                                  			add	di,11						;skip over JMP and system ID
   886                                  			mov	cx,19						;length of diskette parameters
   887                                  			cld							;forward string copies
   888                                  			rep	movsb						;copy diskette parameters
   889                                  ;
   890                                  ;	Try to write boot sector to diskette.
   891                                  ;
   892                                  			mov	cx,EMAXTRIES					;try up to five times
   893                                  .40			push	cx						;save remaining tries
   894                                  			mov	bx,Boot						;output buffer address
   895                                  			mov	dx,0						;head zero, drive zero
   896                                  			mov	cx,1						;track zero, sector one
   897                                  			mov	ax,0301h					;write one sector
   898                                  			int	EBIOSINTDISKETTE				;attempt the write
   899                                  			pop	cx						;restore remaining retries
   900                                  			jnc	.80						;skip ahead if successful
   901                                  			loop	.40						;try again
   902                                  			mov	si,czPrepMsg30					;write-error message address
   903                                  ;
   904                                  ;	Convert the error code to ASCII and display the error message.
   905                                  ;
   906                                  .50			push	ax						;save error code
   907                                  			mov	al,ah						;copy error code
   908                                  			mov	ah,0						;AX = error code
   909                                  			mov	dl,10h						;hexadecimal divisor
   910                                  			idiv	dl						;AL = hi-order, AH = lo-order
   911                                  			or	ax,3030h					;add ASCII zone digits
   912                                  			cmp	ah,3Ah						;AH ASCII numeral?
   913                                  			jb	.60						;yes, continue
   914                                  			add	ah,7						;no, make ASCII 'A'-'F'
   915                                  .60			cmp	al,3Ah						;al ASCII numeral?
   916                                  			jb	.70						;yes, continue
   917                                  			add	al,7						;no, make ASCII
   918                                  .70			mov	[si+17],ax					;put ASCII error code in message
   919                                  			call	BootPrint					;write error message
   920                                  			pop	ax						;restore error code
   921                                  ;
   922                                  ;	Display the completion message.
   923                                  ;
   924                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   925                                  			mov	al,ah						;BIOS return code
   926                                  			cmp	al,0						;success?
   927                                  			je	.85						;yes, continue
   928                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   929                                  			cmp	al,1						;disk parameter error?
   930                                  			je	.85						;yes, continue
   931                                  			mov	si,czPrepMsgErr2				;address mark not found message
   932                                  			cmp	al,2						;address mark not found?
   933                                  			je	.85						;yes, continue
   934                                  			mov	si,czPrepMsgErr3				;protected disk message
   935                                  			cmp	al,3						;protected disk?
   936                                  			je	.85						;yes, continue
   937                                  			mov	si,czPrepMsgErr6				;diskette removed message
   938                                  			cmp	al,6						;diskette removed?
   939                                  			je	.85						;yes, continue
   940                                  			mov	si,czPrepMsgErr80				;drive timed out message
   941                                  			cmp	al,80H						;drive timed out?
   942                                  			je	.85						;yes, continue
   943                                  			mov	si,czPrepMsgErrXX				;unknown error message
   944                                  .85			call	BootPrint					;display result message
   945                                  .90			mov	ax,4C00H					;terminate with zero result code
   946                                  			int	21h						;terminate DOS program
   947                                  			ret							;return (should not execute)
   948                                  ;-----------------------------------------------------------------------------------------------------------------------
   949                                  ;
   950                                  ;	Diskette Preparation Messages
   951                                  ;
   952                                  ;-----------------------------------------------------------------------------------------------------------------------
   953                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   954                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   955                                  			db	13,10
   956                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   957                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   958                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   959                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   960                                  			db	13,10,0
   961                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   962                                  			db	13,10,0
   963                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   964                                  			db	13,10,0
   965                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   966                                  			db	13,10,0
   967                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   968                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   969                                  			db	13,10,0
   970                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   971                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   972                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   973                                  			db	13,10,"and retry."
   974                                  			db	13,10,0
   975                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   976                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   977                                  			db	13,10,"using another diskette."
   978                                  			db	13,10,0
   979                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   980                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   981                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   982                                  			db	13,10,0
   983                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   984                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   985                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   986                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   987                                  			db	13,10,"is properly inserted in the diskette drive."
   988                                  			db	13,10,0
   989                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   990                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   991                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   992                                  			db	13,10,0
   993                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   994                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   995                                  			db	13,10,"your computer's technical reference for a description of this error code."
   996                                  			db	13,10,0
   997                                  wcPrepInBuf		equ	$
   998                                  %endif
   999                                  %ifdef BUILDDISK
  1000                                  ;-----------------------------------------------------------------------------------------------------------------------
  1001                                  ;
  1002                                  ;	File Allocation Tables
  1003                                  ;
  1004                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1005                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1006                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1007                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1008                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1009                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1010                                  ;	the last cluster in the chain.
  1011                                  ;
  1012                                  ;	Every three bytes encode two FAT entries as follows:
  1013                                  ;
  1014                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1015                                  ;
  1016                                  ;-----------------------------------------------------------------------------------------------------------------------
  1017                                  ;-----------------------------------------------------------------------------------------------------------------------
  1018                                  ;
  1019                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1020                                  ;
  1021                                  ;-----------------------------------------------------------------------------------------------------------------------
  1022                                  section			fat1							;first copy of FAT
  1023 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1024 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1025 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1026 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1027 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1028 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1029 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1030 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1031 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1032 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1033 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1034 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1035                                  ;-----------------------------------------------------------------------------------------------------------------------
  1036                                  ;
  1037                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1038                                  ;
  1039                                  ;-----------------------------------------------------------------------------------------------------------------------
  1040                                  section			fat2							;second copy of FAT
  1041 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1042 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1043 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1044 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1045 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1046 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1047 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1048 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1049 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1050 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1051 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1052 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1053                                  ;-----------------------------------------------------------------------------------------------------------------------
  1054                                  ;
  1055                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1056                                  ;
  1057                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1058                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1059                                  ;	copy.
  1060                                  ;
  1061                                  ;-----------------------------------------------------------------------------------------------------------------------
  1062                                  section			dir							;diskette directory
  1063 00000000 4F5320202020202043-     			db	"OS      COM"					;file name (must contain spaces)
  1063 00000009 4F4D               
  1064 0000000B 20                      			db	20h						;attribute (archive bit set)
  1065 0000000C 00<rept>                			times	10 db 0;					;unused
  1066 00000016 0000                    			dw	0h						;time
  1067 00000018 41                      			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1068 00000019 49                      			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1069 0000001A 0200                    			dw	2						;first cluster
  1070 0000001C 00520000                			dd	5200h						;file size
  1071 00000020 00<rept>                			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1072                                  %endif
  1073                                  %ifdef BUILDCOM
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;
  1076                                  ;	OS.COM
  1077                                  ;
  1078                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1079                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1080                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1081                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1082                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1083                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1084                                  ;
  1085                                  ;	Our loader addressability is set up according to the following diagram.
  1086                                  ;
  1087                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1088                                  ;				|  Boot Sector & Loader Stack Area		|
  1089                                  ;				|						|
  1090                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1091                                  ;
  1092                                  ;
  1093                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1094                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1095                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1096                                  ;				|  Loader Code					|
  1097                                  ;				|						|
  1098                                  ;			009300	+-----------------------------------------------+ CS:0200
  1099                                  ;
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  ;-----------------------------------------------------------------------------------------------------------------------
  1102                                  ;
  1103                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1104                                  ;
  1105                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1106                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1107                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1108                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1109                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1110                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1111                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1112                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1113                                  ;	registers.
  1114                                  ;
  1115                                  ;-----------------------------------------------------------------------------------------------------------------------
  1116                                  			cpu	8086						;assume minimal CPU
  1117                                  section			loader	vstart=100h					;use .COM compatible addressing
  1118                                  			bits	16						;this is 16-bit code
  1119 00000000 0E                      Loader			push	cs						;use the code segment
  1120 00000001 1F                      			pop	ds						;...as our data segment
  1121 00000002 0E                      			push	cs						;use the code segment
  1122 00000003 07                      			pop	es						;...as our extra segment
  1123                                  ;
  1124                                  ;	Write a message to the console so we know we have our addressability established.
  1125                                  ;
  1126 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1127 00000007 E8A600                  			call	PutTTYString					;display loader message
  1128                                  ;
  1129                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1130                                  ;
  1131 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1132 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1133 00000010 3C03                    			cmp	al,3						;80386+?
  1134 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1135                                  			cpu	386						;allow 80386 instructions
  1136 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1137 00000017 E89600                  			call	PutTTYString					;display message
  1138                                  ;
  1139                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1140                                  ;
  1141 0000001A BE0003                  			mov	si,300h						;GDT offset
  1142 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1143 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1144 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1145 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1146 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1147 00000029 894432                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1148 0000002C 884C34                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1149 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1150 00000032 E87B00                  			call	PutTTYString					;display message
  1151                                  ;
  1152                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1153                                  ;
  1154 00000035 680001                  			push	EKRNSEG						;use kernel segment ...
  1155 00000038 07                      			pop	es						;... as target segment
  1156 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1157 0000003B BE0003                  			mov	si,300h						;DS:SI = source address
  1158 0000003E B90050                  			mov	cx,5000h					;CX = kernel size
  1159 00000041 FC                      			cld							;forward strings
  1160 00000042 F3A4                    			rep	movsb						;copy kernel image
  1161 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1162 00000047 E86600                  			call	PutTTYString					;display message
  1163                                  ;
  1164                                  ;	Switch to protected mode.
  1165                                  ;
  1166 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1167 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1168 0000004E BC0010                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1169 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1170 00000053 BB2820                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1171 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1172 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1173 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1174 0000005E 4A                      			dec	dx						;restore outer loop count
  1175 0000005F 75F8                    			jnz	.10						;continue outer loop
  1176 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1177                                  ;
  1178                                  ;	Enable hardware and maskable interrupts
  1179                                  ;
  1180 00000063 30C0                    			xor	al,al						;enable all registers code
  1181 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1182 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1183 00000069 FB                      			sti							;enable maskable interrupts
  1184                                  ;
  1185                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1186                                  ;
  1187 0000006A 2E0F001E[BE00]          			ltr	[cs:cwLoaderTSS]				;load task register
  1188 00000070 2E0F0016[C000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1189 00000076 EA00005800              			jmp	0058h:0						;jump to task state segment selector
  1190                                  ;-----------------------------------------------------------------------------------------------------------------------
  1191                                  ;
  1192                                  ;	Routine:	LoaderExit
  1193                                  ;
  1194                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1195                                  ;
  1196                                  ;	In:		DS:SI	string address
  1197                                  ;
  1198                                  ;-----------------------------------------------------------------------------------------------------------------------
  1199 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1200                                  ;
  1201                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1202                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1203                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1204                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1205                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1206                                  ;
  1207 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1208 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1209 00000082 7504                    			jnz	.40						;exit if key pressed
  1210 00000084 FB                      			sti							;enable maskable interrupts
  1211 00000085 F4                      			hlt							;wait for interrupt
  1212 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1213                                  ;
  1214                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1215                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1216                                  ;	HLT until the system resets.
  1217                                  ;
  1218 00000088 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1219 0000008A E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1220 0000008C FB                      .50			sti							;enable maskable interrupts
  1221 0000008D F4                      			hlt							;stop until reset, int, nmi
  1222 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1223                                  ;-----------------------------------------------------------------------------------------------------------------------
  1224                                  ;
  1225                                  ;	Routine:	GetCPUType
  1226                                  ;
  1227                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1228                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1229                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1230                                  ;
  1231                                  ;	Output:		AX	0 = 808x, v20, etc.
  1232                                  ;				1 = 80186
  1233                                  ;				2 = 80286
  1234                                  ;				3 = 80386
  1235                                  ;
  1236                                  ;-----------------------------------------------------------------------------------------------------------------------
  1237 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1238 00000092 B120                    			mov	cl,32						;shift count
  1239 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1240 00000096 08C0                    			or	al,al						;did the shift happen?
  1241 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1242                                  			cpu	186
  1243 0000009A 54                      			push	sp						;save stack pointer
  1244 0000009B 59                      			pop	cx						;...into cx
  1245 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1246 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1247                                  			cpu	286
  1248 000000A0 40                      			inc	ax						;AX = 2
  1249 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1250 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1251 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1252 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1253 000000AE 40                      			inc	ax						;AX = 3
  1254 000000AF C3                      .10			ret							;return
  1255                                  ;-----------------------------------------------------------------------------------------------------------------------
  1256                                  ;
  1257                                  ;	Routine:	PutTTYString
  1258                                  ;
  1259                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1260                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1261                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1262                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1263                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1264                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1265                                  ;			registers and flags unless used to indicate return status.
  1266                                  ;
  1267                                  ;	In:		DS:SI	address of string
  1268                                  ;
  1269                                  ;-----------------------------------------------------------------------------------------------------------------------
  1270 000000B0 FC                      PutTTYString		cld							;forward strings
  1271 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1272 000000B2 84C0                    			test	al,al						;end of string?
  1273 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1274 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1275 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1276 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1277 000000BC C3                      .10			ret							;return
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279                                  ;
  1280                                  ;	Loader Data
  1281                                  ;
  1282                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1283                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1284                                  ;
  1285                                  ;-----------------------------------------------------------------------------------------------------------------------
  1286 000000BD 90                      			align	2
  1287 000000BE 6800                    cwLoaderTSS		dw	0068h						;TSS selector
  1288 000000C0 6000                    cwLoaderLDT		dw	0060h						;LDT selector
  1289 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1290 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1291 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 "
  1291 000000D1 74696E672073797374-
  1291 000000DA 656D20726571756972-
  1291 000000E3 657320616E20693338-
  1291 000000EC 3620               
  1292 000000EE 6F72206C6174657220-     			db	"or later processor.",13,10,
  1292 000000F7 70726F636573736F72-
  1292 00000100 2E0D0A             
  1293 00000103 506C65617365207072-     			db	"Please press any key to restart the "
  1293 0000010C 65737320616E79206B-
  1293 00000115 657920746F20726573-
  1293 0000011E 746172742074686520 
  1294 00000127 636F6D70757465722E-     			db	"computer.",13,10,0
  1294 00000130 0D0A00             
  1295 00000133 435055206F6B0D0A00      czCPUOKMsg		db	"CPU ok",13,10,0
  1296 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1296 00000145 7265640D0A00       
  1297 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1297 00000154 616465640D0A00     
  1298 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1298 00000164 2E2E2E0D0A00       
  1299 0000016A 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1300 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1301                                  ;-----------------------------------------------------------------------------------------------------------------------
  1302                                  ;
  1303                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1304                                  ;
  1305                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1306                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1307                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1308                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1309                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1310                                  ;
  1311                                  ;-----------------------------------------------------------------------------------------------------------------------
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  ;
  1314                                  ;	Tables
  1315                                  ;
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                  ;-----------------------------------------------------------------------------------------------------------------------
  1318                                  ;
  1319                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1320                                  ;
  1321                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1322                                  ;	first descriptor must be all nulls.
  1323                                  ;
  1324                                  ;	6   5         4         3         2         1         0
  1325                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1326                                  ;	----------------------------------------------------------------
  1327                                  ;	h......hffffmmmma......ab......................bn..............n
  1328                                  ;	00000000			all areas have base addresses below 2^24
  1329                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1330                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1331                                  ;	            1001		present, ring-0, selector
  1332                                  ;
  1333                                  ;	h...h	hi-order base address (bits 24-31)
  1334                                  ;	ffff	flags
  1335                                  ;	mmmm	hi-order limit (bits 16-19)
  1336                                  ;	a...a	access
  1337                                  ;	b...b	lo-order base address (bits 0-23)
  1338                                  ;	n...n	lo-order limit (bits 0-15)
  1339                                  ;
  1340                                  ;-----------------------------------------------------------------------------------------------------------------------
  1341                                  section			gdt							;global descriptor table
  1342 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1343 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1344 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1345 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1346 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1347 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1348 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1349 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1350 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1351 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1352 00000050 7F00004700824000        			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1353 00000058 7F00804700894000        			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1354 00000060 7F00000F00824000        			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1355 00000068 7F00800F00894000        			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1356 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  ;
  1359                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1360                                  ;
  1361                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1362                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1363                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1364                                  ;
  1365                                  ;	6   5         4         3         2         1         0
  1366                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1367                                  ;	----------------------------------------------------------------
  1368                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1369                                  ;
  1370                                  ;	h...h	high-order offset (bits 16-31)
  1371                                  ;	P	present (0=unused interrupt)
  1372                                  ;	zz	descriptor privilege level
  1373                                  ;	S	storage segment (must be zero for IDT)
  1374                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1375                                  ;	S...S	handling code selector in GDT
  1376                                  ;	l...l	lo-order offset (bits 0-15)
  1377                                  ;
  1378                                  ;-----------------------------------------------------------------------------------------------------------------------
  1379                                  section			idt							;interrupt descriptor table
  1380                                  			mint	dividebyzero					;00 divide by zero
  1380                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1380 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1381                                  			mint	singlestep					;01 single step
  1381                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1381 00000008 04004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1382                                  			mint	nmi						;02 non-maskable
  1382                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1382 00000010 08004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1383                                  			mint	break						;03 break
  1383                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1383 00000018 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1384                                  			mint	into						;04 into
  1384                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1384 00000020 10004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1385                                  			mint	bounds						;05 bounds
  1385                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1385 00000028 14004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1386                                  			mint	badopcode					;06 bad op code
  1386                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1386 00000030 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1387                                  			mint	nocoproc					;07 no coprocessor
  1387                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1387 00000038 1C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1388                                  			mint	doublefault					;08 double-fault
  1388                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1388 00000040 20004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1389                                  			mint	operand						;09 operand
  1389                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1389 00000048 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1390                                  			mint	badtss						;0A bad TSS
  1390                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1390 00000050 28004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1391                                  			mint	notpresent					;0B not-present
  1391                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1391 00000058 2C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1392                                  			mint	stacklimit					;0C stack limit
  1392                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1392 00000060 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1393                                  			mint	protection					;0D general protection fault
  1393                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1393 00000068 34004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1394                                  			mint	int14						;0E (reserved)
  1394                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1394 00000070 38004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1395                                  			mint	int15						;0F (reserved)
  1395                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1395 00000078 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1396                                  			mint	coproccalc					;10 (reserved)
  1396                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1396 00000080 40004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1397                                  			mint	int17						;11 (reserved)
  1397                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1397 00000088 44004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1398                                  			mint	int18						;12 (reserved)
  1398                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1398 00000090 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1399                                  			mint	int19						;13 (reserved)
  1399                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1399 00000098 4C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1400                                  			mint	int20						;14 (reserved)
  1400                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1400 000000A0 50004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1401                                  			mint	int21						;15 (reserved)
  1401                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1401 000000A8 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1402                                  			mint	int22						;16 (reserved)
  1402                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1402 000000B0 58004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1403                                  			mint	int23						;17 (reserved)
  1403                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1403 000000B8 5C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1404                                  			mint	int24						;18 (reserved)
  1404                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1404 000000C0 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1405                                  			mint	int25						;19 (reserved)
  1405                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1405 000000C8 64004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1406                                  			mint	int26						;1A (reserved)
  1406                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1406 000000D0 68004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1407                                  			mint	int27						;1B (reserved)
  1407                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1407 000000D8 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1408                                  			mint	int28						;1C (reserved)
  1408                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1408 000000E0 70004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1409                                  			mint	int29						;1D (reserved)
  1409                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1409 000000E8 74004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1410                                  			mint	int30						;1E (reserved)
  1410                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1410 000000F0 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1411                                  			mint	int31						;1F (reserved)
  1411                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1411 000000F8 7C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1412                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1412                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1412 00000100 80004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1413                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1413                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1413 00000108 D0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1414                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1414                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1414 00000110 2B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1415                                  			mtrap	com2						;23 IRQ3 com2
  1415                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1415 00000118 2E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1416                                  			mtrap	com1						;24 IRQ4 com1
  1416                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1416 00000120 31044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1417                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1417                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1417 00000128 34044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1418                                  			mtrap	diskette					;26 IRQ6 diskette
  1418                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1418 00000130 37044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1419                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1419                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1419 00000138 4B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1420                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1420                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1420 00000140 4E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1421                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1421                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1421 00000148 51044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1422                                  			mtrap	irq10						;2A IRQA (reserved)
  1422                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1422 00000150 54044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1423                                  			mtrap	irq11						;2B IRQB (reserved)
  1423                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1423 00000158 57044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1424                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1424                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1424 00000160 5A044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1425                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1425                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1425 00000168 5D044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1426                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1426                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1426 00000170 60044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1427                                  			mtrap	irq15						;2F IRQF (reserved)
  1427                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1427 00000178 63044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1428                                  			mtrap	svc						;30 OS services
  1428                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1428 00000180 72044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1429 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1430                                  ;-----------------------------------------------------------------------------------------------------------------------
  1431                                  ;
  1432                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1433                                  ;
  1434                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1435                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1436                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1437                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1438                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1439                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1440                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1441                                  ;
  1442                                  ;-----------------------------------------------------------------------------------------------------------------------
  1443                                  section			kernel	vstart=0h					;data offsets relative to 0
  1444                                  			cpu	386						;allow 80386 instructions
  1445                                  			bits	32						;this is 32-bit code
  1446                                  ;-----------------------------------------------------------------------------------------------------------------------
  1447                                  ;
  1448                                  ;	CPU Interrupt Handlers
  1449                                  ;
  1450                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1451                                  ;
  1452                                  ;-----------------------------------------------------------------------------------------------------------------------
  1453                                  			menter	dividebyzero					;divide by zero
  1453                              <1> ?%1 equ ($-$$)
  1454 00000000 6A00                    			push	0						;
  1455 00000002 EB7A                    			jmp	intcpu						;
  1456                                  			menter	singlestep					;single step
  1456                              <1> ?%1 equ ($-$$)
  1457 00000004 6A01                    			push	1						;
  1458 00000006 EB76                    			jmp	intcpu						;
  1459                                  			menter	nmi						;non-maskable
  1459                              <1> ?%1 equ ($-$$)
  1460 00000008 6A02                    			push	2						;
  1461 0000000A EB72                    			jmp	intcpu						;
  1462                                  			menter	break						;break
  1462                              <1> ?%1 equ ($-$$)
  1463 0000000C 6A03                    			push	3						;
  1464 0000000E EB6E                    			jmp	intcpu						;
  1465                                  			menter	into						;into
  1465                              <1> ?%1 equ ($-$$)
  1466 00000010 6A04                    			push	4						;
  1467 00000012 EB6A                    			jmp	intcpu						;
  1468                                  			menter	bounds						;bounds
  1468                              <1> ?%1 equ ($-$$)
  1469 00000014 6A05                    			push	5						;
  1470 00000016 EB66                    			jmp	intcpu						;
  1471                                  			menter	badopcode					;bad opcode interrupt
  1471                              <1> ?%1 equ ($-$$)
  1472 00000018 6A06                    			push	6						;
  1473 0000001A EB62                    			jmp	intcpu						;
  1474                                  			menter	nocoproc					;no coprocessor interrupt
  1474                              <1> ?%1 equ ($-$$)
  1475 0000001C 6A07                    			push	7						;
  1476 0000001E EB5E                    			jmp	intcpu						;
  1477                                  			menter	doublefault					;doublefault interrupt
  1477                              <1> ?%1 equ ($-$$)
  1478 00000020 6A08                    			push	8						;
  1479 00000022 EB5A                    			jmp	intcpu						;
  1480                                  			menter	operand						;operand interrupt
  1480                              <1> ?%1 equ ($-$$)
  1481 00000024 6A09                    			push	9						;
  1482 00000026 EB56                    			jmp	intcpu						;
  1483                                  			menter	badtss						;bad tss interrupt
  1483                              <1> ?%1 equ ($-$$)
  1484 00000028 6A0A                    			push	10						;
  1485 0000002A EB52                    			jmp	intcpu						;
  1486                                  			menter	notpresent					;not present interrupt
  1486                              <1> ?%1 equ ($-$$)
  1487 0000002C 6A0B                    			push	11						;
  1488 0000002E EB4E                    			jmp	intcpu						;
  1489                                  			menter	stacklimit					;stack limit interrupt
  1489                              <1> ?%1 equ ($-$$)
  1490 00000030 6A0C                    			push	12						;
  1491 00000032 EB4A                    			jmp	intcpu						;
  1492                                  			menter	protection					;protection fault interrupt
  1492                              <1> ?%1 equ ($-$$)
  1493 00000034 6A0D                    			push	13						;
  1494 00000036 EB46                    			jmp	intcpu						;
  1495                                  			menter	int14						;(reserved)
  1495                              <1> ?%1 equ ($-$$)
  1496 00000038 6A0E                    			push	14						;
  1497 0000003A EB42                    			jmp	intcpu						;
  1498                                  			menter	int15						;(reserved)
  1498                              <1> ?%1 equ ($-$$)
  1499 0000003C 6A0F                    			push	15						;
  1500 0000003E EB3E                    			jmp	intcpu						;
  1501                                  			menter	coproccalc					;coprocessor calculation
  1501                              <1> ?%1 equ ($-$$)
  1502 00000040 6A10                    			push	16						;
  1503 00000042 EB3A                    			jmp	intcpu						;
  1504                                  			menter	int17						;(reserved)
  1504                              <1> ?%1 equ ($-$$)
  1505 00000044 6A11                    			push	17						;
  1506 00000046 EB36                    			jmp	intcpu						;
  1507                                  			menter	int18						;(reserved)
  1507                              <1> ?%1 equ ($-$$)
  1508 00000048 6A12                    			push	18						;
  1509 0000004A EB32                    			jmp	intcpu						;
  1510                                  			menter	int19						;(reserved)
  1510                              <1> ?%1 equ ($-$$)
  1511 0000004C 6A13                    			push	19						;
  1512 0000004E EB2E                    			jmp	intcpu						;
  1513                                  			menter	int20						;(reserved)
  1513                              <1> ?%1 equ ($-$$)
  1514 00000050 6A14                    			push	20						;
  1515 00000052 EB2A                    			jmp	intcpu						;
  1516                                  			menter	int21						;(reserved)
  1516                              <1> ?%1 equ ($-$$)
  1517 00000054 6A15                    			push	21						;
  1518 00000056 EB26                    			jmp	intcpu						;
  1519                                  			menter	int22						;(reserved)
  1519                              <1> ?%1 equ ($-$$)
  1520 00000058 6A16                    			push	22						;
  1521 0000005A EB22                    			jmp	intcpu						;
  1522                                  			menter	int23						;(reserved)
  1522                              <1> ?%1 equ ($-$$)
  1523 0000005C 6A17                    			push	23						;
  1524 0000005E EB1E                    			jmp	intcpu						;
  1525                                  			menter	int24						;(reserved)
  1525                              <1> ?%1 equ ($-$$)
  1526 00000060 6A18                    			push	24						;
  1527 00000062 EB1A                    			jmp	intcpu						;
  1528                                  			menter	int25						;(reserved)
  1528                              <1> ?%1 equ ($-$$)
  1529 00000064 6A19                    			push	25						;
  1530 00000066 EB16                    			jmp	intcpu						;
  1531                                  			menter	int26						;(reserved)
  1531                              <1> ?%1 equ ($-$$)
  1532 00000068 6A1A                    			push	26						;
  1533 0000006A EB12                    			jmp	intcpu						;
  1534                                  			menter	int27						;(reserved)
  1534                              <1> ?%1 equ ($-$$)
  1535 0000006C 6A1B                    			push	27						;
  1536 0000006E EB0E                    			jmp	intcpu						;
  1537                                  			menter	int28						;(reserved)
  1537                              <1> ?%1 equ ($-$$)
  1538 00000070 6A1C                    			push	28						;
  1539 00000072 EB0A                    			jmp	intcpu						;
  1540                                  			menter	int29						;(reserved)
  1540                              <1> ?%1 equ ($-$$)
  1541 00000074 6A1D                    			push	29						;
  1542 00000076 EB06                    			jmp	intcpu						;
  1543                                  			menter	int30						;(reserved)
  1543                              <1> ?%1 equ ($-$$)
  1544 00000078 6A1E                    			push	30						;
  1545 0000007A EB02                    			jmp	intcpu						;
  1546                                  			menter	int31						;(reserved)
  1546                              <1> ?%1 equ ($-$$)
  1547 0000007C 6A1F                    			push	31						;
  1548 0000007E 58                      intcpu			pop	eax						;
  1549 0000007F CF                      			iretd							;return
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                  ;
  1552                                  ;	Hardware Device Interupts
  1553                                  ;
  1554                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1555                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1556                                  ;	(BX=2028h).
  1557                                  ;
  1558                                  ;-----------------------------------------------------------------------------------------------------------------------
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;	IRQ0	Clock Tick Interrupt
  1562                                  ;
  1563                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1564                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1565                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1566                                  ;
  1567                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1568                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1569                                  ;
  1570                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1571                                  ;	zero, the floppy disk motors are turned off.
  1572                                  ;
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                  			menter	clocktick					;clock tick interrupt
  1574                              <1> ?%1 equ ($-$$)
  1575 00000080 50                      			push	eax						;save modified regs
  1576 00000081 52                      			push	edx						;
  1577 00000082 1E                      			push	ds						;
  1578 00000083 6A18                    			push	ESELDAT						;load OS data selector ...
  1579 00000085 1F                      			pop	ds						;... into data segment register
  1580 00000086 A16C040000              			mov	eax,[wfClockTicks]				;eax = clock ticks
  1581 0000008B 40                      			inc	eax						;increment clock ticks
  1582 0000008C 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1583 00000091 7208                    			jb	irq0.10						;no, skip ahead
  1584 00000093 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1585 00000099 31C0                    			xor	eax,eax						;reset clock ticks
  1586 0000009B A36C040000              irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1587 000000A0 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1588 000000A7 741E                    			je	irq0.20						;yes, skip ahead
  1589 000000A9 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1590 000000AF 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1591 000000B1 FB                      			sti							;enable maskable interrupts
  1592 000000B2 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1593 000000B4 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1594 000000B6 EC                      			in	al,dx						;FDC main status byte
  1595 000000B7 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1596 000000B9 75F7                    			jnz	irq0.15						;wait while busy
  1597 000000BB B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1598 000000BD A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1599 000000C2 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1600 000000C4 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1601 000000C6 EE                      			out	dx,al						;turn motor off
  1602 000000C7 E826070000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1603 000000CC 1F                      			pop	ds						;restore modified regs
  1604 000000CD 5A                      			pop	edx						;
  1605 000000CE 58                      			pop	eax						;
  1606 000000CF CF                      			iretd							;return
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                  ;
  1609                                  ;	IRQ1	Keyboard Interrupt
  1610                                  ;
  1611                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1612                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1613                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1614                                  ;	ALL modified registers upon return.
  1615                                  ;
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  			menter	keyboard					;keyboard interrrupt
  1617                              <1> ?%1 equ ($-$$)
  1618 000000D0 50                      			push	eax						;save non-volatile regs
  1619 000000D1 53                      			push	ebx						;
  1620 000000D2 51                      			push	ecx						;
  1621 000000D3 56                      			push	esi						;
  1622 000000D4 1E                      			push	ds						;
  1623 000000D5 6A18                    			push	ESELDAT						;load OS data selector ...
  1624 000000D7 1F                      			pop	ds						;... into data segment register
  1625 000000D8 30C0                    			xor	al,al						;zero
  1626 000000DA A205080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1627 000000DF A206080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1628 000000E4 A207080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1629 000000E9 A208080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1630 000000EE A209080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1631 000000F3 A20A080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1632 000000F8 B020                    			mov	al,' '						;space
  1633 000000FA A20B080000              			mov	[wbConsoleChar],al				;set character to space
  1634 000000FF B080                    			mov	al,EKEYTIMEOUT					;controller timeout flag
  1635 00000101 F6D0                    			not	al						;controller timeout mask
  1636 00000103 200504080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1637 00000109 8A1D02080000            			mov	bl,[wbConsoleShift]				;shift flags
  1638 0000010F 8A3D03080000            			mov	bh,[wbConsoleLock]				;lock flags
  1639 00000115 E813070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1640 0000011A 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  1641 00000120 E460                    			in	al,EKEYPORTDATA					;read scan code 0
  1642 00000122 A205080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1643 00000127 88C4                    			mov	ah,al						;copy scan code 0
  1644 00000129 B002                    			mov	al,EKEYSHIFTLEFT				;left shift flag
  1645 0000012B 80FC2A                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1646 0000012E 0F84E0000000            			je	irq1.30						;yes, set flag
  1647 00000134 80FCAA                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1648 00000137 0F84DB000000            			je	irq1.40						;yes, reset flag
  1649 0000013D B010                    			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1650 0000013F 80FC36                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1651 00000142 0F84CC000000            			je	irq1.30						;yes, set flag
  1652 00000148 80FCB6                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1653 0000014B 0F84C7000000            			je	irq1.40						;yes, reset flag
  1654 00000151 B001                    			mov	al,EKEYCTRLLEFT					;left control flag
  1655 00000153 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1656 00000156 0F84B8000000            			je	irq1.30						;yes, set flag
  1657 0000015C 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1658 0000015F 0F84B3000000            			je	irq1.40						;yes, reset flag
  1659 00000165 B004                    			mov	al,EKEYALTLEFT					;left alt flag
  1660 00000167 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1661 0000016A 0F84A4000000            			je	irq1.30						;yes, set flag
  1662 00000170 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1663 00000173 0F849F000000            			je	irq1.40						;yes, reset flag
  1664 00000179 B004                    			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1665 0000017B 80FC3A                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1666 0000017E 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1667 00000184 B002                    			mov	al,EKEYLOCKNUM					;num-lock flag
  1668 00000186 80FC45                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1669 00000189 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1670 0000018F B001                    			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1671 00000191 80FC46                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1672 00000194 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1673 0000019A 80FCE0                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1674 0000019D 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1675 000001A3 E885060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1676 000001A8 0F8465010000            			jz	irq1.140					;yes, skip ahead
  1677 000001AE E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1678 000001B0 A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1679 000001B5 88C4                    			mov	ah,al						;copy scan code 1
  1680 000001B7 B008                    			mov	al,EKEYCTRLRIGHT				;right control flag
  1681 000001B9 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1682 000001BC 7456                    			je	irq1.30						;yes, set flag
  1683 000001BE 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1684 000001C1 7455                    			je	irq1.40						;yes, reset flag
  1685 000001C3 B020                    			mov	al,EKEYALTRIGHT					;right alt flag
  1686 000001C5 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1687 000001C8 744A                    			je	irq1.30						;yes, set flag
  1688 000001CA 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1689 000001CD 7449                    			je	irq1.40						;yes, reset flag
  1690 000001CF 80FC35                  			cmp	ah,EKEYSLASH					;slash down code?
  1691 000001D2 0F84CB000000            			je	irq1.80						;yes, skip ahead
  1692 000001D8 80FCB5                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1693 000001DB 0F84C2000000            			je	irq1.80						;yes, skip ahead
  1694 000001E1 80FC2A                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1695 000001E4 7405                    			je	irq1.10						;yes, continue
  1696 000001E6 80FCB7                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1697 000001E9 7524                    			jne	irq1.20						;no, skip ahead
  1698 000001EB E83D060000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1699 000001F0 0F841D010000            			jz	irq1.140					;yes, skip ahead
  1700 000001F6 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1701 000001F8 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1702 000001FD E82B060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1703 00000202 0F840B010000            			jz	irq1.140					;yes, skip ahead
  1704 00000208 E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1705 0000020A A208080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1706 0000020F E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1707 00000214 08C3                    irq1.30			or	bl,al						;set shift flag
  1708 00000216 EB0D                    			jmp	irq1.60						;skip ahead
  1709 00000218 F6D0                    irq1.40			not	al						;convert flag to mask
  1710 0000021A 20C3                    			and	bl,al						;reset shift flag
  1711 0000021C EB07                    			jmp	irq1.60						;skip ahead
  1712 0000021E 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1713 00000220 E8D9050000              			call	SetKeyboardLamps				;update keyboard lamps
  1714 00000225 881D02080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1715 0000022B 883D03080000            			mov	[wbConsoleLock],bh				;save lock flags
  1716 00000231 E89E030000              			call	PutConsoleOIAShift				;update OIA indicators
  1717 00000236 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  1718 0000023B 80FCE1                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1719 0000023E 7563                    			jne	irq1.80						;no continue
  1720 00000240 E8E8050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1721 00000245 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  1722 0000024B E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1723 0000024D A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1724 00000252 88C4                    			mov	ah,al						;copy scan code 1
  1725 00000254 80FC1D                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1726 00000257 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  1727 0000025D E8CB050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1728 00000262 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  1729 00000268 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1730 0000026A A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1731 0000026F E8B9050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1732 00000274 0F8499000000            			jz	irq1.140					;yes, skip ahead
  1733 0000027A E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1734 0000027C A208080000              			mov	[wbConsoleScan3],al				;save scan code 3
  1735 00000281 E8A7050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1736 00000286 0F8487000000            			jz	irq1.140					;yes, skip ahead
  1737 0000028C E460                    			in	al,EKEYPORTDATA					;read scan code 4
  1738 0000028E A209080000              			mov	[wbConsoleScan4],al				;save scan code 4
  1739 00000293 E895050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1740 00000298 7479                    			jz	irq1.140					;yes, skip ahead
  1741 0000029A E460                    			in	al,EKEYPORTDATA					;read scan code 5
  1742 0000029C A20A080000              			mov	[wbConsoleScan5],al				;save scan code 5
  1743 000002A1 EB78                    			jmp	irq1.150					;continue
  1744 000002A3 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  1745 000002A5 F6C480                  			test	ah,EKEYUP					;release code?
  1746 000002A8 7531                    			jnz	irq1.110					;yes, skip ahead
  1747 000002AA BE[2B030000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  1748 000002AF F6C312                  			test	bl,EKEYSHIFT					;either shift key down?
  1749 000002B2 7405                    			jz	irq1.90						;no, skip ahead
  1750 000002B4 BE[AB030000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  1751 000002B9 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  1752 000002BC 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  1753 000002C0 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1754 000002C3 7411                    			jz	irq1.100					;no skip ahead
  1755 000002C5 88C1                    			mov	cl,al						;copy ASCII code
  1756 000002C7 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1757 000002CA 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1758 000002CD 7207                    			jb	irq1.100					;yes, skip ahead
  1759 000002CF 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1760 000002D2 7702                    			ja	irq1.100					;yes, skip ahead
  1761 000002D4 3420                    			xor	al,EASCIICASE					;switch case
  1762 000002D6 A20B080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1763 000002DB BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1764 000002E0 F6C480                  			test	ah,EKEYUP					;release scan-code?
  1765 000002E3 7405                    			jz	irq1.120					;no, skip ahead
  1766 000002E5 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  1767 000002EA 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  1768 000002EF 09C2                    			or	edx,eax						;msg id and codes
  1769 000002F1 31C9                    			xor	ecx,ecx						;null param
  1770 000002F3 50                      			push	eax						;save codes
  1771 000002F4 E8F7030000              			call	PutMessage					;put message to console
  1772 000002F9 58                      			pop	eax						;restore codes
  1773 000002FA 84C0                    			test	al,al						;ASCII translation?
  1774 000002FC 7413                    			jz	irq1.130					;no, skip ahead
  1775 000002FE BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  1776 00000303 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  1777 00000308 09C2                    			or	edx,eax						;msg id and codes
  1778 0000030A 31C9                    			xor	ecx,ecx						;null param
  1779 0000030C E8DF030000              			call	PutMessage					;put message to console
  1780 00000311 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  1781 00000313 B080                    irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1782 00000315 080504080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  1783 0000031B E84E030000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  1784 00000320 E8CD040000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1785 00000325 1F                      			pop	ds						;restore non-volatile regs
  1786 00000326 5E                      			pop	esi						;
  1787 00000327 59                      			pop	ecx						;
  1788 00000328 5B                      			pop	ebx						;
  1789 00000329 58                      			pop	eax						;
  1790 0000032A CF                      			iretd							;return
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;	Scan-Code to ASCII Translation Tables
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794 0000032B 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1795 00000333 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1796 0000033B 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1797 00000343 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1798 0000034B 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1799 00000353 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1800 0000035B 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1801 00000363 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1802 0000036B 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1803 00000373 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1804 0000037B 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1805 00000383 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1806 0000038B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1807 00000393 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1808 0000039B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1809 000003A3 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1810 000003AB 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1811 000003B3 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1812 000003BB 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1813 000003C3 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1814 000003CB 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1815 000003D3 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1816 000003DB 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1817 000003E3 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1818 000003EB 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1819 000003F3 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1820 000003FB 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1821 00000403 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1822 0000040B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1823 00000413 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1824 0000041B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1825 00000423 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  			menter	iochannel					;secondary 8259A cascade
  1831                              <1> ?%1 equ ($-$$)
  1832 0000042B 50                      			push	eax						;
  1833 0000042C EB3D                    			jmp	hwint						;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                  			menter	com2						;serial port 2 interrupt
  1839                              <1> ?%1 equ ($-$$)
  1840 0000042E 50                      			push	eax						;
  1841 0000042F EB3A                    			jmp	hwint						;
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                  ;
  1844                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1845                                  ;
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  			menter	com1						;serial port 1 interrupt
  1847                              <1> ?%1 equ ($-$$)
  1848 00000431 50                      			push	eax						;
  1849 00000432 EB37                    			jmp	hwint						;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  			menter	lpt2						;parallel port 2 interrupt
  1855                              <1> ?%1 equ ($-$$)
  1856 00000434 50                      			push	eax						;
  1857 00000435 EB34                    			jmp	hwint						;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;	IRQ6	Diskette Hardware Interrupt
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  			menter	diskette					;floppy disk interrupt
  1863                              <1> ?%1 equ ($-$$)
  1864 00000437 50                      			push	eax						;save non-volatile regs
  1865 00000438 1E                      			push	ds						;
  1866 00000439 6A18                    			push	ESELDAT						;load OS data selector ...
  1867 0000043B 1F                      			pop	ds						;... into DS register
  1868 0000043C A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1869 00000441 0C80                    			or	al,10000000b					;set IRQ flag
  1870 00000443 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  1871 00000448 1F                      			pop	ds						;restore non-volatile regs
  1872 00000449 EB20                    			jmp	hwint						;end primary PIC interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  			menter	lpt1						;parallel port 1 interrupt
  1878                              <1> ?%1 equ ($-$$)
  1879 0000044B 50                      			push	eax						;
  1880 0000044C EB1D                    			jmp	hwint						;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                  			menter	rtclock						;real-time clock interrupt
  1886                              <1> ?%1 equ ($-$$)
  1887 0000044E 50                      			push	eax						;
  1888 0000044F EB13                    			jmp	hwwint						;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  			menter	retrace						;CGA vertical retrace interrupt
  1894                              <1> ?%1 equ ($-$$)
  1895 00000451 50                      			push	eax						;
  1896 00000452 EB10                    			jmp	hwwint						;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  ;
  1899                                  ;	IRQ10	Reserved Hardware Interrupt
  1900                                  ;
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                  			menter	irq10						;reserved
  1902                              <1> ?%1 equ ($-$$)
  1903 00000454 50                      			push	eax						;
  1904 00000455 EB0D                    			jmp	hwwint						;
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;	IRQ11	Reserved Hardware Interrupt
  1908                                  ;
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  			menter	irq11						;reserved
  1910                              <1> ?%1 equ ($-$$)
  1911 00000457 50                      			push	eax						;
  1912 00000458 EB0A                    			jmp	hwwint						;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1918                              <1> ?%1 equ ($-$$)
  1919 0000045A 50                      			push	eax						;
  1920 0000045B EB07                    			jmp	hwwint						;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1924                                  ;
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                  			menter	coprocessor					;coprocessor interrupt
  1926                              <1> ?%1 equ ($-$$)
  1927 0000045D 50                      			push	eax						;
  1928 0000045E EB04                    			jmp	hwwint						;
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                  			menter	fixeddisk					;fixed disk interrupt
  1934                              <1> ?%1 equ ($-$$)
  1935 00000460 50                      			push	eax						;
  1936 00000461 EB01                    			jmp	hwwint						;
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;	IRQ15	Reserved Hardware Interrupt
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                  			menter	irq15						;reserved
  1942                              <1> ?%1 equ ($-$$)
  1943 00000463 50                      			push	eax						;save modified regs
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;	Exit from hardware interrupt
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949 00000464 E88F030000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1950 00000469 EB05                    			jmp	hwint90						;skip ahead
  1951 0000046B E882030000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1952 00000470 58                      hwint90			pop	eax						;restore modified regs
  1953 00000471 CF                      			iretd							;return from interrupt
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;	INT 30h Operating System Software Service Interrupt
  1957                                  ;
  1958                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1959                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1960                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1961                                  ;	the entry address of the specific function from a table.
  1962                                  ;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  			menter	svc
  1964                              <1> ?%1 equ ($-$$)
  1965 00000472 3C04                    			cmp	al,maxtsvc					;is our function out of range?
  1966 00000474 730D                    			jae	svc90						;yes, skip ahead
  1967 00000476 0FB6C0                  			movzx	eax,al						;function
  1968 00000479 C1E002                  			shl	eax,2						;offset into table
  1969 0000047C 2EFF90[84040000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  1970 00000483 CF                      svc90			iretd							;return from interrupt
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;	Service Request Table
  1974                                  ;
  1975                                  ;
  1976                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1979                              <1> tsvc :
  1979                              <1> e%1 equ ($-tsvc)/4
  1979 00000484 [94040000]          <1>  dd %1
  1980                                  			tsvce	GetConsoleString				;get string input
  1980                              <1> e%1 equ ($-tsvc)/4
  1980 00000488 [C1040000]          <1>  dd %1
  1981                                  			tsvce	ClearConsoleScreen				;clear console screen
  1981                              <1> e%1 equ ($-tsvc)/4
  1981 0000048C [4D070000]          <1>  dd %1
  1982                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1982                              <1> e%1 equ ($-tsvc)/4
  1982 00000490 [C8070000]          <1>  dd %1
  1983                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                  ;
  1986                                  ;	Service Request Macros
  1987                                  ;
  1988                                  ;	These macros provide positional parameterization of service request calls.
  1989                                  ;
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  %macro			putConsoleString 1
  1992                                  			mov	edx,%1						;EDX = string address
  1993                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1994                                  			int	_svc						;invoke OS service
  1995                                  %endmacro
  1996                                  %macro			getConsoleString 4
  1997                                  			mov	edx,%1						;EDX = buffer address
  1998                                  			mov	ecx,%2						;ECX = max characters
  1999                                  			mov	bh,%3						;BH = echo indicator
  2000                                  			mov	bl,%4						;BL = terminator
  2001                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2002                                  			int	_svc						;invoke OS service
  2003                                  %endmacro
  2004                                  %macro			clearConsoleScreen 0
  2005                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2006                                  			int	_svc						;invoke OS service
  2007                                  %endmacro
  2008                                  %macro			placeCursor 0
  2009                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2010                                  			int	_svc						;invoke OS service
  2011                                  %endmacro
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                  ;
  2014                                  ;	Kernel Function Library
  2015                                  ;
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;-----------------------------------------------------------------------------------------------------------------------
  2018                                  ;
  2019                                  ;	Console Helper Routines
  2020                                  ;
  2021                                  ;	PutConsoleString
  2022                                  ;	GetConsoleString
  2023                                  ;	GetConsoleChar
  2024                                  ;	Yield
  2025                                  ;	PreviousConsoleColumn
  2026                                  ;	NextConsoleColumn
  2027                                  ;	FirstConsoleColumn
  2028                                  ;	NextConsoleRow
  2029                                  ;	PutConsoleChar
  2030                                  ;	PutConsoleOIAShift
  2031                                  ;	PutConsoleOIAChar
  2032                                  ;	PutConsoleHexByte
  2033                                  ;
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;	Routine:	PutConsoleString
  2038                                  ;
  2039                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2040                                  ;			console position as needed.
  2041                                  ;
  2042                                  ;	In:		EDX	source address
  2043                                  ;			DS	OS data selector
  2044                                  ;
  2045                                  ;-----------------------------------------------------------------------------------------------------------------------
  2046 00000494 56                      PutConsoleString	push	esi						;save non-volatile regs
  2047 00000495 89D6                    			mov	esi,edx						;source address
  2048 00000497 FC                      			cld							;forward strings
  2049 00000498 AC                      .10			lodsb							;ASCII character
  2050 00000499 08C0                    			or	al,al						;end of string?
  2051 0000049B 7422                    			jz	.40						;yes, skip ahead
  2052 0000049D 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  2053 0000049F 7507                    			jne	.20						;no, skip ahead
  2054 000004A1 E8EB000000              			call	FirstConsoleColumn				;move to start of row
  2055 000004A6 EBF0                    			jmp	.10						;next character
  2056 000004A8 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2057 000004AA 7507                    			jne	.30						;no, skip ahead
  2058 000004AC E8E8000000              			call	NextConsoleRow					;move to next row
  2059 000004B1 EBE5                    			jmp	.10						;next character
  2060 000004B3 E803010000              .30			call	PutConsoleChar					;output character to console
  2061 000004B8 E8B9000000              			call	NextConsoleColumn				;advance to next column
  2062 000004BD EBD9                    			jmp	.10						;next character
  2063 000004BF 5E                      .40			pop	esi						;restore non-volatile regs
  2064 000004C0 C3                      			ret							;return
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066                                  ;
  2067                                  ;	Routine:	GetConsoleString
  2068                                  ;
  2069                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2070                                  ;
  2071                                  ;	Input:		DS:EDX	target buffer address
  2072                                  ;			ECX	maximum number of characters to accept
  2073                                  ;			BH	echo to terminal
  2074                                  ;			BL	terminating character
  2075                                  ;
  2076                                  ;-----------------------------------------------------------------------------------------------------------------------
  2077 000004C1 51                      GetConsoleString	push	ecx						;save non-volatile regs
  2078 000004C2 56                      			push	esi						;
  2079 000004C3 57                      			push	edi						;
  2080 000004C4 06                      			push	es						;
  2081 000004C5 1E                      			push	ds						;load data segment selector ...
  2082 000004C6 07                      			pop	es						;... into extra segment register
  2083 000004C7 89D7                    			mov	edi,edx						;edi = target buffer
  2084 000004C9 51                      			push	ecx						;save maximum characters
  2085 000004CA 30C0                    			xor	al,al						;zero register
  2086 000004CC FC                      			cld							;forward strings
  2087 000004CD F3AA                    			rep	stosb						;zero fill buffer
  2088 000004CF 59                      			pop	ecx						;maximum characters
  2089 000004D0 89D7                    			mov	edi,edx						;edi = target buffer
  2090 000004D2 89D6                    			mov	esi,edx						;esi = target buffer
  2091 000004D4 E34E                    .10			jecxz	.50						;exit if max-length is zero
  2092 000004D6 E856000000              .20			call	GetConsoleChar					;al = next input char
  2093 000004DB 38D8                    			cmp	al,bl						;is this the terminator?
  2094 000004DD 7445                    			je	.50						;yes, exit
  2095 000004DF 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2096 000004E1 7521                    			jne	.30						;no, skip ahead
  2097 000004E3 39FE                    			cmp	esi,edi						;at start of buffer?
  2098 000004E5 74EF                    			je	.20						;yes, get next character
  2099 000004E7 4F                      			dec	edi						;backup target pointer
  2100 000004E8 C60700                  			mov	byte [edi],0					;zero previous character
  2101 000004EB 41                      			inc	ecx						;increment remaining chars
  2102 000004EC F6C701                  			test	bh,1						;echo to console?
  2103 000004EF 74E5                    			jz	.20						;no, get next character
  2104 000004F1 E85B000000              			call	PreviousConsoleColumn				;backup console position
  2105 000004F6 B020                    			mov	al,EASCIISPACE					;ASCII space
  2106 000004F8 E8BE000000              			call	PutConsoleChar					;write space to console
  2107 000004FD E8C6020000              			call	PlaceCursor					;position the cursor
  2108 00000502 EBD2                    			jmp	.20						;get next character
  2109 00000504 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2110 00000506 72CE                    			jb	.20						;no, get another character
  2111 00000508 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2112 0000050A 77CA                    			ja	.20						;no, get another character
  2113 0000050C AA                      			stosb							;store character in buffer
  2114 0000050D F6C701                  			test	bh,1						;echo to console?
  2115 00000510 740F                    			jz	.40						;no, skip ahead
  2116 00000512 E8A4000000              			call	PutConsoleChar					;write character to console
  2117 00000517 E85A000000              			call	NextConsoleColumn				;advance console position
  2118 0000051C E8A7020000              			call	PlaceCursor					;position the cursor
  2119 00000521 49                      .40			dec	ecx						;decrement remaining chars
  2120 00000522 EBB0                    			jmp	.10						;next
  2121 00000524 30C0                    .50			xor	al,al						;null
  2122 00000526 AA                      			stosb							;terminate buffer
  2123 00000527 07                      			pop	es						;restore non-volatile regs
  2124 00000528 5F                      			pop	edi						;
  2125 00000529 5E                      			pop	esi						;
  2126 0000052A 59                      			pop	ecx						;
  2127 0000052B C3                      			ret							;return
  2128                                  ;-----------------------------------------------------------------------------------------------------------------------
  2129                                  ;
  2130                                  ;	Routine:	GetConsoleChar
  2131                                  ;
  2132                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2133                                  ;
  2134                                  ;	Output:		AL	ASCII character code
  2135                                  ;			AH	keyboard scan code
  2136                                  ;
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138 0000052C E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  2139 00000531 E8E2010000              GetConsoleChar		call	GetMessage					;get the next message
  2140 00000536 09C0                    			or	eax,eax						;do we have a message?
  2141 00000538 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  2142 0000053A 50                      			push	eax						;save key codes
  2143 0000053B 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  2144 00000540 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  2145 00000545 58                      			pop	eax						;restore key codes
  2146 00000546 75E9                    			jne	GetConsoleChar					;no, try again
  2147 00000548 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  2148 0000054D C3                      			ret							;return
  2149                                  ;-----------------------------------------------------------------------------------------------------------------------
  2150                                  ;
  2151                                  ;	Routine:	Yield
  2152                                  ;
  2153                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2154                                  ;
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156 0000054E FB                      Yield			sti							;enable maskagle interrupts
  2157 0000054F F4                      			hlt							;halt until external interrupt
  2158 00000550 C3                      			ret							;return
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  ;
  2161                                  ;	Routine:	PreviousConsoleColumn
  2162                                  ;
  2163                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2164                                  ;			the column is set to the last position in the row and the row is decremented.
  2165                                  ;
  2166                                  ;	Input:		DS	OS data selector
  2167                                  ;
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169 00000551 A000080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2170 00000556 08C0                    			or	al,al						;start of row?
  2171 00000558 7514                    			jnz	.10						;no, skip ahead
  2172 0000055A 8A2501080000            			mov	ah,[wbConsoleRow]				;current row
  2173 00000560 08E4                    			or	ah,ah						;top of screen?
  2174 00000562 7411                    			jz	.20						;yes, exit with no change
  2175 00000564 FECC                    			dec	ah						;decrement row
  2176 00000566 882501080000            			mov	[wbConsoleRow],ah				;save row
  2177 0000056C B050                    			mov	al,ECONCOLS					;set maximum column
  2178 0000056E FEC8                    .10			dec	al						;decrement column
  2179 00000570 A200080000              			mov	[wbConsoleColumn],al				;save column
  2180 00000575 C3                      .20			ret							;return
  2181                                  ;-----------------------------------------------------------------------------------------------------------------------
  2182                                  ;
  2183                                  ;	Routine:	NextConsoleColumn
  2184                                  ;
  2185                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2186                                  ;			incremented if the end of the current row is reached.
  2187                                  ;
  2188                                  ;	In:		DS	OS data selector
  2189                                  ;
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191 00000576 A000080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2192 0000057B FEC0                    			inc	al						;increment column
  2193 0000057D A200080000              			mov	[wbConsoleColumn],al				;save column
  2194 00000582 3C50                    			cmp	al,ECONCOLS					;end of row?
  2195 00000584 720A                    			jb	.10						;no, skip ahead
  2196 00000586 E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2197 0000058B E809000000              			call	NextConsoleRow					;line feed to next row
  2198 00000590 C3                      .10			ret							;return
  2199                                  ;-----------------------------------------------------------------------------------------------------------------------
  2200                                  ;
  2201                                  ;	Routine:	FirstConsoleColumn
  2202                                  ;
  2203                                  ;	Description:	This routine resets the console column to start of the row.
  2204                                  ;
  2205                                  ;	In:		DS	OS data selector
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208 00000591 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2209 00000593 A200080000              			mov	[wbConsoleColumn],al				;save column
  2210 00000598 C3                      			ret							;return
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                  ;
  2213                                  ;	Routine:	NextConsoleRow
  2214                                  ;
  2215                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2216                                  ;
  2217                                  ;	In:		DS	OS data selector
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220 00000599 A001080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2221 0000059E FEC0                    			inc	al						;increment row
  2222 000005A0 A201080000              			mov	[wbConsoleRow],al				;save row
  2223 000005A5 3C18                    			cmp	al,ECONROWS					;end of screen?
  2224 000005A7 7211                    			jb	.10						;no, skip ahead
  2225 000005A9 E8DA010000              			call	ScrollConsoleRow				;scroll up one row
  2226 000005AE A001080000              			mov	al,[wbConsoleRow]				;row
  2227 000005B3 FEC8                    			dec	al						;decrement row
  2228 000005B5 A201080000              			mov	[wbConsoleRow],al				;save row
  2229 000005BA C3                      .10			ret							;return
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;
  2232                                  ;	Routine:	PutConsoleChar
  2233                                  ;
  2234                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2235                                  ;
  2236                                  ;	In:		AL	ASCII character
  2237                                  ;			DS	OS data selector
  2238                                  ;
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240 000005BB 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  2241 000005BC 06                      			push	es						;
  2242 000005BD 6A20                    			push	ESELCGA						;load CGA selector ...
  2243 000005BF 07                      			pop	es						;... into extra segment reg
  2244 000005C0 8A0D00080000            			mov	cl,[wbConsoleColumn]				;column
  2245 000005C6 8A2D01080000            			mov	ch,[wbConsoleRow]				;row
  2246 000005CC E8E3010000              			call	SetConsoleChar					;put character at row, column
  2247 000005D1 07                      			pop	es						;restore non-volatile regs
  2248 000005D2 59                      			pop	ecx						;
  2249 000005D3 C3                      			ret							;return
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                  ;
  2252                                  ;	Routine:	PutConsoleOIAShift
  2253                                  ;
  2254                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2255                                  ;
  2256                                  ;	In:		BL	shift flags
  2257                                  ;			BH	lock flags
  2258                                  ;			DS	OS data selector
  2259                                  ;
  2260                                  ;-----------------------------------------------------------------------------------------------------------------------
  2261 000005D4 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2262 000005D5 06                      			push	es						;
  2263 000005D6 6A20                    			push	ESELCGA						;load CGA selector ...
  2264 000005D8 07                      			pop	es						;... into ES register
  2265 000005D9 B518                    			mov	ch,ECONOIAROW					;OIA row
  2266 000005DB B020                    			mov	al,EASCIISPACE					;space is default character
  2267 000005DD F6C302                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2268 000005E0 7402                    			jz	.10						;no, skip ahead
  2269 000005E2 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2270 000005E4 B10E                    .10			mov	cl,14						;indicator column
  2271 000005E6 E8C9010000              			call	SetConsoleChar					;display ASCII character
  2272 000005EB B020                    			mov	al,EASCIISPACE					;ASCII space
  2273 000005ED F6C310                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2274 000005F0 7402                    			jz	.20						;no, skip ahead
  2275 000005F2 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2276 000005F4 B140                    .20			mov	cl,64						;indicator column
  2277 000005F6 E8B9010000              			call	SetConsoleChar					;display ASCII character
  2278 000005FB B020                    			mov	al,EASCIISPACE					;ASCII space
  2279 000005FD F6C301                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2280 00000600 7402                    			jz	.30						;no, skip ahead
  2281 00000602 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2282 00000604 B10F                    .30			mov	cl,15						;indicator column
  2283 00000606 E8A9010000              			call	SetConsoleChar					;display ASCII character
  2284 0000060B B020                    			mov	al,EASCIISPACE					;ASCII space
  2285 0000060D F6C308                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2286 00000610 7402                    			jz	.40						;no, skip ahead
  2287 00000612 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2288 00000614 B13F                    .40			mov	cl,63						;indicator column
  2289 00000616 E899010000              			call	SetConsoleChar					;display ASCII character
  2290 0000061B B020                    			mov	al,EASCIISPACE					;ASCII space
  2291 0000061D F6C304                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2292 00000620 7402                    			jz	.50						;no, skip ahead
  2293 00000622 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2294 00000624 B110                    .50			mov	cl,16						;indicator column
  2295 00000626 E889010000              			call	SetConsoleChar					;display ASCII character
  2296 0000062B B020                    			mov	al,EASCIISPACE					;ASCII space
  2297 0000062D F6C320                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2298 00000630 7402                    			jz	.60						;no, skip ahead
  2299 00000632 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2300 00000634 B13E                    .60			mov	cl,62						;indicator column
  2301 00000636 E879010000              			call	SetConsoleChar					;display ASCII character
  2302 0000063B B020                    			mov	al,EASCIISPACE					;ASCII space
  2303 0000063D F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2304 00000640 7402                    			jz	.70						;no, skip ahead
  2305 00000642 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2306 00000644 B14E                    .70			mov	cl,78						;indicator column
  2307 00000646 E869010000              			call	SetConsoleChar					;display ASCII character
  2308 0000064B B020                    			mov	al,EASCIISPACE					;ASCII space
  2309 0000064D F6C702                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2310 00000650 7402                    			jz	.80						;no, skip ahead
  2311 00000652 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2312 00000654 B14D                    .80			mov	cl,77						;indicator column
  2313 00000656 E859010000              			call	SetConsoleChar					;display ASCII character
  2314 0000065B B020                    			mov	al,EASCIISPACE					;ASCII space
  2315 0000065D F6C701                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2316 00000660 7402                    			jz	.90						;no, skip ahead
  2317 00000662 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2318 00000664 B14C                    .90			mov	cl,76						;indicator column
  2319 00000666 E849010000              			call	SetConsoleChar					;display ASCII character
  2320 0000066B 07                      			pop	es						;restore non-volatile regs
  2321 0000066C 59                      			pop	ecx						;
  2322 0000066D C3                      			ret							;return
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  ;
  2325                                  ;	Routine:	PutConsoleOIAChar
  2326                                  ;
  2327                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2328                                  ;
  2329                                  ;	In:		DS	OS data selector
  2330                                  ;
  2331                                  ;-----------------------------------------------------------------------------------------------------------------------
  2332 0000066E 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2333 0000066F 51                      			push	ecx						;
  2334 00000670 56                      			push	esi						;
  2335 00000671 1E                      			push	ds						;
  2336 00000672 06                      			push	es						;
  2337 00000673 6A18                    			push	ESELDAT						;load OS data selector ...
  2338 00000675 1F                      			pop	ds						;... into data segment register
  2339 00000676 6A20                    			push	ESELCGA						;load CGA selector ...
  2340 00000678 07                      			pop	es						;... into extra segment register
  2341 00000679 BE05080000              			mov	esi,wbConsoleScan0				;scan codes address
  2342 0000067E B718                    			mov	bh,ECONOIAROW					;OIA row
  2343 00000680 B300                    			mov	bl,0						;starting column
  2344 00000682 B906000000              			mov	ecx,6						;maximum scan codes
  2345 00000687 51                      .10			push	ecx						;save remaining count
  2346 00000688 89D9                    			mov	ecx,ebx						;row, column
  2347 0000068A AC                      			lodsb							;read scan code
  2348 0000068B 08C0                    			or	al,al						;scan code present?
  2349 0000068D 7407                    			jz	.20						;no, skip ahead
  2350 0000068F E834000000              			call	PutConsoleHexByte				;display scan code
  2351 00000694 EB10                    			jmp	.30						;continue
  2352 00000696 B020                    .20			mov	al,' '						;ASCII space
  2353 00000698 E817010000              			call	SetConsoleChar					;display space
  2354 0000069D FEC1                    			inc	cl
  2355 0000069F B020                    			mov	al,' '						;ASCII space
  2356 000006A1 E80E010000              			call	SetConsoleChar					;display space
  2357 000006A6 80C302                  .30			add	bl,2						;next column (+2)
  2358 000006A9 59                      			pop	ecx						;restore remaining
  2359 000006AA E2DB                    			loop	.10						;next code
  2360 000006AC A00B080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2361 000006B1 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2362 000006B3 720D                    			jb	.40						;no, skip ahead
  2363 000006B5 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2364 000006B7 7709                    			ja	.40						;no, skip ahead
  2365 000006B9 88FD                    			mov	ch,bh						;OIA row
  2366 000006BB B128                    			mov	cl,40						;character display column
  2367 000006BD E8F2000000              			call	SetConsoleChar					;display ASCII character
  2368 000006C2 07                      .40			pop	es						;restore non-volatile regs
  2369 000006C3 1F                      			pop	ds						;
  2370 000006C4 5E                      			pop	esi						;
  2371 000006C5 59                      			pop	ecx						;
  2372 000006C6 5B                      			pop	ebx						;
  2373 000006C7 C3                      			ret							;return
  2374                                  ;-----------------------------------------------------------------------------------------------------------------------
  2375                                  ;
  2376                                  ;	Routine:	PutConsoleHexByte
  2377                                  ;
  2378                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2379                                  ;
  2380                                  ;	In:		AL	byte value
  2381                                  ;			CH	row
  2382                                  ;			CL	column
  2383                                  ;			DS	OS data selector
  2384                                  ;			ES	CGA selector
  2385                                  ;
  2386                                  ;-----------------------------------------------------------------------------------------------------------------------
  2387 000006C8 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  2388 000006C9 88C3                    			mov	bl,al						;save byte value
  2389 000006CB C0E804                  			shr	al,4						;hi-order nybble
  2390 000006CE 0C30                    			or	al,030h						;apply ASCII zone
  2391 000006D0 3C3A                    			cmp	al,03ah						;numeric?
  2392 000006D2 7202                    			jb	.10						;yes, skip ahead
  2393 000006D4 0407                    			add	al,7						;add ASCII offset for alpha
  2394 000006D6 E8D9000000              .10			call	SetConsoleChar					;display ASCII character
  2395 000006DB FEC1                    			inc	cl						;increment column
  2396 000006DD 88D8                    			mov	al,bl						;byte value
  2397 000006DF 240F                    			and	al,0fh						;lo-order nybble
  2398 000006E1 0C30                    			or	al,30h						;apply ASCII zone
  2399 000006E3 3C3A                    			cmp	al,03ah						;numeric?
  2400 000006E5 7202                    			jb	.20						;yes, skip ahead
  2401 000006E7 0407                    			add	al,7						;add ASCII offset for alpha
  2402 000006E9 E8C6000000              .20			call	SetConsoleChar					;display ASCII character
  2403 000006EE 5B                      			pop	ebx						;restore non-volatile regs
  2404 000006EF C3                      			ret							;return
  2405                                  ;-----------------------------------------------------------------------------------------------------------------------
  2406                                  ;
  2407                                  ;	Message Queue Helper Routines
  2408                                  ;
  2409                                  ;	PutMessage
  2410                                  ;	GetMessage
  2411                                  ;
  2412                                  ;-----------------------------------------------------------------------------------------------------------------------
  2413                                  ;-----------------------------------------------------------------------------------------------------------------------
  2414                                  ;
  2415                                  ;	Routine:	PutMessage
  2416                                  ;
  2417                                  ;	Description:	This routine adda a message to the message queue.
  2418                                  ;
  2419                                  ;	Input:		ECX	hi-order data word
  2420                                  ;			EDX	lo-order data word
  2421                                  ;
  2422                                  ;	Output:		CY	0 = success
  2423                                  ;				1 = fail: queue is full
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426 000006F0 1E                      PutMessage		push	ds						;save non-volatile regs
  2427 000006F1 6A2C                    			push	ESELMQ						;load task message queue selector ...
  2428 000006F3 1F                      			pop	ds						;... into data segment register
  2429 000006F4 A104000000              			mov	eax,[MQTail]					;tail ptr
  2430 000006F9 833800                  			cmp	dword [eax],0					;is queue full?
  2431 000006FC F9                      			stc							;assume failure
  2432 000006FD 7517                    			jne	.20						;yes, cannot store
  2433 000006FF 8910                    			mov	[eax],edx					;store lo-order data
  2434 00000701 894804                  			mov	[eax+4],ecx					;store hi-order data
  2435 00000704 83C008                  			add	eax,8						;next queue element adr
  2436 00000707 25FC030000              			and	eax,03fch					;at end of queue?
  2437 0000070C 7502                    			jnz	.10						;no, skip ahead
  2438 0000070E B008                    			mov	al,8						;reset to top of queue
  2439 00000710 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  2440 00000715 F8                      			clc							;indicate success
  2441 00000716 1F                      .20			pop	ds						;restore non-volatile regs
  2442 00000717 C3                      			ret							;return
  2443                                  ;-----------------------------------------------------------------------------------------------------------------------
  2444                                  ;
  2445                                  ;	Routine:	GetMessage
  2446                                  ;
  2447                                  ;	Description:	This routine reads and removes a message from the message queue.
  2448                                  ;
  2449                                  ;	Output:		EAX	lo-order message data
  2450                                  ;			EDX	hi-order message data
  2451                                  ;
  2452                                  ;			CY	0 = message read
  2453                                  ;				1 = no message to read
  2454                                  ;
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456 00000718 53                      GetMessage		push	ebx						;save non-volatile regs
  2457 00000719 51                      			push	ecx						;
  2458 0000071A 1E                      			push	ds						;
  2459 0000071B 6A2C                    			push	ESELMQ						;load message queue selector ...
  2460 0000071D 1F                      			pop	ds						;... into data segment register
  2461 0000071E 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  2462 00000724 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  2463 00000726 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2464 00000729 09D0                    			or	eax,edx						;is queue empty?
  2465 0000072B F9                      			stc							;assume queue is emtpy
  2466 0000072C 741B                    			jz	.20						;yes, skip ahead
  2467 0000072E 31C9                    			xor	ecx,ecx						;store zero
  2468 00000730 890B                    			mov	[ebx],ecx					;... in lo-order dword
  2469 00000732 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  2470 00000735 83C308                  			add	ebx,8						;next queue element
  2471 00000738 81E3FC030000            			and	ebx,03fch					;at end of queue?
  2472 0000073E 7502                    			jnz	.10						;no, skip ahead
  2473 00000740 B308                    			mov	bl,8						;reset to 1st entry
  2474 00000742 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  2475 00000748 F8                      			clc							;indicate message read
  2476 00000749 1F                      .20			pop	ds						;restore non-volatile regs
  2477 0000074A 59                      			pop	ecx						;
  2478 0000074B 5B                      			pop	ebx						;
  2479 0000074C C3                      			ret							;return
  2480                                  ;-----------------------------------------------------------------------------------------------------------------------
  2481                                  ;
  2482                                  ;	Memory-Mapped Video Routines
  2483                                  ;
  2484                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2485                                  ;
  2486                                  ;	ClearConsoleScreen
  2487                                  ;	ScrollConsoleRow
  2488                                  ;	SetConsoleChar
  2489                                  ;
  2490                                  ;-----------------------------------------------------------------------------------------------------------------------
  2491                                  ;-----------------------------------------------------------------------------------------------------------------------
  2492                                  ;
  2493                                  ;	Routine:	ClearConsoleScreen
  2494                                  ;
  2495                                  ;	Description:	This routine clears the console (CGA) screen.
  2496                                  ;
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498 0000074D 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  2499 0000074E 57                      			push	edi						;
  2500 0000074F 1E                      			push	ds						;
  2501 00000750 06                      			push	es						;
  2502 00000751 6A18                    			push	ESELDAT						;load OS Data selector ...
  2503 00000753 1F                      			pop	ds						;... into DS register
  2504 00000754 6A20                    			push	ESELCGA						;load CGA selector ...
  2505 00000756 07                      			pop	es						;... into ES register
  2506 00000757 B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  2507 0000075C B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2508 00000761 31FF                    			xor	edi,edi						;target offset
  2509 00000763 FC                      			cld							;forward strings
  2510 00000764 F3AB                    			rep	stosd						;reset screen body
  2511 00000766 B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  2512 0000076B B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2513 00000770 F3AB                    			rep	stosd						;reset OIA line
  2514 00000772 30C0                    			xor	al,al						;zero register
  2515 00000774 A201080000              			mov	[wbConsoleRow],al				;reset console row
  2516 00000779 A200080000              			mov	[wbConsoleColumn],al				;reset console column
  2517 0000077E E845000000              			call	PlaceCursor					;place cursor at current position
  2518 00000783 07                      			pop	es						;restore non-volatile regs
  2519 00000784 1F                      			pop	ds						;
  2520 00000785 5F                      			pop	edi						;
  2521 00000786 59                      			pop	ecx						;
  2522 00000787 C3                      			ret							;return
  2523                                  ;-----------------------------------------------------------------------------------------------------------------------
  2524                                  ;
  2525                                  ;	Routine:	ScrollConsoleRow
  2526                                  ;
  2527                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2528                                  ;
  2529                                  ;-----------------------------------------------------------------------------------------------------------------------
  2530 00000788 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  2531 00000789 56                      			push	esi						;
  2532 0000078A 57                      			push	edi						;
  2533 0000078B 1E                      			push	ds						;
  2534 0000078C 06                      			push	es						;
  2535 0000078D 6A20                    			push	ESELCGA						;load CGA video selector ...
  2536 0000078F 1F                      			pop	ds						;... into DS
  2537 00000790 6A20                    			push	ESELCGA						;load CGA video selector ...
  2538 00000792 07                      			pop	es						;... into ES
  2539 00000793 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2540 00000798 BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2541 0000079D 31FF                    			xor	edi,edi						;edi = target (line 1)
  2542 0000079F FC                      			cld							;forward strings
  2543 000007A0 F3A5                    			rep	movsd						;move 24 lines up
  2544 000007A2 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2545 000007A7 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2546 000007AC F3AB                    			rep	stosd						;clear bottom row
  2547 000007AE 07                      			pop	es						;restore non-volatile regs
  2548 000007AF 1F                      			pop	ds						;
  2549 000007B0 5F                      			pop	edi						;
  2550 000007B1 5E                      			pop	esi						;
  2551 000007B2 59                      			pop	ecx						;
  2552 000007B3 C3                      			ret							;return
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  ;
  2555                                  ;	Routine:	SetConsoleChar
  2556                                  ;
  2557                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2558                                  ;
  2559                                  ;	In:		AL	ASCII character
  2560                                  ;			CL	column
  2561                                  ;			CH	row
  2562                                  ;			ES	CGA selector
  2563                                  ;
  2564                                  ;-----------------------------------------------------------------------------------------------------------------------
  2565 000007B4 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  2566 000007B6 0FB6C5                  			movzx	eax,ch						;row
  2567 000007B9 B450                    			mov	ah,ECONCOLS					;cols/row
  2568 000007BB F6E4                    			mul	ah						;row * cols/row
  2569 000007BD 00C8                    			add	al,cl						;add column
  2570 000007BF 80D400                  			adc	ah,0						;handle carry
  2571 000007C2 D1E0                    			shl	eax,1						;screen offset
  2572 000007C4 268810                  			mov	[es:eax],dl					;store character
  2573 000007C7 C3                      			ret							;return
  2574                                  ;-----------------------------------------------------------------------------------------------------------------------
  2575                                  ;
  2576                                  ;	Input/Output Routines
  2577                                  ;
  2578                                  ;	These routines read and/or write directly to ports.
  2579                                  ;
  2580                                  ;	PlaceCursor
  2581                                  ;	PutPrimaryEndOfInt
  2582                                  ;	PutSecondaryEndOfInt
  2583                                  ;	SetKeyboardLamps
  2584                                  ;	WaitForKeyInBuffer
  2585                                  ;	WaitForKeyOutBuffer
  2586                                  ;
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  ;-----------------------------------------------------------------------------------------------------------------------
  2589                                  ;
  2590                                  ;	Routine:	PlaceCursor
  2591                                  ;
  2592                                  ;	Description:	This routine positions the cursor on the console.
  2593                                  ;
  2594                                  ;	In:		DS	OS data selector
  2595                                  ;
  2596                                  ;-----------------------------------------------------------------------------------------------------------------------
  2597 000007C8 51                      PlaceCursor		push	ecx						;save non-volatile regs
  2598 000007C9 A001080000              			mov	al,[wbConsoleRow]				;al = row
  2599 000007CE B450                    			mov	ah,ECONCOLS					;ah = cols/row
  2600 000007D0 F6E4                    			mul	ah						;row offset
  2601 000007D2 020500080000            			add	al,[wbConsoleColumn]				;add column
  2602 000007D8 80D400                  			adc	ah,0						;add overflow
  2603 000007DB 89C1                    			mov	ecx,eax						;screen offset
  2604 000007DD B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  2605 000007DF B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  2606 000007E1 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2607 000007E3 EE                      			out	dx,al						;select register
  2608 000007E4 42                      			inc	edx						;data port
  2609 000007E5 88E8                    			mov	al,ch						;hi-order cursor loc
  2610 000007E7 EE                      			out	dx,al						;store hi-order loc
  2611 000007E8 4A                      			dec	edx						;register select port
  2612 000007E9 B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2613 000007EB EE                      			out	dx,al						;select register
  2614 000007EC 42                      			inc	edx						;data port
  2615 000007ED 88C8                    			mov	al,cl						;lo-order cursor loc
  2616 000007EF EE                      			out	dx,al						;store lo-order loc
  2617 000007F0 59                      			pop	ecx						;restore non-volatile regs
  2618 000007F1 C3                      			ret							;return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;	Routine:	PutPrimaryEndOfInt
  2622                                  ;
  2623                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2624                                  ;
  2625                                  ;-----------------------------------------------------------------------------------------------------------------------
  2626 000007F2 FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2627 000007F3 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2628 000007F5 E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  2629 000007F7 C3                      			ret							;return
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  ;
  2632                                  ;	Routine:	PutSecondaryEndOfInt
  2633                                  ;
  2634                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2635                                  ;
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637 000007F8 FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2638 000007F9 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2639 000007FB E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2640 000007FD C3                      			ret							;return
  2641                                  ;-----------------------------------------------------------------------------------------------------------------------
  2642                                  ;
  2643                                  ;	Routine:	SetKeyboardLamps
  2644                                  ;
  2645                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2646                                  ;
  2647                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2648                                  ;
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650 000007FE E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2651 00000803 B0ED                    			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2652 00000805 E660                    			out	EKEYPORTDATA,al					;send command to 8042
  2653 00000807 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2654 0000080C E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2655 0000080E E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  2656 00000813 88F8                    			mov	al,bh						;set/reset lamps value
  2657 00000815 E660                    			out	EKEYPORTDATA,al					;send lamps value
  2658 00000817 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2659 0000081C E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2660 0000081E C3                      			ret							;return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;	Routine:	WaitForKeyInBuffer
  2664                                  ;
  2665                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2666                                  ;
  2667                                  ;	Out:		ZF	1 = Input buffer ready
  2668                                  ;				0 = Input buffer not ready after timeout
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671 0000081F 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2672 00000820 B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2673 00000825 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2674 00000827 A802                    			test	al,EKEYBITIN					;is input buffer still full?
  2675 00000829 E0FA                    			loopnz	.10						;yes, repeat till timeout
  2676 0000082B 59                      			pop	ecx						;restore non-volatile regs
  2677 0000082C C3                      			ret							;return
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                  ;
  2680                                  ;	Routine:	WaitForKeyOutBuffer
  2681                                  ;
  2682                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2683                                  ;
  2684                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2685                                  ;				1 = Output buffer empty after timeout
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688 0000082D 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2689 0000082E B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2690 00000833 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2691 00000835 A801                    			test	al,EKEYBITOUT					;output buffer status bit
  2692 00000837 E1FA                    			loopz	.10						;loop until output buffer bit
  2693 00000839 59                      			pop	ecx						;restore non-volatile regs
  2694 0000083A C3                      			ret							;return
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696                                  ;
  2697                                  ;	End of the Kernel Function Library
  2698                                  ;
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700 0000083B 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  2701 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  ;
  2704                                  ;	Console Task
  2705                                  ;
  2706                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2707                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2708                                  ;	screen and responds to user commands.
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;
  2713                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2714                                  ;
  2715                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2716                                  ;
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  section			constack						;console task stack
  2719 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721                                  ;
  2722                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2723                                  ;
  2724                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2725                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2726                                  ;	16 descriptors. Six are initially defined.
  2727                                  ;
  2728                                  ;-----------------------------------------------------------------------------------------------------------------------
  2729                                  section			conldt							;console local descriptors
  2730 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  2731 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  2732 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  2733 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  2734 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  2735 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  2736 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                  ;
  2739                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2740                                  ;
  2741                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2742                                  ;	segment. CS to console code.
  2743                                  ;
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  section			contss							;console task state segment
  2746 00000000 00000000                			dd	0						;00 back-link tss
  2747 00000004 00070000                			dd	0700h						;04 esp ring 0
  2748 00000008 14000000                			dd	0014h						;08 ss ring 0
  2749 0000000C 00070000                			dd	0700h						;0C esp ring 1
  2750 00000010 14000000                			dd	0014h						;10 es ring 1
  2751 00000014 00070000                			dd	0700h						;14 esp ring 2
  2752 00000018 14000000                			dd	0014h						;18 ss ring 2
  2753 0000001C 00000000                			dd	0						;1C cr ring 3
  2754 00000020 00000000                			dd	0						;20 eip
  2755 00000024 00020000                			dd	0200h						;24 eflags
  2756 00000028 00000000                			dd	0						;28 eax
  2757 0000002C 00000000                			dd	0						;2C ecx
  2758 00000030 00000000                			dd	0						;30 edx
  2759 00000034 00000000                			dd	0						;34 ebx
  2760 00000038 00070000                			dd	0700h						;38 esp ring 3
  2761 0000003C 00000000                			dd	0						;3C ebp
  2762 00000040 00000000                			dd	0						;40 esi
  2763 00000044 00000000                			dd	0						;44 edi
  2764 00000048 1C000000                			dd	001Ch						;48 es
  2765 0000004C 24000000                			dd	0024h						;4C cs
  2766 00000050 14000000                			dd	0014h						;50 ss ring 3
  2767 00000054 1C000000                			dd	001Ch						;54 ds
  2768 00000058 00000000                			dd	0						;58 fs
  2769 0000005C 00000000                			dd	0						;5c gs
  2770 00000060 50000000                			dd	0050h						;60 ldt selector in gdt
  2771 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  ;
  2774                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2775                                  ;
  2776                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2777                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2778                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2779                                  ;	event.
  2780                                  ;
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                  section			conmque							;console message queue
  2783 00000000 08000000                			dd	8						;head pointer
  2784 00000004 08000000                			dd	8						;tail pointer
  2785 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  2786                                  ;-----------------------------------------------------------------------------------------------------------------------
  2787                                  ;
  2788                                  ;	Console Code								@disk: 008400	@mem: 005000
  2789                                  ;
  2790                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2791                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2792                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2793                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2794                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2795                                  ;	board input, echoing to the console screen and responding to user commands.
  2796                                  ;
  2797                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2798                                  ;
  2799                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2800                                  ;				|  Real Mode Interrupt Vectors			|
  2801                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2802                                  ;				|  Reserved BIOS Memory Area			|
  2803                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2804                                  ;				|  Shared Kernel Memory Area			|
  2805                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2806                                  ;				|  Global Descriptor Table (GDT)		|
  2807                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2808                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2809                                  ;			002000	+-----------------------------------------------+
  2810                                  ;				|  Interrupt Handlers				|
  2811                                  ;				|  Kernel Function Library			|
  2812                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2813                                  ;				|  Console Task Stack Area			|
  2814                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2815                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2816                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2817                                  ;				|  Console Task Task State Segment (TSS)	|
  2818                                  ;			004800	+-----------------------------------------------+
  2819                                  ;				|  Console Task Message Queue			|
  2820                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2821                                  ;				|  Console Task Code				|
  2822                                  ;				|  Console Task Constants			|
  2823                                  ;			006000	+===============================================+
  2824                                  ;
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                  section			concode	vstart=5000h					;labels relative to 5000h
  2827 00000000 E852000000              ConCode			call	ConInitializeData				;initialize console variables
  2828                                  
  2829                                  			clearConsoleScreen					;clear the console screen
  2829 00000005 B002                <1>  mov al,eClearConsoleScreen
  2829 00000007 CD30                <1>  int _svc
  2830                                  			putConsoleString czTitle				;display startup message
  2830 00000009 BA[70000000]        <1>  mov edx,%1
  2830 0000000E B000                <1>  mov al,ePutConsoleString
  2830 00000010 CD30                <1>  int _svc
  2831                                  .10			putConsoleString czPrompt				;display input prompt
  2831                              <1> .10 :
  2831 00000012 BA[8E000000]        <1>  mov edx,%1
  2831 00000017 B000                <1>  mov al,ePutConsoleString
  2831 00000019 CD30                <1>  int _svc
  2832                                  			placeCursor						;set CRT cursor location
  2832 0000001B B003                <1>  mov al,ePlaceCursor
  2832 0000001D CD30                <1>  int _svc
  2833                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  2833 0000001F BA0C080000          <1>  mov edx,%1
  2833 00000024 B94F000000          <1>  mov ecx,%2
  2833 00000029 B701                <1>  mov bh,%3
  2833 0000002B B30D                <1>  mov bl,%4
  2833 0000002D B001                <1>  mov al,eGetConsoleString
  2833 0000002F CD30                <1>  int _svc
  2834                                  			putConsoleString czNewLine				;newline
  2834 00000031 BA[A2000000]        <1>  mov edx,%1
  2834 00000036 B000                <1>  mov al,ePutConsoleString
  2834 00000038 CD30                <1>  int _svc
  2835                                  			putConsoleString wzConsoleInBuffer			;print entered command
  2835 0000003A BA0C080000          <1>  mov edx,%1
  2835 0000003F B000                <1>  mov al,ePutConsoleString
  2835 00000041 CD30                <1>  int _svc
  2836                                  			putConsoleString czNewLine				;new line
  2836 00000043 BA[A2000000]        <1>  mov edx,%1
  2836 00000048 B000                <1>  mov al,ePutConsoleString
  2836 0000004A CD30                <1>  int _svc
  2837                                  			putConsoleString czUnknownCommand			;display error message
  2837 0000004C BA[90000000]        <1>  mov edx,%1
  2837 00000051 B000                <1>  mov al,ePutConsoleString
  2837 00000053 CD30                <1>  int _svc
  2838                                  
  2839 00000055 EBBB                    			jmp	.10						;next command
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;	Routine:	ConInitializeData
  2843                                  ;
  2844                                  ;	Description:	This routine initializes console task variables.
  2845                                  ;
  2846                                  ;-----------------------------------------------------------------------------------------------------------------------
  2847 00000057 51                      ConInitializeData	push	ecx						;save non-volatile regs
  2848 00000058 57                      			push	edi						;
  2849 00000059 06                      			push	es						;
  2850 0000005A 6A18                    			push	ESELDAT						;load OS data selector ...
  2851 0000005C 07                      			pop	es						;... into extra segment register
  2852 0000005D BF00080000              			mov	edi,ECONDATA					;OS console data address
  2853 00000062 30C0                    			xor	al,al						;initialization value
  2854 00000064 B95C000000              			mov	ecx,ECONDATALEN					;size of OS console data
  2855 00000069 FC                      			cld							;forward strings
  2856 0000006A F3AA                    			rep	stosb						;initialize data
  2857 0000006C 07                      			pop	es						;restore non-volatile regs
  2858 0000006D 5F                      			pop	edi						;
  2859 0000006E 59                      			pop	ecx						;
  2860 0000006F C3                      			ret							;return
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                  ;
  2863                                  ;	Constants
  2864                                  ;
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866 00000070 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  2866 00000079 65726174696E672053-
  2866 00000082 797374656D20312E30-
  2866 0000008B 0D0A00             
  2867 0000008E 3A00                    czPrompt		db	":",0						;prompt string
  2868 00000090 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  2868 00000099 6F6D6D616E640D0A00 
  2869 000000A2 0D0A00                  czNewLine		db	13,10,0						;new line string
  2870 000000A5 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  2871 00000FFE 55AA                    			db	055h,0AAh					;end of section
  2872                                  %endif
  2873                                  %ifdef BUILDDISK
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  2877                                  ;
  2878                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2879                                  ;
  2880                                  ;-----------------------------------------------------------------------------------------------------------------------
  2881                                  section			unused							;unused disk space
  2882 00000000 F6<rept>                			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  2883                                  %endif
