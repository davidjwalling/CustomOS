     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.006
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;                       are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;                       console task.
    10                                  ;
    11                                  ;       Revised:        January 1, 2019
    12                                  ;
    13                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    19                                  ;
    20                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;=======================================================================================================================
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;       Assembly Directives
    26                                  ;
    27                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    36                                  %define BUILDBOOT                                                               ;... build the boot sector
    37                                  %define BUILDCOM                                                                ;... and the OS kernel
    38                                  %endif
    39                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    40                                  %define BUILDBOOT                                                               ;... also build the boot sector
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;       Conventions
    45                                  ;
    46                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    47                                  ;                       Logical tabs are set after every eight columns.
    48                                  ;                       Tabs are simulated using SPACE characters.
    49                                  ;                       For comments that span an entire line, comment text begins in column 9.
    50                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    51                                  ;                       Assembly operands begin in column 33.
    52                                  ;                       Inline comments begin in column 81.
    53                                  ;                       Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    56                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    57                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    58                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    59                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    60                                  ;                       ouput buffers, respectively.
    61                                  ;
    62                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    63                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    64                                  ;
    65                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    66                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    67                                  ;                       Register names in comments are in upper case (EAX, EDI).
    68                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    69                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    70                                  ;                       register contents on entry and exit.
    71                                  ;
    72                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    73                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    74                                  ;                       The 2nd letter of the constant label indicates the storage type.
    75                                  ;
    76                                  ;                       cq......        constant quad-word (dq)
    77                                  ;                       cd......        constant double-word (dd)
    78                                  ;                       cw......        constant word (dw)
    79                                  ;                       cb......        constant byte (db)
    80                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    81                                  ;
    82                                  ;       Instructions:   32-bit instructions are generally favored.
    83                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    84                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    85                                  ;
    86                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    87                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    88                                  ;
    89                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    90                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    91                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    92                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    93                                  ;                       Octal literal values are avoided.
    94                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    95                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    96                                  ;
    97                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    98                                  ;                       Macro names describe an action and so DO begin with a verb.
    99                                  ;
   100                                  ;       Memory Use:     Operating system memory allocation is minimized.
   101                                  ;                       Buffers are kept to as small a size as practicable.
   102                                  ;                       Data and code intermingling is avoided wherever possible.
   103                                  ;
   104                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   105                                  ;                       Register names in source code are in lower case (eax, edx).
   106                                  ;
   107                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   108                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   109                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   110                                  ;
   111                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   112                                  ;                       Routine names begin with a verb (Get, Read, Load).
   113                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   114                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   115                                  ;                       function but begin with a leading underscore (_) character.
   116                                  ;
   117                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   118                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   119                                  ;
   120                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   121                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   122                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   123                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   124                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   125                                  ;
   126                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   127                                  ;                       The 2nd letter of the variable label indicates the storage type.
   128                                  ;
   129                                  ;                       wq......        variable quad-word (resq)
   130                                  ;                       wd......        variable double-word (resd)
   131                                  ;                       ww......        variable word (resw)
   132                                  ;                       wb......        variable byte (resb)
   133                                  ;                       ws......        writable structure
   134                                  ;
   135                                  ;-----------------------------------------------------------------------------------------------------------------------
   136                                  ;=======================================================================================================================
   137                                  ;
   138                                  ;       Equates
   139                                  ;
   140                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   141                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   142                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   143                                  ;       sets. Equates here are defined in the following groupings:
   144                                  ;
   145                                  ;       Hardware-Defined Values
   146                                  ;
   147                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   148                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   149                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   150                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   151                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EKEYF...        Keyboard status flags
   168                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   169                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   170                                  ;       EMSG...         Message identifers
   171                                  ;
   172                                  ;=======================================================================================================================
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;
   175                                  ;       Hardware-Defined Values
   176                                  ;
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;
   180                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   181                                  ;
   182                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   183                                  ;       for CGA, EGA, VGA and compatible video modes.
   184                                  ;
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   187                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   188                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   189                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  ;
   192                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   193                                  ;
   194                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   195                                  ;
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   198                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   199                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   200                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   201                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  ;
   204                                  ;       8042 Keyboard Controller                                                EKEYB...
   205                                  ;
   206                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   207                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   208                                  ;
   209                                  ;-----------------------------------------------------------------------------------------------------------------------
   210                                  EKEYBPORTDATA           equ     060h                                            ;data port
   211                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   212                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   213                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   214                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   215                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   216                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   217                                                                                                                  ;---------------------------------------
   218                                                                                                                  ;       Keyboard Scan Codes
   219                                                                                                                  ;---------------------------------------
   220                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   221                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   222                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   223                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   224                                  EKEYBSLASH              equ     035h                                            ;slash
   225                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   226                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   227                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   228                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   229                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   230                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   231                                  EKEYBUP                 equ     080h                                            ;up
   232                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   233                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   234                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   235                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   236                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   237                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   238                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   239                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   240                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   241                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   242                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   243                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   244                                  ;-----------------------------------------------------------------------------------------------------------------------
   245                                  ;
   246                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   247                                  ;
   248                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   249                                  ;       external devices and signals a hardware interrupt to the CPU.
   250                                  ;
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   253                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   254                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   255                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   256                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  ;
   259                                  ;       8253 Programmable Interval Timer                                        EPIT...
   260                                  ;
   261                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   262                                  ;       approximately 18.2 times per second.
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  ;
   268                                  ;       x86 CPU Architecture                                                    ;EX86...
   269                                  ;
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  ;
   274                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   275                                  ;
   276                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   277                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   278                                  ;
   279                                  ;       0.......        Segment is not present in memory (triggers int 11)
   280                                  ;       1.......        Segment is present in memory
   281                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   282                                  ;       ...0....        Segment is a system segment
   283                                  ;       ...00010                Local Descriptor Table
   284                                  ;       ...00101                Task Gate
   285                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   286                                  ;       ...01100                Call Gate (386)
   287                                  ;       ...01110                Interrupt Gate (386)
   288                                  ;       ...01111                Trap Gate (386)
   289                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   290                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   291                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   292                                  ;
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       Firmware-Defined Values
   299                                  ;
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   304                                  ;
   305                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   306                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   310                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   311                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   312                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   313                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   314                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   315                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   316                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   317                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   318                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   319                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;
   322                                  ;       Standards-Based Values
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       ASCII                                                                   EASCII...
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   331                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   332                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   333                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   334                                  EASCIISPACE             equ     020h                                            ;space
   335                                  EASCIIUPPERA            equ     041h                                            ;'A'
   336                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   337                                  EASCIITILDE             equ     07Eh                                            ;'~'
   338                                  EASCIICASE              equ     00100000b                                       ;case bit
   339                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;
   342                                  ;       Operating System Values
   343                                  ;
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;
   347                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   348                                  ;
   349                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   350                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   351                                  ;
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   354                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   355                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   356                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   357                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   358                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   359                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  ;       Console Constants                                                       ECON...
   362                                  ;-----------------------------------------------------------------------------------------------------------------------
   363                                  ECONCOLS                equ     80                                              ;columns per row
   364                                  ECONROWS                equ     24                                              ;console rows
   365                                  ECONOIAROW              equ     24                                              ;operator information area row
   366                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   367                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   368                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   369                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   370                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   375                                  EGDTCGA                 equ     020h                                            ;cga video selector
   376                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   377                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   378                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   379                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   380                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   381                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  ;       Keyboard Flags                                                          EKEYF...
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   386                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   387                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   388                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   389                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   390                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   391                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   392                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   393                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   394                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   395                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ;       Kernel Constants                                                        EKRN...
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   400                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   401                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   402                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;       Message Identifiers                                                     EMSG...
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   411                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   412                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   413                                  ;=======================================================================================================================
   414                                  ;
   415                                  ;       Structures
   416                                  ;
   417                                  ;=======================================================================================================================
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  ;
   420                                  ;       MQUEUE
   421                                  ;
   422                                  ;       The MQUEUE structure maps memory used for a message queue.
   423                                  ;
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  struc                   MQUEUE
   426 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   427 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   428 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   429                                  endstruc
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;
   432                                  ;       OSDATA
   433                                  ;
   434                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   435                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   436                                  ;
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  struc                   OSDATA
   439 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   440 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   441 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   442 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   443 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   444 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   445 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   446 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   447 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   448 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   449 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   450 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   451 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   452 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   453 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   454 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   455 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   456 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   457 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   458 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   459 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   460 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   461 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   462 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   463 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   464 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   465 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   466 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   467 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   468 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   469 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   470 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   471 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   472 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   473 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   474 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   475 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   476 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   477 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   478 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   479 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   480 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   481 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   482 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   483 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   484 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   485 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   486 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   487 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   488 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   489 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   490 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   491 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   492 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   493 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   494 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   495 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   496 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   497 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   498 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   499 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   500 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   501 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   502 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   503 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   504 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   505 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   506 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   507 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   508 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   509 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   510 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   511 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   512 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   513 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   514 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   515 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   516 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   517 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   518 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   519 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   520 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   521 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   522 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   523 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   524 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   525 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   526 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   527 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   528 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   529 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   530 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   531 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   532 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   533 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   534 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   535 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   536 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   537 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   538 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   539 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   540                                  ;-----------------------------------------------------------------------------------------------------------------------
   541                                  ;
   542                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   543                                  ;
   544                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   545                                  ;
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  ECONDATA                equ     ($)
   548 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   549 00000804 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   550 00000808 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   551 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   552 0000085C <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   553 0000085D <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   554 0000085E <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   555 0000085F <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   556 00000860 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   557 00000861 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   558 00000862 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   559 00000863 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   560 00000864 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   561 00000865 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   562 00000866 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   563 00000867 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   564                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   565                                  ;-----------------------------------------------------------------------------------------------------------------------
   566                                  ;
   567                                  ;       End of OS Variables
   568                                  ;
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  endstruc
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  ;
   573                                  ;       Macros
   574                                  ;
   575                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   576                                  ;
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  %macro                  mint    1
   579                                  _%1                     equ     ($-$$) / EX86DESCLEN
   580                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   581                                  %endmacro
   582                                  %macro                  mtrap   1
   583                                  _%1                     equ     ($-$$) / EX86DESCLEN
   584                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   585                                  %endmacro
   586                                  %macro                  menter  1
   587                                  ?%1                     equ     ($-$$)
   588                                  %endmacro
   589                                  %macro                  tsvce   1
   590                                  e%1                     equ     ($-tsvc)/4
   591                                                          dd      %1
   592                                  %endmacro
   593                                  %ifdef BUILDBOOT
   594                                  ;=======================================================================================================================
   595                                  ;
   596                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   597                                  ;
   598                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   599                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   600                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   601                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   602                                  ;
   603                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   604                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   605                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   606                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   607                                  ;       immediately followed by a disk parameter table.
   608                                  ;
   609                                  ;=======================================================================================================================
   610                                                          cpu     8086                                            ;assume minimal CPU
   611                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   612                                                          bits    16                                              ;16-bit code at power-up
   613                                  %ifdef BUILDPREP
   614                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   615                                  %else
   616 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   617                                  %endif
   618                                  ;-----------------------------------------------------------------------------------------------------------------------
   619                                  ;
   620                                  ;       Disk Parameter Table
   621                                  ;
   622                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   623                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   624                                  ;
   625                                  ;-----------------------------------------------------------------------------------------------------------------------
   626 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   627 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   628 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   629 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   630 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   631 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   632 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   633 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   634 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   635                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   636 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   637 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   638 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   639                                  ;
   640                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   641                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   642                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   643                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   644                                  ;       given several possible starting values for CS:IP.
   645                                  ;
   646                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   647 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   648                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   649 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   650 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   651 00000025 B104                                            mov     cl,4                                            ;shift count
   652 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   653 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   654 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   655                                  ;
   656                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   657                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   658                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   659                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   660                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   661                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   662                                  ;
   663 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   664 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   665 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   666 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   667 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   668                                  ;
   669                                  ;       Our boot addressability is now set up according to the following diagram.
   670                                  ;
   671                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   672                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   673                                  ;                               |  256 = 100h bytes                             |
   674                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   675                                  ;                               |  Boot Sector (vstart=0100h)                   |
   676                                  ;                               |  1 sector = 512 = 200h bytes                  |
   677                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   678                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   679                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   680                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   681                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   682                                  ;                               |  2 sectors = 1024 = 400h bytes
   683                                  ;                       009400  +-----------------------------------------------+ DS:1900
   684                                  ;
   685                                  ;       On entry, DL indicates the drive being booted from.
   686                                  ;
   687 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   688                                  ;
   689                                  ;       Compute directory i/o buffer address.
   690                                  ;
   691 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   692 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   693 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   694 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   695                                  ;
   696                                  ;       Compute segment where os.com will be loaded.
   697                                  ;
   698 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   699 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   700 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   701 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   702                                  ;
   703                                  ;       Set the video mode to 80 column, 25 row, text.
   704                                  ;
   705 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   706 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   707                                  ;
   708                                  ;       Write a message to the console so we know we have our addressability established.
   709                                  ;
   710 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   711 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   712                                  ;
   713                                  ;       Initialize the number of directory sectors to search.
   714                                  ;
   715 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   716 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   717                                  ;
   718                                  ;       Compute number of directory sectors and initialize overhead count.
   719                                  ;
   720 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   721 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   722 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   723 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   724                                  ;
   725                                  ;       Compute directory entries per sector.
   726                                  ;
   727 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   728 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   729 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   730                                  ;
   731                                  ;       Compute first logical directory sector and update overhead count.
   732                                  ;
   733 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   734 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   735 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   736 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   737 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   738 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   739                                  ;
   740                                  ;       Read directory sector.
   741                                  ;
   742 0000008E B001                    .30                     mov     al,1                                            ;sector count
   743 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   744 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   745 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   746                                  ;
   747                                  ;       Setup variables to search this directory sector.
   748                                  ;
   749 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   750 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   751 000000A1 7603                                            jna     .40                                             ;no, continue
   752 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   753 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   754 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   755 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   756                                  ;
   757                                  ;       Loop through directory sectors searching for kernel program.
   758                                  ;
   759 000000B1 56                      .50                     push    si                                              ;save kernel name address
   760 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   761 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   762 000000B6 FC                                              cld                                                     ;forward strings
   763 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   764 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   765 000000BA 5E                                              pop     si                                              ;restore kernel name address
   766 000000BB 7418                                            je      .60                                             ;exit loop if found
   767 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   768 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   769 000000C2 75ED                                            jnz     .50                                             ;next entry
   770                                  ;
   771                                  ;       Repeat search if we are not at the end of the directory.
   772                                  ;
   773 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   774 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   775 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   776 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   777 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   778                                  ;
   779                                  ;       If we find the kernel program in the directory, read the FAT.
   780                                  ;
   781 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   782 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   783 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   784 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   785 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   786 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   787                                  ;
   788                                  ;       Get the starting cluster of the kernel program and target address.
   789                                  ;
   790 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   791 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   792                                  ;
   793                                  ;       Read each program cluster into RAM.
   794                                  ;
   795 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   796 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   797 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   798 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   799 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   800 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   801 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   802 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   803 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   804                                  ;
   805                                  ;       Update buffer pointer for next cluster.
   806                                  ;
   807 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   808 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   809 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   810 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   811 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   812                                  ;
   813                                  ;       Compute next cluster number.
   814                                  ;
   815 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   816 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   817 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   818 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   819 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   820 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   821 00000120 83E701                                          and     di,1                                            ;get low bit
   822 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   823 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   824 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   825                                  ;
   826                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   827                                  ;
   828 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   829 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   830 00000130 B104                                            mov     cl,4                                            ;shift count
   831 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   832 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   833 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   834 0000013A 75B2                                            jne     .70                                             ;no, continue
   835                                  ;
   836                                  ;       Transfer control to the operating system program.
   837                                  ;
   838 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   839 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   840 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   841                                  ;
   842                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   843                                  ;
   844 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   845 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   846 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   847 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   848 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   849 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   850 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   851 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   852 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   853 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   854                                  ;
   855                                  ;       Try maxtries times to read sector.
   856                                  ;
   857 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   858 00000160 53                      .10                     push    bx                                              ;save buffer address
   859 00000161 51                                              push    cx                                              ;save retry count
   860 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   861 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   862 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   863 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   864 0000016F 59                                              pop     cx                                              ;restore retry count
   865 00000170 5B                                              pop     bx                                              ;restore buffer address
   866 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   867 00000173 E2EB                                            loop    .10                                             ;retry
   868                                  ;
   869                                  ;       Handle disk error: convert to ASCII and store in error string.
   870                                  ;
   871 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   872 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   873 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   874 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   875 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   876 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   877 00000183 7203                                            jb      .20                                             ;continue if numeral
   878 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   879 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   880 0000018A 7203                                            jb      .30                                             ;continue if numeral
   881 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   882 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   883 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   884 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   885                                  ;
   886                                  ;       Wait for a key press.
   887                                  ;
   888 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   889 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   890 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   891 0000019E FB                                              sti                                                     ;enable maskable interrupts
   892 0000019F F4                                              hlt                                                     ;wait for interrupt
   893 000001A0 EBF6                                            jmp     .10                                             ;repeat
   894                                  ;
   895                                  ;       Reset the system.
   896                                  ;
   897 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   898 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   899 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   900 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   901 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   902                                  ;
   903                                  ;       Display text message.
   904                                  ;
   905 000001AA FC                      BootPrint               cld                                                     ;forward strings
   906 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   907 000001AC 84C0                                            test    al,al                                           ;end of string?
   908 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   909 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   910 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   911 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   912 000001B6 C3                      BootReturn              ret                                                     ;return
   913                                  ;-----------------------------------------------------------------------------------------------------------------------
   914                                  ;
   915                                  ;       Constants
   916                                  ;
   917                                  ;-----------------------------------------------------------------------------------------------------------------------
   918 000001B7 90                                              align   2
   919 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   920 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   920 000001C3 4F4D               
   921 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   921 000001CE 530D0A00           
   922 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   922 000001DB 7220               
   923 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   924 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   924 000001E9 6700               
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926                                  ;
   927                                  ;       Work Areas
   928                                  ;
   929                                  ;-----------------------------------------------------------------------------------------------------------------------
   930 000001EB 90                                              align   2
   931 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   932 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   933 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   934 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   935 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   936                                  wwReadCountCommand      equ     $                                               ;read count and command
   937 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   938 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   939                                  wwDriveHead             equ     $                                               ;drive, head (word)
   940 000001F8 00                      wbDrive                 db      0                                               ;drive
   941 000001F9 00                      wbHead                  db      0                                               ;head
   942                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   943 000001FA 00                                              db      0                                               ;sector
   944 000001FB 00                      wbTrack                 db      0                                               ;track
   945 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   946 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   947                                  %endif
   948                                  %ifdef BUILDPREP
   949                                  ;=======================================================================================================================
   950                                  ;
   951                                  ;       Diskette Preparation Code
   952                                  ;
   953                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   954                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   955                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   956                                  ;
   957                                  ;=======================================================================================================================
   958                                  ;
   959                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   960                                  ;
   961                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   962                                                          call    BootPrint                                       ;display message
   963                                  ;
   964                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   965                                  ;
   966                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   967                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   968                                                          jnz     .20                                             ;continue if key pressed
   969                                                          sti                                                     ;enable interrupts
   970                                                          hlt                                                     ;wait for interrupt
   971                                                          jmp     .10                                             ;repeat
   972                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   973                                                          je      .30                                             ;yes, branch
   974                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   975                                                          jne     .10                                             ;no, repeat
   976                                                          jmp     .120                                            ;yes, exit program
   977                                  ;
   978                                  ;       Display writing-sector message and patch the JMP instruction.
   979                                  ;
   980                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   981                                                          call    BootPrint                                       ;display message
   982                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   983                                                          mov     ax,01Bh                                         ;address past disk parameter table
   984                                                          mov     [bx],ax                                         ;update the JMP instruction
   985                                  ;
   986                                  ;       Try to read the boot sector.
   987                                  ;
   988                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   989                                  .40                     push    cx                                              ;save remaining tries
   990                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   991                                                          mov     dx,0                                            ;head zero, drive zero
   992                                                          mov     cx,1                                            ;track zero, sector one
   993                                                          mov     al,1                                            ;one sector
   994                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   995                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   996                                                          pop     cx                                              ;restore remaining retries
   997                                                          jnc     .50                                             ;skip ahead if successful
   998                                                          loop    .40                                             ;try again
   999                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1000                                                          jmp     .70                                             ;branch to error routine
  1001                                  ;
  1002                                  ;       Copy diskette parms from input buffer to output buffer.
  1003                                  ;
  1004                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1005                                                          add     si,11                                           ;skip over JMP and system ID
  1006                                                          mov     di,Boot                                         ;output buffer address
  1007                                                          add     di,11                                           ;skip over JMP and system ID
  1008                                                          mov     cx,19                                           ;length of diskette parameters
  1009                                                          cld                                                     ;forward string copies
  1010                                                          rep     movsb                                           ;copy diskette parameters
  1011                                  ;
  1012                                  ;       Try to write boot sector to diskette.
  1013                                  ;
  1014                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1015                                  .60                     push    cx                                              ;save remaining tries
  1016                                                          mov     bx,Boot                                         ;output buffer address
  1017                                                          mov     dx,0                                            ;head zero, drive zero
  1018                                                          mov     cx,1                                            ;track zero, sector one
  1019                                                          mov     al,1                                            ;one sector
  1020                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1021                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1022                                                          pop     cx                                              ;restore remaining retries
  1023                                                          jnc     .100                                            ;skip ahead if successful
  1024                                                          loop    .60                                             ;try again
  1025                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1026                                  ;
  1027                                  ;       Convert the error code to ASCII and display the error message.
  1028                                  ;
  1029                                  .70                     push    ax                                              ;save error code
  1030                                                          mov     al,ah                                           ;copy error code
  1031                                                          mov     ah,0                                            ;AX = error code
  1032                                                          mov     dl,10h                                          ;hexadecimal divisor
  1033                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1034                                                          or      ax,03030h                                       ;add ASCII zone digits
  1035                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1036                                                          jb      .80                                             ;yes, continue
  1037                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1038                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1039                                                          jb      .90                                             ;yes, continue
  1040                                                          add     al,7                                            ;no, make ASCII
  1041                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1042                                                          call    BootPrint                                       ;write error message
  1043                                                          pop     ax                                              ;restore error code
  1044                                  ;
  1045                                  ;       Display the completion message.
  1046                                  ;
  1047                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1048                                                          mov     al,ah                                           ;BIOS return code
  1049                                                          cmp     al,0                                            ;success?
  1050                                                          je      .110                                            ;yes, continue
  1051                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1052                                                          cmp     al,1                                            ;disk parameter error?
  1053                                                          je      .110                                            ;yes, continue
  1054                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1055                                                          cmp     al,2                                            ;address mark not found?
  1056                                                          je      .110                                            ;yes, continue
  1057                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1058                                                          cmp     al,3                                            ;protected disk?
  1059                                                          je      .110                                            ;yes, continue
  1060                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1061                                                          cmp     al,6                                            ;diskette removed?
  1062                                                          je      .110                                            ;yes, continue
  1063                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1064                                                          cmp     al,80H                                          ;drive timed out?
  1065                                                          je      .110                                            ;yes, continue
  1066                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1067                                  .110                    call    BootPrint                                       ;display result message
  1068                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1069                                                          int     021h                                            ;terminate DOS program
  1070                                                          ret                                                     ;return (should not execute)
  1071                                  ;-----------------------------------------------------------------------------------------------------------------------
  1072                                  ;
  1073                                  ;       Diskette Preparation Messages
  1074                                  ;
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1077                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1078                                                          db      13,10
  1079                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1080                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1081                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1082                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1083                                                          db      13,10,0
  1084                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1085                                                          db      13,10,0
  1086                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1087                                                          db      13,10,0
  1088                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1089                                                          db      13,10,0
  1090                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1091                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1092                                                          db      13,10,0
  1093                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1094                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1095                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1096                                                          db      13,10,"and retry."
  1097                                                          db      13,10,0
  1098                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1099                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1100                                                          db      13,10,"using another diskette."
  1101                                                          db      13,10,0
  1102                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1103                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1104                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1105                                                          db      13,10,0
  1106                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1107                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1108                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1109                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1110                                                          db      13,10,"is properly inserted in the diskette drive."
  1111                                                          db      13,10,0
  1112                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1113                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1114                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1115                                                          db      13,10,0
  1116                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1117                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1118                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1119                                                          db      13,10,0
  1120                                  wcPrepInBuf             equ     $
  1121                                  %endif
  1122                                  %ifdef BUILDDISK
  1123                                  ;=======================================================================================================================
  1124                                  ;
  1125                                  ;       File Allocation Tables
  1126                                  ;
  1127                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1128                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1129                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1130                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1131                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1132                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1133                                  ;       the last cluster in the chain.
  1134                                  ;
  1135                                  ;       Every three bytes encode two FAT entries as follows:
  1136                                  ;
  1137                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1138                                  ;
  1139                                  ;=======================================================================================================================
  1140                                  ;-----------------------------------------------------------------------------------------------------------------------
  1141                                  ;
  1142                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1143                                  ;
  1144                                  ;-----------------------------------------------------------------------------------------------------------------------
  1145                                  section                 fat1                                                    ;first copy of FAT
  1146 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1147 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1148 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1149 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1150 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1151 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1152 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1153 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1154 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1155 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1156 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1157 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1158                                  ;-----------------------------------------------------------------------------------------------------------------------
  1159                                  ;
  1160                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1161                                  ;
  1162                                  ;-----------------------------------------------------------------------------------------------------------------------
  1163                                  section                 fat2                                                    ;second copy of FAT
  1164 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1165 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1166 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1167 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1168 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1169 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1170 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1171 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1172 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1173 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1174 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1175 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1176                                  ;-----------------------------------------------------------------------------------------------------------------------
  1177                                  ;
  1178                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1179                                  ;
  1180                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1181                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1182                                  ;       copy.
  1183                                  ;
  1184                                  ;-----------------------------------------------------------------------------------------------------------------------
  1185                                  section                 dir                                                     ;diskette directory
  1186 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1186 00000009 4F4D               
  1187 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1188 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1189 00000016 0000                                            dw      0h                                              ;time
  1190 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1191 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1192 0000001A 0200                                            dw      2                                               ;first cluster
  1193 0000001C 00540000                                        dd      05400h                                          ;file size
  1194 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1195                                  %endif
  1196                                  %ifdef BUILDCOM
  1197                                  ;=======================================================================================================================
  1198                                  ;
  1199                                  ;       OS.COM
  1200                                  ;
  1201                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1202                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1203                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1204                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1205                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1206                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1207                                  ;
  1208                                  ;       Our loader addressability is set up according to the following diagram.
  1209                                  ;
  1210                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1211                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1212                                  ;                               |  256 = 100h bytes                             |
  1213                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1214                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1215                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1216                                  ;                       007e00  +-----------------------------------------------+
  1217                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1218                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1219                                  ;                               |                                               |
  1220                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1221                                  ;                               |                                               |
  1222                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1223                                  ;                               |  Loader Code                                  |
  1224                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1225                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1226                                  ;
  1227                                  ;=======================================================================================================================
  1228                                  ;-----------------------------------------------------------------------------------------------------------------------
  1229                                  ;
  1230                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1231                                  ;
  1232                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1233                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1234                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1235                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1236                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1237                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1238                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1239                                  ;       registers.
  1240                                  ;
  1241                                  ;-----------------------------------------------------------------------------------------------------------------------
  1242                                                          cpu     8086                                            ;assume minimal CPU
  1243                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1244                                                          bits    16                                              ;this is 16-bit code
  1245 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1246 00000001 1F                                              pop     ds                                              ;...as our data segment
  1247 00000002 0E                                              push    cs                                              ;use the code segment
  1248 00000003 07                                              pop     es                                              ;...as our extra segment
  1249                                  ;
  1250                                  ;       Write a message to the console so we know we have our addressability established.
  1251                                  ;
  1252 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1253 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1254                                  ;
  1255                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1256                                  ;
  1257 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1258 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1259 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1260 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1261                                                          cpu     386                                             ;allow 80386 instructions
  1262 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1263 00000017 E89600                                          call    PutTTYString                                    ;display message
  1264                                  ;
  1265                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1266                                  ;
  1267 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1268 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1269 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1270 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1271 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1272 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1273 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1274 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1275 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1276 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1277                                  ;
  1278                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1279                                  ;
  1280 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1281 00000038 07                                              pop     es                                              ;... as target segment
  1282 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1283 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1284 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1285 00000041 FC                                              cld                                                     ;forward strings
  1286 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1287 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1288 00000047 E86600                                          call    PutTTYString                                    ;display message
  1289                                  ;
  1290                                  ;       Switch to protected mode.
  1291                                  ;
  1292 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1293 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1294 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1295 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1296 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1297 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1298 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1299 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1300 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1301 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1302 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1303                                  ;
  1304                                  ;       Enable hardware and maskable interrupts.
  1305                                  ;
  1306 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1307 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1308 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1309 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1310                                  ;
  1311                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1312                                  ;
  1313 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1314 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1315 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                  ;
  1318                                  ;       Routine:        LoaderExit
  1319                                  ;
  1320                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1321                                  ;
  1322                                  ;       In:             DS:SI   string address
  1323                                  ;
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1326                                  ;
  1327                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1328                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1329                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1330                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1331                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1332                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1333                                  ;
  1334 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1335 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1336 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1337 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1338 00000085 F4                                              hlt                                                     ;wait for interrupt
  1339 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1340                                  ;
  1341                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1342                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1343                                  ;       HLT until the system resets.
  1344                                  ;
  1345 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1346 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1347 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1348 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1349 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1350                                  ;-----------------------------------------------------------------------------------------------------------------------
  1351                                  ;
  1352                                  ;       Routine:        GetCPUType
  1353                                  ;
  1354                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1355                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1356                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1357                                  ;
  1358                                  ;       Out:            AX      0 = 808x, v20, etc.
  1359                                  ;                               1 = 80186
  1360                                  ;                               2 = 80286
  1361                                  ;                               3 = 80386
  1362                                  ;
  1363                                  ;-----------------------------------------------------------------------------------------------------------------------
  1364 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1365 00000092 B120                                            mov     cl,32                                           ;shift count
  1366 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1367 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1368 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1369                                                          cpu     186
  1370 0000009A 54                                              push    sp                                              ;save stack pointer
  1371 0000009B 59                                              pop     cx                                              ;...into cx
  1372 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1373 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1374                                                          cpu     286
  1375 000000A0 40                                              inc     ax                                              ;AX = 2
  1376 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1377 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1378 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1379 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1380 000000AE 40                                              inc     ax                                              ;AX = 3
  1381 000000AF C3                      .10                     ret                                                     ;return
  1382                                  ;-----------------------------------------------------------------------------------------------------------------------
  1383                                  ;
  1384                                  ;       Routine:        PutTTYString
  1385                                  ;
  1386                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1387                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1388                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1389                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1390                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1391                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1392                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1393                                  ;                       to LODSB is not needed.
  1394                                  ;
  1395                                  ;       In:             DS:SI   address of string
  1396                                  ;
  1397                                  ;       Out:            DF      0
  1398                                  ;                       ZF      1
  1399                                  ;                       AL      0
  1400                                  ;
  1401                                  ;-----------------------------------------------------------------------------------------------------------------------
  1402 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1403 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1404 000000B2 84C0                                            test    al,al                                           ;end of string?
  1405 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1406 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1407 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1408 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1409 000000BC C3                      .20                     ret                                                     ;return
  1410                                  ;-----------------------------------------------------------------------------------------------------------------------
  1411                                  ;
  1412                                  ;       Loader Data
  1413                                  ;
  1414                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1415                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1416                                  ;
  1417                                  ;-----------------------------------------------------------------------------------------------------------------------
  1418 000000BD 90                                              align   2
  1419 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1420 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1421 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1422 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1423 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1423 000000D1 74696E672073797374-
  1423 000000DA 656D20726571756972-
  1423 000000E3 657320616E20693338-
  1423 000000EC 36206F72206C617465-
  1423 000000F5 722070726F63657373-
  1423 000000FE 6F722E0D0A         
  1424 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1424 0000010C 65737320616E79206B-
  1424 00000115 657920746F20726573-
  1424 0000011E 746172742074686520-
  1424 00000127 636F6D70757465722E-
  1424 00000130 0D0A00             
  1425 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1426 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1426 00000145 7265640D0A00       
  1427 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1427 00000154 616465640D0A00     
  1428 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1428 00000164 4F530D0A00         
  1429 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1430                                  ;=======================================================================================================================
  1431                                  ;
  1432                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1433                                  ;
  1434                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1435                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1436                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1437                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1438                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1439                                  ;
  1440                                  ;=======================================================================================================================
  1441                                  ;=======================================================================================================================
  1442                                  ;
  1443                                  ;       Kernel Tables
  1444                                  ;
  1445                                  ;=======================================================================================================================
  1446                                  ;-----------------------------------------------------------------------------------------------------------------------
  1447                                  ;
  1448                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1449                                  ;
  1450                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1451                                  ;       first descriptor must be all nulls.
  1452                                  ;
  1453                                  ;       6   5         4         3         2         1         0
  1454                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1455                                  ;       ----------------------------------------------------------------
  1456                                  ;       h......hffffmmmma......ab......................bn..............n
  1457                                  ;
  1458                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1459                                  ;               ffff                                                            flags
  1460                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1461                                  ;                       a......a                                                access
  1462                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1463                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1464                                  ;
  1465                                  ;       00000000                                                                all areas have base addresses below 2^24
  1466                                  ;               0...                                                            single-byte size granularity
  1467                                  ;               1...                                                            4-kilobyte size granularity
  1468                                  ;               .0..                                                            16-bit default for code segments
  1469                                  ;               .1..                                                            32-bit default for code segments
  1470                                  ;               ..0.                                                            intel-reserved; should be zero
  1471                                  ;               ...0                                                            available for operating system use
  1472                                  ;                   0000                                                        segment is less than 2^16 in size
  1473                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1474                                  ;                       1.......                                                segment is present in memory
  1475                                  ;                       .00.....                                                segment is of privilege level 0
  1476                                  ;                       ...0....                                                segment is of system or gate type
  1477                                  ;                       ...00010                                                local decriptor table (LDT)
  1478                                  ;                       ...01001                                                task state segment (TSS) available
  1479                                  ;                       ...01011                                                task state segment (TSS) busy
  1480                                  ;                       ...10...                                                data segment
  1481                                  ;                       ...10011                                                writable data (accessed)
  1482                                  ;                       ...11...                                                code segment
  1483                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1484                                  ;
  1485                                  ;-----------------------------------------------------------------------------------------------------------------------
  1486                                  section                 gdt                                                     ;global descriptor table
  1487 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1488 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1489 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1490 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1491 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1492 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1493 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1494 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1495 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1496 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1497 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1498 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1499 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1500 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1501 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1502                                  ;-----------------------------------------------------------------------------------------------------------------------
  1503                                  ;
  1504                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1505                                  ;
  1506                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1507                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1508                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1509                                  ;
  1510                                  ;       6   5         4         3         2         1         0
  1511                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1512                                  ;       ----------------------------------------------------------------
  1513                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1514                                  ;
  1515                                  ;       h...h   high-order offset (bits 16-31)
  1516                                  ;       P       present (0=unused interrupt)
  1517                                  ;       zz      descriptor privilege level
  1518                                  ;       S       storage segment (must be zero for IDT)
  1519                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1520                                  ;       S...S   handling code selector in GDT
  1521                                  ;       l...l   lo-order offset (bits 0-15)
  1522                                  ;
  1523                                  ;-----------------------------------------------------------------------------------------------------------------------
  1524                                  section                 idt                                                     ;interrupt descriptor table
  1525                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1525                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1525 00000000 00004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1526                                                          mtrap   singlestep                                      ;01 single step
  1526                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1526 00000008 02004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1527                                                          mtrap   nmi                                             ;02 non-maskable
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 00000010 04004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mtrap   break                                           ;03 break
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 00000018 06004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529                                                          mtrap   into                                            ;04 into
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 00000020 08004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mtrap   bounds                                          ;05 bounds
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 00000028 0A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mtrap   badopcode                                       ;06 bad op code
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 00000030 0C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 00000038 0E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mtrap   doublefault                                     ;08 double-fault
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 00000040 10004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mtrap   operand                                         ;09 operand
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 00000048 12004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mtrap   badtss                                          ;0a bad TSS
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000050 14004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mtrap   notpresent                                      ;0b not-present
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000058 16004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mtrap   stacklimit                                      ;0c stack limit
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000060 18004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mtrap   protection                                      ;0d general protection fault
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000068 1A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mtrap   int14                                           ;0e (reserved)
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000070 1C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mtrap   int15                                           ;0f (reserved)
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000078 1E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mtrap   coproccalc                                      ;10 (reserved)
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000080 20004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mtrap   int17                                           ;11 (reserved)
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000088 22004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mtrap   int18                                           ;12 (reserved)
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000090 24004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mtrap   int19                                           ;13 (reserved)
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000098 26004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mtrap   int20                                           ;14 (reserved)
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 000000A0 28004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mtrap   int21                                           ;15 (reserved)
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 000000A8 2A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mtrap   int22                                           ;16 (reserved)
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 000000B0 2C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mtrap   int23                                           ;17 (reserved)
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 000000B8 2E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mtrap   int24                                           ;18 (reserved)
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 000000C0 30004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mtrap   int25                                           ;19 (reserved)
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 000000C8 32004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mtrap   int26                                           ;1a (reserved)
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 000000D0 34004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mtrap   int27                                           ;1b (reserved)
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 000000D8 36004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mtrap   int28                                           ;1c (reserved)
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 000000E0 38004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mtrap   int29                                           ;1d (reserved)
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 000000E8 3A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mtrap   int30                                           ;1e (reserved)
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 000000F0 3C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mtrap   int31                                           ;1f (reserved)
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 000000F8 3E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 00000100 41004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 00000108 92004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000110 EE034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    com2                                            ;23 IRQ3 com2
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000118 F1034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mint    com1                                            ;24 IRQ4 com1
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000120 F4034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000128 F7034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mint    diskette                                        ;26 IRQ6 diskette
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000130 FA034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000138 14044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000140 17044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000148 1A044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mint    irq10                                           ;2a IRQA (reserved)
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000150 1D044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mint    irq11                                           ;2b IRQB (reserved)
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000158 20044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000160 23044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000168 26044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 00000170 29044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mint    irq15                                           ;2f IRQF (reserved)
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 00000178 2C044800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mtrap   svc                                             ;30 OS services
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 00000180 3E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1575                                  ;=======================================================================================================================
  1576                                  ;
  1577                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1578                                  ;
  1579                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1580                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1581                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1582                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1583                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1584                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1585                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1586                                  ;
  1587                                  ;=======================================================================================================================
  1588                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1589                                                          cpu     386                                             ;allow 80386 instructions
  1590                                                          bits    32                                              ;this is 32-bit code
  1591                                  ;=======================================================================================================================
  1592                                  ;
  1593                                  ;       CPU Interrupt Handlers
  1594                                  ;
  1595                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1596                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1597                                  ;
  1598                                  ;=======================================================================================================================
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  ;
  1601                                  ;       INT0    Divide By Zero
  1602                                  ;
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                                          menter  dividebyzero                                    ;divide by zero
  1604                              <1> ?%1 equ ($-$$)
  1605 00000000 EB3E                                            jmp     ReportInterrupt                                 ;report interrupt
  1606                                  ;-----------------------------------------------------------------------------------------------------------------------
  1607                                  ;
  1608                                  ;       INT1    Single Step
  1609                                  ;
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                                          menter  singlestep                                      ;single step
  1611                              <1> ?%1 equ ($-$$)
  1612 00000002 EB3C                                            jmp     ReportInterrupt                                 ;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;       INT2    Non-Maskable Interrupt
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                                          menter  nmi                                             ;non-maskable
  1618                              <1> ?%1 equ ($-$$)
  1619 00000004 EB3A                                            jmp     ReportInterrupt                                 ;report interrupt
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;
  1622                                  ;       INT3    Break
  1623                                  ;
  1624                                  ;-----------------------------------------------------------------------------------------------------------------------
  1625                                                          menter  break                                           ;break
  1625                              <1> ?%1 equ ($-$$)
  1626 00000006 EB38                                            jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT4    Into
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  into                                            ;into
  1632                              <1> ?%1 equ ($-$$)
  1633 00000008 EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT5    Bounds
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  bounds                                          ;bounds
  1639                              <1> ?%1 equ ($-$$)
  1640 0000000A EB34                                            jmp     ReportInterrupt                                 ;report interrupt
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  ;
  1643                                  ;       INT6    Bad Operation Code
  1644                                  ;
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                                          menter  badopcode                                       ;bad opcode interrupt
  1646                              <1> ?%1 equ ($-$$)
  1647 0000000C EB32                                            jmp     ReportInterrupt                                 ;report interrupt
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                  ;
  1650                                  ;       INT7    No Coprocessor
  1651                                  ;
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1653                              <1> ?%1 equ ($-$$)
  1654 0000000E EB30                                            jmp     ReportInterrupt                                 ;report interrupt
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                  ;
  1657                                  ;       INT8    Double Fault
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                                          menter  doublefault                                     ;doublefault interrupt
  1660                              <1> ?%1 equ ($-$$)
  1661 00000010 EB2E                                            jmp     ReportInterrupt                                 ;report interrupt
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  ;
  1664                                  ;       INT9    Operand
  1665                                  ;
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                                          menter  operand                                         ;operand interrupt
  1667                              <1> ?%1 equ ($-$$)
  1668 00000012 EB2C                                            jmp     ReportInterrupt                                 ;report interrupt
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  ;
  1671                                  ;       INT10   Bad Task State Segment
  1672                                  ;
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                                          menter  badtss                                          ;bad TSS interrupt
  1674                              <1> ?%1 equ ($-$$)
  1675 00000014 EB2A                                            jmp     ReportInterrupt                                 ;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       INT11   Not Present
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                                          menter  notpresent                                      ;not present interrupt
  1681                              <1> ?%1 equ ($-$$)
  1682 00000016 EB28                                            jmp     ReportInterrupt                                 ;report interrupt
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                  ;
  1685                                  ;       INT12   Stack Limit
  1686                                  ;
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                                          menter  stacklimit                                      ;stack limit interrupt
  1688                              <1> ?%1 equ ($-$$)
  1689 00000018 EB26                                            jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT13   General Protection Fault
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  protection                                      ;protection fault interrupt
  1695                              <1> ?%1 equ ($-$$)
  1696 0000001A EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT14   Reserved
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  int14                                           ;(reserved)
  1702                              <1> ?%1 equ ($-$$)
  1703 0000001C EB22                                            jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT15   Reserved
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  int15                                           ;(reserved)
  1709                              <1> ?%1 equ ($-$$)
  1710 0000001E EB20                                            jmp     ReportInterrupt                                 ;report interrupt
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                  ;
  1713                                  ;       INT16   Coprocessor Calculation
  1714                                  ;
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                                          menter  coproccalc                                      ;coprocessor calculation
  1716                              <1> ?%1 equ ($-$$)
  1717 00000020 EB1E                                            jmp     ReportInterrupt                                 ;report interrupt
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  ;
  1720                                  ;       INT17   Reserved
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                                          menter  int17                                           ;(reserved)
  1723                              <1> ?%1 equ ($-$$)
  1724 00000022 EB1C                                            jmp     ReportInterrupt                                 ;report interrupt
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  ;
  1727                                  ;       INT18   Reserved
  1728                                  ;
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                                          menter  int18                                           ;(reserved)
  1730                              <1> ?%1 equ ($-$$)
  1731 00000024 EB1A                                            jmp     ReportInterrupt                                 ;report interrupt
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;       INT19   Reserved
  1735                                  ;
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                                          menter  int19                                           ;(reserved)
  1737                              <1> ?%1 equ ($-$$)
  1738 00000026 EB18                                            jmp     ReportInterrupt                                 ;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;       INT20   Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                                          menter  int20                                           ;(reserved)
  1744                              <1> ?%1 equ ($-$$)
  1745 00000028 EB16                                            jmp     ReportInterrupt                                 ;report interrupt
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                  ;
  1748                                  ;       INT21   Reserved
  1749                                  ;
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                                          menter  int21                                           ;(reserved)
  1751                              <1> ?%1 equ ($-$$)
  1752 0000002A EB14                                            jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT22   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int22                                           ;(reserved)
  1758                              <1> ?%1 equ ($-$$)
  1759 0000002C EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT23   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int23                                           ;(reserved)
  1765                              <1> ?%1 equ ($-$$)
  1766 0000002E EB10                                            jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT24   Reserved
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  int24                                           ;(reserved)
  1772                              <1> ?%1 equ ($-$$)
  1773 00000030 EB0E                                            jmp     ReportInterrupt                                 ;report interrupt
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                  ;
  1776                                  ;       INT25   Reserved
  1777                                  ;
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                                          menter  int25                                           ;(reserved)
  1779                              <1> ?%1 equ ($-$$)
  1780 00000032 EB0C                                            jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT26   Reserved
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  int26                                           ;(reserved)
  1786                              <1> ?%1 equ ($-$$)
  1787 00000034 EB0A                                            jmp     ReportInterrupt                                 ;report interrupt
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                  ;
  1790                                  ;       INT27   Reserved
  1791                                  ;
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                                          menter  int27                                           ;(reserved)
  1793                              <1> ?%1 equ ($-$$)
  1794 00000036 EB08                                            jmp     ReportInterrupt                                 ;report interrupt
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;       INT28   Reserved
  1798                                  ;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                                          menter  int28                                           ;(reserved)
  1800                              <1> ?%1 equ ($-$$)
  1801 00000038 EB06                                            jmp     ReportInterrupt                                 ;report interrupt
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ;
  1804                                  ;       INT29   Reserved
  1805                                  ;
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                                          menter  int29                                           ;(reserved)
  1807                              <1> ?%1 equ ($-$$)
  1808 0000003A EB04                                            jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT30   Reserved
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  int30                                           ;(reserved)
  1814                              <1> ?%1 equ ($-$$)
  1815 0000003C EB02                                            jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT31   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int31                                           ;(reserved)
  1821                              <1> ?%1 equ ($-$$)
  1822 0000003E EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       Routine:        ReportInterrupt
  1826                                  ;
  1827                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1828                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831 00000040 CF                      ReportInterrupt         iretd                                                   ;return
  1832                                  ;=======================================================================================================================
  1833                                  ;
  1834                                  ;       Hardware Device Interupts
  1835                                  ;
  1836                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1837                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1838                                  ;       (BX=2028h).
  1839                                  ;
  1840                                  ;=======================================================================================================================
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       IRQ0    Clock Tick Interrupt
  1844                                  ;
  1845                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1846                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1847                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1848                                  ;
  1849                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1850                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1851                                  ;
  1852                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1853                                  ;       zero, the floppy disk motors are turned off.
  1854                                  ;
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                                          menter  clocktick                                       ;clock tick interrupt
  1856                              <1> ?%1 equ ($-$$)
  1857 00000041 50                                              push    eax                                             ;save non-volatile regs
  1858 00000042 52                                              push    edx                                             ;
  1859 00000043 1E                                              push    ds                                              ;
  1860                                  ;
  1861                                  ;       End the interrupt.
  1862                                  ;
  1863 00000044 E883060000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1864                                  ;
  1865                                  ;       Update the clock tick count and the elapsed days as needed.
  1866                                  ;
  1867 00000049 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1868 0000004B 1F                                              pop     ds                                              ;... into data segment register
  1869 0000004C A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1870 00000051 40                                              inc     eax                                             ;increment clock ticks
  1871 00000052 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1872 00000057 7208                                            jb      irq0.10                                         ;no, skip ahead
  1873 00000059 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1874 0000005F 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1875 00000061 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1876                                  ;
  1877                                  ;       Decrement floppy disk motor timeout.
  1878                                  ;
  1879 00000066 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1880 0000006D 741E                                            je      irq0.20                                         ;yes, skip ahead
  1881 0000006F FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1882 00000075 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1883                                  ;
  1884                                  ;       Turn off the floppy disk motor if appropriate.
  1885                                  ;
  1886 00000077 FB                                              sti                                                     ;enable maskable interrupts
  1887 00000078 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1888 0000007A B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1889 0000007C EC                                              in      al,dx                                           ;FDC main status byte
  1890 0000007D A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1891 0000007F 75F7                                            jnz     irq0.15                                         ;wait while busy
  1892 00000081 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1893 00000083 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1894 00000088 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1895 0000008A B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1896 0000008C EE                                              out     dx,al                                           ;turn motor off
  1897                                  ;
  1898                                  ;       Enable maskable interrupts.
  1899                                  ;
  1900 0000008D FB                      irq0.20                 sti                                                     ;enable maskable interrupts
  1901                                  ;
  1902                                  ;       Restore and return.
  1903                                  ;
  1904 0000008E 1F                                              pop     ds                                              ;restore modified regs
  1905 0000008F 5A                                              pop     edx                                             ;
  1906 00000090 58                                              pop     eax                                             ;
  1907 00000091 CF                                              iretd                                                   ;return
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  ;
  1910                                  ;       IRQ1    Keyboard Interrupt
  1911                                  ;
  1912                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1913                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1914                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1915                                  ;       ALL modified registers upon return.
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                                          menter  keyboard                                        ;keyboard interrrupt
  1918                              <1> ?%1 equ ($-$$)
  1919 00000092 50                                              push    eax                                             ;save non-volatile regs
  1920 00000093 53                                              push    ebx                                             ;
  1921 00000094 51                                              push    ecx                                             ;
  1922 00000095 56                                              push    esi                                             ;
  1923 00000096 1E                                              push    ds                                              ;
  1924                                  ;
  1925                                  ;       End the interrupt.
  1926                                  ;
  1927 00000097 E830060000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1928                                  ;
  1929                                  ;       Handle keyboard scan-codes.
  1930                                  ;
  1931 0000009C 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1932 0000009E 1F                                              pop     ds                                              ;... into data segment register
  1933 0000009F 30C0                                            xor     al,al                                           ;zero
  1934 000000A1 A261080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  1935 000000A6 A262080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  1936 000000AB A263080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  1937 000000B0 A264080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  1938 000000B5 A265080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  1939 000000BA A266080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  1940 000000BF B020                                            mov     al,' '                                          ;space
  1941 000000C1 A267080000                                      mov     [wbConsoleChar],al                              ;set character to space
  1942 000000C6 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1943 000000C8 F6D0                                            not     al                                              ;controller timeout mask
  1944 000000CA 200560080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1945 000000D0 8A1D5E080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  1946 000000D6 8A3D5F080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  1947 000000DC E824060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1948 000000E1 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  1949 000000E7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  1950 000000E9 A261080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  1951 000000EE 88C4                                            mov     ah,al                                           ;copy scan code 0
  1952 000000F0 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1953 000000F2 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1954 000000F5 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  1955 000000FB 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1956 000000FE 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  1957 00000104 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1958 00000106 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1959 00000109 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  1960 0000010F 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1961 00000112 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  1962 00000118 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  1963 0000011A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1964 0000011D 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  1965 00000123 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1966 00000126 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  1967 0000012C B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  1968 0000012E 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1969 00000131 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  1970 00000137 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1971 0000013A 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  1972 00000140 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  1973 00000142 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  1974 00000145 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1975 0000014B B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  1976 0000014D 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  1977 00000150 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1978 00000156 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  1979 00000158 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  1980 0000015B 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1981 00000161 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  1982 00000164 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  1983 0000016A E896050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1984 0000016F 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  1985 00000175 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  1986 00000177 A262080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  1987 0000017C 88C4                                            mov     ah,al                                           ;copy scan code 1
  1988 0000017E B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  1989 00000180 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1990 00000183 7456                                            je      irq1.30                                         ;yes, set flag
  1991 00000185 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1992 00000188 7455                                            je      irq1.40                                         ;yes, reset flag
  1993 0000018A B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  1994 0000018C 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1995 0000018F 744A                                            je      irq1.30                                         ;yes, set flag
  1996 00000191 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1997 00000194 7449                                            je      irq1.40                                         ;yes, reset flag
  1998 00000196 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  1999 00000199 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2000 0000019F 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2001 000001A2 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2002 000001A8 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2003 000001AB 7405                                            je      irq1.10                                         ;yes, continue
  2004 000001AD 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2005 000001B0 7524                                            jne     irq1.20                                         ;no, skip ahead
  2006 000001B2 E84E050000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2007 000001B7 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2008 000001BD E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2009 000001BF A263080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2010 000001C4 E83C050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2011 000001C9 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2012 000001CF E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2013 000001D1 A264080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2014 000001D6 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2015 000001DB 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2016 000001DD EB0D                                            jmp     irq1.60                                         ;skip ahead
  2017 000001DF F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2018 000001E1 20C3                                            and     bl,al                                           ;reset shift flag
  2019 000001E3 EB07                                            jmp     irq1.60                                         ;skip ahead
  2020 000001E5 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2021 000001E7 E8EA040000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2022 000001EC 881D5E080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2023 000001F2 883D5F080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2024 000001F8 E895030000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2025 000001FD E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2026 00000202 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2027 00000205 7563                                            jne     irq1.80                                         ;no continue
  2028 00000207 E8F9040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2029 0000020C 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2030 00000212 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2031 00000214 A262080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2032 00000219 88C4                                            mov     ah,al                                           ;copy scan code 1
  2033 0000021B 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2034 0000021E 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2035 00000224 E8DC040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2036 00000229 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2037 0000022F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2038 00000231 A263080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2039 00000236 E8CA040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2040 0000023B 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2041 00000241 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2042 00000243 A264080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2043 00000248 E8B8040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2044 0000024D 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2045 00000253 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2046 00000255 A265080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2047 0000025A E8A6040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2048 0000025F 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2049 00000261 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2050 00000263 A266080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2051 00000268 EB78                                            jmp     irq1.150                                        ;continue
  2052 0000026A 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2053 0000026C F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2054 0000026F 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2055 00000271 BE[EE020000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2056 00000276 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2057 00000279 7405                                            jz      irq1.90                                         ;no, skip ahead
  2058 0000027B BE[6E030000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2059 00000280 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2060 00000283 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2061 00000287 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2062 0000028A 7411                                            jz      irq1.100                                        ;no skip ahead
  2063 0000028C 88C1                                            mov     cl,al                                           ;copy ASCII code
  2064 0000028E 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2065 00000291 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2066 00000294 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2067 00000296 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2068 00000299 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2069 0000029B 3420                                            xor     al,EASCIICASE                                   ;switch case
  2070 0000029D A267080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2071 000002A2 BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2072 000002A7 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2073 000002AA 7405                                            jz      irq1.120                                        ;no, skip ahead
  2074 000002AC BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2075 000002B1 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2076 000002B6 09C2                                            or      edx,eax                                         ;msg id and codes
  2077 000002B8 31C9                                            xor     ecx,ecx                                         ;null param
  2078 000002BA 50                                              push    eax                                             ;save codes
  2079 000002BB E8A4030000                                      call    PutMessage                                      ;put message to console
  2080 000002C0 58                                              pop     eax                                             ;restore codes
  2081 000002C1 84C0                                            test    al,al                                           ;ASCII translation?
  2082 000002C3 7413                                            jz      irq1.130                                        ;no, skip ahead
  2083 000002C5 BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2084 000002CA 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2085 000002CF 09C2                                            or      edx,eax                                         ;msg id and codes
  2086 000002D1 31C9                                            xor     ecx,ecx                                         ;null param
  2087 000002D3 E88C030000                                      call    PutMessage                                      ;put message to console
  2088 000002D8 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2089 000002DA B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2090 000002DC 080560080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2091 000002E2 E853020000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2092                                  ;
  2093                                  ;       Enable maskable interrupts.
  2094                                  ;
  2095 000002E7 FB                                              sti                                                     ;enable maskable interrupts
  2096                                  ;
  2097                                  ;       Restore and return.
  2098                                  ;
  2099 000002E8 1F                                              pop     ds                                              ;restore non-volatile regs
  2100 000002E9 5E                                              pop     esi                                             ;
  2101 000002EA 59                                              pop     ecx                                             ;
  2102 000002EB 5B                                              pop     ebx                                             ;
  2103 000002EC 58                                              pop     eax                                             ;
  2104 000002ED CF                                              iretd                                                   ;return
  2105                                  ;-----------------------------------------------------------------------------------------------------------------------
  2106                                  ;       Scan-Code to ASCII Translation Tables
  2107                                  ;-----------------------------------------------------------------------------------------------------------------------
  2108 000002EE 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2109 000002F6 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2110 000002FE 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2111 00000306 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2112 0000030E 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2113 00000316 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2114 0000031E 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2115 00000326 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2116 0000032E 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2117 00000336 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2118 0000033E 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2119 00000346 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2120 0000034E 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2121 00000356 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2122 0000035E 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2123 00000366 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2124 0000036E 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2125 00000376 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2126 0000037E 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2127 00000386 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2128 0000038E 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2129 00000396 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2130 0000039E 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2131 000003A6 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2132 000003AE 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2133 000003B6 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2134 000003BE 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2135 000003C6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2136 000003CE 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2137 000003D6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2138 000003DE 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2139 000003E6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2140                                  ;-----------------------------------------------------------------------------------------------------------------------
  2141                                  ;
  2142                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2143                                  ;
  2144                                  ;-----------------------------------------------------------------------------------------------------------------------
  2145                                                          menter  iochannel                                       ;secondary 8259A cascade
  2145                              <1> ?%1 equ ($-$$)
  2146 000003EE 50                                              push    eax                                             ;save modified regs
  2147 000003EF EB45                                            jmp     hwint                                           ;end interrupt and return
  2148                                  ;-----------------------------------------------------------------------------------------------------------------------
  2149                                  ;
  2150                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2151                                  ;
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153                                                          menter  com2                                            ;serial port 2 interrupt
  2153                              <1> ?%1 equ ($-$$)
  2154 000003F1 50                                              push    eax                                             ;save modified regs
  2155 000003F2 EB42                                            jmp     hwint                                           ;end interrupt and return
  2156                                  ;-----------------------------------------------------------------------------------------------------------------------
  2157                                  ;
  2158                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2159                                  ;
  2160                                  ;-----------------------------------------------------------------------------------------------------------------------
  2161                                                          menter  com1                                            ;serial port 1 interrupt
  2161                              <1> ?%1 equ ($-$$)
  2162 000003F4 50                                              push    eax                                             ;save modified regs
  2163 000003F5 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                  ;
  2166                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2167                                  ;
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2169                              <1> ?%1 equ ($-$$)
  2170 000003F7 50                                              push    eax                                             ;save modified regs
  2171 000003F8 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2172                                  ;-----------------------------------------------------------------------------------------------------------------------
  2173                                  ;
  2174                                  ;       IRQ6    Diskette Hardware Interrupt
  2175                                  ;
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                                          menter  diskette                                        ;floppy disk interrupt
  2177                              <1> ?%1 equ ($-$$)
  2178 000003FA 50                                              push    eax                                             ;save non-volatile regs
  2179 000003FB 1E                                              push    ds                                              ;
  2180 000003FC E8CB020000                                      call    PutPrimaryEndOfInt                              ;end the interrupt
  2181 00000401 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2182 00000403 1F                                              pop     ds                                              ;... into DS register
  2183 00000404 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2184 00000409 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2185 0000040B A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2186 00000410 FB                                              sti                                                     ;enable maskable interrupts
  2187 00000411 1F                                              pop     ds                                              ;restore non-volatile regs
  2188 00000412 58                                              pop     eax                                             ;
  2189 00000413 CF                                              iretd                                                   ;return from interrupt
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                  ;
  2192                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2193                                  ;
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2195                              <1> ?%1 equ ($-$$)
  2196 00000414 50                                              push    eax                                             ;save modified regs
  2197 00000415 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                  ;
  2200                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2201                                  ;
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                                          menter  rtclock                                         ;real-time clock interrupt
  2203                              <1> ?%1 equ ($-$$)
  2204 00000417 50                                              push    eax                                             ;save modified regs
  2205 00000418 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                  ;
  2208                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2209                                  ;
  2210                                  ;-----------------------------------------------------------------------------------------------------------------------
  2211                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2211                              <1> ?%1 equ ($-$$)
  2212 0000041A 50                                              push    eax                                             ;save modified regs
  2213 0000041B EB12                                            jmp     hwwint                                          ;end interrupt and return
  2214                                  ;-----------------------------------------------------------------------------------------------------------------------
  2215                                  ;
  2216                                  ;       IRQ10   Reserved Hardware Interrupt
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                                          menter  irq10                                           ;reserved
  2219                              <1> ?%1 equ ($-$$)
  2220 0000041D 50                                              push    eax                                             ;save modified regs
  2221 0000041E EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                  ;
  2224                                  ;       IRQ11   Reserved Hardware Interrupt
  2225                                  ;
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                                          menter  irq11                                           ;reserved
  2227                              <1> ?%1 equ ($-$$)
  2228 00000420 50                                              push    eax                                             ;save modified regs
  2229 00000421 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;
  2232                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2233                                  ;
  2234                                  ;-----------------------------------------------------------------------------------------------------------------------
  2235                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2235                              <1> ?%1 equ ($-$$)
  2236 00000423 50                                              push    eax                                             ;save modified regs
  2237 00000424 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2238                                  ;-----------------------------------------------------------------------------------------------------------------------
  2239                                  ;
  2240                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2241                                  ;
  2242                                  ;-----------------------------------------------------------------------------------------------------------------------
  2243                                                          menter  coprocessor                                     ;coprocessor interrupt
  2243                              <1> ?%1 equ ($-$$)
  2244 00000426 50                                              push    eax                                             ;save modified regs
  2245 00000427 EB06                                            jmp     hwwint                                          ;end interrupt and return
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  ;
  2248                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2249                                  ;
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2251                              <1> ?%1 equ ($-$$)
  2252 00000429 50                                              push    eax                                             ;save modified regs
  2253 0000042A EB03                                            jmp     hwwint                                          ;end interrupt and return
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                  ;
  2256                                  ;       IRQ15   Reserved Hardware Interrupt
  2257                                  ;
  2258                                  ;-----------------------------------------------------------------------------------------------------------------------
  2259                                                          menter  irq15                                           ;reserved
  2259                              <1> ?%1 equ ($-$$)
  2260 0000042C 50                                              push    eax                                             ;save modified regs
  2261 0000042D EB00                                            jmp     hwwint                                          ;end interrupt and return
  2262                                  ;-----------------------------------------------------------------------------------------------------------------------
  2263                                  ;
  2264                                  ;       Exit from hardware interrupt
  2265                                  ;
  2266                                  ;-----------------------------------------------------------------------------------------------------------------------
  2267 0000042F E89D020000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2268 00000434 EB05                                            jmp     hwint90                                         ;skip ahead
  2269 00000436 E891020000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2270 0000043B FB                      hwint90                 sti                                                     ;enable maskable interrupts
  2271 0000043C 58                                              pop     eax                                             ;restore modified regs
  2272 0000043D CF                                              iretd                                                   ;return from interrupt
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  ;
  2275                                  ;       INT 30h Operating System Software Service Interrupt
  2276                                  ;
  2277                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2278                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2279                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2280                                  ;       the entry address of the specific function from a table.
  2281                                  ;
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283                                                          menter  svc
  2283                              <1> ?%1 equ ($-$$)
  2284 0000043E 3C02                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2285 00000440 730D                                            jae     svc90                                           ;yes, skip ahead
  2286 00000442 0FB6C0                                          movzx   eax,al                                          ;function
  2287 00000445 C1E002                                          shl     eax,2                                           ;offset into table
  2288 00000448 2EFF90[50040000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2289 0000044F CF                      svc90                   iretd                                                   ;return from interrupt
  2290                                  ;-----------------------------------------------------------------------------------------------------------------------
  2291                                  ;
  2292                                  ;       Service Request Table
  2293                                  ;
  2294                                  ;
  2295                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2296                                  ;
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                  tsvc                    tsvce   GetConsoleString                                ;get string input
  2298                              <1> tsvc :
  2298                              <1> e%1 equ ($-tsvc)/4
  2298 00000450 [7A040000]          <1>  dd %1
  2299                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2299                              <1> e%1 equ ($-tsvc)/4
  2299 00000454 [A2060000]          <1>  dd %1
  2300                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                  ;
  2303                                  ;       Service Request Macros
  2304                                  ;
  2305                                  ;       These macros provide positional parameterization of service request calls.
  2306                                  ;
  2307                                  ;-----------------------------------------------------------------------------------------------------------------------
  2308                                  %macro                  getConsoleString 0
  2309                                                          mov     al,eGetConsoleString                            ;function code
  2310                                                          int     _svc                                            ;invoke OS service
  2311                                  %endmacro
  2312                                  %macro                  placeCursor 0
  2313                                                          mov     al,ePlaceCursor                                 ;function code
  2314                                                          int     _svc                                            ;invoke OS service
  2315                                  %endmacro
  2316                                  ;=======================================================================================================================
  2317                                  ;
  2318                                  ;       Kernel Function Library
  2319                                  ;
  2320                                  ;=======================================================================================================================
  2321                                  ;=======================================================================================================================
  2322                                  ;
  2323                                  ;       Console Helper Routines
  2324                                  ;
  2325                                  ;       GetConsoleChar
  2326                                  ;       GetConsoleString
  2327                                  ;       NextConsoleColumn
  2328                                  ;       PreviousConsoleColumn
  2329                                  ;       PutConsoleChar
  2330                                  ;       PutConsoleHexByte
  2331                                  ;       PutConsoleOIAChar
  2332                                  ;       PutConsoleOIAShift
  2333                                  ;       Yield
  2334                                  ;
  2335                                  ;=======================================================================================================================
  2336                                  ;-----------------------------------------------------------------------------------------------------------------------
  2337                                  ;
  2338                                  ;       Routine:        GetConsoleChar
  2339                                  ;
  2340                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2341                                  ;
  2342                                  ;       Out:            AL      ASCII character code
  2343                                  ;                       AH      keyboard scan code
  2344                                  ;
  2345                                  ;-----------------------------------------------------------------------------------------------------------------------
  2346 00000458 E8CF010000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2347 0000045D E8CD010000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2348 00000462 09C0                                            or      eax,eax                                         ;do we have a message?
  2349 00000464 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2350 00000466 50                                              push    eax                                             ;save key codes
  2351 00000467 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2352 0000046C 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2353 00000471 58                                              pop     eax                                             ;restore key codes
  2354 00000472 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2355 00000474 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2356 00000479 C3                                              ret                                                     ;return
  2357                                  ;-----------------------------------------------------------------------------------------------------------------------
  2358                                  ;
  2359                                  ;       Routine:        GetConsoleString
  2360                                  ;
  2361                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2362                                  ;
  2363                                  ;       In:             DS:EDX  target buffer address
  2364                                  ;                       ECX     maximum number of characters to accept
  2365                                  ;                       BH      echo to terminal
  2366                                  ;                       BL      terminating character
  2367                                  ;
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369 0000047A 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2370 0000047B 56                                              push    esi                                             ;
  2371 0000047C 57                                              push    edi                                             ;
  2372 0000047D 06                                              push    es                                              ;
  2373 0000047E 1E                                              push    ds                                              ;load data segment selector ...
  2374 0000047F 07                                              pop     es                                              ;... into extra segment register
  2375 00000480 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2376 00000482 51                                              push    ecx                                             ;save maximum characters
  2377 00000483 30C0                                            xor     al,al                                           ;zero register
  2378 00000485 FC                                              cld                                                     ;forward strings
  2379 00000486 F3AA                                            rep     stosb                                           ;zero fill buffer
  2380 00000488 59                                              pop     ecx                                             ;maximum characters
  2381 00000489 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2382 0000048B 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2383 0000048D E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2384 0000048F E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2385 00000494 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2386 00000496 7445                                            je      .50                                             ;yes, exit
  2387 00000498 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2388 0000049A 7521                                            jne     .30                                             ;no, skip ahead
  2389 0000049C 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2390 0000049E 74EF                                            je      .20                                             ;yes, get next character
  2391 000004A0 4F                                              dec     edi                                             ;backup target pointer
  2392 000004A1 C60700                                          mov     byte [edi],0                                    ;zero previous character
  2393 000004A4 41                                              inc     ecx                                             ;increment remaining chars
  2394 000004A5 F6C701                                          test    bh,1                                            ;echo to console?
  2395 000004A8 74E5                                            jz      .20                                             ;no, get next character
  2396 000004AA E847000000                                      call    PreviousConsoleColumn                           ;backup console position
  2397 000004AF B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2398 000004B1 E851000000                                      call    PutConsoleChar                                  ;write space to console
  2399 000004B6 E8E7010000                                      call    PlaceCursor                                     ;position the cursor
  2400 000004BB EBD2                                            jmp     .20                                             ;get next character
  2401 000004BD 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2402 000004BF 72CE                                            jb      .20                                             ;no, get another character
  2403 000004C1 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2404 000004C3 77CA                                            ja      .20                                             ;no, get another character
  2405 000004C5 AA                                              stosb                                                   ;store character in buffer
  2406 000004C6 F6C701                                          test    bh,1                                            ;echo to console?
  2407 000004C9 740F                                            jz      .40                                             ;no, skip ahead
  2408 000004CB E837000000                                      call    PutConsoleChar                                  ;write character to console
  2409 000004D0 E810000000                                      call    NextConsoleColumn                               ;advance console position
  2410 000004D5 E8C8010000                                      call    PlaceCursor                                     ;position the cursor
  2411 000004DA 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2412 000004DB EBB0                                            jmp     .10                                             ;next
  2413 000004DD 30C0                    .50                     xor     al,al                                           ;null
  2414 000004DF AA                                              stosb                                                   ;terminate buffer
  2415 000004E0 07                                              pop     es                                              ;restore non-volatile regs
  2416 000004E1 5F                                              pop     edi                                             ;
  2417 000004E2 5E                                              pop     esi                                             ;
  2418 000004E3 59                                              pop     ecx                                             ;
  2419 000004E4 C3                                              ret                                                     ;return
  2420                                  ;-----------------------------------------------------------------------------------------------------------------------
  2421                                  ;
  2422                                  ;       Routine:        NextConsoleColumn
  2423                                  ;
  2424                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2425                                  ;                       incremented if the end of the current row is reached.
  2426                                  ;
  2427                                  ;       In:             DS      OS data selector
  2428                                  ;
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430 000004E5 A05C080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2431 000004EA 3C4F                                            cmp     al,ECONCOLS-1                                   ;end of row?
  2432 000004EC 7307                                            jnb     .10
  2433 000004EE FEC0                                            inc     al
  2434 000004F0 A25C080000                                      mov     [wbConsoleColumn],al
  2435 000004F5 C3                      .10                     ret                                                     ;return
  2436                                  ;-----------------------------------------------------------------------------------------------------------------------
  2437                                  ;
  2438                                  ;       Routine:        PreviousConsoleColumn
  2439                                  ;
  2440                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2441                                  ;                       the column is set to the last position in the row and the row is decremented.
  2442                                  ;
  2443                                  ;       In:             DS      OS data selector
  2444                                  ;
  2445                                  ;-----------------------------------------------------------------------------------------------------------------------
  2446 000004F6 A05C080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2447 000004FB 08C0                                            or      al,al                                           ;start of row?
  2448 000004FD 7407                                            jz      .10
  2449 000004FF FEC8                                            dec     al
  2450 00000501 A25C080000                                      mov     [wbConsoleColumn],al
  2451 00000506 C3                      .10                     ret                                                     ;return
  2452                                  ;-----------------------------------------------------------------------------------------------------------------------
  2453                                  ;
  2454                                  ;       Routine:        PutConsoleChar
  2455                                  ;
  2456                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2457                                  ;
  2458                                  ;       In:             AL      ASCII character
  2459                                  ;                       DS      OS data selector
  2460                                  ;
  2461                                  ;-----------------------------------------------------------------------------------------------------------------------
  2462 00000507 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2463 00000508 06                                              push    es                                              ;
  2464 00000509 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2465 0000050B 07                                              pop     es                                              ;... into extra segment reg
  2466 0000050C 8A0D5C080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2467 00000512 8A2D5D080000                                    mov     ch,[wbConsoleRow]                               ;row
  2468 00000518 E86F010000                                      call    SetConsoleChar                                  ;put character at row, column
  2469 0000051D 07                                              pop     es                                              ;restore non-volatile regs
  2470 0000051E 59                                              pop     ecx                                             ;
  2471 0000051F C3                                              ret                                                     ;return
  2472                                  ;-----------------------------------------------------------------------------------------------------------------------
  2473                                  ;
  2474                                  ;       Routine:        PutConsoleHexByte
  2475                                  ;
  2476                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2477                                  ;
  2478                                  ;       In:             AL      byte value
  2479                                  ;                       CL      column
  2480                                  ;                       CH      row
  2481                                  ;                       DS      OS data selector
  2482                                  ;                       ES      CGA selector
  2483                                  ;
  2484                                  ;-----------------------------------------------------------------------------------------------------------------------
  2485 00000520 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2486 00000521 C0E804                                          shr     al,4                                            ;hi-order nybble
  2487 00000524 E803000000                                      call    .10                                             ;make ASCII and store
  2488 00000529 58                                              pop     eax                                             ;byte value
  2489 0000052A 240F                                            and     al,0Fh                                          ;lo-order nybble
  2490 0000052C 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  2491 0000052E 3C3A                                            cmp     al,03Ah                                         ;numeric?
  2492 00000530 7202                                            jb      .20                                             ;yes, skip ahead
  2493 00000532 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2494 00000534 E853010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2495 00000539 C3                                              ret                                                     ;return
  2496                                  ;-----------------------------------------------------------------------------------------------------------------------
  2497                                  ;
  2498                                  ;       Routine:        PutConsoleOIAChar
  2499                                  ;
  2500                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2501                                  ;
  2502                                  ;       In:             DS      OS data selector
  2503                                  ;
  2504                                  ;-----------------------------------------------------------------------------------------------------------------------
  2505 0000053A 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2506 0000053B 51                                              push    ecx                                             ;
  2507 0000053C 56                                              push    esi                                             ;
  2508 0000053D 1E                                              push    ds                                              ;
  2509 0000053E 06                                              push    es                                              ;
  2510 0000053F 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2511 00000541 1F                                              pop     ds                                              ;... into data segment register
  2512 00000542 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2513 00000544 07                                              pop     es                                              ;... into extra segment register
  2514 00000545 BE61080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2515 0000054A B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2516 0000054C B300                                            mov     bl,0                                            ;starting column
  2517 0000054E B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2518 00000553 51                      .10                     push    ecx                                             ;save remaining count
  2519 00000554 89D9                                            mov     ecx,ebx                                         ;row, column
  2520 00000556 AC                                              lodsb                                                   ;read scan code
  2521 00000557 08C0                                            or      al,al                                           ;scan code present?
  2522 00000559 7407                                            jz      .20                                             ;no, skip ahead
  2523 0000055B E8C0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2524 00000560 EB0E                                            jmp     .30                                             ;continue
  2525 00000562 B020                    .20                     mov     al,' '                                          ;ASCII space
  2526 00000564 E823010000                                      call    SetConsoleChar                                  ;display space
  2527 00000569 B020                                            mov     al,' '                                          ;ASCII space
  2528 0000056B E81C010000                                      call    SetConsoleChar                                  ;display space
  2529 00000570 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2530 00000573 59                                              pop     ecx                                             ;restore remaining
  2531 00000574 E2DD                                            loop    .10                                             ;next code
  2532 00000576 A067080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2533 0000057B 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2534 0000057D 720D                                            jb      .40                                             ;no, skip ahead
  2535 0000057F 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2536 00000581 7709                                            ja      .40                                             ;no, skip ahead
  2537 00000583 88FD                                            mov     ch,bh                                           ;OIA row
  2538 00000585 B128                                            mov     cl,40                                           ;character display column
  2539 00000587 E800010000                                      call    SetConsoleChar                                  ;display ASCII character
  2540 0000058C 07                      .40                     pop     es                                              ;restore non-volatile regs
  2541 0000058D 1F                                              pop     ds                                              ;
  2542 0000058E 5E                                              pop     esi                                             ;
  2543 0000058F 59                                              pop     ecx                                             ;
  2544 00000590 5B                                              pop     ebx                                             ;
  2545 00000591 C3                                              ret                                                     ;return
  2546                                  ;-----------------------------------------------------------------------------------------------------------------------
  2547                                  ;
  2548                                  ;       Routine:        PutConsoleOIAShift
  2549                                  ;
  2550                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2551                                  ;
  2552                                  ;       In:             BL      shift flags
  2553                                  ;                       BH      lock flags
  2554                                  ;                       DS      OS data selector
  2555                                  ;
  2556                                  ;-----------------------------------------------------------------------------------------------------------------------
  2557 00000592 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2558 00000593 06                                              push    es                                              ;
  2559 00000594 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2560 00000596 07                                              pop     es                                              ;... into ES register
  2561 00000597 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2562 00000599 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2563 0000059B F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2564 0000059E 7402                                            jz      .10                                             ;no, skip ahead
  2565 000005A0 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2566 000005A2 B10E                    .10                     mov     cl,14                                           ;indicator column
  2567 000005A4 E8E3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2568 000005A9 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2569 000005AB F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2570 000005AE 7402                                            jz      .20                                             ;no, skip ahead
  2571 000005B0 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2572 000005B2 B140                    .20                     mov     cl,64                                           ;indicator column
  2573 000005B4 E8D3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2574 000005B9 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2575 000005BB F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2576 000005BE 7402                                            jz      .30                                             ;no, skip ahead
  2577 000005C0 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2578 000005C2 B10F                    .30                     mov     cl,15                                           ;indicator column
  2579 000005C4 E8C3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2580 000005C9 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2581 000005CB F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2582 000005CE 7402                                            jz      .40                                             ;no, skip ahead
  2583 000005D0 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2584 000005D2 B13F                    .40                     mov     cl,63                                           ;indicator column
  2585 000005D4 E8B3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2586 000005D9 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2587 000005DB F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2588 000005DE 7402                                            jz      .50                                             ;no, skip ahead
  2589 000005E0 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2590 000005E2 B110                    .50                     mov     cl,16                                           ;indicator column
  2591 000005E4 E8A3000000                                      call    SetConsoleChar                                  ;display ASCII character
  2592 000005E9 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2593 000005EB F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2594 000005EE 7402                                            jz      .60                                             ;no, skip ahead
  2595 000005F0 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2596 000005F2 B13E                    .60                     mov     cl,62                                           ;indicator column
  2597 000005F4 E893000000                                      call    SetConsoleChar                                  ;display ASCII character
  2598 000005F9 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2599 000005FB F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2600 000005FE 7402                                            jz      .70                                             ;no, skip ahead
  2601 00000600 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2602 00000602 B14E                    .70                     mov     cl,78                                           ;indicator column
  2603 00000604 E883000000                                      call    SetConsoleChar                                  ;display ASCII character
  2604 00000609 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2605 0000060B F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2606 0000060E 7402                                            jz      .80                                             ;no, skip ahead
  2607 00000610 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2608 00000612 B14D                    .80                     mov     cl,77                                           ;indicator column
  2609 00000614 E873000000                                      call    SetConsoleChar                                  ;display ASCII character
  2610 00000619 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2611 0000061B F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2612 0000061E 7402                                            jz      .90                                             ;no, skip ahead
  2613 00000620 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2614 00000622 B14C                    .90                     mov     cl,76                                           ;indicator column
  2615 00000624 E863000000                                      call    SetConsoleChar                                  ;display ASCII character
  2616 00000629 07                                              pop     es                                              ;restore non-volatile regs
  2617 0000062A 59                                              pop     ecx                                             ;
  2618 0000062B C3                                              ret                                                     ;return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       Routine:        Yield
  2622                                  ;
  2623                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2624                                  ;
  2625                                  ;-----------------------------------------------------------------------------------------------------------------------
  2626 0000062C FB                      Yield                   sti                                                     ;enable maskagle interrupts
  2627 0000062D F4                                              hlt                                                     ;halt until external interrupt
  2628 0000062E C3                                              ret                                                     ;return
  2629                                  ;=======================================================================================================================
  2630                                  ;
  2631                                  ;       Message Queue Helper Routines
  2632                                  ;
  2633                                  ;       GetMessage
  2634                                  ;       PutMessage
  2635                                  ;
  2636                                  ;=======================================================================================================================
  2637                                  ;-----------------------------------------------------------------------------------------------------------------------
  2638                                  ;
  2639                                  ;       Routine:        GetMessage
  2640                                  ;
  2641                                  ;       Description:    This routine reads and removes a message from the message queue.
  2642                                  ;
  2643                                  ;       Out:            EAX     lo-order message data
  2644                                  ;                       EDX     hi-order message data
  2645                                  ;
  2646                                  ;                       CY      0 = message read
  2647                                  ;                               1 = no message to read
  2648                                  ;
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650 0000062F 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  2651 00000630 51                                              push    ecx                                             ;
  2652 00000631 1E                                              push    ds                                              ;
  2653 00000632 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  2654 00000634 1F                                              pop     ds                                              ;... into data segment register
  2655 00000635 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  2656 0000063B 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  2657 0000063D 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2658 00000640 09D0                                            or      eax,edx                                         ;is queue empty?
  2659 00000642 F9                                              stc                                                     ;assume queue is emtpy
  2660 00000643 741B                                            jz      .20                                             ;yes, skip ahead
  2661 00000645 31C9                                            xor     ecx,ecx                                         ;store zero
  2662 00000647 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  2663 00000649 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2664 0000064C 83C308                                          add     ebx,8                                           ;next queue element
  2665 0000064F 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  2666 00000655 7502                                            jnz     .10                                             ;no, skip ahead
  2667 00000657 B308                                            mov     bl,8                                            ;reset to 1st entry
  2668 00000659 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2669 0000065F F8                                              clc                                                     ;indicate message read
  2670 00000660 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2671 00000661 59                                              pop     ecx                                             ;
  2672 00000662 5B                                              pop     ebx                                             ;
  2673 00000663 C3                                              ret                                                     ;return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       Routine:        PutMessage
  2677                                  ;
  2678                                  ;       Description:    This routine adda a message to the message queue.
  2679                                  ;
  2680                                  ;       In:             ECX     hi-order data word
  2681                                  ;                       EDX     lo-order data word
  2682                                  ;
  2683                                  ;       Out:            CY      0 = success
  2684                                  ;                               1 = fail: queue is full
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687 00000664 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  2688 00000665 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  2689 00000667 1F                                              pop     ds                                              ;... into data segment register
  2690 00000668 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  2691 0000066D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  2692 00000670 F9                                              stc                                                     ;assume failure
  2693 00000671 7517                                            jne     .20                                             ;yes, cannot store
  2694 00000673 8910                                            mov     [eax],edx                                       ;store lo-order data
  2695 00000675 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  2696 00000678 83C008                                          add     eax,8                                           ;next queue element adr
  2697 0000067B 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  2698 00000680 7502                                            jnz     .10                                             ;no, skip ahead
  2699 00000682 B008                                            mov     al,8                                            ;reset to top of queue
  2700 00000684 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2701 00000689 F8                                              clc                                                     ;indicate success
  2702 0000068A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  2703 0000068B C3                                              ret                                                     ;return
  2704                                  ;=======================================================================================================================
  2705                                  ;
  2706                                  ;       Memory-Mapped Video Routines
  2707                                  ;
  2708                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2709                                  ;
  2710                                  ;       SetConsoleChar
  2711                                  ;
  2712                                  ;=======================================================================================================================
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                  ;
  2715                                  ;       Routine:        SetConsoleChar
  2716                                  ;
  2717                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2718                                  ;
  2719                                  ;       In:             AL      ASCII character
  2720                                  ;                       CL      column
  2721                                  ;                       CH      row
  2722                                  ;                       ES      CGA selector
  2723                                  ;
  2724                                  ;       Out:            EAX     last target address written (ES:)
  2725                                  ;                       CL      column + 1
  2726                                  ;
  2727                                  ;-----------------------------------------------------------------------------------------------------------------------
  2728 0000068C 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  2729 0000068E 0FB6C5                                          movzx   eax,ch                                          ;row
  2730 00000691 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  2731 00000693 F6E4                                            mul     ah                                              ;row * cols/row
  2732 00000695 00C8                                            add     al,cl                                           ;add column
  2733 00000697 80D400                                          adc     ah,0                                            ;handle carry
  2734 0000069A D1E0                                            shl     eax,1                                           ;screen offset
  2735 0000069C 268810                                          mov     [es:eax],dl                                     ;store character
  2736 0000069F FEC1                                            inc     cl                                              ;next column
  2737 000006A1 C3                                              ret                                                     ;return
  2738                                  ;=======================================================================================================================
  2739                                  ;
  2740                                  ;       Input/Output Routines
  2741                                  ;
  2742                                  ;       These routines read and/or write directly to ports.
  2743                                  ;
  2744                                  ;       PlaceCursor
  2745                                  ;       PutPrimaryEndOfInt
  2746                                  ;       PutSecondaryEndOfInt
  2747                                  ;       SetKeyboardLamps
  2748                                  ;       WaitForKeyInBuffer
  2749                                  ;       WaitForKeyOutBuffer
  2750                                  ;
  2751                                  ;=======================================================================================================================
  2752                                  ;-----------------------------------------------------------------------------------------------------------------------
  2753                                  ;
  2754                                  ;       Routine:        PlaceCursor
  2755                                  ;
  2756                                  ;       Description:    This routine positions the cursor on the console.
  2757                                  ;
  2758                                  ;       In:             DS      OS data selector
  2759                                  ;
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761 000006A2 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2762 000006A3 A05D080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2763 000006A8 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2764 000006AA F6E4                                            mul     ah                                              ;row offset
  2765 000006AC 02055C080000                                    add     al,[wbConsoleColumn]                            ;add column
  2766 000006B2 80D400                                          adc     ah,0                                            ;add overflow
  2767 000006B5 89C1                                            mov     ecx,eax                                         ;screen offset
  2768 000006B7 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2769 000006B9 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2770 000006BB B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2771 000006BD EE                                              out     dx,al                                           ;select register
  2772 000006BE 42                                              inc     edx                                             ;data port
  2773 000006BF 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2774 000006C1 EE                                              out     dx,al                                           ;store hi-order loc
  2775 000006C2 4A                                              dec     edx                                             ;register select port
  2776 000006C3 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2777 000006C5 EE                                              out     dx,al                                           ;select register
  2778 000006C6 42                                              inc     edx                                             ;data port
  2779 000006C7 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2780 000006C9 EE                                              out     dx,al                                           ;store lo-order loc
  2781 000006CA 59                                              pop     ecx                                             ;restore non-volatile regs
  2782 000006CB C3                                              ret                                                     ;return
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                  ;
  2785                                  ;       Routine:        PutPrimaryEndOfInt
  2786                                  ;
  2787                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2788                                  ;
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790 000006CC B020                    PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2791 000006CE E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2792 000006D0 C3                                              ret                                                     ;return
  2793                                  ;-----------------------------------------------------------------------------------------------------------------------
  2794                                  ;
  2795                                  ;       Routine:        PutSecondaryEndOfInt
  2796                                  ;
  2797                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800 000006D1 B020                    PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2801 000006D3 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2802 000006D5 C3                                              ret                                                     ;return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;       Routine:        SetKeyboardLamps
  2806                                  ;
  2807                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2808                                  ;
  2809                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2810                                  ;
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812 000006D6 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2813 000006DB B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2814 000006DD E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  2815 000006DF E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2816 000006E4 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2817 000006E6 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2818 000006EB 88F8                                            mov     al,bh                                           ;set/reset lamps value
  2819 000006ED E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  2820 000006EF E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2821 000006F4 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2822 000006F6 C3                                              ret                                                     ;return
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                  ;
  2825                                  ;       Routine:        WaitForKeyInBuffer
  2826                                  ;
  2827                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2828                                  ;
  2829                                  ;       Out:            ZF      1 = Input buffer ready
  2830                                  ;                               0 = Input buffer not ready after timeout
  2831                                  ;
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833 000006F7 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2834 000006F8 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2835 000006FD E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2836 000006FF A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  2837 00000701 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  2838 00000703 59                                              pop     ecx                                             ;restore non-volatile regs
  2839 00000704 C3                                              ret                                                     ;return
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;       Routine:        WaitForKeyOutBuffer
  2843                                  ;
  2844                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2845                                  ;
  2846                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2847                                  ;                               0 = Output buffer empty after timeout
  2848                                  ;
  2849                                  ;-----------------------------------------------------------------------------------------------------------------------
  2850 00000705 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2851 00000706 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2852 0000070B E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2853 0000070D A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  2854 0000070F E1FA                                            loopz   .10                                             ;loop until output buffer bit
  2855 00000711 59                                              pop     ecx                                             ;restore non-volatile regs
  2856 00000712 C3                                              ret                                                     ;return
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  ;
  2859                                  ;       End of the Kernel Function Library
  2860                                  ;
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862 00000713 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2863                                  ;=======================================================================================================================
  2864                                  ;
  2865                                  ;       Console Task
  2866                                  ;
  2867                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2868                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2869                                  ;       screen and responds to user commands.
  2870                                  ;
  2871                                  ;=======================================================================================================================
  2872                                  ;-----------------------------------------------------------------------------------------------------------------------
  2873                                  ;
  2874                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2875                                  ;
  2876                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2877                                  ;
  2878                                  ;-----------------------------------------------------------------------------------------------------------------------
  2879                                  section                 constack                                                ;console task stack
  2880 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  ;
  2883                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2884                                  ;
  2885                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2886                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2887                                  ;       16 descriptors. Six are initially defined.
  2888                                  ;
  2889                                  ;-----------------------------------------------------------------------------------------------------------------------
  2890                                  section                 conldt                                                  ;console local descriptors
  2891 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2892 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2893 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2894 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2895 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  2896 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  2897 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  ;
  2900                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2901                                  ;
  2902                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2903                                  ;       segment. CS to console code.
  2904                                  ;
  2905                                  ;-----------------------------------------------------------------------------------------------------------------------
  2906                                  section                 contss                                                  ;console task state segment
  2907 00000000 00000000                                        dd      0                                               ;00 back-link tss
  2908 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  2909 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  2910 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  2911 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  2912 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  2913 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  2914 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  2915 00000020 00000000                                        dd      0                                               ;20 eip
  2916 00000024 00020000                                        dd      0200h                                           ;24 eflags
  2917 00000028 00000000                                        dd      0                                               ;28 eax
  2918 0000002C 00000000                                        dd      0                                               ;2c ecx
  2919 00000030 00000000                                        dd      0                                               ;30 edx
  2920 00000034 00000000                                        dd      0                                               ;34 ebx
  2921 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  2922 0000003C 00000000                                        dd      0                                               ;3c ebp
  2923 00000040 00000000                                        dd      0                                               ;40 esi
  2924 00000044 00000000                                        dd      0                                               ;44 edi
  2925 00000048 1C000000                                        dd      001Ch                                           ;48 es
  2926 0000004C 24000000                                        dd      0024h                                           ;4c cs
  2927 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  2928 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  2929 00000058 00000000                                        dd      0                                               ;58 fs
  2930 0000005C 00000000                                        dd      0                                               ;5c gs
  2931 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2932 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2933                                  ;-----------------------------------------------------------------------------------------------------------------------
  2934                                  ;
  2935                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2936                                  ;
  2937                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2938                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2939                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2940                                  ;       event.
  2941                                  ;
  2942                                  ;-----------------------------------------------------------------------------------------------------------------------
  2943                                  section                 conmque                                                 ;console message queue
  2944 00000000 08000000                                        dd      8                                               ;head pointer
  2945 00000004 08000000                                        dd      8                                               ;tail pointer
  2946 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  2947                                  ;-----------------------------------------------------------------------------------------------------------------------
  2948                                  ;
  2949                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2950                                  ;
  2951                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2952                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2953                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2954                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2955                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2956                                  ;       board input, echoing to the console screen and responding to user commands.
  2957                                  ;
  2958                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2959                                  ;
  2960                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2961                                  ;                               |  Real Mode Interrupt Vectors                  |
  2962                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2963                                  ;                               |  Reserved BIOS Memory Area                    |
  2964                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2965                                  ;                               |  Shared Kernel Memory Area                    |
  2966                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2967                                  ;                               |  Global Descriptor Table (GDT)                |
  2968                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2969                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2970                                  ;                       002000  +-----------------------------------------------+
  2971                                  ;                               |  Interrupt Handlers                           |
  2972                                  ;                               |  Kernel Function Library                      |
  2973                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2974                                  ;                               |  Console Task Stack Area                      |
  2975                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2976                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2977                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2978                                  ;                               |  Console Task Task State Segment (TSS)        |
  2979                                  ;                       004800  +-----------------------------------------------+
  2980                                  ;                               |  Console Task Message Queue                   |
  2981                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2982                                  ;                               |  Console Task Code                            |
  2983                                  ;                               |  Console Task Constants                       |
  2984                                  ;                       006000  +===============================================+
  2985                                  ;
  2986                                  ;-----------------------------------------------------------------------------------------------------------------------
  2987                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2988                                  ;
  2989                                  ;       Initialize console work areas to low values.
  2990                                  ;
  2991 00000000 BF00080000              ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  2992 00000005 30C0                                            xor     al,al                                           ;initialization value
  2993 00000007 B968000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  2994 0000000C FC                                              cld                                                     ;forward strings
  2995 0000000D F3AA                                            rep     stosb                                           ;initialize data
  2996                                  ;
  2997                                  ;       Initialize the active panel variables.
  2998                                  ;
  2999 0000000F B8[F5000000]                                    mov     eax,czPnlCon001                                 ;initial console panel
  3000 00000014 A300080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  3001                                  ;
  3002                                  ;       Address the console screen memory.
  3003                                  ;
  3004 00000019 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  3005 0000001B 07                                              pop     es                                              ;...into extra segment reg
  3006                                  ;
  3007                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  3008                                  ;
  3009 0000001C BF000F0000                                      mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  3010 00000021 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3011 00000026 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3012 0000002B F3AB                                            rep     stosd                                           ;reset OIA
  3013                                  ;
  3014                                  ;       Clear the console rows. (This is done after every attention key).
  3015                                  ;
  3016 0000002D 31FF                    .20                     xor     edi,edi                                         ;target offset
  3017 0000002F B9C0030000                                      mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  3018 00000034 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initialization value
  3019 00000039 F3AB                                            rep     stosd                                           ;reset screen body
  3020                                  ;
  3021                                  ;       Reset the input field input address, row and column.
  3022                                  ;
  3023 0000003B 31C0                                            xor     eax,eax                                         ;zero register
  3024 0000003D A304080000                                      mov     [wdConsoleField],eax                            ;zero field addr
  3025 00000042 A308080000                                      mov     [wdConsoleInput],eax                            ;zero input addr
  3026 00000047 A25D080000                                      mov     [wbConsoleRow],al                               ;zero console row
  3027 0000004C A25C080000                                      mov     [wbConsoleColumn],al                            ;zero console column
  3028                                  ;
  3029                                  ;       Load the field address from the pandel. Exit loop if address is null.
  3030                                  ;
  3031 00000051 8B1D00080000                                    mov     ebx,[wdConsolePanel]                            ;first field template addr
  3032 00000057 8B33                    .30                     mov     esi,[ebx]                                       ;field value addr
  3033 00000059 85F6                                            test    esi,esi                                         ;end of panel?
  3034 0000005B 746B                                            jz      .70                                             ;yes, exit loop
  3035                                  ;
  3036                                  ;       Load the field row, column, color and length.
  3037                                  ;
  3038 0000005D 8A6B04                                          mov     ch,[ebx+4]                                      ;row
  3039 00000060 8A4B05                                          mov     cl,[ebx+5]                                      ;column
  3040 00000063 8A7306                                          mov     dh,[ebx+6]                                      ;color
  3041 00000066 8A5307                                          mov     dl,[ebx+7]                                      ;length
  3042                                  ;
  3043                                  ;       Test the row high-bit for input field indication.
  3044                                  ;
  3045 00000069 F6C580                                          test    ch,080h                                         ;input field?
  3046 0000006C 7437                                            jz      .40                                             ;no, branch
  3047 0000006E 80E57F                                          and     ch,07Fh                                         ;clear input field indicator
  3048                                  ;
  3049                                  ;       Save the row and column if this is the first input field.
  3050                                  ;
  3051 00000071 A05D080000                                      mov     al,[wbConsoleRow]                               ;console row
  3052 00000076 0A055C080000                                    or      al,[wbConsoleColumn]                            ;already have an input field?
  3053 0000007C 7527                                            jnz     .40                                             ;yes, branch
  3054 0000007E 891D04080000                                    mov     [wdConsoleField],ebx                            ;save field template addr
  3055 00000084 893508080000                                    mov     [wdConsoleInput],esi                            ;update console input buffer
  3056 0000008A 882D5D080000                                    mov     [wbConsoleRow],ch                               ;update console row
  3057 00000090 880D5C080000                                    mov     [wbConsoleColumn],cl                            ;update console column
  3058                                  ;
  3059                                  ;       Clear input field contents.
  3060                                  ;
  3061 00000096 51                                              push    ecx                                             ;save row, col
  3062 00000097 06                                              push    es                                              ;save CGA segment
  3063 00000098 1E                                              push    ds                                              ;load OS data ...
  3064 00000099 07                                              pop     es                                              ;... into extra segment reg
  3065 0000009A 89F7                                            mov     edi,esi                                         ;target is field data addr
  3066 0000009C 30C0                                            xor     al,al                                           ;fill byte is NUL
  3067 0000009E 0FB6CA                                          movzx   ecx,dl                                          ;field length
  3068 000000A1 F3AA                                            rep     stosb                                           ;fill field with fill byte
  3069 000000A3 07                                              pop     es                                              ;restore CGA segment
  3070 000000A4 59                                              pop     ecx                                             ;restore row, col
  3071                                  ;
  3072                                  ;       Compute the target offset.
  3073                                  ;
  3074 000000A5 0FB6C5                  .40                     movzx   eax,ch                                          ;row
  3075 000000A8 B450                                            mov     ah,ECONCOLS                                     ;columns per row
  3076 000000AA F6E4                                            mul     ah                                              ;row offset
  3077 000000AC 00C8                                            add     al,cl                                           ;add column
  3078 000000AE 80D400                                          adc     ah,0                                            ;handle overflow
  3079 000000B1 D1E0                                            shl     eax,1                                           ;two-bytes per column
  3080 000000B3 89C7                                            mov     edi,eax                                         ;target offset
  3081                                  ;
  3082                                  ;       Display the field contents.
  3083                                  ;
  3084 000000B5 0FB6CA                                          movzx   ecx,dl                                          ;length
  3085 000000B8 88F4                                            mov     ah,dh                                           ;color
  3086 000000BA AC                      .50                     lodsb                                                   ;field character
  3087 000000BB 84C0                                            test    al,al                                           ;end of value?
  3088 000000BD 7404                                            jz      .60                                             ;yes, branch
  3089 000000BF 66AB                                            stosw                                                   ;store character and color
  3090 000000C1 E2F7                                            loop    .50                                             ;next character
  3091 000000C3 83C308                  .60                     add     ebx,8                                           ;next field addr
  3092 000000C6 EB8F                                            jmp     short .30                                       ;next field
  3093                                  ;
  3094                                  ;       Place the cursor at the input field.
  3095                                  ;
  3096 000000C8 8A255D080000            .70                     mov     ah,[wbConsoleRow]                               ;field row
  3097 000000CE A05C080000                                      mov     al,[wbConsoleColumn]                            ;field column
  3098                                                          placeCursor                                             ;position the cursor
  3098 000000D3 B001                <1>  mov al,ePlaceCursor
  3098 000000D5 CD30                <1>  int _svc
  3099                                  ;
  3100                                  ;       Get command.
  3101                                  ;
  3102 000000D7 8B3504080000                                    mov     esi,[wdConsoleField]                            ;input field template addr
  3103 000000DD 8B1508080000                                    mov     edx,[wdConsoleInput]                            ;target buffer addr
  3104 000000E3 31C9                                            xor     ecx,ecx                                         ;zero register
  3105 000000E5 8A4E07                                          mov     cl,[esi+7]                                      ;maximum chars to accept
  3106 000000E8 B701                                            mov     bh,1                                            ;echo to terminal
  3107 000000EA B30D                                            mov     bl,13                                           ;terminating character
  3108                                                          getConsoleString                                        ;accept keyboard input
  3108 000000EC B000                <1>  mov al,eGetConsoleString
  3108 000000EE CD30                <1>  int _svc
  3109                                  ;
  3110                                  ;       Refresh Panel.
  3111                                  ;
  3112 000000F0 E938FFFFFF              .80                      jmp     .20                                            ;refresh panel
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114                                  ;
  3115                                  ;       Constants
  3116                                  ;
  3117                                  ;-----------------------------------------------------------------------------------------------------------------------
  3118                                  ;-----------------------------------------------------------------------------------------------------------------------
  3119                                  ;
  3120                                  ;       Panels
  3121                                  ;
  3122                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  3123                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  3124                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  3125                                  ;
  3126                                  ;-----------------------------------------------------------------------------------------------------------------------
  3127 000000F5 [21010000]              czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  3128 000000F9 00000206                                        db      00,00,02h,06                                    ;flags+row, col, attr, length
  3129 000000FD [27010000]                                      dd      czFldTitleCon001
  3130 00000101 001E0714                                        db      00,30,07h,20
  3131 00000105 [3B010000]                                      dd      czFldDatTmCon001
  3132 00000109 003F0211                                        db      00,63,02h,17
  3133 0000010D [4C010000]                                      dd      czFldPrmptCon001
  3134 00000111 17000701                                        db      23,00,07h,01
  3135 00000115 0C080000                                        dd      wzConsoleInBuffer
  3136 00000119 9701074F                                        db      128+23,01,07h,79
  3137 0000011D 00000000                                        dd      0                                               ;end of panel
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;       Strings
  3141                                  ;
  3142                                  ;-----------------------------------------------------------------------------------------------------------------------
  3143 00000121 434F4E303031            czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  3144 00000127 437573746F6D4F5320-     czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  3144 00000130 56657273696F6E2031-
  3144 00000139 2E30               
  3145 0000013B 44442D4D4D4D2D5959-     czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  3145 00000144 59592048483A4D4D   
  3146 0000014C 3A                      czFldPrmptCon001        db      ":"                                             ;command prompt
  3147 0000014D 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  3148                                  %endif
  3149                                  %ifdef BUILDDISK
  3150                                  ;-----------------------------------------------------------------------------------------------------------------------
  3151                                  ;
  3152                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3153                                  ;
  3154                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3155                                  ;
  3156                                  ;-----------------------------------------------------------------------------------------------------------------------
  3157                                  section                 unused                                                  ;unused disk space
  3158 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3159                                  %endif
  3160                                  ;=======================================================================================================================
  3161                                  ;
  3162                                  ;       End of Program Code
  3163                                  ;
  3164                                  ;=======================================================================================================================
