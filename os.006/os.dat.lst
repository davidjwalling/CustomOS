     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.006
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;                       are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;                       console task.
    10                                  ;
    11                                  ;       Revised:        July 4, 2018
    12                                  ;
    13                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    19                                  ;
    20                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;=======================================================================================================================
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;       Assembly Directives
    26                                  ;
    27                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    36                                  %define BUILDBOOT                                                               ;... build the boot sector
    37                                  %define BUILDCOM                                                                ;... and the OS kernel
    38                                  %endif
    39                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    40                                  %define BUILDBOOT                                                               ;... also build the boot sector
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;       Conventions
    45                                  ;
    46                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    47                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    48                                  ;                       Assembly operands begin in column 33.
    49                                  ;                       Inline comments begin in column 81.
    50                                  ;                       Lines should not extend beyond column 120.
    51                                  ;
    52                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    53                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    54                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    55                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    56                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    57                                  ;                       ouput buffers, respectively.
    58                                  ;
    59                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    60                                  ;                       Negative relative call or jump addresses indicate reuse.
    61                                  ;
    62                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    63                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    64                                  ;                       Register names in comments are in upper case (EAX, EDI).
    65                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    66                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    67                                  ;                       register contents on entry and exit.
    68                                  ;
    69                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    70                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    71                                  ;                       The 2nd letter of the constant label indicates the storage type.
    72                                  ;
    73                                  ;                       cq......        constant quad-word (dq)
    74                                  ;                       cd......        constant double-word (dd)
    75                                  ;                       cw......        constant word (dw)
    76                                  ;                       cb......        constant byte (db)
    77                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    78                                  ;
    79                                  ;       Instructions:   32-bit instructions are generally favored.
    80                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    81                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    82                                  ;
    83                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    84                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    85                                  ;
    86                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    87                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    88                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    89                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    90                                  ;                       Octal literal values are avoided.
    91                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    92                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    93                                  ;
    94                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    95                                  ;                       Macro names describe an action and so DO begin with a verb.
    96                                  ;
    97                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    98                                  ;                       Buffers are kept to as small a size as practicable.
    99                                  ;                       Data and code intermingling is avoided wherever possible.
   100                                  ;
   101                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   102                                  ;                       Register names in source code are in lower case (eax, edx).
   103                                  ;
   104                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   105                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   106                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   107                                  ;
   108                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   109                                  ;                       Routine names begin with a verb (Get, Read, Load).
   110                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   111                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   112                                  ;                       function but begin with a leading underscore (_) character.
   113                                  ;
   114                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   115                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   116                                  ;
   117                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   118                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   119                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   120                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   121                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   122                                  ;
   123                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   124                                  ;                       The 2nd letter of the variable label indicates the storage type.
   125                                  ;
   126                                  ;                       wq......        variable quad-word (resq)
   127                                  ;                       wd......        variable double-word (resd)
   128                                  ;                       ww......        variable word (resw)
   129                                  ;                       wb......        variable byte (resb)
   130                                  ;                       ws......        writable structure
   131                                  ;
   132                                  ;-----------------------------------------------------------------------------------------------------------------------
   133                                  ;=======================================================================================================================
   134                                  ;
   135                                  ;       Equates
   136                                  ;
   137                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   138                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   139                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   140                                  ;       sets. Equates here are defined in the following groupings:
   141                                  ;
   142                                  ;       Hardware-Defined Values
   143                                  ;
   144                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   145                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   146                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   147                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   148                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   149                                  ;       EX86...         Intel x86 CPU architecture values
   150                                  ;
   151                                  ;       Firmware-Defined Values
   152                                  ;
   153                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   154                                  ;
   155                                  ;       Standards-Based Values
   156                                  ;
   157                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   158                                  ;
   159                                  ;       Operating System Values
   160                                  ;
   161                                  ;       EBOOT...        Boot sector and loader values
   162                                  ;       ECON...         Console values (dimensions and attributes)
   163                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   164                                  ;       EKEYF...        Keyboard status flags
   165                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   166                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   272                                  ;
   273                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   274                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   275                                  ;
   276                                  ;       0.......        Segment is not present in memory (triggers int 11)
   277                                  ;       1.......        Segment is present in memory
   278                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   279                                  ;       ...0....        Segment is a system segment
   280                                  ;       ...00010                Local Descriptor Table
   281                                  ;       ...00101                Task Gate
   282                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   283                                  ;       ...01100                Call Gate (386)
   284                                  ;       ...01110                Interrupt Gate (386)
   285                                  ;       ...01111                Trap Gate (386)
   286                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   287                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   288                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   292                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   293                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   294                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   295                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   296                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   297                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   298                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;
   301                                  ;       Firmware-Defined Values
   302                                  ;
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;
   306                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   307                                  ;
   308                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   309                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   310                                  ;
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   313                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   314                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   315                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   316                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   317                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   318                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   319                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   320                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       Standards-Based Values
   324                                  ;
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;       ASCII                                                                   EASCII...
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   332                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   333                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   334                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   335                                  EASCIISPACE             equ     020h                                            ;space
   336                                  EASCIIUPPERA            equ     041h                                            ;'A'
   337                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   338                                  EASCIITILDE             equ     07Eh                                            ;'~'
   339                                  EASCIICASE              equ     00100000b                                       ;case bit
   340                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;
   343                                  ;       Operating System Values
   344                                  ;
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   349                                  ;
   350                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   351                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   352                                  ;
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   355                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   356                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   357                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   358                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   359                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   360                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  ;       Console Constants                                                       ECON...
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ECONCOLS                equ     80                                              ;columns per row
   365                                  ECONROWS                equ     24                                              ;console rows
   366                                  ECONOIAROW              equ     24                                              ;operator information area row
   367                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   368                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   369                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   370                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   371                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   376                                  EGDTCGA                 equ     020h                                            ;cga video selector
   377                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   378                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   379                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   380                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   381                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   382                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;       Keyboard Flags                                                          EKEYF...
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   387                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   388                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   389                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   390                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   391                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   392                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   393                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   394                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   395                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   396                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;       Kernel Constants                                                        EKRN...
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   401                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   402                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   403                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;       Local Descriptor Table (LDT) Selectors                                  ESEL...
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;       Message Identifiers                                                     EMSG...
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   412                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   413                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   414                                  ;=======================================================================================================================
   415                                  ;
   416                                  ;       Structures
   417                                  ;
   418                                  ;=======================================================================================================================
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;
   421                                  ;       MQUEUE
   422                                  ;
   423                                  ;       The MQUEUE structure maps memory used for a message queue.
   424                                  ;
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  struc                   MQUEUE
   427 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   428 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   429 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   430                                  endstruc
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ;
   433                                  ;       OSDATA
   434                                  ;
   435                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   436                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   437                                  ;
   438                                  ;-----------------------------------------------------------------------------------------------------------------------
   439                                  struc                   OSDATA
   440 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   441 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   442 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   443 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   444 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   445 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   446 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   447 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   448 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   449 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   450 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   451 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   452 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   453 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   454 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   455 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   456 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   457 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   458 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   459 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   460 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   461 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   462 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   463 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   464 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   465 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   466 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   467 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   468 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   469 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   470 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   471 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   472 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   473 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   474 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   475 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   476 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   477 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   478 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   479 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   480 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   481 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   482 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   483 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   484 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   485 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   486 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   487 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   488 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   489 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   490 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   491 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   492 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   493 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   494 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   495 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   496 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   497 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   498 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   499 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   500 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   501 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   502 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   503 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   504 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   505 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   506 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   507 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   508 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   509 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   510 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   511 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   512 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   513 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   514 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   515 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   516 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   517 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   518 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   519 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   520 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   521 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   522 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   523 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   524 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   525 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   526 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   527 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   528 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   529 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   530 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   531 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   532 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   533 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   534 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   535 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   536 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   537 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   538 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   539 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   540 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  ;
   543                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   544                                  ;
   545                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   546                                  ;
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ECONDATA                equ     ($)
   549 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   550 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   551 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   552 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   553 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   554 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   555 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   556 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   557 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   558 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   559 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   560 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   561 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   562                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   563                                  ;-----------------------------------------------------------------------------------------------------------------------
   564                                  ;
   565                                  ;       End of OS Variables
   566                                  ;
   567                                  ;-----------------------------------------------------------------------------------------------------------------------
   568                                  endstruc
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  ;
   571                                  ;       Macros
   572                                  ;
   573                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   574                                  ;
   575                                  ;-----------------------------------------------------------------------------------------------------------------------
   576                                  %macro                  mint    1
   577                                  _%1                     equ     ($-$$) / EX86DESCLEN
   578                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   579                                  %endmacro
   580                                  %macro                  mtrap   1
   581                                  _%1                     equ     ($-$$) / EX86DESCLEN
   582                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   583                                  %endmacro
   584                                  %macro                  menter  1
   585                                  ?%1                     equ     ($-$$)
   586                                  %endmacro
   587                                  %macro                  tsvce   1
   588                                  e%1                     equ     ($-tsvc)/4
   589                                                          dd      %1
   590                                  %endmacro
   591                                  %ifdef BUILDBOOT
   592                                  ;=======================================================================================================================
   593                                  ;
   594                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   595                                  ;
   596                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   597                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   598                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   599                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   600                                  ;
   601                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   602                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   603                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   604                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   605                                  ;       immediately followed by a disk parameter table.
   606                                  ;
   607                                  ;=======================================================================================================================
   608                                                          cpu     8086                                            ;assume minimal CPU
   609                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   610                                                          bits    16                                              ;16-bit code at power-up
   611                                  %ifdef BUILDPREP
   612                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   613                                  %else
   614 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   615                                  %endif
   616                                  ;-----------------------------------------------------------------------------------------------------------------------
   617                                  ;
   618                                  ;       Disk Parameter Table
   619                                  ;
   620                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   621                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   622                                  ;
   623                                  ;-----------------------------------------------------------------------------------------------------------------------
   624 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   625 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   626 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   627 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   628 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   629 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   630 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   631 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   632 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   633                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   634 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   635 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   636 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   637                                  ;
   638                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   639                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   640                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   641                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   642                                  ;       given several possible starting values for CS:IP.
   643                                  ;
   644                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   645 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   646                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   647 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   648 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   649 00000025 B104                                            mov     cl,4                                            ;shift count
   650 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   651 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   652 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   653                                  ;
   654                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   655                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   656                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   657                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   658                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   659                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   660                                  ;
   661 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   662 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   663 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   664 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   665 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   666                                  ;
   667                                  ;       Our boot addressability is now set up according to the following diagram.
   668                                  ;
   669                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   670                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   671                                  ;                               |  256 = 100h bytes                             |
   672                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   673                                  ;                               |  Boot Sector (vstart=0100h)                   |
   674                                  ;                               |  1 sector = 512 = 200h bytes                  |
   675                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   676                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   677                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   678                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   679                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   680                                  ;                               |  2 sectors = 1024 = 400h bytes
   681                                  ;                       009400  +-----------------------------------------------+ DS:1900
   682                                  ;
   683                                  ;       On entry, DL indicates the drive being booted from.
   684                                  ;
   685 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   686                                  ;
   687                                  ;       Compute directory i/o buffer address.
   688                                  ;
   689 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   690 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   691 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   692 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   693                                  ;
   694                                  ;       Compute segment where os.com will be loaded.
   695                                  ;
   696 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   697 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   698 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   699 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   700                                  ;
   701                                  ;       Set the video mode to 80 column, 25 row, text.
   702                                  ;
   703 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   704 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   705                                  ;
   706                                  ;       Write a message to the console so we know we have our addressability established.
   707                                  ;
   708 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   709 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   710                                  ;
   711                                  ;       Initialize the number of directory sectors to search.
   712                                  ;
   713 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   714 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   715                                  ;
   716                                  ;       Compute number of directory sectors and initialize overhead count.
   717                                  ;
   718 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   719 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   720 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   721 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   722                                  ;
   723                                  ;       Compute directory entries per sector.
   724                                  ;
   725 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   726 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   727 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   728                                  ;
   729                                  ;       Compute first logical directory sector and update overhead count.
   730                                  ;
   731 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   732 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   733 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   734 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   735 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   736 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   737                                  ;
   738                                  ;       Read directory sector.
   739                                  ;
   740 0000008E B001                    .30                     mov     al,1                                            ;sector count
   741 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   742 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   743 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   744                                  ;
   745                                  ;       Setup variables to search this directory sector.
   746                                  ;
   747 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   748 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   749 000000A1 7603                                            jna     .40                                             ;no, continue
   750 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   751 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   752 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   753 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   754                                  ;
   755                                  ;       Loop through directory sectors searching for kernel program.
   756                                  ;
   757 000000B1 56                      .50                     push    si                                              ;save kernel name address
   758 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   759 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   760 000000B6 FC                                              cld                                                     ;forward strings
   761 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   762 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   763 000000BA 5E                                              pop     si                                              ;restore kernel name address
   764 000000BB 7418                                            je      .60                                             ;exit loop if found
   765 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   766 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   767 000000C2 75ED                                            jnz     .50                                             ;next entry
   768                                  ;
   769                                  ;       Repeat search if we are not at the end of the directory.
   770                                  ;
   771 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   772 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   773 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   774 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   775 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   776                                  ;
   777                                  ;       If we find the kernel program in the directory, read the FAT.
   778                                  ;
   779 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   780 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   781 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   782 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   783 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   784 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   785                                  ;
   786                                  ;       Get the starting cluster of the kernel program and target address.
   787                                  ;
   788 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   789 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   790                                  ;
   791                                  ;       Read each program cluster into RAM.
   792                                  ;
   793 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   794 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   795 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   796 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   797 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   798 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   799 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   800 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   801 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   802                                  ;
   803                                  ;       Update buffer pointer for next cluster.
   804                                  ;
   805 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   806 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   807 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   808 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   809 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   810                                  ;
   811                                  ;       Compute next cluster number.
   812                                  ;
   813 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   814 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   815 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   816 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   817 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   818 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   819 00000120 83E701                                          and     di,1                                            ;get low bit
   820 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   821 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   822 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   823                                  ;
   824                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   825                                  ;
   826 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   827 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   828 00000130 B104                                            mov     cl,4                                            ;shift count
   829 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   830 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   831 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   832 0000013A 75B2                                            jne     .70                                             ;no, continue
   833                                  ;
   834                                  ;       Transfer control to the operating system program.
   835                                  ;
   836 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   837 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   838 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   839                                  ;
   840                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   841                                  ;
   842 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   843 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   844 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   845 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   846 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   847 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   848 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   849 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   850 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   851 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   852                                  ;
   853                                  ;       Try maxtries times to read sector.
   854                                  ;
   855 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   856 00000160 53                      .10                     push    bx                                              ;save buffer address
   857 00000161 51                                              push    cx                                              ;save retry count
   858 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   859 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   860 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   861 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   862 0000016F 59                                              pop     cx                                              ;restore retry count
   863 00000170 5B                                              pop     bx                                              ;restore buffer address
   864 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   865 00000173 E2EB                                            loop    .10                                             ;retry
   866                                  ;
   867                                  ;       Handle disk error: convert to ASCII and store in error string.
   868                                  ;
   869 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   870 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   871 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   872 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   873 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   874 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   875 00000183 7203                                            jb      .20                                             ;continue if numeral
   876 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   877 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   878 0000018A 7203                                            jb      .30                                             ;continue if numeral
   879 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   880 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   881 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   882 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   883                                  ;
   884                                  ;       Wait for a key press.
   885                                  ;
   886 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   887 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   888 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   889 0000019E FB                                              sti                                                     ;enable maskable interrupts
   890 0000019F F4                                              hlt                                                     ;wait for interrupt
   891 000001A0 EBF6                                            jmp     .10                                             ;repeat
   892                                  ;
   893                                  ;       Reset the system.
   894                                  ;
   895 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   896 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   897 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   898 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   899 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   900                                  ;
   901                                  ;       Display text message.
   902                                  ;
   903 000001AA FC                      BootPrint               cld                                                     ;forward strings
   904 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   905 000001AC 84C0                                            test    al,al                                           ;end of string?
   906 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   907 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   908 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   909 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   910 000001B6 C3                      BootReturn              ret                                                     ;return
   911                                  ;-----------------------------------------------------------------------------------------------------------------------
   912                                  ;
   913                                  ;       Constants
   914                                  ;
   915                                  ;-----------------------------------------------------------------------------------------------------------------------
   916 000001B7 90                                              align   2
   917 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   918 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   918 000001C3 4F4D               
   919 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   919 000001CE 530D0A00           
   920 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   920 000001DB 7220               
   921 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   922 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   922 000001E9 6700               
   923                                  ;-----------------------------------------------------------------------------------------------------------------------
   924                                  ;
   925                                  ;       Work Areas
   926                                  ;
   927                                  ;-----------------------------------------------------------------------------------------------------------------------
   928 000001EB 90                                              align   2
   929 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   930 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   931 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   932 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   933 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   934                                  wwReadCountCommand      equ     $                                               ;read count and command
   935 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   936 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   937                                  wwDriveHead             equ     $                                               ;drive, head (word)
   938 000001F8 00                      wbDrive                 db      0                                               ;drive
   939 000001F9 00                      wbHead                  db      0                                               ;head
   940                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   941 000001FA 00                                              db      0                                               ;sector
   942 000001FB 00                      wbTrack                 db      0                                               ;track
   943 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   944 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   945                                  %endif
   946                                  %ifdef BUILDPREP
   947                                  ;=======================================================================================================================
   948                                  ;
   949                                  ;       Diskette Preparation Code
   950                                  ;
   951                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   952                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   953                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   954                                  ;
   955                                  ;=======================================================================================================================
   956                                  ;
   957                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   958                                  ;
   959                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   960                                                          call    BootPrint                                       ;display message
   961                                  ;
   962                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   963                                  ;
   964                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   965                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   966                                                          jnz     .20                                             ;continue if key pressed
   967                                                          sti                                                     ;enable interrupts
   968                                                          hlt                                                     ;wait for interrupt
   969                                                          jmp     .10                                             ;repeat
   970                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   971                                                          je      .30                                             ;yes, branch
   972                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   973                                                          jne     .10                                             ;no, repeat
   974                                                          jmp     .120                                            ;yes, exit program
   975                                  ;
   976                                  ;       Display writing-sector message and patch the JMP instruction.
   977                                  ;
   978                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   979                                                          call    BootPrint                                       ;display message
   980                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   981                                                          mov     ax,01Bh                                         ;address past disk parameter table
   982                                                          mov     [bx],ax                                         ;update the JMP instruction
   983                                  ;
   984                                  ;       Try to read the boot sector.
   985                                  ;
   986                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   987                                  .40                     push    cx                                              ;save remaining tries
   988                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   989                                                          mov     dx,0                                            ;head zero, drive zero
   990                                                          mov     cx,1                                            ;track zero, sector one
   991                                                          mov     ax,0201h                                        ;read one sector
   992                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   993                                                          pop     cx                                              ;restore remaining retries
   994                                                          jnc     .50                                             ;skip ahead if successful
   995                                                          loop    .40                                             ;try again
   996                                                          mov     si,czPrepMsg20                                  ;read-error message address
   997                                                          jmp     .70                                             ;branch to error routine
   998                                  ;
   999                                  ;       Copy diskette parms from input buffer to output buffer.
  1000                                  ;
  1001                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1002                                                          add     si,11                                           ;skip over JMP and system ID
  1003                                                          mov     di,Boot                                         ;output buffer address
  1004                                                          add     di,11                                           ;skip over JMP and system ID
  1005                                                          mov     cx,19                                           ;length of diskette parameters
  1006                                                          cld                                                     ;forward string copies
  1007                                                          rep     movsb                                           ;copy diskette parameters
  1008                                  ;
  1009                                  ;       Try to write boot sector to diskette.
  1010                                  ;
  1011                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1012                                  .60                     push    cx                                              ;save remaining tries
  1013                                                          mov     bx,Boot                                         ;output buffer address
  1014                                                          mov     dx,0                                            ;head zero, drive zero
  1015                                                          mov     cx,1                                            ;track zero, sector one
  1016                                                          mov     ax,0301h                                        ;write one sector
  1017                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1018                                                          pop     cx                                              ;restore remaining retries
  1019                                                          jnc     .100                                            ;skip ahead if successful
  1020                                                          loop    .60                                             ;try again
  1021                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1022                                  ;
  1023                                  ;       Convert the error code to ASCII and display the error message.
  1024                                  ;
  1025                                  .70                     push    ax                                              ;save error code
  1026                                                          mov     al,ah                                           ;copy error code
  1027                                                          mov     ah,0                                            ;AX = error code
  1028                                                          mov     dl,10h                                          ;hexadecimal divisor
  1029                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1030                                                          or      ax,03030h                                       ;add ASCII zone digits
  1031                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1032                                                          jb      .80                                             ;yes, continue
  1033                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1034                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1035                                                          jb      .90                                             ;yes, continue
  1036                                                          add     al,7                                            ;no, make ASCII
  1037                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1038                                                          call    BootPrint                                       ;write error message
  1039                                                          pop     ax                                              ;restore error code
  1040                                  ;
  1041                                  ;       Display the completion message.
  1042                                  ;
  1043                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1044                                                          mov     al,ah                                           ;BIOS return code
  1045                                                          cmp     al,0                                            ;success?
  1046                                                          je      .110                                            ;yes, continue
  1047                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1048                                                          cmp     al,1                                            ;disk parameter error?
  1049                                                          je      .110                                            ;yes, continue
  1050                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1051                                                          cmp     al,2                                            ;address mark not found?
  1052                                                          je      .110                                            ;yes, continue
  1053                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1054                                                          cmp     al,3                                            ;protected disk?
  1055                                                          je      .110                                            ;yes, continue
  1056                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1057                                                          cmp     al,6                                            ;diskette removed?
  1058                                                          je      .110                                            ;yes, continue
  1059                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1060                                                          cmp     al,80H                                          ;drive timed out?
  1061                                                          je      .110                                            ;yes, continue
  1062                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1063                                  .110                    call    BootPrint                                       ;display result message
  1064                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1065                                                          int     021h                                            ;terminate DOS program
  1066                                                          ret                                                     ;return (should not execute)
  1067                                  ;-----------------------------------------------------------------------------------------------------------------------
  1068                                  ;
  1069                                  ;       Diskette Preparation Messages
  1070                                  ;
  1071                                  ;-----------------------------------------------------------------------------------------------------------------------
  1072                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1073                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1074                                                          db      13,10
  1075                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1076                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1077                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1078                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1079                                                          db      13,10,0
  1080                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1081                                                          db      13,10,0
  1082                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1083                                                          db      13,10,0
  1084                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1085                                                          db      13,10,0
  1086                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1087                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1088                                                          db      13,10,0
  1089                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1090                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1091                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1092                                                          db      13,10,"and retry."
  1093                                                          db      13,10,0
  1094                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1095                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1096                                                          db      13,10,"using another diskette."
  1097                                                          db      13,10,0
  1098                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1099                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1100                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1101                                                          db      13,10,0
  1102                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1103                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1104                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1105                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1106                                                          db      13,10,"is properly inserted in the diskette drive."
  1107                                                          db      13,10,0
  1108                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1109                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1110                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1111                                                          db      13,10,0
  1112                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1113                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1114                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1115                                                          db      13,10,0
  1116                                  wcPrepInBuf             equ     $
  1117                                  %endif
  1118                                  %ifdef BUILDDISK
  1119                                  ;=======================================================================================================================
  1120                                  ;
  1121                                  ;       File Allocation Tables
  1122                                  ;
  1123                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1124                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1125                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1126                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1127                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1128                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1129                                  ;       the last cluster in the chain.
  1130                                  ;
  1131                                  ;       Every three bytes encode two FAT entries as follows:
  1132                                  ;
  1133                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1134                                  ;
  1135                                  ;=======================================================================================================================
  1136                                  ;-----------------------------------------------------------------------------------------------------------------------
  1137                                  ;
  1138                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1139                                  ;
  1140                                  ;-----------------------------------------------------------------------------------------------------------------------
  1141                                  section                 fat1                                                    ;first copy of FAT
  1142                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1143                                                          db      005h,060h,000h, 007h,080h,000h
  1144                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1145                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1146                                                          db      011h,020h,001h, 013h,040h,001h
  1147                                                          db      015h,060h,001h, 017h,080h,001h
  1148                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1149                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1150                                                          db      021h,020h,002h, 023h,040h,002h
  1151                                                          db      025h,060h,002h, 027h,080h,002h
  1152                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1153                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1154                                  ;-----------------------------------------------------------------------------------------------------------------------
  1155                                  ;
  1156                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1157                                  ;
  1158                                  ;-----------------------------------------------------------------------------------------------------------------------
  1159                                  section                 fat2                                                    ;second copy of FAT
  1160                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1161                                                          db      005h,060h,000h, 007h,080h,000h
  1162                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1163                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1164                                                          db      011h,020h,001h, 013h,040h,001h
  1165                                                          db      015h,060h,001h, 017h,080h,001h
  1166                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1167                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1168                                                          db      021h,020h,002h, 023h,040h,002h
  1169                                                          db      025h,060h,002h, 027h,080h,002h
  1170                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1171                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1172                                  ;-----------------------------------------------------------------------------------------------------------------------
  1173                                  ;
  1174                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1175                                  ;
  1176                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1177                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1178                                  ;       copy.
  1179                                  ;
  1180                                  ;-----------------------------------------------------------------------------------------------------------------------
  1181                                  section                 dir                                                     ;diskette directory
  1182                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1183                                                          db      020h                                            ;attribute (archive bit set)
  1184                                                          times   10 db 0                                         ;unused
  1185                                                          dw      0h                                              ;time
  1186                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1187                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1188                                                          dw      2                                               ;first cluster
  1189                                                          dd      05400h                                          ;file size
  1190                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1191                                  %endif
  1192                                  %ifdef BUILDCOM
  1193                                  ;=======================================================================================================================
  1194                                  ;
  1195                                  ;       OS.COM
  1196                                  ;
  1197                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1198                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1199                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1200                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1201                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1202                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1203                                  ;
  1204                                  ;       Our loader addressability is set up according to the following diagram.
  1205                                  ;
  1206                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1207                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1208                                  ;                               |  256 = 100h bytes                             |
  1209                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1210                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1211                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1212                                  ;                       007e00  +-----------------------------------------------+
  1213                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1214                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1215                                  ;                               |                                               |
  1216                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1217                                  ;                               |                                               |
  1218                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1219                                  ;                               |  Loader Code                                  |
  1220                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1221                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1222                                  ;
  1223                                  ;=======================================================================================================================
  1224                                  ;-----------------------------------------------------------------------------------------------------------------------
  1225                                  ;
  1226                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1227                                  ;
  1228                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1229                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1230                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1231                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1232                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1233                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1234                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1235                                  ;       registers.
  1236                                  ;
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                                          cpu     8086                                            ;assume minimal CPU
  1239                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1240                                                          bits    16                                              ;this is 16-bit code
  1241                                  Loader                  push    cs                                              ;use the code segment
  1242                                                          pop     ds                                              ;...as our data segment
  1243                                                          push    cs                                              ;use the code segment
  1244                                                          pop     es                                              ;...as our extra segment
  1245                                  ;
  1246                                  ;       Write a message to the console so we know we have our addressability established.
  1247                                  ;
  1248                                                          mov     si,czStartingMsg                                ;starting message
  1249                                                          call    PutTTYString                                    ;display loader message
  1250                                  ;
  1251                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1252                                  ;
  1253                                                          call    GetCPUType                                      ;AL = cpu type
  1254                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1255                                                          cmp     al,3                                            ;80386+?
  1256                                                          jb      LoaderExit                                      ;no, exit with error message
  1257                                                          cpu     386                                             ;allow 80386 instructions
  1258                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1259                                                          call    PutTTYString                                    ;display message
  1260                                  ;
  1261                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1262                                  ;
  1263                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1264                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1265                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1266                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1267                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1268                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1269                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1270                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1271                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1272                                                          call    PutTTYString                                    ;display message
  1273                                  ;
  1274                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1275                                  ;
  1276                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1277                                                          pop     es                                              ;... as target segment
  1278                                                          xor     di,di                                           ;ES:DI = target address
  1279                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1280                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1281                                                          cld                                                     ;forward strings
  1282                                                          rep     movsb                                           ;copy kernel image
  1283                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1284                                                          call    PutTTYString                                    ;display message
  1285                                  ;
  1286                                  ;       Switch to protected mode.
  1287                                  ;
  1288                                                          xor     si,si                                           ;ES:SI = gdt addr
  1289                                                          mov     ss,si                                           ;protected mode ss
  1290                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1291                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1292                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1293                                                          mov     dx,001Fh                                        ;outer delay loop count
  1294                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1295                                                          loop    $                                               ;wait out pending interrupts
  1296                                                          dec     dx                                              ;restore outer loop count
  1297                                                          jnz     .10                                             ;continue outer loop
  1298                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1299                                  ;
  1300                                  ;       Enable hardware and maskable interrupts.
  1301                                  ;
  1302                                                          xor     al,al                                           ;enable all registers code
  1303                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1304                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1305                                                          sti                                                     ;enable maskable interrupts
  1306                                  ;
  1307                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1308                                  ;
  1309                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1310                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1311                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  ;
  1314                                  ;       Routine:        LoaderExit
  1315                                  ;
  1316                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1317                                  ;
  1318                                  ;       In:             DS:SI   string address
  1319                                  ;
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  LoaderExit              call    PutTTYString                                    ;display error message
  1322                                  ;
  1323                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1324                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1325                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1326                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1327                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1328                                  ;
  1329                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1330                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1331                                                          jnz     .40                                             ;exit if key pressed
  1332                                                          sti                                                     ;enable maskable interrupts
  1333                                                          hlt                                                     ;wait for interrupt
  1334                                                          jmp     .30                                             ;repeat until keypress
  1335                                  ;
  1336                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1337                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1338                                  ;       HLT until the system resets.
  1339                                  ;
  1340                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1341                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1342                                  .50                     sti                                                     ;enable maskable interrupts
  1343                                                          hlt                                                     ;stop until reset, int, nmi
  1344                                                          jmp     .50                                             ;loop until restart kicks in
  1345                                  ;-----------------------------------------------------------------------------------------------------------------------
  1346                                  ;
  1347                                  ;       Routine:        GetCPUType
  1348                                  ;
  1349                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1350                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1351                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1352                                  ;
  1353                                  ;       Out:            AX      0 = 808x, v20, etc.
  1354                                  ;                               1 = 80186
  1355                                  ;                               2 = 80286
  1356                                  ;                               3 = 80386
  1357                                  ;
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  GetCPUType              mov     al,1                                            ;AL = 1
  1360                                                          mov     cl,32                                           ;shift count
  1361                                                          shr     al,cl                                           ;try a 32-bit shift
  1362                                                          or      al,al                                           ;did the shift happen?
  1363                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1364                                                          cpu     186
  1365                                                          push    sp                                              ;save stack pointer
  1366                                                          pop     cx                                              ;...into cx
  1367                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1368                                                          jne     .10                                             ;yes, cpu is 80186
  1369                                                          cpu     286
  1370                                                          inc     ax                                              ;AX = 2
  1371                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1372                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1373                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1374                                                          jz      .10                                             ;yes, cpu is 80286
  1375                                                          inc     ax                                              ;AX = 3
  1376                                  .10                     ret                                                     ;return
  1377                                  ;-----------------------------------------------------------------------------------------------------------------------
  1378                                  ;
  1379                                  ;       Routine:        PutTTYString
  1380                                  ;
  1381                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1382                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1383                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1384                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1385                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1386                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1387                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1388                                  ;                       to LODSB is not needed.
  1389                                  ;
  1390                                  ;       In:             DS:SI   address of string
  1391                                  ;
  1392                                  ;       Out:            DF      0
  1393                                  ;                       ZF      1
  1394                                  ;                       AL      0
  1395                                  ;
  1396                                  ;-----------------------------------------------------------------------------------------------------------------------
  1397                                  PutTTYString            cld                                                     ;forward strings
  1398                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1399                                                          test    al,al                                           ;end of string?
  1400                                                          jz      .20                                             ;... yes, exit our loop
  1401                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1402                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1403                                                          jmp     .10                                             ;repeat until done
  1404                                  .20                     ret                                                     ;return
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406                                  ;
  1407                                  ;       Loader Data
  1408                                  ;
  1409                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1410                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1411                                  ;
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                                          align   2
  1414                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1415                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1416                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1417                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1418                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1419                                                          db      "Please press any key to restart the computer.",13,10,0
  1420                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1421                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1422                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1423                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1424                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1425                                  ;=======================================================================================================================
  1426                                  ;
  1427                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1428                                  ;
  1429                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1430                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1431                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1432                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1433                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1434                                  ;
  1435                                  ;=======================================================================================================================
  1436                                  ;=======================================================================================================================
  1437                                  ;
  1438                                  ;       Kernel Tables
  1439                                  ;
  1440                                  ;=======================================================================================================================
  1441                                  ;-----------------------------------------------------------------------------------------------------------------------
  1442                                  ;
  1443                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1444                                  ;
  1445                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1446                                  ;       first descriptor must be all nulls.
  1447                                  ;
  1448                                  ;       6   5         4         3         2         1         0
  1449                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1450                                  ;       ----------------------------------------------------------------
  1451                                  ;       h......hffffmmmma......ab......................bn..............n
  1452                                  ;       00000000                        all areas have base addresses below 2^24
  1453                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1454                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1455                                  ;                   1001                present, ring-0, selector
  1456                                  ;
  1457                                  ;       h...h   hi-order base address (bits 24-31)
  1458                                  ;       ffff    flags
  1459                                  ;       mmmm    hi-order limit (bits 16-19)
  1460                                  ;       a...a   access
  1461                                  ;       b...b   lo-order base address (bits 0-23)
  1462                                  ;       n...n   lo-order limit (bits 0-15)
  1463                                  ;
  1464                                  ;-----------------------------------------------------------------------------------------------------------------------
  1465                                  section                 gdt                                                     ;global descriptor table
  1466                                                          dq      0000000000000000h                               ;00 required null selector
  1467                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1468                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1469                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1470                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1471                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1472                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1473                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1474                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1475                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1476                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1477                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1478                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1479                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1480                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1481                                  ;-----------------------------------------------------------------------------------------------------------------------
  1482                                  ;
  1483                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1484                                  ;
  1485                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1486                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1487                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1488                                  ;
  1489                                  ;       6   5         4         3         2         1         0
  1490                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1491                                  ;       ----------------------------------------------------------------
  1492                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1493                                  ;
  1494                                  ;       h...h   high-order offset (bits 16-31)
  1495                                  ;       P       present (0=unused interrupt)
  1496                                  ;       zz      descriptor privilege level
  1497                                  ;       S       storage segment (must be zero for IDT)
  1498                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1499                                  ;       S...S   handling code selector in GDT
  1500                                  ;       l...l   lo-order offset (bits 0-15)
  1501                                  ;
  1502                                  ;-----------------------------------------------------------------------------------------------------------------------
  1503                                  section                 idt                                                     ;interrupt descriptor table
  1504                                                          mint    dividebyzero                                    ;00 divide by zero
  1505                                                          mint    singlestep                                      ;01 single step
  1506                                                          mint    nmi                                             ;02 non-maskable
  1507                                                          mint    break                                           ;03 break
  1508                                                          mint    into                                            ;04 into
  1509                                                          mint    bounds                                          ;05 bounds
  1510                                                          mint    badopcode                                       ;06 bad op code
  1511                                                          mint    nocoproc                                        ;07 no coprocessor
  1512                                                          mint    doublefault                                     ;08 double-fault
  1513                                                          mint    operand                                         ;09 operand
  1514                                                          mint    badtss                                          ;0a bad TSS
  1515                                                          mint    notpresent                                      ;0b not-present
  1516                                                          mint    stacklimit                                      ;0c stack limit
  1517                                                          mint    protection                                      ;0d general protection fault
  1518                                                          mint    int14                                           ;0e (reserved)
  1519                                                          mint    int15                                           ;0f (reserved)
  1520                                                          mint    coproccalc                                      ;10 (reserved)
  1521                                                          mint    int17                                           ;11 (reserved)
  1522                                                          mint    int18                                           ;12 (reserved)
  1523                                                          mint    int19                                           ;13 (reserved)
  1524                                                          mint    int20                                           ;14 (reserved)
  1525                                                          mint    int21                                           ;15 (reserved)
  1526                                                          mint    int22                                           ;16 (reserved)
  1527                                                          mint    int23                                           ;17 (reserved)
  1528                                                          mint    int24                                           ;18 (reserved)
  1529                                                          mint    int25                                           ;19 (reserved)
  1530                                                          mint    int26                                           ;1a (reserved)
  1531                                                          mint    int27                                           ;1b (reserved)
  1532                                                          mint    int28                                           ;1c (reserved)
  1533                                                          mint    int29                                           ;1d (reserved)
  1534                                                          mint    int30                                           ;1e (reserved)
  1535                                                          mint    int31                                           ;1f (reserved)
  1536                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1537                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1538                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1539                                                          mtrap   com2                                            ;23 IRQ3 com2
  1540                                                          mtrap   com1                                            ;24 IRQ4 com1
  1541                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1542                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1543                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1544                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1545                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1546                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1547                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1548                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1549                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1550                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1551                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1552                                                          mtrap   svc                                             ;30 OS services
  1553                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1554                                  ;=======================================================================================================================
  1555                                  ;
  1556                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1557                                  ;
  1558                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1559                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1560                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1561                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1562                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1563                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1564                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1565                                  ;
  1566                                  ;=======================================================================================================================
  1567                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1568                                                          cpu     386                                             ;allow 80386 instructions
  1569                                                          bits    32                                              ;this is 32-bit code
  1570                                  ;=======================================================================================================================
  1571                                  ;
  1572                                  ;       CPU Interrupt Handlers
  1573                                  ;
  1574                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1575                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1576                                  ;
  1577                                  ;=======================================================================================================================
  1578                                  ;-----------------------------------------------------------------------------------------------------------------------
  1579                                  ;
  1580                                  ;       INT0    Divide By Zero
  1581                                  ;
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                                          menter  dividebyzero                                    ;divide by zero
  1584                                                          push    0                                               ;store interrupt nbr
  1585                                                          push    czIntDivideByZero                               ;store message offset
  1586                                                          jmp     ReportInterrupt                                 ;report interrupt
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                  ;
  1589                                  ;       INT1    Single Step
  1590                                  ;
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                                          menter  singlestep                                      ;single step
  1593                                                          push    1                                               ;store interrupt nbr
  1594                                                          push    czIntSingleStep                                 ;store message offset
  1595                                                          jmp     ReportInterrupt                                 ;report interrupt
  1596                                  ;-----------------------------------------------------------------------------------------------------------------------
  1597                                  ;
  1598                                  ;       INT2    Non-Maskable Interrupt
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                                          menter  nmi                                             ;non-maskable
  1602                                                          push    2                                               ;store interrupt nbr
  1603                                                          push    czIntNonMaskable                                ;store message offset
  1604                                                          jmp     ReportInterrupt                                 ;report interrupt
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  ;
  1607                                  ;       INT3    Break
  1608                                  ;
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                                          menter  break                                           ;break
  1611                                                          push    3                                               ;store interrupt nbr
  1612                                                          push    czIntBreak                                      ;store message offset
  1613                                                          jmp     ReportInterrupt                                 ;report interrupt
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                  ;
  1616                                  ;       INT4    Into
  1617                                  ;
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                                          menter  into                                            ;into
  1620                                                          push    4                                               ;store interrupt nbr
  1621                                                          push    czIntInto                                       ;store message offset
  1622                                                          jmp     ReportInterrupt                                 ;report interrupt
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                  ;
  1625                                  ;       INT5    Bounds
  1626                                  ;
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                                          menter  bounds                                          ;bounds
  1629                                                          push    5                                               ;store interrupt nbr
  1630                                                          push    czIntBounds                                     ;store message offset
  1631                                                          jmp     ReportInterrupt                                 ;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;       INT6    Bad Operation Code
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                                          menter  badopcode                                       ;bad opcode interrupt
  1638                                                          push    6                                               ;store interrupt nbr
  1639                                                          push    czIntBadOpCode                                  ;store message offset
  1640                                                          jmp     ReportInterrupt                                 ;report interrupt
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  ;
  1643                                  ;       INT7    No Coprocessor
  1644                                  ;
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1647                                                          push    7                                               ;store interrupt nbr
  1648                                                          push    czIntNoCoprocessor                              ;store message offset
  1649                                                          jmp     ReportInterrupt                                 ;report interrupt
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  ;
  1652                                  ;       INT8    Double Fault
  1653                                  ;
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                                          menter  doublefault                                     ;doublefault interrupt
  1656                                                          push    8                                               ;store interrupt nbr
  1657                                                          push    czIntDoubleFault                                ;store message offset
  1658                                                          jmp     ReportInterrupt                                 ;report interrupt
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  ;
  1661                                  ;       INT9    Operand
  1662                                  ;
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                                          menter  operand                                         ;operand interrupt
  1665                                                          push    9                                               ;store interrupt nbr
  1666                                                          push    czIntOperand                                    ;store message offset
  1667                                                          jmp     ReportInterrupt                                 ;report interrupt
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  ;
  1670                                  ;       INT10   Bad Task State Segment
  1671                                  ;
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                                          menter  badtss                                          ;bad TSS interrupt
  1674                                                          push    10                                              ;store interrupt nbr
  1675                                                          push    czIntBadTSS                                     ;store message offset
  1676                                                          jmp     ReportInterrupt                                 ;report interrupt
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  ;
  1679                                  ;       INT11   Not Present
  1680                                  ;
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                                          menter  notpresent                                      ;not present interrupt
  1683                                                          push    11                                              ;store interrupt nbr
  1684                                                          push    czIntNotPresent                                 ;store message offset
  1685                                                          jmp     ReportInterrupt                                 ;report interrupt
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT12   Stack Limit
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  stacklimit                                      ;stack limit interrupt
  1692                                                          push    12                                              ;store interrupt nbr
  1693                                                          push    czIntStackLimit                                 ;store message offset
  1694                                                          jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT13   General Protection Fault
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  protection                                      ;protection fault interrupt
  1701                                                          push    13                                              ;store interrupt nbr
  1702                                                          push    czIntProtection                                 ;store message offset
  1703                                                          jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT14   Reserved
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  int14                                           ;(reserved)
  1710                                                          push    14                                              ;store interrupt nbr
  1711                                                          push    czIntReserved                                   ;store message offset
  1712                                                          jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT15   Reserved
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  int15                                           ;(reserved)
  1719                                                          push    15                                              ;store interrupt nbr
  1720                                                          push    czIntReserved                                   ;store message offset
  1721                                                          jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT16   Coprocessor Calculation
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  coproccalc                                      ;coprocessor calculation
  1728                                                          push    16                                              ;store interrupt nbr
  1729                                                          push    czIntCoprocessorCalc                            ;store message offset
  1730                                                          jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT17   Reserved
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  int17                                           ;(reserved)
  1737                                                          push    17                                              ;store interrupt nbr
  1738                                                          push    czIntReserved                                   ;store message offset
  1739                                                          jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT18   Reserved
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  int18                                           ;(reserved)
  1746                                                          push    18                                              ;store interrupt nbr
  1747                                                          push    czIntReserved                                   ;store message offset
  1748                                                          jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT19   Reserved
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  int19                                           ;(reserved)
  1755                                                          push    19                                              ;store interrupt nbr
  1756                                                          push    czIntReserved                                   ;store message offset
  1757                                                          jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT20   Reserved
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  int20                                           ;(reserved)
  1764                                                          push    20                                              ;store interrupt nbr
  1765                                                          push    czIntReserved                                   ;store message offset
  1766                                                          jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT21   Reserved
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  int21                                           ;(reserved)
  1773                                                          push    21                                              ;store interrupt nbr
  1774                                                          push    czIntReserved                                   ;store message offset
  1775                                                          jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT22   Reserved
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  int22                                           ;(reserved)
  1782                                                          push    22                                              ;store interrupt nbr
  1783                                                          push    czIntReserved                                   ;store message offset
  1784                                                          jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT23   Reserved
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  int23                                           ;(reserved)
  1791                                                          push    23                                              ;store interrupt nbr
  1792                                                          push    czIntReserved                                   ;store message offset
  1793                                                          jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT24   Reserved
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  int24                                           ;(reserved)
  1800                                                          push    24                                              ;store interrupt nbr
  1801                                                          push    czIntReserved                                   ;store message offset
  1802                                                          jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT25   Reserved
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  int25                                           ;(reserved)
  1809                                                          push    25                                              ;store interrupt nbr
  1810                                                          push    czIntReserved                                   ;store message offset
  1811                                                          jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT26   Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  int26                                           ;(reserved)
  1818                                                          push    26                                              ;store interrupt nbr
  1819                                                          push    czIntReserved                                   ;store message offset
  1820                                                          jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT27   Reserved
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  int27                                           ;(reserved)
  1827                                                          push    27                                              ;store interrupt nbr
  1828                                                          push    czIntReserved                                   ;store message offset
  1829                                                          jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT28   Reserved
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  int28                                           ;(reserved)
  1836                                                          push    28                                              ;store interrupt nbr
  1837                                                          push    czIntReserved                                   ;store message offset
  1838                                                          jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT29   Reserved
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  int29                                           ;(reserved)
  1845                                                          push    29                                              ;store interrupt nbr
  1846                                                          push    czIntReserved                                   ;store message offset
  1847                                                          jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT30   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int30                                           ;(reserved)
  1854                                                          push    30                                              ;store interrupt nbr
  1855                                                          push    czIntReserved                                   ;store message offset
  1856                                                          jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT31   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int31                                           ;(reserved)
  1863                                                          push    31                                              ;store interrupt nbr
  1864                                                          push    czIntReserved                                   ;store message offset
  1865                                                          jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       Routine:        ReportInterrupt
  1869                                  ;
  1870                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1871                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1872                                  ;
  1873                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1874                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1875                                  ;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ReportInterrupt         pop     eax                                             ;error message address
  1878                                                          pop     eax                                             ;interrupt number
  1879                                                          iretd                                                   ;return
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       Processor Interrupt Name Strings
  1883                                  ;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  czIntDivideByZero       db      "Division by zero",0
  1886                                  czIntSingleStep         db      "Single step",0
  1887                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1888                                  czIntBreak              db      "Break",0
  1889                                  czIntInto               db      "Into",0
  1890                                  czIntBounds             db      "Bounds",0
  1891                                  czIntBadOpCode          db      "Bad Operation Code",0
  1892                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1893                                  czIntDoubleFault        db      "Double Fault",0
  1894                                  czIntOperand            db      "Operand",0
  1895                                  czIntBadTSS             db      "Bad Task State Segment",0
  1896                                  czIntNotPresent         db      "Not Present",0
  1897                                  czIntStackLimit         db      "Stack Limit",0
  1898                                  czIntProtection         db      "General Protection Fault",0
  1899                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1900                                  czIntReserved           db      "Reserved",0
  1901                                  ;=======================================================================================================================
  1902                                  ;
  1903                                  ;       Hardware Device Interupts
  1904                                  ;
  1905                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1906                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1907                                  ;       (BX=2028h).
  1908                                  ;
  1909                                  ;=======================================================================================================================
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  ;
  1912                                  ;       IRQ0    Clock Tick Interrupt
  1913                                  ;
  1914                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1915                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1916                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1917                                  ;
  1918                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1919                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1920                                  ;
  1921                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1922                                  ;       zero, the floppy disk motors are turned off.
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                                          menter  clocktick                                       ;clock tick interrupt
  1926                                                          push    eax                                             ;save modified regs
  1927                                                          push    edx                                             ;
  1928                                                          push    ds                                              ;
  1929                                  ;
  1930                                  ;       Update the clock tick count and the elapsed days as needed.
  1931                                  ;
  1932                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1933                                                          pop     ds                                              ;... into data segment register
  1934                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1935                                                          inc     eax                                             ;increment clock ticks
  1936                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1937                                                          jb      irq0.10                                         ;no, skip ahead
  1938                                                          inc     byte [wbClockDays]                              ;increment clock days
  1939                                                          xor     eax,eax                                         ;reset clock ticks
  1940                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1941                                  ;
  1942                                  ;       Decrement floppy disk motor timeout.
  1943                                  ;
  1944                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1945                                                          je      irq0.20                                         ;yes, skip ahead
  1946                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1947                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1948                                  ;
  1949                                  ;       Turn off the floppy disk motor if appropriate.
  1950                                  ;
  1951                                                          sti                                                     ;enable maskable interrupts
  1952                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1953                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1954                                                          in      al,dx                                           ;FDC main status byte
  1955                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1956                                                          jnz     irq0.15                                         ;wait while busy
  1957                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1958                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1959                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1960                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1961                                                          out     dx,al                                           ;turn motor off
  1962                                  ;
  1963                                  ;       Signal the end of the hardware interrupt.
  1964                                  ;
  1965                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1966                                  ;
  1967                                  ;       Restore and return.
  1968                                  ;
  1969                                                          pop     ds                                              ;restore modified regs
  1970                                                          pop     edx                                             ;
  1971                                                          pop     eax                                             ;
  1972                                                          iretd                                                   ;return
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                  ;
  1975                                  ;       IRQ1    Keyboard Interrupt
  1976                                  ;
  1977                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1978                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1979                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1980                                  ;       ALL modified registers upon return.
  1981                                  ;
  1982                                  ;-----------------------------------------------------------------------------------------------------------------------
  1983                                                          menter  keyboard                                        ;keyboard interrrupt
  1984                                                          push    eax                                             ;save non-volatile regs
  1985                                                          push    ebx                                             ;
  1986                                                          push    ecx                                             ;
  1987                                                          push    esi                                             ;
  1988                                                          push    ds                                              ;
  1989                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1990                                                          pop     ds                                              ;... into data segment register
  1991                                                          xor     al,al                                           ;zero
  1992                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1993                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1994                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1995                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  1996                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  1997                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  1998                                                          mov     al,' '                                          ;space
  1999                                                          mov     [wbConsoleChar],al                              ;set character to space
  2000                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2001                                                          not     al                                              ;controller timeout mask
  2002                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2003                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2004                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2005                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2006                                                          jz      irq1.140                                        ;yes, skip ahead
  2007                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2008                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2009                                                          mov     ah,al                                           ;copy scan code 0
  2010                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2011                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2012                                                          je      irq1.30                                         ;yes, set flag
  2013                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2014                                                          je      irq1.40                                         ;yes, reset flag
  2015                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2016                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2017                                                          je      irq1.30                                         ;yes, set flag
  2018                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2019                                                          je      irq1.40                                         ;yes, reset flag
  2020                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2021                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2022                                                          je      irq1.30                                         ;yes, set flag
  2023                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2024                                                          je      irq1.40                                         ;yes, reset flag
  2025                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2026                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2027                                                          je      irq1.30                                         ;yes, set flag
  2028                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2029                                                          je      irq1.40                                         ;yes, reset flag
  2030                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2031                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2032                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2033                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2034                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2035                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2036                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2037                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2038                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2039                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2040                                                          jne     irq1.70                                         ;no, skip ahead
  2041                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2042                                                          jz      irq1.140                                        ;yes, skip ahead
  2043                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2044                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2045                                                          mov     ah,al                                           ;copy scan code 1
  2046                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2047                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2048                                                          je      irq1.30                                         ;yes, set flag
  2049                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2050                                                          je      irq1.40                                         ;yes, reset flag
  2051                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2052                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2053                                                          je      irq1.30                                         ;yes, set flag
  2054                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2055                                                          je      irq1.40                                         ;yes, reset flag
  2056                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2057                                                          je      irq1.80                                         ;yes, skip ahead
  2058                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2059                                                          je      irq1.80                                         ;yes, skip ahead
  2060                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2061                                                          je      irq1.10                                         ;yes, continue
  2062                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2063                                                          jne     irq1.20                                         ;no, skip ahead
  2064                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2065                                                          jz      irq1.140                                        ;yes, skip ahead
  2066                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2067                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2068                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2069                                                          jz      irq1.140                                        ;yes, skip ahead
  2070                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2071                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2072                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2073                                  irq1.30                 or      bl,al                                           ;set shift flag
  2074                                                          jmp     irq1.60                                         ;skip ahead
  2075                                  irq1.40                 not     al                                              ;convert flag to mask
  2076                                                          and     bl,al                                           ;reset shift flag
  2077                                                          jmp     irq1.60                                         ;skip ahead
  2078                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2079                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2080                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2081                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2082                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2083                                                          jmp     irq1.150                                        ;finish keyboard handling
  2084                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2085                                                          jne     irq1.80                                         ;no continue
  2086                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2087                                                          jz      irq1.140                                        ;yes, skip ahead
  2088                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2089                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2090                                                          mov     ah,al                                           ;copy scan code 1
  2091                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2092                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2093                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2094                                                          jz      irq1.140                                        ;yes, skip ahead
  2095                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2096                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2097                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2098                                                          jz      irq1.140                                        ;yes, skip ahead
  2099                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2100                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2101                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2102                                                          jz      irq1.140                                        ;yes, skip ahead
  2103                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2104                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2105                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2106                                                          jz      irq1.140                                        ;yes, skip ahead
  2107                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2108                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2109                                                          jmp     irq1.150                                        ;continue
  2110                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2111                                                          test    ah,EKEYBUP                                      ;release code?
  2112                                                          jnz     irq1.130                                        ;yes, skip ahead
  2113                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2114                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2115                                                          jz      irq1.90                                         ;no, skip ahead
  2116                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2117                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2118                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2119                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2120                                                          jz      irq1.100                                        ;no skip ahead
  2121                                                          mov     cl,al                                           ;copy ASCII code
  2122                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2123                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2124                                                          jb      irq1.100                                        ;yes, skip ahead
  2125                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2126                                                          ja      irq1.100                                        ;yes, skip ahead
  2127                                                          xor     al,EASCIICASE                                   ;switch case
  2128                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2129                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2130                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2131                                                          jz      irq1.120                                        ;no, skip ahead
  2132                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2133                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2134                                                          or      edx,eax                                         ;msg id and codes
  2135                                                          xor     ecx,ecx                                         ;null param
  2136                                                          push    eax                                             ;save codes
  2137                                                          call    PutMessage                                      ;put message to console
  2138                                                          pop     eax                                             ;restore codes
  2139                                                          test    al,al                                           ;ASCII translation?
  2140                                                          jz      irq1.130                                        ;no, skip ahead
  2141                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2142                                                          and     eax,0FFFFh                                      ;clear high-order word
  2143                                                          or      edx,eax                                         ;msg id and codes
  2144                                                          xor     ecx,ecx                                         ;null param
  2145                                                          call    PutMessage                                      ;put message to console
  2146                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2147                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2148                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2149                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2150                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2151                                                          pop     ds                                              ;restore non-volatile regs
  2152                                                          pop     esi                                             ;
  2153                                                          pop     ecx                                             ;
  2154                                                          pop     ebx                                             ;
  2155                                                          pop     eax                                             ;
  2156                                                          iretd                                                   ;return
  2157                                  ;-----------------------------------------------------------------------------------------------------------------------
  2158                                  ;       Scan-Code to ASCII Translation Tables
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2161                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2162                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2163                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2164                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2165                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2166                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2167                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2168                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2169                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2170                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2171                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2172                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2173                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2174                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2175                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2176                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2177                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2178                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2179                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2180                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2181                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2182                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2183                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2184                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2185                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2186                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2187                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2188                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2189                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2190                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2191                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2192                                  ;-----------------------------------------------------------------------------------------------------------------------
  2193                                  ;
  2194                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2195                                  ;
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                                          menter  iochannel                                       ;secondary 8259A cascade
  2198                                                          push    eax                                             ;save modified regs
  2199                                                          jmp     hwint                                           ;end interrupt and return
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                  ;
  2202                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2203                                  ;
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205                                                          menter  com2                                            ;serial port 2 interrupt
  2206                                                          push    eax                                             ;save modified regs
  2207                                                          jmp     hwint                                           ;end interrupt and return
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209                                  ;
  2210                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2211                                  ;
  2212                                  ;-----------------------------------------------------------------------------------------------------------------------
  2213                                                          menter  com1                                            ;serial port 1 interrupt
  2214                                                          push    eax                                             ;save modified regs
  2215                                                          jmp     hwint                                           ;end interrupt and return
  2216                                  ;-----------------------------------------------------------------------------------------------------------------------
  2217                                  ;
  2218                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2219                                  ;
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2222                                                          push    eax                                             ;save modified regs
  2223                                                          jmp     hwint                                           ;end interrupt and return
  2224                                  ;-----------------------------------------------------------------------------------------------------------------------
  2225                                  ;
  2226                                  ;       IRQ6    Diskette Hardware Interrupt
  2227                                  ;
  2228                                  ;-----------------------------------------------------------------------------------------------------------------------
  2229                                                          menter  diskette                                        ;floppy disk interrupt
  2230                                                          push    eax                                             ;save non-volatile regs
  2231                                                          push    ds                                              ;
  2232                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2233                                                          pop     ds                                              ;... into DS register
  2234                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2235                                                          or      al,10000000b                                    ;set IRQ flag
  2236                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2237                                                          pop     ds                                              ;restore non-volatile regs
  2238                                                          jmp     hwint                                           ;end primary PIC interrupt
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                  ;
  2241                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2242                                  ;
  2243                                  ;-----------------------------------------------------------------------------------------------------------------------
  2244                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2245                                                          push    eax                                             ;save modified regs
  2246                                                          jmp     hwint                                           ;end interrupt and return
  2247                                  ;-----------------------------------------------------------------------------------------------------------------------
  2248                                  ;
  2249                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2250                                  ;
  2251                                  ;-----------------------------------------------------------------------------------------------------------------------
  2252                                                          menter  rtclock                                         ;real-time clock interrupt
  2253                                                          push    eax                                             ;save modified regs
  2254                                                          jmp     hwwint                                          ;end interrupt and return
  2255                                  ;-----------------------------------------------------------------------------------------------------------------------
  2256                                  ;
  2257                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2258                                  ;
  2259                                  ;-----------------------------------------------------------------------------------------------------------------------
  2260                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2261                                                          push    eax                                             ;save modified regs
  2262                                                          jmp     hwwint                                          ;end interrupt and return
  2263                                  ;-----------------------------------------------------------------------------------------------------------------------
  2264                                  ;
  2265                                  ;       IRQ10   Reserved Hardware Interrupt
  2266                                  ;
  2267                                  ;-----------------------------------------------------------------------------------------------------------------------
  2268                                                          menter  irq10                                           ;reserved
  2269                                                          push    eax                                             ;save modified regs
  2270                                                          jmp     hwwint                                          ;end interrupt and return
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                  ;
  2273                                  ;       IRQ11   Reserved Hardware Interrupt
  2274                                  ;
  2275                                  ;-----------------------------------------------------------------------------------------------------------------------
  2276                                                          menter  irq11                                           ;reserved
  2277                                                          push    eax                                             ;save modified regs
  2278                                                          jmp     hwwint                                          ;end interrupt and return
  2279                                  ;-----------------------------------------------------------------------------------------------------------------------
  2280                                  ;
  2281                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2282                                  ;
  2283                                  ;-----------------------------------------------------------------------------------------------------------------------
  2284                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2285                                                          push    eax                                             ;save modified regs
  2286                                                          jmp     hwwint                                          ;end interrupt and return
  2287                                  ;-----------------------------------------------------------------------------------------------------------------------
  2288                                  ;
  2289                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2290                                  ;
  2291                                  ;-----------------------------------------------------------------------------------------------------------------------
  2292                                                          menter  coprocessor                                     ;coprocessor interrupt
  2293                                                          push    eax                                             ;save modified regs
  2294                                                          jmp     hwwint                                          ;end interrupt and return
  2295                                  ;-----------------------------------------------------------------------------------------------------------------------
  2296                                  ;
  2297                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2298                                  ;
  2299                                  ;-----------------------------------------------------------------------------------------------------------------------
  2300                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2301                                                          push    eax                                             ;save modified regs
  2302                                                          jmp     hwwint                                          ;end interrupt and return
  2303                                  ;-----------------------------------------------------------------------------------------------------------------------
  2304                                  ;
  2305                                  ;       IRQ15   Reserved Hardware Interrupt
  2306                                  ;
  2307                                  ;-----------------------------------------------------------------------------------------------------------------------
  2308                                                          menter  irq15                                           ;reserved
  2309                                                          push    eax                                             ;save modified regs
  2310                                                          jmp     hwwint                                          ;end interrupt and return
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312                                  ;
  2313                                  ;       Exit from hardware interrupt
  2314                                  ;
  2315                                  ;-----------------------------------------------------------------------------------------------------------------------
  2316                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2317                                                          jmp     hwint90                                         ;skip ahead
  2318                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2319                                  hwint90                 pop     eax                                             ;restore modified regs
  2320                                                          iretd                                                   ;return from interrupt
  2321                                  ;-----------------------------------------------------------------------------------------------------------------------
  2322                                  ;
  2323                                  ;       INT 30h Operating System Software Service Interrupt
  2324                                  ;
  2325                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2326                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2327                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2328                                  ;       the entry address of the specific function from a table.
  2329                                  ;
  2330                                  ;-----------------------------------------------------------------------------------------------------------------------
  2331                                                          menter  svc
  2332                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2333                                                          jae     svc90                                           ;yes, skip ahead
  2334                                                          movzx   eax,al                                          ;function
  2335                                                          shl     eax,2                                           ;offset into table
  2336                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2337                                  svc90                   iretd                                                   ;return from interrupt
  2338                                  ;-----------------------------------------------------------------------------------------------------------------------
  2339                                  ;
  2340                                  ;       Service Request Table
  2341                                  ;
  2342                                  ;
  2343                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2344                                  ;
  2345                                  ;-----------------------------------------------------------------------------------------------------------------------
  2346                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2347                                                          tsvce   GetConsoleString                                ;get string input
  2348                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2349                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2350                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2351                                  ;-----------------------------------------------------------------------------------------------------------------------
  2352                                  ;
  2353                                  ;       Service Request Macros
  2354                                  ;
  2355                                  ;       These macros provide positional parameterization of service request calls.
  2356                                  ;
  2357                                  ;-----------------------------------------------------------------------------------------------------------------------
  2358                                  %macro                  clearConsoleScreen 0
  2359                                                          mov     al,eClearConsoleScreen                          ;function code
  2360                                                          int     _svc                                            ;invoke OS service
  2361                                  %endmacro
  2362                                  %macro                  getConsoleString 4
  2363                                                          mov     edx,%1                                          ;buffer address
  2364                                                          mov     ecx,%2                                          ;max characters
  2365                                                          mov     bh,%3                                           ;echo indicator
  2366                                                          mov     bl,%4                                           ;terminator
  2367                                                          mov     al,eGetConsoleString                            ;function code
  2368                                                          int     _svc                                            ;invoke OS service
  2369                                  %endmacro
  2370                                  %macro                  placeCursor 0
  2371                                                          mov     al,ePlaceCursor                                 ;function code
  2372                                                          int     _svc                                            ;invoke OS service
  2373                                  %endmacro
  2374                                  %macro                  putConsoleString 1
  2375                                                          mov     edx,%1                                          ;string address
  2376                                                          mov     al,ePutConsoleString                            ;function code
  2377                                                          int     _svc                                            ;invoke OS service
  2378                                  %endmacro
  2379                                  ;=======================================================================================================================
  2380                                  ;
  2381                                  ;       Kernel Function Library
  2382                                  ;
  2383                                  ;=======================================================================================================================
  2384                                  ;=======================================================================================================================
  2385                                  ;
  2386                                  ;       Console Helper Routines
  2387                                  ;
  2388                                  ;       FirstConsoleColumn
  2389                                  ;       GetConsoleChar
  2390                                  ;       GetConsoleString
  2391                                  ;       NextConsoleColumn
  2392                                  ;       NextConsoleRow
  2393                                  ;       PreviousConsoleColumn
  2394                                  ;       PutConsoleChar
  2395                                  ;       PutConsoleHexByte
  2396                                  ;       PutConsoleOIAChar
  2397                                  ;       PutConsoleOIAShift
  2398                                  ;       PutConsoleString
  2399                                  ;       Yield
  2400                                  ;
  2401                                  ;=======================================================================================================================
  2402                                  ;-----------------------------------------------------------------------------------------------------------------------
  2403                                  ;
  2404                                  ;       Routine:        FirstConsoleColumn
  2405                                  ;
  2406                                  ;       Description:    This routine resets the console column to start of the row.
  2407                                  ;
  2408                                  ;       In:             DS      OS data selector
  2409                                  ;
  2410                                  ;-----------------------------------------------------------------------------------------------------------------------
  2411                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2412                                                          mov     [wbConsoleColumn],al                            ;save column
  2413                                                          ret                                                     ;return
  2414                                  ;-----------------------------------------------------------------------------------------------------------------------
  2415                                  ;
  2416                                  ;       Routine:        GetConsoleChar
  2417                                  ;
  2418                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2419                                  ;
  2420                                  ;       Out:            AL      ASCII character code
  2421                                  ;                       AH      keyboard scan code
  2422                                  ;
  2423                                  ;-----------------------------------------------------------------------------------------------------------------------
  2424                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2425                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2426                                                          or      eax,eax                                         ;do we have a message?
  2427                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2428                                                          push    eax                                             ;save key codes
  2429                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2430                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2431                                                          pop     eax                                             ;restore key codes
  2432                                                          jne     GetConsoleChar                                  ;no, try again
  2433                                                          and     eax,0000ffffh                                   ;mask for key codes
  2434                                                          ret                                                     ;return
  2435                                  ;-----------------------------------------------------------------------------------------------------------------------
  2436                                  ;
  2437                                  ;       Routine:        GetConsoleString
  2438                                  ;
  2439                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2440                                  ;
  2441                                  ;       In:             DS:EDX  target buffer address
  2442                                  ;                       ECX     maximum number of characters to accept
  2443                                  ;                       BH      echo to terminal
  2444                                  ;                       BL      terminating character
  2445                                  ;
  2446                                  ;-----------------------------------------------------------------------------------------------------------------------
  2447                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2448                                                          push    esi                                             ;
  2449                                                          push    edi                                             ;
  2450                                                          push    es                                              ;
  2451                                                          push    ds                                              ;load data segment selector ...
  2452                                                          pop     es                                              ;... into extra segment register
  2453                                                          mov     edi,edx                                         ;edi = target buffer
  2454                                                          push    ecx                                             ;save maximum characters
  2455                                                          xor     al,al                                           ;zero register
  2456                                                          cld                                                     ;forward strings
  2457                                                          rep     stosb                                           ;zero fill buffer
  2458                                                          pop     ecx                                             ;maximum characters
  2459                                                          mov     edi,edx                                         ;edi = target buffer
  2460                                                          mov     esi,edx                                         ;esi = target buffer
  2461                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2462                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2463                                                          cmp     al,bl                                           ;is this the terminator?
  2464                                                          je      .50                                             ;yes, exit
  2465                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2466                                                          jne     .30                                             ;no, skip ahead
  2467                                                          cmp     esi,edi                                         ;at start of buffer?
  2468                                                          je      .20                                             ;yes, get next character
  2469                                                          dec     edi                                             ;backup target pointer
  2470                                                          mov     byte [edi],0                                    ;zero previous character
  2471                                                          inc     ecx                                             ;increment remaining chars
  2472                                                          test    bh,1                                            ;echo to console?
  2473                                                          jz      .20                                             ;no, get next character
  2474                                                          call    PreviousConsoleColumn                           ;backup console position
  2475                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2476                                                          call    PutConsoleChar                                  ;write space to console
  2477                                                          call    PlaceCursor                                     ;position the cursor
  2478                                                          jmp     .20                                             ;get next character
  2479                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2480                                                          jb      .20                                             ;no, get another character
  2481                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2482                                                          ja      .20                                             ;no, get another character
  2483                                                          stosb                                                   ;store character in buffer
  2484                                                          test    bh,1                                            ;echo to console?
  2485                                                          jz      .40                                             ;no, skip ahead
  2486                                                          call    PutConsoleChar                                  ;write character to console
  2487                                                          call    NextConsoleColumn                               ;advance console position
  2488                                                          call    PlaceCursor                                     ;position the cursor
  2489                                  .40                     dec     ecx                                             ;decrement remaining chars
  2490                                                          jmp     .10                                             ;next
  2491                                  .50                     xor     al,al                                           ;null
  2492                                                          stosb                                                   ;terminate buffer
  2493                                                          pop     es                                              ;restore non-volatile regs
  2494                                                          pop     edi                                             ;
  2495                                                          pop     esi                                             ;
  2496                                                          pop     ecx                                             ;
  2497                                                          ret                                                     ;return
  2498                                  ;-----------------------------------------------------------------------------------------------------------------------
  2499                                  ;
  2500                                  ;       Routine:        NextConsoleColumn
  2501                                  ;
  2502                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2503                                  ;                       incremented if the end of the current row is reached.
  2504                                  ;
  2505                                  ;       In:             DS      OS data selector
  2506                                  ;
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2509                                                          inc     al                                              ;increment column
  2510                                                          mov     [wbConsoleColumn],al                            ;save column
  2511                                                          cmp     al,ECONCOLS                                     ;end of row?
  2512                                                          jb      .10                                             ;no, skip ahead
  2513                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2514                                                          call    NextConsoleRow                                  ;line feed to next row
  2515                                  .10                     ret                                                     ;return
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  ;
  2518                                  ;       Routine:        NextConsoleRow
  2519                                  ;
  2520                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2521                                  ;
  2522                                  ;       In:             DS      OS data selector
  2523                                  ;
  2524                                  ;-----------------------------------------------------------------------------------------------------------------------
  2525                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2526                                                          inc     al                                              ;increment row
  2527                                                          mov     [wbConsoleRow],al                               ;save row
  2528                                                          cmp     al,ECONROWS                                     ;end of screen?
  2529                                                          jb      .10                                             ;no, skip ahead
  2530                                                          call    ScrollConsoleRow                                ;scroll up one row
  2531                                                          mov     al,[wbConsoleRow]                               ;row
  2532                                                          dec     al                                              ;decrement row
  2533                                                          mov     [wbConsoleRow],al                               ;save row
  2534                                  .10                     ret                                                     ;return
  2535                                  ;-----------------------------------------------------------------------------------------------------------------------
  2536                                  ;
  2537                                  ;       Routine:        PreviousConsoleColumn
  2538                                  ;
  2539                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2540                                  ;                       the column is set to the last position in the row and the row is decremented.
  2541                                  ;
  2542                                  ;       In:             DS      OS data selector
  2543                                  ;
  2544                                  ;-----------------------------------------------------------------------------------------------------------------------
  2545                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2546                                                          or      al,al                                           ;start of row?
  2547                                                          jnz     .10                                             ;no, skip ahead
  2548                                                          mov     ah,[wbConsoleRow]                               ;current row
  2549                                                          or      ah,ah                                           ;top of screen?
  2550                                                          jz      .20                                             ;yes, exit with no change
  2551                                                          dec     ah                                              ;decrement row
  2552                                                          mov     [wbConsoleRow],ah                               ;save row
  2553                                                          mov     al,ECONCOLS                                     ;set maximum column
  2554                                  .10                     dec     al                                              ;decrement column
  2555                                                          mov     [wbConsoleColumn],al                            ;save column
  2556                                  .20                     ret                                                     ;return
  2557                                  ;-----------------------------------------------------------------------------------------------------------------------
  2558                                  ;
  2559                                  ;       Routine:        PutConsoleChar
  2560                                  ;
  2561                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2562                                  ;
  2563                                  ;       In:             AL      ASCII character
  2564                                  ;                       DS      OS data selector
  2565                                  ;
  2566                                  ;-----------------------------------------------------------------------------------------------------------------------
  2567                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2568                                                          push    es                                              ;
  2569                                                          push    EGDTCGA                                         ;load CGA selector ...
  2570                                                          pop     es                                              ;... into extra segment reg
  2571                                                          mov     cl,[wbConsoleColumn]                            ;column
  2572                                                          mov     ch,[wbConsoleRow]                               ;row
  2573                                                          call    SetConsoleChar                                  ;put character at row, column
  2574                                                          pop     es                                              ;restore non-volatile regs
  2575                                                          pop     ecx                                             ;
  2576                                                          ret                                                     ;return
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  ;
  2579                                  ;       Routine:        PutConsoleHexByte
  2580                                  ;
  2581                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2582                                  ;
  2583                                  ;       In:             AL      byte value
  2584                                  ;                       CL      column
  2585                                  ;                       CH      row
  2586                                  ;                       DS      OS data selector
  2587                                  ;                       ES      CGA selector
  2588                                  ;
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2591                                                          mov     bl,al                                           ;save byte value
  2592                                                          shr     al,4                                            ;hi-order nybble
  2593                                                          or      al,030h                                         ;apply ASCII zone
  2594                                                          cmp     al,03ah                                         ;numeric?
  2595                                                          jb      .10                                             ;yes, skip ahead
  2596                                                          add     al,7                                            ;add ASCII offset for alpha
  2597                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  2598                                                          mov     al,bl                                           ;byte value
  2599                                                          and     al,0fh                                          ;lo-order nybble
  2600                                                          or      al,30h                                          ;apply ASCII zone
  2601                                                          cmp     al,03ah                                         ;numeric?
  2602                                                          jb      .20                                             ;yes, skip ahead
  2603                                                          add     al,7                                            ;add ASCII offset for alpha
  2604                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2605                                                          pop     ebx                                             ;restore non-volatile regs
  2606                                                          ret                                                     ;return
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                  ;
  2609                                  ;       Routine:        PutConsoleOIAChar
  2610                                  ;
  2611                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2612                                  ;
  2613                                  ;       In:             DS      OS data selector
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2617                                                          push    ecx                                             ;
  2618                                                          push    esi                                             ;
  2619                                                          push    ds                                              ;
  2620                                                          push    es                                              ;
  2621                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2622                                                          pop     ds                                              ;... into data segment register
  2623                                                          push    EGDTCGA                                         ;load CGA selector ...
  2624                                                          pop     es                                              ;... into extra segment register
  2625                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2626                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2627                                                          mov     bl,0                                            ;starting column
  2628                                                          mov     ecx,6                                           ;maximum scan codes
  2629                                  .10                     push    ecx                                             ;save remaining count
  2630                                                          mov     ecx,ebx                                         ;row, column
  2631                                                          lodsb                                                   ;read scan code
  2632                                                          or      al,al                                           ;scan code present?
  2633                                                          jz      .20                                             ;no, skip ahead
  2634                                                          call    PutConsoleHexByte                               ;display scan code
  2635                                                          jmp     .30                                             ;continue
  2636                                  .20                     mov     al,' '                                          ;ASCII space
  2637                                                          call    SetConsoleChar                                  ;display space
  2638                                                          mov     al,' '                                          ;ASCII space
  2639                                                          call    SetConsoleChar                                  ;display space
  2640                                  .30                     add     bl,2                                            ;next column (+2)
  2641                                                          pop     ecx                                             ;restore remaining
  2642                                                          loop    .10                                             ;next code
  2643                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2644                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2645                                                          jb      .40                                             ;no, skip ahead
  2646                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2647                                                          ja      .40                                             ;no, skip ahead
  2648                                                          mov     ch,bh                                           ;OIA row
  2649                                                          mov     cl,40                                           ;character display column
  2650                                                          call    SetConsoleChar                                  ;display ASCII character
  2651                                  .40                     pop     es                                              ;restore non-volatile regs
  2652                                                          pop     ds                                              ;
  2653                                                          pop     esi                                             ;
  2654                                                          pop     ecx                                             ;
  2655                                                          pop     ebx                                             ;
  2656                                                          ret                                                     ;return
  2657                                  ;-----------------------------------------------------------------------------------------------------------------------
  2658                                  ;
  2659                                  ;       Routine:        PutConsoleOIAShift
  2660                                  ;
  2661                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2662                                  ;
  2663                                  ;       In:             BL      shift flags
  2664                                  ;                       BH      lock flags
  2665                                  ;                       DS      OS data selector
  2666                                  ;
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2669                                                          push    es                                              ;
  2670                                                          push    EGDTCGA                                         ;load CGA selector ...
  2671                                                          pop     es                                              ;... into ES register
  2672                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2673                                                          mov     al,EASCIISPACE                                  ;space is default character
  2674                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2675                                                          jz      .10                                             ;no, skip ahead
  2676                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2677                                  .10                     mov     cl,14                                           ;indicator column
  2678                                                          call    SetConsoleChar                                  ;display ASCII character
  2679                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2680                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2681                                                          jz      .20                                             ;no, skip ahead
  2682                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2683                                  .20                     mov     cl,64                                           ;indicator column
  2684                                                          call    SetConsoleChar                                  ;display ASCII character
  2685                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2686                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2687                                                          jz      .30                                             ;no, skip ahead
  2688                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2689                                  .30                     mov     cl,15                                           ;indicator column
  2690                                                          call    SetConsoleChar                                  ;display ASCII character
  2691                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2692                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2693                                                          jz      .40                                             ;no, skip ahead
  2694                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2695                                  .40                     mov     cl,63                                           ;indicator column
  2696                                                          call    SetConsoleChar                                  ;display ASCII character
  2697                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2698                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2699                                                          jz      .50                                             ;no, skip ahead
  2700                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2701                                  .50                     mov     cl,16                                           ;indicator column
  2702                                                          call    SetConsoleChar                                  ;display ASCII character
  2703                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2704                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2705                                                          jz      .60                                             ;no, skip ahead
  2706                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2707                                  .60                     mov     cl,62                                           ;indicator column
  2708                                                          call    SetConsoleChar                                  ;display ASCII character
  2709                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2710                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2711                                                          jz      .70                                             ;no, skip ahead
  2712                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2713                                  .70                     mov     cl,78                                           ;indicator column
  2714                                                          call    SetConsoleChar                                  ;display ASCII character
  2715                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2716                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2717                                                          jz      .80                                             ;no, skip ahead
  2718                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2719                                  .80                     mov     cl,77                                           ;indicator column
  2720                                                          call    SetConsoleChar                                  ;display ASCII character
  2721                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2722                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2723                                                          jz      .90                                             ;no, skip ahead
  2724                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2725                                  .90                     mov     cl,76                                           ;indicator column
  2726                                                          call    SetConsoleChar                                  ;display ASCII character
  2727                                                          pop     es                                              ;restore non-volatile regs
  2728                                                          pop     ecx                                             ;
  2729                                                          ret                                                     ;return
  2730                                  ;-----------------------------------------------------------------------------------------------------------------------
  2731                                  ;
  2732                                  ;       Routine:        PutConsoleString
  2733                                  ;
  2734                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2735                                  ;                       console position as needed.
  2736                                  ;
  2737                                  ;       In:             EDX     source address
  2738                                  ;                       DS      OS data selector
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2742                                                          mov     esi,edx                                         ;source address
  2743                                                          cld                                                     ;forward strings
  2744                                  .10                     lodsb                                                   ;ASCII character
  2745                                                          or      al,al                                           ;end of string?
  2746                                                          jz      .40                                             ;yes, skip ahead
  2747                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2748                                                          jne     .20                                             ;no, skip ahead
  2749                                                          call    FirstConsoleColumn                              ;move to start of row
  2750                                                          jmp     .10                                             ;next character
  2751                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2752                                                          jne     .30                                             ;no, skip ahead
  2753                                                          call    NextConsoleRow                                  ;move to next row
  2754                                                          jmp     .10                                             ;next character
  2755                                  .30                     call    PutConsoleChar                                  ;output character to console
  2756                                                          call    NextConsoleColumn                               ;advance to next column
  2757                                                          jmp     .10                                             ;next character
  2758                                  .40                     pop     esi                                             ;restore non-volatile regs
  2759                                                          ret                                                     ;return
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761                                  ;
  2762                                  ;       Routine:        Yield
  2763                                  ;
  2764                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2765                                  ;
  2766                                  ;-----------------------------------------------------------------------------------------------------------------------
  2767                                  Yield                   sti                                                     ;enable maskagle interrupts
  2768                                                          hlt                                                     ;halt until external interrupt
  2769                                                          ret                                                     ;return
  2770                                  ;=======================================================================================================================
  2771                                  ;
  2772                                  ;       Message Queue Helper Routines
  2773                                  ;
  2774                                  ;       GetMessage
  2775                                  ;       PutMessage
  2776                                  ;
  2777                                  ;=======================================================================================================================
  2778                                  ;-----------------------------------------------------------------------------------------------------------------------
  2779                                  ;
  2780                                  ;       Routine:        GetMessage
  2781                                  ;
  2782                                  ;       Description:    This routine reads and removes a message from the message queue.
  2783                                  ;
  2784                                  ;       Out:            EAX     lo-order message data
  2785                                  ;                       EDX     hi-order message data
  2786                                  ;
  2787                                  ;                       CY      0 = message read
  2788                                  ;                               1 = no message to read
  2789                                  ;
  2790                                  ;-----------------------------------------------------------------------------------------------------------------------
  2791                                  GetMessage              push    ebx                                             ;save non-volatile regs
  2792                                                          push    ecx                                             ;
  2793                                                          push    ds                                              ;
  2794                                                          push    ELDTMQ                                          ;load message queue selector ...
  2795                                                          pop     ds                                              ;... into data segment register
  2796                                                          mov     ebx,[MQHead]                                    ;head ptr
  2797                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  2798                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2799                                                          or      eax,edx                                         ;is queue empty?
  2800                                                          stc                                                     ;assume queue is emtpy
  2801                                                          jz      .20                                             ;yes, skip ahead
  2802                                                          xor     ecx,ecx                                         ;store zero
  2803                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  2804                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2805                                                          add     ebx,8                                           ;next queue element
  2806                                                          and     ebx,03fch                                       ;at end of queue?
  2807                                                          jnz     .10                                             ;no, skip ahead
  2808                                                          mov     bl,8                                            ;reset to 1st entry
  2809                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2810                                                          clc                                                     ;indicate message read
  2811                                  .20                     pop     ds                                              ;restore non-volatile regs
  2812                                                          pop     ecx                                             ;
  2813                                                          pop     ebx                                             ;
  2814                                                          ret                                                     ;return
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                  ;
  2817                                  ;       Routine:        PutMessage
  2818                                  ;
  2819                                  ;       Description:    This routine adda a message to the message queue.
  2820                                  ;
  2821                                  ;       In:             ECX     hi-order data word
  2822                                  ;                       EDX     lo-order data word
  2823                                  ;
  2824                                  ;       Out:            CY      0 = success
  2825                                  ;                               1 = fail: queue is full
  2826                                  ;
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828                                  PutMessage              push    ds                                              ;save non-volatile regs
  2829                                                          push    ELDTMQ                                          ;load task message queue selector ...
  2830                                                          pop     ds                                              ;... into data segment register
  2831                                                          mov     eax,[MQTail]                                    ;tail ptr
  2832                                                          cmp     dword [eax],0                                   ;is queue full?
  2833                                                          stc                                                     ;assume failure
  2834                                                          jne     .20                                             ;yes, cannot store
  2835                                                          mov     [eax],edx                                       ;store lo-order data
  2836                                                          mov     [eax+4],ecx                                     ;store hi-order data
  2837                                                          add     eax,8                                           ;next queue element adr
  2838                                                          and     eax,03fch                                       ;at end of queue?
  2839                                                          jnz     .10                                             ;no, skip ahead
  2840                                                          mov     al,8                                            ;reset to top of queue
  2841                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2842                                                          clc                                                     ;indicate success
  2843                                  .20                     pop     ds                                              ;restore non-volatile regs
  2844                                                          ret                                                     ;return
  2845                                  ;=======================================================================================================================
  2846                                  ;
  2847                                  ;       Memory-Mapped Video Routines
  2848                                  ;
  2849                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2850                                  ;
  2851                                  ;       ClearConsoleScreen
  2852                                  ;       ScrollConsoleRow
  2853                                  ;       SetConsoleChar
  2854                                  ;
  2855                                  ;=======================================================================================================================
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;       Routine:        ClearConsoleScreen
  2859                                  ;
  2860                                  ;       Description:    This routine clears the console (CGA) screen.
  2861                                  ;
  2862                                  ;-----------------------------------------------------------------------------------------------------------------------
  2863                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2864                                                          push    edi                                             ;
  2865                                                          push    ds                                              ;
  2866                                                          push    es                                              ;
  2867                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2868                                                          pop     ds                                              ;... into DS register
  2869                                                          push    EGDTCGA                                         ;load CGA selector ...
  2870                                                          pop     es                                              ;... into ES register
  2871                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2872                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2873                                                          xor     edi,edi                                         ;target offset
  2874                                                          cld                                                     ;forward strings
  2875                                                          rep     stosd                                           ;reset screen body
  2876                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2877                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2878                                                          rep     stosd                                           ;reset OIA line
  2879                                                          xor     al,al                                           ;zero register
  2880                                                          mov     [wbConsoleRow],al                               ;reset console row
  2881                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2882                                                          call    PlaceCursor                                     ;place cursor at current position
  2883                                                          pop     es                                              ;restore non-volatile regs
  2884                                                          pop     ds                                              ;
  2885                                                          pop     edi                                             ;
  2886                                                          pop     ecx                                             ;
  2887                                                          ret                                                     ;return
  2888                                  ;-----------------------------------------------------------------------------------------------------------------------
  2889                                  ;
  2890                                  ;       Routine:        ScrollConsoleRow
  2891                                  ;
  2892                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2893                                  ;
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2896                                                          push    esi                                             ;
  2897                                                          push    edi                                             ;
  2898                                                          push    ds                                              ;
  2899                                                          push    es                                              ;
  2900                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2901                                                          pop     ds                                              ;... into DS
  2902                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2903                                                          pop     es                                              ;... into ES
  2904                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2905                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2906                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2907                                                          cld                                                     ;forward strings
  2908                                                          rep     movsd                                           ;move 24 lines up
  2909                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2910                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2911                                                          rep     stosd                                           ;clear bottom row
  2912                                                          pop     es                                              ;restore non-volatile regs
  2913                                                          pop     ds                                              ;
  2914                                                          pop     edi                                             ;
  2915                                                          pop     esi                                             ;
  2916                                                          pop     ecx                                             ;
  2917                                                          ret                                                     ;return
  2918                                  ;-----------------------------------------------------------------------------------------------------------------------
  2919                                  ;
  2920                                  ;       Routine:        SetConsoleChar
  2921                                  ;
  2922                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2923                                  ;
  2924                                  ;       In:             AL      ASCII character
  2925                                  ;                       CL      column
  2926                                  ;                       CH      row
  2927                                  ;                       ES      CGA selector
  2928                                  ;
  2929                                  ;       Out:            EAX     last target address written (ES:)
  2930                                  ;                       CL      column + 1
  2931                                  ;
  2932                                  ;-----------------------------------------------------------------------------------------------------------------------
  2933                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2934                                                          movzx   eax,ch                                          ;row
  2935                                                          mov     ah,ECONCOLS                                     ;cols/row
  2936                                                          mul     ah                                              ;row * cols/row
  2937                                                          add     al,cl                                           ;add column
  2938                                                          adc     ah,0                                            ;handle carry
  2939                                                          shl     eax,1                                           ;screen offset
  2940                                                          mov     [es:eax],dl                                     ;store character
  2941                                                          inc     cl                                              ;next column
  2942                                                          ret                                                     ;return
  2943                                  ;=======================================================================================================================
  2944                                  ;
  2945                                  ;       Input/Output Routines
  2946                                  ;
  2947                                  ;       These routines read and/or write directly to ports.
  2948                                  ;
  2949                                  ;       PlaceCursor
  2950                                  ;       PutPrimaryEndOfInt
  2951                                  ;       PutSecondaryEndOfInt
  2952                                  ;       SetKeyboardLamps
  2953                                  ;       WaitForKeyInBuffer
  2954                                  ;       WaitForKeyOutBuffer
  2955                                  ;
  2956                                  ;=======================================================================================================================
  2957                                  ;-----------------------------------------------------------------------------------------------------------------------
  2958                                  ;
  2959                                  ;       Routine:        PlaceCursor
  2960                                  ;
  2961                                  ;       Description:    This routine positions the cursor on the console.
  2962                                  ;
  2963                                  ;       In:             DS      OS data selector
  2964                                  ;
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2967                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2968                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2969                                                          mul     ah                                              ;row offset
  2970                                                          add     al,[wbConsoleColumn]                            ;add column
  2971                                                          adc     ah,0                                            ;add overflow
  2972                                                          mov     ecx,eax                                         ;screen offset
  2973                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2974                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2975                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2976                                                          out     dx,al                                           ;select register
  2977                                                          inc     edx                                             ;data port
  2978                                                          mov     al,ch                                           ;hi-order cursor loc
  2979                                                          out     dx,al                                           ;store hi-order loc
  2980                                                          dec     edx                                             ;register select port
  2981                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2982                                                          out     dx,al                                           ;select register
  2983                                                          inc     edx                                             ;data port
  2984                                                          mov     al,cl                                           ;lo-order cursor loc
  2985                                                          out     dx,al                                           ;store lo-order loc
  2986                                                          pop     ecx                                             ;restore non-volatile regs
  2987                                                          ret                                                     ;return
  2988                                  ;-----------------------------------------------------------------------------------------------------------------------
  2989                                  ;
  2990                                  ;       Routine:        PutPrimaryEndOfInt
  2991                                  ;
  2992                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2993                                  ;
  2994                                  ;-----------------------------------------------------------------------------------------------------------------------
  2995                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2996                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2997                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2998                                                          ret                                                     ;return
  2999                                  ;-----------------------------------------------------------------------------------------------------------------------
  3000                                  ;
  3001                                  ;       Routine:        PutSecondaryEndOfInt
  3002                                  ;
  3003                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3004                                  ;
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3007                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3008                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3009                                                          ret                                                     ;return
  3010                                  ;-----------------------------------------------------------------------------------------------------------------------
  3011                                  ;
  3012                                  ;       Routine:        SetKeyboardLamps
  3013                                  ;
  3014                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3015                                  ;
  3016                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3017                                  ;
  3018                                  ;-----------------------------------------------------------------------------------------------------------------------
  3019                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3020                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3021                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3022                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3023                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3024                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3025                                                          mov     al,bh                                           ;set/reset lamps value
  3026                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3027                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3028                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3029                                                          ret                                                     ;return
  3030                                  ;-----------------------------------------------------------------------------------------------------------------------
  3031                                  ;
  3032                                  ;       Routine:        WaitForKeyInBuffer
  3033                                  ;
  3034                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3035                                  ;
  3036                                  ;       Out:            ZF      1 = Input buffer ready
  3037                                  ;                               0 = Input buffer not ready after timeout
  3038                                  ;
  3039                                  ;-----------------------------------------------------------------------------------------------------------------------
  3040                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3041                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3042                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3043                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3044                                                          loopnz  .10                                             ;yes, repeat till timeout
  3045                                                          pop     ecx                                             ;restore non-volatile regs
  3046                                                          ret                                                     ;return
  3047                                  ;-----------------------------------------------------------------------------------------------------------------------
  3048                                  ;
  3049                                  ;       Routine:        WaitForKeyOutBuffer
  3050                                  ;
  3051                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3052                                  ;
  3053                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3054                                  ;                               0 = Output buffer empty after timeout
  3055                                  ;
  3056                                  ;-----------------------------------------------------------------------------------------------------------------------
  3057                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3058                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3059                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3060                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3061                                                          loopz   .10                                             ;loop until output buffer bit
  3062                                                          pop     ecx                                             ;restore non-volatile regs
  3063                                                          ret                                                     ;return
  3064                                  ;-----------------------------------------------------------------------------------------------------------------------
  3065                                  ;
  3066                                  ;       End of the Kernel Function Library
  3067                                  ;
  3068                                  ;-----------------------------------------------------------------------------------------------------------------------
  3069                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3070                                  ;=======================================================================================================================
  3071                                  ;
  3072                                  ;       Console Task
  3073                                  ;
  3074                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3075                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3076                                  ;       screen and responds to user commands.
  3077                                  ;
  3078                                  ;=======================================================================================================================
  3079                                  ;-----------------------------------------------------------------------------------------------------------------------
  3080                                  ;
  3081                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3082                                  ;
  3083                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3084                                  ;
  3085                                  ;-----------------------------------------------------------------------------------------------------------------------
  3086                                  section                 constack                                                ;console task stack
  3087                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3088                                  ;-----------------------------------------------------------------------------------------------------------------------
  3089                                  ;
  3090                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3091                                  ;
  3092                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3093                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3094                                  ;       16 descriptors. Six are initially defined.
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097                                  section                 conldt                                                  ;console local descriptors
  3098                                                          dq      004093004780007Fh                               ;04 TSS alias
  3099                                                          dq      004093004700007Fh                               ;0c LDT alias
  3100                                                          dq      00409300400006FFh                               ;14 stack
  3101                                                          dq      00CF93000000FFFFh                               ;1c data
  3102                                                          dq      00409B0050000FFFh                               ;24 code
  3103                                                          dq      00409300480007FFh                               ;2c message queue
  3104                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3105                                  ;-----------------------------------------------------------------------------------------------------------------------
  3106                                  ;
  3107                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3108                                  ;
  3109                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3110                                  ;       segment. CS to console code.
  3111                                  ;
  3112                                  ;-----------------------------------------------------------------------------------------------------------------------
  3113                                  section                 contss                                                  ;console task state segment
  3114                                                          dd      0                                               ;00 back-link tss
  3115                                                          dd      0700h                                           ;04 esp ring 0
  3116                                                          dd      0014h                                           ;08 ss ring 0
  3117                                                          dd      0700h                                           ;0c esp ring 1
  3118                                                          dd      0014h                                           ;10 es ring 1
  3119                                                          dd      0700h                                           ;14 esp ring 2
  3120                                                          dd      0014h                                           ;18 ss ring 2
  3121                                                          dd      0                                               ;1c cr ring 3
  3122                                                          dd      0                                               ;20 eip
  3123                                                          dd      0200h                                           ;24 eflags
  3124                                                          dd      0                                               ;28 eax
  3125                                                          dd      0                                               ;2c ecx
  3126                                                          dd      0                                               ;30 edx
  3127                                                          dd      0                                               ;34 ebx
  3128                                                          dd      0700h                                           ;38 esp ring 3
  3129                                                          dd      0                                               ;3c ebp
  3130                                                          dd      0                                               ;40 esi
  3131                                                          dd      0                                               ;44 edi
  3132                                                          dd      001Ch                                           ;48 es
  3133                                                          dd      0024h                                           ;4c cs
  3134                                                          dd      0014h                                           ;50 ss ring 3
  3135                                                          dd      001Ch                                           ;54 ds
  3136                                                          dd      0                                               ;58 fs
  3137                                                          dd      0                                               ;5c gs
  3138                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3139                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3140                                  ;-----------------------------------------------------------------------------------------------------------------------
  3141                                  ;
  3142                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3143                                  ;
  3144                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3145                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3146                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3147                                  ;       event.
  3148                                  ;
  3149                                  ;-----------------------------------------------------------------------------------------------------------------------
  3150                                  section                 conmque                                                 ;console message queue
  3151                                                          dd      8                                               ;head pointer
  3152                                                          dd      8                                               ;tail pointer
  3153                                                          times   510 dd 0                                        ;queue elements
  3154                                  ;-----------------------------------------------------------------------------------------------------------------------
  3155                                  ;
  3156                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3157                                  ;
  3158                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3159                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3160                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3161                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3162                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3163                                  ;       board input, echoing to the console screen and responding to user commands.
  3164                                  ;
  3165                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3166                                  ;
  3167                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3168                                  ;                               |  Real Mode Interrupt Vectors                  |
  3169                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3170                                  ;                               |  Reserved BIOS Memory Area                    |
  3171                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3172                                  ;                               |  Shared Kernel Memory Area                    |
  3173                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3174                                  ;                               |  Global Descriptor Table (GDT)                |
  3175                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3176                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3177                                  ;                       002000  +-----------------------------------------------+
  3178                                  ;                               |  Interrupt Handlers                           |
  3179                                  ;                               |  Kernel Function Library                      |
  3180                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3181                                  ;                               |  Console Task Stack Area                      |
  3182                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3183                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3184                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3185                                  ;                               |  Console Task Task State Segment (TSS)        |
  3186                                  ;                       004800  +-----------------------------------------------+
  3187                                  ;                               |  Console Task Message Queue                   |
  3188                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3189                                  ;                               |  Console Task Code                            |
  3190                                  ;                               |  Console Task Constants                       |
  3191                                  ;                       006000  +===============================================+
  3192                                  ;
  3193                                  ;-----------------------------------------------------------------------------------------------------------------------
  3194                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3195                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3196                                  
  3197                                                          clearConsoleScreen                                      ;clear the console screen
  3198                                                          putConsoleString czTitle                                ;display startup message
  3199                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3200                                                          placeCursor                                             ;set CRT cursor location
  3201                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3202                                                          putConsoleString czNewLine                              ;newline
  3203                                                          putConsoleString wzConsoleInBuffer                      ;print entered command
  3204                                                          putConsoleString czNewLine                              ;new line
  3205                                                          putConsoleString czUnknownCommand                       ;display error message
  3206                                  
  3207                                                          jmp     .10                                             ;next command
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;       Routine:        ConInitializeData
  3211                                  ;
  3212                                  ;       Description:    This routine initializes console task variables.
  3213                                  ;
  3214                                  ;-----------------------------------------------------------------------------------------------------------------------
  3215                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3216                                                          push    edi                                             ;
  3217                                                          push    es                                              ;
  3218                                  ;
  3219                                  ;       Initialize console work areas.
  3220                                  ;
  3221                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3222                                                          pop     es                                              ;... into extra segment register
  3223                                                          mov     edi,ECONDATA                                    ;OS console data address
  3224                                                          xor     al,al                                           ;initialization value
  3225                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3226                                                          cld                                                     ;forward strings
  3227                                                          rep     stosb                                           ;initialize data
  3228                                  ;
  3229                                  ;       Restore and return.
  3230                                  ;
  3231                                                          pop     es                                              ;restore non-volatile regs
  3232                                                          pop     edi                                             ;
  3233                                                          pop     ecx                                             ;
  3234                                                          ret                                                     ;return
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236                                  ;
  3237                                  ;       Constants
  3238                                  ;
  3239                                  ;-----------------------------------------------------------------------------------------------------------------------
  3240                                  czNewLine               db      13,10,0                                         ;new line string
  3241                                  czPrompt                db      ":",0                                           ;prompt string
  3242                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3243                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3244                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3245                                  %endif
  3246                                  %ifdef BUILDDISK
  3247                                  ;-----------------------------------------------------------------------------------------------------------------------
  3248                                  ;
  3249                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3250                                  ;
  3251                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3252                                  ;
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  section                 unused                                                  ;unused disk space
  3255                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3256                                  %endif
  3257                                  ;=======================================================================================================================
  3258                                  ;
  3259                                  ;       End of Program Code
  3260                                  ;
  3261                                  ;=======================================================================================================================
