     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.006
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;                       are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;                       console task.
    10                                  ;
    11                                  ;       Revised:        July 4, 2018
    12                                  ;
    13                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    19                                  ;
    20                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;=======================================================================================================================
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;       Assembly Directives
    26                                  ;
    27                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    36                                  %define BUILDBOOT                                                               ;... build the boot sector
    37                                  %define BUILDCOM                                                                ;... and the OS kernel
    38                                  %endif
    39                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    40                                  %define BUILDBOOT                                                               ;... also build the boot sector
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;       Conventions
    45                                  ;
    46                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    47                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    48                                  ;                       Assembly operands begin in column 33.
    49                                  ;                       Inline comments begin in column 81.
    50                                  ;                       Lines should not extend beyond column 120.
    51                                  ;
    52                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    53                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    54                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    55                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    56                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    57                                  ;                       ouput buffers, respectively.
    58                                  ;
    59                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    60                                  ;                       Negative relative call or jump addresses indicate reuse.
    61                                  ;
    62                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    63                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    64                                  ;                       Register names in comments are in upper case (EAX, EDI).
    65                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    66                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    67                                  ;                       register contents on entry and exit.
    68                                  ;
    69                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    70                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    71                                  ;                       The 2nd letter of the constant label indicates the storage type.
    72                                  ;
    73                                  ;                       cq......        constant quad-word (dq)
    74                                  ;                       cd......        constant double-word (dd)
    75                                  ;                       cw......        constant word (dw)
    76                                  ;                       cb......        constant byte (db)
    77                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    78                                  ;
    79                                  ;       Instructions:   32-bit instructions are generally favored.
    80                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    81                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    82                                  ;
    83                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    84                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    85                                  ;
    86                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    87                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    88                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    89                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    90                                  ;                       Octal literal values are avoided.
    91                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    92                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    93                                  ;
    94                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    95                                  ;                       Macro names describe an action and so DO begin with a verb.
    96                                  ;
    97                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    98                                  ;                       Buffers are kept to as small a size as practicable.
    99                                  ;                       Data and code intermingling is avoided wherever possible.
   100                                  ;
   101                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   102                                  ;                       Register names in source code are in lower case (eax, edx).
   103                                  ;
   104                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   105                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   106                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   107                                  ;
   108                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   109                                  ;                       Routine names begin with a verb (Get, Read, Load).
   110                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   111                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   112                                  ;                       function but begin with a leading underscore (_) character.
   113                                  ;
   114                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   115                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   116                                  ;
   117                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   118                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   119                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   120                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   121                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   122                                  ;
   123                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   124                                  ;                       The 2nd letter of the variable label indicates the storage type.
   125                                  ;
   126                                  ;                       wq......        variable quad-word (resq)
   127                                  ;                       wd......        variable double-word (resd)
   128                                  ;                       ww......        variable word (resw)
   129                                  ;                       wb......        variable byte (resb)
   130                                  ;                       ws......        writable structure
   131                                  ;
   132                                  ;-----------------------------------------------------------------------------------------------------------------------
   133                                  ;=======================================================================================================================
   134                                  ;
   135                                  ;       Equates
   136                                  ;
   137                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   138                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   139                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   140                                  ;       sets. Equates here are defined in the following groupings:
   141                                  ;
   142                                  ;       Hardware-Defined Values
   143                                  ;
   144                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   145                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   146                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   147                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   148                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   149                                  ;       EX86...         Intel x86 CPU architecture values
   150                                  ;
   151                                  ;       Firmware-Defined Values
   152                                  ;
   153                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   154                                  ;
   155                                  ;       Standards-Based Values
   156                                  ;
   157                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   158                                  ;
   159                                  ;       Operating System Values
   160                                  ;
   161                                  ;       EBOOT...        Boot sector and loader values
   162                                  ;       ECON...         Console values (dimensions and attributes)
   163                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   164                                  ;       EKEYF...        Keyboard status flags
   165                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   166                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   272                                  ;
   273                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   274                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   275                                  ;
   276                                  ;       0.......        Segment is not present in memory (triggers int 11)
   277                                  ;       1.......        Segment is present in memory
   278                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   279                                  ;       ...0....        Segment is a system segment
   280                                  ;       ...00010                Local Descriptor Table
   281                                  ;       ...00101                Task Gate
   282                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   283                                  ;       ...01100                Call Gate (386)
   284                                  ;       ...01110                Interrupt Gate (386)
   285                                  ;       ...01111                Trap Gate (386)
   286                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   287                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   288                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   292                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   293                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   294                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   295                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   296                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   297                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   298                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;
   301                                  ;       Firmware-Defined Values
   302                                  ;
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;
   306                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   307                                  ;
   308                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   309                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   310                                  ;
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   313                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   314                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   315                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   316                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   317                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   318                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   319                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   320                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   321                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   322                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       Standards-Based Values
   326                                  ;
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       ASCII                                                                   EASCII...
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   334                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   335                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   336                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   337                                  EASCIISPACE             equ     020h                                            ;space
   338                                  EASCIIUPPERA            equ     041h                                            ;'A'
   339                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   340                                  EASCIITILDE             equ     07Eh                                            ;'~'
   341                                  EASCIICASE              equ     00100000b                                       ;case bit
   342                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  ;
   345                                  ;       Operating System Values
   346                                  ;
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  ;
   350                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   351                                  ;
   352                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   353                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   357                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   358                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   359                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   360                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   361                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   362                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ;       Console Constants                                                       ECON...
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  ECONCOLS                equ     80                                              ;columns per row
   367                                  ECONROWS                equ     24                                              ;console rows
   368                                  ECONOIAROW              equ     24                                              ;operator information area row
   369                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   370                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   371                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   372                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   373                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   376                                  ;-----------------------------------------------------------------------------------------------------------------------
   377                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   378                                  EGDTCGA                 equ     020h                                            ;cga video selector
   379                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   380                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   381                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   382                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   383                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   384                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  ;       Keyboard Flags                                                          EKEYF...
   387                                  ;-----------------------------------------------------------------------------------------------------------------------
   388                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   389                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   390                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   391                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   392                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   393                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   394                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   395                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   396                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   397                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   398                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  ;       Kernel Constants                                                        EKRN...
   401                                  ;-----------------------------------------------------------------------------------------------------------------------
   402                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   403                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   404                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   405                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;       Message Identifiers                                                     EMSG...
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   414                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   415                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   416                                  ;=======================================================================================================================
   417                                  ;
   418                                  ;       Structures
   419                                  ;
   420                                  ;=======================================================================================================================
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  ;
   423                                  ;       MQUEUE
   424                                  ;
   425                                  ;       The MQUEUE structure maps memory used for a message queue.
   426                                  ;
   427                                  ;-----------------------------------------------------------------------------------------------------------------------
   428                                  struc                   MQUEUE
   429 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   430 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   431 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   432                                  endstruc
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;
   435                                  ;       OSDATA
   436                                  ;
   437                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   438                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   439                                  ;
   440                                  ;-----------------------------------------------------------------------------------------------------------------------
   441                                  struc                   OSDATA
   442 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   443 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   444 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   445 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   446 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   447 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   448 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   449 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   450 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   451 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   452 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   453 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   454 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   455 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   456 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   457 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   458 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   459 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   460 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   461 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   462 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   463 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   464 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   465 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   466 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   467 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   468 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   469 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   470 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   471 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   472 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   473 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   474 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   475 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   476 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   477 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   478 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   479 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   480 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   481 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   482 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   483 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   484 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   485 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   486 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   487 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   488 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   489 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   490 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   491 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   492 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   493 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   494 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   495 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   496 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   497 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   498 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   499 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   500 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   501 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   502 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   503 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   504 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   505 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   506 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   507 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   508 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   509 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   510 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   511 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   512 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   513 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   514 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   515 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   516 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   517 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   518 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   519 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   520 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   521 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   522 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   523 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   524 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   525 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   526 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   527 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   528 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   529 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   530 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   531 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   532 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   533 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   534 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   535 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   536 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   537 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   538 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   539 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   540 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   541 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   542 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   546                                  ;
   547                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   548                                  ;
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  ECONDATA                equ     ($)
   551 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   552 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   553 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   554 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   555 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   556 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   557 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   558 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   559 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   560 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   561 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   562 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   563 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   564                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   565                                  ;-----------------------------------------------------------------------------------------------------------------------
   566                                  ;
   567                                  ;       End of OS Variables
   568                                  ;
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  endstruc
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  ;
   573                                  ;       Macros
   574                                  ;
   575                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   576                                  ;
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  %macro                  mint    1
   579                                  _%1                     equ     ($-$$) / EX86DESCLEN
   580                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   581                                  %endmacro
   582                                  %macro                  mtrap   1
   583                                  _%1                     equ     ($-$$) / EX86DESCLEN
   584                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   585                                  %endmacro
   586                                  %macro                  menter  1
   587                                  ?%1                     equ     ($-$$)
   588                                  %endmacro
   589                                  %macro                  tsvce   1
   590                                  e%1                     equ     ($-tsvc)/4
   591                                                          dd      %1
   592                                  %endmacro
   593                                  %ifdef BUILDBOOT
   594                                  ;=======================================================================================================================
   595                                  ;
   596                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   597                                  ;
   598                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   599                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   600                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   601                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   602                                  ;
   603                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   604                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   605                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   606                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   607                                  ;       immediately followed by a disk parameter table.
   608                                  ;
   609                                  ;=======================================================================================================================
   610                                                          cpu     8086                                            ;assume minimal CPU
   611                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   612                                                          bits    16                                              ;16-bit code at power-up
   613                                  %ifdef BUILDPREP
   614 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   615                                  %else
   616                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   617                                  %endif
   618                                  ;-----------------------------------------------------------------------------------------------------------------------
   619                                  ;
   620                                  ;       Disk Parameter Table
   621                                  ;
   622                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   623                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   624                                  ;
   625                                  ;-----------------------------------------------------------------------------------------------------------------------
   626 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   627 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   628 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   629 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   630 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   631 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   632 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   633 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   634 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   635                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   636 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   637 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   638 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   639                                  ;
   640                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   641                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   642                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   643                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   644                                  ;       given several possible starting values for CS:IP.
   645                                  ;
   646                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   647 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   648                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   649 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   650 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   651 00000025 B104                                            mov     cl,4                                            ;shift count
   652 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   653 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   654 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   655                                  ;
   656                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   657                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   658                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   659                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   660                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   661                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   662                                  ;
   663 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   664 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   665 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   666 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   667 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   668                                  ;
   669                                  ;       Our boot addressability is now set up according to the following diagram.
   670                                  ;
   671                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   672                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   673                                  ;                               |  256 = 100h bytes                             |
   674                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   675                                  ;                               |  Boot Sector (vstart=0100h)                   |
   676                                  ;                               |  1 sector = 512 = 200h bytes                  |
   677                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   678                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   679                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   680                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   681                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   682                                  ;                               |  2 sectors = 1024 = 400h bytes
   683                                  ;                       009400  +-----------------------------------------------+ DS:1900
   684                                  ;
   685                                  ;       On entry, DL indicates the drive being booted from.
   686                                  ;
   687 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   688                                  ;
   689                                  ;       Compute directory i/o buffer address.
   690                                  ;
   691 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   692 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   693 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   694 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   695                                  ;
   696                                  ;       Compute segment where os.com will be loaded.
   697                                  ;
   698 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   699 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   700 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   701 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   702                                  ;
   703                                  ;       Set the video mode to 80 column, 25 row, text.
   704                                  ;
   705 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   706 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   707                                  ;
   708                                  ;       Write a message to the console so we know we have our addressability established.
   709                                  ;
   710 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   711 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   712                                  ;
   713                                  ;       Initialize the number of directory sectors to search.
   714                                  ;
   715 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   716 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   717                                  ;
   718                                  ;       Compute number of directory sectors and initialize overhead count.
   719                                  ;
   720 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   721 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   722 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   723 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   724                                  ;
   725                                  ;       Compute directory entries per sector.
   726                                  ;
   727 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   728 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   729 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   730                                  ;
   731                                  ;       Compute first logical directory sector and update overhead count.
   732                                  ;
   733 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   734 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   735 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   736 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   737 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   738 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   739                                  ;
   740                                  ;       Read directory sector.
   741                                  ;
   742 0000008E B001                    .30                     mov     al,1                                            ;sector count
   743 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   744 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   745 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   746                                  ;
   747                                  ;       Setup variables to search this directory sector.
   748                                  ;
   749 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   750 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   751 000000A1 7603                                            jna     .40                                             ;no, continue
   752 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   753 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   754 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   755 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   756                                  ;
   757                                  ;       Loop through directory sectors searching for kernel program.
   758                                  ;
   759 000000B1 56                      .50                     push    si                                              ;save kernel name address
   760 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   761 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   762 000000B6 FC                                              cld                                                     ;forward strings
   763 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   764 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   765 000000BA 5E                                              pop     si                                              ;restore kernel name address
   766 000000BB 7418                                            je      .60                                             ;exit loop if found
   767 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   768 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   769 000000C2 75ED                                            jnz     .50                                             ;next entry
   770                                  ;
   771                                  ;       Repeat search if we are not at the end of the directory.
   772                                  ;
   773 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   774 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   775 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   776 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   777 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   778                                  ;
   779                                  ;       If we find the kernel program in the directory, read the FAT.
   780                                  ;
   781 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   782 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   783 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   784 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   785 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   786 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   787                                  ;
   788                                  ;       Get the starting cluster of the kernel program and target address.
   789                                  ;
   790 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   791 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   792                                  ;
   793                                  ;       Read each program cluster into RAM.
   794                                  ;
   795 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   796 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   797 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   798 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   799 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   800 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   801 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   802 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   803 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   804                                  ;
   805                                  ;       Update buffer pointer for next cluster.
   806                                  ;
   807 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   808 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   809 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   810 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   811 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   812                                  ;
   813                                  ;       Compute next cluster number.
   814                                  ;
   815 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   816 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   817 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   818 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   819 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   820 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   821 00000120 83E701                                          and     di,1                                            ;get low bit
   822 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   823 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   824 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   825                                  ;
   826                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   827                                  ;
   828 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   829 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   830 00000130 B104                                            mov     cl,4                                            ;shift count
   831 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   832 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   833 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   834 0000013A 75B2                                            jne     .70                                             ;no, continue
   835                                  ;
   836                                  ;       Transfer control to the operating system program.
   837                                  ;
   838 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   839 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   840 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   841                                  ;
   842                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   843                                  ;
   844 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   845 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   846 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   847 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   848 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   849 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   850 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   851 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   852 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   853 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   854                                  ;
   855                                  ;       Try maxtries times to read sector.
   856                                  ;
   857 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   858 00000160 53                      .10                     push    bx                                              ;save buffer address
   859 00000161 51                                              push    cx                                              ;save retry count
   860 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   861 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   862 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   863 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   864 0000016F 59                                              pop     cx                                              ;restore retry count
   865 00000170 5B                                              pop     bx                                              ;restore buffer address
   866 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   867 00000173 E2EB                                            loop    .10                                             ;retry
   868                                  ;
   869                                  ;       Handle disk error: convert to ASCII and store in error string.
   870                                  ;
   871 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   872 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   873 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   874 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   875 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   876 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   877 00000183 7203                                            jb      .20                                             ;continue if numeral
   878 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   879 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   880 0000018A 7203                                            jb      .30                                             ;continue if numeral
   881 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   882 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   883 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   884 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   885                                  ;
   886                                  ;       Wait for a key press.
   887                                  ;
   888 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   889 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   890 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   891 0000019E FB                                              sti                                                     ;enable maskable interrupts
   892 0000019F F4                                              hlt                                                     ;wait for interrupt
   893 000001A0 EBF6                                            jmp     .10                                             ;repeat
   894                                  ;
   895                                  ;       Reset the system.
   896                                  ;
   897 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   898 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   899 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   900 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   901 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   902                                  ;
   903                                  ;       Display text message.
   904                                  ;
   905 000001AA FC                      BootPrint               cld                                                     ;forward strings
   906 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   907 000001AC 84C0                                            test    al,al                                           ;end of string?
   908 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   909 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   910 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   911 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   912 000001B6 C3                      BootReturn              ret                                                     ;return
   913                                  ;-----------------------------------------------------------------------------------------------------------------------
   914                                  ;
   915                                  ;       Constants
   916                                  ;
   917                                  ;-----------------------------------------------------------------------------------------------------------------------
   918 000001B7 90                                              align   2
   919 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   920 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   920 000001C3 4F4D               
   921 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   921 000001CE 530D0A00           
   922 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   922 000001DB 7220               
   923 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   924 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   924 000001E9 6700               
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926                                  ;
   927                                  ;       Work Areas
   928                                  ;
   929                                  ;-----------------------------------------------------------------------------------------------------------------------
   930 000001EB 90                                              align   2
   931 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   932 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   933 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   934 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   935 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   936                                  wwReadCountCommand      equ     $                                               ;read count and command
   937 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   938 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   939                                  wwDriveHead             equ     $                                               ;drive, head (word)
   940 000001F8 00                      wbDrive                 db      0                                               ;drive
   941 000001F9 00                      wbHead                  db      0                                               ;head
   942                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   943 000001FA 00                                              db      0                                               ;sector
   944 000001FB 00                      wbTrack                 db      0                                               ;track
   945 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   946 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   947                                  %endif
   948                                  %ifdef BUILDPREP
   949                                  ;=======================================================================================================================
   950                                  ;
   951                                  ;       Diskette Preparation Code
   952                                  ;
   953                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   954                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   955                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   956                                  ;
   957                                  ;=======================================================================================================================
   958                                  ;
   959                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   960                                  ;
   961 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   962 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   963                                  ;
   964                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   965                                  ;
   966 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   967 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   968 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   969 0000020C FB                                              sti                                                     ;enable interrupts
   970 0000020D F4                                              hlt                                                     ;wait for interrupt
   971 0000020E EBF6                                            jmp     .10                                             ;repeat
   972 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   973 00000212 7407                                            je      .30                                             ;yes, branch
   974 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   975 00000216 75EE                                            jne     .10                                             ;no, repeat
   976 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
   977                                  ;
   978                                  ;       Display writing-sector message and patch the JMP instruction.
   979                                  ;
   980 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   981 0000021E E889FF                                          call    BootPrint                                       ;display message
   982 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   983 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   984 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   985                                  ;
   986                                  ;       Try to read the boot sector.
   987                                  ;
   988 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   989 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   990 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   991 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   992 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
   993 00000236 B001                                            mov     al,1                                            ;one sector
   994 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
   995 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
   996 0000023C 59                                              pop     cx                                              ;restore remaining retries
   997 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
   998 0000023F E2EB                                            loop    .40                                             ;try again
   999 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1000 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1001                                  ;
  1002                                  ;       Copy diskette parms from input buffer to output buffer.
  1003                                  ;
  1004 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1005 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1006 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1007 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1008 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1009 00000255 FC                                              cld                                                     ;forward string copies
  1010 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1011                                  ;
  1012                                  ;       Try to write boot sector to diskette.
  1013                                  ;
  1014 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1015 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1016 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1017 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1018 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1019 00000265 B001                                            mov     al,1                                            ;one sector
  1020 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1021 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1022 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1023 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1024 0000026E E2EB                                            loop    .60                                             ;try again
  1025 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1026                                  ;
  1027                                  ;       Convert the error code to ASCII and display the error message.
  1028                                  ;
  1029 00000273 50                      .70                     push    ax                                              ;save error code
  1030 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1031 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1032 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1033 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1034 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1035 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1036 00000282 7203                                            jb      .80                                             ;yes, continue
  1037 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1038 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1039 00000289 7202                                            jb      .90                                             ;yes, continue
  1040 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1041 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1042 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1043 00000293 58                                              pop     ax                                              ;restore error code
  1044                                  ;
  1045                                  ;       Display the completion message.
  1046                                  ;
  1047 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1048 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1049 00000299 3C00                                            cmp     al,0                                            ;success?
  1050 0000029B 7426                                            je      .110                                            ;yes, continue
  1051 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1052 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1053 000002A2 741F                                            je      .110                                            ;yes, continue
  1054 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1055 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1056 000002A9 7418                                            je      .110                                            ;yes, continue
  1057 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1058 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1059 000002B0 7411                                            je      .110                                            ;yes, continue
  1060 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1061 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1062 000002B7 740A                                            je      .110                                            ;yes, continue
  1063 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1064 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1065 000002BE 7403                                            je      .110                                            ;yes, continue
  1066 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1067 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1068 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1069 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1070 000002CB C3                                              ret                                                     ;return (should not execute)
  1071                                  ;-----------------------------------------------------------------------------------------------------------------------
  1072                                  ;
  1073                                  ;       Diskette Preparation Messages
  1074                                  ;
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1076 000002D5 5320426F6F742D4469-
  1076 000002DE 736B65747465205072-
  1076 000002E7 657061726174696F6E-
  1076 000002F0 2050726F6772616D   
  1077 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1077 00000301 687420284329203230-
  1077 0000030A 31302D323031382044-
  1077 00000313 61766964204A2E2057-
  1077 0000031C 616C6C696E672E2041-
  1077 00000325 6C6C20726967687473-
  1077 0000032E 207265736572766564-
  1077 00000337 2E                 
  1078 00000338 0D0A                                            db      13,10
  1079 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1079 00000343 6F6772616D206F7665-
  1079 0000034C 727772697465732074-
  1079 00000355 686520626F6F742073-
  1079 0000035E 6563746F72206F6620-
  1079 00000367 61206469736B657474-
  1079 00000370 652077697468207374-
  1079 00000379 617274757020636F64-
  1079 00000382 652074686174       
  1080 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1080 00000391 616420746865206F70-
  1080 0000039A 65726174696E672073-
  1080 000003A3 797374656D20696E74-
  1080 000003AC 6F206D656D6F727920-
  1080 000003B5 7768656E2074686520-
  1080 000003BE 636F6D707574657220-
  1080 000003C7 697320726573746172-
  1080 000003D0 7465642E           
  1081 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1081 000003DD 6565642C20706C6163-
  1081 000003E6 65206120666F726D61-
  1081 000003EF 74746564206469736B-
  1081 000003F8 6574746520696E746F-
  1081 00000401 20647269766520413A-
  1081 0000040A 20616E642070726573-
  1081 00000413 732074686520456E74-
  1081 0000041C 6572206B65792E     
  1082 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1082 0000042C 20746869732070726F-
  1082 00000435 6772616D2077697468-
  1082 0000043E 6F7574207072657061-
  1082 00000447 72696E672061206469-
  1082 00000450 736B657474652C2070-
  1082 00000459 726573732074686520-
  1082 00000462 457363617065206B65-
  1082 0000046B 792E               
  1083 0000046D 0D0A00                                          db      13,10,0
  1084 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1084 00000479 2074686520626F6F74-
  1084 00000482 20736563746F722074-
  1084 0000048B 6F2074686520646973-
  1084 00000494 6B65747465202E2E2E 
  1085 0000049D 0D0A00                                          db      13,10,0
  1086 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1086 000004A9 6F722D636F6465202E-
  1086 000004B2 2E2077617320726574-
  1086 000004BB 75726E65642066726F-
  1086 000004C4 6D207468652042494F-
  1086 000004CD 53207768696C652072-
  1086 000004D6 656164696E67206672-
  1086 000004DF 6F6D20746865206469-
  1086 000004E8 736B2E             
  1087 000004EB 0D0A00                                          db      13,10,0
  1088 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1088 000004F7 6F722D636F6465202E-
  1088 00000500 2E2077617320726574-
  1088 00000509 75726E65642066726F-
  1088 00000512 6D207468652042494F-
  1088 0000051B 53207768696C652077-
  1088 00000524 726974696E6720746F-
  1088 0000052D 20746865206469736B-
  1088 00000536 2E                 
  1089 00000537 0D0A00                                          db      13,10,0
  1090 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1090 00000543 742D736563746F7220-
  1090 0000054C 776173207772697474-
  1090 00000555 656E20746F20746865-
  1090 0000055E 206469736B65747465-
  1090 00000567 2E204265666F726520-
  1090 00000570 626F6F74696E672079-
  1090 00000579 6F757220636F6D7075-
  1090 00000582 7465722077697468   
  1091 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1091 00000593 736B657474652C206D-
  1091 0000059C 616B65207375726520-
  1091 000005A5 746861742074686520-
  1091 000005AE 66696C65204F532E43-
  1091 000005B7 4F4D20697320636F70-
  1091 000005C0 696564206F6E746F20-
  1091 000005C9 746865206469736B65-
  1091 000005D2 7474652E           
  1092 000005D6 0D0A00                                          db      13,10,0
  1093 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1093 000005E2 76616C696420446973-
  1093 000005EB 6B20506172616D6574-
  1093 000005F4 6572               
  1094 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1094 000005FF 20616E20696E746572-
  1094 00000608 6E616C206572726F72-
  1094 00000611 206361757365642062-
  1094 0000061A 7920616E20696E7661-
  1094 00000623 6C69642076616C7565-
  1094 0000062C 206265696E67207061-
  1094 00000635 7373656420746F2061-
  1094 0000063E 2073797374656D     
  1095 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1095 0000064E 6E2E20546865204F53-
  1095 00000657 424F4F542E434F4D20-
  1095 00000660 66696C65206D617920-
  1095 00000669 626520636F72727570-
  1095 00000672 742E20436F7079206F-
  1095 0000067B 7220646F776E6C6F61-
  1095 00000684 64207468652066696C-
  1095 0000068D 6520616761696E     
  1096 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1096 0000069D 72792E             
  1097 000006A0 0D0A00                                          db      13,10,0
  1098 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1098 000006AC 6472657373204D6172-
  1098 000006B5 6B204E6F7420466F75-
  1098 000006BE 6E64               
  1099 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1099 000006C9 726F7220696E646963-
  1099 000006D2 617465732061207068-
  1099 000006DB 79736963616C207072-
  1099 000006E4 6F626C656D20776974-
  1099 000006ED 682074686520666C6F-
  1099 000006F6 707079206469736B65-
  1099 000006FF 7474652E20506C6561-
  1099 00000708 7365207265747279   
  1100 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1100 00000719 6E6F74686572206469-
  1100 00000722 736B657474652E     
  1101 00000729 0D0A00                                          db      13,10,0
  1102 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1102 00000735 6F7465637465642044-
  1102 0000073E 69736B             
  1103 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1103 0000074A 726F72206973207573-
  1103 00000753 75616C6C7920636175-
  1103 0000075C 736564206279206174-
  1103 00000765 74656D7074696E6720-
  1103 0000076E 746F20777269746520-
  1103 00000777 746F20612077726974-
  1103 00000780 652D70726F74656374-
  1103 00000789 6564206469736B2E   
  1104 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1104 0000079A 686520277772697465-
  1104 000007A3 2D70726F7465637427-
  1104 000007AC 2073657474696E6720-
  1104 000007B5 6F6E20746865206469-
  1104 000007BE 736B206F7220726574-
  1104 000007C7 7279207573696E6720-
  1104 000007D0 7573696E6720616E6F-
  1104 000007D9 74686572206469736B-
  1104 000007E2 2E                 
  1105 000007E3 0D0A00                                          db      13,10,0
  1106 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1106 000007EF 736B65747465205265-
  1106 000007F8 6D6F766564         
  1107 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1107 00000806 726F72206D61792069-
  1107 0000080F 6E6469636174652074-
  1107 00000818 686174207468652066-
  1107 00000821 6C6F70707920646973-
  1107 0000082A 6B6574746520686173-
  1107 00000833 206265656E2072656D-
  1107 0000083C 6F7665642066726F6D-
  1107 00000845 20746865           
  1108 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1108 00000852 652064726976652E20-
  1108 0000085B 4F6E20736F6D652073-
  1108 00000864 797374656D732C2074-
  1108 0000086D 68697320636F646520-
  1108 00000876 6D617920616C736F20-
  1108 0000087F 6F6363757220696620-
  1108 00000888 746865206469736B65-
  1108 00000891 747465206973       
  1109 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1109 000008A0 70726F746563746564-
  1109 000008A9 2E2720506C65617365-
  1109 000008B2 207665726966792074-
  1109 000008BB 686174207468652064-
  1109 000008C4 69736B657474652069-
  1109 000008CD 73206E6F7420777269-
  1109 000008D6 74652D70726F746563-
  1109 000008DF 74656420616E64     
  1110 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1110 000008EF 65726C7920696E7365-
  1110 000008F8 7274656420696E2074-
  1110 00000901 6865206469736B6574-
  1110 0000090A 74652064726976652E 
  1111 00000913 0D0A00                                          db      13,10,0
  1112 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1112 0000091F 6976652054696D6564-
  1112 00000928 204F7574           
  1113 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1113 00000935 726F7220757375616C-
  1113 0000093E 6C7920696E64696361-
  1113 00000947 746573207468617420-
  1113 00000950 6E6F206469736B6574-
  1113 00000959 746520697320696E20-
  1113 00000962 746865206469736B65-
  1113 0000096B 747465206472697665-
  1113 00000974 2E20506C65617365   
  1114 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1114 00000985 726520746861742074-
  1114 0000098E 6865206469736B6574-
  1114 00000997 74652069732070726F-
  1114 000009A0 7065726C7920736561-
  1114 000009A9 74656420696E207468-
  1114 000009B2 652064726976652061-
  1114 000009BB 6E642072657472792E 
  1115 000009C4 0D0A00                                          db      13,10,0
  1116 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1116 000009D0 6B6E6F776E20457272-
  1116 000009D9 6F72               
  1117 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1117 000009E4 6F722D636F64652072-
  1117 000009ED 657475726E65642062-
  1117 000009F6 79207468652042494F-
  1117 000009FF 53206973206E6F7420-
  1117 00000A08 61207265636F676E69-
  1117 00000A11 7A6564206572726F72-
  1117 00000A1A 2E20506C6561736520-
  1117 00000A23 636F6E73756C74     
  1118 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1118 00000A33 6D7075746572277320-
  1118 00000A3C 746563686E6963616C-
  1118 00000A45 207265666572656E63-
  1118 00000A4E 6520666F7220612064-
  1118 00000A57 65736372697074696F-
  1118 00000A60 6E206F662074686973-
  1118 00000A69 206572726F7220636F-
  1118 00000A72 64652E             
  1119 00000A75 0D0A00                                          db      13,10,0
  1120                                  wcPrepInBuf             equ     $
  1121                                  %endif
  1122                                  %ifdef BUILDDISK
  1123                                  ;=======================================================================================================================
  1124                                  ;
  1125                                  ;       File Allocation Tables
  1126                                  ;
  1127                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1128                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1129                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1130                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1131                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1132                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1133                                  ;       the last cluster in the chain.
  1134                                  ;
  1135                                  ;       Every three bytes encode two FAT entries as follows:
  1136                                  ;
  1137                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1138                                  ;
  1139                                  ;=======================================================================================================================
  1140                                  ;-----------------------------------------------------------------------------------------------------------------------
  1141                                  ;
  1142                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1143                                  ;
  1144                                  ;-----------------------------------------------------------------------------------------------------------------------
  1145                                  section                 fat1                                                    ;first copy of FAT
  1146                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1147                                                          db      005h,060h,000h, 007h,080h,000h
  1148                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1149                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1150                                                          db      011h,020h,001h, 013h,040h,001h
  1151                                                          db      015h,060h,001h, 017h,080h,001h
  1152                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1153                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1154                                                          db      021h,020h,002h, 023h,040h,002h
  1155                                                          db      025h,060h,002h, 027h,080h,002h
  1156                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1157                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1158                                  ;-----------------------------------------------------------------------------------------------------------------------
  1159                                  ;
  1160                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1161                                  ;
  1162                                  ;-----------------------------------------------------------------------------------------------------------------------
  1163                                  section                 fat2                                                    ;second copy of FAT
  1164                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1165                                                          db      005h,060h,000h, 007h,080h,000h
  1166                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1167                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1168                                                          db      011h,020h,001h, 013h,040h,001h
  1169                                                          db      015h,060h,001h, 017h,080h,001h
  1170                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1171                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1172                                                          db      021h,020h,002h, 023h,040h,002h
  1173                                                          db      025h,060h,002h, 027h,080h,002h
  1174                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1175                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1176                                  ;-----------------------------------------------------------------------------------------------------------------------
  1177                                  ;
  1178                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1179                                  ;
  1180                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1181                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1182                                  ;       copy.
  1183                                  ;
  1184                                  ;-----------------------------------------------------------------------------------------------------------------------
  1185                                  section                 dir                                                     ;diskette directory
  1186                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1187                                                          db      020h                                            ;attribute (archive bit set)
  1188                                                          times   10 db 0                                         ;unused
  1189                                                          dw      0h                                              ;time
  1190                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1191                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1192                                                          dw      2                                               ;first cluster
  1193                                                          dd      05400h                                          ;file size
  1194                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1195                                  %endif
  1196                                  %ifdef BUILDCOM
  1197                                  ;=======================================================================================================================
  1198                                  ;
  1199                                  ;       OS.COM
  1200                                  ;
  1201                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1202                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1203                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1204                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1205                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1206                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1207                                  ;
  1208                                  ;       Our loader addressability is set up according to the following diagram.
  1209                                  ;
  1210                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1211                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1212                                  ;                               |  256 = 100h bytes                             |
  1213                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1214                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1215                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1216                                  ;                       007e00  +-----------------------------------------------+
  1217                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1218                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1219                                  ;                               |                                               |
  1220                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1221                                  ;                               |                                               |
  1222                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1223                                  ;                               |  Loader Code                                  |
  1224                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1225                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1226                                  ;
  1227                                  ;=======================================================================================================================
  1228                                  ;-----------------------------------------------------------------------------------------------------------------------
  1229                                  ;
  1230                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1231                                  ;
  1232                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1233                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1234                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1235                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1236                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1237                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1238                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1239                                  ;       registers.
  1240                                  ;
  1241                                  ;-----------------------------------------------------------------------------------------------------------------------
  1242                                                          cpu     8086                                            ;assume minimal CPU
  1243                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1244                                                          bits    16                                              ;this is 16-bit code
  1245                                  Loader                  push    cs                                              ;use the code segment
  1246                                                          pop     ds                                              ;...as our data segment
  1247                                                          push    cs                                              ;use the code segment
  1248                                                          pop     es                                              ;...as our extra segment
  1249                                  ;
  1250                                  ;       Write a message to the console so we know we have our addressability established.
  1251                                  ;
  1252                                                          mov     si,czStartingMsg                                ;starting message
  1253                                                          call    PutTTYString                                    ;display loader message
  1254                                  ;
  1255                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1256                                  ;
  1257                                                          call    GetCPUType                                      ;AL = cpu type
  1258                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1259                                                          cmp     al,3                                            ;80386+?
  1260                                                          jb      LoaderExit                                      ;no, exit with error message
  1261                                                          cpu     386                                             ;allow 80386 instructions
  1262                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1263                                                          call    PutTTYString                                    ;display message
  1264                                  ;
  1265                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1266                                  ;
  1267                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1268                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1269                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1270                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1271                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1272                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1273                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1274                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1275                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1276                                                          call    PutTTYString                                    ;display message
  1277                                  ;
  1278                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1279                                  ;
  1280                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1281                                                          pop     es                                              ;... as target segment
  1282                                                          xor     di,di                                           ;ES:DI = target address
  1283                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1284                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1285                                                          cld                                                     ;forward strings
  1286                                                          rep     movsb                                           ;copy kernel image
  1287                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1288                                                          call    PutTTYString                                    ;display message
  1289                                  ;
  1290                                  ;       Switch to protected mode.
  1291                                  ;
  1292                                                          xor     si,si                                           ;ES:SI = gdt addr
  1293                                                          mov     ss,si                                           ;protected mode ss
  1294                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1295                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1296                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1297                                                          mov     dx,001Fh                                        ;outer delay loop count
  1298                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1299                                                          loop    $                                               ;wait out pending interrupts
  1300                                                          dec     dx                                              ;restore outer loop count
  1301                                                          jnz     .10                                             ;continue outer loop
  1302                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1303                                  ;
  1304                                  ;       Enable hardware and maskable interrupts.
  1305                                  ;
  1306                                                          xor     al,al                                           ;enable all registers code
  1307                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1308                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1309                                                          sti                                                     ;enable maskable interrupts
  1310                                  ;
  1311                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1312                                  ;
  1313                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1314                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1315                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                  ;
  1318                                  ;       Routine:        LoaderExit
  1319                                  ;
  1320                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1321                                  ;
  1322                                  ;       In:             DS:SI   string address
  1323                                  ;
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  LoaderExit              call    PutTTYString                                    ;display error message
  1326                                  ;
  1327                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1328                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1329                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1330                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1331                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1332                                  ;
  1333                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1334                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1335                                                          jnz     .40                                             ;exit if key pressed
  1336                                                          sti                                                     ;enable maskable interrupts
  1337                                                          hlt                                                     ;wait for interrupt
  1338                                                          jmp     .30                                             ;repeat until keypress
  1339                                  ;
  1340                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1341                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1342                                  ;       HLT until the system resets.
  1343                                  ;
  1344                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1345                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1346                                  .50                     sti                                                     ;enable maskable interrupts
  1347                                                          hlt                                                     ;stop until reset, int, nmi
  1348                                                          jmp     .50                                             ;loop until restart kicks in
  1349                                  ;-----------------------------------------------------------------------------------------------------------------------
  1350                                  ;
  1351                                  ;       Routine:        GetCPUType
  1352                                  ;
  1353                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1354                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1355                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1356                                  ;
  1357                                  ;       Out:            AX      0 = 808x, v20, etc.
  1358                                  ;                               1 = 80186
  1359                                  ;                               2 = 80286
  1360                                  ;                               3 = 80386
  1361                                  ;
  1362                                  ;-----------------------------------------------------------------------------------------------------------------------
  1363                                  GetCPUType              mov     al,1                                            ;AL = 1
  1364                                                          mov     cl,32                                           ;shift count
  1365                                                          shr     al,cl                                           ;try a 32-bit shift
  1366                                                          or      al,al                                           ;did the shift happen?
  1367                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1368                                                          cpu     186
  1369                                                          push    sp                                              ;save stack pointer
  1370                                                          pop     cx                                              ;...into cx
  1371                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1372                                                          jne     .10                                             ;yes, cpu is 80186
  1373                                                          cpu     286
  1374                                                          inc     ax                                              ;AX = 2
  1375                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1376                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1377                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1378                                                          jz      .10                                             ;yes, cpu is 80286
  1379                                                          inc     ax                                              ;AX = 3
  1380                                  .10                     ret                                                     ;return
  1381                                  ;-----------------------------------------------------------------------------------------------------------------------
  1382                                  ;
  1383                                  ;       Routine:        PutTTYString
  1384                                  ;
  1385                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1386                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1387                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1388                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1389                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1390                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1391                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1392                                  ;                       to LODSB is not needed.
  1393                                  ;
  1394                                  ;       In:             DS:SI   address of string
  1395                                  ;
  1396                                  ;       Out:            DF      0
  1397                                  ;                       ZF      1
  1398                                  ;                       AL      0
  1399                                  ;
  1400                                  ;-----------------------------------------------------------------------------------------------------------------------
  1401                                  PutTTYString            cld                                                     ;forward strings
  1402                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1403                                                          test    al,al                                           ;end of string?
  1404                                                          jz      .20                                             ;... yes, exit our loop
  1405                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1406                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1407                                                          jmp     .10                                             ;repeat until done
  1408                                  .20                     ret                                                     ;return
  1409                                  ;-----------------------------------------------------------------------------------------------------------------------
  1410                                  ;
  1411                                  ;       Loader Data
  1412                                  ;
  1413                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1414                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1415                                  ;
  1416                                  ;-----------------------------------------------------------------------------------------------------------------------
  1417                                                          align   2
  1418                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1419                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1420                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1421                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1422                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1423                                                          db      "Please press any key to restart the computer.",13,10,0
  1424                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1425                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1426                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1427                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1428                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1429                                  ;=======================================================================================================================
  1430                                  ;
  1431                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1432                                  ;
  1433                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1434                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1435                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1436                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1437                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1438                                  ;
  1439                                  ;=======================================================================================================================
  1440                                  ;=======================================================================================================================
  1441                                  ;
  1442                                  ;       Kernel Tables
  1443                                  ;
  1444                                  ;=======================================================================================================================
  1445                                  ;-----------------------------------------------------------------------------------------------------------------------
  1446                                  ;
  1447                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1448                                  ;
  1449                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1450                                  ;       first descriptor must be all nulls.
  1451                                  ;
  1452                                  ;       6   5         4         3         2         1         0
  1453                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1454                                  ;       ----------------------------------------------------------------
  1455                                  ;       h......hffffmmmma......ab......................bn..............n
  1456                                  ;       00000000                        all areas have base addresses below 2^24
  1457                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1458                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1459                                  ;                   1001                present, ring-0, selector
  1460                                  ;
  1461                                  ;       h...h   hi-order base address (bits 24-31)
  1462                                  ;       ffff    flags
  1463                                  ;       mmmm    hi-order limit (bits 16-19)
  1464                                  ;       a...a   access
  1465                                  ;       b...b   lo-order base address (bits 0-23)
  1466                                  ;       n...n   lo-order limit (bits 0-15)
  1467                                  ;
  1468                                  ;-----------------------------------------------------------------------------------------------------------------------
  1469                                  section                 gdt                                                     ;global descriptor table
  1470                                                          dq      0000000000000000h                               ;00 required null selector
  1471                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1472                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1473                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1474                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1475                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1476                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1477                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1478                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1479                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1480                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1481                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1482                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1483                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1484                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1485                                  ;-----------------------------------------------------------------------------------------------------------------------
  1486                                  ;
  1487                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1488                                  ;
  1489                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1490                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1491                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1492                                  ;
  1493                                  ;       6   5         4         3         2         1         0
  1494                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1495                                  ;       ----------------------------------------------------------------
  1496                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1497                                  ;
  1498                                  ;       h...h   high-order offset (bits 16-31)
  1499                                  ;       P       present (0=unused interrupt)
  1500                                  ;       zz      descriptor privilege level
  1501                                  ;       S       storage segment (must be zero for IDT)
  1502                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1503                                  ;       S...S   handling code selector in GDT
  1504                                  ;       l...l   lo-order offset (bits 0-15)
  1505                                  ;
  1506                                  ;-----------------------------------------------------------------------------------------------------------------------
  1507                                  section                 idt                                                     ;interrupt descriptor table
  1508                                                          mint    dividebyzero                                    ;00 divide by zero
  1509                                                          mint    singlestep                                      ;01 single step
  1510                                                          mint    nmi                                             ;02 non-maskable
  1511                                                          mint    break                                           ;03 break
  1512                                                          mint    into                                            ;04 into
  1513                                                          mint    bounds                                          ;05 bounds
  1514                                                          mint    badopcode                                       ;06 bad op code
  1515                                                          mint    nocoproc                                        ;07 no coprocessor
  1516                                                          mint    doublefault                                     ;08 double-fault
  1517                                                          mint    operand                                         ;09 operand
  1518                                                          mint    badtss                                          ;0a bad TSS
  1519                                                          mint    notpresent                                      ;0b not-present
  1520                                                          mint    stacklimit                                      ;0c stack limit
  1521                                                          mint    protection                                      ;0d general protection fault
  1522                                                          mint    int14                                           ;0e (reserved)
  1523                                                          mint    int15                                           ;0f (reserved)
  1524                                                          mint    coproccalc                                      ;10 (reserved)
  1525                                                          mint    int17                                           ;11 (reserved)
  1526                                                          mint    int18                                           ;12 (reserved)
  1527                                                          mint    int19                                           ;13 (reserved)
  1528                                                          mint    int20                                           ;14 (reserved)
  1529                                                          mint    int21                                           ;15 (reserved)
  1530                                                          mint    int22                                           ;16 (reserved)
  1531                                                          mint    int23                                           ;17 (reserved)
  1532                                                          mint    int24                                           ;18 (reserved)
  1533                                                          mint    int25                                           ;19 (reserved)
  1534                                                          mint    int26                                           ;1a (reserved)
  1535                                                          mint    int27                                           ;1b (reserved)
  1536                                                          mint    int28                                           ;1c (reserved)
  1537                                                          mint    int29                                           ;1d (reserved)
  1538                                                          mint    int30                                           ;1e (reserved)
  1539                                                          mint    int31                                           ;1f (reserved)
  1540                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1541                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1542                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1543                                                          mtrap   com2                                            ;23 IRQ3 com2
  1544                                                          mtrap   com1                                            ;24 IRQ4 com1
  1545                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1546                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1547                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1548                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1549                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1550                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1551                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1552                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1553                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1554                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1555                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1556                                                          mtrap   svc                                             ;30 OS services
  1557                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1558                                  ;=======================================================================================================================
  1559                                  ;
  1560                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1561                                  ;
  1562                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1563                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1564                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1565                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1566                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1567                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1568                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1569                                  ;
  1570                                  ;=======================================================================================================================
  1571                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1572                                                          cpu     386                                             ;allow 80386 instructions
  1573                                                          bits    32                                              ;this is 32-bit code
  1574                                  ;=======================================================================================================================
  1575                                  ;
  1576                                  ;       CPU Interrupt Handlers
  1577                                  ;
  1578                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1579                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1580                                  ;
  1581                                  ;=======================================================================================================================
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                  ;
  1584                                  ;       INT0    Divide By Zero
  1585                                  ;
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                                          menter  dividebyzero                                    ;divide by zero
  1588                                                          push    0                                               ;store interrupt nbr
  1589                                                          push    czIntDivideByZero                               ;store message offset
  1590                                                          jmp     ReportInterrupt                                 ;report interrupt
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT1    Single Step
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  singlestep                                      ;single step
  1597                                                          push    1                                               ;store interrupt nbr
  1598                                                          push    czIntSingleStep                                 ;store message offset
  1599                                                          jmp     ReportInterrupt                                 ;report interrupt
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;
  1602                                  ;       INT2    Non-Maskable Interrupt
  1603                                  ;
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                                          menter  nmi                                             ;non-maskable
  1606                                                          push    2                                               ;store interrupt nbr
  1607                                                          push    czIntNonMaskable                                ;store message offset
  1608                                                          jmp     ReportInterrupt                                 ;report interrupt
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT3    Break
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  break                                           ;break
  1615                                                          push    3                                               ;store interrupt nbr
  1616                                                          push    czIntBreak                                      ;store message offset
  1617                                                          jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT4    Into
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  into                                            ;into
  1624                                                          push    4                                               ;store interrupt nbr
  1625                                                          push    czIntInto                                       ;store message offset
  1626                                                          jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT5    Bounds
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  bounds                                          ;bounds
  1633                                                          push    5                                               ;store interrupt nbr
  1634                                                          push    czIntBounds                                     ;store message offset
  1635                                                          jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT6    Bad Operation Code
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  badopcode                                       ;bad opcode interrupt
  1642                                                          push    6                                               ;store interrupt nbr
  1643                                                          push    czIntBadOpCode                                  ;store message offset
  1644                                                          jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT7    No Coprocessor
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1651                                                          push    7                                               ;store interrupt nbr
  1652                                                          push    czIntNoCoprocessor                              ;store message offset
  1653                                                          jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT8    Double Fault
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  doublefault                                     ;doublefault interrupt
  1660                                                          push    8                                               ;store interrupt nbr
  1661                                                          push    czIntDoubleFault                                ;store message offset
  1662                                                          jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT9    Operand
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  operand                                         ;operand interrupt
  1669                                                          push    9                                               ;store interrupt nbr
  1670                                                          push    czIntOperand                                    ;store message offset
  1671                                                          jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT10   Bad Task State Segment
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  badtss                                          ;bad TSS interrupt
  1678                                                          push    10                                              ;store interrupt nbr
  1679                                                          push    czIntBadTSS                                     ;store message offset
  1680                                                          jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT11   Not Present
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  notpresent                                      ;not present interrupt
  1687                                                          push    11                                              ;store interrupt nbr
  1688                                                          push    czIntNotPresent                                 ;store message offset
  1689                                                          jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT12   Stack Limit
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  stacklimit                                      ;stack limit interrupt
  1696                                                          push    12                                              ;store interrupt nbr
  1697                                                          push    czIntStackLimit                                 ;store message offset
  1698                                                          jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT13   General Protection Fault
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  protection                                      ;protection fault interrupt
  1705                                                          push    13                                              ;store interrupt nbr
  1706                                                          push    czIntProtection                                 ;store message offset
  1707                                                          jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT14   Reserved
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  int14                                           ;(reserved)
  1714                                                          push    14                                              ;store interrupt nbr
  1715                                                          push    czIntReserved                                   ;store message offset
  1716                                                          jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT15   Reserved
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  int15                                           ;(reserved)
  1723                                                          push    15                                              ;store interrupt nbr
  1724                                                          push    czIntReserved                                   ;store message offset
  1725                                                          jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT16   Coprocessor Calculation
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  coproccalc                                      ;coprocessor calculation
  1732                                                          push    16                                              ;store interrupt nbr
  1733                                                          push    czIntCoprocessorCalc                            ;store message offset
  1734                                                          jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT17   Reserved
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  int17                                           ;(reserved)
  1741                                                          push    17                                              ;store interrupt nbr
  1742                                                          push    czIntReserved                                   ;store message offset
  1743                                                          jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT18   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int18                                           ;(reserved)
  1750                                                          push    18                                              ;store interrupt nbr
  1751                                                          push    czIntReserved                                   ;store message offset
  1752                                                          jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT19   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int19                                           ;(reserved)
  1759                                                          push    19                                              ;store interrupt nbr
  1760                                                          push    czIntReserved                                   ;store message offset
  1761                                                          jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT20   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int20                                           ;(reserved)
  1768                                                          push    20                                              ;store interrupt nbr
  1769                                                          push    czIntReserved                                   ;store message offset
  1770                                                          jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT21   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int21                                           ;(reserved)
  1777                                                          push    21                                              ;store interrupt nbr
  1778                                                          push    czIntReserved                                   ;store message offset
  1779                                                          jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT22   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int22                                           ;(reserved)
  1786                                                          push    22                                              ;store interrupt nbr
  1787                                                          push    czIntReserved                                   ;store message offset
  1788                                                          jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT23   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int23                                           ;(reserved)
  1795                                                          push    23                                              ;store interrupt nbr
  1796                                                          push    czIntReserved                                   ;store message offset
  1797                                                          jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       INT24   Reserved
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                                          menter  int24                                           ;(reserved)
  1804                                                          push    24                                              ;store interrupt nbr
  1805                                                          push    czIntReserved                                   ;store message offset
  1806                                                          jmp     ReportInterrupt                                 ;report interrupt
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT25   Reserved
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  int25                                           ;(reserved)
  1813                                                          push    25                                              ;store interrupt nbr
  1814                                                          push    czIntReserved                                   ;store message offset
  1815                                                          jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT26   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int26                                           ;(reserved)
  1822                                                          push    26                                              ;store interrupt nbr
  1823                                                          push    czIntReserved                                   ;store message offset
  1824                                                          jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT27   Reserved
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  int27                                           ;(reserved)
  1831                                                          push    27                                              ;store interrupt nbr
  1832                                                          push    czIntReserved                                   ;store message offset
  1833                                                          jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT28   Reserved
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  int28                                           ;(reserved)
  1840                                                          push    28                                              ;store interrupt nbr
  1841                                                          push    czIntReserved                                   ;store message offset
  1842                                                          jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT29   Reserved
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  int29                                           ;(reserved)
  1849                                                          push    29                                              ;store interrupt nbr
  1850                                                          push    czIntReserved                                   ;store message offset
  1851                                                          jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT30   Reserved
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  int30                                           ;(reserved)
  1858                                                          push    30                                              ;store interrupt nbr
  1859                                                          push    czIntReserved                                   ;store message offset
  1860                                                          jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       INT31   Reserved
  1864                                  ;
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                                          menter  int31                                           ;(reserved)
  1867                                                          push    31                                              ;store interrupt nbr
  1868                                                          push    czIntReserved                                   ;store message offset
  1869                                                          jmp     ReportInterrupt                                 ;report interrupt
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  ;
  1872                                  ;       Routine:        ReportInterrupt
  1873                                  ;
  1874                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1875                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1876                                  ;
  1877                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1878                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ReportInterrupt         pop     eax                                             ;error message address
  1882                                                          pop     eax                                             ;interrupt number
  1883                                                          iretd                                                   ;return
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;       Processor Interrupt Name Strings
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  czIntDivideByZero       db      "Division by zero",0
  1890                                  czIntSingleStep         db      "Single step",0
  1891                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1892                                  czIntBreak              db      "Break",0
  1893                                  czIntInto               db      "Into",0
  1894                                  czIntBounds             db      "Bounds",0
  1895                                  czIntBadOpCode          db      "Bad Operation Code",0
  1896                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1897                                  czIntDoubleFault        db      "Double Fault",0
  1898                                  czIntOperand            db      "Operand",0
  1899                                  czIntBadTSS             db      "Bad Task State Segment",0
  1900                                  czIntNotPresent         db      "Not Present",0
  1901                                  czIntStackLimit         db      "Stack Limit",0
  1902                                  czIntProtection         db      "General Protection Fault",0
  1903                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1904                                  czIntReserved           db      "Reserved",0
  1905                                  ;=======================================================================================================================
  1906                                  ;
  1907                                  ;       Hardware Device Interupts
  1908                                  ;
  1909                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1910                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1911                                  ;       (BX=2028h).
  1912                                  ;
  1913                                  ;=======================================================================================================================
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                  ;
  1916                                  ;       IRQ0    Clock Tick Interrupt
  1917                                  ;
  1918                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1919                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1920                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1921                                  ;
  1922                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1923                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1924                                  ;
  1925                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1926                                  ;       zero, the floppy disk motors are turned off.
  1927                                  ;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                                          menter  clocktick                                       ;clock tick interrupt
  1930                                                          push    eax                                             ;save non-volatile regs
  1931                                                          push    edx                                             ;
  1932                                                          push    ds                                              ;
  1933                                  ;
  1934                                  ;       Update the clock tick count and the elapsed days as needed.
  1935                                  ;
  1936                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1937                                                          pop     ds                                              ;... into data segment register
  1938                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1939                                                          inc     eax                                             ;increment clock ticks
  1940                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1941                                                          jb      irq0.10                                         ;no, skip ahead
  1942                                                          inc     byte [wbClockDays]                              ;increment clock days
  1943                                                          xor     eax,eax                                         ;reset clock ticks
  1944                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1945                                  ;
  1946                                  ;       Decrement floppy disk motor timeout.
  1947                                  ;
  1948                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1949                                                          je      irq0.20                                         ;yes, skip ahead
  1950                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1951                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1952                                  ;
  1953                                  ;       Turn off the floppy disk motor if appropriate.
  1954                                  ;
  1955                                                          sti                                                     ;enable maskable interrupts
  1956                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1957                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1958                                                          in      al,dx                                           ;FDC main status byte
  1959                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1960                                                          jnz     irq0.15                                         ;wait while busy
  1961                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1962                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1963                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1964                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1965                                                          out     dx,al                                           ;turn motor off
  1966                                  ;
  1967                                  ;       Signal the end of the hardware interrupt.
  1968                                  ;
  1969                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1970                                  ;
  1971                                  ;       Restore and return.
  1972                                  ;
  1973                                                          pop     ds                                              ;restore modified regs
  1974                                                          pop     edx                                             ;
  1975                                                          pop     eax                                             ;
  1976                                                          iretd                                                   ;return
  1977                                  ;-----------------------------------------------------------------------------------------------------------------------
  1978                                  ;
  1979                                  ;       IRQ1    Keyboard Interrupt
  1980                                  ;
  1981                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1982                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1983                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1984                                  ;       ALL modified registers upon return.
  1985                                  ;
  1986                                  ;-----------------------------------------------------------------------------------------------------------------------
  1987                                                          menter  keyboard                                        ;keyboard interrrupt
  1988                                                          push    eax                                             ;save non-volatile regs
  1989                                                          push    ebx                                             ;
  1990                                                          push    ecx                                             ;
  1991                                                          push    esi                                             ;
  1992                                                          push    ds                                              ;
  1993                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1994                                                          pop     ds                                              ;... into data segment register
  1995                                                          xor     al,al                                           ;zero
  1996                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1997                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1998                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1999                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2000                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2001                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2002                                                          mov     al,' '                                          ;space
  2003                                                          mov     [wbConsoleChar],al                              ;set character to space
  2004                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2005                                                          not     al                                              ;controller timeout mask
  2006                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2007                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2008                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2009                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2010                                                          jz      irq1.140                                        ;yes, skip ahead
  2011                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2012                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2013                                                          mov     ah,al                                           ;copy scan code 0
  2014                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2015                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2016                                                          je      irq1.30                                         ;yes, set flag
  2017                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2018                                                          je      irq1.40                                         ;yes, reset flag
  2019                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2020                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2021                                                          je      irq1.30                                         ;yes, set flag
  2022                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2023                                                          je      irq1.40                                         ;yes, reset flag
  2024                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2025                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2026                                                          je      irq1.30                                         ;yes, set flag
  2027                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2028                                                          je      irq1.40                                         ;yes, reset flag
  2029                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2030                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2031                                                          je      irq1.30                                         ;yes, set flag
  2032                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2033                                                          je      irq1.40                                         ;yes, reset flag
  2034                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2035                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2036                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2037                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2038                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2039                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2040                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2041                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2042                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2043                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2044                                                          jne     irq1.70                                         ;no, skip ahead
  2045                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2046                                                          jz      irq1.140                                        ;yes, skip ahead
  2047                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2048                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2049                                                          mov     ah,al                                           ;copy scan code 1
  2050                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2051                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2052                                                          je      irq1.30                                         ;yes, set flag
  2053                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2054                                                          je      irq1.40                                         ;yes, reset flag
  2055                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2056                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2057                                                          je      irq1.30                                         ;yes, set flag
  2058                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2059                                                          je      irq1.40                                         ;yes, reset flag
  2060                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2061                                                          je      irq1.80                                         ;yes, skip ahead
  2062                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2063                                                          je      irq1.80                                         ;yes, skip ahead
  2064                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2065                                                          je      irq1.10                                         ;yes, continue
  2066                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2067                                                          jne     irq1.20                                         ;no, skip ahead
  2068                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2069                                                          jz      irq1.140                                        ;yes, skip ahead
  2070                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2071                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2072                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2073                                                          jz      irq1.140                                        ;yes, skip ahead
  2074                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2075                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2076                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2077                                  irq1.30                 or      bl,al                                           ;set shift flag
  2078                                                          jmp     irq1.60                                         ;skip ahead
  2079                                  irq1.40                 not     al                                              ;convert flag to mask
  2080                                                          and     bl,al                                           ;reset shift flag
  2081                                                          jmp     irq1.60                                         ;skip ahead
  2082                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2083                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2084                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2085                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2086                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2087                                                          jmp     irq1.150                                        ;finish keyboard handling
  2088                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2089                                                          jne     irq1.80                                         ;no continue
  2090                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2091                                                          jz      irq1.140                                        ;yes, skip ahead
  2092                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2093                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2094                                                          mov     ah,al                                           ;copy scan code 1
  2095                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2096                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2097                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2098                                                          jz      irq1.140                                        ;yes, skip ahead
  2099                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2100                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2101                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2102                                                          jz      irq1.140                                        ;yes, skip ahead
  2103                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2104                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2105                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2106                                                          jz      irq1.140                                        ;yes, skip ahead
  2107                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2108                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2109                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2110                                                          jz      irq1.140                                        ;yes, skip ahead
  2111                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2112                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2113                                                          jmp     irq1.150                                        ;continue
  2114                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2115                                                          test    ah,EKEYBUP                                      ;release code?
  2116                                                          jnz     irq1.130                                        ;yes, skip ahead
  2117                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2118                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2119                                                          jz      irq1.90                                         ;no, skip ahead
  2120                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2121                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2122                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2123                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2124                                                          jz      irq1.100                                        ;no skip ahead
  2125                                                          mov     cl,al                                           ;copy ASCII code
  2126                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2127                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2128                                                          jb      irq1.100                                        ;yes, skip ahead
  2129                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2130                                                          ja      irq1.100                                        ;yes, skip ahead
  2131                                                          xor     al,EASCIICASE                                   ;switch case
  2132                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2133                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2134                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2135                                                          jz      irq1.120                                        ;no, skip ahead
  2136                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2137                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2138                                                          or      edx,eax                                         ;msg id and codes
  2139                                                          xor     ecx,ecx                                         ;null param
  2140                                                          push    eax                                             ;save codes
  2141                                                          call    PutMessage                                      ;put message to console
  2142                                                          pop     eax                                             ;restore codes
  2143                                                          test    al,al                                           ;ASCII translation?
  2144                                                          jz      irq1.130                                        ;no, skip ahead
  2145                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2146                                                          and     eax,0FFFFh                                      ;clear high-order word
  2147                                                          or      edx,eax                                         ;msg id and codes
  2148                                                          xor     ecx,ecx                                         ;null param
  2149                                                          call    PutMessage                                      ;put message to console
  2150                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2151                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2152                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2153                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2154                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2155                                                          pop     ds                                              ;restore non-volatile regs
  2156                                                          pop     esi                                             ;
  2157                                                          pop     ecx                                             ;
  2158                                                          pop     ebx                                             ;
  2159                                                          pop     eax                                             ;
  2160                                                          iretd                                                   ;return
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162                                  ;       Scan-Code to ASCII Translation Tables
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2165                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2166                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2167                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2168                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2169                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2170                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2171                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2172                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2173                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2174                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2175                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2176                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2177                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2178                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2179                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2180                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2181                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2182                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2183                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2184                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2185                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2186                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2187                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2188                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2189                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2190                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2191                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2192                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2193                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2194                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2195                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                  ;
  2198                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2199                                  ;
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                                          menter  iochannel                                       ;secondary 8259A cascade
  2202                                                          push    eax                                             ;save modified regs
  2203                                                          jmp     hwint                                           ;end interrupt and return
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205                                  ;
  2206                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2207                                  ;
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209                                                          menter  com2                                            ;serial port 2 interrupt
  2210                                                          push    eax                                             ;save modified regs
  2211                                                          jmp     hwint                                           ;end interrupt and return
  2212                                  ;-----------------------------------------------------------------------------------------------------------------------
  2213                                  ;
  2214                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2215                                  ;
  2216                                  ;-----------------------------------------------------------------------------------------------------------------------
  2217                                                          menter  com1                                            ;serial port 1 interrupt
  2218                                                          push    eax                                             ;save modified regs
  2219                                                          jmp     hwint                                           ;end interrupt and return
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221                                  ;
  2222                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2223                                  ;
  2224                                  ;-----------------------------------------------------------------------------------------------------------------------
  2225                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2226                                                          push    eax                                             ;save modified regs
  2227                                                          jmp     hwint                                           ;end interrupt and return
  2228                                  ;-----------------------------------------------------------------------------------------------------------------------
  2229                                  ;
  2230                                  ;       IRQ6    Diskette Hardware Interrupt
  2231                                  ;
  2232                                  ;-----------------------------------------------------------------------------------------------------------------------
  2233                                                          menter  diskette                                        ;floppy disk interrupt
  2234                                                          push    eax                                             ;save non-volatile regs
  2235                                                          push    ds                                              ;
  2236                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2237                                                          pop     ds                                              ;... into DS register
  2238                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2239                                                          or      al,10000000b                                    ;set IRQ flag
  2240                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2241                                                          pop     ds                                              ;restore non-volatile regs
  2242                                                          jmp     hwint                                           ;end primary PIC interrupt
  2243                                  ;-----------------------------------------------------------------------------------------------------------------------
  2244                                  ;
  2245                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2246                                  ;
  2247                                  ;-----------------------------------------------------------------------------------------------------------------------
  2248                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2249                                                          push    eax                                             ;save modified regs
  2250                                                          jmp     hwint                                           ;end interrupt and return
  2251                                  ;-----------------------------------------------------------------------------------------------------------------------
  2252                                  ;
  2253                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2254                                  ;
  2255                                  ;-----------------------------------------------------------------------------------------------------------------------
  2256                                                          menter  rtclock                                         ;real-time clock interrupt
  2257                                                          push    eax                                             ;save modified regs
  2258                                                          jmp     hwwint                                          ;end interrupt and return
  2259                                  ;-----------------------------------------------------------------------------------------------------------------------
  2260                                  ;
  2261                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2262                                  ;
  2263                                  ;-----------------------------------------------------------------------------------------------------------------------
  2264                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2265                                                          push    eax                                             ;save modified regs
  2266                                                          jmp     hwwint                                          ;end interrupt and return
  2267                                  ;-----------------------------------------------------------------------------------------------------------------------
  2268                                  ;
  2269                                  ;       IRQ10   Reserved Hardware Interrupt
  2270                                  ;
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                                          menter  irq10                                           ;reserved
  2273                                                          push    eax                                             ;save modified regs
  2274                                                          jmp     hwwint                                          ;end interrupt and return
  2275                                  ;-----------------------------------------------------------------------------------------------------------------------
  2276                                  ;
  2277                                  ;       IRQ11   Reserved Hardware Interrupt
  2278                                  ;
  2279                                  ;-----------------------------------------------------------------------------------------------------------------------
  2280                                                          menter  irq11                                           ;reserved
  2281                                                          push    eax                                             ;save modified regs
  2282                                                          jmp     hwwint                                          ;end interrupt and return
  2283                                  ;-----------------------------------------------------------------------------------------------------------------------
  2284                                  ;
  2285                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2286                                  ;
  2287                                  ;-----------------------------------------------------------------------------------------------------------------------
  2288                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2289                                                          push    eax                                             ;save modified regs
  2290                                                          jmp     hwwint                                          ;end interrupt and return
  2291                                  ;-----------------------------------------------------------------------------------------------------------------------
  2292                                  ;
  2293                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2294                                  ;
  2295                                  ;-----------------------------------------------------------------------------------------------------------------------
  2296                                                          menter  coprocessor                                     ;coprocessor interrupt
  2297                                                          push    eax                                             ;save modified regs
  2298                                                          jmp     hwwint                                          ;end interrupt and return
  2299                                  ;-----------------------------------------------------------------------------------------------------------------------
  2300                                  ;
  2301                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2302                                  ;
  2303                                  ;-----------------------------------------------------------------------------------------------------------------------
  2304                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2305                                                          push    eax                                             ;save modified regs
  2306                                                          jmp     hwwint                                          ;end interrupt and return
  2307                                  ;-----------------------------------------------------------------------------------------------------------------------
  2308                                  ;
  2309                                  ;       IRQ15   Reserved Hardware Interrupt
  2310                                  ;
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312                                                          menter  irq15                                           ;reserved
  2313                                                          push    eax                                             ;save modified regs
  2314                                                          jmp     hwwint                                          ;end interrupt and return
  2315                                  ;-----------------------------------------------------------------------------------------------------------------------
  2316                                  ;
  2317                                  ;       Exit from hardware interrupt
  2318                                  ;
  2319                                  ;-----------------------------------------------------------------------------------------------------------------------
  2320                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2321                                                          jmp     hwint90                                         ;skip ahead
  2322                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2323                                  hwint90                 pop     eax                                             ;restore modified regs
  2324                                                          iretd                                                   ;return from interrupt
  2325                                  ;-----------------------------------------------------------------------------------------------------------------------
  2326                                  ;
  2327                                  ;       INT 30h Operating System Software Service Interrupt
  2328                                  ;
  2329                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2330                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2331                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2332                                  ;       the entry address of the specific function from a table.
  2333                                  ;
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                                          menter  svc
  2336                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2337                                                          jae     svc90                                           ;yes, skip ahead
  2338                                                          movzx   eax,al                                          ;function
  2339                                                          shl     eax,2                                           ;offset into table
  2340                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2341                                  svc90                   iretd                                                   ;return from interrupt
  2342                                  ;-----------------------------------------------------------------------------------------------------------------------
  2343                                  ;
  2344                                  ;       Service Request Table
  2345                                  ;
  2346                                  ;
  2347                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2348                                  ;
  2349                                  ;-----------------------------------------------------------------------------------------------------------------------
  2350                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2351                                                          tsvce   GetConsoleString                                ;get string input
  2352                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2353                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2354                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2355                                  ;-----------------------------------------------------------------------------------------------------------------------
  2356                                  ;
  2357                                  ;       Service Request Macros
  2358                                  ;
  2359                                  ;       These macros provide positional parameterization of service request calls.
  2360                                  ;
  2361                                  ;-----------------------------------------------------------------------------------------------------------------------
  2362                                  %macro                  clearConsoleScreen 0
  2363                                                          mov     al,eClearConsoleScreen                          ;function code
  2364                                                          int     _svc                                            ;invoke OS service
  2365                                  %endmacro
  2366                                  %macro                  getConsoleString 4
  2367                                                          mov     edx,%1                                          ;buffer address
  2368                                                          mov     ecx,%2                                          ;max characters
  2369                                                          mov     bh,%3                                           ;echo indicator
  2370                                                          mov     bl,%4                                           ;terminator
  2371                                                          mov     al,eGetConsoleString                            ;function code
  2372                                                          int     _svc                                            ;invoke OS service
  2373                                  %endmacro
  2374                                  %macro                  placeCursor 0
  2375                                                          mov     al,ePlaceCursor                                 ;function code
  2376                                                          int     _svc                                            ;invoke OS service
  2377                                  %endmacro
  2378                                  %macro                  putConsoleString 1
  2379                                                          mov     edx,%1                                          ;string address
  2380                                                          mov     al,ePutConsoleString                            ;function code
  2381                                                          int     _svc                                            ;invoke OS service
  2382                                  %endmacro
  2383                                  ;=======================================================================================================================
  2384                                  ;
  2385                                  ;       Kernel Function Library
  2386                                  ;
  2387                                  ;=======================================================================================================================
  2388                                  ;=======================================================================================================================
  2389                                  ;
  2390                                  ;       Console Helper Routines
  2391                                  ;
  2392                                  ;       FirstConsoleColumn
  2393                                  ;       GetConsoleChar
  2394                                  ;       GetConsoleString
  2395                                  ;       NextConsoleColumn
  2396                                  ;       NextConsoleRow
  2397                                  ;       PreviousConsoleColumn
  2398                                  ;       PutConsoleChar
  2399                                  ;       PutConsoleHexByte
  2400                                  ;       PutConsoleOIAChar
  2401                                  ;       PutConsoleOIAShift
  2402                                  ;       PutConsoleString
  2403                                  ;       Yield
  2404                                  ;
  2405                                  ;=======================================================================================================================
  2406                                  ;-----------------------------------------------------------------------------------------------------------------------
  2407                                  ;
  2408                                  ;       Routine:        FirstConsoleColumn
  2409                                  ;
  2410                                  ;       Description:    This routine resets the console column to start of the row.
  2411                                  ;
  2412                                  ;       In:             DS      OS data selector
  2413                                  ;
  2414                                  ;-----------------------------------------------------------------------------------------------------------------------
  2415                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2416                                                          mov     [wbConsoleColumn],al                            ;save column
  2417                                                          ret                                                     ;return
  2418                                  ;-----------------------------------------------------------------------------------------------------------------------
  2419                                  ;
  2420                                  ;       Routine:        GetConsoleChar
  2421                                  ;
  2422                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2423                                  ;
  2424                                  ;       Out:            AL      ASCII character code
  2425                                  ;                       AH      keyboard scan code
  2426                                  ;
  2427                                  ;-----------------------------------------------------------------------------------------------------------------------
  2428                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2429                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2430                                                          or      eax,eax                                         ;do we have a message?
  2431                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2432                                                          push    eax                                             ;save key codes
  2433                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2434                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2435                                                          pop     eax                                             ;restore key codes
  2436                                                          jne     GetConsoleChar                                  ;no, try again
  2437                                                          and     eax,0000ffffh                                   ;mask for key codes
  2438                                                          ret                                                     ;return
  2439                                  ;-----------------------------------------------------------------------------------------------------------------------
  2440                                  ;
  2441                                  ;       Routine:        GetConsoleString
  2442                                  ;
  2443                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2444                                  ;
  2445                                  ;       In:             DS:EDX  target buffer address
  2446                                  ;                       ECX     maximum number of characters to accept
  2447                                  ;                       BH      echo to terminal
  2448                                  ;                       BL      terminating character
  2449                                  ;
  2450                                  ;-----------------------------------------------------------------------------------------------------------------------
  2451                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2452                                                          push    esi                                             ;
  2453                                                          push    edi                                             ;
  2454                                                          push    es                                              ;
  2455                                                          push    ds                                              ;load data segment selector ...
  2456                                                          pop     es                                              ;... into extra segment register
  2457                                                          mov     edi,edx                                         ;edi = target buffer
  2458                                                          push    ecx                                             ;save maximum characters
  2459                                                          xor     al,al                                           ;zero register
  2460                                                          cld                                                     ;forward strings
  2461                                                          rep     stosb                                           ;zero fill buffer
  2462                                                          pop     ecx                                             ;maximum characters
  2463                                                          mov     edi,edx                                         ;edi = target buffer
  2464                                                          mov     esi,edx                                         ;esi = target buffer
  2465                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2466                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2467                                                          cmp     al,bl                                           ;is this the terminator?
  2468                                                          je      .50                                             ;yes, exit
  2469                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2470                                                          jne     .30                                             ;no, skip ahead
  2471                                                          cmp     esi,edi                                         ;at start of buffer?
  2472                                                          je      .20                                             ;yes, get next character
  2473                                                          dec     edi                                             ;backup target pointer
  2474                                                          mov     byte [edi],0                                    ;zero previous character
  2475                                                          inc     ecx                                             ;increment remaining chars
  2476                                                          test    bh,1                                            ;echo to console?
  2477                                                          jz      .20                                             ;no, get next character
  2478                                                          call    PreviousConsoleColumn                           ;backup console position
  2479                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2480                                                          call    PutConsoleChar                                  ;write space to console
  2481                                                          call    PlaceCursor                                     ;position the cursor
  2482                                                          jmp     .20                                             ;get next character
  2483                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2484                                                          jb      .20                                             ;no, get another character
  2485                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2486                                                          ja      .20                                             ;no, get another character
  2487                                                          stosb                                                   ;store character in buffer
  2488                                                          test    bh,1                                            ;echo to console?
  2489                                                          jz      .40                                             ;no, skip ahead
  2490                                                          call    PutConsoleChar                                  ;write character to console
  2491                                                          call    NextConsoleColumn                               ;advance console position
  2492                                                          call    PlaceCursor                                     ;position the cursor
  2493                                  .40                     dec     ecx                                             ;decrement remaining chars
  2494                                                          jmp     .10                                             ;next
  2495                                  .50                     xor     al,al                                           ;null
  2496                                                          stosb                                                   ;terminate buffer
  2497                                                          pop     es                                              ;restore non-volatile regs
  2498                                                          pop     edi                                             ;
  2499                                                          pop     esi                                             ;
  2500                                                          pop     ecx                                             ;
  2501                                                          ret                                                     ;return
  2502                                  ;-----------------------------------------------------------------------------------------------------------------------
  2503                                  ;
  2504                                  ;       Routine:        NextConsoleColumn
  2505                                  ;
  2506                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2507                                  ;                       incremented if the end of the current row is reached.
  2508                                  ;
  2509                                  ;       In:             DS      OS data selector
  2510                                  ;
  2511                                  ;-----------------------------------------------------------------------------------------------------------------------
  2512                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2513                                                          inc     al                                              ;increment column
  2514                                                          mov     [wbConsoleColumn],al                            ;save column
  2515                                                          cmp     al,ECONCOLS                                     ;end of row?
  2516                                                          jb      .10                                             ;no, skip ahead
  2517                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2518                                                          call    NextConsoleRow                                  ;line feed to next row
  2519                                  .10                     ret                                                     ;return
  2520                                  ;-----------------------------------------------------------------------------------------------------------------------
  2521                                  ;
  2522                                  ;       Routine:        NextConsoleRow
  2523                                  ;
  2524                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2525                                  ;
  2526                                  ;       In:             DS      OS data selector
  2527                                  ;
  2528                                  ;-----------------------------------------------------------------------------------------------------------------------
  2529                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2530                                                          inc     al                                              ;increment row
  2531                                                          mov     [wbConsoleRow],al                               ;save row
  2532                                                          cmp     al,ECONROWS                                     ;end of screen?
  2533                                                          jb      .10                                             ;no, skip ahead
  2534                                                          call    ScrollConsoleRow                                ;scroll up one row
  2535                                                          mov     al,[wbConsoleRow]                               ;row
  2536                                                          dec     al                                              ;decrement row
  2537                                                          mov     [wbConsoleRow],al                               ;save row
  2538                                  .10                     ret                                                     ;return
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  ;
  2541                                  ;       Routine:        PreviousConsoleColumn
  2542                                  ;
  2543                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2544                                  ;                       the column is set to the last position in the row and the row is decremented.
  2545                                  ;
  2546                                  ;       In:             DS      OS data selector
  2547                                  ;
  2548                                  ;-----------------------------------------------------------------------------------------------------------------------
  2549                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2550                                                          or      al,al                                           ;start of row?
  2551                                                          jnz     .10                                             ;no, skip ahead
  2552                                                          mov     ah,[wbConsoleRow]                               ;current row
  2553                                                          or      ah,ah                                           ;top of screen?
  2554                                                          jz      .20                                             ;yes, exit with no change
  2555                                                          dec     ah                                              ;decrement row
  2556                                                          mov     [wbConsoleRow],ah                               ;save row
  2557                                                          mov     al,ECONCOLS                                     ;set maximum column
  2558                                  .10                     dec     al                                              ;decrement column
  2559                                                          mov     [wbConsoleColumn],al                            ;save column
  2560                                  .20                     ret                                                     ;return
  2561                                  ;-----------------------------------------------------------------------------------------------------------------------
  2562                                  ;
  2563                                  ;       Routine:        PutConsoleChar
  2564                                  ;
  2565                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2566                                  ;
  2567                                  ;       In:             AL      ASCII character
  2568                                  ;                       DS      OS data selector
  2569                                  ;
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2572                                                          push    es                                              ;
  2573                                                          push    EGDTCGA                                         ;load CGA selector ...
  2574                                                          pop     es                                              ;... into extra segment reg
  2575                                                          mov     cl,[wbConsoleColumn]                            ;column
  2576                                                          mov     ch,[wbConsoleRow]                               ;row
  2577                                                          call    SetConsoleChar                                  ;put character at row, column
  2578                                                          pop     es                                              ;restore non-volatile regs
  2579                                                          pop     ecx                                             ;
  2580                                                          ret                                                     ;return
  2581                                  ;-----------------------------------------------------------------------------------------------------------------------
  2582                                  ;
  2583                                  ;       Routine:        PutConsoleHexByte
  2584                                  ;
  2585                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2586                                  ;
  2587                                  ;       In:             AL      byte value
  2588                                  ;                       CL      column
  2589                                  ;                       CH      row
  2590                                  ;                       DS      OS data selector
  2591                                  ;                       ES      CGA selector
  2592                                  ;
  2593                                  ;-----------------------------------------------------------------------------------------------------------------------
  2594                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2595                                                          mov     bl,al                                           ;save byte value
  2596                                                          shr     al,4                                            ;hi-order nybble
  2597                                                          or      al,030h                                         ;apply ASCII zone
  2598                                                          cmp     al,03ah                                         ;numeric?
  2599                                                          jb      .10                                             ;yes, skip ahead
  2600                                                          add     al,7                                            ;add ASCII offset for alpha
  2601                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  2602                                                          mov     al,bl                                           ;byte value
  2603                                                          and     al,0fh                                          ;lo-order nybble
  2604                                                          or      al,30h                                          ;apply ASCII zone
  2605                                                          cmp     al,03ah                                         ;numeric?
  2606                                                          jb      .20                                             ;yes, skip ahead
  2607                                                          add     al,7                                            ;add ASCII offset for alpha
  2608                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2609                                                          pop     ebx                                             ;restore non-volatile regs
  2610                                                          ret                                                     ;return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       Routine:        PutConsoleOIAChar
  2614                                  ;
  2615                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2616                                  ;
  2617                                  ;       In:             DS      OS data selector
  2618                                  ;
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2621                                                          push    ecx                                             ;
  2622                                                          push    esi                                             ;
  2623                                                          push    ds                                              ;
  2624                                                          push    es                                              ;
  2625                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2626                                                          pop     ds                                              ;... into data segment register
  2627                                                          push    EGDTCGA                                         ;load CGA selector ...
  2628                                                          pop     es                                              ;... into extra segment register
  2629                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2630                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2631                                                          mov     bl,0                                            ;starting column
  2632                                                          mov     ecx,6                                           ;maximum scan codes
  2633                                  .10                     push    ecx                                             ;save remaining count
  2634                                                          mov     ecx,ebx                                         ;row, column
  2635                                                          lodsb                                                   ;read scan code
  2636                                                          or      al,al                                           ;scan code present?
  2637                                                          jz      .20                                             ;no, skip ahead
  2638                                                          call    PutConsoleHexByte                               ;display scan code
  2639                                                          jmp     .30                                             ;continue
  2640                                  .20                     mov     al,' '                                          ;ASCII space
  2641                                                          call    SetConsoleChar                                  ;display space
  2642                                                          mov     al,' '                                          ;ASCII space
  2643                                                          call    SetConsoleChar                                  ;display space
  2644                                  .30                     add     bl,2                                            ;next column (+2)
  2645                                                          pop     ecx                                             ;restore remaining
  2646                                                          loop    .10                                             ;next code
  2647                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2648                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2649                                                          jb      .40                                             ;no, skip ahead
  2650                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2651                                                          ja      .40                                             ;no, skip ahead
  2652                                                          mov     ch,bh                                           ;OIA row
  2653                                                          mov     cl,40                                           ;character display column
  2654                                                          call    SetConsoleChar                                  ;display ASCII character
  2655                                  .40                     pop     es                                              ;restore non-volatile regs
  2656                                                          pop     ds                                              ;
  2657                                                          pop     esi                                             ;
  2658                                                          pop     ecx                                             ;
  2659                                                          pop     ebx                                             ;
  2660                                                          ret                                                     ;return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;       Routine:        PutConsoleOIAShift
  2664                                  ;
  2665                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2666                                  ;
  2667                                  ;       In:             BL      shift flags
  2668                                  ;                       BH      lock flags
  2669                                  ;                       DS      OS data selector
  2670                                  ;
  2671                                  ;-----------------------------------------------------------------------------------------------------------------------
  2672                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2673                                                          push    es                                              ;
  2674                                                          push    EGDTCGA                                         ;load CGA selector ...
  2675                                                          pop     es                                              ;... into ES register
  2676                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2677                                                          mov     al,EASCIISPACE                                  ;space is default character
  2678                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2679                                                          jz      .10                                             ;no, skip ahead
  2680                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2681                                  .10                     mov     cl,14                                           ;indicator column
  2682                                                          call    SetConsoleChar                                  ;display ASCII character
  2683                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2684                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2685                                                          jz      .20                                             ;no, skip ahead
  2686                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2687                                  .20                     mov     cl,64                                           ;indicator column
  2688                                                          call    SetConsoleChar                                  ;display ASCII character
  2689                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2690                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2691                                                          jz      .30                                             ;no, skip ahead
  2692                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2693                                  .30                     mov     cl,15                                           ;indicator column
  2694                                                          call    SetConsoleChar                                  ;display ASCII character
  2695                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2696                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2697                                                          jz      .40                                             ;no, skip ahead
  2698                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2699                                  .40                     mov     cl,63                                           ;indicator column
  2700                                                          call    SetConsoleChar                                  ;display ASCII character
  2701                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2702                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2703                                                          jz      .50                                             ;no, skip ahead
  2704                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2705                                  .50                     mov     cl,16                                           ;indicator column
  2706                                                          call    SetConsoleChar                                  ;display ASCII character
  2707                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2708                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2709                                                          jz      .60                                             ;no, skip ahead
  2710                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2711                                  .60                     mov     cl,62                                           ;indicator column
  2712                                                          call    SetConsoleChar                                  ;display ASCII character
  2713                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2714                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2715                                                          jz      .70                                             ;no, skip ahead
  2716                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2717                                  .70                     mov     cl,78                                           ;indicator column
  2718                                                          call    SetConsoleChar                                  ;display ASCII character
  2719                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2720                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2721                                                          jz      .80                                             ;no, skip ahead
  2722                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2723                                  .80                     mov     cl,77                                           ;indicator column
  2724                                                          call    SetConsoleChar                                  ;display ASCII character
  2725                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2726                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2727                                                          jz      .90                                             ;no, skip ahead
  2728                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2729                                  .90                     mov     cl,76                                           ;indicator column
  2730                                                          call    SetConsoleChar                                  ;display ASCII character
  2731                                                          pop     es                                              ;restore non-volatile regs
  2732                                                          pop     ecx                                             ;
  2733                                                          ret                                                     ;return
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                  ;
  2736                                  ;       Routine:        PutConsoleString
  2737                                  ;
  2738                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2739                                  ;                       console position as needed.
  2740                                  ;
  2741                                  ;       In:             EDX     source address
  2742                                  ;                       DS      OS data selector
  2743                                  ;
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2746                                                          mov     esi,edx                                         ;source address
  2747                                                          cld                                                     ;forward strings
  2748                                  .10                     lodsb                                                   ;ASCII character
  2749                                                          or      al,al                                           ;end of string?
  2750                                                          jz      .40                                             ;yes, skip ahead
  2751                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2752                                                          jne     .20                                             ;no, skip ahead
  2753                                                          call    FirstConsoleColumn                              ;move to start of row
  2754                                                          jmp     .10                                             ;next character
  2755                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2756                                                          jne     .30                                             ;no, skip ahead
  2757                                                          call    NextConsoleRow                                  ;move to next row
  2758                                                          jmp     .10                                             ;next character
  2759                                  .30                     call    PutConsoleChar                                  ;output character to console
  2760                                                          call    NextConsoleColumn                               ;advance to next column
  2761                                                          jmp     .10                                             ;next character
  2762                                  .40                     pop     esi                                             ;restore non-volatile regs
  2763                                                          ret                                                     ;return
  2764                                  ;-----------------------------------------------------------------------------------------------------------------------
  2765                                  ;
  2766                                  ;       Routine:        Yield
  2767                                  ;
  2768                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2769                                  ;
  2770                                  ;-----------------------------------------------------------------------------------------------------------------------
  2771                                  Yield                   sti                                                     ;enable maskagle interrupts
  2772                                                          hlt                                                     ;halt until external interrupt
  2773                                                          ret                                                     ;return
  2774                                  ;=======================================================================================================================
  2775                                  ;
  2776                                  ;       Message Queue Helper Routines
  2777                                  ;
  2778                                  ;       GetMessage
  2779                                  ;       PutMessage
  2780                                  ;
  2781                                  ;=======================================================================================================================
  2782                                  ;-----------------------------------------------------------------------------------------------------------------------
  2783                                  ;
  2784                                  ;       Routine:        GetMessage
  2785                                  ;
  2786                                  ;       Description:    This routine reads and removes a message from the message queue.
  2787                                  ;
  2788                                  ;       Out:            EAX     lo-order message data
  2789                                  ;                       EDX     hi-order message data
  2790                                  ;
  2791                                  ;                       CY      0 = message read
  2792                                  ;                               1 = no message to read
  2793                                  ;
  2794                                  ;-----------------------------------------------------------------------------------------------------------------------
  2795                                  GetMessage              push    ebx                                             ;save non-volatile regs
  2796                                                          push    ecx                                             ;
  2797                                                          push    ds                                              ;
  2798                                                          push    ELDTMQ                                          ;load message queue selector ...
  2799                                                          pop     ds                                              ;... into data segment register
  2800                                                          mov     ebx,[MQHead]                                    ;head ptr
  2801                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  2802                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2803                                                          or      eax,edx                                         ;is queue empty?
  2804                                                          stc                                                     ;assume queue is emtpy
  2805                                                          jz      .20                                             ;yes, skip ahead
  2806                                                          xor     ecx,ecx                                         ;store zero
  2807                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  2808                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2809                                                          add     ebx,8                                           ;next queue element
  2810                                                          and     ebx,03fch                                       ;at end of queue?
  2811                                                          jnz     .10                                             ;no, skip ahead
  2812                                                          mov     bl,8                                            ;reset to 1st entry
  2813                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2814                                                          clc                                                     ;indicate message read
  2815                                  .20                     pop     ds                                              ;restore non-volatile regs
  2816                                                          pop     ecx                                             ;
  2817                                                          pop     ebx                                             ;
  2818                                                          ret                                                     ;return
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  ;
  2821                                  ;       Routine:        PutMessage
  2822                                  ;
  2823                                  ;       Description:    This routine adda a message to the message queue.
  2824                                  ;
  2825                                  ;       In:             ECX     hi-order data word
  2826                                  ;                       EDX     lo-order data word
  2827                                  ;
  2828                                  ;       Out:            CY      0 = success
  2829                                  ;                               1 = fail: queue is full
  2830                                  ;
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                  PutMessage              push    ds                                              ;save non-volatile regs
  2833                                                          push    ELDTMQ                                          ;load task message queue selector ...
  2834                                                          pop     ds                                              ;... into data segment register
  2835                                                          mov     eax,[MQTail]                                    ;tail ptr
  2836                                                          cmp     dword [eax],0                                   ;is queue full?
  2837                                                          stc                                                     ;assume failure
  2838                                                          jne     .20                                             ;yes, cannot store
  2839                                                          mov     [eax],edx                                       ;store lo-order data
  2840                                                          mov     [eax+4],ecx                                     ;store hi-order data
  2841                                                          add     eax,8                                           ;next queue element adr
  2842                                                          and     eax,03fch                                       ;at end of queue?
  2843                                                          jnz     .10                                             ;no, skip ahead
  2844                                                          mov     al,8                                            ;reset to top of queue
  2845                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2846                                                          clc                                                     ;indicate success
  2847                                  .20                     pop     ds                                              ;restore non-volatile regs
  2848                                                          ret                                                     ;return
  2849                                  ;=======================================================================================================================
  2850                                  ;
  2851                                  ;       Memory-Mapped Video Routines
  2852                                  ;
  2853                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2854                                  ;
  2855                                  ;       ClearConsoleScreen
  2856                                  ;       ScrollConsoleRow
  2857                                  ;       SetConsoleChar
  2858                                  ;
  2859                                  ;=======================================================================================================================
  2860                                  ;-----------------------------------------------------------------------------------------------------------------------
  2861                                  ;
  2862                                  ;       Routine:        ClearConsoleScreen
  2863                                  ;
  2864                                  ;       Description:    This routine clears the console (CGA) screen.
  2865                                  ;
  2866                                  ;-----------------------------------------------------------------------------------------------------------------------
  2867                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2868                                                          push    edi                                             ;
  2869                                                          push    ds                                              ;
  2870                                                          push    es                                              ;
  2871                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2872                                                          pop     ds                                              ;... into DS register
  2873                                                          push    EGDTCGA                                         ;load CGA selector ...
  2874                                                          pop     es                                              ;... into ES register
  2875                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2876                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2877                                                          xor     edi,edi                                         ;target offset
  2878                                                          cld                                                     ;forward strings
  2879                                                          rep     stosd                                           ;reset screen body
  2880                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2881                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2882                                                          rep     stosd                                           ;reset OIA line
  2883                                                          xor     al,al                                           ;zero register
  2884                                                          mov     [wbConsoleRow],al                               ;reset console row
  2885                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2886                                                          call    PlaceCursor                                     ;place cursor at current position
  2887                                                          pop     es                                              ;restore non-volatile regs
  2888                                                          pop     ds                                              ;
  2889                                                          pop     edi                                             ;
  2890                                                          pop     ecx                                             ;
  2891                                                          ret                                                     ;return
  2892                                  ;-----------------------------------------------------------------------------------------------------------------------
  2893                                  ;
  2894                                  ;       Routine:        ScrollConsoleRow
  2895                                  ;
  2896                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2897                                  ;
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2900                                                          push    esi                                             ;
  2901                                                          push    edi                                             ;
  2902                                                          push    ds                                              ;
  2903                                                          push    es                                              ;
  2904                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2905                                                          pop     ds                                              ;... into DS
  2906                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2907                                                          pop     es                                              ;... into ES
  2908                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2909                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2910                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2911                                                          cld                                                     ;forward strings
  2912                                                          rep     movsd                                           ;move 24 lines up
  2913                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2914                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2915                                                          rep     stosd                                           ;clear bottom row
  2916                                                          pop     es                                              ;restore non-volatile regs
  2917                                                          pop     ds                                              ;
  2918                                                          pop     edi                                             ;
  2919                                                          pop     esi                                             ;
  2920                                                          pop     ecx                                             ;
  2921                                                          ret                                                     ;return
  2922                                  ;-----------------------------------------------------------------------------------------------------------------------
  2923                                  ;
  2924                                  ;       Routine:        SetConsoleChar
  2925                                  ;
  2926                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2927                                  ;
  2928                                  ;       In:             AL      ASCII character
  2929                                  ;                       CL      column
  2930                                  ;                       CH      row
  2931                                  ;                       ES      CGA selector
  2932                                  ;
  2933                                  ;       Out:            EAX     last target address written (ES:)
  2934                                  ;                       CL      column + 1
  2935                                  ;
  2936                                  ;-----------------------------------------------------------------------------------------------------------------------
  2937                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2938                                                          movzx   eax,ch                                          ;row
  2939                                                          mov     ah,ECONCOLS                                     ;cols/row
  2940                                                          mul     ah                                              ;row * cols/row
  2941                                                          add     al,cl                                           ;add column
  2942                                                          adc     ah,0                                            ;handle carry
  2943                                                          shl     eax,1                                           ;screen offset
  2944                                                          mov     [es:eax],dl                                     ;store character
  2945                                                          inc     cl                                              ;next column
  2946                                                          ret                                                     ;return
  2947                                  ;=======================================================================================================================
  2948                                  ;
  2949                                  ;       Input/Output Routines
  2950                                  ;
  2951                                  ;       These routines read and/or write directly to ports.
  2952                                  ;
  2953                                  ;       PlaceCursor
  2954                                  ;       PutPrimaryEndOfInt
  2955                                  ;       PutSecondaryEndOfInt
  2956                                  ;       SetKeyboardLamps
  2957                                  ;       WaitForKeyInBuffer
  2958                                  ;       WaitForKeyOutBuffer
  2959                                  ;
  2960                                  ;=======================================================================================================================
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  ;
  2963                                  ;       Routine:        PlaceCursor
  2964                                  ;
  2965                                  ;       Description:    This routine positions the cursor on the console.
  2966                                  ;
  2967                                  ;       In:             DS      OS data selector
  2968                                  ;
  2969                                  ;-----------------------------------------------------------------------------------------------------------------------
  2970                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2971                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2972                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2973                                                          mul     ah                                              ;row offset
  2974                                                          add     al,[wbConsoleColumn]                            ;add column
  2975                                                          adc     ah,0                                            ;add overflow
  2976                                                          mov     ecx,eax                                         ;screen offset
  2977                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2978                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2979                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2980                                                          out     dx,al                                           ;select register
  2981                                                          inc     edx                                             ;data port
  2982                                                          mov     al,ch                                           ;hi-order cursor loc
  2983                                                          out     dx,al                                           ;store hi-order loc
  2984                                                          dec     edx                                             ;register select port
  2985                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2986                                                          out     dx,al                                           ;select register
  2987                                                          inc     edx                                             ;data port
  2988                                                          mov     al,cl                                           ;lo-order cursor loc
  2989                                                          out     dx,al                                           ;store lo-order loc
  2990                                                          pop     ecx                                             ;restore non-volatile regs
  2991                                                          ret                                                     ;return
  2992                                  ;-----------------------------------------------------------------------------------------------------------------------
  2993                                  ;
  2994                                  ;       Routine:        PutPrimaryEndOfInt
  2995                                  ;
  2996                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2997                                  ;
  2998                                  ;-----------------------------------------------------------------------------------------------------------------------
  2999                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3000                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3001                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3002                                                          ret                                                     ;return
  3003                                  ;-----------------------------------------------------------------------------------------------------------------------
  3004                                  ;
  3005                                  ;       Routine:        PutSecondaryEndOfInt
  3006                                  ;
  3007                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3008                                  ;
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3011                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3012                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3013                                                          ret                                                     ;return
  3014                                  ;-----------------------------------------------------------------------------------------------------------------------
  3015                                  ;
  3016                                  ;       Routine:        SetKeyboardLamps
  3017                                  ;
  3018                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3019                                  ;
  3020                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3021                                  ;
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3024                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3025                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3026                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3027                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3028                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3029                                                          mov     al,bh                                           ;set/reset lamps value
  3030                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3031                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3032                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3033                                                          ret                                                     ;return
  3034                                  ;-----------------------------------------------------------------------------------------------------------------------
  3035                                  ;
  3036                                  ;       Routine:        WaitForKeyInBuffer
  3037                                  ;
  3038                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3039                                  ;
  3040                                  ;       Out:            ZF      1 = Input buffer ready
  3041                                  ;                               0 = Input buffer not ready after timeout
  3042                                  ;
  3043                                  ;-----------------------------------------------------------------------------------------------------------------------
  3044                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3045                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3046                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3047                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3048                                                          loopnz  .10                                             ;yes, repeat till timeout
  3049                                                          pop     ecx                                             ;restore non-volatile regs
  3050                                                          ret                                                     ;return
  3051                                  ;-----------------------------------------------------------------------------------------------------------------------
  3052                                  ;
  3053                                  ;       Routine:        WaitForKeyOutBuffer
  3054                                  ;
  3055                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3056                                  ;
  3057                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3058                                  ;                               0 = Output buffer empty after timeout
  3059                                  ;
  3060                                  ;-----------------------------------------------------------------------------------------------------------------------
  3061                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3062                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3063                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3064                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3065                                                          loopz   .10                                             ;loop until output buffer bit
  3066                                                          pop     ecx                                             ;restore non-volatile regs
  3067                                                          ret                                                     ;return
  3068                                  ;-----------------------------------------------------------------------------------------------------------------------
  3069                                  ;
  3070                                  ;       End of the Kernel Function Library
  3071                                  ;
  3072                                  ;-----------------------------------------------------------------------------------------------------------------------
  3073                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3074                                  ;=======================================================================================================================
  3075                                  ;
  3076                                  ;       Console Task
  3077                                  ;
  3078                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3079                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3080                                  ;       screen and responds to user commands.
  3081                                  ;
  3082                                  ;=======================================================================================================================
  3083                                  ;-----------------------------------------------------------------------------------------------------------------------
  3084                                  ;
  3085                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3086                                  ;
  3087                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3088                                  ;
  3089                                  ;-----------------------------------------------------------------------------------------------------------------------
  3090                                  section                 constack                                                ;console task stack
  3091                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3092                                  ;-----------------------------------------------------------------------------------------------------------------------
  3093                                  ;
  3094                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3095                                  ;
  3096                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3097                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3098                                  ;       16 descriptors. Six are initially defined.
  3099                                  ;
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101                                  section                 conldt                                                  ;console local descriptors
  3102                                                          dq      004093004780007Fh                               ;04 TSS alias
  3103                                                          dq      004093004700007Fh                               ;0c LDT alias
  3104                                                          dq      00409300400006FFh                               ;14 stack
  3105                                                          dq      00CF93000000FFFFh                               ;1c data
  3106                                                          dq      00409B0050000FFFh                               ;24 code
  3107                                                          dq      00409300480007FFh                               ;2c message queue
  3108                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3109                                  ;-----------------------------------------------------------------------------------------------------------------------
  3110                                  ;
  3111                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3112                                  ;
  3113                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3114                                  ;       segment. CS to console code.
  3115                                  ;
  3116                                  ;-----------------------------------------------------------------------------------------------------------------------
  3117                                  section                 contss                                                  ;console task state segment
  3118                                                          dd      0                                               ;00 back-link tss
  3119                                                          dd      0700h                                           ;04 esp ring 0
  3120                                                          dd      0014h                                           ;08 ss ring 0
  3121                                                          dd      0700h                                           ;0c esp ring 1
  3122                                                          dd      0014h                                           ;10 es ring 1
  3123                                                          dd      0700h                                           ;14 esp ring 2
  3124                                                          dd      0014h                                           ;18 ss ring 2
  3125                                                          dd      0                                               ;1c cr ring 3
  3126                                                          dd      0                                               ;20 eip
  3127                                                          dd      0200h                                           ;24 eflags
  3128                                                          dd      0                                               ;28 eax
  3129                                                          dd      0                                               ;2c ecx
  3130                                                          dd      0                                               ;30 edx
  3131                                                          dd      0                                               ;34 ebx
  3132                                                          dd      0700h                                           ;38 esp ring 3
  3133                                                          dd      0                                               ;3c ebp
  3134                                                          dd      0                                               ;40 esi
  3135                                                          dd      0                                               ;44 edi
  3136                                                          dd      001Ch                                           ;48 es
  3137                                                          dd      0024h                                           ;4c cs
  3138                                                          dd      0014h                                           ;50 ss ring 3
  3139                                                          dd      001Ch                                           ;54 ds
  3140                                                          dd      0                                               ;58 fs
  3141                                                          dd      0                                               ;5c gs
  3142                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3143                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3144                                  ;-----------------------------------------------------------------------------------------------------------------------
  3145                                  ;
  3146                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3147                                  ;
  3148                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3149                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3150                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3151                                  ;       event.
  3152                                  ;
  3153                                  ;-----------------------------------------------------------------------------------------------------------------------
  3154                                  section                 conmque                                                 ;console message queue
  3155                                                          dd      8                                               ;head pointer
  3156                                                          dd      8                                               ;tail pointer
  3157                                                          times   510 dd 0                                        ;queue elements
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159                                  ;
  3160                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3161                                  ;
  3162                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3163                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3164                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3165                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3166                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3167                                  ;       board input, echoing to the console screen and responding to user commands.
  3168                                  ;
  3169                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3170                                  ;
  3171                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3172                                  ;                               |  Real Mode Interrupt Vectors                  |
  3173                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3174                                  ;                               |  Reserved BIOS Memory Area                    |
  3175                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3176                                  ;                               |  Shared Kernel Memory Area                    |
  3177                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3178                                  ;                               |  Global Descriptor Table (GDT)                |
  3179                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3180                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3181                                  ;                       002000  +-----------------------------------------------+
  3182                                  ;                               |  Interrupt Handlers                           |
  3183                                  ;                               |  Kernel Function Library                      |
  3184                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3185                                  ;                               |  Console Task Stack Area                      |
  3186                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3187                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3188                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3189                                  ;                               |  Console Task Task State Segment (TSS)        |
  3190                                  ;                       004800  +-----------------------------------------------+
  3191                                  ;                               |  Console Task Message Queue                   |
  3192                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3193                                  ;                               |  Console Task Code                            |
  3194                                  ;                               |  Console Task Constants                       |
  3195                                  ;                       006000  +===============================================+
  3196                                  ;
  3197                                  ;-----------------------------------------------------------------------------------------------------------------------
  3198                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3199                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3200                                  
  3201                                                          clearConsoleScreen                                      ;clear the console screen
  3202                                                          putConsoleString czTitle                                ;display startup message
  3203                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3204                                                          placeCursor                                             ;set CRT cursor location
  3205                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3206                                                          putConsoleString czNewLine                              ;newline
  3207                                                          putConsoleString wzConsoleInBuffer                      ;print entered command
  3208                                                          putConsoleString czNewLine                              ;new line
  3209                                                          putConsoleString czUnknownCommand                       ;display error message
  3210                                  
  3211                                                          jmp     .10                                             ;next command
  3212                                  ;-----------------------------------------------------------------------------------------------------------------------
  3213                                  ;
  3214                                  ;       Routine:        ConInitializeData
  3215                                  ;
  3216                                  ;       Description:    This routine initializes console task variables.
  3217                                  ;
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3220                                                          push    edi                                             ;
  3221                                                          push    es                                              ;
  3222                                  ;
  3223                                  ;       Initialize console work areas.
  3224                                  ;
  3225                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3226                                                          pop     es                                              ;... into extra segment register
  3227                                                          mov     edi,ECONDATA                                    ;OS console data address
  3228                                                          xor     al,al                                           ;initialization value
  3229                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3230                                                          cld                                                     ;forward strings
  3231                                                          rep     stosb                                           ;initialize data
  3232                                  ;
  3233                                  ;       Restore and return.
  3234                                  ;
  3235                                                          pop     es                                              ;restore non-volatile regs
  3236                                                          pop     edi                                             ;
  3237                                                          pop     ecx                                             ;
  3238                                                          ret                                                     ;return
  3239                                  ;-----------------------------------------------------------------------------------------------------------------------
  3240                                  ;
  3241                                  ;       Constants
  3242                                  ;
  3243                                  ;-----------------------------------------------------------------------------------------------------------------------
  3244                                  czNewLine               db      13,10,0                                         ;new line string
  3245                                  czPrompt                db      ":",0                                           ;prompt string
  3246                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3247                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3248                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3249                                  %endif
  3250                                  %ifdef BUILDDISK
  3251                                  ;-----------------------------------------------------------------------------------------------------------------------
  3252                                  ;
  3253                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3254                                  ;
  3255                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  section                 unused                                                  ;unused disk space
  3259                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3260                                  %endif
  3261                                  ;=======================================================================================================================
  3262                                  ;
  3263                                  ;       End of Program Code
  3264                                  ;
  3265                                  ;=======================================================================================================================
