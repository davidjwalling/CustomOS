     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.006
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;			are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;			console task.
    10                                  ;
    11                                  ;	Revised:	July 1, 2017
    12                                  ;
    13                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    19                                  ;
    20                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;=======================================================================================================================
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;	Assembly Directives
    26                                  ;
    27                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK
    36                                  %define BUILDBOOT
    37                                  %define BUILDCOM
    38                                  %endif
    39                                  %ifdef BUILDPREP
    40                                  %define BUILDBOOT
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;	Conventions
    45                                  ;
    46                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    47                                  ;			Labels within a routine begin at ".10" and increment by 10.
    48                                  ;
    49                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    50                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    51                                  ;			Register names in comments are in upper case.
    52                                  ;			Hexadecimal values in comments are in lower case.
    53                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    54                                  ;			register contents on entry and exit.
    55                                  ;
    56                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    57                                  ;			Assembly operands begin in column 33.
    58                                  ;			Lines should not extend beyond column 120.
    59                                  ;
    60                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    61                                  ;			Routine names begin with a verb (Get, Read, etc.).
    62                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    63                                  ;
    64                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    65                                  ;			Constant stored values are named in camel case, starting with 'c'.
    66                                  ;			The 2nd letter of the constant label indicates the storage type.
    67                                  ;
    68                                  ;			cq......	constant quad-word (dq)
    69                                  ;			cd......	constant double-word (dd)
    70                                  ;			cw......	constant word (dw)
    71                                  ;			cb......	constant byte (db)
    72                                  ;			cz......	constant ASCIIZ (null-terminated) string
    73                                  ;
    74                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    75                                  ;			The 2nd letter of the variable label indicates the storage type.
    76                                  ;
    77                                  ;			wq......	variable quad-word (resq)
    78                                  ;			wd......	variable double-word (resd)
    79                                  ;			ww......	variable word (resw)
    80                                  ;			wb......	variable byte (resb)
    81                                  ;
    82                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    83                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    84                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    85                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    86                                  ;			Octal literal values are avoided.
    87                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    88                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    89                                  ;
    90                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    91                                  ;			Structure names do not begin with a verb.
    92                                  ;
    93                                  ;	Macros:		Macro names are in camel case (getDateString).
    94                                  ;			Macro names do begin with a verb.
    95                                  ;
    96                                  ;	Registers:	Register names in comments are in upper case.
    97                                  ;			Register names in source code are in lower case.
    98                                  ;
    99                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
   100                                  ;			Registers EAX and ECX are preferred for returning response/result values.
   101                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   102                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   103                                  ;
   104                                  ;-----------------------------------------------------------------------------------------------------------------------
   105                                  ;=======================================================================================================================
   106                                  ;
   107                                  ;	Equates
   108                                  ;
   109                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   110                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   111                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   112                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   113                                  ;
   114                                  ;=======================================================================================================================
   115                                  ;-----------------------------------------------------------------------------------------------------------------------
   116                                  ;
   117                                  ;	8042 Keyboard Controller						EKEYB...
   118                                  ;
   119                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   120                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   121                                  ;
   122                                  ;-----------------------------------------------------------------------------------------------------------------------
   123                                  EKEYBPORTDATA		equ	060h						;data port
   124                                  EKEYBPORTSTAT		equ	064h						;status port
   125                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   126                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   127                                  EKEYBBITIN		equ	002h						;input buffer status bit
   128                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   129                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   130                                  										;---------------------------------------
   131                                  										;	Keyboard Scan Codes
   132                                  										;---------------------------------------
   133                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   134                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   135                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   136                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   137                                  EKEYBSLASH		equ	035h						;slash
   138                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   139                                  EKEYBALTDOWN		equ	038h						;alt key down
   140                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   141                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   142                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   143                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   144                                  EKEYBUP			equ	080h						;up
   145                                  EKEYBCTRLUP		equ	09Dh						;control key up
   146                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   147                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   148                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   149                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   150                                  EKEYBALTUP		equ	0B8h						;alt key up
   151                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   152                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   153                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   154                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   155                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   156                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  ;
   159                                  ;	8253 Programmable Interrupt Timer					EPIT...
   160                                  ;
   161                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   162                                  ;	approximately 18.2 times per second.
   163                                  ;
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   166                                  ;-----------------------------------------------------------------------------------------------------------------------
   167                                  ;
   168                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   169                                  ;
   170                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   171                                  ;	external devices and signals a hardware interrupt to the CPU.
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  EPICPORTPRI		equ	020h						;primary control port 0
   175                                  EPICPORTPRI1		equ	021h						;primary control port 1
   176                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   177                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   178                                  EPICEOI			equ	020h						;non-specific EOI code
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;
   181                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   182                                  ;
   183                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   184                                  ;	for CGA, EGA, VGA and compatible video modes.
   185                                  ;
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ECRTPORTHI		equ	003h						;controller port hi
   188                                  ECRTPORTLO		equ	0D4h						;controller port lo
   189                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   190                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  ;
   193                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   194                                  ;
   195                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   196                                  ;
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  EFDCPORTHI		equ	003h						;controller port hi
   199                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   200                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   201                                  EFDCSTATBUSY		equ	010h						;main status is busy
   202                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  ;
   205                                  ;	x86 Descriptor Access Codes						EACC...
   206                                  ;
   207                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   208                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   209                                  ;
   210                                  ;	0.......	Segment is not present in memory (triggers int 11)
   211                                  ;	1.......	Segment is present in memory
   212                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   213                                  ;	...0....	Segment is a system segment
   214                                  ;	...00010		Local Descriptor Table
   215                                  ;	...00101		Task Gate
   216                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   217                                  ;	...01100		Call Gate (386)
   218                                  ;	...01110		Interrupt Gate (386)
   219                                  ;	...01111		Trap Gate (386)
   220                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   221                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   222                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EACCLDT			equ	10000010b					;local descriptor table
   226                                  EACCTASK		equ	10000101b					;task gate
   227                                  EACCTSS			equ	10001001b					;task-state segment
   228                                  EACCGATE		equ	10001100b					;call gate
   229                                  EACCINT			equ	10001110b					;interrupt gate
   230                                  EACCTRAP		equ	10001111b					;trap gate
   231                                  EACCDATA		equ	10010011b					;upward writable data
   232                                  EACCCODE		equ	10011011b					;non-conforming readable code
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;
   235                                  ;	BIOS Interrupts and Functions						EBIOS...
   236                                  ;
   237                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   238                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   239                                  ;
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   242                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   243                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   244                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   245                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   246                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   247                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   248                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   249                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  ;
   252                                  ;	ASCII									EASCII...
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EASCIIBACKSPACE		equ	008h						;backspace
   256                                  EASCIILINEFEED		equ	00Ah						;line feed
   257                                  EASCIIRETURN		equ	00Dh						;carriage return
   258                                  EASCIIESCAPE		equ	01Bh						;escape
   259                                  EASCIISPACE		equ	020h						;space
   260                                  EASCIIUPPERA		equ	041h						;'A'
   261                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   262                                  EASCIITILDE		equ	07Eh						;'~'
   263                                  EASCIICASE		equ	00100000b					;case bit
   264                                  EASCIICASEMASK		equ	11011111b					;case mask
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;	Boot Sector and Loader Constants					EBOOT...
   268                                  ;
   269                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   270                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   271                                  ;
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   274                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   275                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   276                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   277                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   278                                  EBOOTMAXTRIES		equ	5						;max read retries
   279                                  ;-----------------------------------------------------------------------------------------------------------------------
   280                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   281                                  ;-----------------------------------------------------------------------------------------------------------------------
   282                                  ESELDAT			equ	018h						;kernel data selector
   283                                  ESELCGA			equ	020h						;cga video selector
   284                                  ESELOSCODE		equ	048h						;os kernel code selector
   285                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   286                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   287                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   288                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ;	LDT Selectors								ESEL...
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ESELMQ			equ	02Ch						;console task message queue
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  ;	Kernel Constants							EKRN...
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  EKRNDESLEN		equ	8						;size of descriptor
   297                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   298                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;	Keyboard Flags								EKEYF...
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   303                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   304                                  EKEYFALTLEFT		equ	00000100b					;left alt
   305                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   306                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   307                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   308                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   309                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   310                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   311                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   312                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;	Console Constants							ECON...
   315                                  ;-----------------------------------------------------------------------------------------------------------------------
   316                                  ECONCOLS		equ	80						;columns per row
   317                                  ECONROWS		equ	24						;console rows
   318                                  ECONOIAROW		equ	24						;operator information area row
   319                                  ECONCOLBYTES		equ	2						;bytes per column
   320                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   321                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   322                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   323                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;	Kernel Message Identifiers						EMSG...
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  EMSGKEYDOWN		equ	041000000h					;key-down
   328                                  EMSGKEYUP		equ	041010000h					;key-up
   329                                  EMSGKEYCHAR		equ	041020000h					;character
   330                                  ;=======================================================================================================================
   331                                  ;
   332                                  ;	Structures
   333                                  ;
   334                                  ;=======================================================================================================================
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ;
   337                                  ;	MQUEUE
   338                                  ;
   339                                  ;	The MQUEUE structure maps memory used for a message queue.
   340                                  ;
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  struc			MQUEUE
   343 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   344 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   345 00000008 <res 000003F8>          MQData			resd	254						;message queue
   346                                  endstruc
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;	OSDATA
   350                                  ;
   351                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   352                                  ;	used by the BIOS.
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  struc			OSDATA
   356 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   357 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   358 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   359 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   360 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   361 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   362 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   363 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   364 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   365 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   366 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   367 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   368 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   369 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   370 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   371 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   372 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   373 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   374 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   375 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   376 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   377 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   378 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   379 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   380 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   381 00000449 <res 00000001>          			resb	1						;449 current video mode
   382 0000044A <res 00000002>          			resw	1						;44a screen columns
   383 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   384 0000044E <res 00000002>          			resw	1						;44e current video page offset
   385 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   386 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   387 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   388 00000462 <res 00000001>          			resb	1						;462 active display page number
   389 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   390 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   391 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   392 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   393 00000469 <res 00000003>          			resb	3						;469 vague
   394 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   395 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   396 00000471 <res 00000001>          			resb	1						;471 bios break flag
   397 00000472 <res 00000002>          			resw	1						;472 soft reset
   398 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   399 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   400 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   401 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   402 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   403 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   404 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   405 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   406 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   407 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   408 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   409 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   410 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   411 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   412 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   413 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   414 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   415 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   416 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   417 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   418 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   419 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   420 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   421 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   422 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   423 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   424 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   425 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   426 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   427 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   428 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   429 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   430 000004AC <res 00000008>          			resb	8						;4ac reserved
   431 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   432 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   433 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   434 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   435 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   436 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   437 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   438 000004CD <res 00000001>          			resb	1						;4cd unknown
   439 000004CE <res 00000002>          			resw	1						;4de day counter
   440 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   441 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   442 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   443 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   444 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   445 00000505 <res 0000000A>          			resb	10						;505 POST work area
   446 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   447 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   448 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   449 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   450 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   451 0000051E <res 00000002>          			resw	1						;51e unknown
   452 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   453 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   454 00000530 <res 00000004>          			resb	4						;530 MODE command
   455 00000534 <res 000001CC>          			resb	460						;534 unused
   456 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;
   459                                  ;	OS Variables								@disk: N/A	@mem: 000800
   460                                  ;
   461                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   462                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   463                                  ;	are organized based on the task that usually accesses them.
   464                                  ;
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ;
   468                                  ;	Console Task Variables
   469                                  ;
   470                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   471                                  ;	the console task starts.
   472                                  ;
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  			align	4
   475                                  ECONDATA		equ	($)
   476 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   477 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   478 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   479 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   480 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   481 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   482 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   483 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   484 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   485 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   486 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   487 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   488 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   489                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   490                                  ;-----------------------------------------------------------------------------------------------------------------------
   491                                  ;
   492                                  ;	End of OS Variables
   493                                  ;
   494                                  ;-----------------------------------------------------------------------------------------------------------------------
   495                                  endstruc
   496                                  ;-----------------------------------------------------------------------------------------------------------------------
   497                                  ;
   498                                  ;	Macros
   499                                  ;
   500                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   501                                  ;
   502                                  ;-----------------------------------------------------------------------------------------------------------------------
   503                                  %macro			mint	1
   504                                  _%1			equ	($-$$) / EKRNDESLEN
   505                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   506                                  %endmacro
   507                                  %macro			mtrap	1
   508                                  _%1			equ	($-$$) / EKRNDESLEN
   509                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   510                                  %endmacro
   511                                  %macro			menter	1
   512                                  ?%1			equ	($-$$)
   513                                  %endmacro
   514                                  %macro			tsvce	1
   515                                  e%1			equ	($-tsvc)/4
   516                                  			dd	%1
   517                                  %endmacro
   518                                  %ifdef BUILDBOOT
   519                                  ;=======================================================================================================================
   520                                  ;
   521                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   522                                  ;
   523                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   524                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   525                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   526                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   527                                  ;
   528                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   529                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   530                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   531                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   532                                  ;	immediately followed by a disk parameter table.
   533                                  ;
   534                                  ;=======================================================================================================================
   535                                  			cpu	8086						;assume minimal CPU
   536                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   537                                  			bits	16						;16-bit code at power-up
   538                                  %ifdef BUILDPREP
   539 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   540                                  %else
   541                                  Boot			jmp	word Boot.10					;jump over parameter table
   542                                  %endif
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;	Disk Parameter Table
   546                                  ;
   547                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   548                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   549                                  ;
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   552 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   553 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   554 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   555 00000010 02                      cbFatCount		db	2						;file allocation table copies
   556 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   557 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   558 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   559 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   560                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   561 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   562 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   563 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   564                                  ;
   565                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   566                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   567                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   568                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   569                                  ;	given several possible starting values for CS:IP.
   570                                  ;
   571                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   572 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   573                                  .@20			equ	$-$$						;.@20 = 021h
   574 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   575 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   576 00000025 B104                    			mov	cl,4						;shift count
   577 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   578 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   579 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   580                                  ;
   581                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   582                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   583                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   584                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   585                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   586                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   587                                  ;
   588 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   589 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   590 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   591 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   592 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   593                                  ;
   594                                  ;	Our boot addressability is now set up according to the following diagram.
   595                                  ;
   596                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   597                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   598                                  ;				|  256 = 100h bytes				|
   599                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   600                                  ;				|  Boot Sector (vstart=0100h)			|
   601                                  ;				|  1 sector = 512 = 200h bytes			|
   602                                  ;			007e00	+-----------------------------------------------+ DS:0300
   603                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   604                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   605                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   606                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   607                                  ;			009200	+-----------------------------------------------+ DS:1700
   608                                  ;
   609                                  ;	On entry, DL indicates the drive being booted from.
   610                                  ;
   611 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   612                                  ;
   613                                  ;	Compute directory i/o buffer address.
   614                                  ;
   615 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   616 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   617 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   618 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   619                                  ;
   620                                  ;	Compute segment where os.com will be loaded.
   621                                  ;
   622 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   623 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   624 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   625 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   626                                  ;
   627                                  ;	Set the video mode to 80 column, 25 row, text.
   628                                  ;
   629 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   630 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   631                                  ;
   632                                  ;	Write a message to the console so we know we have our addressability established.
   633                                  ;
   634 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   635 0000005C E84B01                  			call	BootPrint					;display loader message
   636                                  ;
   637                                  ;	Initialize the number of directory sectors to search.
   638                                  ;
   639 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   640 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   641                                  ;
   642                                  ;	Compute number of directory sectors and initialize overhead count.
   643                                  ;
   644 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   645 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   646 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   647 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   648                                  ;
   649                                  ;	Compute directory entries per sector.
   650                                  ;
   651 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   652 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   653 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   654                                  ;
   655                                  ;	Compute first logical directory sector and update overhead count.
   656                                  ;
   657 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   658 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   659 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   660 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   661 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   662 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   663                                  ;
   664                                  ;	Read directory sector.
   665                                  ;
   666 0000008E B001                    .30			mov	al,1						;sector count
   667 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   668 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   669 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   670                                  ;
   671                                  ;	Setup variables to search this directory sector.
   672                                  ;
   673 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   674 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   675 000000A1 7603                    			jna	.40						;no, continue
   676 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   677 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   678 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   679 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   680                                  ;
   681                                  ;	Loop through directory sectors searching for kernel program.
   682                                  ;
   683 000000B1 56                      .50			push	si						;save kernel name address
   684 000000B2 57                      			push	di						;save dir i/o buffer address
   685 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   686 000000B6 FC                      			cld							;forward strings
   687 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   688 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   689 000000BA 5E                      			pop	si						;restore kernel name address
   690 000000BB 7418                    			je	.60						;exit loop if found
   691 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   692 000000C1 48                      			dec	ax						;decrement remaining entries
   693 000000C2 75ED                    			jnz	.50						;next entry
   694                                  ;
   695                                  ;	Repeat search if we are not at the end of the directory.
   696                                  ;
   697 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   698 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   699 000000CD 75BF                    			jne	.30						;no, get next sector
   700 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   701 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   702                                  ;
   703                                  ;	If we find the kernel program in the directory, read the FAT.
   704                                  ;
   705 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   706 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   707 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   708 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   709 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   710 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   711                                  ;
   712                                  ;	Get the starting cluster of the kernel program and target address.
   713                                  ;
   714 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   715 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   716                                  ;
   717                                  ;	Read each program cluster into RAM.
   718                                  ;
   719 000000EE 50                      .70			push	ax						;save cluster nbr
   720 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   721 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   722 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   723 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   724 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   725 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   726 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   727 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   728                                  ;
   729                                  ;	Update buffer pointer for next cluster.
   730                                  ;
   731 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   732 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   733 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   734 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   735 00000113 58                      			pop	ax						;AX = restore cluster nbr
   736                                  ;
   737                                  ;	Compute next cluster number.
   738                                  ;
   739 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   740 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   741 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   742 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   743 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   744 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   745 00000120 83E701                  			and	di,1						;get low bit
   746 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   747 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   748 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   749                                  ;
   750                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   751                                  ;
   752 0000012B F6C101                  			test	cl,1						;is cluster odd?
   753 0000012E 7404                    			jz	.80						;no, skip ahead
   754 00000130 B104                    			mov	cl,4						;shift count
   755 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   756 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   757 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   758 0000013A 75B2                    			jne	.70						;no, continue
   759                                  ;
   760                                  ;	Transfer control to the operating system program.
   761                                  ;
   762 0000013C EA                      			db	0EAh						;jmp seg:offset
   763 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   764 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   765                                  ;
   766                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   767                                  ;
   768 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   769 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   770 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   771 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   772 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   773 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   774 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   775 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   776 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   777 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   778                                  ;
   779                                  ;	Try maxtries times to read sector.
   780                                  ;
   781 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   782 00000160 53                      .10			push	bx						;save buffer address
   783 00000161 51                      			push	cx						;save retry count
   784 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   785 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   786 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   787 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   788 0000016F 59                      			pop	cx						;restore retry count
   789 00000170 5B                      			pop	bx						;restore buffer address
   790 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   791 00000173 E2EB                    			loop	.10						;retry
   792                                  ;
   793                                  ;	Handle disk error: convert to ASCII and store in error string.
   794                                  ;
   795 00000175 88E0                    			mov	al,ah						;AL = bios error code
   796 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   797 00000179 B210                    			mov	dl,16						;divisor for base 16
   798 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   799 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   800 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   801 00000183 7203                    			jb	.20						;continue if numeral
   802 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   803 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   804 0000018A 7203                    			jb	.30						;continue if numeral
   805 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   806 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   807 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   808 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   809 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   810 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   811 0000019C 7504                    			jnz	.20						;continue if key pressed
   812 0000019E FB                      			sti							;enable maskable interrupts
   813 0000019F F4                      			hlt							;wait for interrupt
   814 000001A0 EBF6                    			jmp	.10						;repeat
   815 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   816 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   817 000001A6 FB                      .30			sti							;enable maskable interrupts
   818 000001A7 F4                      			hlt							;stop until reset, int, nmi
   819 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   820                                  ;
   821                                  ;	Display text message.
   822                                  ;
   823 000001AA FC                      BootPrint		cld							;forward strings
   824 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   825 000001AC 84C0                    			test	al,al						;end of string?
   826 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   827 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   828 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   829 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   830 000001B6 C3                      BootReturn		ret							;return
   831                                  ;-----------------------------------------------------------------------------------------------------------------------
   832                                  ;
   833                                  ;	Constants
   834                                  ;
   835                                  ;-----------------------------------------------------------------------------------------------------------------------
   836 000001B7 90                      			align	2
   837 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   838 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   838 000001C3 4F4D               
   839 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   839 000001CE 530D0A00           
   840 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   840 000001DB 7220               
   841 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   842 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   842 000001E9 6700               
   843                                  ;-----------------------------------------------------------------------------------------------------------------------
   844                                  ;
   845                                  ;	Work Areas
   846                                  ;
   847                                  ;-----------------------------------------------------------------------------------------------------------------------
   848 000001EB 90                      			align	2
   849 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   850 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   851 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   852 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   853 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   854                                  wwReadCountCommand	equ	$						;read count and command
   855 000001F6 00                      wbReadCount		db	0						;sectors to read
   856 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   857                                  wwDriveHead		equ	$						;drive, head (word)
   858 000001F8 00                      wbDrive			db	0						;drive
   859 000001F9 00                      wbHead			db	0						;head
   860                                  wwSectorTrack		equ	$						;sector, track (word)
   861 000001FA 00                      			db	0						;sector
   862 000001FB 00                      wbTrack			db	0						;track
   863 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   864 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   865                                  %endif
   866                                  %ifdef BUILDPREP
   867                                  ;=======================================================================================================================
   868                                  ;
   869                                  ;	Diskette Preparation Code
   870                                  ;
   871                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   872                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   873                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   874                                  ;
   875                                  ;=======================================================================================================================
   876                                  ;
   877                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   878                                  ;
   879 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   880 00000203 E8A4FF                  			call	BootPrint					;display message
   881                                  ;
   882                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   883                                  ;
   884 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   885 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   886 0000020A 7504                    			jnz	.12						;continue if key pressed
   887 0000020C FB                      			sti							;enable interrupts
   888 0000020D F4                      			hlt							;wait for interrupt
   889 0000020E EBF6                    			jmp	.10						;repeat
   890 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   891 00000212 7407                    			je	.15						;yes, branch
   892 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   893 00000216 75EE                    			jne	.10						;no, repeat
   894 00000218 E9A900                  			jmp	.90						;yes, exit program
   895                                  ;
   896                                  ;	Display writing-sector message and patch the JMP instruction.
   897                                  ;
   898 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   899 0000021E E889FF                  			call	BootPrint					;display message
   900 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   901 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   902 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   903                                  ;
   904                                  ;	Try to read the boot sector.
   905                                  ;
   906 00000229 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   907 0000022C 51                      .20			push	cx						;save remaining tries
   908 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   909 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   910 00000233 B90100                  			mov	cx,1						;track zero, sector one
   911 00000236 B80102                  			mov	ax,0201h					;read one sector
   912 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   913 0000023B 59                      			pop	cx						;restore remaining retries
   914 0000023C 7307                    			jnc	.30						;skip ahead if successful
   915 0000023E E2EC                    			loop	.20						;try again
   916 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   917 00000243 EB2C                    			jmp	.50						;branch to error routine
   918                                  ;
   919                                  ;	Copy diskette parms from input buffer to output buffer.
   920                                  ;
   921 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   922 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   923 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   924 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   925 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   926 00000254 FC                      			cld							;forward string copies
   927 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   928                                  ;
   929                                  ;	Try to write boot sector to diskette.
   930                                  ;
   931 00000257 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   932 0000025A 51                      .40			push	cx						;save remaining tries
   933 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   934 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   935 00000261 B90100                  			mov	cx,1						;track zero, sector one
   936 00000264 B80103                  			mov	ax,0301h					;write one sector
   937 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   938 00000269 59                      			pop	cx						;restore remaining retries
   939 0000026A 7326                    			jnc	.80						;skip ahead if successful
   940 0000026C E2EC                    			loop	.40						;try again
   941 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   942                                  ;
   943                                  ;	Convert the error code to ASCII and display the error message.
   944                                  ;
   945 00000271 50                      .50			push	ax						;save error code
   946 00000272 88E0                    			mov	al,ah						;copy error code
   947 00000274 B400                    			mov	ah,0						;AX = error code
   948 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   949 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   950 0000027A 0D3030                  			or	ax,03030h					;add ASCII zone digits
   951 0000027D 80FC3A                  			cmp	ah,03Ah						;AH ASCII numeral?
   952 00000280 7203                    			jb	.60						;yes, continue
   953 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   954 00000285 3C3A                    .60			cmp	al,03Ah						;al ASCII numeral?
   955 00000287 7202                    			jb	.70						;yes, continue
   956 00000289 0407                    			add	al,7						;no, make ASCII
   957 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   958 0000028E E819FF                  			call	BootPrint					;write error message
   959 00000291 58                      			pop	ax						;restore error code
   960                                  ;
   961                                  ;	Display the completion message.
   962                                  ;
   963 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   964 00000295 88E0                    			mov	al,ah						;BIOS return code
   965 00000297 3C00                    			cmp	al,0						;success?
   966 00000299 7426                    			je	.85						;yes, continue
   967 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   968 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   969 000002A0 741F                    			je	.85						;yes, continue
   970 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   971 000002A5 3C02                    			cmp	al,2						;address mark not found?
   972 000002A7 7418                    			je	.85						;yes, continue
   973 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   974 000002AC 3C03                    			cmp	al,3						;protected disk?
   975 000002AE 7411                    			je	.85						;yes, continue
   976 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   977 000002B3 3C06                    			cmp	al,6						;diskette removed?
   978 000002B5 740A                    			je	.85						;yes, continue
   979 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   980 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   981 000002BC 7403                    			je	.85						;yes, continue
   982 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   983 000002C1 E8E6FE                  .85			call	BootPrint					;display result message
   984 000002C4 B8004C                  .90			mov	ax,04C00H					;terminate with zero result code
   985 000002C7 CD21                    			int	021h						;terminate DOS program
   986 000002C9 C3                      			ret							;return (should not execute)
   987                                  ;-----------------------------------------------------------------------------------------------------------------------
   988                                  ;
   989                                  ;	Diskette Preparation Messages
   990                                  ;
   991                                  ;-----------------------------------------------------------------------------------------------------------------------
   992 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   992 000002D3 5320426F6F742D4469-
   992 000002DC 736B65747465205072-
   992 000002E5 657061726174696F6E-
   992 000002EE 2050726F6772616D   
   993 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   993 000002FF 687420284329203230-
   993 00000308 31302D323031372044-
   993 00000311 61766964204A2E2057-
   993 0000031A 616C6C696E672E2041-
   993 00000323 6C6C20726967687473-
   993 0000032C 207265736572766564-
   993 00000335 2E                 
   994 00000336 0D0A                    			db	13,10
   995 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   995 00000341 6F6772616D206F7665-
   995 0000034A 727772697465732074-
   995 00000353 686520626F6F742073-
   995 0000035C 6563746F72206F6620-
   995 00000365 61206469736B657474-
   995 0000036E 652077697468207374-
   995 00000377 617274757020636F64-
   995 00000380 652074686174       
   996 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   996 0000038F 616420746865206F70-
   996 00000398 65726174696E672073-
   996 000003A1 797374656D20696E74-
   996 000003AA 6F206D656D6F727920-
   996 000003B3 7768656E2074686520-
   996 000003BC 636F6D707574657220-
   996 000003C5 697320726573746172-
   996 000003CE 7465642E           
   997 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   997 000003DB 6565642C20706C6163-
   997 000003E4 65206120666F726D61-
   997 000003ED 74746564206469736B-
   997 000003F6 6574746520696E746F-
   997 000003FF 20647269766520413A-
   997 00000408 20616E642070726573-
   997 00000411 732074686520456E74-
   997 0000041A 6572206B65792E     
   998 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   998 0000042A 20746869732070726F-
   998 00000433 6772616D2077697468-
   998 0000043C 6F7574207072657061-
   998 00000445 72696E672061206469-
   998 0000044E 736B657474652C2070-
   998 00000457 726573732074686520-
   998 00000460 457363617065206B65-
   998 00000469 792E               
   999 0000046B 0D0A00                  			db	13,10,0
  1000 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1000 00000477 2074686520626F6F74-
  1000 00000480 20736563746F722074-
  1000 00000489 6F2074686520646973-
  1000 00000492 6B65747465202E2E2E 
  1001 0000049B 0D0A00                  			db	13,10,0
  1002 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1002 000004A7 6F722D636F6465202E-
  1002 000004B0 2E2077617320726574-
  1002 000004B9 75726E65642066726F-
  1002 000004C2 6D207468652042494F-
  1002 000004CB 53207768696C652072-
  1002 000004D4 656164696E67206672-
  1002 000004DD 6F6D20746865206469-
  1002 000004E6 736B2E             
  1003 000004E9 0D0A00                  			db	13,10,0
  1004 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1004 000004F5 6F722D636F6465202E-
  1004 000004FE 2E2077617320726574-
  1004 00000507 75726E65642066726F-
  1004 00000510 6D207468652042494F-
  1004 00000519 53207768696C652077-
  1004 00000522 726974696E6720746F-
  1004 0000052B 20746865206469736B-
  1004 00000534 2E                 
  1005 00000535 0D0A00                  			db	13,10,0
  1006 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1006 00000541 742D736563746F7220-
  1006 0000054A 776173207772697474-
  1006 00000553 656E20746F20746865-
  1006 0000055C 206469736B65747465-
  1006 00000565 2E204265666F726520-
  1006 0000056E 626F6F74696E672079-
  1006 00000577 6F757220636F6D7075-
  1006 00000580 7465722077697468   
  1007 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1007 00000591 736B657474652C206D-
  1007 0000059A 616B65207375726520-
  1007 000005A3 746861742074686520-
  1007 000005AC 66696C65204F532E43-
  1007 000005B5 4F4D20697320636F70-
  1007 000005BE 696564206F6E746F20-
  1007 000005C7 746865206469736B65-
  1007 000005D0 7474652E           
  1008 000005D4 0D0A00                  			db	13,10,0
  1009 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1009 000005E0 76616C696420446973-
  1009 000005E9 6B20506172616D6574-
  1009 000005F2 6572               
  1010 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1010 000005FD 20616E20696E746572-
  1010 00000606 6E616C206572726F72-
  1010 0000060F 206361757365642062-
  1010 00000618 7920616E20696E7661-
  1010 00000621 6C69642076616C7565-
  1010 0000062A 206265696E67207061-
  1010 00000633 7373656420746F2061-
  1010 0000063C 2073797374656D     
  1011 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1011 0000064C 6E2E20546865204F53-
  1011 00000655 424F4F542E434F4D20-
  1011 0000065E 66696C65206D617920-
  1011 00000667 626520636F72727570-
  1011 00000670 742E20436F7079206F-
  1011 00000679 7220646F776E6C6F61-
  1011 00000682 64207468652066696C-
  1011 0000068B 6520616761696E     
  1012 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
  1012 0000069B 72792E             
  1013 0000069E 0D0A00                  			db	13,10,0
  1014 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1014 000006AA 6472657373204D6172-
  1014 000006B3 6B204E6F7420466F75-
  1014 000006BC 6E64               
  1015 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1015 000006C7 726F7220696E646963-
  1015 000006D0 617465732061207068-
  1015 000006D9 79736963616C207072-
  1015 000006E2 6F626C656D20776974-
  1015 000006EB 682074686520666C6F-
  1015 000006F4 707079206469736B65-
  1015 000006FD 7474652E20506C6561-
  1015 00000706 7365207265747279   
  1016 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
  1016 00000717 6E6F74686572206469-
  1016 00000720 736B657474652E     
  1017 00000727 0D0A00                  			db	13,10,0
  1018 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1018 00000733 6F7465637465642044-
  1018 0000073C 69736B             
  1019 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1019 00000748 726F72206973207573-
  1019 00000751 75616C6C7920636175-
  1019 0000075A 736564206279206174-
  1019 00000763 74656D7074696E6720-
  1019 0000076C 746F20777269746520-
  1019 00000775 746F20612077726974-
  1019 0000077E 652D70726F74656374-
  1019 00000787 6564206469736B2E   
  1020 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1020 00000798 686520277772697465-
  1020 000007A1 2D70726F7465637427-
  1020 000007AA 2073657474696E6720-
  1020 000007B3 6F6E20746865206469-
  1020 000007BC 736B206F7220726574-
  1020 000007C5 7279207573696E6720-
  1020 000007CE 7573696E6720616E6F-
  1020 000007D7 74686572206469736B-
  1020 000007E0 2E                 
  1021 000007E1 0D0A00                  			db	13,10,0
  1022 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1022 000007ED 736B65747465205265-
  1022 000007F6 6D6F766564         
  1023 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1023 00000804 726F72206D61792069-
  1023 0000080D 6E6469636174652074-
  1023 00000816 686174207468652066-
  1023 0000081F 6C6F70707920646973-
  1023 00000828 6B6574746520686173-
  1023 00000831 206265656E2072656D-
  1023 0000083A 6F7665642066726F6D-
  1023 00000843 20746865           
  1024 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1024 00000850 652064726976652E20-
  1024 00000859 4F6E20736F6D652073-
  1024 00000862 797374656D732C2074-
  1024 0000086B 68697320636F646520-
  1024 00000874 6D617920616C736F20-
  1024 0000087D 6F6363757220696620-
  1024 00000886 746865206469736B65-
  1024 0000088F 747465206973       
  1025 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1025 0000089E 70726F746563746564-
  1025 000008A7 2E2720506C65617365-
  1025 000008B0 207665726966792074-
  1025 000008B9 686174207468652064-
  1025 000008C2 69736B657474652069-
  1025 000008CB 73206E6F7420777269-
  1025 000008D4 74652D70726F746563-
  1025 000008DD 74656420616E64     
  1026 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
  1026 000008ED 65726C7920696E7365-
  1026 000008F6 7274656420696E2074-
  1026 000008FF 6865206469736B6574-
  1026 00000908 74652064726976652E 
  1027 00000911 0D0A00                  			db	13,10,0
  1028 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1028 0000091D 6976652054696D6564-
  1028 00000926 204F7574           
  1029 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1029 00000933 726F7220757375616C-
  1029 0000093C 6C7920696E64696361-
  1029 00000945 746573207468617420-
  1029 0000094E 6E6F206469736B6574-
  1029 00000957 746520697320696E20-
  1029 00000960 746865206469736B65-
  1029 00000969 747465206472697665-
  1029 00000972 2E20506C65617365   
  1030 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1030 00000983 726520746861742074-
  1030 0000098C 6865206469736B6574-
  1030 00000995 74652069732070726F-
  1030 0000099E 7065726C7920736561-
  1030 000009A7 74656420696E207468-
  1030 000009B0 652064726976652061-
  1030 000009B9 6E642072657472792E 
  1031 000009C2 0D0A00                  			db	13,10,0
  1032 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1032 000009CE 6B6E6F776E20457272-
  1032 000009D7 6F72               
  1033 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1033 000009E2 6F722D636F64652072-
  1033 000009EB 657475726E65642062-
  1033 000009F4 79207468652042494F-
  1033 000009FD 53206973206E6F7420-
  1033 00000A06 61207265636F676E69-
  1033 00000A0F 7A6564206572726F72-
  1033 00000A18 2E20506C6561736520-
  1033 00000A21 636F6E73756C74     
  1034 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
  1034 00000A31 6D7075746572277320-
  1034 00000A3A 746563686E6963616C-
  1034 00000A43 207265666572656E63-
  1034 00000A4C 6520666F7220612064-
  1034 00000A55 65736372697074696F-
  1034 00000A5E 6E206F662074686973-
  1034 00000A67 206572726F7220636F-
  1034 00000A70 64652E             
  1035 00000A73 0D0A00                  			db	13,10,0
  1036                                  wcPrepInBuf		equ	$
  1037                                  %endif
  1038                                  %ifdef BUILDDISK
  1039                                  ;=======================================================================================================================
  1040                                  ;
  1041                                  ;	File Allocation Tables
  1042                                  ;
  1043                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1044                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1045                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1046                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1047                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1048                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1049                                  ;	the last cluster in the chain.
  1050                                  ;
  1051                                  ;	Every three bytes encode two FAT entries as follows:
  1052                                  ;
  1053                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1054                                  ;
  1055                                  ;=======================================================================================================================
  1056                                  ;-----------------------------------------------------------------------------------------------------------------------
  1057                                  ;
  1058                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1059                                  ;
  1060                                  ;-----------------------------------------------------------------------------------------------------------------------
  1061                                  section			fat1							;first copy of FAT
  1062                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1063                                  			db	005h,060h,000h,	007h,080h,000h
  1064                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1065                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1066                                  			db	011h,020h,001h,	013h,040h,001h
  1067                                  			db	015h,060h,001h,	017h,080h,001h
  1068                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1069                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1070                                  			db	021h,020h,002h,	023h,040h,002h
  1071                                  			db	025h,060h,002h,	027h,080h,002h
  1072                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1073                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;
  1076                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1077                                  ;
  1078                                  ;-----------------------------------------------------------------------------------------------------------------------
  1079                                  section			fat2							;second copy of FAT
  1080                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1081                                  			db	005h,060h,000h,	007h,080h,000h
  1082                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1083                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1084                                  			db	011h,020h,001h,	013h,040h,001h
  1085                                  			db	015h,060h,001h,	017h,080h,001h
  1086                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1087                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1088                                  			db	021h,020h,002h,	023h,040h,002h
  1089                                  			db	025h,060h,002h,	027h,080h,002h
  1090                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1091                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1092                                  ;-----------------------------------------------------------------------------------------------------------------------
  1093                                  ;
  1094                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1095                                  ;
  1096                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1097                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1098                                  ;	copy.
  1099                                  ;
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  section			dir							;diskette directory
  1102                                  			db	"OS      COM"					;file name (must contain spaces)
  1103                                  			db	020h						;attribute (archive bit set)
  1104                                  			times	10 db 0						;unused
  1105                                  			dw	0h						;time
  1106                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1107                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1108                                  			dw	2						;first cluster
  1109                                  			dd	05200h						;file size
  1110                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1111                                  %endif
  1112                                  %ifdef BUILDCOM
  1113                                  ;=======================================================================================================================
  1114                                  ;
  1115                                  ;	OS.COM
  1116                                  ;
  1117                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1118                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1119                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1120                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1121                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1122                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1123                                  ;
  1124                                  ;	Our loader addressability is set up according to the following diagram.
  1125                                  ;
  1126                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1127                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1128                                  ;				|  256 = 100h bytes				|
  1129                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1130                                  ;				|  Boot Sector (vstart=0100h)			|
  1131                                  ;				|  1 sector = 512 = 200h bytes			|
  1132                                  ;			007e00	+-----------------------------------------------+
  1133                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1134                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1135                                  ;				|						|
  1136                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1137                                  ;				|						|
  1138                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1139                                  ;				|  Loader Code					|
  1140                                  ;				|  1 sector = 512 = 200h bytes			|
  1141                                  ;			009200	+-----------------------------------------------+ DS:0300
  1142                                  ;
  1143                                  ;=======================================================================================================================
  1144                                  ;-----------------------------------------------------------------------------------------------------------------------
  1145                                  ;
  1146                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1147                                  ;
  1148                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1149                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1150                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1151                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1152                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1153                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1154                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1155                                  ;	registers.
  1156                                  ;
  1157                                  ;-----------------------------------------------------------------------------------------------------------------------
  1158                                  			cpu	8086						;assume minimal CPU
  1159                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1160                                  			bits	16						;this is 16-bit code
  1161                                  Loader			push	cs						;use the code segment
  1162                                  			pop	ds						;...as our data segment
  1163                                  			push	cs						;use the code segment
  1164                                  			pop	es						;...as our extra segment
  1165                                  ;
  1166                                  ;	Write a message to the console so we know we have our addressability established.
  1167                                  ;
  1168                                  			mov	si,czStartingMsg				;starting message
  1169                                  			call	PutTTYString					;display loader message
  1170                                  ;
  1171                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1172                                  ;
  1173                                  			call	GetCPUType					;AL = cpu type
  1174                                  			mov	si,czCPUErrorMsg				;loader error message
  1175                                  			cmp	al,3						;80386+?
  1176                                  			jb	LoaderExit					;no, exit with error message
  1177                                  			cpu	386						;allow 80386 instructions
  1178                                  			mov	si,czCPUOKMsg					;cpu ok message
  1179                                  			call	PutTTYString					;display message
  1180                                  ;
  1181                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1182                                  ;
  1183                                  			mov	si,0300h					;GDT offset
  1184                                  			mov	ax,cs						;AX:SI = gdt source
  1185                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1186                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1187                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1188                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1189                                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1190                                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1191                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1192                                  			call	PutTTYString					;display message
  1193                                  ;
  1194                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1195                                  ;
  1196                                  			push	EKRNCODESEG					;use kernel code segment ...
  1197                                  			pop	es						;... as target segment
  1198                                  			xor	di,di						;ES:DI = target address
  1199                                  			mov	si,0300h					;DS:SI = source address
  1200                                  			mov	cx,05000h					;CX = kernel size
  1201                                  			cld							;forward strings
  1202                                  			rep	movsb						;copy kernel image
  1203                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1204                                  			call	PutTTYString					;display message
  1205                                  ;
  1206                                  ;	Switch to protected mode.
  1207                                  ;
  1208                                  			xor	si,si						;ES:SI = gdt addr
  1209                                  			mov	ss,si						;protected mode ss
  1210                                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1211                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1212                                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1213                                  			mov	dx,001Fh					;outer delay loop count
  1214                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1215                                  			loop	$						;wait out pending interrupts
  1216                                  			dec	dx						;restore outer loop count
  1217                                  			jnz	.10						;continue outer loop
  1218                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1219                                  ;
  1220                                  ;	Enable hardware and maskable interrupts
  1221                                  ;
  1222                                  			xor	al,al						;enable all registers code
  1223                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1224                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1225                                  			sti							;enable maskable interrupts
  1226                                  ;
  1227                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1228                                  ;
  1229                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1230                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1231                                  			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1232                                  ;-----------------------------------------------------------------------------------------------------------------------
  1233                                  ;
  1234                                  ;	Routine:	LoaderExit
  1235                                  ;
  1236                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1237                                  ;
  1238                                  ;	In:		DS:SI	string address
  1239                                  ;
  1240                                  ;-----------------------------------------------------------------------------------------------------------------------
  1241                                  LoaderExit		call	PutTTYString					;display error message
  1242                                  ;
  1243                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1244                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1245                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1246                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1247                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1248                                  ;
  1249                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1250                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1251                                  			jnz	.40						;exit if key pressed
  1252                                  			sti							;enable maskable interrupts
  1253                                  			hlt							;wait for interrupt
  1254                                  			jmp	.30						;repeat until keypress
  1255                                  ;
  1256                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1257                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1258                                  ;	HLT until the system resets.
  1259                                  ;
  1260                                  .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1261                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1262                                  .50			sti							;enable maskable interrupts
  1263                                  			hlt							;stop until reset, int, nmi
  1264                                  			jmp	.50						;loop until restart kicks in
  1265                                  ;-----------------------------------------------------------------------------------------------------------------------
  1266                                  ;
  1267                                  ;	Routine:	GetCPUType
  1268                                  ;
  1269                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1270                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1271                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1272                                  ;
  1273                                  ;	Out:		AX	0 = 808x, v20, etc.
  1274                                  ;				1 = 80186
  1275                                  ;				2 = 80286
  1276                                  ;				3 = 80386
  1277                                  ;
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279                                  GetCPUType		mov	al,1						;AL = 1
  1280                                  			mov	cl,32						;shift count
  1281                                  			shr	al,cl						;try a 32-bit shift
  1282                                  			or	al,al						;did the shift happen?
  1283                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1284                                  			cpu	186
  1285                                  			push	sp						;save stack pointer
  1286                                  			pop	cx						;...into cx
  1287                                  			cmp	cx,sp						;did sp decrement before push?
  1288                                  			jne	.10						;yes, cpu is 80186
  1289                                  			cpu	286
  1290                                  			inc	ax						;AX = 2
  1291                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1292                                  			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1293                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1294                                  			jz	.10						;yes, cpu is 80286
  1295                                  			inc	ax						;AX = 3
  1296                                  .10			ret							;return
  1297                                  ;-----------------------------------------------------------------------------------------------------------------------
  1298                                  ;
  1299                                  ;	Routine:	PutTTYString
  1300                                  ;
  1301                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1302                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1303                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1304                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1305                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1306                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1307                                  ;			registers and flags unless used to indicate return status.
  1308                                  ;
  1309                                  ;	In:		DS:SI	address of string
  1310                                  ;
  1311                                  ;-----------------------------------------------------------------------------------------------------------------------
  1312                                  PutTTYString		cld							;forward strings
  1313                                  			lodsb							;load next byte at DS:SI in AL
  1314                                  			test	al,al						;end of string?
  1315                                  			jz	.10						;... yes, exit our loop
  1316                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1317                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1318                                  			jmp	PutTTYString					;repeat until done
  1319                                  .10			ret							;return
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  ;
  1322                                  ;	Loader Data
  1323                                  ;
  1324                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1325                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1326                                  ;
  1327                                  ;-----------------------------------------------------------------------------------------------------------------------
  1328                                  			align	2
  1329                                  cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1330                                  cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1331                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1332                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1333                                  czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1334                                  			db	"Please press any key to restart the computer.",13,10,0
  1335                                  czCPUOKMsg		db	"CPU OK",13,10,0
  1336                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1337                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1338                                  czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1339                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1340                                  			db	055h,0AAh					;end of sector signature
  1341                                  ;=======================================================================================================================
  1342                                  ;
  1343                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1344                                  ;
  1345                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1346                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1347                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1348                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1349                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1350                                  ;
  1351                                  ;=======================================================================================================================
  1352                                  ;=======================================================================================================================
  1353                                  ;
  1354                                  ;	Kernel Tables
  1355                                  ;
  1356                                  ;=======================================================================================================================
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  ;
  1359                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1360                                  ;
  1361                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1362                                  ;	first descriptor must be all nulls.
  1363                                  ;
  1364                                  ;	6   5         4         3         2         1         0
  1365                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1366                                  ;	----------------------------------------------------------------
  1367                                  ;	h......hffffmmmma......ab......................bn..............n
  1368                                  ;	00000000			all areas have base addresses below 2^24
  1369                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1370                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1371                                  ;	            1001		present, ring-0, selector
  1372                                  ;
  1373                                  ;	h...h	hi-order base address (bits 24-31)
  1374                                  ;	ffff	flags
  1375                                  ;	mmmm	hi-order limit (bits 16-19)
  1376                                  ;	a...a	access
  1377                                  ;	b...b	lo-order base address (bits 0-23)
  1378                                  ;	n...n	lo-order limit (bits 0-15)
  1379                                  ;
  1380                                  ;-----------------------------------------------------------------------------------------------------------------------
  1381                                  section			gdt							;global descriptor table
  1382                                  			dq	0000000000000000h				;00 required null selector
  1383                                  			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1384                                  			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1385                                  			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1386                                  			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1387                                  			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1388                                  			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1389                                  			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1390                                  			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1391                                  			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1392                                  			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1393                                  			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1394                                  			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1395                                  			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1396                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1397                                  ;-----------------------------------------------------------------------------------------------------------------------
  1398                                  ;
  1399                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1400                                  ;
  1401                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1402                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1403                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1404                                  ;
  1405                                  ;	6   5         4         3         2         1         0
  1406                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1407                                  ;	----------------------------------------------------------------
  1408                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1409                                  ;
  1410                                  ;	h...h	high-order offset (bits 16-31)
  1411                                  ;	P	present (0=unused interrupt)
  1412                                  ;	zz	descriptor privilege level
  1413                                  ;	S	storage segment (must be zero for IDT)
  1414                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1415                                  ;	S...S	handling code selector in GDT
  1416                                  ;	l...l	lo-order offset (bits 0-15)
  1417                                  ;
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  section			idt							;interrupt descriptor table
  1420                                  			mint	dividebyzero					;00 divide by zero
  1421                                  			mint	singlestep					;01 single step
  1422                                  			mint	nmi						;02 non-maskable
  1423                                  			mint	break						;03 break
  1424                                  			mint	into						;04 into
  1425                                  			mint	bounds						;05 bounds
  1426                                  			mint	badopcode					;06 bad op code
  1427                                  			mint	nocoproc					;07 no coprocessor
  1428                                  			mint	doublefault					;08 double-fault
  1429                                  			mint	operand						;09 operand
  1430                                  			mint	badtss						;0a bad TSS
  1431                                  			mint	notpresent					;0b not-present
  1432                                  			mint	stacklimit					;0c stack limit
  1433                                  			mint	protection					;0d general protection fault
  1434                                  			mint	int14						;0e (reserved)
  1435                                  			mint	int15						;0f (reserved)
  1436                                  			mint	coproccalc					;10 (reserved)
  1437                                  			mint	int17						;11 (reserved)
  1438                                  			mint	int18						;12 (reserved)
  1439                                  			mint	int19						;13 (reserved)
  1440                                  			mint	int20						;14 (reserved)
  1441                                  			mint	int21						;15 (reserved)
  1442                                  			mint	int22						;16 (reserved)
  1443                                  			mint	int23						;17 (reserved)
  1444                                  			mint	int24						;18 (reserved)
  1445                                  			mint	int25						;19 (reserved)
  1446                                  			mint	int26						;1a (reserved)
  1447                                  			mint	int27						;1b (reserved)
  1448                                  			mint	int28						;1c (reserved)
  1449                                  			mint	int29						;1d (reserved)
  1450                                  			mint	int30						;1e (reserved)
  1451                                  			mint	int31						;1f (reserved)
  1452                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1453                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1454                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1455                                  			mtrap	com2						;23 IRQ3 com2
  1456                                  			mtrap	com1						;24 IRQ4 com1
  1457                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1458                                  			mtrap	diskette					;26 IRQ6 diskette
  1459                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1460                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1461                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1462                                  			mtrap	irq10						;2a IRQA (reserved)
  1463                                  			mtrap	irq11						;2b IRQB (reserved)
  1464                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1465                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1466                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1467                                  			mtrap	irq15						;2f IRQF (reserved)
  1468                                  			mtrap	svc						;30 OS services
  1469                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1470                                  ;=======================================================================================================================
  1471                                  ;
  1472                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1473                                  ;
  1474                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1475                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1476                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1477                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1478                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1479                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1480                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1481                                  ;
  1482                                  ;=======================================================================================================================
  1483                                  section			kernel	vstart=0h					;data offsets relative to 0
  1484                                  			cpu	386						;allow 80386 instructions
  1485                                  			bits	32						;this is 32-bit code
  1486                                  ;=======================================================================================================================
  1487                                  ;
  1488                                  ;	CPU Interrupt Handlers
  1489                                  ;
  1490                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1491                                  ;	of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1492                                  ;
  1493                                  ;=======================================================================================================================
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  ;
  1496                                  ;	INT0	Divide By Zero
  1497                                  ;
  1498                                  ;-----------------------------------------------------------------------------------------------------------------------
  1499                                  			menter	dividebyzero					;divide by zero
  1500                                  			push	0						;store interrupt nbr
  1501                                  			push	czIntDivideByZero				;store message offset
  1502                                  			jmp	ReportInterrupt					;report interrupt
  1503                                  ;-----------------------------------------------------------------------------------------------------------------------
  1504                                  ;
  1505                                  ;	INT1	Single Step
  1506                                  ;
  1507                                  ;-----------------------------------------------------------------------------------------------------------------------
  1508                                  			menter	singlestep					;single step
  1509                                  			push	1						;store interrupt nbr
  1510                                  			push	czIntSingleStep					;store message offset
  1511                                  			jmp	ReportInterrupt					;report interrupt
  1512                                  ;-----------------------------------------------------------------------------------------------------------------------
  1513                                  ;
  1514                                  ;	INT2	Non-Maskable Interrupt
  1515                                  ;
  1516                                  ;-----------------------------------------------------------------------------------------------------------------------
  1517                                  			menter	nmi						;non-maskable
  1518                                  			push	2						;store interrupt nbr
  1519                                  			push	czIntNonMaskable				;store message offset
  1520                                  			jmp	ReportInterrupt					;report interrupt
  1521                                  ;-----------------------------------------------------------------------------------------------------------------------
  1522                                  ;
  1523                                  ;	INT3	Break
  1524                                  ;
  1525                                  ;-----------------------------------------------------------------------------------------------------------------------
  1526                                  			menter	break						;break
  1527                                  			push	3						;store interrupt nbr
  1528                                  			push	czIntBreak					;store message offset
  1529                                  			jmp	ReportInterrupt					;report interrupt
  1530                                  ;-----------------------------------------------------------------------------------------------------------------------
  1531                                  ;
  1532                                  ;	INT4	Into
  1533                                  ;
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  			menter	into						;into
  1536                                  			push	4						;store interrupt nbr
  1537                                  			push	czIntInto					;store message offset
  1538                                  			jmp	ReportInterrupt					;report interrupt
  1539                                  ;-----------------------------------------------------------------------------------------------------------------------
  1540                                  ;
  1541                                  ;	INT5	Bounds
  1542                                  ;
  1543                                  ;-----------------------------------------------------------------------------------------------------------------------
  1544                                  			menter	bounds						;bounds
  1545                                  			push	5						;store interrupt nbr
  1546                                  			push	czIntBounds					;store message offset
  1547                                  			jmp	ReportInterrupt					;report interrupt
  1548                                  ;-----------------------------------------------------------------------------------------------------------------------
  1549                                  ;
  1550                                  ;	INT6	Bad Operation Code
  1551                                  ;
  1552                                  ;-----------------------------------------------------------------------------------------------------------------------
  1553                                  			menter	badopcode					;bad opcode interrupt
  1554                                  			push	6						;store interrupt nbr
  1555                                  			push	czIntBadOpCode					;store message offset
  1556                                  			jmp	ReportInterrupt					;report interrupt
  1557                                  ;-----------------------------------------------------------------------------------------------------------------------
  1558                                  ;
  1559                                  ;	INT7	No Coprocessor
  1560                                  ;
  1561                                  ;-----------------------------------------------------------------------------------------------------------------------
  1562                                  			menter	nocoproc					;no coprocessor interrupt
  1563                                  			push	7						;store interrupt nbr
  1564                                  			push	czIntNoCoprocessor				;store message offset
  1565                                  			jmp	ReportInterrupt					;report interrupt
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                  ;
  1568                                  ;	INT8	Double Fault
  1569                                  ;
  1570                                  ;-----------------------------------------------------------------------------------------------------------------------
  1571                                  			menter	doublefault					;doublefault interrupt
  1572                                  			push	8						;store interrupt nbr
  1573                                  			push	czIntDoubleFault				;store message offset
  1574                                  			jmp	ReportInterrupt					;report interrupt
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                  ;
  1577                                  ;	INT9	Operand
  1578                                  ;
  1579                                  ;-----------------------------------------------------------------------------------------------------------------------
  1580                                  			menter	operand						;operand interrupt
  1581                                  			push	9						;store interrupt nbr
  1582                                  			push	czIntOperand					;store message offset
  1583                                  			jmp	ReportInterrupt					;report interrupt
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;	INT10	Bad Task State Segment
  1587                                  ;
  1588                                  ;-----------------------------------------------------------------------------------------------------------------------
  1589                                  			menter	badtss						;bad tss interrupt
  1590                                  			push	10						;store interrupt nbr
  1591                                  			push	czIntBadTSS					;store message offset
  1592                                  			jmp	ReportInterrupt					;report interrupt
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                  ;
  1595                                  ;	INT11	Not Present
  1596                                  ;
  1597                                  ;-----------------------------------------------------------------------------------------------------------------------
  1598                                  			menter	notpresent					;not present interrupt
  1599                                  			push	11						;store interrupt nbr
  1600                                  			push	czIntNotPresent					;store message offset
  1601                                  			jmp	ReportInterrupt					;report interrupt
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                  ;
  1604                                  ;	INT12	Stack Limit
  1605                                  ;
  1606                                  ;-----------------------------------------------------------------------------------------------------------------------
  1607                                  			menter	stacklimit					;stack limit interrupt
  1608                                  			push	12						;store interrupt nbr
  1609                                  			push	czIntStackLimit					;store message offset
  1610                                  			jmp	ReportInterrupt					;report interrupt
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  ;
  1613                                  ;	INT13	General Protection Fault
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                  			menter	protection					;protection fault interrupt
  1617                                  			push	13						;store interrupt nbr
  1618                                  			push	czIntProtection					;store message offset
  1619                                  			jmp	ReportInterrupt					;report interrupt
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;
  1622                                  ;	INT14	Reserved
  1623                                  ;
  1624                                  ;-----------------------------------------------------------------------------------------------------------------------
  1625                                  			menter	int14						;(reserved)
  1626                                  			push	14						;store interrupt nbr
  1627                                  			push	czIntReserved					;store message offset
  1628                                  			jmp	ReportInterrupt					;report interrupt
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  ;
  1631                                  ;	INT15	Reserved
  1632                                  ;
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  			menter	int15						;(reserved)
  1635                                  			push	15						;store interrupt nbr
  1636                                  			push	czIntReserved					;store message offset
  1637                                  			jmp	ReportInterrupt					;report interrupt
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                  ;
  1640                                  ;	INT16	Coprocessor Calculation
  1641                                  ;
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  			menter	coproccalc					;coprocessor calculation
  1644                                  			push	16						;store interrupt nbr
  1645                                  			push	czIntCoprocessorCalc				;store message offset
  1646                                  			jmp	ReportInterrupt					;report interrupt
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                  ;
  1649                                  ;	INT17	Reserved
  1650                                  ;
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  			menter	int17						;(reserved)
  1653                                  			push	17						;store interrupt nbr
  1654                                  			push	czIntReserved					;store message offset
  1655                                  			jmp	ReportInterrupt					;report interrupt
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                  ;
  1658                                  ;	INT18	Reserved
  1659                                  ;
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  			menter	int18						;(reserved)
  1662                                  			push	18						;store interrupt nbr
  1663                                  			push	czIntReserved					;store message offset
  1664                                  			jmp	ReportInterrupt					;report interrupt
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                  ;
  1667                                  ;	INT19	Reserved
  1668                                  ;
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  			menter	int19						;(reserved)
  1671                                  			push	19						;store interrupt nbr
  1672                                  			push	czIntReserved					;store message offset
  1673                                  			jmp	ReportInterrupt					;report interrupt
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  ;
  1676                                  ;	INT20	Reserved
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  			menter	int20						;(reserved)
  1680                                  			push	20						;store interrupt nbr
  1681                                  			push	czIntReserved					;store message offset
  1682                                  			jmp	ReportInterrupt					;report interrupt
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                  ;
  1685                                  ;	INT21	Reserved
  1686                                  ;
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  			menter	int21						;(reserved)
  1689                                  			push	21						;store interrupt nbr
  1690                                  			push	czIntReserved					;store message offset
  1691                                  			jmp	ReportInterrupt					;report interrupt
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                  ;
  1694                                  ;	INT22	Reserved
  1695                                  ;
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  			menter	int22						;(reserved)
  1698                                  			push	22						;store interrupt nbr
  1699                                  			push	czIntReserved					;store message offset
  1700                                  			jmp	ReportInterrupt					;report interrupt
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                  ;
  1703                                  ;	INT23	Reserved
  1704                                  ;
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                  			menter	int23						;(reserved)
  1707                                  			push	23						;store interrupt nbr
  1708                                  			push	czIntReserved					;store message offset
  1709                                  			jmp	ReportInterrupt					;report interrupt
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;	INT24	Reserved
  1713                                  ;
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                  			menter	int24						;(reserved)
  1716                                  			push	24						;store interrupt nbr
  1717                                  			push	czIntReserved					;store message offset
  1718                                  			jmp	ReportInterrupt					;report interrupt
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                  ;
  1721                                  ;	INT25	Reserved
  1722                                  ;
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  			menter	int25						;(reserved)
  1725                                  			push	25						;store interrupt nbr
  1726                                  			push	czIntReserved					;store message offset
  1727                                  			jmp	ReportInterrupt					;report interrupt
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                  ;
  1730                                  ;	INT26	Reserved
  1731                                  ;
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  			menter	int26						;(reserved)
  1734                                  			push	26						;store interrupt nbr
  1735                                  			push	czIntReserved					;store message offset
  1736                                  			jmp	ReportInterrupt					;report interrupt
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                  ;
  1739                                  ;	INT27	Reserved
  1740                                  ;
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  			menter	int27						;(reserved)
  1743                                  			push	27						;store interrupt nbr
  1744                                  			push	czIntReserved					;store message offset
  1745                                  			jmp	ReportInterrupt					;report interrupt
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                  ;
  1748                                  ;	INT28	Reserved
  1749                                  ;
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  			menter	int28						;(reserved)
  1752                                  			push	28						;store interrupt nbr
  1753                                  			push	czIntReserved					;store message offset
  1754                                  			jmp	ReportInterrupt					;report interrupt
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                  ;
  1757                                  ;	INT29	Reserved
  1758                                  ;
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  			menter	int29						;(reserved)
  1761                                  			push	29						;store interrupt nbr
  1762                                  			push	czIntReserved					;store message offset
  1763                                  			jmp	ReportInterrupt					;report interrupt
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                  ;
  1766                                  ;	INT30	Reserved
  1767                                  ;
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                  			menter	int30						;(reserved)
  1770                                  			push	30						;store interrupt nbr
  1771                                  			push	czIntReserved					;store message offset
  1772                                  			jmp	ReportInterrupt					;report interrupt
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;	INT31	Reserved
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                  			menter	int31						;(reserved)
  1779                                  			push	31						;store interrupt nbr
  1780                                  			push	czIntReserved					;store message offset
  1781                                  			jmp	ReportInterrupt					;report interrupt
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;	Routine:	ReportInterrupt
  1785                                  ;
  1786                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1787                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1788                                  ;
  1789                                  ;	In:		[esp+4]		interrupt number (0-31)			stored by push instruction
  1790                                  ;			[esp+0]		error message address			stored by push instructions
  1791                                  ;
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ReportInterrupt		pop	eax						;error message address
  1794                                  			pop	eax						;interrupt number
  1795                                  			iretd							;return
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;	Processor Interrupt Name Strings
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  czIntDivideByZero	db	"Division by zero",0
  1802                                  czIntSingleStep		db	"Single step",0
  1803                                  czIntNonMaskable	db	"Non-maskable interrupt",0
  1804                                  czIntBreak		db	"Break",0
  1805                                  czIntInto		db	"Into",0
  1806                                  czIntBounds		db	"Bounds",0
  1807                                  czIntBadOpCode		db	"Bad Operation Code",0
  1808                                  czIntNoCoprocessor	db	"No Coprocessor",0
  1809                                  czIntDoubleFault	db	"Double Fault",0
  1810                                  czIntOperand		db	"Operand",0
  1811                                  czIntBadTSS		db	"Bad Task State Segment",0
  1812                                  czIntNotPresent		db	"Not Present",0
  1813                                  czIntStackLimit		db	"Stack Limit",0
  1814                                  czIntProtection		db	"General Protection Fault",0
  1815                                  czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  1816                                  czIntReserved		db	"Reserved",0
  1817                                  ;=======================================================================================================================
  1818                                  ;
  1819                                  ;	Hardware Device Interupts
  1820                                  ;
  1821                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1822                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1823                                  ;	(BX=2028h).
  1824                                  ;
  1825                                  ;=======================================================================================================================
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;	IRQ0	Clock Tick Interrupt
  1829                                  ;
  1830                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1831                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1832                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1833                                  ;
  1834                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1835                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1836                                  ;
  1837                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1838                                  ;	zero, the floppy disk motors are turned off.
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  			menter	clocktick					;clock tick interrupt
  1842                                  			push	eax						;save modified regs
  1843                                  			push	edx						;
  1844                                  			push	ds						;
  1845                                  ;
  1846                                  ;	Update the clock tick count and the elapsed days as needed
  1847                                  ;
  1848                                  			push	ESELDAT						;load OS data selector ...
  1849                                  			pop	ds						;... into data segment register
  1850                                  			mov	eax,[wdClockTicks]				;eax = clock ticks
  1851                                  			inc	eax						;increment clock ticks
  1852                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1853                                  			jb	irq0.10						;no, skip ahead
  1854                                  			inc	byte [wbClockDays]				;increment clock days
  1855                                  			xor	eax,eax						;reset clock ticks
  1856                                  irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  1857                                  ;
  1858                                  ;	Decrement floppy disk motor timeout
  1859                                  ;
  1860                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1861                                  			je	irq0.20						;yes, skip ahead
  1862                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1863                                  			jnz	irq0.20						;skip ahead if non-zero
  1864                                  ;
  1865                                  ;	Turn off the floppy disk motor if appropriate
  1866                                  ;
  1867                                  			sti							;enable maskable interrupts
  1868                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1869                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1870                                  			in	al,dx						;FDC main status byte
  1871                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1872                                  			jnz	irq0.15						;wait while busy
  1873                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1874                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1875                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1876                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1877                                  			out	dx,al						;turn motor off
  1878                                  ;
  1879                                  ;	Signal the end of the hardware interrupt
  1880                                  ;
  1881                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1882                                  ;
  1883                                  ;	Restore and return
  1884                                  ;
  1885                                  			pop	ds						;restore modified regs
  1886                                  			pop	edx						;
  1887                                  			pop	eax						;
  1888                                  			iretd							;return
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;	IRQ1	Keyboard Interrupt
  1892                                  ;
  1893                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1894                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1895                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1896                                  ;	ALL modified registers upon return.
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  			menter	keyboard					;keyboard interrrupt
  1900                                  			push	eax						;save non-volatile regs
  1901                                  			push	ebx						;
  1902                                  			push	ecx						;
  1903                                  			push	esi						;
  1904                                  			push	ds						;
  1905                                  			push	ESELDAT						;load OS data selector ...
  1906                                  			pop	ds						;... into data segment register
  1907                                  			xor	al,al						;zero
  1908                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1909                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1910                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1911                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1912                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1913                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1914                                  			mov	al,' '						;space
  1915                                  			mov	[wbConsoleChar],al				;set character to space
  1916                                  			mov	al,EKEYFTIMEOUT					;controller timeout flag
  1917                                  			not	al						;controller timeout mask
  1918                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1919                                  			mov	bl,[wbConsoleShift]				;shift flags
  1920                                  			mov	bh,[wbConsoleLock]				;lock flags
  1921                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1922                                  			jz	irq1.140					;yes, skip ahead
  1923                                  			in	al,EKEYBPORTDATA				;read scan code 0
  1924                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1925                                  			mov	ah,al						;copy scan code 0
  1926                                  			mov	al,EKEYFSHIFTLEFT				;left shift flag
  1927                                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  1928                                  			je	irq1.30						;yes, set flag
  1929                                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  1930                                  			je	irq1.40						;yes, reset flag
  1931                                  			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  1932                                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  1933                                  			je	irq1.30						;yes, set flag
  1934                                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  1935                                  			je	irq1.40						;yes, reset flag
  1936                                  			mov	al,EKEYFCTRLLEFT				;left control flag
  1937                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1938                                  			je	irq1.30						;yes, set flag
  1939                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1940                                  			je	irq1.40						;yes, reset flag
  1941                                  			mov	al,EKEYFALTLEFT					;left alt flag
  1942                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1943                                  			je	irq1.30						;yes, set flag
  1944                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1945                                  			je	irq1.40						;yes, reset flag
  1946                                  			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  1947                                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  1948                                  			je	irq1.50						;yes, toggle lamps and flags
  1949                                  			mov	al,EKEYFLOCKNUM					;num-lock flag
  1950                                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  1951                                  			je	irq1.50						;yes, toggle lamps and flags
  1952                                  			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  1953                                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  1954                                  			je	irq1.50						;yes, toggle lamps and flags
  1955                                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  1956                                  			jne	irq1.70 					;no, skip ahead
  1957                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1958                                  			jz	irq1.140					;yes, skip ahead
  1959                                  			in	al,EKEYBPORTDATA				;read scan code 1
  1960                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1961                                  			mov	ah,al						;copy scan code 1
  1962                                  			mov	al,EKEYFCTRLRIGHT				;right control flag
  1963                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1964                                  			je	irq1.30						;yes, set flag
  1965                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1966                                  			je	irq1.40						;yes, reset flag
  1967                                  			mov	al,EKEYFALTRIGHT				;right alt flag
  1968                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1969                                  			je	irq1.30						;yes, set flag
  1970                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1971                                  			je	irq1.40						;yes, reset flag
  1972                                  			cmp	ah,EKEYBSLASH					;slash down code?
  1973                                  			je	irq1.80						;yes, skip ahead
  1974                                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  1975                                  			je	irq1.80						;yes, skip ahead
  1976                                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  1977                                  			je	irq1.10						;yes, continue
  1978                                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  1979                                  			jne	irq1.20						;no, skip ahead
  1980                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1981                                  			jz	irq1.140					;yes, skip ahead
  1982                                  			in	al,EKEYBPORTDATA				;read scan code 2
  1983                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1984                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1985                                  			jz	irq1.140					;yes, skip ahead
  1986                                  			in	al,EKEYBPORTDATA				;read scan code 3
  1987                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1988                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1989                                  irq1.30			or	bl,al						;set shift flag
  1990                                  			jmp	irq1.60						;skip ahead
  1991                                  irq1.40			not	al						;convert flag to mask
  1992                                  			and	bl,al						;reset shift flag
  1993                                  			jmp	irq1.60						;skip ahead
  1994                                  irq1.50			xor	bh,al						;toggle lock flag
  1995                                  			call	SetKeyboardLamps				;update keyboard lamps
  1996                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1997                                  			mov	[wbConsoleLock],bh				;save lock flags
  1998                                  			call	PutConsoleOIAShift				;update OIA indicators
  1999                                  			jmp	irq1.150					;finish keyboard handling
  2000                                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2001                                  			jne	irq1.80						;no continue
  2002                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2003                                  			jz	irq1.140					;yes, skip ahead
  2004                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2005                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2006                                  			mov	ah,al						;copy scan code 1
  2007                                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2008                                  			jne	irq1.150					;no, finish keyboard handling
  2009                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2010                                  			jz	irq1.140					;yes, skip ahead
  2011                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2012                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2013                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2014                                  			jz	irq1.140					;yes, skip ahead
  2015                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2016                                  			mov	[wbConsoleScan3],al				;save scan code 3
  2017                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2018                                  			jz	irq1.140					;yes, skip ahead
  2019                                  			in	al,EKEYBPORTDATA				;read scan code 4
  2020                                  			mov	[wbConsoleScan4],al				;save scan code 4
  2021                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2022                                  			jz	irq1.140					;yes, skip ahead
  2023                                  			in	al,EKEYBPORTDATA				;read scan code 5
  2024                                  			mov	[wbConsoleScan5],al				;save scan code 5
  2025                                  			jmp	irq1.150					;continue
  2026                                  irq1.80			xor	al,al						;assume no ASCII translation
  2027                                  			test	ah,EKEYBUP					;release code?
  2028                                  			jnz	irq1.130					;yes, skip ahead
  2029                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  2030                                  			test	bl,EKEYFSHIFT					;either shift key down?
  2031                                  			jz	irq1.90						;no, skip ahead
  2032                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  2033                                  irq1.90			movzx	ecx,ah						;scan code offset
  2034                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  2035                                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2036                                  			jz	irq1.100					;no skip ahead
  2037                                  			mov	cl,al						;copy ASCII code
  2038                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2039                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2040                                  			jb	irq1.100					;yes, skip ahead
  2041                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2042                                  			ja	irq1.100					;yes, skip ahead
  2043                                  			xor	al,EASCIICASE					;switch case
  2044                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2045                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2046                                  			test	ah,EKEYBUP					;release scan-code?
  2047                                  			jz	irq1.120					;no, skip ahead
  2048                                  			mov	edx,EMSGKEYUP					;key-up event
  2049                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  2050                                  			or	edx,eax						;msg id and codes
  2051                                  			xor	ecx,ecx						;null param
  2052                                  			push	eax						;save codes
  2053                                  			call	PutMessage					;put message to console
  2054                                  			pop	eax						;restore codes
  2055                                  			test	al,al						;ASCII translation?
  2056                                  			jz	irq1.130					;no, skip ahead
  2057                                  			mov	edx,EMSGKEYCHAR					;key-character event
  2058                                  			and	eax,0FFFFh					;clear high-order word
  2059                                  			or	edx,eax						;msg id and codes
  2060                                  			xor	ecx,ecx						;null param
  2061                                  			call	PutMessage					;put message to console
  2062                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  2063                                  irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2064                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  2065                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  2066                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2067                                  			pop	ds						;restore non-volatile regs
  2068                                  			pop	esi						;
  2069                                  			pop	ecx						;
  2070                                  			pop	ebx						;
  2071                                  			pop	eax						;
  2072                                  			iretd							;return
  2073                                  ;-----------------------------------------------------------------------------------------------------------------------
  2074                                  ;	Scan-Code to ASCII Translation Tables
  2075                                  ;-----------------------------------------------------------------------------------------------------------------------
  2076                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2077                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2078                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2079                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2080                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2081                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2082                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2083                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2084                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2085                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2086                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2087                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2088                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2089                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2090                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2091                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2092                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2093                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2094                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2095                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2096                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2097                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2098                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2099                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2100                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2101                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2102                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2103                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2104                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2105                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2106                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2107                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2108                                  ;-----------------------------------------------------------------------------------------------------------------------
  2109                                  ;
  2110                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2111                                  ;
  2112                                  ;-----------------------------------------------------------------------------------------------------------------------
  2113                                  			menter	iochannel					;secondary 8259A cascade
  2114                                  			push	eax						;save modified regs
  2115                                  			jmp	hwint						;end interrupt and return
  2116                                  ;-----------------------------------------------------------------------------------------------------------------------
  2117                                  ;
  2118                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2119                                  ;
  2120                                  ;-----------------------------------------------------------------------------------------------------------------------
  2121                                  			menter	com2						;serial port 2 interrupt
  2122                                  			push	eax						;save modified regs
  2123                                  			jmp	hwint						;end interrupt and return
  2124                                  ;-----------------------------------------------------------------------------------------------------------------------
  2125                                  ;
  2126                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2127                                  ;
  2128                                  ;-----------------------------------------------------------------------------------------------------------------------
  2129                                  			menter	com1						;serial port 1 interrupt
  2130                                  			push	eax						;save modified regs
  2131                                  			jmp	hwint						;end interrupt and return
  2132                                  ;-----------------------------------------------------------------------------------------------------------------------
  2133                                  ;
  2134                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2135                                  ;
  2136                                  ;-----------------------------------------------------------------------------------------------------------------------
  2137                                  			menter	lpt2						;parallel port 2 interrupt
  2138                                  			push	eax						;save modified regs
  2139                                  			jmp	hwint						;end interrupt and return
  2140                                  ;-----------------------------------------------------------------------------------------------------------------------
  2141                                  ;
  2142                                  ;	IRQ6	Diskette Hardware Interrupt
  2143                                  ;
  2144                                  ;-----------------------------------------------------------------------------------------------------------------------
  2145                                  			menter	diskette					;floppy disk interrupt
  2146                                  			push	eax						;save non-volatile regs
  2147                                  			push	ds						;
  2148                                  			push	ESELDAT						;load OS data selector ...
  2149                                  			pop	ds						;... into DS register
  2150                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2151                                  			or	al,10000000b					;set IRQ flag
  2152                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  2153                                  			pop	ds						;restore non-volatile regs
  2154                                  			jmp	hwint						;end primary PIC interrupt
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156                                  ;
  2157                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2158                                  ;
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  			menter	lpt1						;parallel port 1 interrupt
  2161                                  			push	eax						;save modified regs
  2162                                  			jmp	hwint						;end interrupt and return
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  ;
  2165                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2166                                  ;
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  			menter	rtclock						;real-time clock interrupt
  2169                                  			push	eax						;save modified regs
  2170                                  			jmp	hwwint						;end interrupt and return
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                  ;
  2173                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2174                                  ;
  2175                                  ;-----------------------------------------------------------------------------------------------------------------------
  2176                                  			menter	retrace						;CGA vertical retrace interrupt
  2177                                  			push	eax						;save modified regs
  2178                                  			jmp	hwwint						;end interrupt and return
  2179                                  ;-----------------------------------------------------------------------------------------------------------------------
  2180                                  ;
  2181                                  ;	IRQ10	Reserved Hardware Interrupt
  2182                                  ;
  2183                                  ;-----------------------------------------------------------------------------------------------------------------------
  2184                                  			menter	irq10						;reserved
  2185                                  			push	eax						;save modified regs
  2186                                  			jmp	hwwint						;end interrupt and return
  2187                                  ;-----------------------------------------------------------------------------------------------------------------------
  2188                                  ;
  2189                                  ;	IRQ11	Reserved Hardware Interrupt
  2190                                  ;
  2191                                  ;-----------------------------------------------------------------------------------------------------------------------
  2192                                  			menter	irq11						;reserved
  2193                                  			push	eax						;save modified regs
  2194                                  			jmp	hwwint						;end interrupt and return
  2195                                  ;-----------------------------------------------------------------------------------------------------------------------
  2196                                  ;
  2197                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2198                                  ;
  2199                                  ;-----------------------------------------------------------------------------------------------------------------------
  2200                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2201                                  			push	eax						;save modified regs
  2202                                  			jmp	hwwint						;end interrupt and return
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  ;
  2205                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  			menter	coprocessor					;coprocessor interrupt
  2209                                  			push	eax						;save modified regs
  2210                                  			jmp	hwwint						;end interrupt and return
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                  ;
  2213                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2214                                  ;
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  			menter	fixeddisk					;fixed disk interrupt
  2217                                  			push	eax						;save modified regs
  2218                                  			jmp	hwwint						;end interrupt and return
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  ;
  2221                                  ;	IRQ15	Reserved Hardware Interrupt
  2222                                  ;
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                  			menter	irq15						;reserved
  2225                                  			push	eax						;save modified regs
  2226                                  			jmp	hwwint						;end interrupt and return
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                  ;
  2229                                  ;	Exit from hardware interrupt
  2230                                  ;
  2231                                  ;-----------------------------------------------------------------------------------------------------------------------
  2232                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2233                                  			jmp	hwint90						;skip ahead
  2234                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2235                                  hwint90			pop	eax						;restore modified regs
  2236                                  			iretd							;return from interrupt
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                  ;
  2239                                  ;	INT 30h Operating System Software Service Interrupt
  2240                                  ;
  2241                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2242                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2243                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2244                                  ;	the entry address of the specific function from a table.
  2245                                  ;
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  			menter	svc
  2248                                  			cmp	al,maxtsvc					;is our function out of range?
  2249                                  			jae	svc90						;yes, skip ahead
  2250                                  			movzx	eax,al						;function
  2251                                  			shl	eax,2						;offset into table
  2252                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2253                                  svc90			iretd							;return from interrupt
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                  ;
  2256                                  ;	Service Request Table
  2257                                  ;
  2258                                  ;
  2259                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2260                                  ;
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2263                                  			tsvce	GetConsoleString				;get string input
  2264                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2265                                  			tsvce	PutConsoleString				;tty output asciiz string
  2266                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2267                                  ;-----------------------------------------------------------------------------------------------------------------------
  2268                                  ;
  2269                                  ;	Service Request Macros
  2270                                  ;
  2271                                  ;	These macros provide positional parameterization of service request calls.
  2272                                  ;
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  %macro			clearConsoleScreen 0
  2275                                  			mov	al,eClearConsoleScreen				;function code
  2276                                  			int	_svc						;invoke OS service
  2277                                  %endmacro
  2278                                  %macro			getConsoleString 4
  2279                                  			mov	edx,%1						;buffer address
  2280                                  			mov	ecx,%2						;max characters
  2281                                  			mov	bh,%3						;echo indicator
  2282                                  			mov	bl,%4						;terminator
  2283                                  			mov	al,eGetConsoleString				;function code
  2284                                  			int	_svc						;invoke OS service
  2285                                  %endmacro
  2286                                  %macro			placeCursor 0
  2287                                  			mov	al,ePlaceCursor					;function code
  2288                                  			int	_svc						;invoke OS service
  2289                                  %endmacro
  2290                                  %macro			putConsoleString 1
  2291                                  			mov	edx,%1						;string address
  2292                                  			mov	al,ePutConsoleString				;function code
  2293                                  			int	_svc						;invoke OS service
  2294                                  %endmacro
  2295                                  ;=======================================================================================================================
  2296                                  ;
  2297                                  ;	Kernel Function Library
  2298                                  ;
  2299                                  ;=======================================================================================================================
  2300                                  ;=======================================================================================================================
  2301                                  ;
  2302                                  ;	Console Helper Routines
  2303                                  ;
  2304                                  ;	PutConsoleString
  2305                                  ;	GetConsoleString
  2306                                  ;	GetConsoleChar
  2307                                  ;	Yield
  2308                                  ;	PreviousConsoleColumn
  2309                                  ;	NextConsoleColumn
  2310                                  ;	FirstConsoleColumn
  2311                                  ;	NextConsoleRow
  2312                                  ;	PutConsoleChar
  2313                                  ;	PutConsoleOIAShift
  2314                                  ;	PutConsoleOIAChar
  2315                                  ;	PutConsoleHexByte
  2316                                  ;
  2317                                  ;=======================================================================================================================
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319                                  ;
  2320                                  ;	Routine:	PutConsoleString
  2321                                  ;
  2322                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2323                                  ;			console position as needed.
  2324                                  ;
  2325                                  ;	In:		EDX	source address
  2326                                  ;			DS	OS data selector
  2327                                  ;
  2328                                  ;-----------------------------------------------------------------------------------------------------------------------
  2329                                  PutConsoleString	push	esi						;save non-volatile regs
  2330                                  			mov	esi,edx						;source address
  2331                                  			cld							;forward strings
  2332                                  .10			lodsb							;ASCII character
  2333                                  			or	al,al						;end of string?
  2334                                  			jz	.40						;yes, skip ahead
  2335                                  			cmp	al,EASCIIRETURN					;carriage return?
  2336                                  			jne	.20						;no, skip ahead
  2337                                  			call	FirstConsoleColumn				;move to start of row
  2338                                  			jmp	.10						;next character
  2339                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2340                                  			jne	.30						;no, skip ahead
  2341                                  			call	NextConsoleRow					;move to next row
  2342                                  			jmp	.10						;next character
  2343                                  .30			call	PutConsoleChar					;output character to console
  2344                                  			call	NextConsoleColumn				;advance to next column
  2345                                  			jmp	.10						;next character
  2346                                  .40			pop	esi						;restore non-volatile regs
  2347                                  			ret							;return
  2348                                  ;-----------------------------------------------------------------------------------------------------------------------
  2349                                  ;
  2350                                  ;	Routine:	GetConsoleString
  2351                                  ;
  2352                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2353                                  ;
  2354                                  ;	In:		DS:EDX	target buffer address
  2355                                  ;			ECX	maximum number of characters to accept
  2356                                  ;			BH	echo to terminal
  2357                                  ;			BL	terminating character
  2358                                  ;
  2359                                  ;-----------------------------------------------------------------------------------------------------------------------
  2360                                  GetConsoleString	push	ecx						;save non-volatile regs
  2361                                  			push	esi						;
  2362                                  			push	edi						;
  2363                                  			push	es						;
  2364                                  			push	ds						;load data segment selector ...
  2365                                  			pop	es						;... into extra segment register
  2366                                  			mov	edi,edx						;edi = target buffer
  2367                                  			push	ecx						;save maximum characters
  2368                                  			xor	al,al						;zero register
  2369                                  			cld							;forward strings
  2370                                  			rep	stosb						;zero fill buffer
  2371                                  			pop	ecx						;maximum characters
  2372                                  			mov	edi,edx						;edi = target buffer
  2373                                  			mov	esi,edx						;esi = target buffer
  2374                                  .10			jecxz	.50						;exit if max-length is zero
  2375                                  .20			call	GetConsoleChar					;al = next input char
  2376                                  			cmp	al,bl						;is this the terminator?
  2377                                  			je	.50						;yes, exit
  2378                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2379                                  			jne	.30						;no, skip ahead
  2380                                  			cmp	esi,edi						;at start of buffer?
  2381                                  			je	.20						;yes, get next character
  2382                                  			dec	edi						;backup target pointer
  2383                                  			mov	byte [edi],0					;zero previous character
  2384                                  			inc	ecx						;increment remaining chars
  2385                                  			test	bh,1						;echo to console?
  2386                                  			jz	.20						;no, get next character
  2387                                  			call	PreviousConsoleColumn				;backup console position
  2388                                  			mov	al,EASCIISPACE					;ASCII space
  2389                                  			call	PutConsoleChar					;write space to console
  2390                                  			call	PlaceCursor					;position the cursor
  2391                                  			jmp	.20						;get next character
  2392                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2393                                  			jb	.20						;no, get another character
  2394                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2395                                  			ja	.20						;no, get another character
  2396                                  			stosb							;store character in buffer
  2397                                  			test	bh,1						;echo to console?
  2398                                  			jz	.40						;no, skip ahead
  2399                                  			call	PutConsoleChar					;write character to console
  2400                                  			call	NextConsoleColumn				;advance console position
  2401                                  			call	PlaceCursor					;position the cursor
  2402                                  .40			dec	ecx						;decrement remaining chars
  2403                                  			jmp	.10						;next
  2404                                  .50			xor	al,al						;null
  2405                                  			stosb							;terminate buffer
  2406                                  			pop	es						;restore non-volatile regs
  2407                                  			pop	edi						;
  2408                                  			pop	esi						;
  2409                                  			pop	ecx						;
  2410                                  			ret							;return
  2411                                  ;-----------------------------------------------------------------------------------------------------------------------
  2412                                  ;
  2413                                  ;	Routine:	GetConsoleChar
  2414                                  ;
  2415                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2416                                  ;
  2417                                  ;	Out:		AL	ASCII character code
  2418                                  ;			AH	keyboard scan code
  2419                                  ;
  2420                                  ;-----------------------------------------------------------------------------------------------------------------------
  2421                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2422                                  GetConsoleChar		call	GetMessage					;get the next message
  2423                                  			or	eax,eax						;do we have a message?
  2424                                  			jz	GetConsoleChar.10				;no, skip ahead
  2425                                  			push	eax						;save key codes
  2426                                  			and	eax,0FFFF0000h					;mask for message type
  2427                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2428                                  			pop	eax						;restore key codes
  2429                                  			jne	GetConsoleChar					;no, try again
  2430                                  			and	eax,0000ffffh					;mask for key codes
  2431                                  			ret							;return
  2432                                  ;-----------------------------------------------------------------------------------------------------------------------
  2433                                  ;
  2434                                  ;	Routine:	Yield
  2435                                  ;
  2436                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2437                                  ;
  2438                                  ;-----------------------------------------------------------------------------------------------------------------------
  2439                                  Yield			sti							;enable maskagle interrupts
  2440                                  			hlt							;halt until external interrupt
  2441                                  			ret							;return
  2442                                  ;-----------------------------------------------------------------------------------------------------------------------
  2443                                  ;
  2444                                  ;	Routine:	PreviousConsoleColumn
  2445                                  ;
  2446                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2447                                  ;			the column is set to the last position in the row and the row is decremented.
  2448                                  ;
  2449                                  ;	In:		DS	OS data selector
  2450                                  ;
  2451                                  ;-----------------------------------------------------------------------------------------------------------------------
  2452                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2453                                  			or	al,al						;start of row?
  2454                                  			jnz	.10						;no, skip ahead
  2455                                  			mov	ah,[wbConsoleRow]				;current row
  2456                                  			or	ah,ah						;top of screen?
  2457                                  			jz	.20						;yes, exit with no change
  2458                                  			dec	ah						;decrement row
  2459                                  			mov	[wbConsoleRow],ah				;save row
  2460                                  			mov	al,ECONCOLS					;set maximum column
  2461                                  .10			dec	al						;decrement column
  2462                                  			mov	[wbConsoleColumn],al				;save column
  2463                                  .20			ret							;return
  2464                                  ;-----------------------------------------------------------------------------------------------------------------------
  2465                                  ;
  2466                                  ;	Routine:	NextConsoleColumn
  2467                                  ;
  2468                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2469                                  ;			incremented if the end of the current row is reached.
  2470                                  ;
  2471                                  ;	In:		DS	OS data selector
  2472                                  ;
  2473                                  ;-----------------------------------------------------------------------------------------------------------------------
  2474                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2475                                  			inc	al						;increment column
  2476                                  			mov	[wbConsoleColumn],al				;save column
  2477                                  			cmp	al,ECONCOLS					;end of row?
  2478                                  			jb	.10						;no, skip ahead
  2479                                  			call	FirstConsoleColumn				;reset column to start of row
  2480                                  			call	NextConsoleRow					;line feed to next row
  2481                                  .10			ret							;return
  2482                                  ;-----------------------------------------------------------------------------------------------------------------------
  2483                                  ;
  2484                                  ;	Routine:	FirstConsoleColumn
  2485                                  ;
  2486                                  ;	Description:	This routine resets the console column to start of the row.
  2487                                  ;
  2488                                  ;	In:		DS	OS data selector
  2489                                  ;
  2490                                  ;-----------------------------------------------------------------------------------------------------------------------
  2491                                  FirstConsoleColumn	xor	al,al						;zero column
  2492                                  			mov	[wbConsoleColumn],al				;save column
  2493                                  			ret							;return
  2494                                  ;-----------------------------------------------------------------------------------------------------------------------
  2495                                  ;
  2496                                  ;	Routine:	NextConsoleRow
  2497                                  ;
  2498                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2499                                  ;
  2500                                  ;	In:		DS	OS data selector
  2501                                  ;
  2502                                  ;-----------------------------------------------------------------------------------------------------------------------
  2503                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2504                                  			inc	al						;increment row
  2505                                  			mov	[wbConsoleRow],al				;save row
  2506                                  			cmp	al,ECONROWS					;end of screen?
  2507                                  			jb	.10						;no, skip ahead
  2508                                  			call	ScrollConsoleRow				;scroll up one row
  2509                                  			mov	al,[wbConsoleRow]				;row
  2510                                  			dec	al						;decrement row
  2511                                  			mov	[wbConsoleRow],al				;save row
  2512                                  .10			ret							;return
  2513                                  ;-----------------------------------------------------------------------------------------------------------------------
  2514                                  ;
  2515                                  ;	Routine:	PutConsoleChar
  2516                                  ;
  2517                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2518                                  ;
  2519                                  ;	In:		AL	ASCII character
  2520                                  ;			DS	OS data selector
  2521                                  ;
  2522                                  ;-----------------------------------------------------------------------------------------------------------------------
  2523                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2524                                  			push	es						;
  2525                                  			push	ESELCGA						;load CGA selector ...
  2526                                  			pop	es						;... into extra segment reg
  2527                                  			mov	cl,[wbConsoleColumn]				;column
  2528                                  			mov	ch,[wbConsoleRow]				;row
  2529                                  			call	SetConsoleChar					;put character at row, column
  2530                                  			pop	es						;restore non-volatile regs
  2531                                  			pop	ecx						;
  2532                                  			ret							;return
  2533                                  ;-----------------------------------------------------------------------------------------------------------------------
  2534                                  ;
  2535                                  ;	Routine:	PutConsoleOIAShift
  2536                                  ;
  2537                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2538                                  ;
  2539                                  ;	In:		BL	shift flags
  2540                                  ;			BH	lock flags
  2541                                  ;			DS	OS data selector
  2542                                  ;
  2543                                  ;-----------------------------------------------------------------------------------------------------------------------
  2544                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2545                                  			push	es						;
  2546                                  			push	ESELCGA						;load CGA selector ...
  2547                                  			pop	es						;... into ES register
  2548                                  			mov	ch,ECONOIAROW					;OIA row
  2549                                  			mov	al,EASCIISPACE					;space is default character
  2550                                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  2551                                  			jz	.10						;no, skip ahead
  2552                                  			mov	al,'S'						;yes, indicate with 'S'
  2553                                  .10			mov	cl,14						;indicator column
  2554                                  			call	SetConsoleChar					;display ASCII character
  2555                                  			mov	al,EASCIISPACE					;ASCII space
  2556                                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  2557                                  			jz	.20						;no, skip ahead
  2558                                  			mov	al,'S'						;yes, indicate with 'S'
  2559                                  .20			mov	cl,64						;indicator column
  2560                                  			call	SetConsoleChar					;display ASCII character
  2561                                  			mov	al,EASCIISPACE					;ASCII space
  2562                                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  2563                                  			jz	.30						;no, skip ahead
  2564                                  			mov	al,'C'						;yes, indicate with 'C'
  2565                                  .30			mov	cl,15						;indicator column
  2566                                  			call	SetConsoleChar					;display ASCII character
  2567                                  			mov	al,EASCIISPACE					;ASCII space
  2568                                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  2569                                  			jz	.40						;no, skip ahead
  2570                                  			mov	al,'C'						;yes, indicate with 'C'
  2571                                  .40			mov	cl,63						;indicator column
  2572                                  			call	SetConsoleChar					;display ASCII character
  2573                                  			mov	al,EASCIISPACE					;ASCII space
  2574                                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  2575                                  			jz	.50						;no, skip ahead
  2576                                  			mov	al,'A'						;yes, indicate with 'A'
  2577                                  .50			mov	cl,16						;indicator column
  2578                                  			call	SetConsoleChar					;display ASCII character
  2579                                  			mov	al,EASCIISPACE					;ASCII space
  2580                                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  2581                                  			jz	.60						;no, skip ahead
  2582                                  			mov	al,'A'						;yes, indicate with 'A'
  2583                                  .60			mov	cl,62						;indicator column
  2584                                  			call	SetConsoleChar					;display ASCII character
  2585                                  			mov	al,EASCIISPACE					;ASCII space
  2586                                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  2587                                  			jz	.70						;no, skip ahead
  2588                                  			mov	al,'C'						;yes, indicate with 'C'
  2589                                  .70			mov	cl,78						;indicator column
  2590                                  			call	SetConsoleChar					;display ASCII character
  2591                                  			mov	al,EASCIISPACE					;ASCII space
  2592                                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  2593                                  			jz	.80						;no, skip ahead
  2594                                  			mov	al,'N'						;yes, indicate with 'N'
  2595                                  .80			mov	cl,77						;indicator column
  2596                                  			call	SetConsoleChar					;display ASCII character
  2597                                  			mov	al,EASCIISPACE					;ASCII space
  2598                                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  2599                                  			jz	.90						;no, skip ahead
  2600                                  			mov	al,'S'						;yes, indicate with 'S'
  2601                                  .90			mov	cl,76						;indicator column
  2602                                  			call	SetConsoleChar					;display ASCII character
  2603                                  			pop	es						;restore non-volatile regs
  2604                                  			pop	ecx						;
  2605                                  			ret							;return
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607                                  ;
  2608                                  ;	Routine:	PutConsoleOIAChar
  2609                                  ;
  2610                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2611                                  ;
  2612                                  ;	In:		DS	OS data selector
  2613                                  ;
  2614                                  ;-----------------------------------------------------------------------------------------------------------------------
  2615                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2616                                  			push	ecx						;
  2617                                  			push	esi						;
  2618                                  			push	ds						;
  2619                                  			push	es						;
  2620                                  			push	ESELDAT						;load OS data selector ...
  2621                                  			pop	ds						;... into data segment register
  2622                                  			push	ESELCGA						;load CGA selector ...
  2623                                  			pop	es						;... into extra segment register
  2624                                  			mov	esi,wbConsoleScan0				;scan codes address
  2625                                  			mov	bh,ECONOIAROW					;OIA row
  2626                                  			mov	bl,0						;starting column
  2627                                  			mov	ecx,6						;maximum scan codes
  2628                                  .10			push	ecx						;save remaining count
  2629                                  			mov	ecx,ebx						;row, column
  2630                                  			lodsb							;read scan code
  2631                                  			or	al,al						;scan code present?
  2632                                  			jz	.20						;no, skip ahead
  2633                                  			call	PutConsoleHexByte				;display scan code
  2634                                  			jmp	.30						;continue
  2635                                  .20			mov	al,' '						;ASCII space
  2636                                  			call	SetConsoleChar					;display space
  2637                                  			mov	al,' '						;ASCII space
  2638                                  			call	SetConsoleChar					;display space
  2639                                  .30			add	bl,2						;next column (+2)
  2640                                  			pop	ecx						;restore remaining
  2641                                  			loop	.10						;next code
  2642                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2643                                  			cmp	al,32						;printable? (lower-bounds)
  2644                                  			jb	.40						;no, skip ahead
  2645                                  			cmp	al,126						;printable? (upper-bounds)
  2646                                  			ja	.40						;no, skip ahead
  2647                                  			mov	ch,bh						;OIA row
  2648                                  			mov	cl,40						;character display column
  2649                                  			call	SetConsoleChar					;display ASCII character
  2650                                  .40			pop	es						;restore non-volatile regs
  2651                                  			pop	ds						;
  2652                                  			pop	esi						;
  2653                                  			pop	ecx						;
  2654                                  			pop	ebx						;
  2655                                  			ret							;return
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;	Routine:	PutConsoleHexByte
  2659                                  ;
  2660                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  2661                                  ;
  2662                                  ;	In:		AL	byte value
  2663                                  ;			CL	column
  2664                                  ;			CH	row
  2665                                  ;			DS	OS data selector
  2666                                  ;			ES	CGA selector
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  2670                                  			mov	bl,al						;save byte value
  2671                                  			shr	al,4						;hi-order nybble
  2672                                  			or	al,030h						;apply ASCII zone
  2673                                  			cmp	al,03ah						;numeric?
  2674                                  			jb	.10						;yes, skip ahead
  2675                                  			add	al,7						;add ASCII offset for alpha
  2676                                  .10			call	SetConsoleChar					;display ASCII character
  2677                                  			mov	al,bl						;byte value
  2678                                  			and	al,0fh						;lo-order nybble
  2679                                  			or	al,30h						;apply ASCII zone
  2680                                  			cmp	al,03ah						;numeric?
  2681                                  			jb	.20						;yes, skip ahead
  2682                                  			add	al,7						;add ASCII offset for alpha
  2683                                  .20			call	SetConsoleChar					;display ASCII character
  2684                                  			pop	ebx						;restore non-volatile regs
  2685                                  			ret							;return
  2686                                  ;=======================================================================================================================
  2687                                  ;
  2688                                  ;	Message Queue Helper Routines
  2689                                  ;
  2690                                  ;	PutMessage
  2691                                  ;	GetMessage
  2692                                  ;
  2693                                  ;=======================================================================================================================
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;	Routine:	PutMessage
  2697                                  ;
  2698                                  ;	Description:	This routine adda a message to the message queue.
  2699                                  ;
  2700                                  ;	In:		ECX	hi-order data word
  2701                                  ;			EDX	lo-order data word
  2702                                  ;
  2703                                  ;	Out:		CY	0 = success
  2704                                  ;				1 = fail: queue is full
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  PutMessage		push	ds						;save non-volatile regs
  2708                                  			push	ESELMQ						;load task message queue selector ...
  2709                                  			pop	ds						;... into data segment register
  2710                                  			mov	eax,[MQTail]					;tail ptr
  2711                                  			cmp	dword [eax],0					;is queue full?
  2712                                  			stc							;assume failure
  2713                                  			jne	.20						;yes, cannot store
  2714                                  			mov	[eax],edx					;store lo-order data
  2715                                  			mov	[eax+4],ecx					;store hi-order data
  2716                                  			add	eax,8						;next queue element adr
  2717                                  			and	eax,03fch					;at end of queue?
  2718                                  			jnz	.10						;no, skip ahead
  2719                                  			mov	al,8						;reset to top of queue
  2720                                  .10			mov	[MQTail],eax					;save new tail ptr
  2721                                  			clc							;indicate success
  2722                                  .20			pop	ds						;restore non-volatile regs
  2723                                  			ret							;return
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;	Routine:	GetMessage
  2727                                  ;
  2728                                  ;	Description:	This routine reads and removes a message from the message queue.
  2729                                  ;
  2730                                  ;	Out:		EAX	lo-order message data
  2731                                  ;			EDX	hi-order message data
  2732                                  ;
  2733                                  ;			CY	0 = message read
  2734                                  ;				1 = no message to read
  2735                                  ;
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  GetMessage		push	ebx						;save non-volatile regs
  2738                                  			push	ecx						;
  2739                                  			push	ds						;
  2740                                  			push	ESELMQ						;load message queue selector ...
  2741                                  			pop	ds						;... into data segment register
  2742                                  			mov	ebx,[MQHead]					;head ptr
  2743                                  			mov	eax,[ebx]					;lo-order 32 bits
  2744                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2745                                  			or	eax,edx						;is queue empty?
  2746                                  			stc							;assume queue is emtpy
  2747                                  			jz	.20						;yes, skip ahead
  2748                                  			xor	ecx,ecx						;store zero
  2749                                  			mov	[ebx],ecx					;... in lo-order dword
  2750                                  			mov	[ebx+4],ecx					;... in hi-order dword
  2751                                  			add	ebx,8						;next queue element
  2752                                  			and	ebx,03fch					;at end of queue?
  2753                                  			jnz	.10						;no, skip ahead
  2754                                  			mov	bl,8						;reset to 1st entry
  2755                                  .10			mov	[MQHead],ebx					;save new head ptr
  2756                                  			clc							;indicate message read
  2757                                  .20			pop	ds						;restore non-volatile regs
  2758                                  			pop	ecx						;
  2759                                  			pop	ebx						;
  2760                                  			ret							;return
  2761                                  ;=======================================================================================================================
  2762                                  ;
  2763                                  ;	Memory-Mapped Video Routines
  2764                                  ;
  2765                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2766                                  ;
  2767                                  ;	ClearConsoleScreen
  2768                                  ;	ScrollConsoleRow
  2769                                  ;	SetConsoleChar
  2770                                  ;
  2771                                  ;=======================================================================================================================
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  ;
  2774                                  ;	Routine:	ClearConsoleScreen
  2775                                  ;
  2776                                  ;	Description:	This routine clears the console (CGA) screen.
  2777                                  ;
  2778                                  ;-----------------------------------------------------------------------------------------------------------------------
  2779                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  2780                                  			push	edi						;
  2781                                  			push	ds						;
  2782                                  			push	es						;
  2783                                  			push	ESELDAT						;load OS Data selector ...
  2784                                  			pop	ds						;... into DS register
  2785                                  			push	ESELCGA						;load CGA selector ...
  2786                                  			pop	es						;... into ES register
  2787                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2788                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2789                                  			xor	edi,edi						;target offset
  2790                                  			cld							;forward strings
  2791                                  			rep	stosd						;reset screen body
  2792                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2793                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2794                                  			rep	stosd						;reset OIA line
  2795                                  			xor	al,al						;zero register
  2796                                  			mov	[wbConsoleRow],al				;reset console row
  2797                                  			mov	[wbConsoleColumn],al				;reset console column
  2798                                  			call	PlaceCursor					;place cursor at current position
  2799                                  			pop	es						;restore non-volatile regs
  2800                                  			pop	ds						;
  2801                                  			pop	edi						;
  2802                                  			pop	ecx						;
  2803                                  			ret							;return
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                  ;
  2806                                  ;	Routine:	ScrollConsoleRow
  2807                                  ;
  2808                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2809                                  ;
  2810                                  ;-----------------------------------------------------------------------------------------------------------------------
  2811                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  2812                                  			push	esi						;
  2813                                  			push	edi						;
  2814                                  			push	ds						;
  2815                                  			push	es						;
  2816                                  			push	ESELCGA						;load CGA video selector ...
  2817                                  			pop	ds						;... into DS
  2818                                  			push	ESELCGA						;load CGA video selector ...
  2819                                  			pop	es						;... into ES
  2820                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2821                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2822                                  			xor	edi,edi						;edi = target (line 1)
  2823                                  			cld							;forward strings
  2824                                  			rep	movsd						;move 24 lines up
  2825                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2826                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2827                                  			rep	stosd						;clear bottom row
  2828                                  			pop	es						;restore non-volatile regs
  2829                                  			pop	ds						;
  2830                                  			pop	edi						;
  2831                                  			pop	esi						;
  2832                                  			pop	ecx						;
  2833                                  			ret							;return
  2834                                  ;-----------------------------------------------------------------------------------------------------------------------
  2835                                  ;
  2836                                  ;	Routine:	SetConsoleChar
  2837                                  ;
  2838                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2839                                  ;
  2840                                  ;	In:		AL	ASCII character
  2841                                  ;			CL	column
  2842                                  ;			CH	row
  2843                                  ;			ES	CGA selector
  2844                                  ;
  2845                                  ;	Out:		EAX	last target address written (ES:)
  2846                                  ;			CL	column + 1
  2847                                  ;
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849                                  SetConsoleChar		mov	dl,al						;ASCII character
  2850                                  			movzx	eax,ch						;row
  2851                                  			mov	ah,ECONCOLS					;cols/row
  2852                                  			mul	ah						;row * cols/row
  2853                                  			add	al,cl						;add column
  2854                                  			adc	ah,0						;handle carry
  2855                                  			shl	eax,1						;screen offset
  2856                                  			mov	[es:eax],dl					;store character
  2857                                  			inc	cl						;next column
  2858                                  			ret							;return
  2859                                  ;=======================================================================================================================
  2860                                  ;
  2861                                  ;	Input/Output Routines
  2862                                  ;
  2863                                  ;	These routines read and/or write directly to ports.
  2864                                  ;
  2865                                  ;	PlaceCursor
  2866                                  ;	PutPrimaryEndOfInt
  2867                                  ;	PutSecondaryEndOfInt
  2868                                  ;	SetKeyboardLamps
  2869                                  ;	WaitForKeyInBuffer
  2870                                  ;	WaitForKeyOutBuffer
  2871                                  ;
  2872                                  ;=======================================================================================================================
  2873                                  ;-----------------------------------------------------------------------------------------------------------------------
  2874                                  ;
  2875                                  ;	Routine:	PlaceCursor
  2876                                  ;
  2877                                  ;	Description:	This routine positions the cursor on the console.
  2878                                  ;
  2879                                  ;	In:		DS	OS data selector
  2880                                  ;
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  PlaceCursor		push	ecx						;save non-volatile regs
  2883                                  			mov	al,[wbConsoleRow]				;al = row
  2884                                  			mov	ah,ECONCOLS					;ah = cols/row
  2885                                  			mul	ah						;row offset
  2886                                  			add	al,[wbConsoleColumn]				;add column
  2887                                  			adc	ah,0						;add overflow
  2888                                  			mov	ecx,eax						;screen offset
  2889                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2890                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2891                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2892                                  			out	dx,al						;select register
  2893                                  			inc	edx						;data port
  2894                                  			mov	al,ch						;hi-order cursor loc
  2895                                  			out	dx,al						;store hi-order loc
  2896                                  			dec	edx						;register select port
  2897                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2898                                  			out	dx,al						;select register
  2899                                  			inc	edx						;data port
  2900                                  			mov	al,cl						;lo-order cursor loc
  2901                                  			out	dx,al						;store lo-order loc
  2902                                  			pop	ecx						;restore non-volatile regs
  2903                                  			ret							;return
  2904                                  ;-----------------------------------------------------------------------------------------------------------------------
  2905                                  ;
  2906                                  ;	Routine:	PutPrimaryEndOfInt
  2907                                  ;
  2908                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2909                                  ;
  2910                                  ;-----------------------------------------------------------------------------------------------------------------------
  2911                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2912                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2913                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  2914                                  			ret							;return
  2915                                  ;-----------------------------------------------------------------------------------------------------------------------
  2916                                  ;
  2917                                  ;	Routine:	PutSecondaryEndOfInt
  2918                                  ;
  2919                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2920                                  ;
  2921                                  ;-----------------------------------------------------------------------------------------------------------------------
  2922                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2923                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2924                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2925                                  			ret							;return
  2926                                  ;-----------------------------------------------------------------------------------------------------------------------
  2927                                  ;
  2928                                  ;	Routine:	SetKeyboardLamps
  2929                                  ;
  2930                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2931                                  ;
  2932                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2933                                  ;
  2934                                  ;-----------------------------------------------------------------------------------------------------------------------
  2935                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2936                                  			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  2937                                  			out	EKEYBPORTDATA,al				;send command to 8042
  2938                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2939                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  2940                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  2941                                  			mov	al,bh						;set/reset lamps value
  2942                                  			out	EKEYBPORTDATA,al				;send lamps value
  2943                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2944                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  2945                                  			ret							;return
  2946                                  ;-----------------------------------------------------------------------------------------------------------------------
  2947                                  ;
  2948                                  ;	Routine:	WaitForKeyInBuffer
  2949                                  ;
  2950                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2951                                  ;
  2952                                  ;	Out:		ZF	1 = Input buffer ready
  2953                                  ;				0 = Input buffer not ready after timeout
  2954                                  ;
  2955                                  ;-----------------------------------------------------------------------------------------------------------------------
  2956                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2957                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  2958                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  2959                                  			test	al,EKEYBBITIN					;is input buffer still full?
  2960                                  			loopnz	.10						;yes, repeat till timeout
  2961                                  			pop	ecx						;restore non-volatile regs
  2962                                  			ret							;return
  2963                                  ;-----------------------------------------------------------------------------------------------------------------------
  2964                                  ;
  2965                                  ;	Routine:	WaitForKeyOutBuffer
  2966                                  ;
  2967                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2968                                  ;
  2969                                  ;	Out:		ZF	1 = Output buffer has data from controller
  2970                                  ;				0 = Output buffer empty after timeout
  2971                                  ;
  2972                                  ;-----------------------------------------------------------------------------------------------------------------------
  2973                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2974                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  2975                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  2976                                  			test	al,EKEYBBITOUT					;output buffer status bit
  2977                                  			loopz	.10						;loop until output buffer bit
  2978                                  			pop	ecx						;restore non-volatile regs
  2979                                  			ret							;return
  2980                                  ;-----------------------------------------------------------------------------------------------------------------------
  2981                                  ;
  2982                                  ;	End of the Kernel Function Library
  2983                                  ;
  2984                                  ;-----------------------------------------------------------------------------------------------------------------------
  2985                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  2986                                  			db	055h,0AAh					;end of segment
  2987                                  ;=======================================================================================================================
  2988                                  ;
  2989                                  ;	Console Task
  2990                                  ;
  2991                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2992                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2993                                  ;	screen and responds to user commands.
  2994                                  ;
  2995                                  ;=======================================================================================================================
  2996                                  ;-----------------------------------------------------------------------------------------------------------------------
  2997                                  ;
  2998                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2999                                  ;
  3000                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3001                                  ;
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  section			constack						;console task stack
  3004                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  ;
  3007                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3008                                  ;
  3009                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3010                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3011                                  ;	16 descriptors. Six are initially defined.
  3012                                  ;
  3013                                  ;-----------------------------------------------------------------------------------------------------------------------
  3014                                  section			conldt							;console local descriptors
  3015                                  			dq	004093004780007Fh				;04 TSS alias
  3016                                  			dq	004093004700007Fh				;0C LDT alias
  3017                                  			dq	00409300400006FFh				;14 stack
  3018                                  			dq	00CF93000000FFFFh				;1C data
  3019                                  			dq	00409B0050000FFFh				;24 code
  3020                                  			dq	00409300480007FFh				;2C message queue
  3021                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ;
  3024                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3025                                  ;
  3026                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3027                                  ;	segment. CS to console code.
  3028                                  ;
  3029                                  ;-----------------------------------------------------------------------------------------------------------------------
  3030                                  section			contss							;console task state segment
  3031                                  			dd	0						;00 back-link tss
  3032                                  			dd	0700h						;04 esp ring 0
  3033                                  			dd	0014h						;08 ss ring 0
  3034                                  			dd	0700h						;0C esp ring 1
  3035                                  			dd	0014h						;10 es ring 1
  3036                                  			dd	0700h						;14 esp ring 2
  3037                                  			dd	0014h						;18 ss ring 2
  3038                                  			dd	0						;1C cr ring 3
  3039                                  			dd	0						;20 eip
  3040                                  			dd	0200h						;24 eflags
  3041                                  			dd	0						;28 eax
  3042                                  			dd	0						;2C ecx
  3043                                  			dd	0						;30 edx
  3044                                  			dd	0						;34 ebx
  3045                                  			dd	0700h						;38 esp ring 3
  3046                                  			dd	0						;3C ebp
  3047                                  			dd	0						;40 esi
  3048                                  			dd	0						;44 edi
  3049                                  			dd	001Ch						;48 es
  3050                                  			dd	0024h						;4C cs
  3051                                  			dd	0014h						;50 ss ring 3
  3052                                  			dd	001Ch						;54 ds
  3053                                  			dd	0						;58 fs
  3054                                  			dd	0						;5c gs
  3055                                  			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  3056                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3057                                  ;-----------------------------------------------------------------------------------------------------------------------
  3058                                  ;
  3059                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3060                                  ;
  3061                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3062                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3063                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3064                                  ;	event.
  3065                                  ;
  3066                                  ;-----------------------------------------------------------------------------------------------------------------------
  3067                                  section			conmque							;console message queue
  3068                                  			dd	8						;head pointer
  3069                                  			dd	8						;tail pointer
  3070                                  			times	510 dd 0					;queue elements
  3071                                  ;-----------------------------------------------------------------------------------------------------------------------
  3072                                  ;
  3073                                  ;	Console Code								@disk: 008400	@mem: 005000
  3074                                  ;
  3075                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3076                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3077                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3078                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3079                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3080                                  ;	board input, echoing to the console screen and responding to user commands.
  3081                                  ;
  3082                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3083                                  ;
  3084                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3085                                  ;				|  Real Mode Interrupt Vectors			|
  3086                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3087                                  ;				|  Reserved BIOS Memory Area			|
  3088                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3089                                  ;				|  Shared Kernel Memory Area			|
  3090                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3091                                  ;				|  Global Descriptor Table (GDT)		|
  3092                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3093                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3094                                  ;			002000	+-----------------------------------------------+
  3095                                  ;				|  Interrupt Handlers				|
  3096                                  ;				|  Kernel Function Library			|
  3097                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3098                                  ;				|  Console Task Stack Area			|
  3099                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3100                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3101                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3102                                  ;				|  Console Task Task State Segment (TSS)	|
  3103                                  ;			004800	+-----------------------------------------------+
  3104                                  ;				|  Console Task Message Queue			|
  3105                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3106                                  ;				|  Console Task Code				|
  3107                                  ;				|  Console Task Constants			|
  3108                                  ;			006000	+===============================================+
  3109                                  ;
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  section			concode	vstart=05000h					;labels relative to 5000h
  3112                                  ConCode			call	ConInitializeData				;initialize console variables
  3113                                  
  3114                                  			clearConsoleScreen					;clear the console screen
  3115                                  			putConsoleString czTitle				;display startup message
  3116                                  .10			putConsoleString czPrompt				;display input prompt
  3117                                  			placeCursor						;set CRT cursor location
  3118                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3119                                  			putConsoleString czNewLine				;newline
  3120                                  			putConsoleString wzConsoleInBuffer			;print entered command
  3121                                  			putConsoleString czNewLine				;new line
  3122                                  			putConsoleString czUnknownCommand			;display error message
  3123                                  
  3124                                  			jmp	.10						;next command
  3125                                  ;-----------------------------------------------------------------------------------------------------------------------
  3126                                  ;
  3127                                  ;	Routine:	ConInitializeData
  3128                                  ;
  3129                                  ;	Description:	This routine initializes console task variables.
  3130                                  ;
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  ConInitializeData	push	ecx						;save non-volatile regs
  3133                                  			push	edi						;
  3134                                  			push	es						;
  3135                                  ;
  3136                                  ;	Initialize console work areas
  3137                                  ;
  3138                                  			push	ESELDAT						;load OS data selector ...
  3139                                  			pop	es						;... into extra segment register
  3140                                  			mov	edi,ECONDATA					;OS console data address
  3141                                  			xor	al,al						;initialization value
  3142                                  			mov	ecx,ECONDATALEN					;size of OS console data
  3143                                  			cld							;forward strings
  3144                                  			rep	stosb						;initialize data
  3145                                  ;
  3146                                  ;	Restore and return
  3147                                  ;
  3148                                  			pop	es						;restore non-volatile regs
  3149                                  			pop	edi						;
  3150                                  			pop	ecx						;
  3151                                  			ret							;return
  3152                                  ;-----------------------------------------------------------------------------------------------------------------------
  3153                                  ;
  3154                                  ;	Constants
  3155                                  ;
  3156                                  ;-----------------------------------------------------------------------------------------------------------------------
  3157                                  czNewLine		db	13,10,0						;new line string
  3158                                  czPrompt		db	":",0						;prompt string
  3159                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3160                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3161                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  3162                                  			db	055h,0AAh					;end of section
  3163                                  %endif
  3164                                  %ifdef BUILDDISK
  3165                                  ;-----------------------------------------------------------------------------------------------------------------------
  3166                                  ;
  3167                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3168                                  ;
  3169                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3170                                  ;
  3171                                  ;-----------------------------------------------------------------------------------------------------------------------
  3172                                  section			unused							;unused disk space
  3173                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3174                                  %endif
  3175                                  ;=======================================================================================================================
  3176                                  ;
  3177                                  ;	End of Program Code
  3178                                  ;
  3179                                  ;=======================================================================================================================
