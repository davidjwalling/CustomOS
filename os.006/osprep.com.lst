     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.006
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;			are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;			console task.
    10                                  ;
    11                                  ;	Revised:	January 1, 2017
    12                                  ;
    13                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    19                                  ;
    20                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;	Assembly Directives
    26                                  ;
    27                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK
    36                                  %define BUILDBOOT
    37                                  %define BUILDCOM
    38                                  %endif
    39                                  %ifdef BUILDPREP
    40                                  %define BUILDBOOT
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;	Conventions
    45                                  ;
    46                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    47                                  ;			Labels within a routine begin at ".10" and increment by 10.
    48                                  ;
    49                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    50                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    51                                  ;
    52                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    53                                  ;			Assembly operands begin in column 33.
    54                                  ;			Lines should not extend beyond column 120.
    55                                  ;
    56                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    57                                  ;			Routine names begin with a verb (Get, Read, etc.)
    58                                  ;
    59                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    60                                  ;			Constant stored values are named in camel case, starting with 'c'.
    61                                  ;			The 2nd letter of the constant label indicates the storage type.
    62                                  ;
    63                                  ;			cq......	constant quad-word (dq)
    64                                  ;			cd......	constant double-word (dd)
    65                                  ;			cw......	constant word (dw)
    66                                  ;			cb......	constant byte (db)
    67                                  ;			cz......	constant ASCIIZ (null-terminated) string
    68                                  ;
    69                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    70                                  ;			The 2nd letter of the variable label indicates the storage type.
    71                                  ;
    72                                  ;			wq......	variable quad-word (resq)
    73                                  ;			wd......	variable double-word (resd)
    74                                  ;			ww......	variable word (resw)
    75                                  ;			wb......	variable byte (resb)
    76                                  ;
    77                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    78                                  ;			Structure names do not begin with a verb.
    79                                  ;
    80                                  ;	Macros:		Macro names are in camel case (getDateString).
    81                                  ;			Macro names do begin with a verb.
    82                                  ;
    83                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    84                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    85                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    86                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    87                                  ;
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;-----------------------------------------------------------------------------------------------------------------------
    90                                  ;
    91                                  ;	Equates
    92                                  ;
    93                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    94                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    95                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    96                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    97                                  ;	values and, lastly, application values.
    98                                  ;
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;-----------------------------------------------------------------------------------------------------------------------
   101                                  ;
   102                                  ;	8042 Keyboard Controller						EKEY...
   103                                  ;
   104                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   105                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   106                                  ;
   107                                  ;-----------------------------------------------------------------------------------------------------------------------
   108                                  EKEYPORTDATA		equ	060h						;8042 data port
   109                                  EKEYPORTSTAT		equ	064h						;8042 status port
   110                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   111                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   112                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   113                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   114                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   115                                  										;---------------------------------------
   116                                  										;	Keyboard Scan Codes
   117                                  										;---------------------------------------
   118                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   119                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   120                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   121                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   122                                  EKEYSLASH		equ	035h						;slash
   123                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   124                                  EKEYALTDOWN		equ	038h						;alt key down
   125                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   126                                  EKEYNUMDOWN		equ	045h						;num-lock down
   127                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   128                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   129                                  EKEYUP			equ	080h						;up
   130                                  EKEYCTRLUP		equ	09Dh						;control key up
   131                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   132                                  EKEYSLASHUP		equ	0B5h						;slash key up
   133                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   134                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   135                                  EKEYALTUP		equ	0B8h						;alt key up
   136                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   137                                  EKEYNUMUP		equ	0C5h						;num-lock up
   138                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   139                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   140                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   141                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   142                                  ;-----------------------------------------------------------------------------------------------------------------------
   143                                  ;
   144                                  ;	8253 Programmable Interrupt Timer					EPIT...
   145                                  ;
   146                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   147                                  ;	approximately 18.2 times per second.
   148                                  ;
   149                                  ;-----------------------------------------------------------------------------------------------------------------------
   150                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   151                                  ;-----------------------------------------------------------------------------------------------------------------------
   152                                  ;
   153                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   154                                  ;
   155                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   156                                  ;	external devices and signals a hardware interrupt to the CPU.
   157                                  ;
   158                                  ;-----------------------------------------------------------------------------------------------------------------------
   159                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   160                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   161                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   162                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   163                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  ;
   166                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   167                                  ;
   168                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   169                                  ;	for CGA, EGA, VGA and compatible video modes.
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   173                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   174                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   175                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   179                                  ;
   180                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   184                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   185                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   186                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   187                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ;
   190                                  ;	x86 Descriptor Access Codes						EACC...
   191                                  ;
   192                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   193                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   194                                  ;
   195                                  ;	0.......	Segment is not present in memory (triggers int 11)
   196                                  ;	1.......	Segment is present in memory
   197                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   198                                  ;	...0....	Segment is a system segment
   199                                  ;	...00010		Local Descriptor Table
   200                                  ;	...00101		Task Gate
   201                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   202                                  ;	...01100		Call Gate (386)
   203                                  ;	...01110		Interrupt Gate (386)
   204                                  ;	...01111		Trap Gate (386)
   205                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   206                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   207                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   208                                  ;
   209                                  ;-----------------------------------------------------------------------------------------------------------------------
   210                                  EACCLDT			equ	10000010b					;local descriptor table
   211                                  EACCTASK		equ	10000101b					;task gate
   212                                  EACCTSS			equ	10001001b					;task-state segment
   213                                  EACCGATE		equ	10001100b					;call gate
   214                                  EACCINT			equ	10001110b					;interrupt gate
   215                                  EACCTRAP		equ	10001111b					;trap gate
   216                                  EACCDATA		equ	10010011b					;upward writable data
   217                                  EACCCODE		equ	10011011b					;non-conforming readable code
   218                                  ;-----------------------------------------------------------------------------------------------------------------------
   219                                  ;
   220                                  ;	BIOS Interrupts and Functions						EBIOS...
   221                                  ;
   222                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   223                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   224                                  ;
   225                                  ;-----------------------------------------------------------------------------------------------------------------------
   226                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   227                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   228                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   229                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   230                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   231                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   232                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;
   235                                  ;	ASCII									EASCII...
   236                                  ;
   237                                  ;-----------------------------------------------------------------------------------------------------------------------
   238                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   239                                  EASCIILINEFEED		equ	10						;ASCII line feed
   240                                  EASCIIRETURN		equ	13						;ASCII carriage return
   241                                  EASCIIESCAPE		equ	27						;ASCII escape
   242                                  EASCIISPACE		equ	32						;ASCII space
   243                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   244                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   245                                  EASCIITILDE		equ	126						;ASCII '~'
   246                                  EASCIICASE		equ	00100000b					;ASCII case bit
   247                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  ;
   250                                  ;	Boot Sector and Loader Constants
   251                                  ;
   252                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   253                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   254                                  ;
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   257                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   258                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   259                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   260                                  EMAXTRIES		equ	5						;max read retries
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ESELDAT			equ	18h						;kernel data selector
   265                                  ESELCGA			equ	20h						;cga video selector
   266                                  ESELOSCODE		equ	48h						;os kernel selector
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;	LDT Selectors								ESEL...
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ESELMQ			equ	2Ch						;console task message queue
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;	Kernel Constants							EKRN...
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  EKRNDESLEN		equ	8						;size of descriptor
   275                                  EKRNADR			equ	1000h						;kernel base address
   276                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   277                                  ;-----------------------------------------------------------------------------------------------------------------------
   278                                  ;	Keyboard Flags								EKEY...
   279                                  ;-----------------------------------------------------------------------------------------------------------------------
   280                                  EKEYCTRLLEFT		equ	00000001b					;left control
   281                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   282                                  EKEYALTLEFT		equ	00000100b					;left alt
   283                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   284                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   285                                  EKEYSHIFT		equ	00010010b					;left or right shift
   286                                  EKEYALTRIGHT		equ	00100000b					;right alt
   287                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   288                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   289                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   290                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;	Console Constants							ECON...
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  ECONCOLS		equ	80						;columns per row
   295                                  ECONROWS		equ	24						;console rows
   296                                  ECONOIAROW		equ	24						;operator information area row
   297                                  ECONCOLBYTES		equ	2						;bytes per column
   298                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   299                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   300                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   301                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;	Kernel Message Identifiers						EMSG...
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   306                                  EMSGKEYUP		equ	41010000h					;message: key-up
   307                                  EMSGKEYCHAR		equ	41020000h					;message: character
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  ;
   310                                  ;	Structures
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;
   315                                  ;	MQUEUE
   316                                  ;
   317                                  ;	The MQUEUE structure maps memory used for a message queue.
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  struc			MQUEUE
   321 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   322 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   323 00000008 <res 000003F8>          MQData			resd	254						;message queue
   324                                  endstruc
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;	OSDATA
   328                                  ;
   329                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   330                                  ;	used by the BIOS.
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  struc			OSDATA
   334 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   335 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   336 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   337 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   338 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   339 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   340 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   341 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   342 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   343 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   344 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   345 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   346 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   347 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   348 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   349 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   350 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   351 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   352 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   353 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   354 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   355 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   356 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   357 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   358 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   359 00000449 <res 00000001>          			resb	1						;449 current video mode
   360 0000044A <res 00000002>          			resw	1						;44A screen columns
   361 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   362 0000044E <res 00000002>          			resw	1						;44E current video page offset
   363 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   364 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   365 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   366 00000462 <res 00000001>          			resb	1						;462 active display page number
   367 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   368 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   369 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   370 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   371 00000469 <res 00000003>          			resb	3						;469 vague
   372 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   373 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   374 00000471 <res 00000001>          			resb	1						;471 bios break flag
   375 00000472 <res 00000002>          			resw	1						;472 soft reset
   376 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   377 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   378 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   379 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   380 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   381 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   382 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   383 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   384 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   385 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   386 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   387 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   388 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   389 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   390 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   391 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   392 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   393 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   394 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   395 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   396 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   397 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   398 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   399 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   400 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   401 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   402 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   403 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   404 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   405 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   406 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   407 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   408 000004AC <res 00000008>          			resb	8						;4AC reserved
   409 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   410 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   411 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   412 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   413 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   414 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   415 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   416 000004CD <res 00000001>          			resb	1						;4CD unknown
   417 000004CE <res 00000002>          			resw	1						;4CE day counter
   418 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   419 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   420 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   421 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   422 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   423 00000505 <res 0000000A>          			resb	10						;505 POST work area
   424 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   425 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   426 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   427 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   428 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   429 0000051E <res 00000002>          			resw	1						;51E unknown
   430 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   431 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   432 00000530 <res 00000004>          			resb	4						;530 MODE command
   433 00000534 <res 000001CC>          			resb	460						;534 unused
   434 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ;
   437                                  ;	OS Variables								@disk: N/A	@mem: 000800
   438                                  ;
   439                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   440                                  ;	accessible by any kernel task or interrupt.
   441                                  ;
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  ECONDATA		equ	($)
   444 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   445 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   446 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   447 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   448 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   449 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   450 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   451 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   452 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   453 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   454 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   455 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   456 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   457                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   458                                  endstruc
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ;
   461                                  ;	Macros
   462                                  ;
   463                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   464                                  ;
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  %macro			mint	1
   467                                  _%1			equ	($-$$) / EKRNDESLEN
   468                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   469                                  %endmacro
   470                                  %macro			mtrap	1
   471                                  _%1			equ	($-$$) / EKRNDESLEN
   472                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   473                                  %endmacro
   474                                  %macro			menter	1
   475                                  ?%1			equ	($-$$)
   476                                  %endmacro
   477                                  %macro			tsvce	1
   478                                  e%1			equ	($-tsvc)/4
   479                                  			dd	%1
   480                                  %endmacro
   481                                  %ifdef BUILDBOOT
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;
   484                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   485                                  ;
   486                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   487                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   488                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   489                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   490                                  ;
   491                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   492                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   493                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   494                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   495                                  ;	immediately followed by a disk parameter table.
   496                                  ;
   497                                  ;-----------------------------------------------------------------------------------------------------------------------
   498                                  			cpu	8086						;assume minimal CPU
   499                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   500                                  			bits	16						;16-bit code at power-up
   501                                  %ifdef BUILDPREP
   502 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   503                                  %else
   504                                  Boot			jmp	word Boot.10					;jump over parameter table
   505                                  %endif
   506                                  ;-----------------------------------------------------------------------------------------------------------------------
   507                                  ;
   508                                  ;	Disk Parameter Table
   509                                  ;
   510                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   511                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   512                                  ;
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   515 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   516 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   517 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   518 00000010 02                      cbFatCount		db	2						;file allocation table copies
   519 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   520 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   521 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   522 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   523                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   524 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   525 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   526 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   527                                  ;
   528                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   529                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   530                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   531                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   532                                  ;	given several possible starting values for CS:IP.
   533                                  ;
   534                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   535 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   536                                  .@20			equ	$-$$						;.@20 = 021h
   537 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   538 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   539 00000025 B104                    			mov	cl,4						;shift count
   540 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   541 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   542 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   543                                  ;
   544                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   545                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   546                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   547                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   548                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   549                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   550                                  ;
   551 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   552 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   553 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   554 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   555 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   556                                  ;
   557                                  ;	Our boot addressability is now set up according to the following diagram.
   558                                  ;
   559                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   560                                  ;				|  Unused (DOS Program Segment Prefix)		|
   561                                  ;			007c00	+-----------------------------------------------+ DS:0100
   562                                  ;				|  Boot Sector Code (vstart=100h)		|
   563                                  ;				|						|
   564                                  ;			007e00	+-----------------------------------------------+ DS:0300
   565                                  ;				|  Boot Stack					|
   566                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   567                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   568                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   569                                  ;				|						|
   570                                  ;			009100	+-----------------------------------------------+ DS:1600
   571                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   572                                  ;				|						|
   573                                  ;			009300	+-----------------------------------------------+ DS:1800
   574                                  ;
   575                                  ;	On entry, DL indicates the drive being booted from.
   576                                  ;
   577 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   578                                  ;
   579                                  ;	Compute directory i/o buffer address.
   580                                  ;
   581 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   582 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   583 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   584 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   585                                  ;
   586                                  ;	Compute segment where os.com will be loaded.
   587                                  ;
   588 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   589 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   590 0000004E 83E810                  			sub	ax,16						;AX = 0900
   591 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   592                                  ;
   593                                  ;	Write a message to the console so we know we have our addressability established.
   594                                  ;
   595 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   596 00000057 E84B01                  			call	BootPrint					;display loader message
   597                                  ;
   598                                  ;	Initialize the number of directory sectors to search.
   599                                  ;
   600 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   601 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   602                                  ;
   603                                  ;	Compute number of directory sectors and initialize overhead count.
   604                                  ;
   605 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   606 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   607 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   608 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   609                                  ;
   610                                  ;	Compute directory entries per sector.
   611                                  ;
   612 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   613 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   614 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   615                                  ;
   616                                  ;	Compute first logical directory sector and update overhead count.
   617                                  ;
   618 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   619 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   620 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   621 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   622 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   623 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   624                                  ;
   625                                  ;	Read directory sector.
   626                                  ;
   627 00000089 B001                    .30			mov	al,1						;sector count
   628 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   629 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   630 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   631                                  ;
   632                                  ;	Setup variables to search this directory sector.
   633                                  ;
   634 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   635 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   636 0000009C 7603                    			jna	.40						;no, continue
   637 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   638 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   639 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   640 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   641                                  ;
   642                                  ;	Loop through directory sectors searching for kernel program.
   643                                  ;
   644 000000AC 56                      .50			push	si						;save kernel name address
   645 000000AD 57                      			push	di						;save dir i/o buffer address
   646 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   647 000000B1 FC                      			cld							;forward strings
   648 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   649 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   650 000000B5 5E                      			pop	si						;restore kernel name address
   651 000000B6 7418                    			je	.60						;exit loop if found
   652 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   653 000000BC 48                      			dec	ax						;decrement remaining entries
   654 000000BD 75ED                    			jnz	.50						;next entry
   655                                  ;
   656                                  ;	Repeat search if we are not at the end of the directory.
   657                                  ;
   658 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   659 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   660 000000C8 75BF                    			jne	.30						;no, get next sector
   661 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   662 000000CD E9C000                  			jmp	BootExit					;display message and exit
   663                                  ;
   664                                  ;	If we find the kernel program in the directory, read the FAT.
   665                                  ;
   666 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   667 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   668 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   669 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   670 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   671 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   672                                  ;
   673                                  ;	Get the starting cluster of the kernel program and target address.
   674                                  ;
   675 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   676 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   677                                  ;
   678                                  ;	Read each program cluster into RAM.
   679                                  ;
   680 000000E9 50                      .70			push	ax						;save cluster nbr
   681 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   682 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   683 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   684 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   685 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   686 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   687 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   688 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   689                                  ;
   690                                  ;	Update buffer pointer for next cluster.
   691                                  ;
   692 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   693 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   694 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   695 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   696 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   697                                  ;
   698                                  ;	Compute next cluster number.
   699                                  ;
   700 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   701 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   702 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   703 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   704 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   705 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   706 0000011B 83E701                  			and	di,1						;get low bit
   707 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   708 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   709 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   710                                  ;
   711                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   712                                  ;
   713 00000126 F6C101                  			test	cl,1						;is cluster odd?
   714 00000129 7404                    			jz	.80						;no, skip ahead
   715 0000012B B104                    			mov	cl,4						;shift count
   716 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   717 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   718 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   719 00000135 75B2                    			jne	.70						;no, continue
   720                                  ;
   721                                  ;	Transfer control to the operating system program.
   722                                  ;
   723 00000137 EA                      			db	0EAh						;jmp seg:offset
   724 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   725 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   726                                  ;
   727                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   728                                  ;
   729 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   730 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   731 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   732 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   733 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   734 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   735 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   736 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   737 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   738 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   739                                  ;
   740                                  ;	Try maxtries times to read sector.
   741                                  ;
   742 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   743 0000015B 53                      .10			push	bx						;save buffer address
   744 0000015C 51                      			push	cx						;save retry count
   745 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   746 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   747 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   748 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   749 0000016A 59                      			pop	cx						;restore retry count
   750 0000016B 5B                      			pop	bx						;restore buffer address
   751 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   752 0000016E E2EB                    			loop	.10						;retry
   753                                  ;
   754                                  ;	Handle disk error: convert to ASCII and store in error string.
   755                                  ;
   756 00000170 88E0                    			mov	al,ah						;AL = bios error code
   757 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   758 00000174 B210                    			mov	dl,16						;divisor for base 16
   759 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   760 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   761 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   762 0000017E 7203                    			jb	.20						;continue if numeral
   763 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   764 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   765 00000185 7203                    			jb	.30						;continue if numeral
   766 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   767 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   768 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   769 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   770 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   771 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   772 00000197 7504                    			jnz	.20						;continue if key pressed
   773 00000199 FB                      			sti							;enable maskable interrupts
   774 0000019A F4                      			hlt							;wait for interrupt
   775 0000019B EBF6                    			jmp	.10						;repeat
   776 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   777 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   778 000001A1 FB                      .30			sti							;enable maskable interrupts
   779 000001A2 F4                      			hlt							;stop until reset, int, nmi
   780 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   781                                  ;
   782                                  ;	Display text message.
   783                                  ;
   784 000001A5 FC                      BootPrint		cld							;forward strings
   785 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   786 000001A7 84C0                    			test	al,al						;end of string?
   787 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   788 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   789 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   790 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   791 000001B1 C3                      BootReturn		ret							;return
   792                                  ;-----------------------------------------------------------------------------------------------------------------------
   793                                  ;
   794                                  ;	Constants
   795                                  ;
   796                                  ;-----------------------------------------------------------------------------------------------------------------------
   797                                  			align	2
   798 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   799 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   799 000001BD 4F4D               
   800 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   800 000001C8 2E2E0D0A00         
   801 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   801 000001D6 7220               
   802 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   803 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   803 000001E4 7373696E6700       
   804                                  ;-----------------------------------------------------------------------------------------------------------------------
   805                                  ;
   806                                  ;	Work Areas
   807                                  ;
   808                                  ;-----------------------------------------------------------------------------------------------------------------------
   809                                  			align	2
   810 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   811 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   812 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   813 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   814 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   815                                  wwReadCountCommand	equ	$						;read count and command
   816 000001F4 00                      wbReadCount		db	0						;sectors to read
   817 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   818                                  wwDriveHead		equ	$						;drive, head (word)
   819 000001F6 00                      wbDrive			db	0						;drive
   820 000001F7 00                      wbHead			db	0						;head
   821                                  wwSectorTrack		equ	$						;sector, track (word)
   822 000001F8 00                      			db	0						;sector
   823 000001F9 00                      wbTrack			db	0						;track
   824 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   825 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   826                                  %endif
   827                                  %ifdef BUILDPREP
   828                                  ;-----------------------------------------------------------------------------------------------------------------------
   829                                  ;
   830                                  ;	Diskette Preparation Code
   831                                  ;
   832                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   833                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   834                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   835                                  ;
   836                                  ;-----------------------------------------------------------------------------------------------------------------------
   837                                  ;
   838                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   839                                  ;
   840 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   841 00000203 E89FFF                  			call	BootPrint					;display message
   842                                  ;
   843                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   844                                  ;
   845 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   846 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   847 0000020A 7504                    			jnz	.12						;continue if key pressed
   848 0000020C FB                      			sti							;enable interrupts
   849 0000020D F4                      			hlt							;wait for interrupt
   850 0000020E EBF6                    			jmp	.10						;repeat
   851 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   852 00000212 7407                    			je	.15						;yes, branch
   853 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   854 00000216 75EE                    			jne	.10						;no, repeat
   855 00000218 E9A900                  			jmp	.90						;yes, exit program
   856                                  ;
   857                                  ;	Display writing-sector message and patch the JMP instruction.
   858                                  ;
   859 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   860 0000021E E884FF                  			call	BootPrint					;display message
   861 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   862 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   863 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   864                                  ;
   865                                  ;	Try to read the boot sector.
   866                                  ;
   867 00000229 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   868 0000022C 51                      .20			push	cx						;save remaining tries
   869 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   870 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   871 00000233 B90100                  			mov	cx,1						;track zero, sector one
   872 00000236 B80102                  			mov	ax,0201h					;read one sector
   873 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   874 0000023B 59                      			pop	cx						;restore remaining retries
   875 0000023C 7307                    			jnc	.30						;skip ahead if successful
   876 0000023E E2EC                    			loop	.20						;try again
   877 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   878 00000243 EB2C                    			jmp	.50						;branch to error routine
   879                                  ;
   880                                  ;	Copy diskette parms from input buffer to output buffer.
   881                                  ;
   882 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   883 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   884 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   885 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   886 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   887 00000254 FC                      			cld							;forward string copies
   888 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   889                                  ;
   890                                  ;	Try to write boot sector to diskette.
   891                                  ;
   892 00000257 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   893 0000025A 51                      .40			push	cx						;save remaining tries
   894 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   895 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   896 00000261 B90100                  			mov	cx,1						;track zero, sector one
   897 00000264 B80103                  			mov	ax,0301h					;write one sector
   898 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   899 00000269 59                      			pop	cx						;restore remaining retries
   900 0000026A 7326                    			jnc	.80						;skip ahead if successful
   901 0000026C E2EC                    			loop	.40						;try again
   902 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   903                                  ;
   904                                  ;	Convert the error code to ASCII and display the error message.
   905                                  ;
   906 00000271 50                      .50			push	ax						;save error code
   907 00000272 88E0                    			mov	al,ah						;copy error code
   908 00000274 B400                    			mov	ah,0						;AX = error code
   909 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   910 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   911 0000027A 0D3030                  			or	ax,3030h					;add ASCII zone digits
   912 0000027D 80FC3A                  			cmp	ah,3Ah						;AH ASCII numeral?
   913 00000280 7203                    			jb	.60						;yes, continue
   914 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   915 00000285 3C3A                    .60			cmp	al,3Ah						;al ASCII numeral?
   916 00000287 7202                    			jb	.70						;yes, continue
   917 00000289 0407                    			add	al,7						;no, make ASCII
   918 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   919 0000028E E814FF                  			call	BootPrint					;write error message
   920 00000291 58                      			pop	ax						;restore error code
   921                                  ;
   922                                  ;	Display the completion message.
   923                                  ;
   924 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   925 00000295 88E0                    			mov	al,ah						;BIOS return code
   926 00000297 3C00                    			cmp	al,0						;success?
   927 00000299 7426                    			je	.85						;yes, continue
   928 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   929 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   930 000002A0 741F                    			je	.85						;yes, continue
   931 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   932 000002A5 3C02                    			cmp	al,2						;address mark not found?
   933 000002A7 7418                    			je	.85						;yes, continue
   934 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   935 000002AC 3C03                    			cmp	al,3						;protected disk?
   936 000002AE 7411                    			je	.85						;yes, continue
   937 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   938 000002B3 3C06                    			cmp	al,6						;diskette removed?
   939 000002B5 740A                    			je	.85						;yes, continue
   940 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   941 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   942 000002BC 7403                    			je	.85						;yes, continue
   943 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   944 000002C1 E8E1FE                  .85			call	BootPrint					;display result message
   945 000002C4 B8004C                  .90			mov	ax,4C00H					;terminate with zero result code
   946 000002C7 CD21                    			int	21h						;terminate DOS program
   947 000002C9 C3                      			ret							;return (should not execute)
   948                                  ;-----------------------------------------------------------------------------------------------------------------------
   949                                  ;
   950                                  ;	Diskette Preparation Messages
   951                                  ;
   952                                  ;-----------------------------------------------------------------------------------------------------------------------
   953 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   953 000002D3 5320426F6F742D4469-
   953 000002DC 736B65747465205072-
   953 000002E5 657061726174696F6E-
   953 000002EE 2050726F6772616D   
   954 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   954 000002FF 687420284329203230-
   954 00000308 31302D323031372044-
   954 00000311 61766964204A2E2057-
   954 0000031A 616C6C696E672E2041-
   954 00000323 6C6C20726967687473-
   954 0000032C 207265736572766564-
   954 00000335 2E                 
   955 00000336 0D0A                    			db	13,10
   956 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   956 00000341 6F6772616D206F7665-
   956 0000034A 727772697465732074-
   956 00000353 686520626F6F742073-
   956 0000035C 6563746F72206F6620-
   956 00000365 61206469736B657474-
   956 0000036E 652077697468207374-
   956 00000377 617274757020636F64-
   956 00000380 652074686174       
   957 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   957 0000038F 616420746865206F70-
   957 00000398 65726174696E672073-
   957 000003A1 797374656D20696E74-
   957 000003AA 6F206D656D6F727920-
   957 000003B3 7768656E2074686520-
   957 000003BC 636F6D707574657220-
   957 000003C5 697320726573746172-
   957 000003CE 7465642E           
   958 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   958 000003DB 6565642C20706C6163-
   958 000003E4 65206120666F726D61-
   958 000003ED 74746564206469736B-
   958 000003F6 6574746520696E746F-
   958 000003FF 20647269766520413A-
   958 00000408 20616E642070726573-
   958 00000411 732074686520456E74-
   958 0000041A 6572206B65792E     
   959 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   959 0000042A 20746869732070726F-
   959 00000433 6772616D2077697468-
   959 0000043C 6F7574207072657061-
   959 00000445 72696E672061206469-
   959 0000044E 736B657474652C2070-
   959 00000457 726573732074686520-
   959 00000460 457363617065206B65-
   959 00000469 792E               
   960 0000046B 0D0A00                  			db	13,10,0
   961 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   961 00000477 2074686520626F6F74-
   961 00000480 20736563746F722074-
   961 00000489 6F2074686520646973-
   961 00000492 6B65747465202E2E2E 
   962 0000049B 0D0A00                  			db	13,10,0
   963 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   963 000004A7 6F722D636F6465202E-
   963 000004B0 2E2077617320726574-
   963 000004B9 75726E65642066726F-
   963 000004C2 6D207468652042494F-
   963 000004CB 53207768696C652072-
   963 000004D4 656164696E67206672-
   963 000004DD 6F6D20746865206469-
   963 000004E6 736B2E             
   964 000004E9 0D0A00                  			db	13,10,0
   965 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   965 000004F5 6F722D636F6465202E-
   965 000004FE 2E2077617320726574-
   965 00000507 75726E65642066726F-
   965 00000510 6D207468652042494F-
   965 00000519 53207768696C652077-
   965 00000522 726974696E6720746F-
   965 0000052B 20746865206469736B-
   965 00000534 2E                 
   966 00000535 0D0A00                  			db	13,10,0
   967 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   967 00000541 742D736563746F7220-
   967 0000054A 776173207772697474-
   967 00000553 656E20746F20746865-
   967 0000055C 206469736B65747465-
   967 00000565 2E204265666F726520-
   967 0000056E 626F6F74696E672079-
   967 00000577 6F757220636F6D7075-
   967 00000580 7465722077697468   
   968 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   968 00000591 736B657474652C206D-
   968 0000059A 616B65207375726520-
   968 000005A3 746861742074686520-
   968 000005AC 66696C65204F532E43-
   968 000005B5 4F4D20697320636F70-
   968 000005BE 696564206F6E746F20-
   968 000005C7 746865206469736B65-
   968 000005D0 7474652E           
   969 000005D4 0D0A00                  			db	13,10,0
   970 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   970 000005E0 76616C696420446973-
   970 000005E9 6B20506172616D6574-
   970 000005F2 6572               
   971 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   971 000005FD 20616E20696E746572-
   971 00000606 6E616C206572726F72-
   971 0000060F 206361757365642062-
   971 00000618 7920616E20696E7661-
   971 00000621 6C69642076616C7565-
   971 0000062A 206265696E67207061-
   971 00000633 7373656420746F2061-
   971 0000063C 2073797374656D     
   972 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   972 0000064C 6E2E20546865204F53-
   972 00000655 424F4F542E434F4D20-
   972 0000065E 66696C65206D617920-
   972 00000667 626520636F72727570-
   972 00000670 742E20436F7079206F-
   972 00000679 7220646F776E6C6F61-
   972 00000682 64207468652066696C-
   972 0000068B 6520616761696E     
   973 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
   973 0000069B 72792E             
   974 0000069E 0D0A00                  			db	13,10,0
   975 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   975 000006AA 6472657373204D6172-
   975 000006B3 6B204E6F7420466F75-
   975 000006BC 6E64               
   976 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   976 000006C7 726F7220696E646963-
   976 000006D0 617465732061207068-
   976 000006D9 79736963616C207072-
   976 000006E2 6F626C656D20776974-
   976 000006EB 682074686520666C6F-
   976 000006F4 707079206469736B65-
   976 000006FD 7474652E20506C6561-
   976 00000706 7365207265747279   
   977 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
   977 00000717 6E6F74686572206469-
   977 00000720 736B657474652E     
   978 00000727 0D0A00                  			db	13,10,0
   979 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   979 00000733 6F7465637465642044-
   979 0000073C 69736B             
   980 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   980 00000748 726F72206973207573-
   980 00000751 75616C6C7920636175-
   980 0000075A 736564206279206174-
   980 00000763 74656D7074696E6720-
   980 0000076C 746F20777269746520-
   980 00000775 746F20612077726974-
   980 0000077E 652D70726F74656374-
   980 00000787 6564206469736B2E   
   981 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   981 00000798 686520277772697465-
   981 000007A1 2D70726F7465637427-
   981 000007AA 2073657474696E6720-
   981 000007B3 6F6E20746865206469-
   981 000007BC 736B206F7220726574-
   981 000007C5 7279207573696E6720-
   981 000007CE 7573696E6720616E6F-
   981 000007D7 74686572206469736B-
   981 000007E0 2E                 
   982 000007E1 0D0A00                  			db	13,10,0
   983 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   983 000007ED 736B65747465205265-
   983 000007F6 6D6F766564         
   984 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   984 00000804 726F72206D61792069-
   984 0000080D 6E6469636174652074-
   984 00000816 686174207468652066-
   984 0000081F 6C6F70707920646973-
   984 00000828 6B6574746520686173-
   984 00000831 206265656E2072656D-
   984 0000083A 6F7665642066726F6D-
   984 00000843 20746865           
   985 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   985 00000850 652064726976652E20-
   985 00000859 4F6E20736F6D652073-
   985 00000862 797374656D732C2074-
   985 0000086B 68697320636F646520-
   985 00000874 6D617920616C736F20-
   985 0000087D 6F6363757220696620-
   985 00000886 746865206469736B65-
   985 0000088F 747465206973       
   986 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   986 0000089E 70726F746563746564-
   986 000008A7 2E2720506C65617365-
   986 000008B0 207665726966792074-
   986 000008B9 686174207468652064-
   986 000008C2 69736B657474652069-
   986 000008CB 73206E6F7420777269-
   986 000008D4 74652D70726F746563-
   986 000008DD 74656420616E64     
   987 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
   987 000008ED 65726C7920696E7365-
   987 000008F6 7274656420696E2074-
   987 000008FF 6865206469736B6574-
   987 00000908 74652064726976652E 
   988 00000911 0D0A00                  			db	13,10,0
   989 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   989 0000091D 6976652054696D6564-
   989 00000926 204F7574           
   990 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   990 00000933 726F7220757375616C-
   990 0000093C 6C7920696E64696361-
   990 00000945 746573207468617420-
   990 0000094E 6E6F206469736B6574-
   990 00000957 746520697320696E20-
   990 00000960 746865206469736B65-
   990 00000969 747465206472697665-
   990 00000972 2E20506C65617365   
   991 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   991 00000983 726520746861742074-
   991 0000098C 6865206469736B6574-
   991 00000995 74652069732070726F-
   991 0000099E 7065726C7920736561-
   991 000009A7 74656420696E207468-
   991 000009B0 652064726976652061-
   991 000009B9 6E642072657472792E 
   992 000009C2 0D0A00                  			db	13,10,0
   993 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   993 000009CE 6B6E6F776E20457272-
   993 000009D7 6F72               
   994 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   994 000009E2 6F722D636F64652072-
   994 000009EB 657475726E65642062-
   994 000009F4 79207468652042494F-
   994 000009FD 53206973206E6F7420-
   994 00000A06 61207265636F676E69-
   994 00000A0F 7A6564206572726F72-
   994 00000A18 2E20506C6561736520-
   994 00000A21 636F6E73756C74     
   995 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
   995 00000A31 6D7075746572277320-
   995 00000A3A 746563686E6963616C-
   995 00000A43 207265666572656E63-
   995 00000A4C 6520666F7220612064-
   995 00000A55 65736372697074696F-
   995 00000A5E 6E206F662074686973-
   995 00000A67 206572726F7220636F-
   995 00000A70 64652E             
   996 00000A73 0D0A00                  			db	13,10,0
   997                                  wcPrepInBuf		equ	$
   998                                  %endif
   999                                  %ifdef BUILDDISK
  1000                                  ;-----------------------------------------------------------------------------------------------------------------------
  1001                                  ;
  1002                                  ;	File Allocation Tables
  1003                                  ;
  1004                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1005                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1006                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1007                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1008                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1009                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1010                                  ;	the last cluster in the chain.
  1011                                  ;
  1012                                  ;	Every three bytes encode two FAT entries as follows:
  1013                                  ;
  1014                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1015                                  ;
  1016                                  ;-----------------------------------------------------------------------------------------------------------------------
  1017                                  ;-----------------------------------------------------------------------------------------------------------------------
  1018                                  ;
  1019                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1020                                  ;
  1021                                  ;-----------------------------------------------------------------------------------------------------------------------
  1022                                  section			fat1							;first copy of FAT
  1023                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1024                                  			db	005h,060h,000h,	007h,080h,000h
  1025                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1026                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1027                                  			db	011h,020h,001h,	013h,040h,001h
  1028                                  			db	015h,060h,001h,	017h,080h,001h
  1029                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1030                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1031                                  			db	021h,020h,002h,	023h,040h,002h
  1032                                  			db	025h,060h,002h,	027h,080h,002h
  1033                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1034                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1035                                  ;-----------------------------------------------------------------------------------------------------------------------
  1036                                  ;
  1037                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1038                                  ;
  1039                                  ;-----------------------------------------------------------------------------------------------------------------------
  1040                                  section			fat2							;second copy of FAT
  1041                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1042                                  			db	005h,060h,000h,	007h,080h,000h
  1043                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1044                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1045                                  			db	011h,020h,001h,	013h,040h,001h
  1046                                  			db	015h,060h,001h,	017h,080h,001h
  1047                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1048                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1049                                  			db	021h,020h,002h,	023h,040h,002h
  1050                                  			db	025h,060h,002h,	027h,080h,002h
  1051                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1052                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1053                                  ;-----------------------------------------------------------------------------------------------------------------------
  1054                                  ;
  1055                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1056                                  ;
  1057                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1058                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1059                                  ;	copy.
  1060                                  ;
  1061                                  ;-----------------------------------------------------------------------------------------------------------------------
  1062                                  section			dir							;diskette directory
  1063                                  			db	"OS      COM"					;file name (must contain spaces)
  1064                                  			db	20h						;attribute (archive bit set)
  1065                                  			times	10 db 0;					;unused
  1066                                  			dw	0h						;time
  1067                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1068                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1069                                  			dw	2						;first cluster
  1070                                  			dd	5200h						;file size
  1071                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1072                                  %endif
  1073                                  %ifdef BUILDCOM
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;
  1076                                  ;	OS.COM
  1077                                  ;
  1078                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1079                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1080                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1081                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1082                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1083                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1084                                  ;
  1085                                  ;	Our loader addressability is set up according to the following diagram.
  1086                                  ;
  1087                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1088                                  ;				|  Boot Sector & Loader Stack Area		|
  1089                                  ;				|						|
  1090                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1091                                  ;
  1092                                  ;
  1093                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1094                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1095                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1096                                  ;				|  Loader Code					|
  1097                                  ;				|						|
  1098                                  ;			009300	+-----------------------------------------------+ CS:0200
  1099                                  ;
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  ;-----------------------------------------------------------------------------------------------------------------------
  1102                                  ;
  1103                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1104                                  ;
  1105                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1106                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1107                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1108                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1109                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1110                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1111                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1112                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1113                                  ;	registers.
  1114                                  ;
  1115                                  ;-----------------------------------------------------------------------------------------------------------------------
  1116                                  			cpu	8086						;assume minimal CPU
  1117                                  section			loader	vstart=100h					;use .COM compatible addressing
  1118                                  			bits	16						;this is 16-bit code
  1119                                  Loader			push	cs						;use the code segment
  1120                                  			pop	ds						;...as our data segment
  1121                                  			push	cs						;use the code segment
  1122                                  			pop	es						;...as our extra segment
  1123                                  ;
  1124                                  ;	Write a message to the console so we know we have our addressability established.
  1125                                  ;
  1126                                  			mov	si,czStartingMsg				;starting message
  1127                                  			call	PutTTYString					;display loader message
  1128                                  ;
  1129                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1130                                  ;
  1131                                  			call	GetCPUType					;AL = cpu type
  1132                                  			mov	si,czCPUErrorMsg				;loader error message
  1133                                  			cmp	al,3						;80386+?
  1134                                  			jb	LoaderExit					;no, exit with error message
  1135                                  			cpu	386						;allow 80386 instructions
  1136                                  			mov	si,czCPUOKMsg					;cpu ok message
  1137                                  			call	PutTTYString					;display message
  1138                                  ;
  1139                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1140                                  ;
  1141                                  			mov	si,300h						;GDT offset
  1142                                  			mov	ax,cs						;AX:SI = gdt source
  1143                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1144                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1145                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1146                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1147                                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1148                                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1149                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1150                                  			call	PutTTYString					;display message
  1151                                  ;
  1152                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1153                                  ;
  1154                                  			push	EKRNSEG						;use kernel segment ...
  1155                                  			pop	es						;... as target segment
  1156                                  			xor	di,di						;ES:DI = target address
  1157                                  			mov	si,300h						;DS:SI = source address
  1158                                  			mov	cx,5000h					;CX = kernel size
  1159                                  			cld							;forward strings
  1160                                  			rep	movsb						;copy kernel image
  1161                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1162                                  			call	PutTTYString					;display message
  1163                                  ;
  1164                                  ;	Switch to protected mode.
  1165                                  ;
  1166                                  			xor	si,si						;ES:SI = gdt addr
  1167                                  			mov	ss,si						;protected mode ss
  1168                                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1169                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1170                                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1171                                  			mov	dx,001Fh					;outer delay loop count
  1172                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1173                                  			loop	$						;wait out pending interrupts
  1174                                  			dec	dx						;restore outer loop count
  1175                                  			jnz	.10						;continue outer loop
  1176                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1177                                  ;
  1178                                  ;	Enable hardware and maskable interrupts
  1179                                  ;
  1180                                  			xor	al,al						;enable all registers code
  1181                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1182                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1183                                  			sti							;enable maskable interrupts
  1184                                  ;
  1185                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1186                                  ;
  1187                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1188                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1189                                  			jmp	0058h:0						;jump to task state segment selector
  1190                                  ;-----------------------------------------------------------------------------------------------------------------------
  1191                                  ;
  1192                                  ;	Routine:	LoaderExit
  1193                                  ;
  1194                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1195                                  ;
  1196                                  ;	In:		DS:SI	string address
  1197                                  ;
  1198                                  ;-----------------------------------------------------------------------------------------------------------------------
  1199                                  LoaderExit		call	PutTTYString					;display error message
  1200                                  ;
  1201                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1202                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1203                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1204                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1205                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1206                                  ;
  1207                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1208                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1209                                  			jnz	.40						;exit if key pressed
  1210                                  			sti							;enable maskable interrupts
  1211                                  			hlt							;wait for interrupt
  1212                                  			jmp	.30						;repeat until keypress
  1213                                  ;
  1214                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1215                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1216                                  ;	HLT until the system resets.
  1217                                  ;
  1218                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1219                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1220                                  .50			sti							;enable maskable interrupts
  1221                                  			hlt							;stop until reset, int, nmi
  1222                                  			jmp	.50						;loop until restart kicks in
  1223                                  ;-----------------------------------------------------------------------------------------------------------------------
  1224                                  ;
  1225                                  ;	Routine:	GetCPUType
  1226                                  ;
  1227                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1228                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1229                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1230                                  ;
  1231                                  ;	Output:		AX	0 = 808x, v20, etc.
  1232                                  ;				1 = 80186
  1233                                  ;				2 = 80286
  1234                                  ;				3 = 80386
  1235                                  ;
  1236                                  ;-----------------------------------------------------------------------------------------------------------------------
  1237                                  GetCPUType		mov	al,1						;AL = 1
  1238                                  			mov	cl,32						;shift count
  1239                                  			shr	al,cl						;try a 32-bit shift
  1240                                  			or	al,al						;did the shift happen?
  1241                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1242                                  			cpu	186
  1243                                  			push	sp						;save stack pointer
  1244                                  			pop	cx						;...into cx
  1245                                  			cmp	cx,sp						;did sp decrement before push?
  1246                                  			jne	.10						;yes, cpu is 80186
  1247                                  			cpu	286
  1248                                  			inc	ax						;AX = 2
  1249                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1250                                  			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1251                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1252                                  			jz	.10						;yes, cpu is 80286
  1253                                  			inc	ax						;AX = 3
  1254                                  .10			ret							;return
  1255                                  ;-----------------------------------------------------------------------------------------------------------------------
  1256                                  ;
  1257                                  ;	Routine:	PutTTYString
  1258                                  ;
  1259                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1260                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1261                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1262                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1263                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1264                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1265                                  ;			registers and flags unless used to indicate return status.
  1266                                  ;
  1267                                  ;	In:		DS:SI	address of string
  1268                                  ;
  1269                                  ;-----------------------------------------------------------------------------------------------------------------------
  1270                                  PutTTYString		cld							;forward strings
  1271                                  			lodsb							;load next byte at DS:SI in AL
  1272                                  			test	al,al						;end of string?
  1273                                  			jz	.10						;... yes, exit our loop
  1274                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1275                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1276                                  			jmp	PutTTYString					;repeat until done
  1277                                  .10			ret							;return
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279                                  ;
  1280                                  ;	Loader Data
  1281                                  ;
  1282                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1283                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1284                                  ;
  1285                                  ;-----------------------------------------------------------------------------------------------------------------------
  1286                                  			align	2
  1287                                  cwLoaderTSS		dw	0068h						;TSS selector
  1288                                  cwLoaderLDT		dw	0060h						;LDT selector
  1289                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1290                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1291                                  czCPUErrorMsg		db	"The operating system requires an i386 "
  1292                                  			db	"or later processor.",13,10,
  1293                                  			db	"Please press any key to restart the "
  1294                                  			db	"computer.",13,10,0
  1295                                  czCPUOKMsg		db	"CPU ok",13,10,0
  1296                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1297                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1298                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1299                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1300                                  			db	055h,0AAh					;end of sector signature
  1301                                  ;-----------------------------------------------------------------------------------------------------------------------
  1302                                  ;
  1303                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1304                                  ;
  1305                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1306                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1307                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1308                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1309                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1310                                  ;
  1311                                  ;-----------------------------------------------------------------------------------------------------------------------
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  ;
  1314                                  ;	Tables
  1315                                  ;
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                  ;-----------------------------------------------------------------------------------------------------------------------
  1318                                  ;
  1319                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1320                                  ;
  1321                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1322                                  ;	first descriptor must be all nulls.
  1323                                  ;
  1324                                  ;	6   5         4         3         2         1         0
  1325                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1326                                  ;	----------------------------------------------------------------
  1327                                  ;	h......hffffmmmma......ab......................bn..............n
  1328                                  ;	00000000			all areas have base addresses below 2^24
  1329                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1330                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1331                                  ;	            1001		present, ring-0, selector
  1332                                  ;
  1333                                  ;	h...h	hi-order base address (bits 24-31)
  1334                                  ;	ffff	flags
  1335                                  ;	mmmm	hi-order limit (bits 16-19)
  1336                                  ;	a...a	access
  1337                                  ;	b...b	lo-order base address (bits 0-23)
  1338                                  ;	n...n	lo-order limit (bits 0-15)
  1339                                  ;
  1340                                  ;-----------------------------------------------------------------------------------------------------------------------
  1341                                  section			gdt							;global descriptor table
  1342                                  			dq	0000000000000000h				;00 required null selector
  1343                                  			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1344                                  			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1345                                  			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1346                                  			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1347                                  			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1348                                  			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1349                                  			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1350                                  			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1351                                  			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1352                                  			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1353                                  			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1354                                  			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1355                                  			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1356                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  ;
  1359                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1360                                  ;
  1361                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1362                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1363                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1364                                  ;
  1365                                  ;	6   5         4         3         2         1         0
  1366                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1367                                  ;	----------------------------------------------------------------
  1368                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1369                                  ;
  1370                                  ;	h...h	high-order offset (bits 16-31)
  1371                                  ;	P	present (0=unused interrupt)
  1372                                  ;	zz	descriptor privilege level
  1373                                  ;	S	storage segment (must be zero for IDT)
  1374                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1375                                  ;	S...S	handling code selector in GDT
  1376                                  ;	l...l	lo-order offset (bits 0-15)
  1377                                  ;
  1378                                  ;-----------------------------------------------------------------------------------------------------------------------
  1379                                  section			idt							;interrupt descriptor table
  1380                                  			mint	dividebyzero					;00 divide by zero
  1381                                  			mint	singlestep					;01 single step
  1382                                  			mint	nmi						;02 non-maskable
  1383                                  			mint	break						;03 break
  1384                                  			mint	into						;04 into
  1385                                  			mint	bounds						;05 bounds
  1386                                  			mint	badopcode					;06 bad op code
  1387                                  			mint	nocoproc					;07 no coprocessor
  1388                                  			mint	doublefault					;08 double-fault
  1389                                  			mint	operand						;09 operand
  1390                                  			mint	badtss						;0A bad TSS
  1391                                  			mint	notpresent					;0B not-present
  1392                                  			mint	stacklimit					;0C stack limit
  1393                                  			mint	protection					;0D general protection fault
  1394                                  			mint	int14						;0E (reserved)
  1395                                  			mint	int15						;0F (reserved)
  1396                                  			mint	coproccalc					;10 (reserved)
  1397                                  			mint	int17						;11 (reserved)
  1398                                  			mint	int18						;12 (reserved)
  1399                                  			mint	int19						;13 (reserved)
  1400                                  			mint	int20						;14 (reserved)
  1401                                  			mint	int21						;15 (reserved)
  1402                                  			mint	int22						;16 (reserved)
  1403                                  			mint	int23						;17 (reserved)
  1404                                  			mint	int24						;18 (reserved)
  1405                                  			mint	int25						;19 (reserved)
  1406                                  			mint	int26						;1A (reserved)
  1407                                  			mint	int27						;1B (reserved)
  1408                                  			mint	int28						;1C (reserved)
  1409                                  			mint	int29						;1D (reserved)
  1410                                  			mint	int30						;1E (reserved)
  1411                                  			mint	int31						;1F (reserved)
  1412                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1413                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1414                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1415                                  			mtrap	com2						;23 IRQ3 com2
  1416                                  			mtrap	com1						;24 IRQ4 com1
  1417                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1418                                  			mtrap	diskette					;26 IRQ6 diskette
  1419                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1420                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1421                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1422                                  			mtrap	irq10						;2A IRQA (reserved)
  1423                                  			mtrap	irq11						;2B IRQB (reserved)
  1424                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1425                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1426                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1427                                  			mtrap	irq15						;2F IRQF (reserved)
  1428                                  			mtrap	svc						;30 OS services
  1429                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1430                                  ;-----------------------------------------------------------------------------------------------------------------------
  1431                                  ;
  1432                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1433                                  ;
  1434                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1435                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1436                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1437                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1438                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1439                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1440                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1441                                  ;
  1442                                  ;-----------------------------------------------------------------------------------------------------------------------
  1443                                  section			kernel	vstart=0h					;data offsets relative to 0
  1444                                  			cpu	386						;allow 80386 instructions
  1445                                  			bits	32						;this is 32-bit code
  1446                                  ;-----------------------------------------------------------------------------------------------------------------------
  1447                                  ;
  1448                                  ;	CPU Interrupt Handlers
  1449                                  ;
  1450                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1451                                  ;
  1452                                  ;-----------------------------------------------------------------------------------------------------------------------
  1453                                  			menter	dividebyzero					;divide by zero
  1454                                  			push	0						;
  1455                                  			jmp	intcpu						;
  1456                                  			menter	singlestep					;single step
  1457                                  			push	1						;
  1458                                  			jmp	intcpu						;
  1459                                  			menter	nmi						;non-maskable
  1460                                  			push	2						;
  1461                                  			jmp	intcpu						;
  1462                                  			menter	break						;break
  1463                                  			push	3						;
  1464                                  			jmp	intcpu						;
  1465                                  			menter	into						;into
  1466                                  			push	4						;
  1467                                  			jmp	intcpu						;
  1468                                  			menter	bounds						;bounds
  1469                                  			push	5						;
  1470                                  			jmp	intcpu						;
  1471                                  			menter	badopcode					;bad opcode interrupt
  1472                                  			push	6						;
  1473                                  			jmp	intcpu						;
  1474                                  			menter	nocoproc					;no coprocessor interrupt
  1475                                  			push	7						;
  1476                                  			jmp	intcpu						;
  1477                                  			menter	doublefault					;doublefault interrupt
  1478                                  			push	8						;
  1479                                  			jmp	intcpu						;
  1480                                  			menter	operand						;operand interrupt
  1481                                  			push	9						;
  1482                                  			jmp	intcpu						;
  1483                                  			menter	badtss						;bad tss interrupt
  1484                                  			push	10						;
  1485                                  			jmp	intcpu						;
  1486                                  			menter	notpresent					;not present interrupt
  1487                                  			push	11						;
  1488                                  			jmp	intcpu						;
  1489                                  			menter	stacklimit					;stack limit interrupt
  1490                                  			push	12						;
  1491                                  			jmp	intcpu						;
  1492                                  			menter	protection					;protection fault interrupt
  1493                                  			push	13						;
  1494                                  			jmp	intcpu						;
  1495                                  			menter	int14						;(reserved)
  1496                                  			push	14						;
  1497                                  			jmp	intcpu						;
  1498                                  			menter	int15						;(reserved)
  1499                                  			push	15						;
  1500                                  			jmp	intcpu						;
  1501                                  			menter	coproccalc					;coprocessor calculation
  1502                                  			push	16						;
  1503                                  			jmp	intcpu						;
  1504                                  			menter	int17						;(reserved)
  1505                                  			push	17						;
  1506                                  			jmp	intcpu						;
  1507                                  			menter	int18						;(reserved)
  1508                                  			push	18						;
  1509                                  			jmp	intcpu						;
  1510                                  			menter	int19						;(reserved)
  1511                                  			push	19						;
  1512                                  			jmp	intcpu						;
  1513                                  			menter	int20						;(reserved)
  1514                                  			push	20						;
  1515                                  			jmp	intcpu						;
  1516                                  			menter	int21						;(reserved)
  1517                                  			push	21						;
  1518                                  			jmp	intcpu						;
  1519                                  			menter	int22						;(reserved)
  1520                                  			push	22						;
  1521                                  			jmp	intcpu						;
  1522                                  			menter	int23						;(reserved)
  1523                                  			push	23						;
  1524                                  			jmp	intcpu						;
  1525                                  			menter	int24						;(reserved)
  1526                                  			push	24						;
  1527                                  			jmp	intcpu						;
  1528                                  			menter	int25						;(reserved)
  1529                                  			push	25						;
  1530                                  			jmp	intcpu						;
  1531                                  			menter	int26						;(reserved)
  1532                                  			push	26						;
  1533                                  			jmp	intcpu						;
  1534                                  			menter	int27						;(reserved)
  1535                                  			push	27						;
  1536                                  			jmp	intcpu						;
  1537                                  			menter	int28						;(reserved)
  1538                                  			push	28						;
  1539                                  			jmp	intcpu						;
  1540                                  			menter	int29						;(reserved)
  1541                                  			push	29						;
  1542                                  			jmp	intcpu						;
  1543                                  			menter	int30						;(reserved)
  1544                                  			push	30						;
  1545                                  			jmp	intcpu						;
  1546                                  			menter	int31						;(reserved)
  1547                                  			push	31						;
  1548                                  intcpu			pop	eax						;
  1549                                  			iretd							;return
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                  ;
  1552                                  ;	Hardware Device Interupts
  1553                                  ;
  1554                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1555                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1556                                  ;	(BX=2028h).
  1557                                  ;
  1558                                  ;-----------------------------------------------------------------------------------------------------------------------
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;	IRQ0	Clock Tick Interrupt
  1562                                  ;
  1563                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1564                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1565                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1566                                  ;
  1567                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1568                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1569                                  ;
  1570                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1571                                  ;	zero, the floppy disk motors are turned off.
  1572                                  ;
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                  			menter	clocktick					;clock tick interrupt
  1575                                  			push	eax						;save modified regs
  1576                                  			push	edx						;
  1577                                  			push	ds						;
  1578                                  			push	ESELDAT						;load OS data selector ...
  1579                                  			pop	ds						;... into data segment register
  1580                                  			mov	eax,[wfClockTicks]				;eax = clock ticks
  1581                                  			inc	eax						;increment clock ticks
  1582                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1583                                  			jb	irq0.10						;no, skip ahead
  1584                                  			inc	byte [wbClockDays]				;increment clock days
  1585                                  			xor	eax,eax						;reset clock ticks
  1586                                  irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1587                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1588                                  			je	irq0.20						;yes, skip ahead
  1589                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1590                                  			jnz	irq0.20						;skip ahead if non-zero
  1591                                  			sti							;enable maskable interrupts
  1592                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1593                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1594                                  			in	al,dx						;FDC main status byte
  1595                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1596                                  			jnz	irq0.15						;wait while busy
  1597                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1598                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1599                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1600                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1601                                  			out	dx,al						;turn motor off
  1602                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1603                                  			pop	ds						;restore modified regs
  1604                                  			pop	edx						;
  1605                                  			pop	eax						;
  1606                                  			iretd							;return
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                  ;
  1609                                  ;	IRQ1	Keyboard Interrupt
  1610                                  ;
  1611                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1612                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1613                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1614                                  ;	ALL modified registers upon return.
  1615                                  ;
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  			menter	keyboard					;keyboard interrrupt
  1618                                  			push	eax						;save non-volatile regs
  1619                                  			push	ebx						;
  1620                                  			push	ecx						;
  1621                                  			push	esi						;
  1622                                  			push	ds						;
  1623                                  			push	ESELDAT						;load OS data selector ...
  1624                                  			pop	ds						;... into data segment register
  1625                                  			xor	al,al						;zero
  1626                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1627                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1628                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1629                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1630                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1631                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1632                                  			mov	al,' '						;space
  1633                                  			mov	[wbConsoleChar],al				;set character to space
  1634                                  			mov	al,EKEYTIMEOUT					;controller timeout flag
  1635                                  			not	al						;controller timeout mask
  1636                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1637                                  			mov	bl,[wbConsoleShift]				;shift flags
  1638                                  			mov	bh,[wbConsoleLock]				;lock flags
  1639                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1640                                  			jz	irq1.140					;yes, skip ahead
  1641                                  			in	al,EKEYPORTDATA					;read scan code 0
  1642                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1643                                  			mov	ah,al						;copy scan code 0
  1644                                  			mov	al,EKEYSHIFTLEFT				;left shift flag
  1645                                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1646                                  			je	irq1.30						;yes, set flag
  1647                                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1648                                  			je	irq1.40						;yes, reset flag
  1649                                  			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1650                                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1651                                  			je	irq1.30						;yes, set flag
  1652                                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1653                                  			je	irq1.40						;yes, reset flag
  1654                                  			mov	al,EKEYCTRLLEFT					;left control flag
  1655                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1656                                  			je	irq1.30						;yes, set flag
  1657                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1658                                  			je	irq1.40						;yes, reset flag
  1659                                  			mov	al,EKEYALTLEFT					;left alt flag
  1660                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1661                                  			je	irq1.30						;yes, set flag
  1662                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1663                                  			je	irq1.40						;yes, reset flag
  1664                                  			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1665                                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1666                                  			je	irq1.50						;yes, toggle lamps and flags
  1667                                  			mov	al,EKEYLOCKNUM					;num-lock flag
  1668                                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1669                                  			je	irq1.50						;yes, toggle lamps and flags
  1670                                  			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1671                                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1672                                  			je	irq1.50						;yes, toggle lamps and flags
  1673                                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1674                                  			jne	irq1.70 					;no, skip ahead
  1675                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1676                                  			jz	irq1.140					;yes, skip ahead
  1677                                  			in	al,EKEYPORTDATA					;read scan code 1
  1678                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1679                                  			mov	ah,al						;copy scan code 1
  1680                                  			mov	al,EKEYCTRLRIGHT				;right control flag
  1681                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1682                                  			je	irq1.30						;yes, set flag
  1683                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1684                                  			je	irq1.40						;yes, reset flag
  1685                                  			mov	al,EKEYALTRIGHT					;right alt flag
  1686                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1687                                  			je	irq1.30						;yes, set flag
  1688                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1689                                  			je	irq1.40						;yes, reset flag
  1690                                  			cmp	ah,EKEYSLASH					;slash down code?
  1691                                  			je	irq1.80						;yes, skip ahead
  1692                                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1693                                  			je	irq1.80						;yes, skip ahead
  1694                                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1695                                  			je	irq1.10						;yes, continue
  1696                                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1697                                  			jne	irq1.20						;no, skip ahead
  1698                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1699                                  			jz	irq1.140					;yes, skip ahead
  1700                                  			in	al,EKEYPORTDATA					;read scan code 2
  1701                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1702                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1703                                  			jz	irq1.140					;yes, skip ahead
  1704                                  			in	al,EKEYPORTDATA					;read scan code 3
  1705                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1706                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1707                                  irq1.30			or	bl,al						;set shift flag
  1708                                  			jmp	irq1.60						;skip ahead
  1709                                  irq1.40			not	al						;convert flag to mask
  1710                                  			and	bl,al						;reset shift flag
  1711                                  			jmp	irq1.60						;skip ahead
  1712                                  irq1.50			xor	bh,al						;toggle lock flag
  1713                                  			call	SetKeyboardLamps				;update keyboard lamps
  1714                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1715                                  			mov	[wbConsoleLock],bh				;save lock flags
  1716                                  			call	PutConsoleOIAShift				;update OIA indicators
  1717                                  			jmp	irq1.150					;finish keyboard handling
  1718                                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1719                                  			jne	irq1.80						;no continue
  1720                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1721                                  			jz	irq1.140					;yes, skip ahead
  1722                                  			in	al,EKEYPORTDATA					;read scan code 1
  1723                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1724                                  			mov	ah,al						;copy scan code 1
  1725                                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1726                                  			jne	irq1.150					;no, finish keyboard handling
  1727                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1728                                  			jz	irq1.140					;yes, skip ahead
  1729                                  			in	al,EKEYPORTDATA					;read scan code 2
  1730                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1731                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1732                                  			jz	irq1.140					;yes, skip ahead
  1733                                  			in	al,EKEYPORTDATA					;read scan code 3
  1734                                  			mov	[wbConsoleScan3],al				;save scan code 3
  1735                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1736                                  			jz	irq1.140					;yes, skip ahead
  1737                                  			in	al,EKEYPORTDATA					;read scan code 4
  1738                                  			mov	[wbConsoleScan4],al				;save scan code 4
  1739                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1740                                  			jz	irq1.140					;yes, skip ahead
  1741                                  			in	al,EKEYPORTDATA					;read scan code 5
  1742                                  			mov	[wbConsoleScan5],al				;save scan code 5
  1743                                  			jmp	irq1.150					;continue
  1744                                  irq1.80			xor	al,al						;assume no ASCII translation
  1745                                  			test	ah,EKEYUP					;release code?
  1746                                  			jnz	irq1.110					;yes, skip ahead
  1747                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  1748                                  			test	bl,EKEYSHIFT					;either shift key down?
  1749                                  			jz	irq1.90						;no, skip ahead
  1750                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  1751                                  irq1.90			movzx	ecx,ah						;scan code offset
  1752                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  1753                                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1754                                  			jz	irq1.100					;no skip ahead
  1755                                  			mov	cl,al						;copy ASCII code
  1756                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1757                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1758                                  			jb	irq1.100					;yes, skip ahead
  1759                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1760                                  			ja	irq1.100					;yes, skip ahead
  1761                                  			xor	al,EASCIICASE					;switch case
  1762                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1763                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1764                                  			test	ah,EKEYUP					;release scan-code?
  1765                                  			jz	irq1.120					;no, skip ahead
  1766                                  			mov	edx,EMSGKEYUP					;key-up event
  1767                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  1768                                  			or	edx,eax						;msg id and codes
  1769                                  			xor	ecx,ecx						;null param
  1770                                  			push	eax						;save codes
  1771                                  			call	PutMessage					;put message to console
  1772                                  			pop	eax						;restore codes
  1773                                  			test	al,al						;ASCII translation?
  1774                                  			jz	irq1.130					;no, skip ahead
  1775                                  			mov	edx,EMSGKEYCHAR					;key-character event
  1776                                  			and	eax,0FFFFh					;clear high-order word
  1777                                  			or	edx,eax						;msg id and codes
  1778                                  			xor	ecx,ecx						;null param
  1779                                  			call	PutMessage					;put message to console
  1780                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  1781                                  irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1782                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  1783                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  1784                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1785                                  			pop	ds						;restore non-volatile regs
  1786                                  			pop	esi						;
  1787                                  			pop	ecx						;
  1788                                  			pop	ebx						;
  1789                                  			pop	eax						;
  1790                                  			iretd							;return
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;	Scan-Code to ASCII Translation Tables
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1795                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1796                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1797                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1798                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1799                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1800                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1801                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1802                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1803                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1804                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1805                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1806                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1807                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1808                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1809                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1810                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1811                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1812                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1813                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1814                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1815                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1816                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1817                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1818                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1819                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1820                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1821                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1822                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1823                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1824                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1825                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  			menter	iochannel					;secondary 8259A cascade
  1832                                  			push	eax						;
  1833                                  			jmp	hwint						;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                  			menter	com2						;serial port 2 interrupt
  1840                                  			push	eax						;
  1841                                  			jmp	hwint						;
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                  ;
  1844                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1845                                  ;
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  			menter	com1						;serial port 1 interrupt
  1848                                  			push	eax						;
  1849                                  			jmp	hwint						;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  			menter	lpt2						;parallel port 2 interrupt
  1856                                  			push	eax						;
  1857                                  			jmp	hwint						;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;	IRQ6	Diskette Hardware Interrupt
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  			menter	diskette					;floppy disk interrupt
  1864                                  			push	eax						;save non-volatile regs
  1865                                  			push	ds						;
  1866                                  			push	ESELDAT						;load OS data selector ...
  1867                                  			pop	ds						;... into DS register
  1868                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1869                                  			or	al,10000000b					;set IRQ flag
  1870                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  1871                                  			pop	ds						;restore non-volatile regs
  1872                                  			jmp	hwint						;end primary PIC interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  			menter	lpt1						;parallel port 1 interrupt
  1879                                  			push	eax						;
  1880                                  			jmp	hwint						;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                  			menter	rtclock						;real-time clock interrupt
  1887                                  			push	eax						;
  1888                                  			jmp	hwwint						;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  			menter	retrace						;CGA vertical retrace interrupt
  1895                                  			push	eax						;
  1896                                  			jmp	hwwint						;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  ;
  1899                                  ;	IRQ10	Reserved Hardware Interrupt
  1900                                  ;
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                  			menter	irq10						;reserved
  1903                                  			push	eax						;
  1904                                  			jmp	hwwint						;
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;	IRQ11	Reserved Hardware Interrupt
  1908                                  ;
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  			menter	irq11						;reserved
  1911                                  			push	eax						;
  1912                                  			jmp	hwwint						;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1919                                  			push	eax						;
  1920                                  			jmp	hwwint						;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1924                                  ;
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                  			menter	coprocessor					;coprocessor interrupt
  1927                                  			push	eax						;
  1928                                  			jmp	hwwint						;
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                  			menter	fixeddisk					;fixed disk interrupt
  1935                                  			push	eax						;
  1936                                  			jmp	hwwint						;
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;	IRQ15	Reserved Hardware Interrupt
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                  			menter	irq15						;reserved
  1943                                  			push	eax						;save modified regs
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;	Exit from hardware interrupt
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1950                                  			jmp	hwint90						;skip ahead
  1951                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1952                                  hwint90			pop	eax						;restore modified regs
  1953                                  			iretd							;return from interrupt
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;	INT 30h Operating System Software Service Interrupt
  1957                                  ;
  1958                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1959                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1960                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1961                                  ;	the entry address of the specific function from a table.
  1962                                  ;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  			menter	svc
  1965                                  			cmp	al,maxtsvc					;is our function out of range?
  1966                                  			jae	svc90						;yes, skip ahead
  1967                                  			movzx	eax,al						;function
  1968                                  			shl	eax,2						;offset into table
  1969                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  1970                                  svc90			iretd							;return from interrupt
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;	Service Request Table
  1974                                  ;
  1975                                  ;
  1976                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1980                                  			tsvce	GetConsoleString				;get string input
  1981                                  			tsvce	ClearConsoleScreen				;clear console screen
  1982                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1983                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                  ;
  1986                                  ;	Service Request Macros
  1987                                  ;
  1988                                  ;	These macros provide positional parameterization of service request calls.
  1989                                  ;
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  %macro			putConsoleString 1
  1992                                  			mov	edx,%1						;EDX = string address
  1993                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1994                                  			int	_svc						;invoke OS service
  1995                                  %endmacro
  1996                                  %macro			getConsoleString 4
  1997                                  			mov	edx,%1						;EDX = buffer address
  1998                                  			mov	ecx,%2						;ECX = max characters
  1999                                  			mov	bh,%3						;BH = echo indicator
  2000                                  			mov	bl,%4						;BL = terminator
  2001                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2002                                  			int	_svc						;invoke OS service
  2003                                  %endmacro
  2004                                  %macro			clearConsoleScreen 0
  2005                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2006                                  			int	_svc						;invoke OS service
  2007                                  %endmacro
  2008                                  %macro			placeCursor 0
  2009                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2010                                  			int	_svc						;invoke OS service
  2011                                  %endmacro
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                  ;
  2014                                  ;	Kernel Function Library
  2015                                  ;
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;-----------------------------------------------------------------------------------------------------------------------
  2018                                  ;
  2019                                  ;	Console Helper Routines
  2020                                  ;
  2021                                  ;	PutConsoleString
  2022                                  ;	GetConsoleString
  2023                                  ;	GetConsoleChar
  2024                                  ;	Yield
  2025                                  ;	PreviousConsoleColumn
  2026                                  ;	NextConsoleColumn
  2027                                  ;	FirstConsoleColumn
  2028                                  ;	NextConsoleRow
  2029                                  ;	PutConsoleChar
  2030                                  ;	PutConsoleOIAShift
  2031                                  ;	PutConsoleOIAChar
  2032                                  ;	PutConsoleHexByte
  2033                                  ;
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;	Routine:	PutConsoleString
  2038                                  ;
  2039                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2040                                  ;			console position as needed.
  2041                                  ;
  2042                                  ;	In:		EDX	source address
  2043                                  ;			DS	OS data selector
  2044                                  ;
  2045                                  ;-----------------------------------------------------------------------------------------------------------------------
  2046                                  PutConsoleString	push	esi						;save non-volatile regs
  2047                                  			mov	esi,edx						;source address
  2048                                  			cld							;forward strings
  2049                                  .10			lodsb							;ASCII character
  2050                                  			or	al,al						;end of string?
  2051                                  			jz	.40						;yes, skip ahead
  2052                                  			cmp	al,EASCIIRETURN					;carriage return?
  2053                                  			jne	.20						;no, skip ahead
  2054                                  			call	FirstConsoleColumn				;move to start of row
  2055                                  			jmp	.10						;next character
  2056                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2057                                  			jne	.30						;no, skip ahead
  2058                                  			call	NextConsoleRow					;move to next row
  2059                                  			jmp	.10						;next character
  2060                                  .30			call	PutConsoleChar					;output character to console
  2061                                  			call	NextConsoleColumn				;advance to next column
  2062                                  			jmp	.10						;next character
  2063                                  .40			pop	esi						;restore non-volatile regs
  2064                                  			ret							;return
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066                                  ;
  2067                                  ;	Routine:	GetConsoleString
  2068                                  ;
  2069                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2070                                  ;
  2071                                  ;	Input:		DS:EDX	target buffer address
  2072                                  ;			ECX	maximum number of characters to accept
  2073                                  ;			BH	echo to terminal
  2074                                  ;			BL	terminating character
  2075                                  ;
  2076                                  ;-----------------------------------------------------------------------------------------------------------------------
  2077                                  GetConsoleString	push	ecx						;save non-volatile regs
  2078                                  			push	esi						;
  2079                                  			push	edi						;
  2080                                  			push	es						;
  2081                                  			push	ds						;load data segment selector ...
  2082                                  			pop	es						;... into extra segment register
  2083                                  			mov	edi,edx						;edi = target buffer
  2084                                  			push	ecx						;save maximum characters
  2085                                  			xor	al,al						;zero register
  2086                                  			cld							;forward strings
  2087                                  			rep	stosb						;zero fill buffer
  2088                                  			pop	ecx						;maximum characters
  2089                                  			mov	edi,edx						;edi = target buffer
  2090                                  			mov	esi,edx						;esi = target buffer
  2091                                  .10			jecxz	.50						;exit if max-length is zero
  2092                                  .20			call	GetConsoleChar					;al = next input char
  2093                                  			cmp	al,bl						;is this the terminator?
  2094                                  			je	.50						;yes, exit
  2095                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2096                                  			jne	.30						;no, skip ahead
  2097                                  			cmp	esi,edi						;at start of buffer?
  2098                                  			je	.20						;yes, get next character
  2099                                  			dec	edi						;backup target pointer
  2100                                  			mov	byte [edi],0					;zero previous character
  2101                                  			inc	ecx						;increment remaining chars
  2102                                  			test	bh,1						;echo to console?
  2103                                  			jz	.20						;no, get next character
  2104                                  			call	PreviousConsoleColumn				;backup console position
  2105                                  			mov	al,EASCIISPACE					;ASCII space
  2106                                  			call	PutConsoleChar					;write space to console
  2107                                  			call	PlaceCursor					;position the cursor
  2108                                  			jmp	.20						;get next character
  2109                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2110                                  			jb	.20						;no, get another character
  2111                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2112                                  			ja	.20						;no, get another character
  2113                                  			stosb							;store character in buffer
  2114                                  			test	bh,1						;echo to console?
  2115                                  			jz	.40						;no, skip ahead
  2116                                  			call	PutConsoleChar					;write character to console
  2117                                  			call	NextConsoleColumn				;advance console position
  2118                                  			call	PlaceCursor					;position the cursor
  2119                                  .40			dec	ecx						;decrement remaining chars
  2120                                  			jmp	.10						;next
  2121                                  .50			xor	al,al						;null
  2122                                  			stosb							;terminate buffer
  2123                                  			pop	es						;restore non-volatile regs
  2124                                  			pop	edi						;
  2125                                  			pop	esi						;
  2126                                  			pop	ecx						;
  2127                                  			ret							;return
  2128                                  ;-----------------------------------------------------------------------------------------------------------------------
  2129                                  ;
  2130                                  ;	Routine:	GetConsoleChar
  2131                                  ;
  2132                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2133                                  ;
  2134                                  ;	Output:		AL	ASCII character code
  2135                                  ;			AH	keyboard scan code
  2136                                  ;
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2139                                  GetConsoleChar		call	GetMessage					;get the next message
  2140                                  			or	eax,eax						;do we have a message?
  2141                                  			jz	GetConsoleChar.10				;no, skip ahead
  2142                                  			push	eax						;save key codes
  2143                                  			and	eax,0FFFF0000h					;mask for message type
  2144                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2145                                  			pop	eax						;restore key codes
  2146                                  			jne	GetConsoleChar					;no, try again
  2147                                  			and	eax,0000ffffh					;mask for key codes
  2148                                  			ret							;return
  2149                                  ;-----------------------------------------------------------------------------------------------------------------------
  2150                                  ;
  2151                                  ;	Routine:	Yield
  2152                                  ;
  2153                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2154                                  ;
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156                                  Yield			sti							;enable maskagle interrupts
  2157                                  			hlt							;halt until external interrupt
  2158                                  			ret							;return
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  ;
  2161                                  ;	Routine:	PreviousConsoleColumn
  2162                                  ;
  2163                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2164                                  ;			the column is set to the last position in the row and the row is decremented.
  2165                                  ;
  2166                                  ;	Input:		DS	OS data selector
  2167                                  ;
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2170                                  			or	al,al						;start of row?
  2171                                  			jnz	.10						;no, skip ahead
  2172                                  			mov	ah,[wbConsoleRow]				;current row
  2173                                  			or	ah,ah						;top of screen?
  2174                                  			jz	.20						;yes, exit with no change
  2175                                  			dec	ah						;decrement row
  2176                                  			mov	[wbConsoleRow],ah				;save row
  2177                                  			mov	al,ECONCOLS					;set maximum column
  2178                                  .10			dec	al						;decrement column
  2179                                  			mov	[wbConsoleColumn],al				;save column
  2180                                  .20			ret							;return
  2181                                  ;-----------------------------------------------------------------------------------------------------------------------
  2182                                  ;
  2183                                  ;	Routine:	NextConsoleColumn
  2184                                  ;
  2185                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2186                                  ;			incremented if the end of the current row is reached.
  2187                                  ;
  2188                                  ;	In:		DS	OS data selector
  2189                                  ;
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2192                                  			inc	al						;increment column
  2193                                  			mov	[wbConsoleColumn],al				;save column
  2194                                  			cmp	al,ECONCOLS					;end of row?
  2195                                  			jb	.10						;no, skip ahead
  2196                                  			call	FirstConsoleColumn				;reset column to start of row
  2197                                  			call	NextConsoleRow					;line feed to next row
  2198                                  .10			ret							;return
  2199                                  ;-----------------------------------------------------------------------------------------------------------------------
  2200                                  ;
  2201                                  ;	Routine:	FirstConsoleColumn
  2202                                  ;
  2203                                  ;	Description:	This routine resets the console column to start of the row.
  2204                                  ;
  2205                                  ;	In:		DS	OS data selector
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  FirstConsoleColumn	xor	al,al						;zero column
  2209                                  			mov	[wbConsoleColumn],al				;save column
  2210                                  			ret							;return
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                  ;
  2213                                  ;	Routine:	NextConsoleRow
  2214                                  ;
  2215                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2216                                  ;
  2217                                  ;	In:		DS	OS data selector
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2221                                  			inc	al						;increment row
  2222                                  			mov	[wbConsoleRow],al				;save row
  2223                                  			cmp	al,ECONROWS					;end of screen?
  2224                                  			jb	.10						;no, skip ahead
  2225                                  			call	ScrollConsoleRow				;scroll up one row
  2226                                  			mov	al,[wbConsoleRow]				;row
  2227                                  			dec	al						;decrement row
  2228                                  			mov	[wbConsoleRow],al				;save row
  2229                                  .10			ret							;return
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;
  2232                                  ;	Routine:	PutConsoleChar
  2233                                  ;
  2234                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2235                                  ;
  2236                                  ;	In:		AL	ASCII character
  2237                                  ;			DS	OS data selector
  2238                                  ;
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2241                                  			push	es						;
  2242                                  			push	ESELCGA						;load CGA selector ...
  2243                                  			pop	es						;... into extra segment reg
  2244                                  			mov	cl,[wbConsoleColumn]				;column
  2245                                  			mov	ch,[wbConsoleRow]				;row
  2246                                  			call	SetConsoleChar					;put character at row, column
  2247                                  			pop	es						;restore non-volatile regs
  2248                                  			pop	ecx						;
  2249                                  			ret							;return
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                  ;
  2252                                  ;	Routine:	PutConsoleOIAShift
  2253                                  ;
  2254                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2255                                  ;
  2256                                  ;	In:		BL	shift flags
  2257                                  ;			BH	lock flags
  2258                                  ;			DS	OS data selector
  2259                                  ;
  2260                                  ;-----------------------------------------------------------------------------------------------------------------------
  2261                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2262                                  			push	es						;
  2263                                  			push	ESELCGA						;load CGA selector ...
  2264                                  			pop	es						;... into ES register
  2265                                  			mov	ch,ECONOIAROW					;OIA row
  2266                                  			mov	al,EASCIISPACE					;space is default character
  2267                                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2268                                  			jz	.10						;no, skip ahead
  2269                                  			mov	al,'S'						;yes, indicate with 'S'
  2270                                  .10			mov	cl,14						;indicator column
  2271                                  			call	SetConsoleChar					;display ASCII character
  2272                                  			mov	al,EASCIISPACE					;ASCII space
  2273                                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2274                                  			jz	.20						;no, skip ahead
  2275                                  			mov	al,'S'						;yes, indicate with 'S'
  2276                                  .20			mov	cl,64						;indicator column
  2277                                  			call	SetConsoleChar					;display ASCII character
  2278                                  			mov	al,EASCIISPACE					;ASCII space
  2279                                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2280                                  			jz	.30						;no, skip ahead
  2281                                  			mov	al,'C'						;yes, indicate with 'C'
  2282                                  .30			mov	cl,15						;indicator column
  2283                                  			call	SetConsoleChar					;display ASCII character
  2284                                  			mov	al,EASCIISPACE					;ASCII space
  2285                                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2286                                  			jz	.40						;no, skip ahead
  2287                                  			mov	al,'C'						;yes, indicate with 'C'
  2288                                  .40			mov	cl,63						;indicator column
  2289                                  			call	SetConsoleChar					;display ASCII character
  2290                                  			mov	al,EASCIISPACE					;ASCII space
  2291                                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2292                                  			jz	.50						;no, skip ahead
  2293                                  			mov	al,'A'						;yes, indicate with 'A'
  2294                                  .50			mov	cl,16						;indicator column
  2295                                  			call	SetConsoleChar					;display ASCII character
  2296                                  			mov	al,EASCIISPACE					;ASCII space
  2297                                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2298                                  			jz	.60						;no, skip ahead
  2299                                  			mov	al,'A'						;yes, indicate with 'A'
  2300                                  .60			mov	cl,62						;indicator column
  2301                                  			call	SetConsoleChar					;display ASCII character
  2302                                  			mov	al,EASCIISPACE					;ASCII space
  2303                                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2304                                  			jz	.70						;no, skip ahead
  2305                                  			mov	al,'C'						;yes, indicate with 'C'
  2306                                  .70			mov	cl,78						;indicator column
  2307                                  			call	SetConsoleChar					;display ASCII character
  2308                                  			mov	al,EASCIISPACE					;ASCII space
  2309                                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2310                                  			jz	.80						;no, skip ahead
  2311                                  			mov	al,'N'						;yes, indicate with 'N'
  2312                                  .80			mov	cl,77						;indicator column
  2313                                  			call	SetConsoleChar					;display ASCII character
  2314                                  			mov	al,EASCIISPACE					;ASCII space
  2315                                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2316                                  			jz	.90						;no, skip ahead
  2317                                  			mov	al,'S'						;yes, indicate with 'S'
  2318                                  .90			mov	cl,76						;indicator column
  2319                                  			call	SetConsoleChar					;display ASCII character
  2320                                  			pop	es						;restore non-volatile regs
  2321                                  			pop	ecx						;
  2322                                  			ret							;return
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  ;
  2325                                  ;	Routine:	PutConsoleOIAChar
  2326                                  ;
  2327                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2328                                  ;
  2329                                  ;	In:		DS	OS data selector
  2330                                  ;
  2331                                  ;-----------------------------------------------------------------------------------------------------------------------
  2332                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2333                                  			push	ecx						;
  2334                                  			push	esi						;
  2335                                  			push	ds						;
  2336                                  			push	es						;
  2337                                  			push	ESELDAT						;load OS data selector ...
  2338                                  			pop	ds						;... into data segment register
  2339                                  			push	ESELCGA						;load CGA selector ...
  2340                                  			pop	es						;... into extra segment register
  2341                                  			mov	esi,wbConsoleScan0				;scan codes address
  2342                                  			mov	bh,ECONOIAROW					;OIA row
  2343                                  			mov	bl,0						;starting column
  2344                                  			mov	ecx,6						;maximum scan codes
  2345                                  .10			push	ecx						;save remaining count
  2346                                  			mov	ecx,ebx						;row, column
  2347                                  			lodsb							;read scan code
  2348                                  			or	al,al						;scan code present?
  2349                                  			jz	.20						;no, skip ahead
  2350                                  			call	PutConsoleHexByte				;display scan code
  2351                                  			jmp	.30						;continue
  2352                                  .20			mov	al,' '						;ASCII space
  2353                                  			call	SetConsoleChar					;display space
  2354                                  			inc	cl
  2355                                  			mov	al,' '						;ASCII space
  2356                                  			call	SetConsoleChar					;display space
  2357                                  .30			add	bl,2						;next column (+2)
  2358                                  			pop	ecx						;restore remaining
  2359                                  			loop	.10						;next code
  2360                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2361                                  			cmp	al,32						;printable? (lower-bounds)
  2362                                  			jb	.40						;no, skip ahead
  2363                                  			cmp	al,126						;printable? (upper-bounds)
  2364                                  			ja	.40						;no, skip ahead
  2365                                  			mov	ch,bh						;OIA row
  2366                                  			mov	cl,40						;character display column
  2367                                  			call	SetConsoleChar					;display ASCII character
  2368                                  .40			pop	es						;restore non-volatile regs
  2369                                  			pop	ds						;
  2370                                  			pop	esi						;
  2371                                  			pop	ecx						;
  2372                                  			pop	ebx						;
  2373                                  			ret							;return
  2374                                  ;-----------------------------------------------------------------------------------------------------------------------
  2375                                  ;
  2376                                  ;	Routine:	PutConsoleHexByte
  2377                                  ;
  2378                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2379                                  ;
  2380                                  ;	In:		AL	byte value
  2381                                  ;			CH	row
  2382                                  ;			CL	column
  2383                                  ;			DS	OS data selector
  2384                                  ;			ES	CGA selector
  2385                                  ;
  2386                                  ;-----------------------------------------------------------------------------------------------------------------------
  2387                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  2388                                  			mov	bl,al						;save byte value
  2389                                  			shr	al,4						;hi-order nybble
  2390                                  			or	al,030h						;apply ASCII zone
  2391                                  			cmp	al,03ah						;numeric?
  2392                                  			jb	.10						;yes, skip ahead
  2393                                  			add	al,7						;add ASCII offset for alpha
  2394                                  .10			call	SetConsoleChar					;display ASCII character
  2395                                  			inc	cl						;increment column
  2396                                  			mov	al,bl						;byte value
  2397                                  			and	al,0fh						;lo-order nybble
  2398                                  			or	al,30h						;apply ASCII zone
  2399                                  			cmp	al,03ah						;numeric?
  2400                                  			jb	.20						;yes, skip ahead
  2401                                  			add	al,7						;add ASCII offset for alpha
  2402                                  .20			call	SetConsoleChar					;display ASCII character
  2403                                  			pop	ebx						;restore non-volatile regs
  2404                                  			ret							;return
  2405                                  ;-----------------------------------------------------------------------------------------------------------------------
  2406                                  ;
  2407                                  ;	Message Queue Helper Routines
  2408                                  ;
  2409                                  ;	PutMessage
  2410                                  ;	GetMessage
  2411                                  ;
  2412                                  ;-----------------------------------------------------------------------------------------------------------------------
  2413                                  ;-----------------------------------------------------------------------------------------------------------------------
  2414                                  ;
  2415                                  ;	Routine:	PutMessage
  2416                                  ;
  2417                                  ;	Description:	This routine adda a message to the message queue.
  2418                                  ;
  2419                                  ;	Input:		ECX	hi-order data word
  2420                                  ;			EDX	lo-order data word
  2421                                  ;
  2422                                  ;	Output:		CY	0 = success
  2423                                  ;				1 = fail: queue is full
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  PutMessage		push	ds						;save non-volatile regs
  2427                                  			push	ESELMQ						;load task message queue selector ...
  2428                                  			pop	ds						;... into data segment register
  2429                                  			mov	eax,[MQTail]					;tail ptr
  2430                                  			cmp	dword [eax],0					;is queue full?
  2431                                  			stc							;assume failure
  2432                                  			jne	.20						;yes, cannot store
  2433                                  			mov	[eax],edx					;store lo-order data
  2434                                  			mov	[eax+4],ecx					;store hi-order data
  2435                                  			add	eax,8						;next queue element adr
  2436                                  			and	eax,03fch					;at end of queue?
  2437                                  			jnz	.10						;no, skip ahead
  2438                                  			mov	al,8						;reset to top of queue
  2439                                  .10			mov	[MQTail],eax					;save new tail ptr
  2440                                  			clc							;indicate success
  2441                                  .20			pop	ds						;restore non-volatile regs
  2442                                  			ret							;return
  2443                                  ;-----------------------------------------------------------------------------------------------------------------------
  2444                                  ;
  2445                                  ;	Routine:	GetMessage
  2446                                  ;
  2447                                  ;	Description:	This routine reads and removes a message from the message queue.
  2448                                  ;
  2449                                  ;	Output:		EAX	lo-order message data
  2450                                  ;			EDX	hi-order message data
  2451                                  ;
  2452                                  ;			CY	0 = message read
  2453                                  ;				1 = no message to read
  2454                                  ;
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456                                  GetMessage		push	ebx						;save non-volatile regs
  2457                                  			push	ecx						;
  2458                                  			push	ds						;
  2459                                  			push	ESELMQ						;load message queue selector ...
  2460                                  			pop	ds						;... into data segment register
  2461                                  			mov	ebx,[MQHead]					;head ptr
  2462                                  			mov	eax,[ebx]					;lo-order 32 bits
  2463                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2464                                  			or	eax,edx						;is queue empty?
  2465                                  			stc							;assume queue is emtpy
  2466                                  			jz	.20						;yes, skip ahead
  2467                                  			xor	ecx,ecx						;store zero
  2468                                  			mov	[ebx],ecx					;... in lo-order dword
  2469                                  			mov	[ebx+4],ecx					;... in hi-order dword
  2470                                  			add	ebx,8						;next queue element
  2471                                  			and	ebx,03fch					;at end of queue?
  2472                                  			jnz	.10						;no, skip ahead
  2473                                  			mov	bl,8						;reset to 1st entry
  2474                                  .10			mov	[MQHead],ebx					;save new head ptr
  2475                                  			clc							;indicate message read
  2476                                  .20			pop	ds						;restore non-volatile regs
  2477                                  			pop	ecx						;
  2478                                  			pop	ebx						;
  2479                                  			ret							;return
  2480                                  ;-----------------------------------------------------------------------------------------------------------------------
  2481                                  ;
  2482                                  ;	Memory-Mapped Video Routines
  2483                                  ;
  2484                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2485                                  ;
  2486                                  ;	ClearConsoleScreen
  2487                                  ;	ScrollConsoleRow
  2488                                  ;	SetConsoleChar
  2489                                  ;
  2490                                  ;-----------------------------------------------------------------------------------------------------------------------
  2491                                  ;-----------------------------------------------------------------------------------------------------------------------
  2492                                  ;
  2493                                  ;	Routine:	ClearConsoleScreen
  2494                                  ;
  2495                                  ;	Description:	This routine clears the console (CGA) screen.
  2496                                  ;
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  2499                                  			push	edi						;
  2500                                  			push	ds						;
  2501                                  			push	es						;
  2502                                  			push	ESELDAT						;load OS Data selector ...
  2503                                  			pop	ds						;... into DS register
  2504                                  			push	ESELCGA						;load CGA selector ...
  2505                                  			pop	es						;... into ES register
  2506                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2507                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2508                                  			xor	edi,edi						;target offset
  2509                                  			cld							;forward strings
  2510                                  			rep	stosd						;reset screen body
  2511                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2512                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2513                                  			rep	stosd						;reset OIA line
  2514                                  			xor	al,al						;zero register
  2515                                  			mov	[wbConsoleRow],al				;reset console row
  2516                                  			mov	[wbConsoleColumn],al				;reset console column
  2517                                  			call	PlaceCursor					;place cursor at current position
  2518                                  			pop	es						;restore non-volatile regs
  2519                                  			pop	ds						;
  2520                                  			pop	edi						;
  2521                                  			pop	ecx						;
  2522                                  			ret							;return
  2523                                  ;-----------------------------------------------------------------------------------------------------------------------
  2524                                  ;
  2525                                  ;	Routine:	ScrollConsoleRow
  2526                                  ;
  2527                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2528                                  ;
  2529                                  ;-----------------------------------------------------------------------------------------------------------------------
  2530                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  2531                                  			push	esi						;
  2532                                  			push	edi						;
  2533                                  			push	ds						;
  2534                                  			push	es						;
  2535                                  			push	ESELCGA						;load CGA video selector ...
  2536                                  			pop	ds						;... into DS
  2537                                  			push	ESELCGA						;load CGA video selector ...
  2538                                  			pop	es						;... into ES
  2539                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2540                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2541                                  			xor	edi,edi						;edi = target (line 1)
  2542                                  			cld							;forward strings
  2543                                  			rep	movsd						;move 24 lines up
  2544                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2545                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2546                                  			rep	stosd						;clear bottom row
  2547                                  			pop	es						;restore non-volatile regs
  2548                                  			pop	ds						;
  2549                                  			pop	edi						;
  2550                                  			pop	esi						;
  2551                                  			pop	ecx						;
  2552                                  			ret							;return
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  ;
  2555                                  ;	Routine:	SetConsoleChar
  2556                                  ;
  2557                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2558                                  ;
  2559                                  ;	In:		AL	ASCII character
  2560                                  ;			CL	column
  2561                                  ;			CH	row
  2562                                  ;			ES	CGA selector
  2563                                  ;
  2564                                  ;-----------------------------------------------------------------------------------------------------------------------
  2565                                  SetConsoleChar		mov	dl,al						;ASCII character
  2566                                  			movzx	eax,ch						;row
  2567                                  			mov	ah,ECONCOLS					;cols/row
  2568                                  			mul	ah						;row * cols/row
  2569                                  			add	al,cl						;add column
  2570                                  			adc	ah,0						;handle carry
  2571                                  			shl	eax,1						;screen offset
  2572                                  			mov	[es:eax],dl					;store character
  2573                                  			ret							;return
  2574                                  ;-----------------------------------------------------------------------------------------------------------------------
  2575                                  ;
  2576                                  ;	Input/Output Routines
  2577                                  ;
  2578                                  ;	These routines read and/or write directly to ports.
  2579                                  ;
  2580                                  ;	PlaceCursor
  2581                                  ;	PutPrimaryEndOfInt
  2582                                  ;	PutSecondaryEndOfInt
  2583                                  ;	SetKeyboardLamps
  2584                                  ;	WaitForKeyInBuffer
  2585                                  ;	WaitForKeyOutBuffer
  2586                                  ;
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  ;-----------------------------------------------------------------------------------------------------------------------
  2589                                  ;
  2590                                  ;	Routine:	PlaceCursor
  2591                                  ;
  2592                                  ;	Description:	This routine positions the cursor on the console.
  2593                                  ;
  2594                                  ;	In:		DS	OS data selector
  2595                                  ;
  2596                                  ;-----------------------------------------------------------------------------------------------------------------------
  2597                                  PlaceCursor		push	ecx						;save non-volatile regs
  2598                                  			mov	al,[wbConsoleRow]				;al = row
  2599                                  			mov	ah,ECONCOLS					;ah = cols/row
  2600                                  			mul	ah						;row offset
  2601                                  			add	al,[wbConsoleColumn]				;add column
  2602                                  			adc	ah,0						;add overflow
  2603                                  			mov	ecx,eax						;screen offset
  2604                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2605                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2606                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2607                                  			out	dx,al						;select register
  2608                                  			inc	edx						;data port
  2609                                  			mov	al,ch						;hi-order cursor loc
  2610                                  			out	dx,al						;store hi-order loc
  2611                                  			dec	edx						;register select port
  2612                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2613                                  			out	dx,al						;select register
  2614                                  			inc	edx						;data port
  2615                                  			mov	al,cl						;lo-order cursor loc
  2616                                  			out	dx,al						;store lo-order loc
  2617                                  			pop	ecx						;restore non-volatile regs
  2618                                  			ret							;return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;	Routine:	PutPrimaryEndOfInt
  2622                                  ;
  2623                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2624                                  ;
  2625                                  ;-----------------------------------------------------------------------------------------------------------------------
  2626                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2627                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2628                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  2629                                  			ret							;return
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  ;
  2632                                  ;	Routine:	PutSecondaryEndOfInt
  2633                                  ;
  2634                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2635                                  ;
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2638                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2639                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2640                                  			ret							;return
  2641                                  ;-----------------------------------------------------------------------------------------------------------------------
  2642                                  ;
  2643                                  ;	Routine:	SetKeyboardLamps
  2644                                  ;
  2645                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2646                                  ;
  2647                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2648                                  ;
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2651                                  			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2652                                  			out	EKEYPORTDATA,al					;send command to 8042
  2653                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2654                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2655                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  2656                                  			mov	al,bh						;set/reset lamps value
  2657                                  			out	EKEYPORTDATA,al					;send lamps value
  2658                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2659                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2660                                  			ret							;return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;	Routine:	WaitForKeyInBuffer
  2664                                  ;
  2665                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2666                                  ;
  2667                                  ;	Out:		ZF	1 = Input buffer ready
  2668                                  ;				0 = Input buffer not ready after timeout
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2672                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2673                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2674                                  			test	al,EKEYBITIN					;is input buffer still full?
  2675                                  			loopnz	.10						;yes, repeat till timeout
  2676                                  			pop	ecx						;restore non-volatile regs
  2677                                  			ret							;return
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                  ;
  2680                                  ;	Routine:	WaitForKeyOutBuffer
  2681                                  ;
  2682                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2683                                  ;
  2684                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2685                                  ;				1 = Output buffer empty after timeout
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2689                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2690                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2691                                  			test	al,EKEYBITOUT					;output buffer status bit
  2692                                  			loopz	.10						;loop until output buffer bit
  2693                                  			pop	ecx						;restore non-volatile regs
  2694                                  			ret							;return
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696                                  ;
  2697                                  ;	End of the Kernel Function Library
  2698                                  ;
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  2701                                  			db	055h,0AAh					;end of segment
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  ;
  2704                                  ;	Console Task
  2705                                  ;
  2706                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2707                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2708                                  ;	screen and responds to user commands.
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;
  2713                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2714                                  ;
  2715                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2716                                  ;
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  section			constack						;console task stack
  2719                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721                                  ;
  2722                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2723                                  ;
  2724                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2725                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2726                                  ;	16 descriptors. Six are initially defined.
  2727                                  ;
  2728                                  ;-----------------------------------------------------------------------------------------------------------------------
  2729                                  section			conldt							;console local descriptors
  2730                                  			dq	004093004780007Fh				;04 TSS alias
  2731                                  			dq	004093004700007Fh				;0C LDT alias
  2732                                  			dq	00409300400006FFh				;14 stack
  2733                                  			dq	00CF93000000FFFFh				;1C data
  2734                                  			dq	00409B0050000FFFh				;24 code
  2735                                  			dq	00409300480007FFh				;2C message queue
  2736                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                  ;
  2739                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2740                                  ;
  2741                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2742                                  ;	segment. CS to console code.
  2743                                  ;
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  section			contss							;console task state segment
  2746                                  			dd	0						;00 back-link tss
  2747                                  			dd	0700h						;04 esp ring 0
  2748                                  			dd	0014h						;08 ss ring 0
  2749                                  			dd	0700h						;0C esp ring 1
  2750                                  			dd	0014h						;10 es ring 1
  2751                                  			dd	0700h						;14 esp ring 2
  2752                                  			dd	0014h						;18 ss ring 2
  2753                                  			dd	0						;1C cr ring 3
  2754                                  			dd	0						;20 eip
  2755                                  			dd	0200h						;24 eflags
  2756                                  			dd	0						;28 eax
  2757                                  			dd	0						;2C ecx
  2758                                  			dd	0						;30 edx
  2759                                  			dd	0						;34 ebx
  2760                                  			dd	0700h						;38 esp ring 3
  2761                                  			dd	0						;3C ebp
  2762                                  			dd	0						;40 esi
  2763                                  			dd	0						;44 edi
  2764                                  			dd	001Ch						;48 es
  2765                                  			dd	0024h						;4C cs
  2766                                  			dd	0014h						;50 ss ring 3
  2767                                  			dd	001Ch						;54 ds
  2768                                  			dd	0						;58 fs
  2769                                  			dd	0						;5c gs
  2770                                  			dd	0050h						;60 ldt selector in gdt
  2771                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  ;
  2774                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2775                                  ;
  2776                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2777                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2778                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2779                                  ;	event.
  2780                                  ;
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                  section			conmque							;console message queue
  2783                                  			dd	8						;head pointer
  2784                                  			dd	8						;tail pointer
  2785                                  			times	510 dd 0					;queue elements
  2786                                  ;-----------------------------------------------------------------------------------------------------------------------
  2787                                  ;
  2788                                  ;	Console Code								@disk: 008400	@mem: 005000
  2789                                  ;
  2790                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2791                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2792                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2793                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2794                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2795                                  ;	board input, echoing to the console screen and responding to user commands.
  2796                                  ;
  2797                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2798                                  ;
  2799                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2800                                  ;				|  Real Mode Interrupt Vectors			|
  2801                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2802                                  ;				|  Reserved BIOS Memory Area			|
  2803                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2804                                  ;				|  Shared Kernel Memory Area			|
  2805                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2806                                  ;				|  Global Descriptor Table (GDT)		|
  2807                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2808                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2809                                  ;			002000	+-----------------------------------------------+
  2810                                  ;				|  Interrupt Handlers				|
  2811                                  ;				|  Kernel Function Library			|
  2812                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2813                                  ;				|  Console Task Stack Area			|
  2814                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2815                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2816                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2817                                  ;				|  Console Task Task State Segment (TSS)	|
  2818                                  ;			004800	+-----------------------------------------------+
  2819                                  ;				|  Console Task Message Queue			|
  2820                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2821                                  ;				|  Console Task Code				|
  2822                                  ;				|  Console Task Constants			|
  2823                                  ;			006000	+===============================================+
  2824                                  ;
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                  section			concode	vstart=5000h					;labels relative to 5000h
  2827                                  ConCode			call	ConInitializeData				;initialize console variables
  2828                                  
  2829                                  			clearConsoleScreen					;clear the console screen
  2830                                  			putConsoleString czTitle				;display startup message
  2831                                  .10			putConsoleString czPrompt				;display input prompt
  2832                                  			placeCursor						;set CRT cursor location
  2833                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  2834                                  			putConsoleString czNewLine				;newline
  2835                                  			putConsoleString wzConsoleInBuffer			;print entered command
  2836                                  			putConsoleString czNewLine				;new line
  2837                                  			putConsoleString czUnknownCommand			;display error message
  2838                                  
  2839                                  			jmp	.10						;next command
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;	Routine:	ConInitializeData
  2843                                  ;
  2844                                  ;	Description:	This routine initializes console task variables.
  2845                                  ;
  2846                                  ;-----------------------------------------------------------------------------------------------------------------------
  2847                                  ConInitializeData	push	ecx						;save non-volatile regs
  2848                                  			push	edi						;
  2849                                  			push	es						;
  2850                                  			push	ESELDAT						;load OS data selector ...
  2851                                  			pop	es						;... into extra segment register
  2852                                  			mov	edi,ECONDATA					;OS console data address
  2853                                  			xor	al,al						;initialization value
  2854                                  			mov	ecx,ECONDATALEN					;size of OS console data
  2855                                  			cld							;forward strings
  2856                                  			rep	stosb						;initialize data
  2857                                  			pop	es						;restore non-volatile regs
  2858                                  			pop	edi						;
  2859                                  			pop	ecx						;
  2860                                  			ret							;return
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                  ;
  2863                                  ;	Constants
  2864                                  ;
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  2867                                  czPrompt		db	":",0						;prompt string
  2868                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  2869                                  czNewLine		db	13,10,0						;new line string
  2870                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  2871                                  			db	055h,0AAh					;end of section
  2872                                  %endif
  2873                                  %ifdef BUILDDISK
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  2877                                  ;
  2878                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2879                                  ;
  2880                                  ;-----------------------------------------------------------------------------------------------------------------------
  2881                                  section			unused							;unused disk space
  2882                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  2883                                  %endif
