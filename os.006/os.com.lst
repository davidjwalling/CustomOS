     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.006
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to support a simple message queue. Keyboard events
     8                                  ;			are added to the queue by the keyboard interrupt handler and are read and processed by the
     9                                  ;			console task.
    10                                  ;
    11                                  ;	Revised:	July 1, 2017
    12                                  ;
    13                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    14                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    15                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    16                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    17                                  ;
    18                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    19                                  ;
    20                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    21                                  ;
    22                                  ;=======================================================================================================================
    23                                  ;-----------------------------------------------------------------------------------------------------------------------
    24                                  ;
    25                                  ;	Assembly Directives
    26                                  ;
    27                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    28                                  ;
    29                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    30                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    31                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    32                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    33                                  ;
    34                                  ;-----------------------------------------------------------------------------------------------------------------------
    35                                  %ifdef BUILDDISK
    36                                  %define BUILDBOOT
    37                                  %define BUILDCOM
    38                                  %endif
    39                                  %ifdef BUILDPREP
    40                                  %define BUILDBOOT
    41                                  %endif
    42                                  ;-----------------------------------------------------------------------------------------------------------------------
    43                                  ;
    44                                  ;	Conventions
    45                                  ;
    46                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    47                                  ;			Labels within a routine begin at ".10" and increment by 10.
    48                                  ;
    49                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    50                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    51                                  ;			Register names in comments are in upper case.
    52                                  ;			Hexadecimal values in comments are in lower case.
    53                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    54                                  ;			register contents on entry and exit.
    55                                  ;
    56                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    57                                  ;			Assembly operands begin in column 33.
    58                                  ;			Lines should not extend beyond column 120.
    59                                  ;
    60                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    61                                  ;			Routine names begin with a verb (Get, Read, etc.).
    62                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    63                                  ;
    64                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    65                                  ;			Constant stored values are named in camel case, starting with 'c'.
    66                                  ;			The 2nd letter of the constant label indicates the storage type.
    67                                  ;
    68                                  ;			cq......	constant quad-word (dq)
    69                                  ;			cd......	constant double-word (dd)
    70                                  ;			cw......	constant word (dw)
    71                                  ;			cb......	constant byte (db)
    72                                  ;			cz......	constant ASCIIZ (null-terminated) string
    73                                  ;
    74                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    75                                  ;			The 2nd letter of the variable label indicates the storage type.
    76                                  ;
    77                                  ;			wq......	variable quad-word (resq)
    78                                  ;			wd......	variable double-word (resd)
    79                                  ;			ww......	variable word (resw)
    80                                  ;			wb......	variable byte (resb)
    81                                  ;
    82                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    83                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    84                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    85                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    86                                  ;			Octal literal values are avoided.
    87                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    88                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    89                                  ;
    90                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    91                                  ;			Structure names do not begin with a verb.
    92                                  ;
    93                                  ;	Macros:		Macro names are in camel case (getDateString).
    94                                  ;			Macro names do begin with a verb.
    95                                  ;
    96                                  ;	Registers:	Register names in comments are in upper case.
    97                                  ;			Register names in source code are in lower case.
    98                                  ;
    99                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
   100                                  ;			Registers EAX and ECX are preferred for returning response/result values.
   101                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   102                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   103                                  ;
   104                                  ;-----------------------------------------------------------------------------------------------------------------------
   105                                  ;=======================================================================================================================
   106                                  ;
   107                                  ;	Equates
   108                                  ;
   109                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   110                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   111                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   112                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   113                                  ;
   114                                  ;=======================================================================================================================
   115                                  ;-----------------------------------------------------------------------------------------------------------------------
   116                                  ;
   117                                  ;	8042 Keyboard Controller						EKEYB...
   118                                  ;
   119                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   120                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   121                                  ;
   122                                  ;-----------------------------------------------------------------------------------------------------------------------
   123                                  EKEYBPORTDATA		equ	060h						;data port
   124                                  EKEYBPORTSTAT		equ	064h						;status port
   125                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   126                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   127                                  EKEYBBITIN		equ	002h						;input buffer status bit
   128                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   129                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   130                                  										;---------------------------------------
   131                                  										;	Keyboard Scan Codes
   132                                  										;---------------------------------------
   133                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   134                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   135                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   136                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   137                                  EKEYBSLASH		equ	035h						;slash
   138                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   139                                  EKEYBALTDOWN		equ	038h						;alt key down
   140                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   141                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   142                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   143                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   144                                  EKEYBUP			equ	080h						;up
   145                                  EKEYBCTRLUP		equ	09Dh						;control key up
   146                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   147                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   148                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   149                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   150                                  EKEYBALTUP		equ	0B8h						;alt key up
   151                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   152                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   153                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   154                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   155                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   156                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  ;
   159                                  ;	8253 Programmable Interrupt Timer					EPIT...
   160                                  ;
   161                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   162                                  ;	approximately 18.2 times per second.
   163                                  ;
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   166                                  ;-----------------------------------------------------------------------------------------------------------------------
   167                                  ;
   168                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   169                                  ;
   170                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   171                                  ;	external devices and signals a hardware interrupt to the CPU.
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  EPICPORTPRI		equ	020h						;primary control port 0
   175                                  EPICPORTPRI1		equ	021h						;primary control port 1
   176                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   177                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   178                                  EPICEOI			equ	020h						;non-specific EOI code
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;
   181                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   182                                  ;
   183                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   184                                  ;	for CGA, EGA, VGA and compatible video modes.
   185                                  ;
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ECRTPORTHI		equ	003h						;controller port hi
   188                                  ECRTPORTLO		equ	0D4h						;controller port lo
   189                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   190                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  ;
   193                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   194                                  ;
   195                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   196                                  ;
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  EFDCPORTHI		equ	003h						;controller port hi
   199                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   200                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   201                                  EFDCSTATBUSY		equ	010h						;main status is busy
   202                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  ;
   205                                  ;	x86 Descriptor Access Codes						EACC...
   206                                  ;
   207                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   208                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   209                                  ;
   210                                  ;	0.......	Segment is not present in memory (triggers int 11)
   211                                  ;	1.......	Segment is present in memory
   212                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   213                                  ;	...0....	Segment is a system segment
   214                                  ;	...00010		Local Descriptor Table
   215                                  ;	...00101		Task Gate
   216                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   217                                  ;	...01100		Call Gate (386)
   218                                  ;	...01110		Interrupt Gate (386)
   219                                  ;	...01111		Trap Gate (386)
   220                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   221                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   222                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EACCLDT			equ	10000010b					;local descriptor table
   226                                  EACCTASK		equ	10000101b					;task gate
   227                                  EACCTSS			equ	10001001b					;task-state segment
   228                                  EACCGATE		equ	10001100b					;call gate
   229                                  EACCINT			equ	10001110b					;interrupt gate
   230                                  EACCTRAP		equ	10001111b					;trap gate
   231                                  EACCDATA		equ	10010011b					;upward writable data
   232                                  EACCCODE		equ	10011011b					;non-conforming readable code
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;
   235                                  ;	BIOS Interrupts and Functions						EBIOS...
   236                                  ;
   237                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   238                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   239                                  ;
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   242                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   243                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   244                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   245                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   246                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   247                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   248                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   249                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  ;
   252                                  ;	ASCII									EASCII...
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EASCIIBACKSPACE		equ	008h						;backspace
   256                                  EASCIILINEFEED		equ	00Ah						;line feed
   257                                  EASCIIRETURN		equ	00Dh						;carriage return
   258                                  EASCIIESCAPE		equ	01Bh						;escape
   259                                  EASCIISPACE		equ	020h						;space
   260                                  EASCIIUPPERA		equ	041h						;'A'
   261                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   262                                  EASCIITILDE		equ	07Eh						;'~'
   263                                  EASCIICASE		equ	00100000b					;case bit
   264                                  EASCIICASEMASK		equ	11011111b					;case mask
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;	Boot Sector and Loader Constants					EBOOT...
   268                                  ;
   269                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   270                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   271                                  ;
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   274                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   275                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   276                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   277                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   278                                  EBOOTMAXTRIES		equ	5						;max read retries
   279                                  ;-----------------------------------------------------------------------------------------------------------------------
   280                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   281                                  ;-----------------------------------------------------------------------------------------------------------------------
   282                                  ESELDAT			equ	018h						;kernel data selector
   283                                  ESELCGA			equ	020h						;cga video selector
   284                                  ESELOSCODE		equ	048h						;os kernel code selector
   285                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   286                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   287                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   288                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ;	LDT Selectors								ESEL...
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ESELMQ			equ	02Ch						;console task message queue
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  ;	Kernel Constants							EKRN...
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  EKRNDESLEN		equ	8						;size of descriptor
   297                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   298                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;	Keyboard Flags								EKEYF...
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   303                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   304                                  EKEYFALTLEFT		equ	00000100b					;left alt
   305                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   306                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   307                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   308                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   309                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   310                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   311                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   312                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;	Console Constants							ECON...
   315                                  ;-----------------------------------------------------------------------------------------------------------------------
   316                                  ECONCOLS		equ	80						;columns per row
   317                                  ECONROWS		equ	24						;console rows
   318                                  ECONOIAROW		equ	24						;operator information area row
   319                                  ECONCOLBYTES		equ	2						;bytes per column
   320                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   321                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   322                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   323                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;	Kernel Message Identifiers						EMSG...
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  EMSGKEYDOWN		equ	041000000h					;key-down
   328                                  EMSGKEYUP		equ	041010000h					;key-up
   329                                  EMSGKEYCHAR		equ	041020000h					;character
   330                                  ;=======================================================================================================================
   331                                  ;
   332                                  ;	Structures
   333                                  ;
   334                                  ;=======================================================================================================================
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ;
   337                                  ;	MQUEUE
   338                                  ;
   339                                  ;	The MQUEUE structure maps memory used for a message queue.
   340                                  ;
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  struc			MQUEUE
   343 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   344 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   345 00000008 <res 000003F8>          MQData			resd	254						;message queue
   346                                  endstruc
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;	OSDATA
   350                                  ;
   351                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   352                                  ;	used by the BIOS.
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  struc			OSDATA
   356 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   357 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   358 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   359 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   360 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   361 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   362 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   363 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   364 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   365 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   366 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   367 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   368 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   369 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   370 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   371 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   372 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   373 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   374 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   375 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   376 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   377 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   378 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   379 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   380 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   381 00000449 <res 00000001>          			resb	1						;449 current video mode
   382 0000044A <res 00000002>          			resw	1						;44a screen columns
   383 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   384 0000044E <res 00000002>          			resw	1						;44e current video page offset
   385 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   386 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   387 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   388 00000462 <res 00000001>          			resb	1						;462 active display page number
   389 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   390 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   391 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   392 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   393 00000469 <res 00000003>          			resb	3						;469 vague
   394 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   395 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   396 00000471 <res 00000001>          			resb	1						;471 bios break flag
   397 00000472 <res 00000002>          			resw	1						;472 soft reset
   398 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   399 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   400 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   401 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   402 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   403 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   404 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   405 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   406 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   407 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   408 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   409 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   410 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   411 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   412 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   413 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   414 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   415 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   416 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   417 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   418 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   419 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   420 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   421 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   422 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   423 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   424 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   425 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   426 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   427 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   428 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   429 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   430 000004AC <res 00000008>          			resb	8						;4ac reserved
   431 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   432 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   433 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   434 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   435 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   436 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   437 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   438 000004CD <res 00000001>          			resb	1						;4cd unknown
   439 000004CE <res 00000002>          			resw	1						;4de day counter
   440 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   441 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   442 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   443 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   444 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   445 00000505 <res 0000000A>          			resb	10						;505 POST work area
   446 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   447 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   448 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   449 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   450 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   451 0000051E <res 00000002>          			resw	1						;51e unknown
   452 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   453 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   454 00000530 <res 00000004>          			resb	4						;530 MODE command
   455 00000534 <res 000001CC>          			resb	460						;534 unused
   456 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;
   459                                  ;	OS Variables								@disk: N/A	@mem: 000800
   460                                  ;
   461                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   462                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   463                                  ;	are organized based on the task that usually accesses them.
   464                                  ;
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ;
   468                                  ;	Console Task Variables
   469                                  ;
   470                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   471                                  ;	the console task starts.
   472                                  ;
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  			align	4
   475                                  ECONDATA		equ	($)
   476 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   477 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   478 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   479 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   480 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   481 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   482 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   483 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   484 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   485 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   486 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   487 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   488 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   489                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   490                                  ;-----------------------------------------------------------------------------------------------------------------------
   491                                  ;
   492                                  ;	End of OS Variables
   493                                  ;
   494                                  ;-----------------------------------------------------------------------------------------------------------------------
   495                                  endstruc
   496                                  ;-----------------------------------------------------------------------------------------------------------------------
   497                                  ;
   498                                  ;	Macros
   499                                  ;
   500                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   501                                  ;
   502                                  ;-----------------------------------------------------------------------------------------------------------------------
   503                                  %macro			mint	1
   504                                  _%1			equ	($-$$) / EKRNDESLEN
   505                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   506                                  %endmacro
   507                                  %macro			mtrap	1
   508                                  _%1			equ	($-$$) / EKRNDESLEN
   509                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   510                                  %endmacro
   511                                  %macro			menter	1
   512                                  ?%1			equ	($-$$)
   513                                  %endmacro
   514                                  %macro			tsvce	1
   515                                  e%1			equ	($-tsvc)/4
   516                                  			dd	%1
   517                                  %endmacro
   518                                  %ifdef BUILDBOOT
   519                                  ;=======================================================================================================================
   520                                  ;
   521                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   522                                  ;
   523                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   524                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   525                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   526                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   527                                  ;
   528                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   529                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   530                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   531                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   532                                  ;	immediately followed by a disk parameter table.
   533                                  ;
   534                                  ;=======================================================================================================================
   535                                  			cpu	8086						;assume minimal CPU
   536                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   537                                  			bits	16						;16-bit code at power-up
   538                                  %ifdef BUILDPREP
   539                                  Boot			jmp	word Prep					;jump to preparation code
   540                                  %else
   541                                  Boot			jmp	word Boot.10					;jump over parameter table
   542                                  %endif
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;	Disk Parameter Table
   546                                  ;
   547                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   548                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   549                                  ;
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551                                  			db	"CustomOS"					;eight-byte label
   552                                  cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   553                                  cbClusterSectors	db	1						;sectors per cluster
   554                                  cwReservedSectors	dw	1						;reserved sectors
   555                                  cbFatCount		db	2						;file allocation table copies
   556                                  cwDirEntries		dw	224						;max directory entries
   557                                  cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   558                                  cbDiskType		db	0F0h						;1.44MB
   559                                  cwFatSectors		dw	9						;sectors per FAT copy
   560                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   561                                  cwTrackSectors		dw	18						;sectors per track (as word)
   562                                  cwDiskSides		dw	2						;sides per disk
   563                                  cwSpecialSectors	dw	0						;special sectors
   564                                  ;
   565                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   566                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   567                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   568                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   569                                  ;	given several possible starting values for CS:IP.
   570                                  ;
   571                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   572                                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   573                                  .@20			equ	$-$$						;.@20 = 021h
   574                                  .20			pop	ax						;AX =	   7c21     c21    21
   575                                  			sub	ax,.@20						;BX =	   7c00     c00     0
   576                                  			mov	cl,4						;shift count
   577                                  			shr	ax,cl						;AX =	    7c0      c0     0
   578                                  			mov	bx,cs						;BX =	      0     700   7c0
   579                                  			add	bx,ax						;BX =	    7c0     7c0   7c0
   580                                  ;
   581                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   582                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   583                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   584                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   585                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   586                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   587                                  ;
   588                                  			sub	bx,16						;BX = 07b0
   589                                  			mov	ds,bx						;DS = 07b0 = psp
   590                                  			mov	es,bx						;ES = 07b0 = psp
   591                                  			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   592                                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   593                                  ;
   594                                  ;	Our boot addressability is now set up according to the following diagram.
   595                                  ;
   596                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   597                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   598                                  ;				|  256 = 100h bytes				|
   599                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   600                                  ;				|  Boot Sector (vstart=0100h)			|
   601                                  ;				|  1 sector = 512 = 200h bytes			|
   602                                  ;			007e00	+-----------------------------------------------+ DS:0300
   603                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   604                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   605                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   606                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   607                                  ;			009200	+-----------------------------------------------+ DS:1700
   608                                  ;
   609                                  ;	On entry, DL indicates the drive being booted from.
   610                                  ;
   611                                  			mov	[wbDrive],dl					;[drive] = drive being booted from
   612                                  ;
   613                                  ;	Compute directory i/o buffer address.
   614                                  ;
   615                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   616                                  			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   617                                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   618                                  			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   619                                  ;
   620                                  ;	Compute segment where os.com will be loaded.
   621                                  ;
   622                                  			shr	ax,cl						;AX = 0150
   623                                  			add	ax,bx						;AX = 0150 + 07b0 = 0900
   624                                  			sub	ax,16						;AX = 08f0
   625                                  			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   626                                  ;
   627                                  ;	Set the video mode to 80 column, 25 row, text.
   628                                  ;
   629                                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   630                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
   631                                  ;
   632                                  ;	Write a message to the console so we know we have our addressability established.
   633                                  ;
   634                                  			mov	si,czLoadMsg					;loading message
   635                                  			call	BootPrint					;display loader message
   636                                  ;
   637                                  ;	Initialize the number of directory sectors to search.
   638                                  ;
   639                                  			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   640                                  			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   641                                  ;
   642                                  ;	Compute number of directory sectors and initialize overhead count.
   643                                  ;
   644                                  			mov	cx,ax						;CX = 00e0 = 224 entries
   645                                  			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   646                                  			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   647                                  			mov	[wwOverhead],ax					;[overhead] = 000e
   648                                  ;
   649                                  ;	Compute directory entries per sector.
   650                                  ;
   651                                  			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   652                                  			div	cx						;AX = 0010 = entries per dir sector
   653                                  			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   654                                  ;
   655                                  ;	Compute first logical directory sector and update overhead count.
   656                                  ;
   657                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   658                                  			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   659                                  			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   660                                  			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   661                                  			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   662                                  			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   663                                  ;
   664                                  ;	Read directory sector.
   665                                  ;
   666                                  .30			mov	al,1						;sector count
   667                                  			mov	[wbReadCount],al				;[readcount] = 01
   668                                  			mov	bx,[wwDirBuffer]				;BX = 1500
   669                                  			call	ReadSector					;read sector into es:bx
   670                                  ;
   671                                  ;	Setup variables to search this directory sector.
   672                                  ;
   673                                  			mov	ax,[wwEntriesLeft]				;directory entries to search
   674                                  			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   675                                  			jna	.40						;no, continue
   676                                  			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   677                                  .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   678                                  			mov	si,cbKernelProgram				;program name
   679                                  			mov	di,[wwDirBuffer]				;DI = 1500
   680                                  ;
   681                                  ;	Loop through directory sectors searching for kernel program.
   682                                  ;
   683                                  .50			push	si						;save kernel name address
   684                                  			push	di						;save dir i/o buffer address
   685                                  			mov	cx,11						;length of 8+3 name
   686                                  			cld							;forward strings
   687                                  			repe	cmpsb						;compare entry name
   688                                  			pop	di						;restore dir i/o buffer address
   689                                  			pop	si						;restore kernel name address
   690                                  			je	.60						;exit loop if found
   691                                  			add	di,[cwEntryLen]					;point to next dir entry
   692                                  			dec	ax						;decrement remaining entries
   693                                  			jnz	.50						;next entry
   694                                  ;
   695                                  ;	Repeat search if we are not at the end of the directory.
   696                                  ;
   697                                  			inc	word [wwLogicalSector]				;increment logical sector
   698                                  			cmp	word [wwEntriesLeft],0				;done with directory?
   699                                  			jne	.30						;no, get next sector
   700                                  			mov	si,czNoKernel					;missing kernel message
   701                                  			jmp	BootExit					;display message and exit
   702                                  ;
   703                                  ;	If we find the kernel program in the directory, read the FAT.
   704                                  ;
   705                                  .60			mov	ax,[cwReservedSectors]				;AX = 0001
   706                                  			mov	[wwLogicalSector],ax				;start past boot sector
   707                                  			mov	ax,[cwFatSectors]				;AX = 0009
   708                                  			mov	[wbReadCount],al				;[readcount] = 09
   709                                  			mov	bx,EBOOTFATBASE					;BX = 0300
   710                                  			call	ReadSector					;read FAT into buffer
   711                                  ;
   712                                  ;	Get the starting cluster of the kernel program and target address.
   713                                  ;
   714                                  			mov	ax,[di+26]					;AX = starting cluster of file
   715                                  			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   716                                  ;
   717                                  ;	Read each program cluster into RAM.
   718                                  ;
   719                                  .70			push	ax						;save cluster nbr
   720                                  			sub	ax,2						;AX = cluster nbr base 0
   721                                  			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   722                                  			mov	[wbReadCount],cl				;save sectors to read
   723                                  			xor	ch,ch						;CX = sectors per cluster
   724                                  			mul	cx						;DX:AX = logical cluster sector
   725                                  			add	ax,[wwOverhead]					;AX = kernel sector nbr
   726                                  			mov	[wwLogicalSector],ax				;save logical sector nbr
   727                                  			call	ReadSector					;read sectors into ES:BX
   728                                  ;
   729                                  ;	Update buffer pointer for next cluster.
   730                                  ;
   731                                  			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   732                                  			xor	ah,ah						;AX = sectors per cluster
   733                                  			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   734                                  			add	bx,ax						;BX = next cluster target address
   735                                  			pop	ax						;AX = restore cluster nbr
   736                                  ;
   737                                  ;	Compute next cluster number.
   738                                  ;
   739                                  			mov	cx,ax						;CX = cluster nbr
   740                                  			mov	di,ax						;DI = cluster nbr
   741                                  			shr	ax,1						;AX = cluster/2
   742                                  			mov	dx,ax						;DX = cluster/2
   743                                  			add	ax,dx						;AX = 2*(cluster/2)
   744                                  			add	ax,dx						;AX = 3*(cluster/2)
   745                                  			and	di,1						;get low bit
   746                                  			add	di,ax						;add one if cluster is odd
   747                                  			add	di,EBOOTFATBASE					;add FAT buffer address
   748                                  			mov	ax,[di]						;get cluster bytes
   749                                  ;
   750                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   751                                  ;
   752                                  			test	cl,1						;is cluster odd?
   753                                  			jz	.80						;no, skip ahead
   754                                  			mov	cl,4						;shift count
   755                                  			shr	ax,cl						;shift nybble low
   756                                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   757                                  			cmp	ax,0FFFh					;end of chain?
   758                                  			jne	.70						;no, continue
   759                                  ;
   760                                  ;	Transfer control to the operating system program.
   761                                  ;
   762                                  			db	0EAh						;jmp seg:offset
   763                                  wwLoadOffset		dw	0100h						;kernel entry offset
   764                                  wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   765                                  ;
   766                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   767                                  ;
   768                                  ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   769                                  			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   770                                  			mov	cx,ax						;CX = sectors per cylinder
   771                                  			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   772                                  			div	cx						;AX = cylinder; DX = cyl sector
   773                                  			mov	[wbTrack],al					;[track] = cylinder
   774                                  			mov	ax,dx						;AX = cyl sector
   775                                  			div	byte [cbTrackSectors]				;AH = sector, AL = head
   776                                  			inc	ah						;AH = sector (1,2,3,...)
   777                                  			mov	[wbHead],ax					;[head]= head, [sector]= sector
   778                                  ;
   779                                  ;	Try maxtries times to read sector.
   780                                  ;
   781                                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   782                                  .10			push	bx						;save buffer address
   783                                  			push	cx						;save retry count
   784                                  			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   785                                  			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   786                                  			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   787                                  			int	EBIOSINTDISKETTE				;read sector
   788                                  			pop	cx						;restore retry count
   789                                  			pop	bx						;restore buffer address
   790                                  			jnc	BootReturn					;skip ahead if done
   791                                  			loop	.10						;retry
   792                                  ;
   793                                  ;	Handle disk error: convert to ASCII and store in error string.
   794                                  ;
   795                                  			mov	al,ah						;AL = bios error code
   796                                  			xor	ah,ah						;AX = bios error code
   797                                  			mov	dl,16						;divisor for base 16
   798                                  			div	dl						;AL = hi order, AH = lo order
   799                                  			or	ax,03030h					;apply ASCII zone bits
   800                                  			cmp	ah,03Ah						;range test ASCII numeral
   801                                  			jb	.20						;continue if numeral
   802                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   803                                  .20			cmp	al,03Ah						;range test ASCII numeral
   804                                  			jb	.30						;continue if numeral
   805                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   806                                  .30			mov	[wzErrorCode],ax				;store ASCII error code
   807                                  			mov	si,czErrorMsg					;error message address
   808                                  BootExit		call	BootPrint					;display messge to console
   809                                  .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   810                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   811                                  			jnz	.20						;continue if key pressed
   812                                  			sti							;enable maskable interrupts
   813                                  			hlt							;wait for interrupt
   814                                  			jmp	.10						;repeat
   815                                  .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   816                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   817                                  .30			sti							;enable maskable interrupts
   818                                  			hlt							;stop until reset, int, nmi
   819                                  			jmp	.30						;loop until restart kicks in
   820                                  ;
   821                                  ;	Display text message.
   822                                  ;
   823                                  BootPrint		cld							;forward strings
   824                                  			lodsb							;load next byte at DS:SI in AL
   825                                  			test	al,al						;end of string?
   826                                  			jz	BootReturn					;... yes, exit our loop
   827                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   828                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
   829                                  			jmp	BootPrint					;repeat until done
   830                                  BootReturn		ret							;return
   831                                  ;-----------------------------------------------------------------------------------------------------------------------
   832                                  ;
   833                                  ;	Constants
   834                                  ;
   835                                  ;-----------------------------------------------------------------------------------------------------------------------
   836                                  			align	2
   837                                  cwEntryLen		dw	32						;length of directory entry
   838                                  cbKernelProgram		db	"OS      COM"					;kernel program name
   839                                  czLoadMsg		db	"Loading OS",13,10,0				;loading message
   840                                  czErrorMsg		db	"Disk error "					;error message
   841                                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   842                                  czNoKernel		db	"OS missing",0					;missing kernel message
   843                                  ;-----------------------------------------------------------------------------------------------------------------------
   844                                  ;
   845                                  ;	Work Areas
   846                                  ;
   847                                  ;-----------------------------------------------------------------------------------------------------------------------
   848                                  			align	2
   849                                  wwDirBuffer		dw	0						;directory i/o buffer address
   850                                  wwEntriesLeft		dw	0						;directory entries to search
   851                                  wwOverhead		dw	0						;overhead sectors
   852                                  wwSectorEntries		dw	0						;directory entries per sector
   853                                  wwLogicalSector		dw	0						;current logical sector
   854                                  wwReadCountCommand	equ	$						;read count and command
   855                                  wbReadCount		db	0						;sectors to read
   856                                  cbReadCommand		db	2						;BIOS read disk fn code
   857                                  wwDriveHead		equ	$						;drive, head (word)
   858                                  wbDrive			db	0						;drive
   859                                  wbHead			db	0						;head
   860                                  wwSectorTrack		equ	$						;sector, track (word)
   861                                  			db	0						;sector
   862                                  wbTrack			db	0						;track
   863                                  			times	510-($-$$) db 0h				;zero fill to end of sector
   864                                  			db	055h,0AAh					;end of sector signature
   865                                  %endif
   866                                  %ifdef BUILDPREP
   867                                  ;=======================================================================================================================
   868                                  ;
   869                                  ;	Diskette Preparation Code
   870                                  ;
   871                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   872                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   873                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   874                                  ;
   875                                  ;=======================================================================================================================
   876                                  ;
   877                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   878                                  ;
   879                                  Prep			mov	si,czPrepMsg10					;starting message address
   880                                  			call	BootPrint					;display message
   881                                  ;
   882                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   883                                  ;
   884                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   885                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   886                                  			jnz	.12						;continue if key pressed
   887                                  			sti							;enable interrupts
   888                                  			hlt							;wait for interrupt
   889                                  			jmp	.10						;repeat
   890                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   891                                  			je	.15						;yes, branch
   892                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   893                                  			jne	.10						;no, repeat
   894                                  			jmp	.90						;yes, exit program
   895                                  ;
   896                                  ;	Display writing-sector message and patch the JMP instruction.
   897                                  ;
   898                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   899                                  			call	BootPrint					;display message
   900                                  			mov	bx,Boot+1					;address of JMP instruction operand
   901                                  			mov	ax,01Bh						;address past disk parameter table
   902                                  			mov	[bx],ax						;update the JMP instruction
   903                                  ;
   904                                  ;	Try to read the boot sector.
   905                                  ;
   906                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   907                                  .20			push	cx						;save remaining tries
   908                                  			mov	bx,wcPrepInBuf					;input buffer address
   909                                  			mov	dx,0						;head zero, drive zero
   910                                  			mov	cx,1						;track zero, sector one
   911                                  			mov	ax,0201h					;read one sector
   912                                  			int	EBIOSINTDISKETTE				;attempt the read
   913                                  			pop	cx						;restore remaining retries
   914                                  			jnc	.30						;skip ahead if successful
   915                                  			loop	.20						;try again
   916                                  			mov	si,czPrepMsg20					;read-error message address
   917                                  			jmp	.50						;branch to error routine
   918                                  ;
   919                                  ;	Copy diskette parms from input buffer to output buffer.
   920                                  ;
   921                                  .30			mov	si,wcPrepInBuf					;input buffer address
   922                                  			add	si,11						;skip over JMP and system ID
   923                                  			mov	di,Boot						;output buffer address
   924                                  			add	di,11						;skip over JMP and system ID
   925                                  			mov	cx,19						;length of diskette parameters
   926                                  			cld							;forward string copies
   927                                  			rep	movsb						;copy diskette parameters
   928                                  ;
   929                                  ;	Try to write boot sector to diskette.
   930                                  ;
   931                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   932                                  .40			push	cx						;save remaining tries
   933                                  			mov	bx,Boot						;output buffer address
   934                                  			mov	dx,0						;head zero, drive zero
   935                                  			mov	cx,1						;track zero, sector one
   936                                  			mov	ax,0301h					;write one sector
   937                                  			int	EBIOSINTDISKETTE				;attempt the write
   938                                  			pop	cx						;restore remaining retries
   939                                  			jnc	.80						;skip ahead if successful
   940                                  			loop	.40						;try again
   941                                  			mov	si,czPrepMsg30					;write-error message address
   942                                  ;
   943                                  ;	Convert the error code to ASCII and display the error message.
   944                                  ;
   945                                  .50			push	ax						;save error code
   946                                  			mov	al,ah						;copy error code
   947                                  			mov	ah,0						;AX = error code
   948                                  			mov	dl,10h						;hexadecimal divisor
   949                                  			idiv	dl						;AL = hi-order, AH = lo-order
   950                                  			or	ax,03030h					;add ASCII zone digits
   951                                  			cmp	ah,03Ah						;AH ASCII numeral?
   952                                  			jb	.60						;yes, continue
   953                                  			add	ah,7						;no, make ASCII 'A'-'F'
   954                                  .60			cmp	al,03Ah						;al ASCII numeral?
   955                                  			jb	.70						;yes, continue
   956                                  			add	al,7						;no, make ASCII
   957                                  .70			mov	[si+17],ax					;put ASCII error code in message
   958                                  			call	BootPrint					;write error message
   959                                  			pop	ax						;restore error code
   960                                  ;
   961                                  ;	Display the completion message.
   962                                  ;
   963                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   964                                  			mov	al,ah						;BIOS return code
   965                                  			cmp	al,0						;success?
   966                                  			je	.85						;yes, continue
   967                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   968                                  			cmp	al,1						;disk parameter error?
   969                                  			je	.85						;yes, continue
   970                                  			mov	si,czPrepMsgErr2				;address mark not found message
   971                                  			cmp	al,2						;address mark not found?
   972                                  			je	.85						;yes, continue
   973                                  			mov	si,czPrepMsgErr3				;protected disk message
   974                                  			cmp	al,3						;protected disk?
   975                                  			je	.85						;yes, continue
   976                                  			mov	si,czPrepMsgErr6				;diskette removed message
   977                                  			cmp	al,6						;diskette removed?
   978                                  			je	.85						;yes, continue
   979                                  			mov	si,czPrepMsgErr80				;drive timed out message
   980                                  			cmp	al,80H						;drive timed out?
   981                                  			je	.85						;yes, continue
   982                                  			mov	si,czPrepMsgErrXX				;unknown error message
   983                                  .85			call	BootPrint					;display result message
   984                                  .90			mov	ax,04C00H					;terminate with zero result code
   985                                  			int	021h						;terminate DOS program
   986                                  			ret							;return (should not execute)
   987                                  ;-----------------------------------------------------------------------------------------------------------------------
   988                                  ;
   989                                  ;	Diskette Preparation Messages
   990                                  ;
   991                                  ;-----------------------------------------------------------------------------------------------------------------------
   992                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   993                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   994                                  			db	13,10
   995                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   996                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   997                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   998                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   999                                  			db	13,10,0
  1000                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1001                                  			db	13,10,0
  1002                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1003                                  			db	13,10,0
  1004                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1005                                  			db	13,10,0
  1006                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1007                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1008                                  			db	13,10,0
  1009                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1010                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1011                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1012                                  			db	13,10,"and retry."
  1013                                  			db	13,10,0
  1014                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1015                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1016                                  			db	13,10,"using another diskette."
  1017                                  			db	13,10,0
  1018                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1019                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1020                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1021                                  			db	13,10,0
  1022                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1023                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1024                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1025                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1026                                  			db	13,10,"is properly inserted in the diskette drive."
  1027                                  			db	13,10,0
  1028                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1029                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1030                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1031                                  			db	13,10,0
  1032                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1033                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1034                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1035                                  			db	13,10,0
  1036                                  wcPrepInBuf		equ	$
  1037                                  %endif
  1038                                  %ifdef BUILDDISK
  1039                                  ;=======================================================================================================================
  1040                                  ;
  1041                                  ;	File Allocation Tables
  1042                                  ;
  1043                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1044                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1045                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1046                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1047                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1048                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1049                                  ;	the last cluster in the chain.
  1050                                  ;
  1051                                  ;	Every three bytes encode two FAT entries as follows:
  1052                                  ;
  1053                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1054                                  ;
  1055                                  ;=======================================================================================================================
  1056                                  ;-----------------------------------------------------------------------------------------------------------------------
  1057                                  ;
  1058                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1059                                  ;
  1060                                  ;-----------------------------------------------------------------------------------------------------------------------
  1061                                  section			fat1							;first copy of FAT
  1062                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1063                                  			db	005h,060h,000h,	007h,080h,000h
  1064                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1065                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1066                                  			db	011h,020h,001h,	013h,040h,001h
  1067                                  			db	015h,060h,001h,	017h,080h,001h
  1068                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1069                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1070                                  			db	021h,020h,002h,	023h,040h,002h
  1071                                  			db	025h,060h,002h,	027h,080h,002h
  1072                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1073                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;
  1076                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1077                                  ;
  1078                                  ;-----------------------------------------------------------------------------------------------------------------------
  1079                                  section			fat2							;second copy of FAT
  1080                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1081                                  			db	005h,060h,000h,	007h,080h,000h
  1082                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1083                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1084                                  			db	011h,020h,001h,	013h,040h,001h
  1085                                  			db	015h,060h,001h,	017h,080h,001h
  1086                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1087                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1088                                  			db	021h,020h,002h,	023h,040h,002h
  1089                                  			db	025h,060h,002h,	027h,080h,002h
  1090                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1091                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1092                                  ;-----------------------------------------------------------------------------------------------------------------------
  1093                                  ;
  1094                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1095                                  ;
  1096                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1097                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1098                                  ;	copy.
  1099                                  ;
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  section			dir							;diskette directory
  1102                                  			db	"OS      COM"					;file name (must contain spaces)
  1103                                  			db	020h						;attribute (archive bit set)
  1104                                  			times	10 db 0						;unused
  1105                                  			dw	0h						;time
  1106                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1107                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1108                                  			dw	2						;first cluster
  1109                                  			dd	05200h						;file size
  1110                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1111                                  %endif
  1112                                  %ifdef BUILDCOM
  1113                                  ;=======================================================================================================================
  1114                                  ;
  1115                                  ;	OS.COM
  1116                                  ;
  1117                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1118                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1119                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1120                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1121                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1122                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1123                                  ;
  1124                                  ;	Our loader addressability is set up according to the following diagram.
  1125                                  ;
  1126                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1127                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1128                                  ;				|  256 = 100h bytes				|
  1129                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1130                                  ;				|  Boot Sector (vstart=0100h)			|
  1131                                  ;				|  1 sector = 512 = 200h bytes			|
  1132                                  ;			007e00	+-----------------------------------------------+
  1133                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1134                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1135                                  ;				|						|
  1136                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1137                                  ;				|						|
  1138                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1139                                  ;				|  Loader Code					|
  1140                                  ;				|  1 sector = 512 = 200h bytes			|
  1141                                  ;			009200	+-----------------------------------------------+ DS:0300
  1142                                  ;
  1143                                  ;=======================================================================================================================
  1144                                  ;-----------------------------------------------------------------------------------------------------------------------
  1145                                  ;
  1146                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1147                                  ;
  1148                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1149                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1150                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1151                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1152                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1153                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1154                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1155                                  ;	registers.
  1156                                  ;
  1157                                  ;-----------------------------------------------------------------------------------------------------------------------
  1158                                  			cpu	8086						;assume minimal CPU
  1159                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1160                                  			bits	16						;this is 16-bit code
  1161 00000000 0E                      Loader			push	cs						;use the code segment
  1162 00000001 1F                      			pop	ds						;...as our data segment
  1163 00000002 0E                      			push	cs						;use the code segment
  1164 00000003 07                      			pop	es						;...as our extra segment
  1165                                  ;
  1166                                  ;	Write a message to the console so we know we have our addressability established.
  1167                                  ;
  1168 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1169 00000007 E8A600                  			call	PutTTYString					;display loader message
  1170                                  ;
  1171                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1172                                  ;
  1173 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1174 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1175 00000010 3C03                    			cmp	al,3						;80386+?
  1176 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1177                                  			cpu	386						;allow 80386 instructions
  1178 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1179 00000017 E89600                  			call	PutTTYString					;display message
  1180                                  ;
  1181                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1182                                  ;
  1183 0000001A BE0003                  			mov	si,0300h					;GDT offset
  1184 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1185 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1186 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1187 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1188 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1189 00000029 894432                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1190 0000002C 884C34                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1191 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1192 00000032 E87B00                  			call	PutTTYString					;display message
  1193                                  ;
  1194                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1195                                  ;
  1196 00000035 680001                  			push	EKRNCODESEG					;use kernel code segment ...
  1197 00000038 07                      			pop	es						;... as target segment
  1198 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1199 0000003B BE0003                  			mov	si,0300h					;DS:SI = source address
  1200 0000003E B90050                  			mov	cx,05000h					;CX = kernel size
  1201 00000041 FC                      			cld							;forward strings
  1202 00000042 F3A4                    			rep	movsb						;copy kernel image
  1203 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1204 00000047 E86600                  			call	PutTTYString					;display message
  1205                                  ;
  1206                                  ;	Switch to protected mode.
  1207                                  ;
  1208 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1209 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1210 0000004E BC0010                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1211 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1212 00000053 BB2820                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1213 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1214 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1215 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1216 0000005E 4A                      			dec	dx						;restore outer loop count
  1217 0000005F 75F8                    			jnz	.10						;continue outer loop
  1218 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1219                                  ;
  1220                                  ;	Enable hardware and maskable interrupts
  1221                                  ;
  1222 00000063 30C0                    			xor	al,al						;enable all registers code
  1223 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1224 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1225 00000069 FB                      			sti							;enable maskable interrupts
  1226                                  ;
  1227                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1228                                  ;
  1229 0000006A 2E0F001E[C000]          			ltr	[cs:cwLoaderTSS]				;load task register
  1230 00000070 2E0F0016[BE00]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1231 00000076 EA00006800              			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1232                                  ;-----------------------------------------------------------------------------------------------------------------------
  1233                                  ;
  1234                                  ;	Routine:	LoaderExit
  1235                                  ;
  1236                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1237                                  ;
  1238                                  ;	In:		DS:SI	string address
  1239                                  ;
  1240                                  ;-----------------------------------------------------------------------------------------------------------------------
  1241 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1242                                  ;
  1243                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1244                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1245                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1246                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1247                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1248                                  ;
  1249 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1250 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1251 00000082 7504                    			jnz	.40						;exit if key pressed
  1252 00000084 FB                      			sti							;enable maskable interrupts
  1253 00000085 F4                      			hlt							;wait for interrupt
  1254 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1255                                  ;
  1256                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1257                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1258                                  ;	HLT until the system resets.
  1259                                  ;
  1260 00000088 B0FE                    .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1261 0000008A E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1262 0000008C FB                      .50			sti							;enable maskable interrupts
  1263 0000008D F4                      			hlt							;stop until reset, int, nmi
  1264 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1265                                  ;-----------------------------------------------------------------------------------------------------------------------
  1266                                  ;
  1267                                  ;	Routine:	GetCPUType
  1268                                  ;
  1269                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1270                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1271                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1272                                  ;
  1273                                  ;	Out:		AX	0 = 808x, v20, etc.
  1274                                  ;				1 = 80186
  1275                                  ;				2 = 80286
  1276                                  ;				3 = 80386
  1277                                  ;
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1280 00000092 B120                    			mov	cl,32						;shift count
  1281 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1282 00000096 08C0                    			or	al,al						;did the shift happen?
  1283 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1284                                  			cpu	186
  1285 0000009A 54                      			push	sp						;save stack pointer
  1286 0000009B 59                      			pop	cx						;...into cx
  1287 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1288 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1289                                  			cpu	286
  1290 000000A0 40                      			inc	ax						;AX = 2
  1291 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1292 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1293 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1294 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1295 000000AE 40                      			inc	ax						;AX = 3
  1296 000000AF C3                      .10			ret							;return
  1297                                  ;-----------------------------------------------------------------------------------------------------------------------
  1298                                  ;
  1299                                  ;	Routine:	PutTTYString
  1300                                  ;
  1301                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1302                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1303                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1304                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1305                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1306                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1307                                  ;			registers and flags unless used to indicate return status.
  1308                                  ;
  1309                                  ;	In:		DS:SI	address of string
  1310                                  ;
  1311                                  ;-----------------------------------------------------------------------------------------------------------------------
  1312 000000B0 FC                      PutTTYString		cld							;forward strings
  1313 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1314 000000B2 84C0                    			test	al,al						;end of string?
  1315 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1316 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1317 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1318 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1319 000000BC C3                      .10			ret							;return
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  ;
  1322                                  ;	Loader Data
  1323                                  ;
  1324                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1325                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1326                                  ;
  1327                                  ;-----------------------------------------------------------------------------------------------------------------------
  1328 000000BD 90                      			align	2
  1329 000000BE 5000                    cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1330 000000C0 5800                    cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1331 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1332 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1333 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1333 000000D1 74696E672073797374-
  1333 000000DA 656D20726571756972-
  1333 000000E3 657320616E20693338-
  1333 000000EC 36206F72206C617465-
  1333 000000F5 722070726F63657373-
  1333 000000FE 6F722E0D0A         
  1334 00000103 506C65617365207072-     			db	"Please press any key to restart the computer.",13,10,0
  1334 0000010C 65737320616E79206B-
  1334 00000115 657920746F20726573-
  1334 0000011E 746172742074686520-
  1334 00000127 636F6D70757465722E-
  1334 00000130 0D0A00             
  1335 00000133 435055204F4B0D0A00      czCPUOKMsg		db	"CPU OK",13,10,0
  1336 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1336 00000145 7265640D0A00       
  1337 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1337 00000154 616465640D0A00     
  1338 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1338 00000164 4F530D0A00         
  1339 00000169 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1340 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1341                                  ;=======================================================================================================================
  1342                                  ;
  1343                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1344                                  ;
  1345                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1346                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1347                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1348                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1349                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1350                                  ;
  1351                                  ;=======================================================================================================================
  1352                                  ;=======================================================================================================================
  1353                                  ;
  1354                                  ;	Kernel Tables
  1355                                  ;
  1356                                  ;=======================================================================================================================
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  ;
  1359                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1360                                  ;
  1361                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1362                                  ;	first descriptor must be all nulls.
  1363                                  ;
  1364                                  ;	6   5         4         3         2         1         0
  1365                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1366                                  ;	----------------------------------------------------------------
  1367                                  ;	h......hffffmmmma......ab......................bn..............n
  1368                                  ;	00000000			all areas have base addresses below 2^24
  1369                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1370                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1371                                  ;	            1001		present, ring-0, selector
  1372                                  ;
  1373                                  ;	h...h	hi-order base address (bits 24-31)
  1374                                  ;	ffff	flags
  1375                                  ;	mmmm	hi-order limit (bits 16-19)
  1376                                  ;	a...a	access
  1377                                  ;	b...b	lo-order base address (bits 0-23)
  1378                                  ;	n...n	lo-order limit (bits 0-15)
  1379                                  ;
  1380                                  ;-----------------------------------------------------------------------------------------------------------------------
  1381                                  section			gdt							;global descriptor table
  1382 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1383 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1384 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1385 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1386 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1387 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1388 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1389 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1390 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1391 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1392 00000050 7F00000F00824000        			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1393 00000058 7F00800F00894000        			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1394 00000060 7F00004700824000        			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1395 00000068 7F00804700894000        			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1396 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1397                                  ;-----------------------------------------------------------------------------------------------------------------------
  1398                                  ;
  1399                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1400                                  ;
  1401                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1402                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1403                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1404                                  ;
  1405                                  ;	6   5         4         3         2         1         0
  1406                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1407                                  ;	----------------------------------------------------------------
  1408                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1409                                  ;
  1410                                  ;	h...h	high-order offset (bits 16-31)
  1411                                  ;	P	present (0=unused interrupt)
  1412                                  ;	zz	descriptor privilege level
  1413                                  ;	S	storage segment (must be zero for IDT)
  1414                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1415                                  ;	S...S	handling code selector in GDT
  1416                                  ;	l...l	lo-order offset (bits 0-15)
  1417                                  ;
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  section			idt							;interrupt descriptor table
  1420                                  			mint	dividebyzero					;00 divide by zero
  1420                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1420 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1421                                  			mint	singlestep					;01 single step
  1421                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1421 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1422                                  			mint	nmi						;02 non-maskable
  1422                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1422 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1423                                  			mint	break						;03 break
  1423                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1423 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1424                                  			mint	into						;04 into
  1424                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1424 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1425                                  			mint	bounds						;05 bounds
  1425                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1425 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1426                                  			mint	badopcode					;06 bad op code
  1426                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1426 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1427                                  			mint	nocoproc					;07 no coprocessor
  1427                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1427 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1428                                  			mint	doublefault					;08 double-fault
  1428                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1428 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1429                                  			mint	operand						;09 operand
  1429                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1429 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1430                                  			mint	badtss						;0a bad TSS
  1430                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1430 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1431                                  			mint	notpresent					;0b not-present
  1431                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1431 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1432                                  			mint	stacklimit					;0c stack limit
  1432                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1432 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1433                                  			mint	protection					;0d general protection fault
  1433                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1433 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1434                                  			mint	int14						;0e (reserved)
  1434                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1434 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1435                                  			mint	int15						;0f (reserved)
  1435                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1435 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1436                                  			mint	coproccalc					;10 (reserved)
  1436                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1436 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1437                                  			mint	int17						;11 (reserved)
  1437                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1437 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1438                                  			mint	int18						;12 (reserved)
  1438                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1438 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1439                                  			mint	int19						;13 (reserved)
  1439                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1439 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1440                                  			mint	int20						;14 (reserved)
  1440                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1440 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1441                                  			mint	int21						;15 (reserved)
  1441                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1441 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1442                                  			mint	int22						;16 (reserved)
  1442                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1442 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1443                                  			mint	int23						;17 (reserved)
  1443                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1443 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1444                                  			mint	int24						;18 (reserved)
  1444                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1444 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1445                                  			mint	int25						;19 (reserved)
  1445                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1445 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1446                                  			mint	int26						;1a (reserved)
  1446                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1446 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1447                                  			mint	int27						;1b (reserved)
  1447                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1447 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1448                                  			mint	int28						;1c (reserved)
  1448                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1448 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1449                                  			mint	int29						;1d (reserved)
  1449                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1449 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1450                                  			mint	int30						;1e (reserved)
  1450                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1450 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1451                                  			mint	int31						;1f (reserved)
  1451                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1451 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1452                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1452                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1452 00000100 3C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1453                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1453                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1453 00000108 8C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1454                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1454                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1454 00000110 E7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1455                                  			mtrap	com2						;23 IRQ3 com2
  1455                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1455 00000118 EA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1456                                  			mtrap	com1						;24 IRQ4 com1
  1456                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1456 00000120 ED054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1457                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1457                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1457 00000128 F0054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1458                                  			mtrap	diskette					;26 IRQ6 diskette
  1458                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1458 00000130 F3054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1459                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1459                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1459 00000138 07064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1460                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1460                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1460 00000140 0A064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1461                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1461                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1461 00000148 0D064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1462                                  			mtrap	irq10						;2a IRQA (reserved)
  1462                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1462 00000150 10064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1463                                  			mtrap	irq11						;2b IRQB (reserved)
  1463                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1463 00000158 13064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1464                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1464                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1464 00000160 16064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1465                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1465                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1465 00000168 19064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1466                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1466                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1466 00000170 1C064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1467                                  			mtrap	irq15						;2f IRQF (reserved)
  1467                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1467 00000178 1F064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1468                                  			mtrap	svc						;30 OS services
  1468                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1468 00000180 30064800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1469 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1470                                  ;=======================================================================================================================
  1471                                  ;
  1472                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1473                                  ;
  1474                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1475                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1476                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1477                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1478                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1479                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1480                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1481                                  ;
  1482                                  ;=======================================================================================================================
  1483                                  section			kernel	vstart=0h					;data offsets relative to 0
  1484                                  			cpu	386						;allow 80386 instructions
  1485                                  			bits	32						;this is 32-bit code
  1486                                  ;=======================================================================================================================
  1487                                  ;
  1488                                  ;	CPU Interrupt Handlers
  1489                                  ;
  1490                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1491                                  ;	of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1492                                  ;
  1493                                  ;=======================================================================================================================
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  ;
  1496                                  ;	INT0	Divide By Zero
  1497                                  ;
  1498                                  ;-----------------------------------------------------------------------------------------------------------------------
  1499                                  			menter	dividebyzero					;divide by zero
  1499                              <1> ?%1 equ ($-$$)
  1500 00000000 6A00                    			push	0						;store interrupt nbr
  1501 00000002 68[56010000]            			push	czIntDivideByZero				;store message offset
  1502 00000007 E947010000              			jmp	ReportInterrupt					;report interrupt
  1503                                  ;-----------------------------------------------------------------------------------------------------------------------
  1504                                  ;
  1505                                  ;	INT1	Single Step
  1506                                  ;
  1507                                  ;-----------------------------------------------------------------------------------------------------------------------
  1508                                  			menter	singlestep					;single step
  1508                              <1> ?%1 equ ($-$$)
  1509 0000000C 6A01                    			push	1						;store interrupt nbr
  1510 0000000E 68[67010000]            			push	czIntSingleStep					;store message offset
  1511 00000013 E93B010000              			jmp	ReportInterrupt					;report interrupt
  1512                                  ;-----------------------------------------------------------------------------------------------------------------------
  1513                                  ;
  1514                                  ;	INT2	Non-Maskable Interrupt
  1515                                  ;
  1516                                  ;-----------------------------------------------------------------------------------------------------------------------
  1517                                  			menter	nmi						;non-maskable
  1517                              <1> ?%1 equ ($-$$)
  1518 00000018 6A02                    			push	2						;store interrupt nbr
  1519 0000001A 68[73010000]            			push	czIntNonMaskable				;store message offset
  1520 0000001F E92F010000              			jmp	ReportInterrupt					;report interrupt
  1521                                  ;-----------------------------------------------------------------------------------------------------------------------
  1522                                  ;
  1523                                  ;	INT3	Break
  1524                                  ;
  1525                                  ;-----------------------------------------------------------------------------------------------------------------------
  1526                                  			menter	break						;break
  1526                              <1> ?%1 equ ($-$$)
  1527 00000024 6A03                    			push	3						;store interrupt nbr
  1528 00000026 68[8A010000]            			push	czIntBreak					;store message offset
  1529 0000002B E923010000              			jmp	ReportInterrupt					;report interrupt
  1530                                  ;-----------------------------------------------------------------------------------------------------------------------
  1531                                  ;
  1532                                  ;	INT4	Into
  1533                                  ;
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  			menter	into						;into
  1535                              <1> ?%1 equ ($-$$)
  1536 00000030 6A04                    			push	4						;store interrupt nbr
  1537 00000032 68[90010000]            			push	czIntInto					;store message offset
  1538 00000037 E917010000              			jmp	ReportInterrupt					;report interrupt
  1539                                  ;-----------------------------------------------------------------------------------------------------------------------
  1540                                  ;
  1541                                  ;	INT5	Bounds
  1542                                  ;
  1543                                  ;-----------------------------------------------------------------------------------------------------------------------
  1544                                  			menter	bounds						;bounds
  1544                              <1> ?%1 equ ($-$$)
  1545 0000003C 6A05                    			push	5						;store interrupt nbr
  1546 0000003E 68[95010000]            			push	czIntBounds					;store message offset
  1547 00000043 E90B010000              			jmp	ReportInterrupt					;report interrupt
  1548                                  ;-----------------------------------------------------------------------------------------------------------------------
  1549                                  ;
  1550                                  ;	INT6	Bad Operation Code
  1551                                  ;
  1552                                  ;-----------------------------------------------------------------------------------------------------------------------
  1553                                  			menter	badopcode					;bad opcode interrupt
  1553                              <1> ?%1 equ ($-$$)
  1554 00000048 6A06                    			push	6						;store interrupt nbr
  1555 0000004A 68[9C010000]            			push	czIntBadOpCode					;store message offset
  1556 0000004F E9FF000000              			jmp	ReportInterrupt					;report interrupt
  1557                                  ;-----------------------------------------------------------------------------------------------------------------------
  1558                                  ;
  1559                                  ;	INT7	No Coprocessor
  1560                                  ;
  1561                                  ;-----------------------------------------------------------------------------------------------------------------------
  1562                                  			menter	nocoproc					;no coprocessor interrupt
  1562                              <1> ?%1 equ ($-$$)
  1563 00000054 6A07                    			push	7						;store interrupt nbr
  1564 00000056 68[AF010000]            			push	czIntNoCoprocessor				;store message offset
  1565 0000005B E9F3000000              			jmp	ReportInterrupt					;report interrupt
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                  ;
  1568                                  ;	INT8	Double Fault
  1569                                  ;
  1570                                  ;-----------------------------------------------------------------------------------------------------------------------
  1571                                  			menter	doublefault					;doublefault interrupt
  1571                              <1> ?%1 equ ($-$$)
  1572 00000060 6A08                    			push	8						;store interrupt nbr
  1573 00000062 68[BE010000]            			push	czIntDoubleFault				;store message offset
  1574 00000067 E9E7000000              			jmp	ReportInterrupt					;report interrupt
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                  ;
  1577                                  ;	INT9	Operand
  1578                                  ;
  1579                                  ;-----------------------------------------------------------------------------------------------------------------------
  1580                                  			menter	operand						;operand interrupt
  1580                              <1> ?%1 equ ($-$$)
  1581 0000006C 6A09                    			push	9						;store interrupt nbr
  1582 0000006E 68[CB010000]            			push	czIntOperand					;store message offset
  1583 00000073 E9DB000000              			jmp	ReportInterrupt					;report interrupt
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;	INT10	Bad Task State Segment
  1587                                  ;
  1588                                  ;-----------------------------------------------------------------------------------------------------------------------
  1589                                  			menter	badtss						;bad tss interrupt
  1589                              <1> ?%1 equ ($-$$)
  1590 00000078 6A0A                    			push	10						;store interrupt nbr
  1591 0000007A 68[D3010000]            			push	czIntBadTSS					;store message offset
  1592 0000007F E9CF000000              			jmp	ReportInterrupt					;report interrupt
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                  ;
  1595                                  ;	INT11	Not Present
  1596                                  ;
  1597                                  ;-----------------------------------------------------------------------------------------------------------------------
  1598                                  			menter	notpresent					;not present interrupt
  1598                              <1> ?%1 equ ($-$$)
  1599 00000084 6A0B                    			push	11						;store interrupt nbr
  1600 00000086 68[EA010000]            			push	czIntNotPresent					;store message offset
  1601 0000008B E9C3000000              			jmp	ReportInterrupt					;report interrupt
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                  ;
  1604                                  ;	INT12	Stack Limit
  1605                                  ;
  1606                                  ;-----------------------------------------------------------------------------------------------------------------------
  1607                                  			menter	stacklimit					;stack limit interrupt
  1607                              <1> ?%1 equ ($-$$)
  1608 00000090 6A0C                    			push	12						;store interrupt nbr
  1609 00000092 68[F6010000]            			push	czIntStackLimit					;store message offset
  1610 00000097 E9B7000000              			jmp	ReportInterrupt					;report interrupt
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  ;
  1613                                  ;	INT13	General Protection Fault
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                  			menter	protection					;protection fault interrupt
  1616                              <1> ?%1 equ ($-$$)
  1617 0000009C 6A0D                    			push	13						;store interrupt nbr
  1618 0000009E 68[02020000]            			push	czIntProtection					;store message offset
  1619 000000A3 E9AB000000              			jmp	ReportInterrupt					;report interrupt
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;
  1622                                  ;	INT14	Reserved
  1623                                  ;
  1624                                  ;-----------------------------------------------------------------------------------------------------------------------
  1625                                  			menter	int14						;(reserved)
  1625                              <1> ?%1 equ ($-$$)
  1626 000000A8 6A0E                    			push	14						;store interrupt nbr
  1627 000000AA 68[33020000]            			push	czIntReserved					;store message offset
  1628 000000AF E99F000000              			jmp	ReportInterrupt					;report interrupt
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  ;
  1631                                  ;	INT15	Reserved
  1632                                  ;
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  			menter	int15						;(reserved)
  1634                              <1> ?%1 equ ($-$$)
  1635 000000B4 6A0F                    			push	15						;store interrupt nbr
  1636 000000B6 68[33020000]            			push	czIntReserved					;store message offset
  1637 000000BB E993000000              			jmp	ReportInterrupt					;report interrupt
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                  ;
  1640                                  ;	INT16	Coprocessor Calculation
  1641                                  ;
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  			menter	coproccalc					;coprocessor calculation
  1643                              <1> ?%1 equ ($-$$)
  1644 000000C0 6A10                    			push	16						;store interrupt nbr
  1645 000000C2 68[1B020000]            			push	czIntCoprocessorCalc				;store message offset
  1646 000000C7 E987000000              			jmp	ReportInterrupt					;report interrupt
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                  ;
  1649                                  ;	INT17	Reserved
  1650                                  ;
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  			menter	int17						;(reserved)
  1652                              <1> ?%1 equ ($-$$)
  1653 000000CC 6A11                    			push	17						;store interrupt nbr
  1654 000000CE 68[33020000]            			push	czIntReserved					;store message offset
  1655 000000D3 EB7E                    			jmp	ReportInterrupt					;report interrupt
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                  ;
  1658                                  ;	INT18	Reserved
  1659                                  ;
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  			menter	int18						;(reserved)
  1661                              <1> ?%1 equ ($-$$)
  1662 000000D5 6A12                    			push	18						;store interrupt nbr
  1663 000000D7 68[33020000]            			push	czIntReserved					;store message offset
  1664 000000DC EB75                    			jmp	ReportInterrupt					;report interrupt
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                  ;
  1667                                  ;	INT19	Reserved
  1668                                  ;
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  			menter	int19						;(reserved)
  1670                              <1> ?%1 equ ($-$$)
  1671 000000DE 6A13                    			push	19						;store interrupt nbr
  1672 000000E0 68[33020000]            			push	czIntReserved					;store message offset
  1673 000000E5 EB6C                    			jmp	ReportInterrupt					;report interrupt
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  ;
  1676                                  ;	INT20	Reserved
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  			menter	int20						;(reserved)
  1679                              <1> ?%1 equ ($-$$)
  1680 000000E7 6A14                    			push	20						;store interrupt nbr
  1681 000000E9 68[33020000]            			push	czIntReserved					;store message offset
  1682 000000EE EB63                    			jmp	ReportInterrupt					;report interrupt
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                  ;
  1685                                  ;	INT21	Reserved
  1686                                  ;
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  			menter	int21						;(reserved)
  1688                              <1> ?%1 equ ($-$$)
  1689 000000F0 6A15                    			push	21						;store interrupt nbr
  1690 000000F2 68[33020000]            			push	czIntReserved					;store message offset
  1691 000000F7 EB5A                    			jmp	ReportInterrupt					;report interrupt
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                  ;
  1694                                  ;	INT22	Reserved
  1695                                  ;
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  			menter	int22						;(reserved)
  1697                              <1> ?%1 equ ($-$$)
  1698 000000F9 6A16                    			push	22						;store interrupt nbr
  1699 000000FB 68[33020000]            			push	czIntReserved					;store message offset
  1700 00000100 EB51                    			jmp	ReportInterrupt					;report interrupt
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                  ;
  1703                                  ;	INT23	Reserved
  1704                                  ;
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                  			menter	int23						;(reserved)
  1706                              <1> ?%1 equ ($-$$)
  1707 00000102 6A17                    			push	23						;store interrupt nbr
  1708 00000104 68[33020000]            			push	czIntReserved					;store message offset
  1709 00000109 EB48                    			jmp	ReportInterrupt					;report interrupt
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;	INT24	Reserved
  1713                                  ;
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                  			menter	int24						;(reserved)
  1715                              <1> ?%1 equ ($-$$)
  1716 0000010B 6A18                    			push	24						;store interrupt nbr
  1717 0000010D 68[33020000]            			push	czIntReserved					;store message offset
  1718 00000112 EB3F                    			jmp	ReportInterrupt					;report interrupt
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                  ;
  1721                                  ;	INT25	Reserved
  1722                                  ;
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  			menter	int25						;(reserved)
  1724                              <1> ?%1 equ ($-$$)
  1725 00000114 6A19                    			push	25						;store interrupt nbr
  1726 00000116 68[33020000]            			push	czIntReserved					;store message offset
  1727 0000011B EB36                    			jmp	ReportInterrupt					;report interrupt
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                  ;
  1730                                  ;	INT26	Reserved
  1731                                  ;
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  			menter	int26						;(reserved)
  1733                              <1> ?%1 equ ($-$$)
  1734 0000011D 6A1A                    			push	26						;store interrupt nbr
  1735 0000011F 68[33020000]            			push	czIntReserved					;store message offset
  1736 00000124 EB2D                    			jmp	ReportInterrupt					;report interrupt
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                  ;
  1739                                  ;	INT27	Reserved
  1740                                  ;
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  			menter	int27						;(reserved)
  1742                              <1> ?%1 equ ($-$$)
  1743 00000126 6A1B                    			push	27						;store interrupt nbr
  1744 00000128 68[33020000]            			push	czIntReserved					;store message offset
  1745 0000012D EB24                    			jmp	ReportInterrupt					;report interrupt
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                  ;
  1748                                  ;	INT28	Reserved
  1749                                  ;
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  			menter	int28						;(reserved)
  1751                              <1> ?%1 equ ($-$$)
  1752 0000012F 6A1C                    			push	28						;store interrupt nbr
  1753 00000131 68[33020000]            			push	czIntReserved					;store message offset
  1754 00000136 EB1B                    			jmp	ReportInterrupt					;report interrupt
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                  ;
  1757                                  ;	INT29	Reserved
  1758                                  ;
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  			menter	int29						;(reserved)
  1760                              <1> ?%1 equ ($-$$)
  1761 00000138 6A1D                    			push	29						;store interrupt nbr
  1762 0000013A 68[33020000]            			push	czIntReserved					;store message offset
  1763 0000013F EB12                    			jmp	ReportInterrupt					;report interrupt
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                  ;
  1766                                  ;	INT30	Reserved
  1767                                  ;
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                  			menter	int30						;(reserved)
  1769                              <1> ?%1 equ ($-$$)
  1770 00000141 6A1E                    			push	30						;store interrupt nbr
  1771 00000143 68[33020000]            			push	czIntReserved					;store message offset
  1772 00000148 EB09                    			jmp	ReportInterrupt					;report interrupt
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;	INT31	Reserved
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                  			menter	int31						;(reserved)
  1778                              <1> ?%1 equ ($-$$)
  1779 0000014A 6A1F                    			push	31						;store interrupt nbr
  1780 0000014C 68[33020000]            			push	czIntReserved					;store message offset
  1781 00000151 EB00                    			jmp	ReportInterrupt					;report interrupt
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;	Routine:	ReportInterrupt
  1785                                  ;
  1786                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1787                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1788                                  ;
  1789                                  ;	In:		[esp+4]		interrupt number (0-31)			stored by push instruction
  1790                                  ;			[esp+0]		error message address			stored by push instructions
  1791                                  ;
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793 00000153 58                      ReportInterrupt		pop	eax						;error message address
  1794 00000154 58                      			pop	eax						;interrupt number
  1795 00000155 CF                      			iretd							;return
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;	Processor Interrupt Name Strings
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801 00000156 4469766973696F6E20-     czIntDivideByZero	db	"Division by zero",0
  1801 0000015F 6279207A65726F00   
  1802 00000167 53696E676C65207374-     czIntSingleStep		db	"Single step",0
  1802 00000170 657000             
  1803 00000173 4E6F6E2D6D61736B61-     czIntNonMaskable	db	"Non-maskable interrupt",0
  1803 0000017C 626C6520696E746572-
  1803 00000185 7275707400         
  1804 0000018A 427265616B00            czIntBreak		db	"Break",0
  1805 00000190 496E746F00              czIntInto		db	"Into",0
  1806 00000195 426F756E647300          czIntBounds		db	"Bounds",0
  1807 0000019C 426164204F70657261-     czIntBadOpCode		db	"Bad Operation Code",0
  1807 000001A5 74696F6E20436F6465-
  1807 000001AE 00                 
  1808 000001AF 4E6F20436F70726F63-     czIntNoCoprocessor	db	"No Coprocessor",0
  1808 000001B8 6573736F7200       
  1809 000001BE 446F75626C65204661-     czIntDoubleFault	db	"Double Fault",0
  1809 000001C7 756C7400           
  1810 000001CB 4F706572616E6400        czIntOperand		db	"Operand",0
  1811 000001D3 426164205461736B20-     czIntBadTSS		db	"Bad Task State Segment",0
  1811 000001DC 537461746520536567-
  1811 000001E5 6D656E7400         
  1812 000001EA 4E6F74205072657365-     czIntNotPresent		db	"Not Present",0
  1812 000001F3 6E7400             
  1813 000001F6 537461636B204C696D-     czIntStackLimit		db	"Stack Limit",0
  1813 000001FF 697400             
  1814 00000202 47656E6572616C2050-     czIntProtection		db	"General Protection Fault",0
  1814 0000020B 726F74656374696F6E-
  1814 00000214 204661756C7400     
  1815 0000021B 436F70726F63657373-     czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  1815 00000224 6F722043616C63756C-
  1815 0000022D 6174696F6E00       
  1816 00000233 526573657276656400      czIntReserved		db	"Reserved",0
  1817                                  ;=======================================================================================================================
  1818                                  ;
  1819                                  ;	Hardware Device Interupts
  1820                                  ;
  1821                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1822                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1823                                  ;	(BX=2028h).
  1824                                  ;
  1825                                  ;=======================================================================================================================
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;	IRQ0	Clock Tick Interrupt
  1829                                  ;
  1830                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1831                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1832                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1833                                  ;
  1834                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1835                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1836                                  ;
  1837                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1838                                  ;	zero, the floppy disk motors are turned off.
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  			menter	clocktick					;clock tick interrupt
  1841                              <1> ?%1 equ ($-$$)
  1842 0000023C 50                      			push	eax						;save modified regs
  1843 0000023D 52                      			push	edx						;
  1844 0000023E 1E                      			push	ds						;
  1845                                  ;
  1846                                  ;	Update the clock tick count and the elapsed days as needed
  1847                                  ;
  1848 0000023F 6A18                    			push	ESELDAT						;load OS data selector ...
  1849 00000241 1F                      			pop	ds						;... into data segment register
  1850 00000242 A16C040000              			mov	eax,[wdClockTicks]				;eax = clock ticks
  1851 00000247 40                      			inc	eax						;increment clock ticks
  1852 00000248 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1853 0000024D 7208                    			jb	irq0.10						;no, skip ahead
  1854 0000024F FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1855 00000255 31C0                    			xor	eax,eax						;reset clock ticks
  1856 00000257 A36C040000              irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  1857                                  ;
  1858                                  ;	Decrement floppy disk motor timeout
  1859                                  ;
  1860 0000025C 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1861 00000263 741E                    			je	irq0.20						;yes, skip ahead
  1862 00000265 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1863 0000026B 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1864                                  ;
  1865                                  ;	Turn off the floppy disk motor if appropriate
  1866                                  ;
  1867 0000026D FB                      			sti							;enable maskable interrupts
  1868 0000026E B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1869 00000270 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1870 00000272 EC                      			in	al,dx						;FDC main status byte
  1871 00000273 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1872 00000275 75F7                    			jnz	irq0.15						;wait while busy
  1873 00000277 B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1874 00000279 A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1875 0000027E B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1876 00000280 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1877 00000282 EE                      			out	dx,al						;turn motor off
  1878                                  ;
  1879                                  ;	Signal the end of the hardware interrupt
  1880                                  ;
  1881 00000283 E826070000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1882                                  ;
  1883                                  ;	Restore and return
  1884                                  ;
  1885 00000288 1F                      			pop	ds						;restore modified regs
  1886 00000289 5A                      			pop	edx						;
  1887 0000028A 58                      			pop	eax						;
  1888 0000028B CF                      			iretd							;return
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;	IRQ1	Keyboard Interrupt
  1892                                  ;
  1893                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1894                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1895                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1896                                  ;	ALL modified registers upon return.
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  			menter	keyboard					;keyboard interrrupt
  1899                              <1> ?%1 equ ($-$$)
  1900 0000028C 50                      			push	eax						;save non-volatile regs
  1901 0000028D 53                      			push	ebx						;
  1902 0000028E 51                      			push	ecx						;
  1903 0000028F 56                      			push	esi						;
  1904 00000290 1E                      			push	ds						;
  1905 00000291 6A18                    			push	ESELDAT						;load OS data selector ...
  1906 00000293 1F                      			pop	ds						;... into data segment register
  1907 00000294 30C0                    			xor	al,al						;zero
  1908 00000296 A205080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1909 0000029B A206080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1910 000002A0 A207080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1911 000002A5 A208080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1912 000002AA A209080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1913 000002AF A20A080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1914 000002B4 B020                    			mov	al,' '						;space
  1915 000002B6 A20B080000              			mov	[wbConsoleChar],al				;set character to space
  1916 000002BB B080                    			mov	al,EKEYFTIMEOUT					;controller timeout flag
  1917 000002BD F6D0                    			not	al						;controller timeout mask
  1918 000002BF 200504080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1919 000002C5 8A1D02080000            			mov	bl,[wbConsoleShift]				;shift flags
  1920 000002CB 8A3D03080000            			mov	bh,[wbConsoleLock]				;lock flags
  1921 000002D1 E813070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1922 000002D6 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  1923 000002DC E460                    			in	al,EKEYBPORTDATA				;read scan code 0
  1924 000002DE A205080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1925 000002E3 88C4                    			mov	ah,al						;copy scan code 0
  1926 000002E5 B002                    			mov	al,EKEYFSHIFTLEFT				;left shift flag
  1927 000002E7 80FC2A                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  1928 000002EA 0F84E0000000            			je	irq1.30						;yes, set flag
  1929 000002F0 80FCAA                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  1930 000002F3 0F84DB000000            			je	irq1.40						;yes, reset flag
  1931 000002F9 B010                    			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  1932 000002FB 80FC36                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  1933 000002FE 0F84CC000000            			je	irq1.30						;yes, set flag
  1934 00000304 80FCB6                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  1935 00000307 0F84C7000000            			je	irq1.40						;yes, reset flag
  1936 0000030D B001                    			mov	al,EKEYFCTRLLEFT				;left control flag
  1937 0000030F 80FC1D                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1938 00000312 0F84B8000000            			je	irq1.30						;yes, set flag
  1939 00000318 80FC9D                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1940 0000031B 0F84B3000000            			je	irq1.40						;yes, reset flag
  1941 00000321 B004                    			mov	al,EKEYFALTLEFT					;left alt flag
  1942 00000323 80FC38                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1943 00000326 0F84A4000000            			je	irq1.30						;yes, set flag
  1944 0000032C 80FCB8                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1945 0000032F 0F849F000000            			je	irq1.40						;yes, reset flag
  1946 00000335 B004                    			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  1947 00000337 80FC3A                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  1948 0000033A 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1949 00000340 B002                    			mov	al,EKEYFLOCKNUM					;num-lock flag
  1950 00000342 80FC45                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  1951 00000345 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1952 0000034B B001                    			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  1953 0000034D 80FC46                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  1954 00000350 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1955 00000356 80FCE0                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  1956 00000359 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1957 0000035F E885060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1958 00000364 0F8465010000            			jz	irq1.140					;yes, skip ahead
  1959 0000036A E460                    			in	al,EKEYBPORTDATA				;read scan code 1
  1960 0000036C A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1961 00000371 88C4                    			mov	ah,al						;copy scan code 1
  1962 00000373 B008                    			mov	al,EKEYFCTRLRIGHT				;right control flag
  1963 00000375 80FC1D                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1964 00000378 7456                    			je	irq1.30						;yes, set flag
  1965 0000037A 80FC9D                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1966 0000037D 7455                    			je	irq1.40						;yes, reset flag
  1967 0000037F B020                    			mov	al,EKEYFALTRIGHT				;right alt flag
  1968 00000381 80FC38                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1969 00000384 744A                    			je	irq1.30						;yes, set flag
  1970 00000386 80FCB8                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1971 00000389 7449                    			je	irq1.40						;yes, reset flag
  1972 0000038B 80FC35                  			cmp	ah,EKEYBSLASH					;slash down code?
  1973 0000038E 0F84CB000000            			je	irq1.80						;yes, skip ahead
  1974 00000394 80FCB5                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  1975 00000397 0F84C2000000            			je	irq1.80						;yes, skip ahead
  1976 0000039D 80FC2A                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  1977 000003A0 7405                    			je	irq1.10						;yes, continue
  1978 000003A2 80FCB7                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  1979 000003A5 7524                    			jne	irq1.20						;no, skip ahead
  1980 000003A7 E83D060000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1981 000003AC 0F841D010000            			jz	irq1.140					;yes, skip ahead
  1982 000003B2 E460                    			in	al,EKEYBPORTDATA				;read scan code 2
  1983 000003B4 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1984 000003B9 E82B060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1985 000003BE 0F840B010000            			jz	irq1.140					;yes, skip ahead
  1986 000003C4 E460                    			in	al,EKEYBPORTDATA				;read scan code 3
  1987 000003C6 A208080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1988 000003CB E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1989 000003D0 08C3                    irq1.30			or	bl,al						;set shift flag
  1990 000003D2 EB0D                    			jmp	irq1.60						;skip ahead
  1991 000003D4 F6D0                    irq1.40			not	al						;convert flag to mask
  1992 000003D6 20C3                    			and	bl,al						;reset shift flag
  1993 000003D8 EB07                    			jmp	irq1.60						;skip ahead
  1994 000003DA 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1995 000003DC E8D9050000              			call	SetKeyboardLamps				;update keyboard lamps
  1996 000003E1 881D02080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1997 000003E7 883D03080000            			mov	[wbConsoleLock],bh				;save lock flags
  1998 000003ED E8A0030000              			call	PutConsoleOIAShift				;update OIA indicators
  1999 000003F2 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  2000 000003F7 80FCE1                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2001 000003FA 7563                    			jne	irq1.80						;no continue
  2002 000003FC E8E8050000              			call	WaitForKeyOutBuffer				;controller timeout?
  2003 00000401 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  2004 00000407 E460                    			in	al,EKEYBPORTDATA				;read scan code 1
  2005 00000409 A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  2006 0000040E 88C4                    			mov	ah,al						;copy scan code 1
  2007 00000410 80FC1D                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2008 00000413 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  2009 00000419 E8CB050000              			call	WaitForKeyOutBuffer				;controller timeout?
  2010 0000041E 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  2011 00000424 E460                    			in	al,EKEYBPORTDATA				;read scan code 2
  2012 00000426 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  2013 0000042B E8B9050000              			call	WaitForKeyOutBuffer				;controller timeout?
  2014 00000430 0F8499000000            			jz	irq1.140					;yes, skip ahead
  2015 00000436 E460                    			in	al,EKEYBPORTDATA				;read scan code 3
  2016 00000438 A208080000              			mov	[wbConsoleScan3],al				;save scan code 3
  2017 0000043D E8A7050000              			call	WaitForKeyOutBuffer				;controller timeout?
  2018 00000442 0F8487000000            			jz	irq1.140					;yes, skip ahead
  2019 00000448 E460                    			in	al,EKEYBPORTDATA				;read scan code 4
  2020 0000044A A209080000              			mov	[wbConsoleScan4],al				;save scan code 4
  2021 0000044F E895050000              			call	WaitForKeyOutBuffer				;controller timeout?
  2022 00000454 7479                    			jz	irq1.140					;yes, skip ahead
  2023 00000456 E460                    			in	al,EKEYBPORTDATA				;read scan code 5
  2024 00000458 A20A080000              			mov	[wbConsoleScan5],al				;save scan code 5
  2025 0000045D EB78                    			jmp	irq1.150					;continue
  2026 0000045F 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  2027 00000461 F6C480                  			test	ah,EKEYBUP					;release code?
  2028 00000464 7567                    			jnz	irq1.130					;yes, skip ahead
  2029 00000466 BE[E7040000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  2030 0000046B F6C312                  			test	bl,EKEYFSHIFT					;either shift key down?
  2031 0000046E 7405                    			jz	irq1.90						;no, skip ahead
  2032 00000470 BE[67050000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  2033 00000475 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  2034 00000478 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  2035 0000047C F6C704                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2036 0000047F 7411                    			jz	irq1.100					;no skip ahead
  2037 00000481 88C1                    			mov	cl,al						;copy ASCII code
  2038 00000483 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2039 00000486 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2040 00000489 7207                    			jb	irq1.100					;yes, skip ahead
  2041 0000048B 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2042 0000048E 7702                    			ja	irq1.100					;yes, skip ahead
  2043 00000490 3420                    			xor	al,EASCIICASE					;switch case
  2044 00000492 A20B080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2045 00000497 BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2046 0000049C F6C480                  			test	ah,EKEYBUP					;release scan-code?
  2047 0000049F 7405                    			jz	irq1.120					;no, skip ahead
  2048 000004A1 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  2049 000004A6 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  2050 000004AB 09C2                    			or	edx,eax						;msg id and codes
  2051 000004AD 31C9                    			xor	ecx,ecx						;null param
  2052 000004AF 50                      			push	eax						;save codes
  2053 000004B0 E8F5030000              			call	PutMessage					;put message to console
  2054 000004B5 58                      			pop	eax						;restore codes
  2055 000004B6 84C0                    			test	al,al						;ASCII translation?
  2056 000004B8 7413                    			jz	irq1.130					;no, skip ahead
  2057 000004BA BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  2058 000004BF 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  2059 000004C4 09C2                    			or	edx,eax						;msg id and codes
  2060 000004C6 31C9                    			xor	ecx,ecx						;null param
  2061 000004C8 E8DD030000              			call	PutMessage					;put message to console
  2062 000004CD EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  2063 000004CF B080                    irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2064 000004D1 080504080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  2065 000004D7 E850030000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  2066 000004DC E8CD040000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2067 000004E1 1F                      			pop	ds						;restore non-volatile regs
  2068 000004E2 5E                      			pop	esi						;
  2069 000004E3 59                      			pop	ecx						;
  2070 000004E4 5B                      			pop	ebx						;
  2071 000004E5 58                      			pop	eax						;
  2072 000004E6 CF                      			iretd							;return
  2073                                  ;-----------------------------------------------------------------------------------------------------------------------
  2074                                  ;	Scan-Code to ASCII Translation Tables
  2075                                  ;-----------------------------------------------------------------------------------------------------------------------
  2076 000004E7 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2077 000004EF 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2078 000004F7 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2079 000004FF 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2080 00000507 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2081 0000050F 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2082 00000517 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2083 0000051F 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2084 00000527 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2085 0000052F 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2086 00000537 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2087 0000053F 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2088 00000547 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2089 0000054F 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2090 00000557 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2091 0000055F 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2092 00000567 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2093 0000056F 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2094 00000577 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2095 0000057F 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2096 00000587 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2097 0000058F 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2098 00000597 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2099 0000059F 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2100 000005A7 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2101 000005AF 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2102 000005B7 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2103 000005BF 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2104 000005C7 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2105 000005CF 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2106 000005D7 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2107 000005DF 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2108                                  ;-----------------------------------------------------------------------------------------------------------------------
  2109                                  ;
  2110                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2111                                  ;
  2112                                  ;-----------------------------------------------------------------------------------------------------------------------
  2113                                  			menter	iochannel					;secondary 8259A cascade
  2113                              <1> ?%1 equ ($-$$)
  2114 000005E7 50                      			push	eax						;save modified regs
  2115 000005E8 EB3F                    			jmp	hwint						;end interrupt and return
  2116                                  ;-----------------------------------------------------------------------------------------------------------------------
  2117                                  ;
  2118                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2119                                  ;
  2120                                  ;-----------------------------------------------------------------------------------------------------------------------
  2121                                  			menter	com2						;serial port 2 interrupt
  2121                              <1> ?%1 equ ($-$$)
  2122 000005EA 50                      			push	eax						;save modified regs
  2123 000005EB EB3C                    			jmp	hwint						;end interrupt and return
  2124                                  ;-----------------------------------------------------------------------------------------------------------------------
  2125                                  ;
  2126                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2127                                  ;
  2128                                  ;-----------------------------------------------------------------------------------------------------------------------
  2129                                  			menter	com1						;serial port 1 interrupt
  2129                              <1> ?%1 equ ($-$$)
  2130 000005ED 50                      			push	eax						;save modified regs
  2131 000005EE EB39                    			jmp	hwint						;end interrupt and return
  2132                                  ;-----------------------------------------------------------------------------------------------------------------------
  2133                                  ;
  2134                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2135                                  ;
  2136                                  ;-----------------------------------------------------------------------------------------------------------------------
  2137                                  			menter	lpt2						;parallel port 2 interrupt
  2137                              <1> ?%1 equ ($-$$)
  2138 000005F0 50                      			push	eax						;save modified regs
  2139 000005F1 EB36                    			jmp	hwint						;end interrupt and return
  2140                                  ;-----------------------------------------------------------------------------------------------------------------------
  2141                                  ;
  2142                                  ;	IRQ6	Diskette Hardware Interrupt
  2143                                  ;
  2144                                  ;-----------------------------------------------------------------------------------------------------------------------
  2145                                  			menter	diskette					;floppy disk interrupt
  2145                              <1> ?%1 equ ($-$$)
  2146 000005F3 50                      			push	eax						;save non-volatile regs
  2147 000005F4 1E                      			push	ds						;
  2148 000005F5 6A18                    			push	ESELDAT						;load OS data selector ...
  2149 000005F7 1F                      			pop	ds						;... into DS register
  2150 000005F8 A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2151 000005FD 0C80                    			or	al,10000000b					;set IRQ flag
  2152 000005FF A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  2153 00000604 1F                      			pop	ds						;restore non-volatile regs
  2154 00000605 EB22                    			jmp	hwint						;end primary PIC interrupt
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156                                  ;
  2157                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2158                                  ;
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  			menter	lpt1						;parallel port 1 interrupt
  2160                              <1> ?%1 equ ($-$$)
  2161 00000607 50                      			push	eax						;save modified regs
  2162 00000608 EB1F                    			jmp	hwint						;end interrupt and return
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  ;
  2165                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2166                                  ;
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  			menter	rtclock						;real-time clock interrupt
  2168                              <1> ?%1 equ ($-$$)
  2169 0000060A 50                      			push	eax						;save modified regs
  2170 0000060B EB15                    			jmp	hwwint						;end interrupt and return
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                  ;
  2173                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2174                                  ;
  2175                                  ;-----------------------------------------------------------------------------------------------------------------------
  2176                                  			menter	retrace						;CGA vertical retrace interrupt
  2176                              <1> ?%1 equ ($-$$)
  2177 0000060D 50                      			push	eax						;save modified regs
  2178 0000060E EB12                    			jmp	hwwint						;end interrupt and return
  2179                                  ;-----------------------------------------------------------------------------------------------------------------------
  2180                                  ;
  2181                                  ;	IRQ10	Reserved Hardware Interrupt
  2182                                  ;
  2183                                  ;-----------------------------------------------------------------------------------------------------------------------
  2184                                  			menter	irq10						;reserved
  2184                              <1> ?%1 equ ($-$$)
  2185 00000610 50                      			push	eax						;save modified regs
  2186 00000611 EB0F                    			jmp	hwwint						;end interrupt and return
  2187                                  ;-----------------------------------------------------------------------------------------------------------------------
  2188                                  ;
  2189                                  ;	IRQ11	Reserved Hardware Interrupt
  2190                                  ;
  2191                                  ;-----------------------------------------------------------------------------------------------------------------------
  2192                                  			menter	irq11						;reserved
  2192                              <1> ?%1 equ ($-$$)
  2193 00000613 50                      			push	eax						;save modified regs
  2194 00000614 EB0C                    			jmp	hwwint						;end interrupt and return
  2195                                  ;-----------------------------------------------------------------------------------------------------------------------
  2196                                  ;
  2197                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2198                                  ;
  2199                                  ;-----------------------------------------------------------------------------------------------------------------------
  2200                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2200                              <1> ?%1 equ ($-$$)
  2201 00000616 50                      			push	eax						;save modified regs
  2202 00000617 EB09                    			jmp	hwwint						;end interrupt and return
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  ;
  2205                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  			menter	coprocessor					;coprocessor interrupt
  2208                              <1> ?%1 equ ($-$$)
  2209 00000619 50                      			push	eax						;save modified regs
  2210 0000061A EB06                    			jmp	hwwint						;end interrupt and return
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                  ;
  2213                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2214                                  ;
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  			menter	fixeddisk					;fixed disk interrupt
  2216                              <1> ?%1 equ ($-$$)
  2217 0000061C 50                      			push	eax						;save modified regs
  2218 0000061D EB03                    			jmp	hwwint						;end interrupt and return
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  ;
  2221                                  ;	IRQ15	Reserved Hardware Interrupt
  2222                                  ;
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                  			menter	irq15						;reserved
  2224                              <1> ?%1 equ ($-$$)
  2225 0000061F 50                      			push	eax						;save modified regs
  2226 00000620 EB00                    			jmp	hwwint						;end interrupt and return
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                  ;
  2229                                  ;	Exit from hardware interrupt
  2230                                  ;
  2231                                  ;-----------------------------------------------------------------------------------------------------------------------
  2232 00000622 E88D030000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2233 00000627 EB05                    			jmp	hwint90						;skip ahead
  2234 00000629 E880030000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2235 0000062E 58                      hwint90			pop	eax						;restore modified regs
  2236 0000062F CF                      			iretd							;return from interrupt
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                  ;
  2239                                  ;	INT 30h Operating System Software Service Interrupt
  2240                                  ;
  2241                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2242                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2243                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2244                                  ;	the entry address of the specific function from a table.
  2245                                  ;
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  			menter	svc
  2247                              <1> ?%1 equ ($-$$)
  2248 00000630 3C04                    			cmp	al,maxtsvc					;is our function out of range?
  2249 00000632 730D                    			jae	svc90						;yes, skip ahead
  2250 00000634 0FB6C0                  			movzx	eax,al						;function
  2251 00000637 C1E002                  			shl	eax,2						;offset into table
  2252 0000063A 2EFF90[42060000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  2253 00000641 CF                      svc90			iretd							;return from interrupt
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                  ;
  2256                                  ;	Service Request Table
  2257                                  ;
  2258                                  ;
  2259                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2260                                  ;
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2262                              <1> tsvc :
  2262                              <1> e%1 equ ($-tsvc)/4
  2262 00000642 [07090000]          <1>  dd %1
  2263                                  			tsvce	GetConsoleString				;get string input
  2263                              <1> e%1 equ ($-tsvc)/4
  2263 00000646 [7F060000]          <1>  dd %1
  2264                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2264                              <1> e%1 equ ($-tsvc)/4
  2264 0000064A [84090000]          <1>  dd %1
  2265                                  			tsvce	PutConsoleString				;tty output asciiz string
  2265                              <1> e%1 equ ($-tsvc)/4
  2265 0000064E [52060000]          <1>  dd %1
  2266                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2267                                  ;-----------------------------------------------------------------------------------------------------------------------
  2268                                  ;
  2269                                  ;	Service Request Macros
  2270                                  ;
  2271                                  ;	These macros provide positional parameterization of service request calls.
  2272                                  ;
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  %macro			clearConsoleScreen 0
  2275                                  			mov	al,eClearConsoleScreen				;function code
  2276                                  			int	_svc						;invoke OS service
  2277                                  %endmacro
  2278                                  %macro			getConsoleString 4
  2279                                  			mov	edx,%1						;buffer address
  2280                                  			mov	ecx,%2						;max characters
  2281                                  			mov	bh,%3						;echo indicator
  2282                                  			mov	bl,%4						;terminator
  2283                                  			mov	al,eGetConsoleString				;function code
  2284                                  			int	_svc						;invoke OS service
  2285                                  %endmacro
  2286                                  %macro			placeCursor 0
  2287                                  			mov	al,ePlaceCursor					;function code
  2288                                  			int	_svc						;invoke OS service
  2289                                  %endmacro
  2290                                  %macro			putConsoleString 1
  2291                                  			mov	edx,%1						;string address
  2292                                  			mov	al,ePutConsoleString				;function code
  2293                                  			int	_svc						;invoke OS service
  2294                                  %endmacro
  2295                                  ;=======================================================================================================================
  2296                                  ;
  2297                                  ;	Kernel Function Library
  2298                                  ;
  2299                                  ;=======================================================================================================================
  2300                                  ;=======================================================================================================================
  2301                                  ;
  2302                                  ;	Console Helper Routines
  2303                                  ;
  2304                                  ;	PutConsoleString
  2305                                  ;	GetConsoleString
  2306                                  ;	GetConsoleChar
  2307                                  ;	Yield
  2308                                  ;	PreviousConsoleColumn
  2309                                  ;	NextConsoleColumn
  2310                                  ;	FirstConsoleColumn
  2311                                  ;	NextConsoleRow
  2312                                  ;	PutConsoleChar
  2313                                  ;	PutConsoleOIAShift
  2314                                  ;	PutConsoleOIAChar
  2315                                  ;	PutConsoleHexByte
  2316                                  ;
  2317                                  ;=======================================================================================================================
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319                                  ;
  2320                                  ;	Routine:	PutConsoleString
  2321                                  ;
  2322                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2323                                  ;			console position as needed.
  2324                                  ;
  2325                                  ;	In:		EDX	source address
  2326                                  ;			DS	OS data selector
  2327                                  ;
  2328                                  ;-----------------------------------------------------------------------------------------------------------------------
  2329 00000652 56                      PutConsoleString	push	esi						;save non-volatile regs
  2330 00000653 89D6                    			mov	esi,edx						;source address
  2331 00000655 FC                      			cld							;forward strings
  2332 00000656 AC                      .10			lodsb							;ASCII character
  2333 00000657 08C0                    			or	al,al						;end of string?
  2334 00000659 7422                    			jz	.40						;yes, skip ahead
  2335 0000065B 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  2336 0000065D 7507                    			jne	.20						;no, skip ahead
  2337 0000065F E8EB000000              			call	FirstConsoleColumn				;move to start of row
  2338 00000664 EBF0                    			jmp	.10						;next character
  2339 00000666 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2340 00000668 7507                    			jne	.30						;no, skip ahead
  2341 0000066A E8E8000000              			call	NextConsoleRow					;move to next row
  2342 0000066F EBE5                    			jmp	.10						;next character
  2343 00000671 E803010000              .30			call	PutConsoleChar					;output character to console
  2344 00000676 E8B9000000              			call	NextConsoleColumn				;advance to next column
  2345 0000067B EBD9                    			jmp	.10						;next character
  2346 0000067D 5E                      .40			pop	esi						;restore non-volatile regs
  2347 0000067E C3                      			ret							;return
  2348                                  ;-----------------------------------------------------------------------------------------------------------------------
  2349                                  ;
  2350                                  ;	Routine:	GetConsoleString
  2351                                  ;
  2352                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2353                                  ;
  2354                                  ;	In:		DS:EDX	target buffer address
  2355                                  ;			ECX	maximum number of characters to accept
  2356                                  ;			BH	echo to terminal
  2357                                  ;			BL	terminating character
  2358                                  ;
  2359                                  ;-----------------------------------------------------------------------------------------------------------------------
  2360 0000067F 51                      GetConsoleString	push	ecx						;save non-volatile regs
  2361 00000680 56                      			push	esi						;
  2362 00000681 57                      			push	edi						;
  2363 00000682 06                      			push	es						;
  2364 00000683 1E                      			push	ds						;load data segment selector ...
  2365 00000684 07                      			pop	es						;... into extra segment register
  2366 00000685 89D7                    			mov	edi,edx						;edi = target buffer
  2367 00000687 51                      			push	ecx						;save maximum characters
  2368 00000688 30C0                    			xor	al,al						;zero register
  2369 0000068A FC                      			cld							;forward strings
  2370 0000068B F3AA                    			rep	stosb						;zero fill buffer
  2371 0000068D 59                      			pop	ecx						;maximum characters
  2372 0000068E 89D7                    			mov	edi,edx						;edi = target buffer
  2373 00000690 89D6                    			mov	esi,edx						;esi = target buffer
  2374 00000692 E34E                    .10			jecxz	.50						;exit if max-length is zero
  2375 00000694 E856000000              .20			call	GetConsoleChar					;al = next input char
  2376 00000699 38D8                    			cmp	al,bl						;is this the terminator?
  2377 0000069B 7445                    			je	.50						;yes, exit
  2378 0000069D 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2379 0000069F 7521                    			jne	.30						;no, skip ahead
  2380 000006A1 39FE                    			cmp	esi,edi						;at start of buffer?
  2381 000006A3 74EF                    			je	.20						;yes, get next character
  2382 000006A5 4F                      			dec	edi						;backup target pointer
  2383 000006A6 C60700                  			mov	byte [edi],0					;zero previous character
  2384 000006A9 41                      			inc	ecx						;increment remaining chars
  2385 000006AA F6C701                  			test	bh,1						;echo to console?
  2386 000006AD 74E5                    			jz	.20						;no, get next character
  2387 000006AF E85B000000              			call	PreviousConsoleColumn				;backup console position
  2388 000006B4 B020                    			mov	al,EASCIISPACE					;ASCII space
  2389 000006B6 E8BE000000              			call	PutConsoleChar					;write space to console
  2390 000006BB E8C4020000              			call	PlaceCursor					;position the cursor
  2391 000006C0 EBD2                    			jmp	.20						;get next character
  2392 000006C2 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2393 000006C4 72CE                    			jb	.20						;no, get another character
  2394 000006C6 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2395 000006C8 77CA                    			ja	.20						;no, get another character
  2396 000006CA AA                      			stosb							;store character in buffer
  2397 000006CB F6C701                  			test	bh,1						;echo to console?
  2398 000006CE 740F                    			jz	.40						;no, skip ahead
  2399 000006D0 E8A4000000              			call	PutConsoleChar					;write character to console
  2400 000006D5 E85A000000              			call	NextConsoleColumn				;advance console position
  2401 000006DA E8A5020000              			call	PlaceCursor					;position the cursor
  2402 000006DF 49                      .40			dec	ecx						;decrement remaining chars
  2403 000006E0 EBB0                    			jmp	.10						;next
  2404 000006E2 30C0                    .50			xor	al,al						;null
  2405 000006E4 AA                      			stosb							;terminate buffer
  2406 000006E5 07                      			pop	es						;restore non-volatile regs
  2407 000006E6 5F                      			pop	edi						;
  2408 000006E7 5E                      			pop	esi						;
  2409 000006E8 59                      			pop	ecx						;
  2410 000006E9 C3                      			ret							;return
  2411                                  ;-----------------------------------------------------------------------------------------------------------------------
  2412                                  ;
  2413                                  ;	Routine:	GetConsoleChar
  2414                                  ;
  2415                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2416                                  ;
  2417                                  ;	Out:		AL	ASCII character code
  2418                                  ;			AH	keyboard scan code
  2419                                  ;
  2420                                  ;-----------------------------------------------------------------------------------------------------------------------
  2421 000006EA E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  2422 000006EF E8DE010000              GetConsoleChar		call	GetMessage					;get the next message
  2423 000006F4 09C0                    			or	eax,eax						;do we have a message?
  2424 000006F6 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  2425 000006F8 50                      			push	eax						;save key codes
  2426 000006F9 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  2427 000006FE 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  2428 00000703 58                      			pop	eax						;restore key codes
  2429 00000704 75E9                    			jne	GetConsoleChar					;no, try again
  2430 00000706 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  2431 0000070B C3                      			ret							;return
  2432                                  ;-----------------------------------------------------------------------------------------------------------------------
  2433                                  ;
  2434                                  ;	Routine:	Yield
  2435                                  ;
  2436                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2437                                  ;
  2438                                  ;-----------------------------------------------------------------------------------------------------------------------
  2439 0000070C FB                      Yield			sti							;enable maskagle interrupts
  2440 0000070D F4                      			hlt							;halt until external interrupt
  2441 0000070E C3                      			ret							;return
  2442                                  ;-----------------------------------------------------------------------------------------------------------------------
  2443                                  ;
  2444                                  ;	Routine:	PreviousConsoleColumn
  2445                                  ;
  2446                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2447                                  ;			the column is set to the last position in the row and the row is decremented.
  2448                                  ;
  2449                                  ;	In:		DS	OS data selector
  2450                                  ;
  2451                                  ;-----------------------------------------------------------------------------------------------------------------------
  2452 0000070F A000080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2453 00000714 08C0                    			or	al,al						;start of row?
  2454 00000716 7514                    			jnz	.10						;no, skip ahead
  2455 00000718 8A2501080000            			mov	ah,[wbConsoleRow]				;current row
  2456 0000071E 08E4                    			or	ah,ah						;top of screen?
  2457 00000720 7411                    			jz	.20						;yes, exit with no change
  2458 00000722 FECC                    			dec	ah						;decrement row
  2459 00000724 882501080000            			mov	[wbConsoleRow],ah				;save row
  2460 0000072A B050                    			mov	al,ECONCOLS					;set maximum column
  2461 0000072C FEC8                    .10			dec	al						;decrement column
  2462 0000072E A200080000              			mov	[wbConsoleColumn],al				;save column
  2463 00000733 C3                      .20			ret							;return
  2464                                  ;-----------------------------------------------------------------------------------------------------------------------
  2465                                  ;
  2466                                  ;	Routine:	NextConsoleColumn
  2467                                  ;
  2468                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2469                                  ;			incremented if the end of the current row is reached.
  2470                                  ;
  2471                                  ;	In:		DS	OS data selector
  2472                                  ;
  2473                                  ;-----------------------------------------------------------------------------------------------------------------------
  2474 00000734 A000080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2475 00000739 FEC0                    			inc	al						;increment column
  2476 0000073B A200080000              			mov	[wbConsoleColumn],al				;save column
  2477 00000740 3C50                    			cmp	al,ECONCOLS					;end of row?
  2478 00000742 720A                    			jb	.10						;no, skip ahead
  2479 00000744 E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2480 00000749 E809000000              			call	NextConsoleRow					;line feed to next row
  2481 0000074E C3                      .10			ret							;return
  2482                                  ;-----------------------------------------------------------------------------------------------------------------------
  2483                                  ;
  2484                                  ;	Routine:	FirstConsoleColumn
  2485                                  ;
  2486                                  ;	Description:	This routine resets the console column to start of the row.
  2487                                  ;
  2488                                  ;	In:		DS	OS data selector
  2489                                  ;
  2490                                  ;-----------------------------------------------------------------------------------------------------------------------
  2491 0000074F 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2492 00000751 A200080000              			mov	[wbConsoleColumn],al				;save column
  2493 00000756 C3                      			ret							;return
  2494                                  ;-----------------------------------------------------------------------------------------------------------------------
  2495                                  ;
  2496                                  ;	Routine:	NextConsoleRow
  2497                                  ;
  2498                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2499                                  ;
  2500                                  ;	In:		DS	OS data selector
  2501                                  ;
  2502                                  ;-----------------------------------------------------------------------------------------------------------------------
  2503 00000757 A001080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2504 0000075C FEC0                    			inc	al						;increment row
  2505 0000075E A201080000              			mov	[wbConsoleRow],al				;save row
  2506 00000763 3C18                    			cmp	al,ECONROWS					;end of screen?
  2507 00000765 7211                    			jb	.10						;no, skip ahead
  2508 00000767 E8D6010000              			call	ScrollConsoleRow				;scroll up one row
  2509 0000076C A001080000              			mov	al,[wbConsoleRow]				;row
  2510 00000771 FEC8                    			dec	al						;decrement row
  2511 00000773 A201080000              			mov	[wbConsoleRow],al				;save row
  2512 00000778 C3                      .10			ret							;return
  2513                                  ;-----------------------------------------------------------------------------------------------------------------------
  2514                                  ;
  2515                                  ;	Routine:	PutConsoleChar
  2516                                  ;
  2517                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2518                                  ;
  2519                                  ;	In:		AL	ASCII character
  2520                                  ;			DS	OS data selector
  2521                                  ;
  2522                                  ;-----------------------------------------------------------------------------------------------------------------------
  2523 00000779 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  2524 0000077A 06                      			push	es						;
  2525 0000077B 6A20                    			push	ESELCGA						;load CGA selector ...
  2526 0000077D 07                      			pop	es						;... into extra segment reg
  2527 0000077E 8A0D00080000            			mov	cl,[wbConsoleColumn]				;column
  2528 00000784 8A2D01080000            			mov	ch,[wbConsoleRow]				;row
  2529 0000078A E8DF010000              			call	SetConsoleChar					;put character at row, column
  2530 0000078F 07                      			pop	es						;restore non-volatile regs
  2531 00000790 59                      			pop	ecx						;
  2532 00000791 C3                      			ret							;return
  2533                                  ;-----------------------------------------------------------------------------------------------------------------------
  2534                                  ;
  2535                                  ;	Routine:	PutConsoleOIAShift
  2536                                  ;
  2537                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2538                                  ;
  2539                                  ;	In:		BL	shift flags
  2540                                  ;			BH	lock flags
  2541                                  ;			DS	OS data selector
  2542                                  ;
  2543                                  ;-----------------------------------------------------------------------------------------------------------------------
  2544 00000792 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2545 00000793 06                      			push	es						;
  2546 00000794 6A20                    			push	ESELCGA						;load CGA selector ...
  2547 00000796 07                      			pop	es						;... into ES register
  2548 00000797 B518                    			mov	ch,ECONOIAROW					;OIA row
  2549 00000799 B020                    			mov	al,EASCIISPACE					;space is default character
  2550 0000079B F6C302                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  2551 0000079E 7402                    			jz	.10						;no, skip ahead
  2552 000007A0 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2553 000007A2 B10E                    .10			mov	cl,14						;indicator column
  2554 000007A4 E8C5010000              			call	SetConsoleChar					;display ASCII character
  2555 000007A9 B020                    			mov	al,EASCIISPACE					;ASCII space
  2556 000007AB F6C310                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  2557 000007AE 7402                    			jz	.20						;no, skip ahead
  2558 000007B0 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2559 000007B2 B140                    .20			mov	cl,64						;indicator column
  2560 000007B4 E8B5010000              			call	SetConsoleChar					;display ASCII character
  2561 000007B9 B020                    			mov	al,EASCIISPACE					;ASCII space
  2562 000007BB F6C301                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  2563 000007BE 7402                    			jz	.30						;no, skip ahead
  2564 000007C0 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2565 000007C2 B10F                    .30			mov	cl,15						;indicator column
  2566 000007C4 E8A5010000              			call	SetConsoleChar					;display ASCII character
  2567 000007C9 B020                    			mov	al,EASCIISPACE					;ASCII space
  2568 000007CB F6C308                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  2569 000007CE 7402                    			jz	.40						;no, skip ahead
  2570 000007D0 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2571 000007D2 B13F                    .40			mov	cl,63						;indicator column
  2572 000007D4 E895010000              			call	SetConsoleChar					;display ASCII character
  2573 000007D9 B020                    			mov	al,EASCIISPACE					;ASCII space
  2574 000007DB F6C304                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  2575 000007DE 7402                    			jz	.50						;no, skip ahead
  2576 000007E0 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2577 000007E2 B110                    .50			mov	cl,16						;indicator column
  2578 000007E4 E885010000              			call	SetConsoleChar					;display ASCII character
  2579 000007E9 B020                    			mov	al,EASCIISPACE					;ASCII space
  2580 000007EB F6C320                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  2581 000007EE 7402                    			jz	.60						;no, skip ahead
  2582 000007F0 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2583 000007F2 B13E                    .60			mov	cl,62						;indicator column
  2584 000007F4 E875010000              			call	SetConsoleChar					;display ASCII character
  2585 000007F9 B020                    			mov	al,EASCIISPACE					;ASCII space
  2586 000007FB F6C704                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  2587 000007FE 7402                    			jz	.70						;no, skip ahead
  2588 00000800 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2589 00000802 B14E                    .70			mov	cl,78						;indicator column
  2590 00000804 E865010000              			call	SetConsoleChar					;display ASCII character
  2591 00000809 B020                    			mov	al,EASCIISPACE					;ASCII space
  2592 0000080B F6C702                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  2593 0000080E 7402                    			jz	.80						;no, skip ahead
  2594 00000810 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2595 00000812 B14D                    .80			mov	cl,77						;indicator column
  2596 00000814 E855010000              			call	SetConsoleChar					;display ASCII character
  2597 00000819 B020                    			mov	al,EASCIISPACE					;ASCII space
  2598 0000081B F6C701                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  2599 0000081E 7402                    			jz	.90						;no, skip ahead
  2600 00000820 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2601 00000822 B14C                    .90			mov	cl,76						;indicator column
  2602 00000824 E845010000              			call	SetConsoleChar					;display ASCII character
  2603 00000829 07                      			pop	es						;restore non-volatile regs
  2604 0000082A 59                      			pop	ecx						;
  2605 0000082B C3                      			ret							;return
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607                                  ;
  2608                                  ;	Routine:	PutConsoleOIAChar
  2609                                  ;
  2610                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2611                                  ;
  2612                                  ;	In:		DS	OS data selector
  2613                                  ;
  2614                                  ;-----------------------------------------------------------------------------------------------------------------------
  2615 0000082C 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2616 0000082D 51                      			push	ecx						;
  2617 0000082E 56                      			push	esi						;
  2618 0000082F 1E                      			push	ds						;
  2619 00000830 06                      			push	es						;
  2620 00000831 6A18                    			push	ESELDAT						;load OS data selector ...
  2621 00000833 1F                      			pop	ds						;... into data segment register
  2622 00000834 6A20                    			push	ESELCGA						;load CGA selector ...
  2623 00000836 07                      			pop	es						;... into extra segment register
  2624 00000837 BE05080000              			mov	esi,wbConsoleScan0				;scan codes address
  2625 0000083C B718                    			mov	bh,ECONOIAROW					;OIA row
  2626 0000083E B300                    			mov	bl,0						;starting column
  2627 00000840 B906000000              			mov	ecx,6						;maximum scan codes
  2628 00000845 51                      .10			push	ecx						;save remaining count
  2629 00000846 89D9                    			mov	ecx,ebx						;row, column
  2630 00000848 AC                      			lodsb							;read scan code
  2631 00000849 08C0                    			or	al,al						;scan code present?
  2632 0000084B 7407                    			jz	.20						;no, skip ahead
  2633 0000084D E832000000              			call	PutConsoleHexByte				;display scan code
  2634 00000852 EB0E                    			jmp	.30						;continue
  2635 00000854 B020                    .20			mov	al,' '						;ASCII space
  2636 00000856 E813010000              			call	SetConsoleChar					;display space
  2637 0000085B B020                    			mov	al,' '						;ASCII space
  2638 0000085D E80C010000              			call	SetConsoleChar					;display space
  2639 00000862 80C302                  .30			add	bl,2						;next column (+2)
  2640 00000865 59                      			pop	ecx						;restore remaining
  2641 00000866 E2DD                    			loop	.10						;next code
  2642 00000868 A00B080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2643 0000086D 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2644 0000086F 720D                    			jb	.40						;no, skip ahead
  2645 00000871 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2646 00000873 7709                    			ja	.40						;no, skip ahead
  2647 00000875 88FD                    			mov	ch,bh						;OIA row
  2648 00000877 B128                    			mov	cl,40						;character display column
  2649 00000879 E8F0000000              			call	SetConsoleChar					;display ASCII character
  2650 0000087E 07                      .40			pop	es						;restore non-volatile regs
  2651 0000087F 1F                      			pop	ds						;
  2652 00000880 5E                      			pop	esi						;
  2653 00000881 59                      			pop	ecx						;
  2654 00000882 5B                      			pop	ebx						;
  2655 00000883 C3                      			ret							;return
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;	Routine:	PutConsoleHexByte
  2659                                  ;
  2660                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  2661                                  ;
  2662                                  ;	In:		AL	byte value
  2663                                  ;			CL	column
  2664                                  ;			CH	row
  2665                                  ;			DS	OS data selector
  2666                                  ;			ES	CGA selector
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669 00000884 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  2670 00000885 88C3                    			mov	bl,al						;save byte value
  2671 00000887 C0E804                  			shr	al,4						;hi-order nybble
  2672 0000088A 0C30                    			or	al,030h						;apply ASCII zone
  2673 0000088C 3C3A                    			cmp	al,03ah						;numeric?
  2674 0000088E 7202                    			jb	.10						;yes, skip ahead
  2675 00000890 0407                    			add	al,7						;add ASCII offset for alpha
  2676 00000892 E8D7000000              .10			call	SetConsoleChar					;display ASCII character
  2677 00000897 88D8                    			mov	al,bl						;byte value
  2678 00000899 240F                    			and	al,0fh						;lo-order nybble
  2679 0000089B 0C30                    			or	al,30h						;apply ASCII zone
  2680 0000089D 3C3A                    			cmp	al,03ah						;numeric?
  2681 0000089F 7202                    			jb	.20						;yes, skip ahead
  2682 000008A1 0407                    			add	al,7						;add ASCII offset for alpha
  2683 000008A3 E8C6000000              .20			call	SetConsoleChar					;display ASCII character
  2684 000008A8 5B                      			pop	ebx						;restore non-volatile regs
  2685 000008A9 C3                      			ret							;return
  2686                                  ;=======================================================================================================================
  2687                                  ;
  2688                                  ;	Message Queue Helper Routines
  2689                                  ;
  2690                                  ;	PutMessage
  2691                                  ;	GetMessage
  2692                                  ;
  2693                                  ;=======================================================================================================================
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;	Routine:	PutMessage
  2697                                  ;
  2698                                  ;	Description:	This routine adda a message to the message queue.
  2699                                  ;
  2700                                  ;	In:		ECX	hi-order data word
  2701                                  ;			EDX	lo-order data word
  2702                                  ;
  2703                                  ;	Out:		CY	0 = success
  2704                                  ;				1 = fail: queue is full
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707 000008AA 1E                      PutMessage		push	ds						;save non-volatile regs
  2708 000008AB 6A2C                    			push	ESELMQ						;load task message queue selector ...
  2709 000008AD 1F                      			pop	ds						;... into data segment register
  2710 000008AE A104000000              			mov	eax,[MQTail]					;tail ptr
  2711 000008B3 833800                  			cmp	dword [eax],0					;is queue full?
  2712 000008B6 F9                      			stc							;assume failure
  2713 000008B7 7517                    			jne	.20						;yes, cannot store
  2714 000008B9 8910                    			mov	[eax],edx					;store lo-order data
  2715 000008BB 894804                  			mov	[eax+4],ecx					;store hi-order data
  2716 000008BE 83C008                  			add	eax,8						;next queue element adr
  2717 000008C1 25FC030000              			and	eax,03fch					;at end of queue?
  2718 000008C6 7502                    			jnz	.10						;no, skip ahead
  2719 000008C8 B008                    			mov	al,8						;reset to top of queue
  2720 000008CA A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  2721 000008CF F8                      			clc							;indicate success
  2722 000008D0 1F                      .20			pop	ds						;restore non-volatile regs
  2723 000008D1 C3                      			ret							;return
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;	Routine:	GetMessage
  2727                                  ;
  2728                                  ;	Description:	This routine reads and removes a message from the message queue.
  2729                                  ;
  2730                                  ;	Out:		EAX	lo-order message data
  2731                                  ;			EDX	hi-order message data
  2732                                  ;
  2733                                  ;			CY	0 = message read
  2734                                  ;				1 = no message to read
  2735                                  ;
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737 000008D2 53                      GetMessage		push	ebx						;save non-volatile regs
  2738 000008D3 51                      			push	ecx						;
  2739 000008D4 1E                      			push	ds						;
  2740 000008D5 6A2C                    			push	ESELMQ						;load message queue selector ...
  2741 000008D7 1F                      			pop	ds						;... into data segment register
  2742 000008D8 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  2743 000008DE 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  2744 000008E0 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2745 000008E3 09D0                    			or	eax,edx						;is queue empty?
  2746 000008E5 F9                      			stc							;assume queue is emtpy
  2747 000008E6 741B                    			jz	.20						;yes, skip ahead
  2748 000008E8 31C9                    			xor	ecx,ecx						;store zero
  2749 000008EA 890B                    			mov	[ebx],ecx					;... in lo-order dword
  2750 000008EC 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  2751 000008EF 83C308                  			add	ebx,8						;next queue element
  2752 000008F2 81E3FC030000            			and	ebx,03fch					;at end of queue?
  2753 000008F8 7502                    			jnz	.10						;no, skip ahead
  2754 000008FA B308                    			mov	bl,8						;reset to 1st entry
  2755 000008FC 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  2756 00000902 F8                      			clc							;indicate message read
  2757 00000903 1F                      .20			pop	ds						;restore non-volatile regs
  2758 00000904 59                      			pop	ecx						;
  2759 00000905 5B                      			pop	ebx						;
  2760 00000906 C3                      			ret							;return
  2761                                  ;=======================================================================================================================
  2762                                  ;
  2763                                  ;	Memory-Mapped Video Routines
  2764                                  ;
  2765                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2766                                  ;
  2767                                  ;	ClearConsoleScreen
  2768                                  ;	ScrollConsoleRow
  2769                                  ;	SetConsoleChar
  2770                                  ;
  2771                                  ;=======================================================================================================================
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  ;
  2774                                  ;	Routine:	ClearConsoleScreen
  2775                                  ;
  2776                                  ;	Description:	This routine clears the console (CGA) screen.
  2777                                  ;
  2778                                  ;-----------------------------------------------------------------------------------------------------------------------
  2779 00000907 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  2780 00000908 57                      			push	edi						;
  2781 00000909 1E                      			push	ds						;
  2782 0000090A 06                      			push	es						;
  2783 0000090B 6A18                    			push	ESELDAT						;load OS Data selector ...
  2784 0000090D 1F                      			pop	ds						;... into DS register
  2785 0000090E 6A20                    			push	ESELCGA						;load CGA selector ...
  2786 00000910 07                      			pop	es						;... into ES register
  2787 00000911 B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  2788 00000916 B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2789 0000091B 31FF                    			xor	edi,edi						;target offset
  2790 0000091D FC                      			cld							;forward strings
  2791 0000091E F3AB                    			rep	stosd						;reset screen body
  2792 00000920 B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  2793 00000925 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2794 0000092A F3AB                    			rep	stosd						;reset OIA line
  2795 0000092C 30C0                    			xor	al,al						;zero register
  2796 0000092E A201080000              			mov	[wbConsoleRow],al				;reset console row
  2797 00000933 A200080000              			mov	[wbConsoleColumn],al				;reset console column
  2798 00000938 E847000000              			call	PlaceCursor					;place cursor at current position
  2799 0000093D 07                      			pop	es						;restore non-volatile regs
  2800 0000093E 1F                      			pop	ds						;
  2801 0000093F 5F                      			pop	edi						;
  2802 00000940 59                      			pop	ecx						;
  2803 00000941 C3                      			ret							;return
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                  ;
  2806                                  ;	Routine:	ScrollConsoleRow
  2807                                  ;
  2808                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2809                                  ;
  2810                                  ;-----------------------------------------------------------------------------------------------------------------------
  2811 00000942 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  2812 00000943 56                      			push	esi						;
  2813 00000944 57                      			push	edi						;
  2814 00000945 1E                      			push	ds						;
  2815 00000946 06                      			push	es						;
  2816 00000947 6A20                    			push	ESELCGA						;load CGA video selector ...
  2817 00000949 1F                      			pop	ds						;... into DS
  2818 0000094A 6A20                    			push	ESELCGA						;load CGA video selector ...
  2819 0000094C 07                      			pop	es						;... into ES
  2820 0000094D B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2821 00000952 BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2822 00000957 31FF                    			xor	edi,edi						;edi = target (line 1)
  2823 00000959 FC                      			cld							;forward strings
  2824 0000095A F3A5                    			rep	movsd						;move 24 lines up
  2825 0000095C B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2826 00000961 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2827 00000966 F3AB                    			rep	stosd						;clear bottom row
  2828 00000968 07                      			pop	es						;restore non-volatile regs
  2829 00000969 1F                      			pop	ds						;
  2830 0000096A 5F                      			pop	edi						;
  2831 0000096B 5E                      			pop	esi						;
  2832 0000096C 59                      			pop	ecx						;
  2833 0000096D C3                      			ret							;return
  2834                                  ;-----------------------------------------------------------------------------------------------------------------------
  2835                                  ;
  2836                                  ;	Routine:	SetConsoleChar
  2837                                  ;
  2838                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2839                                  ;
  2840                                  ;	In:		AL	ASCII character
  2841                                  ;			CL	column
  2842                                  ;			CH	row
  2843                                  ;			ES	CGA selector
  2844                                  ;
  2845                                  ;	Out:		EAX	last target address written (ES:)
  2846                                  ;			CL	column + 1
  2847                                  ;
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849 0000096E 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  2850 00000970 0FB6C5                  			movzx	eax,ch						;row
  2851 00000973 B450                    			mov	ah,ECONCOLS					;cols/row
  2852 00000975 F6E4                    			mul	ah						;row * cols/row
  2853 00000977 00C8                    			add	al,cl						;add column
  2854 00000979 80D400                  			adc	ah,0						;handle carry
  2855 0000097C D1E0                    			shl	eax,1						;screen offset
  2856 0000097E 268810                  			mov	[es:eax],dl					;store character
  2857 00000981 FEC1                    			inc	cl						;next column
  2858 00000983 C3                      			ret							;return
  2859                                  ;=======================================================================================================================
  2860                                  ;
  2861                                  ;	Input/Output Routines
  2862                                  ;
  2863                                  ;	These routines read and/or write directly to ports.
  2864                                  ;
  2865                                  ;	PlaceCursor
  2866                                  ;	PutPrimaryEndOfInt
  2867                                  ;	PutSecondaryEndOfInt
  2868                                  ;	SetKeyboardLamps
  2869                                  ;	WaitForKeyInBuffer
  2870                                  ;	WaitForKeyOutBuffer
  2871                                  ;
  2872                                  ;=======================================================================================================================
  2873                                  ;-----------------------------------------------------------------------------------------------------------------------
  2874                                  ;
  2875                                  ;	Routine:	PlaceCursor
  2876                                  ;
  2877                                  ;	Description:	This routine positions the cursor on the console.
  2878                                  ;
  2879                                  ;	In:		DS	OS data selector
  2880                                  ;
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882 00000984 51                      PlaceCursor		push	ecx						;save non-volatile regs
  2883 00000985 A001080000              			mov	al,[wbConsoleRow]				;al = row
  2884 0000098A B450                    			mov	ah,ECONCOLS					;ah = cols/row
  2885 0000098C F6E4                    			mul	ah						;row offset
  2886 0000098E 020500080000            			add	al,[wbConsoleColumn]				;add column
  2887 00000994 80D400                  			adc	ah,0						;add overflow
  2888 00000997 89C1                    			mov	ecx,eax						;screen offset
  2889 00000999 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  2890 0000099B B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  2891 0000099D B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2892 0000099F EE                      			out	dx,al						;select register
  2893 000009A0 42                      			inc	edx						;data port
  2894 000009A1 88E8                    			mov	al,ch						;hi-order cursor loc
  2895 000009A3 EE                      			out	dx,al						;store hi-order loc
  2896 000009A4 4A                      			dec	edx						;register select port
  2897 000009A5 B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2898 000009A7 EE                      			out	dx,al						;select register
  2899 000009A8 42                      			inc	edx						;data port
  2900 000009A9 88C8                    			mov	al,cl						;lo-order cursor loc
  2901 000009AB EE                      			out	dx,al						;store lo-order loc
  2902 000009AC 59                      			pop	ecx						;restore non-volatile regs
  2903 000009AD C3                      			ret							;return
  2904                                  ;-----------------------------------------------------------------------------------------------------------------------
  2905                                  ;
  2906                                  ;	Routine:	PutPrimaryEndOfInt
  2907                                  ;
  2908                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2909                                  ;
  2910                                  ;-----------------------------------------------------------------------------------------------------------------------
  2911 000009AE FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2912 000009AF B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2913 000009B1 E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  2914 000009B3 C3                      			ret							;return
  2915                                  ;-----------------------------------------------------------------------------------------------------------------------
  2916                                  ;
  2917                                  ;	Routine:	PutSecondaryEndOfInt
  2918                                  ;
  2919                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2920                                  ;
  2921                                  ;-----------------------------------------------------------------------------------------------------------------------
  2922 000009B4 FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2923 000009B5 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2924 000009B7 E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2925 000009B9 C3                      			ret							;return
  2926                                  ;-----------------------------------------------------------------------------------------------------------------------
  2927                                  ;
  2928                                  ;	Routine:	SetKeyboardLamps
  2929                                  ;
  2930                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2931                                  ;
  2932                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2933                                  ;
  2934                                  ;-----------------------------------------------------------------------------------------------------------------------
  2935 000009BA E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2936 000009BF B0ED                    			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  2937 000009C1 E660                    			out	EKEYBPORTDATA,al				;send command to 8042
  2938 000009C3 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2939 000009C8 E460                    			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  2940 000009CA E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  2941 000009CF 88F8                    			mov	al,bh						;set/reset lamps value
  2942 000009D1 E660                    			out	EKEYBPORTDATA,al				;send lamps value
  2943 000009D3 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2944 000009D8 E460                    			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  2945 000009DA C3                      			ret							;return
  2946                                  ;-----------------------------------------------------------------------------------------------------------------------
  2947                                  ;
  2948                                  ;	Routine:	WaitForKeyInBuffer
  2949                                  ;
  2950                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2951                                  ;
  2952                                  ;	Out:		ZF	1 = Input buffer ready
  2953                                  ;				0 = Input buffer not ready after timeout
  2954                                  ;
  2955                                  ;-----------------------------------------------------------------------------------------------------------------------
  2956 000009DB 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2957 000009DC B900000100              			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  2958 000009E1 E464                    .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  2959 000009E3 A802                    			test	al,EKEYBBITIN					;is input buffer still full?
  2960 000009E5 E0FA                    			loopnz	.10						;yes, repeat till timeout
  2961 000009E7 59                      			pop	ecx						;restore non-volatile regs
  2962 000009E8 C3                      			ret							;return
  2963                                  ;-----------------------------------------------------------------------------------------------------------------------
  2964                                  ;
  2965                                  ;	Routine:	WaitForKeyOutBuffer
  2966                                  ;
  2967                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2968                                  ;
  2969                                  ;	Out:		ZF	1 = Output buffer has data from controller
  2970                                  ;				0 = Output buffer empty after timeout
  2971                                  ;
  2972                                  ;-----------------------------------------------------------------------------------------------------------------------
  2973 000009E9 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2974 000009EA B900000100              			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  2975 000009EF E464                    .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  2976 000009F1 A801                    			test	al,EKEYBBITOUT					;output buffer status bit
  2977 000009F3 E1FA                    			loopz	.10						;loop until output buffer bit
  2978 000009F5 59                      			pop	ecx						;restore non-volatile regs
  2979 000009F6 C3                      			ret							;return
  2980                                  ;-----------------------------------------------------------------------------------------------------------------------
  2981                                  ;
  2982                                  ;	End of the Kernel Function Library
  2983                                  ;
  2984                                  ;-----------------------------------------------------------------------------------------------------------------------
  2985 000009F7 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  2986 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  2987                                  ;=======================================================================================================================
  2988                                  ;
  2989                                  ;	Console Task
  2990                                  ;
  2991                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2992                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2993                                  ;	screen and responds to user commands.
  2994                                  ;
  2995                                  ;=======================================================================================================================
  2996                                  ;-----------------------------------------------------------------------------------------------------------------------
  2997                                  ;
  2998                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2999                                  ;
  3000                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3001                                  ;
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  section			constack						;console task stack
  3004 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  ;
  3007                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3008                                  ;
  3009                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3010                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3011                                  ;	16 descriptors. Six are initially defined.
  3012                                  ;
  3013                                  ;-----------------------------------------------------------------------------------------------------------------------
  3014                                  section			conldt							;console local descriptors
  3015 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  3016 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  3017 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  3018 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  3019 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  3020 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  3021 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ;
  3024                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3025                                  ;
  3026                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3027                                  ;	segment. CS to console code.
  3028                                  ;
  3029                                  ;-----------------------------------------------------------------------------------------------------------------------
  3030                                  section			contss							;console task state segment
  3031 00000000 00000000                			dd	0						;00 back-link tss
  3032 00000004 00070000                			dd	0700h						;04 esp ring 0
  3033 00000008 14000000                			dd	0014h						;08 ss ring 0
  3034 0000000C 00070000                			dd	0700h						;0C esp ring 1
  3035 00000010 14000000                			dd	0014h						;10 es ring 1
  3036 00000014 00070000                			dd	0700h						;14 esp ring 2
  3037 00000018 14000000                			dd	0014h						;18 ss ring 2
  3038 0000001C 00000000                			dd	0						;1C cr ring 3
  3039 00000020 00000000                			dd	0						;20 eip
  3040 00000024 00020000                			dd	0200h						;24 eflags
  3041 00000028 00000000                			dd	0						;28 eax
  3042 0000002C 00000000                			dd	0						;2C ecx
  3043 00000030 00000000                			dd	0						;30 edx
  3044 00000034 00000000                			dd	0						;34 ebx
  3045 00000038 00070000                			dd	0700h						;38 esp ring 3
  3046 0000003C 00000000                			dd	0						;3C ebp
  3047 00000040 00000000                			dd	0						;40 esi
  3048 00000044 00000000                			dd	0						;44 edi
  3049 00000048 1C000000                			dd	001Ch						;48 es
  3050 0000004C 24000000                			dd	0024h						;4C cs
  3051 00000050 14000000                			dd	0014h						;50 ss ring 3
  3052 00000054 1C000000                			dd	001Ch						;54 ds
  3053 00000058 00000000                			dd	0						;58 fs
  3054 0000005C 00000000                			dd	0						;5c gs
  3055 00000060 60000000                			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  3056 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3057                                  ;-----------------------------------------------------------------------------------------------------------------------
  3058                                  ;
  3059                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3060                                  ;
  3061                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3062                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3063                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3064                                  ;	event.
  3065                                  ;
  3066                                  ;-----------------------------------------------------------------------------------------------------------------------
  3067                                  section			conmque							;console message queue
  3068 00000000 08000000                			dd	8						;head pointer
  3069 00000004 08000000                			dd	8						;tail pointer
  3070 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  3071                                  ;-----------------------------------------------------------------------------------------------------------------------
  3072                                  ;
  3073                                  ;	Console Code								@disk: 008400	@mem: 005000
  3074                                  ;
  3075                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3076                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3077                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3078                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3079                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3080                                  ;	board input, echoing to the console screen and responding to user commands.
  3081                                  ;
  3082                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3083                                  ;
  3084                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3085                                  ;				|  Real Mode Interrupt Vectors			|
  3086                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3087                                  ;				|  Reserved BIOS Memory Area			|
  3088                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3089                                  ;				|  Shared Kernel Memory Area			|
  3090                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3091                                  ;				|  Global Descriptor Table (GDT)		|
  3092                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3093                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3094                                  ;			002000	+-----------------------------------------------+
  3095                                  ;				|  Interrupt Handlers				|
  3096                                  ;				|  Kernel Function Library			|
  3097                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3098                                  ;				|  Console Task Stack Area			|
  3099                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3100                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3101                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3102                                  ;				|  Console Task Task State Segment (TSS)	|
  3103                                  ;			004800	+-----------------------------------------------+
  3104                                  ;				|  Console Task Message Queue			|
  3105                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3106                                  ;				|  Console Task Code				|
  3107                                  ;				|  Console Task Constants			|
  3108                                  ;			006000	+===============================================+
  3109                                  ;
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  section			concode	vstart=05000h					;labels relative to 5000h
  3112 00000000 E852000000              ConCode			call	ConInitializeData				;initialize console variables
  3113                                  
  3114                                  			clearConsoleScreen					;clear the console screen
  3114 00000005 B000                <1>  mov al,eClearConsoleScreen
  3114 00000007 CD30                <1>  int _svc
  3115                                  			putConsoleString czTitle				;display startup message
  3115 00000009 BA[75000000]        <1>  mov edx,%1
  3115 0000000E B003                <1>  mov al,ePutConsoleString
  3115 00000010 CD30                <1>  int _svc
  3116                                  .10			putConsoleString czPrompt				;display input prompt
  3116                              <1> .10 :
  3116 00000012 BA[73000000]        <1>  mov edx,%1
  3116 00000017 B003                <1>  mov al,ePutConsoleString
  3116 00000019 CD30                <1>  int _svc
  3117                                  			placeCursor						;set CRT cursor location
  3117 0000001B B002                <1>  mov al,ePlaceCursor
  3117 0000001D CD30                <1>  int _svc
  3118                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3118 0000001F BA0C080000          <1>  mov edx,%1
  3118 00000024 B94F000000          <1>  mov ecx,%2
  3118 00000029 B701                <1>  mov bh,%3
  3118 0000002B B30D                <1>  mov bl,%4
  3118 0000002D B001                <1>  mov al,eGetConsoleString
  3118 0000002F CD30                <1>  int _svc
  3119                                  			putConsoleString czNewLine				;newline
  3119 00000031 BA[70000000]        <1>  mov edx,%1
  3119 00000036 B003                <1>  mov al,ePutConsoleString
  3119 00000038 CD30                <1>  int _svc
  3120                                  			putConsoleString wzConsoleInBuffer			;print entered command
  3120 0000003A BA0C080000          <1>  mov edx,%1
  3120 0000003F B003                <1>  mov al,ePutConsoleString
  3120 00000041 CD30                <1>  int _svc
  3121                                  			putConsoleString czNewLine				;new line
  3121 00000043 BA[70000000]        <1>  mov edx,%1
  3121 00000048 B003                <1>  mov al,ePutConsoleString
  3121 0000004A CD30                <1>  int _svc
  3122                                  			putConsoleString czUnknownCommand			;display error message
  3122 0000004C BA[93000000]        <1>  mov edx,%1
  3122 00000051 B003                <1>  mov al,ePutConsoleString
  3122 00000053 CD30                <1>  int _svc
  3123                                  
  3124 00000055 EBBB                    			jmp	.10						;next command
  3125                                  ;-----------------------------------------------------------------------------------------------------------------------
  3126                                  ;
  3127                                  ;	Routine:	ConInitializeData
  3128                                  ;
  3129                                  ;	Description:	This routine initializes console task variables.
  3130                                  ;
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132 00000057 51                      ConInitializeData	push	ecx						;save non-volatile regs
  3133 00000058 57                      			push	edi						;
  3134 00000059 06                      			push	es						;
  3135                                  ;
  3136                                  ;	Initialize console work areas
  3137                                  ;
  3138 0000005A 6A18                    			push	ESELDAT						;load OS data selector ...
  3139 0000005C 07                      			pop	es						;... into extra segment register
  3140 0000005D BF00080000              			mov	edi,ECONDATA					;OS console data address
  3141 00000062 30C0                    			xor	al,al						;initialization value
  3142 00000064 B95C000000              			mov	ecx,ECONDATALEN					;size of OS console data
  3143 00000069 FC                      			cld							;forward strings
  3144 0000006A F3AA                    			rep	stosb						;initialize data
  3145                                  ;
  3146                                  ;	Restore and return
  3147                                  ;
  3148 0000006C 07                      			pop	es						;restore non-volatile regs
  3149 0000006D 5F                      			pop	edi						;
  3150 0000006E 59                      			pop	ecx						;
  3151 0000006F C3                      			ret							;return
  3152                                  ;-----------------------------------------------------------------------------------------------------------------------
  3153                                  ;
  3154                                  ;	Constants
  3155                                  ;
  3156                                  ;-----------------------------------------------------------------------------------------------------------------------
  3157 00000070 0D0A00                  czNewLine		db	13,10,0						;new line string
  3158 00000073 3A00                    czPrompt		db	":",0						;prompt string
  3159 00000075 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3159 0000007E 65726174696E672053-
  3159 00000087 797374656D20312E30-
  3159 00000090 0D0A00             
  3160 00000093 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3160 0000009C 6F6D6D616E640D0A00 
  3161 000000A5 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  3162 00000FFE 55AA                    			db	055h,0AAh					;end of section
  3163                                  %endif
  3164                                  %ifdef BUILDDISK
  3165                                  ;-----------------------------------------------------------------------------------------------------------------------
  3166                                  ;
  3167                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3168                                  ;
  3169                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3170                                  ;
  3171                                  ;-----------------------------------------------------------------------------------------------------------------------
  3172                                  section			unused							;unused disk space
  3173                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3174                                  %endif
  3175                                  ;=======================================================================================================================
  3176                                  ;
  3177                                  ;	End of Program Code
  3178                                  ;
  3179                                  ;=======================================================================================================================
