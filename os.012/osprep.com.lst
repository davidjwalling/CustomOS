     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.012
     6                                  ;
     7                                  ;	Description:	In this samplle, logic is added to allocate and free memory blocks associated with a task.
     8                                  ;
     9                                  ;	Revised:	July 1, 2017
    10                                  ;
    11                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    17                                  ;
    18                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;	Assembly Directives
    24                                  ;
    25                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK
    34                                  %define BUILDBOOT
    35                                  %define BUILDCOM
    36                                  %endif
    37                                  %ifdef BUILDPREP
    38                                  %define BUILDBOOT
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;	Conventions
    43                                  ;
    44                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    45                                  ;			Labels within a routine begin at ".10" and increment by 10.
    46                                  ;
    47                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    48                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    49                                  ;			Register names in comments are in upper case.
    50                                  ;			Hexadecimal values in comments are in lower case.
    51                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    52                                  ;			register contents on entry and exit.
    53                                  ;
    54                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    55                                  ;			Assembly operands begin in column 33.
    56                                  ;			Lines should not extend beyond column 120.
    57                                  ;
    58                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    59                                  ;			Routine names begin with a verb (Get, Read, etc.).
    60                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    61                                  ;
    62                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    63                                  ;			Constant stored values are named in camel case, starting with 'c'.
    64                                  ;			The 2nd letter of the constant label indicates the storage type.
    65                                  ;
    66                                  ;			cq......	constant quad-word (dq)
    67                                  ;			cd......	constant double-word (dd)
    68                                  ;			cw......	constant word (dw)
    69                                  ;			cb......	constant byte (db)
    70                                  ;			cz......	constant ASCIIZ (null-terminated) string
    71                                  ;
    72                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    73                                  ;			The 2nd letter of the variable label indicates the storage type.
    74                                  ;
    75                                  ;			wq......	variable quad-word (resq)
    76                                  ;			wd......	variable double-word (resd)
    77                                  ;			ww......	variable word (resw)
    78                                  ;			wb......	variable byte (resb)
    79                                  ;
    80                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    81                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    82                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    83                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    84                                  ;			Octal literal values are avoided.
    85                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    86                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    87                                  ;
    88                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    89                                  ;			Structure names do not begin with a verb.
    90                                  ;
    91                                  ;	Macros:		Macro names are in camel case (getDateString).
    92                                  ;			Macro names do begin with a verb.
    93                                  ;
    94                                  ;	Registers:	Register names in comments are in upper case.
    95                                  ;			Register names in source code are in lower case.
    96                                  ;
    97                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    98                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    99                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   100                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   101                                  ;
   102                                  ;-----------------------------------------------------------------------------------------------------------------------
   103                                  ;=======================================================================================================================
   104                                  ;
   105                                  ;	Equates
   106                                  ;
   107                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   108                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   109                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   110                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   111                                  ;
   112                                  ;=======================================================================================================================
   113                                  ;-----------------------------------------------------------------------------------------------------------------------
   114                                  ;
   115                                  ;	8042 Keyboard Controller						EKEYB...
   116                                  ;
   117                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   118                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   119                                  ;
   120                                  ;-----------------------------------------------------------------------------------------------------------------------
   121                                  EKEYBPORTDATA		equ	060h						;data port
   122                                  EKEYBPORTSTAT		equ	064h						;status port
   123                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   124                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   125                                  EKEYBBITIN		equ	002h						;input buffer status bit
   126                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   127                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   128                                  										;---------------------------------------
   129                                  										;	Keyboard Scan Codes
   130                                  										;---------------------------------------
   131                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   132                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   133                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   134                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   135                                  EKEYBSLASH		equ	035h						;slash
   136                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   137                                  EKEYBALTDOWN		equ	038h						;alt key down
   138                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   139                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   140                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   141                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   142                                  EKEYBUP			equ	080h						;up
   143                                  EKEYBCTRLUP		equ	09Dh						;control key up
   144                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   145                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   146                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   147                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   148                                  EKEYBALTUP		equ	0B8h						;alt key up
   149                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   150                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   151                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   152                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   153                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   154                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   155                                  ;-----------------------------------------------------------------------------------------------------------------------
   156                                  ;
   157                                  ;	8253 Programmable Interrupt Timer					EPIT...
   158                                  ;
   159                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   160                                  ;	approximately 18.2 times per second.
   161                                  ;
   162                                  ;-----------------------------------------------------------------------------------------------------------------------
   163                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  ;
   166                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   167                                  ;
   168                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   169                                  ;	external devices and signals a hardware interrupt to the CPU.
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  EPICPORTPRI		equ	020h						;primary control port 0
   173                                  EPICPORTPRI1		equ	021h						;primary control port 1
   174                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   175                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   176                                  EPICEOI			equ	020h						;non-specific EOI code
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   180                                  ;
   181                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;	for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI		equ	003h						;controller port hi
   186                                  ECRTPORTLO		equ	0D4h						;controller port lo
   187                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   188                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   192                                  ;
   193                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI		equ	003h						;controller port hi
   197                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   198                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   199                                  EFDCSTATBUSY		equ	010h						;main status is busy
   200                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   204                                  ;
   205                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   206                                  ;
   207                                  ;-----------------------------------------------------------------------------------------------------------------------
   208                                  ERTCREGPORT		equ	70h						;register select port
   209                                  ERTCDATAPORT		equ	71h						;data port
   210                                  ERTCSECONDREG		equ	00h						;second
   211                                  ERTCMINUTEREG		equ	02h						;minute
   212                                  ERTCHOURREG		equ	04h						;hour
   213                                  ERTCWEEKDAYREG		equ	06h						;weekday
   214                                  ERTCDAYREG		equ	07h						;day
   215                                  ERTCMONTHREG		equ	08h						;month
   216                                  ERTCYEARREG		equ	09h						;year of the century
   217                                  ERTCSTATUSREG		equ	0bh						;status
   218                                  ERTCCENTURYREG		equ	32h						;century
   219                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   220                                  ;-----------------------------------------------------------------------------------------------------------------------
   221                                  ;
   222                                  ;	x86 Descriptor Access Codes						EACC...
   223                                  ;
   224                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   225                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   226                                  ;
   227                                  ;	0.......	Segment is not present in memory (triggers int 11)
   228                                  ;	1.......	Segment is present in memory
   229                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   230                                  ;	...0....	Segment is a system segment
   231                                  ;	...00010		Local Descriptor Table
   232                                  ;	...00101		Task Gate
   233                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   234                                  ;	...01100		Call Gate (386)
   235                                  ;	...01110		Interrupt Gate (386)
   236                                  ;	...01111		Trap Gate (386)
   237                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   238                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   239                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   240                                  ;
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  EACCLDT			equ	10000010b					;local descriptor table
   243                                  EACCTASK		equ	10000101b					;task gate
   244                                  EACCTSS			equ	10001001b					;task-state segment
   245                                  EACCGATE		equ	10001100b					;call gate
   246                                  EACCINT			equ	10001110b					;interrupt gate
   247                                  EACCTRAP		equ	10001111b					;trap gate
   248                                  EACCDATA		equ	10010011b					;upward writable data
   249                                  EACCCODE		equ	10011011b					;non-conforming readable code
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  ;
   252                                  ;	BIOS Interrupts and Functions						EBIOS...
   253                                  ;
   254                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   255                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   256                                  ;
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   259                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   260                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   261                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   262                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   263                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   264                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   265                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   266                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;	ASCII									EASCII...
   270                                  ;
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  EASCIIBACKSPACE		equ	008h						;backspace
   273                                  EASCIILINEFEED		equ	00Ah						;line feed
   274                                  EASCIIRETURN		equ	00Dh						;carriage return
   275                                  EASCIIESCAPE		equ	01Bh						;escape
   276                                  EASCIISPACE		equ	020h						;space
   277                                  EASCIIUPPERA		equ	041h						;'A'
   278                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   279                                  EASCIILOWERA		equ	061h						;'a'
   280                                  EASCIILOWERZ		equ	07Ah						;'z'
   281                                  EASCIITILDE		equ	07Eh						;'~'
   282                                  EASCIIBORDSGLVERT	equ	0B3h						;vertical single border
   283                                  EASCIIBORDSGLUPRRGT	equ	0BFh						;upper-right single border
   284                                  EASCIIBORDSGLLWRLFT	equ	0C0h						;lower-left single border
   285                                  EASCIIBORDSGLHORZ	equ	0C4h						;horizontal single border
   286                                  EASCIIBORDSGLLWRRGT	equ	0D9h						;lower-right single border
   287                                  EASCIIBORDSGLUPRLFT	equ	0DAh						;upper-left single border
   288                                  EASCIICASE		equ	00100000b					;case bit
   289                                  EASCIICASEMASK		equ	11011111b					;case mask
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;
   292                                  ;	Boot Sector and Loader Constants					EBOOT...
   293                                  ;
   294                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   295                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   296                                  ;
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   299                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   300                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   301                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   302                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   303                                  EBOOTMAXTRIES		equ	5						;max read retries
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ESELGDT			equ	008h						;gdt alias selector
   308                                  ESELDAT			equ	018h						;kernel data selector
   309                                  ESELCGA			equ	020h						;cga video selector
   310                                  ESELOSCODE		equ	048h						;os kernel code selector
   311                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   312                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   313                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   314                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   315                                  ESELBACKGROUNDLDT	equ	070h						;background local descr table selector
   316                                  ESELBACKGROUNDTSS	equ	078h						;background task state segment selector
   317                                  ESELKEYBOARDMQ		equ	080h						;keyboard focus message queue (IRQ1)
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;	LDT Selectors								ESEL...
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ESELMQ			equ	02Ch						;console task message queue
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;	Kernel Constants							EKRN...
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  EKRNDESLEN		equ	8						;size of descriptor
   326                                  EKRNDATASEG		equ	00000h						;kernel data segment (0000:0800)
   327                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   328                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;	Keyboard Flags								EKEYF...
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   333                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   334                                  EKEYFALTLEFT		equ	00000100b					;left alt
   335                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   336                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   337                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   338                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   339                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   340                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   341                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   342                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  ;	Console Constants							ECON...
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ECONCOLS		equ	80						;columns per row
   347                                  ECONROWS		equ	24						;console rows
   348                                  ECONOIAROW		equ	24						;operator information area row
   349                                  ECONCOLBYTES		equ	2						;bytes per column
   350                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   351                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   352                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   353                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;	Kernel Message Identifiers						EMSG...
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  EMSGKEYDOWN		equ	041000000h					;key-down
   358                                  EMSGKEYUP		equ	041010000h					;key-up
   359                                  EMSGKEYCHAR		equ	041020000h					;character
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  ;	Background Task Identifiers						EBG...
   362                                  ;-----------------------------------------------------------------------------------------------------------------------
   363                                  EBGTIMELEN		equ	9						;length of time string HH:MM:SS\0
   364                                  ;-----------------------------------------------------------------------------------------------------------------------
   365                                  ;	Memory Constants							EMEM...
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  EMEMBASE		equ	10000h						;heap base address
   368                                  EMEMMINSIZE		equ	256						;minimum heap block size (incl. hdr)
   369                                  EMEMFREECODE		equ	"FREE"						;free memory signature
   370                                  EMEMUSERCODE		equ	"USER"						;user memory signature
   371                                  EMEMHEAPSIZE		equ	80000000h					;heap size (temporary)
   372                                  EMEMWIPEBYTE		equ	000h						;byte value to wipe storage
   373                                  ;=======================================================================================================================
   374                                  ;
   375                                  ;	Structures
   376                                  ;
   377                                  ;=======================================================================================================================
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;
   380                                  ;	DATETIME
   381                                  ;
   382                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   383                                  ;
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  struc			DATETIME
   386 00000000 <res 00000001>          .second			resb	1						;seconds
   387 00000001 <res 00000001>          .minute			resb	1						;minutes
   388 00000002 <res 00000001>          .hour			resb	1						;hours
   389 00000003 <res 00000001>          .weekday		resb	1						;day of week
   390 00000004 <res 00000001>          .day			resb	1						;day of month
   391 00000005 <res 00000001>          .month			resb	1						;month of year
   392 00000006 <res 00000001>          .year			resb	1						;year of century
   393 00000007 <res 00000001>          .century		resb	1						;century
   394                                  EDATETIMELEN		equ	($-.second)
   395                                  endstruc
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ;
   398                                  ;	MEMBLOCK
   399                                  ;
   400                                  ;	The MEMBLOCK structure defines a memory block.
   401                                  ;
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  struc			MEMBLOCK
   404 00000000 <res 00000004>          .signature		resd	1						;starting signature
   405 00000004 <res 00000004>          .bytes			resd	1						;block size in bytes
   406 00000008 <res 00000004>          .owner			resd	1						;owning task
   407 0000000C <res 00000004>          .reserved		resd	1						;reserved
   408 00000010 <res 00000004>          .nextcontig		resd	1						;next contiguous block
   409 00000014 <res 00000004>          .previouscontig		resd	1						;previous contiguous block
   410 00000018 <res 00000004>          .nextblock		resd	1						;next free/task block
   411 0000001C <res 00000004>          .previousblock		resd	1						;previous free/task block
   412                                  EMEMBLOCKLEN		equ	($-.signature)
   413                                  endstruc
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ;
   416                                  ;	MEMROOT
   417                                  ;
   418                                  ;	The MEMROOT structure defines starting and ending addresses of memory block chains.
   419                                  ;
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  struc			MEMROOT
   422 00000000 <res 00000004>          .firstcontig		resd	1						;first contiguous block
   423 00000004 <res 00000004>          .lastcontig		resd	1						;last contiguous block
   424 00000008 <res 00000004>          .firstfree		resd	1						;first free block
   425 0000000C <res 00000004>          .lastfree		resd	1						;last free block
   426 00000010 <res 00000004>          .firsttask		resd	1						;first task block
   427 00000014 <res 00000004>          .lasttask		resd	1						;last task block
   428                                  EMEMROOTLEN		equ	($-.firstcontig)
   429                                  endstruc
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;
   432                                  ;	MQUEUE
   433                                  ;
   434                                  ;	The MQUEUE structure maps memory used for a message queue.
   435                                  ;
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  struc			MQUEUE
   438 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   439 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   440 00000008 <res 000003F8>          MQData			resd	254						;message queue
   441                                  endstruc
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  ;
   444                                  ;	OSDATA
   445                                  ;
   446                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   447                                  ;	used by the BIOS.
   448                                  ;
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  struc			OSDATA
   451 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   452 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   453 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   454 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   455 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   456 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   457 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   458 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   459 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   460 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   461 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   462 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   463 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   464 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   465 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   466 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   467 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   468 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   469 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   470 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   471 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   472 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   473 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   474 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   475 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   476 00000449 <res 00000001>          			resb	1						;449 current video mode
   477 0000044A <res 00000002>          			resw	1						;44a screen columns
   478 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   479 0000044E <res 00000002>          			resw	1						;44e current video page offset
   480 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   481 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   482 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   483 00000462 <res 00000001>          			resb	1						;462 active display page number
   484 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   485 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   486 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   487 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   488 00000469 <res 00000003>          			resb	3						;469 vague
   489 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   490 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   491 00000471 <res 00000001>          			resb	1						;471 bios break flag
   492 00000472 <res 00000002>          			resw	1						;472 soft reset
   493 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   494 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   495 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   496 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   497 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   498 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   499 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   500 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   501 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   502 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   503 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   504 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   505 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   506 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   507 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   508 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   509 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   510 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   511 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   512 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   513 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   514 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   515 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   516 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   517 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   518 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   519 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   520 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   521 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   522 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   523 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   524 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   525 000004AC <res 00000008>          			resb	8						;4ac reserved
   526 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   527 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   528 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   529 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   530 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   531 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   532 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   533 000004CD <res 00000001>          			resb	1						;4cd unknown
   534 000004CE <res 00000002>          			resw	1						;4de day counter
   535 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   536 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   537 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   538 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   539 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   540 00000505 <res 0000000A>          			resb	10						;505 POST work area
   541 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   542 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   543 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   544 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   545 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   546 0000051E <res 00000002>          			resw	1						;51e unknown
   547 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   548 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   549 00000530 <res 00000004>          			resb	4						;530 MODE command
   550 00000534 <res 000001CC>          			resb	460						;534 unused
   551 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ;
   554                                  ;	OS Variables								@disk: N/A	@mem: 000800
   555                                  ;
   556                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   557                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   558                                  ;	are organized based on the task that usually accesses them.
   559                                  ;
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  ;-----------------------------------------------------------------------------------------------------------------------
   562                                  ;
   563                                  ;	Kernel Variables
   564                                  ;
   565                                  ;	These variables are not task-specific. They are initialized by the OS loader before the system is placed into
   566                                  ;	protected mode. This is necessary because as soon as the system enters protected mode, the timer interrupt
   567                                  ;	(IRQ0) will begin to reference the task selectors queue to implement task switching.
   568                                  ;
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  			align	4
   571                                  EKERNELDATA		equ	($)
   572 00000800 <res 00000200>          wwTaskQueue		resw	256						;task selector queue
   573 00000A00 <res 00000004>          wdFarJumpEIP		resd	1						;destination EIP of next task (ignored)
   574 00000A04 <res 00000002>          wwFarJumpSelector	resw	1						;destination task gate
   575 00000A06 <res 00000001>          wbTaskIndex		resb	1						;task selector index
   576 00000A07 <res 00000001>          wbInCriticalSection	resb	1						;task in critical section
   577                                  			align	4
   578 00000A08 <res 00000004>          wfHeapSize		resd	1						;heap size
   579 00000A0C <res 00000018>          wsMemRoot		resb	EMEMROOTLEN					;base memory map
   580                                  EKERNELDATALEN		equ	($-EKERNELDATA)
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  ;
   583                                  ;	Console Task Variables
   584                                  ;
   585                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   586                                  ;	the console task starts.
   587                                  ;
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  			align	4
   590                                  ECONDATA		equ	($)
   591 00000A24 <res 00000004>          wfConsoleMemAddr	resd	1						;console memory address
   592 00000A28 <res 00000001>          wbConsoleColumn		resb	1						;console column
   593 00000A29 <res 00000001>          wbConsoleRow		resb	1						;console row
   594 00000A2A <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   595 00000A2B <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   596 00000A2C <res 00000001>          wbConsoleStatus		resb	1						;controller status
   597 00000A2D <res 00000001>          wbConsoleScan0		resb	1						;scan code
   598 00000A2E <res 00000001>          wbConsoleScan1		resb	1						;scan code
   599 00000A2F <res 00000001>          wbConsoleScan2		resb	1						;scan code
   600 00000A30 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   601 00000A31 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   602 00000A32 <res 00000001>          wbConsoleScan5		resb	1						;scan code
   603 00000A33 <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   604 00000A34 <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   605 00000A84 <res 00000050>          wzConsoleToken		resb	80						;token buffer
   606 00000AD4 <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   607 00000B24 <res 00000008>          wsConsoleDateTime	resb	EDATETIMELEN					;date-time buffer
   608                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   609                                  ;-----------------------------------------------------------------------------------------------------------------------
   610                                  ;
   611                                  ;	Background Task Variables
   612                                  ;
   613                                  ;	These variables are exclusve to the background task. These variables are initialized by the background task when
   614                                  ;	the task starts.
   615                                  ;
   616                                  ;-----------------------------------------------------------------------------------------------------------------------
   617                                  			align	4
   618                                  EBGDATA			equ	($)
   619 00000B2C <res 00000008>          wsBgDateTime		resb	EDATETIMELEN					;date-time buffer
   620 00000B34 <res 00000009>          wzBgTime		resb	EBGTIMELEN					;time string buffer
   621 00000B3D <res 00000009>          wzBgTimeCmpr		resb	EBGTIMELEN					;time string comparison buffer
   622                                  EBGDATALEN		equ	($-EBGDATA)
   623                                  ;-----------------------------------------------------------------------------------------------------------------------
   624                                  ;
   625                                  ;	End of OS Variables
   626                                  ;
   627                                  ;-----------------------------------------------------------------------------------------------------------------------
   628                                  endstruc
   629                                  ;-----------------------------------------------------------------------------------------------------------------------
   630                                  ;
   631                                  ;	Macros
   632                                  ;
   633                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   634                                  ;
   635                                  ;-----------------------------------------------------------------------------------------------------------------------
   636                                  %macro			mint	1
   637                                  _%1			equ	($-$$) / EKRNDESLEN
   638                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   639                                  %endmacro
   640                                  %macro			mtrap	1
   641                                  _%1			equ	($-$$) / EKRNDESLEN
   642                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   643                                  %endmacro
   644                                  %macro			menter	1
   645                                  ?%1			equ	($-$$)
   646                                  %endmacro
   647                                  %macro			tsvce	1
   648                                  e%1			equ	($-tsvc)/4
   649                                  			dd	%1
   650                                  %endmacro
   651                                  %ifdef BUILDBOOT
   652                                  ;=======================================================================================================================
   653                                  ;
   654                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   655                                  ;
   656                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   657                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   658                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   659                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   660                                  ;
   661                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   662                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   663                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   664                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   665                                  ;	immediately followed by a disk parameter table.
   666                                  ;
   667                                  ;=======================================================================================================================
   668                                  			cpu	8086						;assume minimal CPU
   669                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   670                                  			bits	16						;16-bit code at power-up
   671                                  %ifdef BUILDPREP
   672 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   673                                  %else
   674                                  Boot			jmp	word Boot.10					;jump over parameter table
   675                                  %endif
   676                                  ;-----------------------------------------------------------------------------------------------------------------------
   677                                  ;
   678                                  ;	Disk Parameter Table
   679                                  ;
   680                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   681                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   682                                  ;
   683                                  ;-----------------------------------------------------------------------------------------------------------------------
   684 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   685 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   686 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   687 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   688 00000010 02                      cbFatCount		db	2						;file allocation table copies
   689 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   690 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   691 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   692 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   693                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   694 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   695 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   696 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   697                                  ;
   698                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   699                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   700                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   701                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   702                                  ;	given several possible starting values for CS:IP.
   703                                  ;
   704                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   705 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   706                                  .@20			equ	$-$$						;.@20 = 021h
   707 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   708 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   709 00000025 B104                    			mov	cl,4						;shift count
   710 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   711 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   712 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   713                                  ;
   714                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   715                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   716                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   717                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   718                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   719                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   720                                  ;
   721 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   722 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   723 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   724 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   725 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   726                                  ;
   727                                  ;	Our boot addressability is now set up according to the following diagram.
   728                                  ;
   729                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   730                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   731                                  ;				|  256 = 100h bytes				|
   732                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   733                                  ;				|  Boot Sector (vstart=0100h)			|
   734                                  ;				|  1 sector = 512 = 200h bytes			|
   735                                  ;			007e00	+-----------------------------------------------+ DS:0300
   736                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   737                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   738                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   739                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   740                                  ;			009200	+-----------------------------------------------+ DS:1700
   741                                  ;
   742                                  ;	On entry, DL indicates the drive being booted from.
   743                                  ;
   744 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   745                                  ;
   746                                  ;	Compute directory i/o buffer address.
   747                                  ;
   748 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   749 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   750 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   751 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   752                                  ;
   753                                  ;	Compute segment where os.com will be loaded.
   754                                  ;
   755 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   756 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   757 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   758 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   759                                  ;
   760                                  ;	Set the video mode to 80 column, 25 row, text.
   761                                  ;
   762 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   763 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   764                                  ;
   765                                  ;	Write a message to the console so we know we have our addressability established.
   766                                  ;
   767 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   768 0000005C E84B01                  			call	BootPrint					;display loader message
   769                                  ;
   770                                  ;	Initialize the number of directory sectors to search.
   771                                  ;
   772 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   773 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   774                                  ;
   775                                  ;	Compute number of directory sectors and initialize overhead count.
   776                                  ;
   777 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   778 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   779 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   780 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   781                                  ;
   782                                  ;	Compute directory entries per sector.
   783                                  ;
   784 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   785 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   786 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   787                                  ;
   788                                  ;	Compute first logical directory sector and update overhead count.
   789                                  ;
   790 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   791 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   792 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   793 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   794 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   795 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   796                                  ;
   797                                  ;	Read directory sector.
   798                                  ;
   799 0000008E B001                    .30			mov	al,1						;sector count
   800 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   801 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   802 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   803                                  ;
   804                                  ;	Setup variables to search this directory sector.
   805                                  ;
   806 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   807 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   808 000000A1 7603                    			jna	.40						;no, continue
   809 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   810 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   811 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   812 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   813                                  ;
   814                                  ;	Loop through directory sectors searching for kernel program.
   815                                  ;
   816 000000B1 56                      .50			push	si						;save kernel name address
   817 000000B2 57                      			push	di						;save dir i/o buffer address
   818 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   819 000000B6 FC                      			cld							;forward strings
   820 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   821 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   822 000000BA 5E                      			pop	si						;restore kernel name address
   823 000000BB 7418                    			je	.60						;exit loop if found
   824 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   825 000000C1 48                      			dec	ax						;decrement remaining entries
   826 000000C2 75ED                    			jnz	.50						;next entry
   827                                  ;
   828                                  ;	Repeat search if we are not at the end of the directory.
   829                                  ;
   830 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   831 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   832 000000CD 75BF                    			jne	.30						;no, get next sector
   833 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   834 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   835                                  ;
   836                                  ;	If we find the kernel program in the directory, read the FAT.
   837                                  ;
   838 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   839 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   840 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   841 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   842 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   843 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   844                                  ;
   845                                  ;	Get the starting cluster of the kernel program and target address.
   846                                  ;
   847 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   848 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   849                                  ;
   850                                  ;	Read each program cluster into RAM.
   851                                  ;
   852 000000EE 50                      .70			push	ax						;save cluster nbr
   853 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   854 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   855 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   856 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   857 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   858 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   859 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   860 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   861                                  ;
   862                                  ;	Update buffer pointer for next cluster.
   863                                  ;
   864 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   865 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   866 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   867 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   868 00000113 58                      			pop	ax						;AX = restore cluster nbr
   869                                  ;
   870                                  ;	Compute next cluster number.
   871                                  ;
   872 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   873 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   874 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   875 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   876 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   877 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   878 00000120 83E701                  			and	di,1						;get low bit
   879 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   880 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   881 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   882                                  ;
   883                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   884                                  ;
   885 0000012B F6C101                  			test	cl,1						;is cluster odd?
   886 0000012E 7404                    			jz	.80						;no, skip ahead
   887 00000130 B104                    			mov	cl,4						;shift count
   888 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   889 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   890 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   891 0000013A 75B2                    			jne	.70						;no, continue
   892                                  ;
   893                                  ;	Transfer control to the operating system program.
   894                                  ;
   895 0000013C EA                      			db	0EAh						;jmp seg:offset
   896 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   897 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   898                                  ;
   899                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   900                                  ;
   901 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   902 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   903 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   904 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   905 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   906 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   907 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   908 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   909 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   910 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   911                                  ;
   912                                  ;	Try maxtries times to read sector.
   913                                  ;
   914 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   915 00000160 53                      .10			push	bx						;save buffer address
   916 00000161 51                      			push	cx						;save retry count
   917 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   918 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   919 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   920 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   921 0000016F 59                      			pop	cx						;restore retry count
   922 00000170 5B                      			pop	bx						;restore buffer address
   923 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   924 00000173 E2EB                    			loop	.10						;retry
   925                                  ;
   926                                  ;	Handle disk error: convert to ASCII and store in error string.
   927                                  ;
   928 00000175 88E0                    			mov	al,ah						;AL = bios error code
   929 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   930 00000179 B210                    			mov	dl,16						;divisor for base 16
   931 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   932 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   933 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   934 00000183 7203                    			jb	.20						;continue if numeral
   935 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   936 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   937 0000018A 7203                    			jb	.30						;continue if numeral
   938 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   939 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   940 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   941 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   942 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   943 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   944 0000019C 7504                    			jnz	.20						;continue if key pressed
   945 0000019E FB                      			sti							;enable maskable interrupts
   946 0000019F F4                      			hlt							;wait for interrupt
   947 000001A0 EBF6                    			jmp	.10						;repeat
   948 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   949 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   950 000001A6 FB                      .30			sti							;enable maskable interrupts
   951 000001A7 F4                      			hlt							;stop until reset, int, nmi
   952 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   953                                  ;
   954                                  ;	Display text message.
   955                                  ;
   956 000001AA FC                      BootPrint		cld							;forward strings
   957 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   958 000001AC 84C0                    			test	al,al						;end of string?
   959 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   960 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   961 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   962 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   963 000001B6 C3                      BootReturn		ret							;return
   964                                  ;-----------------------------------------------------------------------------------------------------------------------
   965                                  ;
   966                                  ;	Constants
   967                                  ;
   968                                  ;-----------------------------------------------------------------------------------------------------------------------
   969 000001B7 90                      			align	2
   970 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   971 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   971 000001C3 4F4D               
   972 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   972 000001CE 530D0A00           
   973 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   973 000001DB 7220               
   974 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   975 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   975 000001E9 6700               
   976                                  ;-----------------------------------------------------------------------------------------------------------------------
   977                                  ;
   978                                  ;	Work Areas
   979                                  ;
   980                                  ;-----------------------------------------------------------------------------------------------------------------------
   981 000001EB 90                      			align	2
   982 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   983 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   984 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   985 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   986 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   987                                  wwReadCountCommand	equ	$						;read count and command
   988 000001F6 00                      wbReadCount		db	0						;sectors to read
   989 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   990                                  wwDriveHead		equ	$						;drive, head (word)
   991 000001F8 00                      wbDrive			db	0						;drive
   992 000001F9 00                      wbHead			db	0						;head
   993                                  wwSectorTrack		equ	$						;sector, track (word)
   994 000001FA 00                      			db	0						;sector
   995 000001FB 00                      wbTrack			db	0						;track
   996 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   997 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   998                                  %endif
   999                                  %ifdef BUILDPREP
  1000                                  ;=======================================================================================================================
  1001                                  ;
  1002                                  ;	Diskette Preparation Code
  1003                                  ;
  1004                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1005                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1006                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
  1007                                  ;
  1008                                  ;=======================================================================================================================
  1009                                  ;
  1010                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
  1011                                  ;
  1012 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
  1013 00000203 E8A4FF                  			call	BootPrint					;display message
  1014                                  ;
  1015                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
  1016                                  ;
  1017 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
  1018 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
  1019 0000020A 7504                    			jnz	.12						;continue if key pressed
  1020 0000020C FB                      			sti							;enable interrupts
  1021 0000020D F4                      			hlt							;wait for interrupt
  1022 0000020E EBF6                    			jmp	.10						;repeat
  1023 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
  1024 00000212 7407                    			je	.15						;yes, branch
  1025 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
  1026 00000216 75EE                    			jne	.10						;no, repeat
  1027 00000218 E9A900                  			jmp	.90						;yes, exit program
  1028                                  ;
  1029                                  ;	Display writing-sector message and patch the JMP instruction.
  1030                                  ;
  1031 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
  1032 0000021E E889FF                  			call	BootPrint					;display message
  1033 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
  1034 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
  1035 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
  1036                                  ;
  1037                                  ;	Try to read the boot sector.
  1038                                  ;
  1039 00000229 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
  1040 0000022C 51                      .20			push	cx						;save remaining tries
  1041 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
  1042 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
  1043 00000233 B90100                  			mov	cx,1						;track zero, sector one
  1044 00000236 B80102                  			mov	ax,0201h					;read one sector
  1045 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
  1046 0000023B 59                      			pop	cx						;restore remaining retries
  1047 0000023C 7307                    			jnc	.30						;skip ahead if successful
  1048 0000023E E2EC                    			loop	.20						;try again
  1049 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
  1050 00000243 EB2C                    			jmp	.50						;branch to error routine
  1051                                  ;
  1052                                  ;	Copy diskette parms from input buffer to output buffer.
  1053                                  ;
  1054 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
  1055 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
  1056 0000024B BF[0000]                			mov	di,Boot						;output buffer address
  1057 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
  1058 00000251 B91300                  			mov	cx,19						;length of diskette parameters
  1059 00000254 FC                      			cld							;forward string copies
  1060 00000255 F3A4                    			rep	movsb						;copy diskette parameters
  1061                                  ;
  1062                                  ;	Try to write boot sector to diskette.
  1063                                  ;
  1064 00000257 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
  1065 0000025A 51                      .40			push	cx						;save remaining tries
  1066 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
  1067 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
  1068 00000261 B90100                  			mov	cx,1						;track zero, sector one
  1069 00000264 B80103                  			mov	ax,0301h					;write one sector
  1070 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
  1071 00000269 59                      			pop	cx						;restore remaining retries
  1072 0000026A 7326                    			jnc	.80						;skip ahead if successful
  1073 0000026C E2EC                    			loop	.40						;try again
  1074 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
  1075                                  ;
  1076                                  ;	Convert the error code to ASCII and display the error message.
  1077                                  ;
  1078 00000271 50                      .50			push	ax						;save error code
  1079 00000272 88E0                    			mov	al,ah						;copy error code
  1080 00000274 B400                    			mov	ah,0						;AX = error code
  1081 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
  1082 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
  1083 0000027A 0D3030                  			or	ax,03030h					;add ASCII zone digits
  1084 0000027D 80FC3A                  			cmp	ah,03Ah						;AH ASCII numeral?
  1085 00000280 7203                    			jb	.60						;yes, continue
  1086 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
  1087 00000285 3C3A                    .60			cmp	al,03Ah						;al ASCII numeral?
  1088 00000287 7202                    			jb	.70						;yes, continue
  1089 00000289 0407                    			add	al,7						;no, make ASCII
  1090 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
  1091 0000028E E819FF                  			call	BootPrint					;write error message
  1092 00000291 58                      			pop	ax						;restore error code
  1093                                  ;
  1094                                  ;	Display the completion message.
  1095                                  ;
  1096 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
  1097 00000295 88E0                    			mov	al,ah						;BIOS return code
  1098 00000297 3C00                    			cmp	al,0						;success?
  1099 00000299 7426                    			je	.85						;yes, continue
  1100 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
  1101 0000029E 3C01                    			cmp	al,1						;disk parameter error?
  1102 000002A0 741F                    			je	.85						;yes, continue
  1103 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
  1104 000002A5 3C02                    			cmp	al,2						;address mark not found?
  1105 000002A7 7418                    			je	.85						;yes, continue
  1106 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
  1107 000002AC 3C03                    			cmp	al,3						;protected disk?
  1108 000002AE 7411                    			je	.85						;yes, continue
  1109 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
  1110 000002B3 3C06                    			cmp	al,6						;diskette removed?
  1111 000002B5 740A                    			je	.85						;yes, continue
  1112 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
  1113 000002BA 3C80                    			cmp	al,80H						;drive timed out?
  1114 000002BC 7403                    			je	.85						;yes, continue
  1115 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
  1116 000002C1 E8E6FE                  .85			call	BootPrint					;display result message
  1117 000002C4 B8004C                  .90			mov	ax,04C00H					;terminate with zero result code
  1118 000002C7 CD21                    			int	021h						;terminate DOS program
  1119 000002C9 C3                      			ret							;return (should not execute)
  1120                                  ;-----------------------------------------------------------------------------------------------------------------------
  1121                                  ;
  1122                                  ;	Diskette Preparation Messages
  1123                                  ;
  1124                                  ;-----------------------------------------------------------------------------------------------------------------------
  1125 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
  1125 000002D3 5320426F6F742D4469-
  1125 000002DC 736B65747465205072-
  1125 000002E5 657061726174696F6E-
  1125 000002EE 2050726F6772616D   
  1126 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1126 000002FF 687420284329203230-
  1126 00000308 31302D323031372044-
  1126 00000311 61766964204A2E2057-
  1126 0000031A 616C6C696E672E2041-
  1126 00000323 6C6C20726967687473-
  1126 0000032C 207265736572766564-
  1126 00000335 2E                 
  1127 00000336 0D0A                    			db	13,10
  1128 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1128 00000341 6F6772616D206F7665-
  1128 0000034A 727772697465732074-
  1128 00000353 686520626F6F742073-
  1128 0000035C 6563746F72206F6620-
  1128 00000365 61206469736B657474-
  1128 0000036E 652077697468207374-
  1128 00000377 617274757020636F64-
  1128 00000380 652074686174       
  1129 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
  1129 0000038F 616420746865206F70-
  1129 00000398 65726174696E672073-
  1129 000003A1 797374656D20696E74-
  1129 000003AA 6F206D656D6F727920-
  1129 000003B3 7768656E2074686520-
  1129 000003BC 636F6D707574657220-
  1129 000003C5 697320726573746172-
  1129 000003CE 7465642E           
  1130 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1130 000003DB 6565642C20706C6163-
  1130 000003E4 65206120666F726D61-
  1130 000003ED 74746564206469736B-
  1130 000003F6 6574746520696E746F-
  1130 000003FF 20647269766520413A-
  1130 00000408 20616E642070726573-
  1130 00000411 732074686520456E74-
  1130 0000041A 6572206B65792E     
  1131 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1131 0000042A 20746869732070726F-
  1131 00000433 6772616D2077697468-
  1131 0000043C 6F7574207072657061-
  1131 00000445 72696E672061206469-
  1131 0000044E 736B657474652C2070-
  1131 00000457 726573732074686520-
  1131 00000460 457363617065206B65-
  1131 00000469 792E               
  1132 0000046B 0D0A00                  			db	13,10,0
  1133 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1133 00000477 2074686520626F6F74-
  1133 00000480 20736563746F722074-
  1133 00000489 6F2074686520646973-
  1133 00000492 6B65747465202E2E2E 
  1134 0000049B 0D0A00                  			db	13,10,0
  1135 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1135 000004A7 6F722D636F6465202E-
  1135 000004B0 2E2077617320726574-
  1135 000004B9 75726E65642066726F-
  1135 000004C2 6D207468652042494F-
  1135 000004CB 53207768696C652072-
  1135 000004D4 656164696E67206672-
  1135 000004DD 6F6D20746865206469-
  1135 000004E6 736B2E             
  1136 000004E9 0D0A00                  			db	13,10,0
  1137 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1137 000004F5 6F722D636F6465202E-
  1137 000004FE 2E2077617320726574-
  1137 00000507 75726E65642066726F-
  1137 00000510 6D207468652042494F-
  1137 00000519 53207768696C652077-
  1137 00000522 726974696E6720746F-
  1137 0000052B 20746865206469736B-
  1137 00000534 2E                 
  1138 00000535 0D0A00                  			db	13,10,0
  1139 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1139 00000541 742D736563746F7220-
  1139 0000054A 776173207772697474-
  1139 00000553 656E20746F20746865-
  1139 0000055C 206469736B65747465-
  1139 00000565 2E204265666F726520-
  1139 0000056E 626F6F74696E672079-
  1139 00000577 6F757220636F6D7075-
  1139 00000580 7465722077697468   
  1140 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1140 00000591 736B657474652C206D-
  1140 0000059A 616B65207375726520-
  1140 000005A3 746861742074686520-
  1140 000005AC 66696C65204F532E43-
  1140 000005B5 4F4D20697320636F70-
  1140 000005BE 696564206F6E746F20-
  1140 000005C7 746865206469736B65-
  1140 000005D0 7474652E           
  1141 000005D4 0D0A00                  			db	13,10,0
  1142 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1142 000005E0 76616C696420446973-
  1142 000005E9 6B20506172616D6574-
  1142 000005F2 6572               
  1143 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1143 000005FD 20616E20696E746572-
  1143 00000606 6E616C206572726F72-
  1143 0000060F 206361757365642062-
  1143 00000618 7920616E20696E7661-
  1143 00000621 6C69642076616C7565-
  1143 0000062A 206265696E67207061-
  1143 00000633 7373656420746F2061-
  1143 0000063C 2073797374656D     
  1144 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1144 0000064C 6E2E20546865204F53-
  1144 00000655 424F4F542E434F4D20-
  1144 0000065E 66696C65206D617920-
  1144 00000667 626520636F72727570-
  1144 00000670 742E20436F7079206F-
  1144 00000679 7220646F776E6C6F61-
  1144 00000682 64207468652066696C-
  1144 0000068B 6520616761696E     
  1145 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
  1145 0000069B 72792E             
  1146 0000069E 0D0A00                  			db	13,10,0
  1147 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1147 000006AA 6472657373204D6172-
  1147 000006B3 6B204E6F7420466F75-
  1147 000006BC 6E64               
  1148 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1148 000006C7 726F7220696E646963-
  1148 000006D0 617465732061207068-
  1148 000006D9 79736963616C207072-
  1148 000006E2 6F626C656D20776974-
  1148 000006EB 682074686520666C6F-
  1148 000006F4 707079206469736B65-
  1148 000006FD 7474652E20506C6561-
  1148 00000706 7365207265747279   
  1149 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
  1149 00000717 6E6F74686572206469-
  1149 00000720 736B657474652E     
  1150 00000727 0D0A00                  			db	13,10,0
  1151 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1151 00000733 6F7465637465642044-
  1151 0000073C 69736B             
  1152 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1152 00000748 726F72206973207573-
  1152 00000751 75616C6C7920636175-
  1152 0000075A 736564206279206174-
  1152 00000763 74656D7074696E6720-
  1152 0000076C 746F20777269746520-
  1152 00000775 746F20612077726974-
  1152 0000077E 652D70726F74656374-
  1152 00000787 6564206469736B2E   
  1153 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1153 00000798 686520277772697465-
  1153 000007A1 2D70726F7465637427-
  1153 000007AA 2073657474696E6720-
  1153 000007B3 6F6E20746865206469-
  1153 000007BC 736B206F7220726574-
  1153 000007C5 7279207573696E6720-
  1153 000007CE 7573696E6720616E6F-
  1153 000007D7 74686572206469736B-
  1153 000007E0 2E                 
  1154 000007E1 0D0A00                  			db	13,10,0
  1155 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1155 000007ED 736B65747465205265-
  1155 000007F6 6D6F766564         
  1156 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1156 00000804 726F72206D61792069-
  1156 0000080D 6E6469636174652074-
  1156 00000816 686174207468652066-
  1156 0000081F 6C6F70707920646973-
  1156 00000828 6B6574746520686173-
  1156 00000831 206265656E2072656D-
  1156 0000083A 6F7665642066726F6D-
  1156 00000843 20746865           
  1157 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1157 00000850 652064726976652E20-
  1157 00000859 4F6E20736F6D652073-
  1157 00000862 797374656D732C2074-
  1157 0000086B 68697320636F646520-
  1157 00000874 6D617920616C736F20-
  1157 0000087D 6F6363757220696620-
  1157 00000886 746865206469736B65-
  1157 0000088F 747465206973       
  1158 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1158 0000089E 70726F746563746564-
  1158 000008A7 2E2720506C65617365-
  1158 000008B0 207665726966792074-
  1158 000008B9 686174207468652064-
  1158 000008C2 69736B657474652069-
  1158 000008CB 73206E6F7420777269-
  1158 000008D4 74652D70726F746563-
  1158 000008DD 74656420616E64     
  1159 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
  1159 000008ED 65726C7920696E7365-
  1159 000008F6 7274656420696E2074-
  1159 000008FF 6865206469736B6574-
  1159 00000908 74652064726976652E 
  1160 00000911 0D0A00                  			db	13,10,0
  1161 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1161 0000091D 6976652054696D6564-
  1161 00000926 204F7574           
  1162 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1162 00000933 726F7220757375616C-
  1162 0000093C 6C7920696E64696361-
  1162 00000945 746573207468617420-
  1162 0000094E 6E6F206469736B6574-
  1162 00000957 746520697320696E20-
  1162 00000960 746865206469736B65-
  1162 00000969 747465206472697665-
  1162 00000972 2E20506C65617365   
  1163 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1163 00000983 726520746861742074-
  1163 0000098C 6865206469736B6574-
  1163 00000995 74652069732070726F-
  1163 0000099E 7065726C7920736561-
  1163 000009A7 74656420696E207468-
  1163 000009B0 652064726976652061-
  1163 000009B9 6E642072657472792E 
  1164 000009C2 0D0A00                  			db	13,10,0
  1165 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1165 000009CE 6B6E6F776E20457272-
  1165 000009D7 6F72               
  1166 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1166 000009E2 6F722D636F64652072-
  1166 000009EB 657475726E65642062-
  1166 000009F4 79207468652042494F-
  1166 000009FD 53206973206E6F7420-
  1166 00000A06 61207265636F676E69-
  1166 00000A0F 7A6564206572726F72-
  1166 00000A18 2E20506C6561736520-
  1166 00000A21 636F6E73756C74     
  1167 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
  1167 00000A31 6D7075746572277320-
  1167 00000A3A 746563686E6963616C-
  1167 00000A43 207265666572656E63-
  1167 00000A4C 6520666F7220612064-
  1167 00000A55 65736372697074696F-
  1167 00000A5E 6E206F662074686973-
  1167 00000A67 206572726F7220636F-
  1167 00000A70 64652E             
  1168 00000A73 0D0A00                  			db	13,10,0
  1169                                  wcPrepInBuf		equ	$
  1170                                  %endif
  1171                                  %ifdef BUILDDISK
  1172                                  ;=======================================================================================================================
  1173                                  ;
  1174                                  ;	File Allocation Tables
  1175                                  ;
  1176                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1177                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1178                                  ;	OS.COM file will be 7200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 7000h
  1179                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1180                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 57 clusters for OS.COM. The clusters used by
  1181                                  ;	OS.COM, then, will be cluster 2 through 59. The entry for cluster 59 is set to "0FFFh" to indicate that it is
  1182                                  ;	the last cluster in the chain.
  1183                                  ;
  1184                                  ;	Every three bytes encode two FAT entries as follows:
  1185                                  ;
  1186                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1187                                  ;
  1188                                  ;=======================================================================================================================
  1189                                  ;-----------------------------------------------------------------------------------------------------------------------
  1190                                  ;
  1191                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1192                                  ;
  1193                                  ;-----------------------------------------------------------------------------------------------------------------------
  1194                                  section			fat1							;first copy of FAT
  1195                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h			;clusters 0-3		ff0 fff 003 004
  1196                                  			db	005h,060h,000h,	007h,080h,000h			;custters 4-7   	005 006 007 008
  1197                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h			;clusters 8-11  	009 00a 00b 00c
  1198                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h			;clusters 12-15 	00d 00e 00f 010
  1199                                  			db	011h,020h,001h,	013h,040h,001h			;clusters 16-19 	011 012 013 014
  1200                                  			db	015h,060h,001h,	017h,080h,001h			;clusters 20-23		015 016 017 018
  1201                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h			;clusters 24-27		019 01a 01b 01c
  1202                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h			;clusters 28-31		01d 01e 01f 020
  1203                                  			db	021h,020h,002h,	023h,040h,002h			;clusters 32-35		021 022 023 024
  1204                                  			db	025h,060h,002h,	027h,080h,002h			;clusters 36-39		025 026 027 028
  1205                                  			db	029h,0A0h,002h,	02Bh,0C0h,002h			;clusters 40-43		029 02A 02B 02C
  1206                                  			db	02Dh,0E0h,002h, 02Fh,000h,003h			;clusters 44-47		02D 02E 02F 030
  1207                                  			db	031h,020h,003h, 033h,040h,003h			;clusters 48-51		031 032 033 034
  1208                                  			db	035h,060h,003h, 037h,080h,003h			;clusters 52-55		035 036 037 038
  1209                                  			db	039h,0A0h,003h, 0FFh,00Fh,000h			;clusters 56-59		039 03A FFF 000
  1210                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1211                                  ;-----------------------------------------------------------------------------------------------------------------------
  1212                                  ;
  1213                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1214                                  ;
  1215                                  ;-----------------------------------------------------------------------------------------------------------------------
  1216                                  section			fat2							;second copy of FAT
  1217                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h			;clusters 0-3		ff0 fff 003 004
  1218                                  			db	005h,060h,000h,	007h,080h,000h			;custters 4-7   	005 006 007 008
  1219                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h			;clusters 8-11  	009 00a 00b 00c
  1220                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h			;clusters 12-15 	00d 00e 00f 010
  1221                                  			db	011h,020h,001h,	013h,040h,001h			;clusters 16-19 	011 012 013 014
  1222                                  			db	015h,060h,001h,	017h,080h,001h			;clusters 20-23		015 016 017 018
  1223                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h			;clusters 24-27		019 01a 01b 01c
  1224                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h			;clusters 28-31		01d 01e 01f 020
  1225                                  			db	021h,020h,002h,	023h,040h,002h			;clusters 32-35		021 022 023 024
  1226                                  			db	025h,060h,002h,	027h,080h,002h			;clusters 36-39		025 026 027 028
  1227                                  			db	029h,0A0h,002h,	02Bh,0C0h,002h			;clusters 40-43		029 02A 02B 02C
  1228                                  			db	02Dh,0E0h,002h, 02Fh,000h,003h			;clusters 44-47		02D 02E 02F 030
  1229                                  			db	031h,020h,003h, 033h,040h,003h			;clusters 48-51		031 032 033 034
  1230                                  			db	035h,060h,003h, 037h,080h,003h			;clusters 52-55		035 036 037 038
  1231                                  			db	039h,0A0h,003h, 0FFh,00Fh,000h			;clusters 56-59		039 03A FFF 000
  1232                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  ;
  1235                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1236                                  ;
  1237                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1238                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1239                                  ;	copy.
  1240                                  ;
  1241                                  ;-----------------------------------------------------------------------------------------------------------------------
  1242                                  section			dir							;diskette directory
  1243                                  			db	"OS      COM"					;file name (must contain spaces)
  1244                                  			db	020h						;attribute (archive bit set)
  1245                                  			times	10 db 0						;unused
  1246                                  			dw	0h						;time
  1247                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1248                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1249                                  			dw	2						;first cluster
  1250                                  			dd	07200h						;file size
  1251                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1252                                  %endif
  1253                                  %ifdef BUILDCOM
  1254                                  ;=======================================================================================================================
  1255                                  ;
  1256                                  ;	OS.COM
  1257                                  ;
  1258                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1259                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1260                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1261                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1262                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1263                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1264                                  ;
  1265                                  ;	Our loader addressability is set up according to the following diagram.
  1266                                  ;
  1267                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1268                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1269                                  ;				|  256 = 100h bytes				|
  1270                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1271                                  ;				|  Boot Sector (vstart=0100h)			|
  1272                                  ;				|  1 sector = 512 = 200h bytes			|
  1273                                  ;			007e00	+-----------------------------------------------+
  1274                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1275                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1276                                  ;				|						|
  1277                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1278                                  ;				|						|
  1279                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1280                                  ;				|  Loader Code					|
  1281                                  ;				|  1 sector = 512 = 200h bytes			|
  1282                                  ;			009200	+-----------------------------------------------+ DS:0300
  1283                                  ;
  1284                                  ;=======================================================================================================================
  1285                                  ;-----------------------------------------------------------------------------------------------------------------------
  1286                                  ;
  1287                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1288                                  ;
  1289                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1290                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1291                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1292                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1293                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1294                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1295                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1296                                  ;	registers.
  1297                                  ;
  1298                                  ;-----------------------------------------------------------------------------------------------------------------------
  1299                                  			cpu	8086						;assume minimal CPU
  1300                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1301                                  			bits	16						;this is 16-bit code
  1302                                  Loader			push	cs						;use the code segment
  1303                                  			pop	ds						;...as our data segment
  1304                                  			push	cs						;use the code segment
  1305                                  			pop	es						;...as our extra segment
  1306                                  ;
  1307                                  ;	Write a message to the console so we know we have our addressability established.
  1308                                  ;
  1309                                  			mov	si,czStartingMsg				;starting message
  1310                                  			call	PutTTYString					;display loader message
  1311                                  ;
  1312                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1313                                  ;
  1314                                  			call	GetCPUType					;AL = cpu type
  1315                                  			mov	si,czCPUErrorMsg				;loader error message
  1316                                  			cmp	al,3						;80386+?
  1317                                  			jb	LoaderExit					;no, exit with error message
  1318                                  			cpu	386						;allow 80386 instructions
  1319                                  			mov	si,czCPUOKMsg					;cpu ok message
  1320                                  			call	PutTTYString					;display message
  1321                                  ;
  1322                                  ;	Initialize kernel data areas. The task queue is initialized here because as soon as we enter protected mode,
  1323                                  ;	the timer interrupt code will begin inspecting the task queue to determine if a task switch must be made. To
  1324                                  ;	start with, we set every 16th queue element to reference the background task selector. This will ensure that
  1325                                  ;	the background task, which updates the visible clock on the console, will be called at least once per second.
  1326                                  ;
  1327                                  			push	EKRNDATASEG					;load kernel data segment address ...
  1328                                  			pop	es						;... into extra segment reg
  1329                                  			mov	di,wwTaskQueue					;task queue address
  1330                                  			mov	cx,64						;outer loop
  1331                                  .10			push	cx						;save remaining outer iterations
  1332                                  			mov	cx,3						;inner loop
  1333                                  			mov	ax,ESELCONSOLETSS				;console task state segment selector
  1334                                  			cld							;forward strings
  1335                                  			rep	stosw						;store selectors in task queue
  1336                                  			mov	ax,ESELBACKGROUNDTSS				;background task state segment selector
  1337                                  			stosw							;store selector in task queue
  1338                                  			pop	cx						;restore remaining outer iterations
  1339                                  			loop	.10						;next
  1340                                  			xor	ax,ax						;zero register
  1341                                  			mov	cl,4						;remaining words to reset
  1342                                  			rep	stosw						;reset remaining kernel data
  1343                                  ;
  1344                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1345                                  ;
  1346                                  			mov	si,0300h					;GDT offset
  1347                                  			mov	ax,cs						;AX:SI = gdt source
  1348                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1349                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1350                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1351                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1352                                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1353                                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1354                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1355                                  			call	PutTTYString					;display message
  1356                                  ;
  1357                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1358                                  ;
  1359                                  			push	EKRNCODESEG					;use kernel code segment ...
  1360                                  			pop	es						;... as target segment
  1361                                  			xor	di,di						;ES:DI = target address
  1362                                  			mov	si,0300h					;DS:SI = source address
  1363                                  			mov	cx,07000h					;CX = kernel size
  1364                                  			cld							;forward strings
  1365                                  			rep	movsb						;copy kernel image
  1366                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1367                                  			call	PutTTYString					;display message
  1368                                  ;
  1369                                  ;	Switch to protected mode.
  1370                                  ;
  1371                                  			xor	si,si						;ES:SI = gdt addr
  1372                                  			mov	ss,si						;protected mode ss
  1373                                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1374                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1375                                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1376                                  			mov	dx,001Fh					;outer delay loop count
  1377                                  .20			mov	cx,0FFFFh					;inner delay loop count
  1378                                  			loop	$						;wait out pending interrupts
  1379                                  			dec	dx						;restore outer loop count
  1380                                  			jnz	.20						;continue outer loop
  1381                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1382                                  ;
  1383                                  ;	Enable hardware and maskable interrupts
  1384                                  ;
  1385                                  			xor	al,al						;enable all registers code
  1386                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1387                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1388                                  			sti							;enable maskable interrupts
  1389                                  ;
  1390                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1391                                  ;
  1392                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1393                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1394                                  			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1395                                  ;-----------------------------------------------------------------------------------------------------------------------
  1396                                  ;
  1397                                  ;	Routine:	LoaderExit
  1398                                  ;
  1399                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1400                                  ;
  1401                                  ;	In:		DS:SI	string address
  1402                                  ;
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404                                  LoaderExit		call	PutTTYString					;display error message
  1405                                  ;
  1406                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1407                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1408                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1409                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1410                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1411                                  ;
  1412                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1413                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1414                                  			jnz	.40						;exit if key pressed
  1415                                  			sti							;enable maskable interrupts
  1416                                  			hlt							;wait for interrupt
  1417                                  			jmp	.30						;repeat until keypress
  1418                                  ;
  1419                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1420                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1421                                  ;	HLT until the system resets.
  1422                                  ;
  1423                                  .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1424                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1425                                  .50			sti							;enable maskable interrupts
  1426                                  			hlt							;stop until reset, int, nmi
  1427                                  			jmp	.50						;loop until restart kicks in
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429                                  ;
  1430                                  ;	Routine:	GetCPUType
  1431                                  ;
  1432                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1433                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1434                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1435                                  ;
  1436                                  ;	Out:		AX	0 = 808x, v20, etc.
  1437                                  ;				1 = 80186
  1438                                  ;				2 = 80286
  1439                                  ;				3 = 80386
  1440                                  ;
  1441                                  ;-----------------------------------------------------------------------------------------------------------------------
  1442                                  GetCPUType		mov	al,1						;AL = 1
  1443                                  			mov	cl,32						;shift count
  1444                                  			shr	al,cl						;try a 32-bit shift
  1445                                  			or	al,al						;did the shift happen?
  1446                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1447                                  			cpu	186
  1448                                  			push	sp						;save stack pointer
  1449                                  			pop	cx						;...into cx
  1450                                  			cmp	cx,sp						;did sp decrement before push?
  1451                                  			jne	.10						;yes, cpu is 80186
  1452                                  			cpu	286
  1453                                  			inc	ax						;AX = 2
  1454                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1455                                  			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1456                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1457                                  			jz	.10						;yes, cpu is 80286
  1458                                  			inc	ax						;AX = 3
  1459                                  .10			ret							;return
  1460                                  ;-----------------------------------------------------------------------------------------------------------------------
  1461                                  ;
  1462                                  ;	Routine:	PutTTYString
  1463                                  ;
  1464                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1465                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1466                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1467                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1468                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1469                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1470                                  ;			registers and flags unless used to indicate return status.
  1471                                  ;
  1472                                  ;	In:		DS:SI	address of string
  1473                                  ;
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                  PutTTYString		cld							;forward strings
  1476                                  			lodsb							;load next byte at DS:SI in AL
  1477                                  			test	al,al						;end of string?
  1478                                  			jz	.10						;... yes, exit our loop
  1479                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1480                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1481                                  			jmp	PutTTYString					;repeat until done
  1482                                  .10			ret							;return
  1483                                  ;-----------------------------------------------------------------------------------------------------------------------
  1484                                  ;
  1485                                  ;	Loader Data
  1486                                  ;
  1487                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1488                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1489                                  ;
  1490                                  ;-----------------------------------------------------------------------------------------------------------------------
  1491                                  			align	2
  1492                                  cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1493                                  cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1494                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1495                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1496                                  czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1497                                  			db	"Please press any key to restart the computer.",13,10,0
  1498                                  czCPUOKMsg		db	"CPU OK",13,10,0
  1499                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1500                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1501                                  czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1502                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1503                                  			db	055h,0AAh					;end of sector signature
  1504                                  ;=======================================================================================================================
  1505                                  ;
  1506                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1507                                  ;
  1508                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1509                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1510                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1511                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1512                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1513                                  ;
  1514                                  ;=======================================================================================================================
  1515                                  ;=======================================================================================================================
  1516                                  ;
  1517                                  ;	Kernel Tables
  1518                                  ;
  1519                                  ;=======================================================================================================================
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  ;
  1522                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1523                                  ;
  1524                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1525                                  ;	first descriptor must be all nulls.
  1526                                  ;
  1527                                  ;	6   5         4         3         2         1         0
  1528                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1529                                  ;	----------------------------------------------------------------
  1530                                  ;	h......hffffmmmma......ab......................bn..............n
  1531                                  ;	00000000			all areas have base addresses below 2^24
  1532                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1533                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1534                                  ;	            1001		present, ring-0, selector
  1535                                  ;
  1536                                  ;	h...h	hi-order base address (bits 24-31)
  1537                                  ;	ffff	flags
  1538                                  ;	mmmm	hi-order limit (bits 16-19)
  1539                                  ;	a...a	access
  1540                                  ;	b...b	lo-order base address (bits 0-23)
  1541                                  ;	n...n	lo-order limit (bits 0-15)
  1542                                  ;
  1543                                  ;-----------------------------------------------------------------------------------------------------------------------
  1544                                  section			gdt							;global descriptor table
  1545                                  			dq	0000000000000000h				;00 required null selector
  1546                                  			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1547                                  			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1548                                  			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1549                                  			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1550                                  			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1551                                  			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1552                                  			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1553                                  			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1554                                  			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1555                                  			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1556                                  			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1557                                  			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1558                                  			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1559                                  			dq	004082006700007Fh				;70 80B  writable LDT   (background)
  1560                                  			dq	004089006780007Fh				;78 80B  writable TSS   (background)
  1561                                  			dq	00409300480007FFh				;80 2KB  foreground task message queue
  1562                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  ;
  1565                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1566                                  ;
  1567                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1568                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1569                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1570                                  ;
  1571                                  ;	6   5         4         3         2         1         0
  1572                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1573                                  ;	----------------------------------------------------------------
  1574                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1575                                  ;
  1576                                  ;	h...h	high-order offset (bits 16-31)
  1577                                  ;	P	present (0=unused interrupt)
  1578                                  ;	zz	descriptor privilege level
  1579                                  ;	S	storage segment (must be zero for IDT)
  1580                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1581                                  ;	S...S	handling code selector in GDT
  1582                                  ;	l...l	lo-order offset (bits 0-15)
  1583                                  ;
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  section			idt							;interrupt descriptor table
  1586                                  			mint	dividebyzero					;00 divide by zero
  1587                                  			mint	singlestep					;01 single step
  1588                                  			mint	nmi						;02 non-maskable
  1589                                  			mint	break						;03 break
  1590                                  			mint	into						;04 into
  1591                                  			mint	bounds						;05 bounds
  1592                                  			mint	badopcode					;06 bad op code
  1593                                  			mint	nocoproc					;07 no coprocessor
  1594                                  			mint	doublefault					;08 double-fault
  1595                                  			mint	operand						;09 operand
  1596                                  			mint	badtss						;0a bad TSS
  1597                                  			mint	notpresent					;0b not-present
  1598                                  			mint	stacklimit					;0c stack limit
  1599                                  			mint	protection					;0d general protection fault
  1600                                  			mint	int14						;0e (reserved)
  1601                                  			mint	int15						;0f (reserved)
  1602                                  			mint	coproccalc					;10 (reserved)
  1603                                  			mint	int17						;11 (reserved)
  1604                                  			mint	int18						;12 (reserved)
  1605                                  			mint	int19						;13 (reserved)
  1606                                  			mint	int20						;14 (reserved)
  1607                                  			mint	int21						;15 (reserved)
  1608                                  			mint	int22						;16 (reserved)
  1609                                  			mint	int23						;17 (reserved)
  1610                                  			mint	int24						;18 (reserved)
  1611                                  			mint	int25						;19 (reserved)
  1612                                  			mint	int26						;1a (reserved)
  1613                                  			mint	int27						;1b (reserved)
  1614                                  			mint	int28						;1c (reserved)
  1615                                  			mint	int29						;1d (reserved)
  1616                                  			mint	int30						;1e (reserved)
  1617                                  			mint	int31						;1f (reserved)
  1618                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1619                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1620                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1621                                  			mtrap	com2						;23 IRQ3 com2
  1622                                  			mtrap	com1						;24 IRQ4 com1
  1623                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1624                                  			mtrap	diskette					;26 IRQ6 diskette
  1625                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1626                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1627                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1628                                  			mtrap	irq10						;2a IRQA (reserved)
  1629                                  			mtrap	irq11						;2b IRQB (reserved)
  1630                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1631                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1632                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1633                                  			mtrap	irq15						;2f IRQF (reserved)
  1634                                  			mtrap	svc						;30 OS services
  1635                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1636                                  ;=======================================================================================================================
  1637                                  ;
  1638                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1639                                  ;
  1640                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1641                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1642                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1643                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1644                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1645                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1646                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1647                                  ;
  1648                                  ;=======================================================================================================================
  1649                                  section			kernel	vstart=0h					;data offsets relative to 0
  1650                                  			cpu	386						;allow 80386 instructions
  1651                                  			bits	32						;this is 32-bit code
  1652                                  ;=======================================================================================================================
  1653                                  ;
  1654                                  ;	CPU Interrupt Handlers
  1655                                  ;
  1656                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1657                                  ;	of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1658                                  ;
  1659                                  ;=======================================================================================================================
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;	INT0	Divide By Zero
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  			menter	dividebyzero					;divide by zero
  1666                                  			push	0						;store interrupt nbr
  1667                                  			push	czIntDivideByZero				;store message offset
  1668                                  			jmp	ReportInterrupt					;report interrupt
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  ;
  1671                                  ;	INT1	Single Step
  1672                                  ;
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                  			menter	singlestep					;single step
  1675                                  			push	1						;store interrupt nbr
  1676                                  			push	czIntSingleStep					;store message offset
  1677                                  			jmp	ReportInterrupt					;report interrupt
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  ;
  1680                                  ;	INT2	Non-Maskable Interrupt
  1681                                  ;
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  			menter	nmi						;non-maskable
  1684                                  			push	2						;store interrupt nbr
  1685                                  			push	czIntNonMaskable				;store message offset
  1686                                  			jmp	ReportInterrupt					;report interrupt
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  ;
  1689                                  ;	INT3	Break
  1690                                  ;
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                  			menter	break						;break
  1693                                  			push	3						;store interrupt nbr
  1694                                  			push	czIntBreak					;store message offset
  1695                                  			jmp	ReportInterrupt					;report interrupt
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  ;
  1698                                  ;	INT4	Into
  1699                                  ;
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                  			menter	into						;into
  1702                                  			push	4						;store interrupt nbr
  1703                                  			push	czIntInto					;store message offset
  1704                                  			jmp	ReportInterrupt					;report interrupt
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                  ;
  1707                                  ;	INT5	Bounds
  1708                                  ;
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  			menter	bounds						;bounds
  1711                                  			push	5						;store interrupt nbr
  1712                                  			push	czIntBounds					;store message offset
  1713                                  			jmp	ReportInterrupt					;report interrupt
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                  ;
  1716                                  ;	INT6	Bad Operation Code
  1717                                  ;
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  			menter	badopcode					;bad opcode interrupt
  1720                                  			push	6						;store interrupt nbr
  1721                                  			push	czIntBadOpCode					;store message offset
  1722                                  			jmp	ReportInterrupt					;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;	INT7	No Coprocessor
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  			menter	nocoproc					;no coprocessor interrupt
  1729                                  			push	7						;store interrupt nbr
  1730                                  			push	czIntNoCoprocessor				;store message offset
  1731                                  			jmp	ReportInterrupt					;report interrupt
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;	INT8	Double Fault
  1735                                  ;
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                  			menter	doublefault					;doublefault interrupt
  1738                                  			push	8						;store interrupt nbr
  1739                                  			push	czIntDoubleFault				;store message offset
  1740                                  			jmp	ReportInterrupt					;report interrupt
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;	INT9	Operand
  1744                                  ;
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                  			menter	operand						;operand interrupt
  1747                                  			push	9						;store interrupt nbr
  1748                                  			push	czIntOperand					;store message offset
  1749                                  			jmp	ReportInterrupt					;report interrupt
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  ;
  1752                                  ;	INT10	Bad Task State Segment
  1753                                  ;
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  			menter	badtss						;bad tss interrupt
  1756                                  			push	10						;store interrupt nbr
  1757                                  			push	czIntBadTSS					;store message offset
  1758                                  			jmp	ReportInterrupt					;report interrupt
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  ;
  1761                                  ;	INT11	Not Present
  1762                                  ;
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  			menter	notpresent					;not present interrupt
  1765                                  			push	11						;store interrupt nbr
  1766                                  			push	czIntNotPresent					;store message offset
  1767                                  			jmp	ReportInterrupt					;report interrupt
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                  ;
  1770                                  ;	INT12	Stack Limit
  1771                                  ;
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  			menter	stacklimit					;stack limit interrupt
  1774                                  			push	12						;store interrupt nbr
  1775                                  			push	czIntStackLimit					;store message offset
  1776                                  			jmp	ReportInterrupt					;report interrupt
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                  ;
  1779                                  ;	INT13	General Protection Fault
  1780                                  ;
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  			menter	protection					;protection fault interrupt
  1783                                  			push	13						;store interrupt nbr
  1784                                  			push	czIntProtection					;store message offset
  1785                                  			jmp	ReportInterrupt					;report interrupt
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                  ;
  1788                                  ;	INT14	Reserved
  1789                                  ;
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  			menter	int14						;(reserved)
  1792                                  			push	14						;store interrupt nbr
  1793                                  			push	czIntReserved					;store message offset
  1794                                  			jmp	ReportInterrupt					;report interrupt
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;	INT15	Reserved
  1798                                  ;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  			menter	int15						;(reserved)
  1801                                  			push	15						;store interrupt nbr
  1802                                  			push	czIntReserved					;store message offset
  1803                                  			jmp	ReportInterrupt					;report interrupt
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                  ;
  1806                                  ;	INT16	Coprocessor Calculation
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  			menter	coproccalc					;coprocessor calculation
  1810                                  			push	16						;store interrupt nbr
  1811                                  			push	czIntCoprocessorCalc				;store message offset
  1812                                  			jmp	ReportInterrupt					;report interrupt
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                  ;
  1815                                  ;	INT17	Reserved
  1816                                  ;
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                  			menter	int17						;(reserved)
  1819                                  			push	17						;store interrupt nbr
  1820                                  			push	czIntReserved					;store message offset
  1821                                  			jmp	ReportInterrupt					;report interrupt
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                  ;
  1824                                  ;	INT18	Reserved
  1825                                  ;
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  			menter	int18						;(reserved)
  1828                                  			push	18						;store interrupt nbr
  1829                                  			push	czIntReserved					;store message offset
  1830                                  			jmp	ReportInterrupt					;report interrupt
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  ;
  1833                                  ;	INT19	Reserved
  1834                                  ;
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  			menter	int19						;(reserved)
  1837                                  			push	19						;store interrupt nbr
  1838                                  			push	czIntReserved					;store message offset
  1839                                  			jmp	ReportInterrupt					;report interrupt
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  ;
  1842                                  ;	INT20	Reserved
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  			menter	int20						;(reserved)
  1846                                  			push	20						;store interrupt nbr
  1847                                  			push	czIntReserved					;store message offset
  1848                                  			jmp	ReportInterrupt					;report interrupt
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                  ;
  1851                                  ;	INT21	Reserved
  1852                                  ;
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  			menter	int21						;(reserved)
  1855                                  			push	21						;store interrupt nbr
  1856                                  			push	czIntReserved					;store message offset
  1857                                  			jmp	ReportInterrupt					;report interrupt
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;	INT22	Reserved
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  			menter	int22						;(reserved)
  1864                                  			push	22						;store interrupt nbr
  1865                                  			push	czIntReserved					;store message offset
  1866                                  			jmp	ReportInterrupt					;report interrupt
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                  ;
  1869                                  ;	INT23	Reserved
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  			menter	int23						;(reserved)
  1873                                  			push	23						;store interrupt nbr
  1874                                  			push	czIntReserved					;store message offset
  1875                                  			jmp	ReportInterrupt					;report interrupt
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ;
  1878                                  ;	INT24	Reserved
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  			menter	int24						;(reserved)
  1882                                  			push	24						;store interrupt nbr
  1883                                  			push	czIntReserved					;store message offset
  1884                                  			jmp	ReportInterrupt					;report interrupt
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                  ;
  1887                                  ;	INT25	Reserved
  1888                                  ;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  			menter	int25						;(reserved)
  1891                                  			push	25						;store interrupt nbr
  1892                                  			push	czIntReserved					;store message offset
  1893                                  			jmp	ReportInterrupt					;report interrupt
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;	INT26	Reserved
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  			menter	int26						;(reserved)
  1900                                  			push	26						;store interrupt nbr
  1901                                  			push	czIntReserved					;store message offset
  1902                                  			jmp	ReportInterrupt					;report interrupt
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  ;
  1905                                  ;	INT27	Reserved
  1906                                  ;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                  			menter	int27						;(reserved)
  1909                                  			push	27						;store interrupt nbr
  1910                                  			push	czIntReserved					;store message offset
  1911                                  			jmp	ReportInterrupt					;report interrupt
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;	INT28	Reserved
  1915                                  ;
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                  			menter	int28						;(reserved)
  1918                                  			push	28						;store interrupt nbr
  1919                                  			push	czIntReserved					;store message offset
  1920                                  			jmp	ReportInterrupt					;report interrupt
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;	INT29	Reserved
  1924                                  ;
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                  			menter	int29						;(reserved)
  1927                                  			push	29						;store interrupt nbr
  1928                                  			push	czIntReserved					;store message offset
  1929                                  			jmp	ReportInterrupt					;report interrupt
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                  ;
  1932                                  ;	INT30	Reserved
  1933                                  ;
  1934                                  ;-----------------------------------------------------------------------------------------------------------------------
  1935                                  			menter	int30						;(reserved)
  1936                                  			push	30						;store interrupt nbr
  1937                                  			push	czIntReserved					;store message offset
  1938                                  			jmp	ReportInterrupt					;report interrupt
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                  ;
  1941                                  ;	INT31	Reserved
  1942                                  ;
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  			menter	int31						;(reserved)
  1945                                  			push	31						;store interrupt nbr
  1946                                  			push	czIntReserved					;store message offset
  1947                                  			jmp	ReportInterrupt					;report interrupt
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                  ;
  1950                                  ;	Routine:	ReportInterrupt
  1951                                  ;
  1952                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1953                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1954                                  ;
  1955                                  ;	In:		[esp+16]	eflags					stored by interrupt call
  1956                                  ;			[esp+12]	cs					stored by interrupt call
  1957                                  ;			[esp+8]		eip					stored by interrupt call
  1958                                  ;			[esp+4]		interrupt number (0-31)			stored by push instruction
  1959                                  ;			[esp+0]		error message address			stored by push instructions
  1960                                  ;
  1961                                  ;	Out:		N/A		This routine does not exit.
  1962                                  ;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  ReportInterrupt		push	ds						;save DS at time of interrupt
  1965                                  			push	es						;save ES at time of interrupt
  1966                                  			pushad							;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1967                                  			mov	ebp,esp						;ebp --> [EDI]
  1968                                  ;
  1969                                  ;	Addressability to registers at the time of the interrupt is now established as:
  1970                                  ;
  1971                                  ;			[ebp+56]	eflags
  1972                                  ;			[ebp+52]	cs
  1973                                  ;			[ebp+48]	eip
  1974                                  ;			[ebp+44]	interrupt number (0-31)
  1975                                  ;			[ebp+40]	error message address
  1976                                  ;			[ebp+36]	ds
  1977                                  ;			[ebp+32]	es
  1978                                  ;			[ebp+28]	eax
  1979                                  ;			[ebp+24]	ecx
  1980                                  ;			[ebp+20]	edx
  1981                                  ;			[ebp+16]	ebx
  1982                                  ;			[ebp+12]	esp
  1983                                  ;			[ebp+8]		ebp
  1984                                  ;			[ebp+4]		esi
  1985                                  ;			[ebp+0]		edi
  1986                                  ;
  1987                                  			push	cs						;load code selector ...
  1988                                  			pop	ds						;... into DS
  1989                                  			push	ESELCGA						;load CGA memory selector ...
  1990                                  			pop	es						;... into ES
  1991                                  ;
  1992                                  ;	Display the interrupt report boundary box
  1993                                  ;
  1994                                  			mov	cl,13						;column
  1995                                  			mov	ch,6						;row
  1996                                  			mov	dl,50						;width
  1997                                  			mov	dh,8						;height
  1998                                  			mov	bh,07h						;attribute
  1999                                  			call	DrawTextDialogBox				;draw text dialog box
  2000                                  ;
  2001                                  ;	Display the report header
  2002                                  ;
  2003                                  			mov	cl,15						;column
  2004                                  			mov	ch,7						;row
  2005                                  			mov	esi,czIntHeader					;interrupt message header
  2006                                  			call	SetConsoleString				;draw text string
  2007                                  ;
  2008                                  ;	Display the interrupt description label
  2009                                  ;
  2010                                  			mov	cl,15						;column
  2011                                  			mov	ch,8						;row
  2012                                  			mov	esi,czIntLabel					;interrupt message description lead
  2013                                  			call	SetConsoleString				;draw text string
  2014                                  ;
  2015                                  ;	Display the interrupt number
  2016                                  ;
  2017                                  			mov	eax,[ebp+44]					;interrupt number
  2018                                  			mov	cl,26						;column
  2019                                  			mov	ch,8						;row
  2020                                  			call	PutConsoleHexByte				;draw ASCII hex byte
  2021                                  ;
  2022                                  ;	Display the interrupt name
  2023                                  ;
  2024                                  			mov	cl,29						;column
  2025                                  			mov	ch,8						;row
  2026                                  			mov	esi,[ebp+40]					;interrupt-specific message
  2027                                  			call	SetConsoleString				;display interrupt description
  2028                                  ;
  2029                                  ;	Display the register values header
  2030                                  ;
  2031                                  			mov	cl,15						;column
  2032                                  			mov	ch,10						;row
  2033                                  			mov	esi,czIntRegsHeader				;interrupt registers header
  2034                                  			call	SetConsoleString				;draw text string
  2035                                  ;
  2036                                  ;	Display the EAX register label and value
  2037                                  ;
  2038                                  			mov	cl,15						;column
  2039                                  			mov	ch,11						;row
  2040                                  			mov	esi,czIntEAX					;register EAX label
  2041                                  			call	SetConsoleString				;draw label
  2042                                  			mov	eax,[ebp+28]					;EAX value at interrupt
  2043                                  			mov	cl,19						;column
  2044                                  			mov	ch,11						;row
  2045                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2046                                  ;
  2047                                  ;	Display the ECX register label and value
  2048                                  ;
  2049                                  			mov	cl,15						;column
  2050                                  			mov	ch,12						;row
  2051                                  			mov	esi,czIntECX					;label
  2052                                  			call	SetConsoleString				;draw label
  2053                                  			mov	eax,[ebp+24]					;ECX value at interrupt
  2054                                  			mov	cl,19						;column
  2055                                  			mov	ch,12						;row
  2056                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2057                                  ;
  2058                                  ;	Display the EDX register label and value
  2059                                  ;
  2060                                  			mov	cl,15						;column
  2061                                  			mov	ch,13						;row
  2062                                  			mov	esi,czIntEDX					;label
  2063                                  			call	SetConsoleString				;draw label
  2064                                  			mov	eax,[ebp+20]					;EDX value at interrupt
  2065                                  			mov	cl,19						;column
  2066                                  			mov	ch,13						;row
  2067                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2068                                  ;
  2069                                  ;	Display the EBX register label and value
  2070                                  ;
  2071                                  			mov	cl,15						;column
  2072                                  			mov	ch,14						;row
  2073                                  			mov	esi,czIntEBX					;label
  2074                                  			call	SetConsoleString				;draw label
  2075                                  			mov	eax,[ebp+16]					;EBX value at interrupt
  2076                                  			mov	cl,19						;column
  2077                                  			mov	ch,14						;row
  2078                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2079                                  ;
  2080                                  ;	Display the ESI register label and value
  2081                                  ;
  2082                                  			mov	cl,29						;column
  2083                                  			mov	ch,11						;row
  2084                                  			mov	esi,czIntESI					;label
  2085                                  			call	SetConsoleString				;draw label
  2086                                  			mov	eax,[ebp+4]					;ESI
  2087                                  			mov	cl,33						;column
  2088                                  			mov	ch,11						;row
  2089                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2090                                  ;
  2091                                  ;	Display the EDI register label and value
  2092                                  ;
  2093                                  			mov	cl,29						;column
  2094                                  			mov	ch,12						;row
  2095                                  			mov	esi,czIntEDI					;label
  2096                                  			call	SetConsoleString				;draw label
  2097                                  			mov	eax,[ebp+0]					;EDI
  2098                                  			mov	cl,33						;column
  2099                                  			mov	ch,12						;row
  2100                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2101                                  ;
  2102                                  ;	Display the EBP register label and value
  2103                                  ;
  2104                                  			mov	cl,29						;column
  2105                                  			mov	ch,13						;row
  2106                                  			mov	esi,czIntEBP					;label
  2107                                  			call	SetConsoleString				;draw label
  2108                                  			mov	eax,[ebp+8]					;EBP
  2109                                  			mov	cl,33						;column
  2110                                  			mov	ch,13						;row
  2111                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2112                                  ;
  2113                                  ;	Display the DS register label and value
  2114                                  ;
  2115                                  			mov	cl,42						;column
  2116                                  			mov	ch,11						;row
  2117                                  			mov	esi,czIntDS					;label
  2118                                  			call	SetConsoleString				;draw label
  2119                                  			xor	eax,eax						;zero register
  2120                                  			mov	ax,[ebp+36]					;DS
  2121                                  			mov	cl,46						;column
  2122                                  			mov	ch,11						;row
  2123                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2124                                  ;
  2125                                  ;	Display the ES register label and value
  2126                                  ;
  2127                                  			mov	cl,42						;column
  2128                                  			mov	ch,12						;row
  2129                                  			mov	esi,czIntES					;label
  2130                                  			call	SetConsoleString				;draw label
  2131                                  			xor	eax,eax						;zero register
  2132                                  			mov	ax,[ebp+32]					;ES
  2133                                  			mov	cl,46						;column
  2134                                  			mov	ch,12						;row
  2135                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2136                                  ;
  2137                                  ;	Display the SS register label and value
  2138                                  ;
  2139                                  			mov	cl,42						;column
  2140                                  			mov	ch,13						;row
  2141                                  			mov	esi,czIntSS					;label
  2142                                  			call	SetConsoleString				;draw label
  2143                                  			xor	eax,eax						;zero register
  2144                                  			mov	ax,ss						;SS
  2145                                  			mov	cl,46						;column
  2146                                  			mov	ch,13						;row
  2147                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2148                                  ;
  2149                                  ;	Display the CS register lable and value
  2150                                  ;
  2151                                  			mov	cl,42						;column
  2152                                  			mov	ch,14						;row
  2153                                  			mov	esi,czIntCS					;label
  2154                                  			call	SetConsoleString				;draw label
  2155                                  			xor	eax,eax						;zero register
  2156                                  			mov	ax,[ebp+52]					;CS
  2157                                  			mov	cl,46						;column
  2158                                  			mov	ch,14						;row
  2159                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2160                                  ;
  2161                                  ;	Display the EFLAGS register label and value
  2162                                  ;
  2163                                  			mov	cl,51						;column
  2164                                  			mov	ch,11						;row
  2165                                  			mov	esi,czIntEFLAGS					;label
  2166                                  			call	SetConsoleString				;draw label
  2167                                  			mov	eax,[ebp+56]					;EFLAGS
  2168                                  			mov	cl,55						;column
  2169                                  			mov	ch,11						;row
  2170                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2171                                  ;
  2172                                  ;	Display the ESP register label and value
  2173                                  ;
  2174                                  			mov	cl,51						;column
  2175                                  			mov	ch,13						;row
  2176                                  			mov	esi,czIntESP					;label
  2177                                  			call	SetConsoleString				;draw label
  2178                                  			mov	eax,[ebp+12]					;ESP
  2179                                  			mov	cl,55						;column
  2180                                  			mov	ch,13						;row
  2181                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2182                                  ;
  2183                                  ;	Display the EIP register label and value
  2184                                  ;
  2185                                  			mov	cl,51						;column
  2186                                  			mov	ch,14						;row
  2187                                  			mov	esi,czIntEIP					;label
  2188                                  			call	SetConsoleString				;draw label
  2189                                  			mov	eax,[ebp+48]					;EIP
  2190                                  			mov	cl,55						;column
  2191                                  			mov	ch,14						;row
  2192                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2193                                  ;
  2194                                  ;	Halt and loop until reset
  2195                                  ;
  2196                                  .10			sti							;enable maskable interrupts
  2197                                  			hlt							;halt processor
  2198                                  			jmp	.10						;resume on interrupt
  2199                                  ;-----------------------------------------------------------------------------------------------------------------------
  2200                                  ;
  2201                                  ;	Processor Interrupt Name Strings
  2202                                  ;
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  czIntDivideByZero	db	"Division by zero",0
  2205                                  czIntSingleStep		db	"Single step",0
  2206                                  czIntNonMaskable	db	"Non-maskable interrupt",0
  2207                                  czIntBreak		db	"Break",0
  2208                                  czIntInto		db	"Into",0
  2209                                  czIntBounds		db	"Bounds",0
  2210                                  czIntBadOpCode		db	"Bad Operation Code",0
  2211                                  czIntNoCoprocessor	db	"No Coprocessor",0
  2212                                  czIntDoubleFault	db	"Double Fault",0
  2213                                  czIntOperand		db	"Operand",0
  2214                                  czIntBadTSS		db	"Bad Task State Segment",0
  2215                                  czIntNotPresent		db	"Not Present",0
  2216                                  czIntStackLimit		db	"Stack Limit",0
  2217                                  czIntProtection		db	"General Protection Fault",0
  2218                                  czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  2219                                  czIntReserved		db	"Reserved",0
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221                                  ;
  2222                                  ;	Processor Interrupt Handling Strings
  2223                                  ;
  2224                                  ;-----------------------------------------------------------------------------------------------------------------------
  2225                                  czIntHeader		db	"An unhandled processor interrupt has occurred:",0
  2226                                  czIntLabel		db	"Interrupt #",0
  2227                                  czIntRegsHeader		db	"Registers at the time of the interrupt:",0
  2228                                  czIntEAX		db	"EAX:",0
  2229                                  czIntECX		db	"ECX:",0
  2230                                  czIntEDX		db	"EDX:",0
  2231                                  czIntEBX		db	"EBX:",0
  2232                                  czIntESI		db	"ESI:",0
  2233                                  czIntEDI		db	"EDI:",0
  2234                                  czIntEBP		db	"EBP:",0
  2235                                  czIntESP		db	"ESP:",0
  2236                                  czIntDS			db	" DS:",0
  2237                                  czIntES			db	" ES:",0
  2238                                  czIntSS			db	" SS:",0
  2239                                  czIntCS			db	" CS:",0
  2240                                  czIntEFLAGS		db	"FLG:",0
  2241                                  czIntEIP		db	"EIP:",0
  2242                                  ;-----------------------------------------------------------------------------------------------------------------------
  2243                                  ;
  2244                                  ;	Routine:	DrawTextDialogBox
  2245                                  ;
  2246                                  ;	Description:	This routine opens a text-mode dialog box with an ASCII border.
  2247                                  ;
  2248                                  ;	In:		CL	upper left column (0-79)
  2249                                  ;			CH	upper left row (0-24)
  2250                                  ;			DL	column width, excluding border
  2251                                  ;			DH	row height, excluding border
  2252                                  ;			BH	color attribute
  2253                                  ;
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                  DrawTextDialogBox	push	ecx						;save non-volatile regs
  2256                                  			push	esi						;
  2257                                  			push	edi						;
  2258                                  			push	es						;
  2259                                  			push	ESELCGA						;load CGA selector ...
  2260                                  			pop	es						;... into ES
  2261                                  ;
  2262                                  ;	Compute target display offset
  2263                                  ;
  2264                                  			xor	eax,eax						;zero register
  2265                                  			mov	al,ch						;row
  2266                                  			mov	ah,ECONROWBYTES					;mulitplicand
  2267                                  			mul	ah						;row offset
  2268                                  			add	al,cl						;add column
  2269                                  			adc	ah,0						;add overflow
  2270                                  			add	al,cl						;add column
  2271                                  			adc	ah,0						;add overflow
  2272                                  			mov	edi,eax						;target row offset
  2273                                  ;
  2274                                  ;	Display top border row
  2275                                  ;
  2276                                  			push	edi						;save target row offset
  2277                                  			mov	ah,bh						;attribute
  2278                                  			mov	al,EASCIIBORDSGLUPRLFT				;upper-left single border
  2279                                  			stosw							;display character and attribute
  2280                                  			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2281                                  			xor	ecx,ecx						;zero register
  2282                                  			mov	cl,dl						;width, excluding border
  2283                                  			rep	stosw						;display horizontal border
  2284                                  			mov	al,EASCIIBORDSGLUPRRGT				;upper-right single border
  2285                                  			stosw							;display character and attribute
  2286                                  			pop	edi						;restore target row offset
  2287                                  			add	edi,ECONROWBYTES				;next row
  2288                                  ;
  2289                                  ;	Display dialog box body rows
  2290                                  ;
  2291                                  			xor	ecx,ecx						;zero register
  2292                                  			mov	cl,dh						;height, excluding border
  2293                                  .10			push	ecx						;save remaining rows
  2294                                  			push	edi						;save target row offset
  2295                                  			mov	ah,bh						;attribute
  2296                                  			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2297                                  			stosw							;display character and attribute
  2298                                  			mov	al,EASCIISPACE					;space
  2299                                  			xor	ecx,ecx						;zero register
  2300                                  			mov	cl,dl						;width, excluding border
  2301                                  			rep	stosw						;display row
  2302                                  			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2303                                  			stosw							;display character and attribute
  2304                                  			pop	edi						;restore target row offset
  2305                                  			add	edi,ECONROWBYTES				;next row
  2306                                  			pop	ecx						;remaining rows
  2307                                  			loop	.10						;next row
  2308                                  ;
  2309                                  ;	Display bottom border row
  2310                                  ;
  2311                                  			push	edi						;save target row offset
  2312                                  			mov	ah,bh						;attribute
  2313                                  			mov	al,EASCIIBORDSGLLWRLFT				;lower-left single border
  2314                                  			stosw							;display character and attribute
  2315                                  			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2316                                  			xor	ecx,ecx						;zero register
  2317                                  			mov	cl,dl						;width, excluding border
  2318                                  			rep	stosw						;display horizontal border
  2319                                  			mov	al,EASCIIBORDSGLLWRRGT				;lower-right single border
  2320                                  			stosw							;display character and attribute
  2321                                  			pop	edi						;restore target row offset
  2322                                  			add	edi,ECONROWBYTES				;next row
  2323                                  ;
  2324                                  ;	Restore and return
  2325                                  ;
  2326                                  			pop	es						;restore non-volatile regs
  2327                                  			pop	edi						;
  2328                                  			pop	esi						;
  2329                                  			pop	ecx						;
  2330                                  			ret							;return
  2331                                  ;=======================================================================================================================
  2332                                  ;
  2333                                  ;	Hardware Device Interupts
  2334                                  ;
  2335                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2336                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2337                                  ;	(BX=2028h).
  2338                                  ;
  2339                                  ;=======================================================================================================================
  2340                                  ;-----------------------------------------------------------------------------------------------------------------------
  2341                                  ;
  2342                                  ;	IRQ0	Clock Tick Interrupt
  2343                                  ;
  2344                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2345                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2346                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2347                                  ;
  2348                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2349                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2350                                  ;
  2351                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2352                                  ;	zero, the floppy disk motors are turned off.
  2353                                  ;
  2354                                  ;-----------------------------------------------------------------------------------------------------------------------
  2355                                  			menter	clocktick					;clock tick interrupt
  2356                                  			push	eax						;save modified regs
  2357                                  			push	edx						;
  2358                                  			push	ds						;
  2359                                  ;
  2360                                  ;	Update the clock tick count and the elapsed days as needed
  2361                                  ;
  2362                                  			push	ESELDAT						;load OS data selector ...
  2363                                  			pop	ds						;... into data segment register
  2364                                  			mov	eax,[wdClockTicks]				;eax = clock ticks
  2365                                  			inc	eax						;increment clock ticks
  2366                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  2367                                  			jb	irq0.10						;no, skip ahead
  2368                                  			inc	byte [wbClockDays]				;increment clock days
  2369                                  			xor	eax,eax						;reset clock ticks
  2370                                  irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  2371                                  ;
  2372                                  ;	Decrement floppy disk motor timeout
  2373                                  ;
  2374                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  2375                                  			je	irq0.20						;yes, skip ahead
  2376                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  2377                                  			jnz	irq0.20						;skip ahead if non-zero
  2378                                  ;
  2379                                  ;	Turn off the floppy disk motor if appropriate
  2380                                  ;
  2381                                  			sti							;enable maskable interrupts
  2382                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  2383                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  2384                                  			in	al,dx						;FDC main status byte
  2385                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  2386                                  			jnz	irq0.15						;wait while busy
  2387                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  2388                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  2389                                  			mov	dh,EFDCPORTHI					;fdc port hi
  2390                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  2391                                  			out	dx,al						;turn motor off
  2392                                  ;
  2393                                  ;	Signal the end of the hardware interrupt
  2394                                  ;
  2395                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2396                                  ;
  2397                                  ;	Determine if a task switch is appropriate
  2398                                  ;
  2399                                  			cmp	byte [wbInCriticalSection],0			;any task holding a critical section?
  2400                                  			jne	irq0.30						;yes, do not switch tasks
  2401                                  			inc	byte [wbTaskIndex]				;increment task queue index (0-255)
  2402                                  			movzx	eax,byte [wbTaskIndex]				;load task queue index
  2403                                  			mov	dx,[wwTaskQueue+eax*2]				;next task selector
  2404                                  			str	ax						;current task selector
  2405                                  			cmp	dx,ax						;next task same is current task?
  2406                                  			je	irq0.30						;yes, skip task switch
  2407                                  ;
  2408                                  ;	Switch task
  2409                                  ;
  2410                                  			push	es						;save extra segment register
  2411                                  			push	ESELGDT						;load GDT alias selector ...
  2412                                  			pop	es						;... into extra segment reg
  2413                                  			and	byte [es:eax+5],0FDh				;reset task-busy bit of current task
  2414                                  			pop	es						;restore extra segment register
  2415                                  			mov	word [wwFarJumpSelector],dx			;set next task selector in jmp instr
  2416                                  			jmp	far [wdFarJumpEIP]				;jump to next task
  2417                                  ;
  2418                                  ;	Restore and return
  2419                                  ;
  2420                                  irq0.30			pop	ds						;restore modified regs
  2421                                  			pop	edx						;
  2422                                  			pop	eax						;
  2423                                  			iretd							;return
  2424                                  ;-----------------------------------------------------------------------------------------------------------------------
  2425                                  ;
  2426                                  ;	IRQ1	Keyboard Interrupt
  2427                                  ;
  2428                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2429                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2430                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2431                                  ;	ALL modified registers upon return. Note that keyboard messages are added to the keyboard focus message queue.
  2432                                  ;	This is a queue referenced in the global descriptor table and must always reference the message queue for the
  2433                                  ;	task that has the keyboard focus. To direct keyboard messages to another task, update the GDT descriptor to
  2434                                  ;	point to the message queue for that task.
  2435                                  ;
  2436                                  ;-----------------------------------------------------------------------------------------------------------------------
  2437                                  			menter	keyboard					;keyboard interrrupt
  2438                                  			push	eax						;save non-volatile regs
  2439                                  			push	ebx						;
  2440                                  			push	ecx						;
  2441                                  			push	esi						;
  2442                                  			push	ds						;
  2443                                  			push	ESELDAT						;load OS data selector ...
  2444                                  			pop	ds						;... into data segment register
  2445                                  			xor	al,al						;zero
  2446                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  2447                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  2448                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  2449                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  2450                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  2451                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  2452                                  			mov	al,' '						;space
  2453                                  			mov	[wbConsoleChar],al				;set character to space
  2454                                  			mov	al,EKEYFTIMEOUT					;controller timeout flag
  2455                                  			not	al						;controller timeout mask
  2456                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  2457                                  			mov	bl,[wbConsoleShift]				;shift flags
  2458                                  			mov	bh,[wbConsoleLock]				;lock flags
  2459                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2460                                  			jz	irq1.140					;yes, skip ahead
  2461                                  			in	al,EKEYBPORTDATA				;read scan code 0
  2462                                  			mov	[wbConsoleScan0],al				;save scan code 0
  2463                                  			mov	ah,al						;copy scan code 0
  2464                                  			mov	al,EKEYFSHIFTLEFT				;left shift flag
  2465                                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  2466                                  			je	irq1.30						;yes, set flag
  2467                                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  2468                                  			je	irq1.40						;yes, reset flag
  2469                                  			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  2470                                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  2471                                  			je	irq1.30						;yes, set flag
  2472                                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  2473                                  			je	irq1.40						;yes, reset flag
  2474                                  			mov	al,EKEYFCTRLLEFT				;left control flag
  2475                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2476                                  			je	irq1.30						;yes, set flag
  2477                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2478                                  			je	irq1.40						;yes, reset flag
  2479                                  			mov	al,EKEYFALTLEFT					;left alt flag
  2480                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2481                                  			je	irq1.30						;yes, set flag
  2482                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2483                                  			je	irq1.40						;yes, reset flag
  2484                                  			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  2485                                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  2486                                  			je	irq1.50						;yes, toggle lamps and flags
  2487                                  			mov	al,EKEYFLOCKNUM					;num-lock flag
  2488                                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  2489                                  			je	irq1.50						;yes, toggle lamps and flags
  2490                                  			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  2491                                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  2492                                  			je	irq1.50						;yes, toggle lamps and flags
  2493                                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  2494                                  			jne	irq1.70 					;no, skip ahead
  2495                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2496                                  			jz	irq1.140					;yes, skip ahead
  2497                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2498                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2499                                  			mov	ah,al						;copy scan code 1
  2500                                  			mov	al,EKEYFCTRLRIGHT				;right control flag
  2501                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2502                                  			je	irq1.30						;yes, set flag
  2503                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2504                                  			je	irq1.40						;yes, reset flag
  2505                                  			mov	al,EKEYFALTRIGHT				;right alt flag
  2506                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2507                                  			je	irq1.30						;yes, set flag
  2508                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2509                                  			je	irq1.40						;yes, reset flag
  2510                                  			cmp	ah,EKEYBSLASH					;slash down code?
  2511                                  			je	irq1.80						;yes, skip ahead
  2512                                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  2513                                  			je	irq1.80						;yes, skip ahead
  2514                                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  2515                                  			je	irq1.10						;yes, continue
  2516                                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  2517                                  			jne	irq1.20						;no, skip ahead
  2518                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  2519                                  			jz	irq1.140					;yes, skip ahead
  2520                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2521                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2522                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2523                                  			jz	irq1.140					;yes, skip ahead
  2524                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2525                                  			mov	[wbConsoleScan3],al				;read scan code 3
  2526                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  2527                                  irq1.30			or	bl,al						;set shift flag
  2528                                  			jmp	irq1.60						;skip ahead
  2529                                  irq1.40			not	al						;convert flag to mask
  2530                                  			and	bl,al						;reset shift flag
  2531                                  			jmp	irq1.60						;skip ahead
  2532                                  irq1.50			xor	bh,al						;toggle lock flag
  2533                                  			call	SetKeyboardLamps				;update keyboard lamps
  2534                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  2535                                  			mov	[wbConsoleLock],bh				;save lock flags
  2536                                  			call	PutConsoleOIAShift				;update OIA indicators
  2537                                  			jmp	irq1.150					;finish keyboard handling
  2538                                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2539                                  			jne	irq1.80						;no continue
  2540                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2541                                  			jz	irq1.140					;yes, skip ahead
  2542                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2543                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2544                                  			mov	ah,al						;copy scan code 1
  2545                                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2546                                  			jne	irq1.150					;no, finish keyboard handling
  2547                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2548                                  			jz	irq1.140					;yes, skip ahead
  2549                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2550                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2551                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2552                                  			jz	irq1.140					;yes, skip ahead
  2553                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2554                                  			mov	[wbConsoleScan3],al				;save scan code 3
  2555                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2556                                  			jz	irq1.140					;yes, skip ahead
  2557                                  			in	al,EKEYBPORTDATA				;read scan code 4
  2558                                  			mov	[wbConsoleScan4],al				;save scan code 4
  2559                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2560                                  			jz	irq1.140					;yes, skip ahead
  2561                                  			in	al,EKEYBPORTDATA				;read scan code 5
  2562                                  			mov	[wbConsoleScan5],al				;save scan code 5
  2563                                  			jmp	irq1.150					;continue
  2564                                  irq1.80			xor	al,al						;assume no ASCII translation
  2565                                  			test	ah,EKEYBUP					;release code?
  2566                                  			jnz	irq1.130					;yes, skip ahead
  2567                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  2568                                  			test	bl,EKEYFSHIFT					;either shift key down?
  2569                                  			jz	irq1.90						;no, skip ahead
  2570                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  2571                                  irq1.90			movzx	ecx,ah						;scan code offset
  2572                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  2573                                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2574                                  			jz	irq1.100					;no skip ahead
  2575                                  			mov	cl,al						;copy ASCII code
  2576                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2577                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2578                                  			jb	irq1.100					;yes, skip ahead
  2579                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2580                                  			ja	irq1.100					;yes, skip ahead
  2581                                  			xor	al,EASCIICASE					;switch case
  2582                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2583                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2584                                  			test	ah,EKEYBUP					;release scan-code?
  2585                                  			jz	irq1.120					;no, skip ahead
  2586                                  			mov	edx,EMSGKEYUP					;key-up event
  2587                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  2588                                  			or	edx,eax						;msg id and codes
  2589                                  			xor	ecx,ecx						;null param
  2590                                  			push	eax						;save codes
  2591                                  			mov	eax,ESELKEYBOARDMQ				;keyboard focus message queue
  2592                                  			call	PutMessage					;put message to console
  2593                                  			pop	eax						;restore codes
  2594                                  			test	al,al						;ASCII translation?
  2595                                  			jz	irq1.130					;no, skip ahead
  2596                                  			mov	edx,EMSGKEYCHAR					;key-character event
  2597                                  			and	eax,0FFFFh					;clear high-order word
  2598                                  			or	edx,eax						;msg id and codes
  2599                                  			xor	ecx,ecx						;null param
  2600                                  			mov	eax,ESELKEYBOARDMQ				;keyboard focus message queue
  2601                                  			call	PutMessage					;put message to console
  2602                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  2603                                  irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2604                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  2605                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  2606                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2607                                  			pop	ds						;restore non-volatile regs
  2608                                  			pop	esi						;
  2609                                  			pop	ecx						;
  2610                                  			pop	ebx						;
  2611                                  			pop	eax						;
  2612                                  			iretd							;return
  2613                                  ;-----------------------------------------------------------------------------------------------------------------------
  2614                                  ;	Scan-Code to ASCII Translation Tables
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2617                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2618                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2619                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2620                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2621                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2622                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2623                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2624                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2625                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2626                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2627                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2628                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2629                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2630                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2631                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2632                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2633                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2634                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2635                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2636                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2637                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2638                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2639                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2640                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2641                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2642                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2643                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2644                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2645                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2646                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2647                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                  ;
  2650                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2651                                  ;
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                  			menter	iochannel					;secondary 8259A cascade
  2654                                  			push	eax						;save modified regs
  2655                                  			jmp	hwint						;end interrupt and return
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2659                                  ;
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                  			menter	com2						;serial port 2 interrupt
  2662                                  			push	eax						;save modified regs
  2663                                  			jmp	hwint						;end interrupt and return
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  ;
  2666                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  			menter	com1						;serial port 1 interrupt
  2670                                  			push	eax						;save modified regs
  2671                                  			jmp	hwint						;end interrupt and return
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                  ;
  2674                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  			menter	lpt2						;parallel port 2 interrupt
  2678                                  			push	eax						;save modified regs
  2679                                  			jmp	hwint						;end interrupt and return
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                  ;
  2682                                  ;	IRQ6	Diskette Hardware Interrupt
  2683                                  ;
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  			menter	diskette					;floppy disk interrupt
  2686                                  			push	eax						;save non-volatile regs
  2687                                  			push	ds						;
  2688                                  			push	ESELDAT						;load OS data selector ...
  2689                                  			pop	ds						;... into DS register
  2690                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2691                                  			or	al,10000000b					;set IRQ flag
  2692                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  2693                                  			pop	ds						;restore non-volatile regs
  2694                                  			jmp	hwint						;end primary PIC interrupt
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696                                  ;
  2697                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2698                                  ;
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                  			menter	lpt1						;parallel port 1 interrupt
  2701                                  			push	eax						;save modified regs
  2702                                  			jmp	hwint						;end interrupt and return
  2703                                  ;-----------------------------------------------------------------------------------------------------------------------
  2704                                  ;
  2705                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2706                                  ;
  2707                                  ;-----------------------------------------------------------------------------------------------------------------------
  2708                                  			menter	rtclock						;real-time clock interrupt
  2709                                  			push	eax						;save modified regs
  2710                                  			jmp	hwwint						;end interrupt and return
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;
  2713                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2714                                  ;
  2715                                  ;-----------------------------------------------------------------------------------------------------------------------
  2716                                  			menter	retrace						;CGA vertical retrace interrupt
  2717                                  			push	eax						;save modified regs
  2718                                  			jmp	hwwint						;end interrupt and return
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                  ;
  2721                                  ;	IRQ10	Reserved Hardware Interrupt
  2722                                  ;
  2723                                  ;-----------------------------------------------------------------------------------------------------------------------
  2724                                  			menter	irq10						;reserved
  2725                                  			push	eax						;save modified regs
  2726                                  			jmp	hwwint						;end interrupt and return
  2727                                  ;-----------------------------------------------------------------------------------------------------------------------
  2728                                  ;
  2729                                  ;	IRQ11	Reserved Hardware Interrupt
  2730                                  ;
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  			menter	irq11						;reserved
  2733                                  			push	eax						;save modified regs
  2734                                  			jmp	hwwint						;end interrupt and return
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                  ;
  2737                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2738                                  ;
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2741                                  			push	eax						;save modified regs
  2742                                  			jmp	hwwint						;end interrupt and return
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  ;
  2745                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2746                                  ;
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                  			menter	coprocessor					;coprocessor interrupt
  2749                                  			push	eax						;save modified regs
  2750                                  			jmp	hwwint						;end interrupt and return
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                  ;
  2753                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2754                                  ;
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  			menter	fixeddisk					;fixed disk interrupt
  2757                                  			push	eax						;save modified regs
  2758                                  			jmp	hwwint						;end interrupt and return
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                  ;
  2761                                  ;	IRQ15	Reserved Hardware Interrupt
  2762                                  ;
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  			menter	irq15						;reserved
  2765                                  			push	eax						;save modified regs
  2766                                  			jmp	hwwint						;end interrupt and return
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                  ;
  2769                                  ;	Exit from hardware interrupt
  2770                                  ;
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2773                                  			jmp	hwint90						;skip ahead
  2774                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2775                                  hwint90			pop	eax						;restore modified regs
  2776                                  			iretd							;return from interrupt
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                  ;
  2779                                  ;	INT 30h Operating System Software Service Interrupt
  2780                                  ;
  2781                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2782                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2783                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2784                                  ;	the entry address of the specific function from a table.
  2785                                  ;
  2786                                  ;-----------------------------------------------------------------------------------------------------------------------
  2787                                  			menter	svc
  2788                                  			cmp	al,maxtsvc					;is our function out of range?
  2789                                  			jae	svc90						;yes, skip ahead
  2790                                  			movzx	eax,al						;function
  2791                                  			shl	eax,2						;offset into table
  2792                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2793                                  svc90			iretd							;return from interrupt
  2794                                  ;-----------------------------------------------------------------------------------------------------------------------
  2795                                  ;
  2796                                  ;	Service Request Table
  2797                                  ;
  2798                                  ;
  2799                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2800                                  ;
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                  tsvc			tsvce	AllocateMemory					;allocate memory block
  2803                                  			tsvce	ClearConsoleScreen				;clear console screen
  2804                                  			tsvce	CompareMemory					;compare memory
  2805                                  			tsvce	CopyMemory					;copy memory
  2806                                  			tsvce	DecimalToUnsigned				;convert decimal string to unsigned integer
  2807                                  			tsvce	FreeMemory					;free memory block
  2808                                  			tsvce	GetConsoleString				;get string input
  2809                                  			tsvce	HexadecimalToUnsigned				;convert hexadecimal string to unsigned integer
  2810                                  			tsvce	IsLeapYear					;return ecx=1 if leap year
  2811                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2812                                  			tsvce	PutConsoleString				;tty output asciiz string
  2813                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2814                                  			tsvce	PutDayString					;put DD string
  2815                                  			tsvce	PutHourString					;put hh string
  2816                                  			tsvce	PutMinuteString					;put mm string
  2817                                  			tsvce	PutMonthString					;put MM string
  2818                                  			tsvce	PutMonthNameString				;put name(MM) string
  2819                                  			tsvce	PutSecondString					;put ss string
  2820                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2821                                  			tsvce	PutWeekdayString				;put weekday string
  2822                                  			tsvce	PutWeekdayNameString				;put name(weekday) string
  2823                                  			tsvce	PutYearString					;put YYYY string
  2824                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2825                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2826                                  			tsvce	SetConsoleString				;set console string
  2827                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2828                                  			tsvce	UnsignedToHexadecimal				;convert unsigned integer to hexadecimal string
  2829                                  			tsvce	UpperCaseString					;upper-case string
  2830                                  			tsvce	Yield						;halt until interrupt
  2831                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833                                  ;
  2834                                  ;	Service Request Macros
  2835                                  ;
  2836                                  ;	These macros provide positional parameterization of service request calls.
  2837                                  ;
  2838                                  ;-----------------------------------------------------------------------------------------------------------------------
  2839                                  %macro			allocateMemory 1
  2840                                  			mov	ecx,%1						;bytes to allocate
  2841                                  			mov	al,eAllocateMemory				;allocate memory fn.
  2842                                  			int	_svc						;invoke OS service
  2843                                  %endmacro
  2844                                  %macro			clearConsoleScreen 0
  2845                                  			mov	al,eClearConsoleScreen				;function code
  2846                                  			int	_svc						;invoke OS service
  2847                                  %endmacro
  2848                                  %macro			compareMemory 0
  2849                                  			mov	al,eCompareMemory				;function code
  2850                                  			int	_svc						;invoke OS service
  2851                                  %endmacro
  2852                                  %macro			compareMemory 3
  2853                                  			mov	edx,%1						;first memory address
  2854                                  			mov	ebx,%2						;second memory address
  2855                                  			mov	ecx,%3						;length
  2856                                  			mov	al,eCompareMemory				;function code
  2857                                  			int	_svc						;invoke OS service
  2858                                  %endmacro
  2859                                  %macro			copyMemory 3
  2860                                  			mov	edx,%1						;first memory address
  2861                                  			mov	ebx,%2						;second memory address
  2862                                  			mov	ecx,%3						;length
  2863                                  			mov	al,eCopyMemory					;function code
  2864                                  			int	_svc						;invoke OS service
  2865                                  %endmacro
  2866                                  %macro			decimalToUnsigned 0
  2867                                  			mov	al,eDecimalToUnsigned				;function code
  2868                                  			int	_svc						;invoke OS servie
  2869                                  %endmacro
  2870                                  %macro			freeMemory 1
  2871                                  			mov	edx,%1						;address of memory block
  2872                                  			mov	al,eFreeMemory					;function code
  2873                                  			int	_svc						;invoke OS service
  2874                                  %endmacro
  2875                                  %macro			getConsoleString 4
  2876                                  			mov	edx,%1						;buffer address
  2877                                  			mov	ecx,%2						;max characters
  2878                                  			mov	bh,%3						;echo indicator
  2879                                  			mov	bl,%4						;terminator
  2880                                  			mov	al,eGetConsoleString				;function code
  2881                                  			int	_svc						;invoke OS service
  2882                                  %endmacro
  2883                                  %macro			hexadecimalToUnsigned 0
  2884                                  			mov	al,eHexadecimalToUnsigned			;function code
  2885                                  			int	_svc						;invoke OS service
  2886                                  %endmacro
  2887                                  %macro			isLeapYear 1
  2888                                  			mov	ebx,%1						;DATETIME addr
  2889                                  			mov	al,eIsLeapYear					;function code
  2890                                  			int	_svc						;invoke OS service
  2891                                  %endmacro
  2892                                  %macro			placeCursor 0
  2893                                  			mov	al,ePlaceCursor					;function code
  2894                                  			int	_svc						;invoke OS service
  2895                                  %endmacro
  2896                                  %macro			putConsoleString 1
  2897                                  			mov	edx,%1						;string address
  2898                                  			mov	al,ePutConsoleString				;function code
  2899                                  			int	_svc						;invoke OS service
  2900                                  %endmacro
  2901                                  %macro			putDateString 0
  2902                                  			mov	al,ePutDateString				;function code
  2903                                  			int	_svc						;invoke OS service
  2904                                  %endmacro
  2905                                  %macro			putDateString 2
  2906                                  			mov	ebx,%1						;DATETIME addr
  2907                                  			mov	edx,%2						;output buffer addr
  2908                                  			mov	al,ePutDateString				;function code
  2909                                  			int	_svc						;invoke OS service
  2910                                  %endmacro
  2911                                  %macro			putDayString 2
  2912                                  			mov	ebx,%1						;DATETIME addr
  2913                                  			mov	edx,%2						;output buffer addr
  2914                                  			mov	al,ePutDayString				;function code
  2915                                  			int	_svc						;invoke OS service
  2916                                  %endmacro
  2917                                  %macro			putHourString 2
  2918                                  			mov	ebx,%1						;DATETIME addr
  2919                                  			mov	edx,%2						;output buffer addr
  2920                                  			mov	al,ePutHourString				;function code
  2921                                  			int	_svc						;invoke OS service
  2922                                  %endmacro
  2923                                  %macro			putMinuteString 2
  2924                                  			mov	ebx,%1						;DATETIME addr
  2925                                  			mov	edx,%2						;output buffer addr
  2926                                  			mov	al,ePutMinuteString				;function code
  2927                                  			int	_svc						;invoke OS service
  2928                                  %endmacro
  2929                                  %macro			putMonthString 2
  2930                                  			mov	ebx,%1						;DATETIME addr
  2931                                  			mov	edx,%2						;output buffer addr
  2932                                  			mov	al,ePutMonthString				;function code
  2933                                  			int	_svc						;invoke OS service
  2934                                  %endmacro
  2935                                  %macro			putMonthNameString 2
  2936                                  			mov	ebx,%1						;DATETIME addr
  2937                                  			mov	edx,%2						;output buffer addr
  2938                                  			mov	al,ePutMonthNameString				;function code
  2939                                  			int	_svc						;invoke OS service
  2940                                  %endmacro
  2941                                  %macro			putSecondString 2
  2942                                  			mov	ebx,%1						;DATETIME addr
  2943                                  			mov	edx,%2						;output buffer addr
  2944                                  			mov	al,ePutSecondString				;function code
  2945                                  			int	_svc						;invoke OS service
  2946                                  %endmacro
  2947                                  %macro			putTimeString 0
  2948                                  			mov	al,ePutTimeString				;function code
  2949                                  			int	_svc						;invoke OS service
  2950                                  %endmacro
  2951                                  %macro			putTimeString 2
  2952                                  			mov	ebx,%1						;DATETIME addr
  2953                                  			mov	edx,%2						;output buffer addr
  2954                                  			mov	al,ePutTimeString				;function code
  2955                                  			int	_svc						;invoke OS service
  2956                                  %endmacro
  2957                                  %macro			putWeekdayString 2
  2958                                  			mov	ebx,%1						;DATETIME addr
  2959                                  			mov	edx,%2						;output buffer addr
  2960                                  			mov	al,ePutWeekdayString				;function code
  2961                                  			int	_svc						;invoke OS service
  2962                                  %endmacro
  2963                                  %macro			putWeekdayNameString 2
  2964                                  			mov	ebx,%1						;DATETIME addr
  2965                                  			mov	edx,%2						;output buffer addr
  2966                                  			mov	al,ePutWeekdayNameString			;function code
  2967                                  			int	_svc						;invoke OS service
  2968                                  %endmacro
  2969                                  %macro			putYearString 2
  2970                                  			mov	ebx,%1						;DATETIME addr
  2971                                  			mov	edx,%2						;output buffer addr
  2972                                  			mov	al,ePutYearString				;function code
  2973                                  			int	_svc						;invoke OS service
  2974                                  %endmacro
  2975                                  %macro			readRealTimeClock 0
  2976                                  			mov	al,eReadRealTimeClock				;function code
  2977                                  			int	_svc						;invoke OS service
  2978                                  %endmacro
  2979                                  %macro			readRealTimeClock 1
  2980                                  			mov	ebx,%1						;DATETIME addr
  2981                                  			mov	al,eReadRealTimeClock				;function code
  2982                                  			int	_svc						;invoke OS service
  2983                                  %endmacro
  2984                                  %macro			resetSystem 0
  2985                                  			mov	al,eResetSystem					;AL = system reset fn.
  2986                                  			int	_svc						;invoke OS service
  2987                                  %endmacro
  2988                                  %macro			setConsoleString 0
  2989                                  			mov	al,eSetConsoleString				;function code
  2990                                  			int	_svc						;invoke OS service
  2991                                  %endmacro
  2992                                  %macro			unsignedToDecimalString 0
  2993                                  			mov	al,eUnsignedToDecimalString			;function code
  2994                                  			int	_svc						;invoke OS service
  2995                                  %endmacro
  2996                                  %macro			unsignedToHexadecimal 0
  2997                                  			mov	al,eUnsignedToHexadecimal			;function code
  2998                                  			int	_svc						;invoke OS service
  2999                                  %endmacro
  3000                                  %macro			upperCaseString 0
  3001                                  			mov	al,eUpperCaseString				;function code
  3002                                  			int	_svc						;invoke OS service
  3003                                  %endmacro
  3004                                  %macro			yield 0
  3005                                  			mov	al,eYield					;function code
  3006                                  			int	_svc						;invoke OS service
  3007                                  %endmacro
  3008                                  ;=======================================================================================================================
  3009                                  ;
  3010                                  ;	Kernel Function Library
  3011                                  ;
  3012                                  ;=======================================================================================================================
  3013                                  ;=======================================================================================================================
  3014                                  ;
  3015                                  ;	Memory Helper Routines
  3016                                  ;
  3017                                  ;	AllocateMemory
  3018                                  ;	FreeMemory
  3019                                  ;
  3020                                  ;=======================================================================================================================
  3021                                  ;-----------------------------------------------------------------------------------------------------------------------
  3022                                  ;
  3023                                  ;	Routine:	AllocateMemory
  3024                                  ;
  3025                                  ;	Description:	This routine allocates a memory block for the given task.
  3026                                  ;
  3027                                  ;	In:		ECX	bytes of memory to allocate
  3028                                  ;
  3029                                  ;	Out:		EAX	!0	address of user portion of newly allocated memory block
  3030                                  ;				0	unable to allocate memory
  3031                                  ;
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033                                  AllocateMemory		push	ebx						;save non-volatile regs
  3034                                  			push	ecx						;
  3035                                  			push	esi						;
  3036                                  			push	ds						;
  3037                                  ;
  3038                                  ;	Address kernel memory structures
  3039                                  ;
  3040                                  			push	ESELDAT						;load OS data GDT selector ...
  3041                                  			pop	ds						;... into data segment reg
  3042                                  			mov	esi,wsMemRoot					;memory root structure address
  3043                                  ;
  3044                                  ;	Set requested size to minimum block size if requested size is too small.
  3045                                  ;
  3046                                  			cmp	ecx,EMEMMINSIZE					;is requested size too small?
  3047                                  			jae	.10						;no, branch
  3048                                  			mov	ecx,EMEMMINSIZE					;set requested size to minimum
  3049                                  .10			add	ecx,EMEMBLOCKLEN				;add header block length
  3050                                  ;
  3051                                  ;	Find the first free memory block large enough to satisfy the request.
  3052                                  ;
  3053                                  			mov	eax,[esi+MEMROOT.firstfree]			;first free block ptr
  3054                                  .20			test	eax,eax						;end of free block chain?
  3055                                  			jz	.220						;yes, branch
  3056                                  			cmp	ecx,[eax+MEMBLOCK.bytes]			;free block big enough?
  3057                                  			jbe	.30						;yes, branch
  3058                                  			mov	eax,[eax+MEMBLOCK.nextblock]			;next free block addr
  3059                                  			jmp	.20						;continue
  3060                                  ;-----------------------------------------------------------------------------------------------------------------------
  3061                                  ;
  3062                                  ;	Address the previous and next free memory blocks.
  3063                                  ;
  3064                                  .30			mov	ebx,[eax+MEMBLOCK.previousblock]		;previous free block addr
  3065                                  			mov	edx,[eax+MEMBLOCK.nextblock]			;next free block addr
  3066                                  ;
  3067                                  ;	Remove the free memory block from the forward free memory block chain.
  3068                                  ;
  3069                                  			test	ebx,ebx						;any previous free memory block?
  3070                                  			jz	.40						;no, branch
  3071                                  			mov	[ebx+MEMBLOCK.nextblock],edx			;remove free block from forwrad chain
  3072                                  			jmp	.50						;continue
  3073                                  .40			mov	[esi+MEMROOT.firstfree],edx			;next free is now also the first free
  3074                                  ;
  3075                                  ;	Remove the free memory block from the reverse free memory block chain.
  3076                                  ;
  3077                                  .50			test	edx,edx						;any next free memory block?
  3078                                  			jz	.60						;no, branch
  3079                                  			mov	[edx+MEMBLOCK.previousblock],ebx		;remove free block from reverse chain
  3080                                  			jmp	.70						;continue
  3081                                  .60			mov	[esi+MEMROOT.lastfree],ebx			;previous free is now also the last free
  3082                                  ;-----------------------------------------------------------------------------------------------------------------------
  3083                                  ;
  3084                                  ;	Determine if the free memory block can be split.
  3085                                  ;
  3086                                  .70			mov	ebx,[eax+MEMBLOCK.bytes]			;size of free memory block
  3087                                  			sub	ebx,ecx						;subtract requested memory size
  3088                                  			cmp	ebx,EMEMMINSIZE					;remaining block can stand alone?
  3089                                  			jb	.150						;no, branch
  3090                                  ;
  3091                                  ;	We know that our block can be split to create a new free memory block. We update the size of our free memory
  3092                                  ;	block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3093                                  ;	of the requested memory size.
  3094                                  ;
  3095                                  			mov	[eax+MEMBLOCK.bytes],ecx			;shorten memory block size
  3096                                  			mov	edx,eax						;memory block address
  3097                                  			add	edx,ecx						;address new new next contig block
  3098                                  			mov	ecx,[eax+MEMBLOCK.nextcontig]			;next contig block address
  3099                                  			mov	[eax+MEMBLOCK.nextcontig],edx			;update next contig block address
  3100                                  ;
  3101                                  ;	If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3102                                  ;	free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3103                                  ;
  3104                                  			jecxz	.80						;no next contig, branch
  3105                                  			mov	[ecx+MEMBLOCK.previouscontig],edx		;update previous contig pointer
  3106                                  			jmp	.90						;continue
  3107                                  .80			mov	[esi+MEMROOT.lastcontig],edx			;update last contig pointer
  3108                                  ;
  3109                                  ;	Now that the contig block pointers have been updated, we initialize the new free block members.
  3110                                  ;
  3111                                  .90			mov	[edx+MEMBLOCK.bytes],ebx			;set the block size
  3112                                  			mov	[edx+MEMBLOCK.nextcontig],ecx			;set the next contig block addr
  3113                                  			mov	[edx+MEMBLOCK.previouscontig],eax		;set the previous contig block addr
  3114                                  			mov	ebx,EMEMFREECODE				;free memory signature
  3115                                  			mov	[edx+MEMBLOCK.signature],ebx			;set the block signature
  3116                                  			xor	ebx,ebx						;zero register
  3117                                  			mov	[edx+MEMBLOCK.reserved],ebx			;set reserved
  3118                                  			mov	[edx+MEMBLOCK.owner],ebx			;set the owner
  3119                                  ;
  3120                                  ;	Find the proper location in the free block chain for the new free block
  3121                                  ;
  3122                                  			mov	ebx,[edx+MEMBLOCK.bytes]			;free block size
  3123                                  			mov	ecx,[esi+MEMROOT.firstfree]			;first free block addr
  3124                                  .100			jecxz	.110						;branch if at end of chain
  3125                                  			cmp	ebx,[ecx+MEMBLOCK.bytes]			;new block smaller or equal?
  3126                                  			jbe	.110						;yes, branch
  3127                                  			mov	ecx,[ecx+MEMBLOCK.nextblock]			;next free block addr
  3128                                  			jmp	.100						;continue
  3129                                  ;
  3130                                  ;	Having found the proper location for our new free block, we store the address of the following free block, or
  3131                                  ;	zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3132                                  ;	next block's previous block or the global last-free block as our new previous block and update the previous
  3133                                  ;	block of hte next block, if there is one.
  3134                                  ;
  3135                                  .110			mov	[edx+MEMBLOCK.nextblock],ecx			;set the new free block's next ptr
  3136                                  			mov	ebx,[esi+MEMROOT.lastfree]			;last free block addr
  3137                                  			jecxz	.120						;branch if no next block
  3138                                  			mov	ebx,[ecx+MEMBLOCK.previousblock]		;next block's previous block
  3139                                  			mov	[ecx+MEMBLOCK.previousblock],edx		;set the next block's previous block
  3140                                  			jmp	.130						;continue
  3141                                  .120			mov	[esi+MEMROOT.lastfree],edx			;set the new last free block
  3142                                  ;
  3143                                  ;	Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3144                                  ;	point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3145                                  ;	last user block pointers if necessary.
  3146                                  ;
  3147                                  .130			mov	[edx+MEMBLOCK.previousblock],ebx		;set the previous block pointer
  3148                                  			test	ebx,ebx						;is there a previous block?
  3149                                  			jz	.140						;no, branch
  3150                                  			mov	[ebx+MEMBLOCK.nextblock],edx			;set the previous block's next ptr
  3151                                  			jmp	.150						;continue
  3152                                  .140			mov	[esi+MEMROOT.firstfree],edx			;set the new first free ptr
  3153                                  ;
  3154                                  ;	Update the newly allocated block's owner and signature.
  3155                                  ;
  3156                                  .150			mov	edx,EMEMUSERCODE				;user memory signature
  3157                                  			mov	[eax+MEMBLOCK.signature],edx			;set the block signature
  3158                                  			xor	edx,edx						;zero register
  3159                                  			str	dx						;load the task state register
  3160                                  			mov	[eax+MEMBLOCK.owner],edx			;set the block owner
  3161                                  ;
  3162                                  ;	Remove the allocated block from the free block chain and insert it into the user block chain.
  3163                                  ;
  3164                                  			mov	ecx,[esi+MEMROOT.firsttask]			;first task block
  3165                                  .160			jecxz	.180						;branch if at end of chain
  3166                                  			cmp	edx,[ecx+MEMBLOCK.owner]			;does this block belong to the task?
  3167                                  			jb	.180						;branch if block belongs to next task
  3168                                  			je	.170						;branch if block belongs to this task
  3169                                  			mov	ecx,[ecx+MEMBLOCK.nextblock]			;next task block
  3170                                  			jmp	.160						;continue
  3171                                  ;
  3172                                  ;	We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3173                                  ;	have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3174                                  ;	block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3175                                  ;	place to insert the block.
  3176                                  ;
  3177                                  .170			mov	edx,[eax+MEMBLOCK.bytes]			;size of block in bytes
  3178                                  			cmp	edx,[ecx+MEMBLOCK.bytes]			;less or equal to chain block?
  3179                                  			jbe	.180						;yes, branch
  3180                                  			mov	ecx,[ecx+MEMBLOCK.nextblock]			;next chain block address
  3181                                  			test	ecx,ecx						;end of chain?
  3182                                  			jz	.180						;yes, branch
  3183                                  			mov	edx,[eax+MEMBLOCK.owner]			;owning task
  3184                                  			cmp	edx,[ecx+MEMBLOCK.owner]			;same task?
  3185                                  			je	.170						;yes, continue search
  3186                                  ;
  3187                                  ;	We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3188                                  ;	end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3189                                  ;	the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3190                                  ;	do have a previous-block, we update that block's next-block pointer.
  3191                                  ;
  3192                                  .180			mov	[eax+MEMBLOCK.nextblock],ecx			;set the next task block
  3193                                  			mov	ebx,[esi+MEMROOT.lasttask]			;last task block
  3194                                  			jecxz	.190						;branch if no next-task block
  3195                                  			mov	ebx,[ecx+MEMBLOCK.previousblock]		;next-task's previous-task block
  3196                                  			mov	[ecx+MEMBLOCK.previousblock],eax		;update next-task block's previous-task
  3197                                  			jmp	.200						;continue
  3198                                  .190			mov	[esi+MEMROOT.lasttask],eax			;new block is the last user-block
  3199                                  ;
  3200                                  ;	Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3201                                  ;	block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3202                                  ;	global first and/or last user-block pointers if necessary.
  3203                                  ;
  3204                                  .200			mov	[eax+MEMBLOCK.previousblock],ebx		;set the previous task block
  3205                                  			test	ebx,ebx						;do we have a previous task block?
  3206                                  			jz	.210						;no, branch
  3207                                  			mov	[ebx+MEMBLOCK.nextblock],eax			;set previous-block's next-task block
  3208                                  			jmp	.220						;continue
  3209                                  .210			mov	[esi+MEMROOT.firsttask],eax			;new block is the first user-block
  3210                                  ;
  3211                                  ;	Restore registers and return to caller.
  3212                                  ;
  3213                                  .220			pop	ds						;restore non-volatie regs
  3214                                  			pop	esi						;
  3215                                  			pop	ecx						;
  3216                                  			pop	ebx						;
  3217                                  			ret							;return
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                  ;
  3220                                  ;	Routine:	FreeMemory
  3221                                  ;
  3222                                  ;	Description:	This routine frees a memory block for the given task. The address provided in EDX points to the
  3223                                  ;			memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3224                                  ;			is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3225                                  ;			memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3226                                  ;			block, following the block header, is reset (wiped) with the memory wipe value.
  3227                                  ;
  3228                                  ;	In:		EDX	memory block to free, relative to ESELDAT
  3229                                  ;
  3230                                  ;	Out:		EAX	-1	invalid memory block
  3231                                  ;				0	memory block freed
  3232                                  ;
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  FreeMemory		push	ebx						;save non-volatile regs
  3235                                  			push	ecx						;
  3236                                  			push	esi						;
  3237                                  			push	edi						;
  3238                                  			push	ds						;
  3239                                  			push	es						;
  3240                                  ;
  3241                                  ;	Address the root memory structure
  3242                                  ;
  3243                                  			push	ESELDAT
  3244                                  			pop	es
  3245                                  			push	ESELDAT						;load OS data selector ...
  3246                                  			pop	ds						;... into data segment reg
  3247                                  			mov	esi,wsMemRoot					;memory root structure
  3248                                  			mov	edi,edx						;memory block address
  3249                                  ;
  3250                                  ;	If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3251                                  ;
  3252                                  			xor	eax,eax						;indicate success
  3253                                  			cmp	dword [edi+MEMBLOCK.signature],EMEMFREECODE	;is the block FREE?
  3254                                  			je	.240						;yes, branch
  3255                                  			dec	eax						;indicate failure
  3256                                  			cmp	dword [edi+MEMBLOCK.signature],EMEMUSERCODE	;is the block USER?
  3257                                  			jne	.240						;no, branch
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  ;
  3260                                  ;	Unlink the USER memory block.
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  ;
  3264                                  ;	Set the block signature. Reset owner.
  3265                                  ;
  3266                                  			mov	dword [edi+MEMBLOCK.signature],EMEMFREECODE	;set FREE block signature
  3267                                  			xor	eax,eax						;zero register
  3268                                  			mov	[edi+MEMBLOCK.owner],eax			;zero block owner
  3269                                  ;
  3270                                  ;	Wipe user area.
  3271                                  ;
  3272                                  			push	edi						;save block address
  3273                                  			mov	ecx,[edi+MEMBLOCK.bytes]			;block size
  3274                                  			sub	ecx,EMEMBLOCKLEN				;subtract header size
  3275                                  			add	edi,EMEMBLOCKLEN				;point to user area
  3276                                  			mov	al,EMEMWIPEBYTE					;memory wipe byte
  3277                                  			rep	stosb						;clear memory
  3278                                  			pop	edi						;restore block address
  3279                                  ;
  3280                                  ;	Address the preceding and following USER memory blocks
  3281                                  ;
  3282                                  			mov	ebx,[edi+MEMBLOCK.previousblock]		;previous block pointer
  3283                                  			mov	ecx,[edi+MEMBLOCK.nextblock]			;next block pointer
  3284                                  ;
  3285                                  ;	If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3286                                  ;	pointer to point to the USER block following this block.
  3287                                  ;
  3288                                  			test	ebx,ebx						;is there a previous block?
  3289                                  			jz	.10						;no, branch
  3290                                  			mov	[ebx+MEMBLOCK.nextblock],ecx			;update previous block's next pointer
  3291                                  			jmp	.20						;continue
  3292                                  .10			mov	[esi+MEMROOT.firsttask],ecx			;update first USER pointer
  3293                                  ;
  3294                                  ;	If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3295                                  ;	pointer to point to the USER block preceding this block.
  3296                                  ;
  3297                                  .20			jecxz	.30						;branch if no next block
  3298                                  			mov	[ecx+MEMBLOCK.previousblock],ebx		;update next block's previous pointer
  3299                                  			jmp	.40						;continue
  3300                                  .30			mov	[esi+MEMROOT.lasttask],ebx			;update last USER pointer
  3301                                  ;-----------------------------------------------------------------------------------------------------------------------
  3302                                  ;
  3303                                  ;	Merge with a previous contiguous FREE memory block.
  3304                                  ;
  3305                                  ;-----------------------------------------------------------------------------------------------------------------------
  3306                                  ;
  3307                                  ;	Address the preceding and following contiguous memory blocks.
  3308                                  ;
  3309                                  .40			mov	ebx,[edi+MEMBLOCK.previouscontig]		;previous contiguous block ptr
  3310                                  			mov	ecx,[edi+MEMBLOCK.nextcontig]			;next contiguous block ptr
  3311                                  ;
  3312                                  ;	Verify we have a previous contiguous FREE block.
  3313                                  ;
  3314                                  			test	ebx,ebx						;is there a previous block?
  3315                                  			jz	.100						;no, branch
  3316                                  			cmp	dword [ebx+MEMBLOCK.signature],EMEMFREECODE	;is the previous block FREE?
  3317                                  			jne	.100						;no, branch
  3318                                  ;
  3319                                  ;	Update adjacent block's contiguous pointers.
  3320                                  ;
  3321                                  			mov	[ebx+MEMBLOCK.nextcontig],ecx			;update previous contig's next contig
  3322                                  			jecxz	.50						;branch if no next contiguous block
  3323                                  			mov	[ecx+MEMBLOCK.previouscontig],ebx		;update next congit's previous contig
  3324                                  			jmp	.60						;continue
  3325                                  .50			mov	[esi+MEMROOT.lastcontig],ebx			;update last contig pointer
  3326                                  ;
  3327                                  ;	Update the size of the merged FREE block.
  3328                                  ;
  3329                                  .60			mov	eax,[edi+MEMBLOCK.bytes]			;current block size
  3330                                  			add	[ebx+MEMBLOCK.bytes],eax			;update previous block's size
  3331                                  ;
  3332                                  ;	Having merged our new free block into the previous free block, make the previous free block the current block
  3333                                  ;
  3334                                  			mov	ecx,EMEMBLOCKLEN				;block header length
  3335                                  			mov	al,EMEMWIPEBYTE					;memory wipe byte
  3336                                  			rep	stosb						;clear memory header
  3337                                  			mov	edi,ebx						;current block is now previous block
  3338                                  ;-----------------------------------------------------------------------------------------------------------------------
  3339                                  ;
  3340                                  ;	Unlink the previous contiguous FREE memory block
  3341                                  ;
  3342                                  ;-----------------------------------------------------------------------------------------------------------------------
  3343                                  ;
  3344                                  ;	Address the preceding and following USER memory blocks
  3345                                  ;
  3346                                  			mov	ebx,[edi+MEMBLOCK.previousblock]		;previous block pointer
  3347                                  			mov	ecx,[edi+MEMBLOCK.nextblock]			;next block pointer
  3348                                  ;
  3349                                  ;	Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3350                                  ;	block pointer.
  3351                                  ;
  3352                                  			test	ebx,ebx						;is there a previous block?
  3353                                  			jz	.70						;no, branch
  3354                                  			mov	[ebx+MEMBLOCK.nextblock],ecx			;update previous block's next pointer
  3355                                  			jmp	.80						;branch
  3356                                  .70			mov	[esi+MEMROOT.firstfree],ecx			;update first FREE block pointer
  3357                                  ;
  3358                                  ;	Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3359                                  ;	pointer.
  3360                                  ;
  3361                                  .80			jecxz	.90						;branch if no next block
  3362                                  			mov	[ecx+MEMBLOCK.previousblock],ebx		;update next block's previous pointer
  3363                                  			jmp	.100						;continue
  3364                                  .90			mov	[esi+MEMROOT.lastfree],ebx			;update last FREE block pointer
  3365                                  ;-----------------------------------------------------------------------------------------------------------------------
  3366                                  ;
  3367                                  ;	Merge with a following contiguous FREE memory block.
  3368                                  ;
  3369                                  ;-----------------------------------------------------------------------------------------------------------------------
  3370                                  ;
  3371                                  ;	Verify we have a following contiguous FREE block.
  3372                                  ;
  3373                                  .100			mov	ecx,[edi+MEMBLOCK.nextcontig]			;next contiguous block ptr
  3374                                  			jecxz	.170						;branch if no next contiguous block
  3375                                  			cmp	dword [ecx+MEMBLOCK.signature],EMEMFREECODE	;is the next-contiguous block free?
  3376                                  			jne	.170						;no, branch
  3377                                  ;
  3378                                  ;	Add the size of the following adjacent FREE block to this block's size.
  3379                                  ;
  3380                                  			mov	eax,[ecx+MEMBLOCK.bytes]			;next contiguous (free) block size
  3381                                  			add	[edi+MEMBLOCK.bytes],eax			;add size to this block's size
  3382                                  ;
  3383                                  ;	Unlink the following contiguous FREE block from the contiguous block chain.
  3384                                  ;
  3385                                  			mov	eax,[ecx+MEMBLOCK.nextcontig]			;following block's next-contig ptr
  3386                                  			mov	[edi+MEMBLOCK.nextcontig],eax			;update this block's next-contig ptr
  3387                                  			test	eax,eax						;does a block follow the next contig blk
  3388                                  			jz	.110						;no, branch
  3389                                  			mov	[eax+MEMBLOCK.previouscontig],edi		;update following block's prev contig
  3390                                  			jmp	.120						;continue
  3391                                  .110			mov	[esi+MEMROOT.lastcontig],edi			;update last contig block ptr
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                  ;
  3394                                  ;	Unlink the following contiguous FREE memory block
  3395                                  ;
  3396                                  ;-----------------------------------------------------------------------------------------------------------------------
  3397                                  ;
  3398                                  ;	Unlink the following adjacent FREE block from the FREE block chain.
  3399                                  ;
  3400                                  .120			push	edi						;save this block
  3401                                  			mov	edi,ecx						;next contiguous block
  3402                                  			push	ecx						;save next contiguous block
  3403                                  ;
  3404                                  ;	Address the preceding and following USER memory blocks
  3405                                  ;
  3406                                  			mov	ebx,[edi+MEMBLOCK.previousblock]		;next contig's previous block pointer
  3407                                  			mov	ecx,[edi+MEMBLOCK.nextblock]			;next contig's next block pointer
  3408                                  ;
  3409                                  ;	Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3410                                  ;	block pointer.
  3411                                  ;
  3412                                  			test	ebx,ebx						;is there a previous block?
  3413                                  			jz	.130						;no, branch
  3414                                  			mov	[ebx+MEMBLOCK.nextblock],ecx			;update next contig's prev blk next-ptr
  3415                                  			jmp	.140						;branch
  3416                                  .130			mov	[esi+MEMROOT.firstfree],ecx			;update first FREE block pointer
  3417                                  ;
  3418                                  ;	Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3419                                  ;	pointer.
  3420                                  ;
  3421                                  .140			jecxz	.150						;branch if no next block
  3422                                  			mov	[ecx+MEMBLOCK.previousblock],ebx		;update next contig's next blk prev-ptr
  3423                                  			jmp	.160						;continue
  3424                                  .150			mov	[esi+MEMROOT.lastfree],ebx			;update last FREE block pointer
  3425                                  ;
  3426                                  ;	Clear next contiguous block's header
  3427                                  ;
  3428                                  .160			pop	edi						;next congiguous block pointer
  3429                                  			mov	ecx,EMEMBLOCKLEN				;memory block header length
  3430                                  			mov	al,EMEMWIPEBYTE					;memory wipe byte
  3431                                  			rep	stosb						;clear memory header
  3432                                  			pop	edi						;this block's pointer
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434                                  ;
  3435                                  ;	Insert the final FREE block back into the block chain.
  3436                                  ;
  3437                                  ;-----------------------------------------------------------------------------------------------------------------------
  3438                                  ;
  3439                                  ;	Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3440                                  ;	inserted. The block being inserted will be inserted before that block or after the last block found if none
  3441                                  ;	all are smaller in size.
  3442                                  ;
  3443                                  .170			mov	ebx,[edi+MEMBLOCK.bytes]			;size of block
  3444                                  			mov	ecx,[esi+MEMROOT.firstfree]			;first free block ptr
  3445                                  .180			jecxz	.190						;exit if no ptr
  3446                                  			cmp	ebx,[ecx+MEMBLOCK.bytes]			;next block bigger?
  3447                                  			jb	.190						;yes, branch
  3448                                  			mov	ecx,[ecx+MEMBLOCK.nextblock]			;next free memory block
  3449                                  			jmp	.180						;continue
  3450                                  ;
  3451                                  ;	Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3452                                  ;	larger free block. Update the next block's previous block pointer.
  3453                                  ;
  3454                                  .190			mov	[edi+MEMBLOCK.nextblock],ecx			;set the next block ptr
  3455                                  			mov	ebx,[esi+MEMROOT.lastfree]			;assume all blocks smaller
  3456                                  			jecxz	.200						;branch if no block found
  3457                                  			mov	ebx,[ecx+MEMBLOCK.previousblock]		;next block's previous block ptr
  3458                                  			mov	[ecx+MEMBLOCK.previousblock],edi		;update next block's previous ptr
  3459                                  			jmp	.210						;continue
  3460                                  .200			mov	[esi+MEMROOT.lastfree],edi			;this block is now the last free
  3461                                  ;
  3462                                  ;	Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3463                                  ;	If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3464                                  ;	next pointer.
  3465                                  ;
  3466                                  .210			mov	[edi+MEMBLOCK.previousblock],ebx		;set the previous block ptr
  3467                                  			test	ebx,ebx						;do we have a previous block?
  3468                                  			jz	.220						;no, branch
  3469                                  			mov	[ebx+MEMBLOCK.nextblock],edi			;update previous block's next block ptr
  3470                                  			jmp	.230						;continue
  3471                                  .220			mov	[esi+MEMROOT.firstfree],edi			;update first free ptr
  3472                                  ;
  3473                                  ;	The memory free has completed.
  3474                                  ;
  3475                                  .230			xor	eax,eax						;indicate success
  3476                                  ;
  3477                                  ;	Restore and return.
  3478                                  ;
  3479                                  .240			pop	es						;restore non-volatile regs
  3480                                  			pop	ds						;
  3481                                  			pop	edi						;
  3482                                  			pop	esi						;
  3483                                  			pop	ecx						;
  3484                                  			pop	ebx						;
  3485                                  			ret							;return
  3486                                  ;=======================================================================================================================
  3487                                  ;
  3488                                  ;	Date and Time Helper Routines
  3489                                  ;
  3490                                  ;	GetYear
  3491                                  ;	IsLeapYear
  3492                                  ;	PutDateString
  3493                                  ;	PutDayString
  3494                                  ;	PutHourString
  3495                                  ;	PutMinuteString
  3496                                  ;	PutMonthString
  3497                                  ;	PutMonthNameString
  3498                                  ;	PutSecondString
  3499                                  ;	PutTimeString
  3500                                  ;	PutWeekdayString
  3501                                  ;	PutWeekdayNameString
  3502                                  ;	PutYearString
  3503                                  ;
  3504                                  ;=======================================================================================================================
  3505                                  ;-----------------------------------------------------------------------------------------------------------------------
  3506                                  ;
  3507                                  ;	Routine:	GetYear
  3508                                  ;
  3509                                  ;	Description:	Return the four-digit year (century * 100 + year of century)
  3510                                  ;
  3511                                  ;	In:		DS:EBX	DATETIME address
  3512                                  ;
  3513                                  ;	Out:		ECX	year
  3514                                  ;
  3515                                  ;-----------------------------------------------------------------------------------------------------------------------
  3516                                  GetYear			movzx	ecx,byte [ebx+DATETIME.century]			;century
  3517                                  			imul	ecx,100						;century * 100
  3518                                  			movzx	eax,byte [ebx+DATETIME.year]			;year of century
  3519                                  			add	ecx,eax						;year (YYYY)
  3520                                  			ret							;return
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522                                  ;
  3523                                  ;	Routine:	IsLeapYear
  3524                                  ;
  3525                                  ;	Description:	This routine returns an indicator if the current year is a leap year.
  3526                                  ;
  3527                                  ;	In:		DS:EBX	DATETIME ADDRESS
  3528                                  ;
  3529                                  ;	Out:		ECX	0 = not a leap year
  3530                                  ;				1 = leap year
  3531                                  ;
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533                                  IsLeapYear		call	GetYear						;ECX = YYYY
  3534                                  			mov	eax,ecx						;EAX = YYYY
  3535                                  			xor	ecx,ecx						;assume not leap year
  3536                                  			test	al,00000011b					;multiple of four?
  3537                                  			jnz	.no						;no, branch
  3538                                  			mov	dl,100						;divisor
  3539                                  			div	dl						;divide by 100
  3540                                  			test	ah,ah						;multiple of 100?
  3541                                  			jnz	.yes						;yes, branch
  3542                                  			test	al,00000011b					;multiple of 400?
  3543                                  			jnz	.no						;no, branch
  3544                                  .yes			inc	ecx						;indicate leap
  3545                                  .no			ret							;
  3546                                  ;-----------------------------------------------------------------------------------------------------------------------
  3547                                  ;
  3548                                  ;	Routine:	PutDateString
  3549                                  ;
  3550                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3551                                  ;			structure at ds:ebx.
  3552                                  ;
  3553                                  ;	In:		DS:EBX	DATETIME address
  3554                                  ;			DS:EDX	output buffer address
  3555                                  ;
  3556                                  ;-----------------------------------------------------------------------------------------------------------------------
  3557                                  PutDateString		push	ecx						;save non-volatile regs
  3558                                  			push	edi						;
  3559                                  			push	es						;
  3560                                  			push	ds						;store data selector ...
  3561                                  			pop	es						;... in extra segment reg
  3562                                  			mov	edi,edx						;output buffer address
  3563                                  			mov	cl,10						;divisor
  3564                                  			mov	edx,0002F3030h					;ASCIIZ "00/" (reversed)
  3565                                  			movzx	eax,byte [ebx+DATETIME.month]			;month
  3566                                  			div	cl						;AH = rem; AL = quotient
  3567                                  			or	eax,edx						;apply ASCII zones and delimiter
  3568                                  			cld							;forward strings
  3569                                  			stosd							;store "mm/"nul
  3570                                  			dec	edi						;address of terminator
  3571                                  			movzx	eax,byte [ebx+DATETIME.day]			;day
  3572                                  			div	cl						;AH = rem; AL = quotient
  3573                                  			or	eax,edx						;apply ASCII zones and delimiter
  3574                                  			stosd							;store "dd/"nul
  3575                                  			dec	edi						;address of terminator
  3576                                  			movzx	eax,byte [ebx+DATETIME.century]			;century
  3577                                  			div	cl						;AH = rem; AL = quotient
  3578                                  			or	eax,edx						;apply ASCII zones and delimiter
  3579                                  			stosd							;store "cc/"null
  3580                                  			dec	edi						;address of terminator
  3581                                  			dec	edi						;address of delimiter
  3582                                  			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  3583                                  			div	cl						;AH = rem; AL = quotient
  3584                                  			or	eax,edx						;apply ASCII zones and delimiter
  3585                                  			stosb							;store quotient
  3586                                  			mov	al,ah						;remainder
  3587                                  			stosb							;store remainder
  3588                                  			xor	al,al						;null terminator
  3589                                  			stosb							;store terminator
  3590                                  			pop	es						;restore non-volatile regs
  3591                                  			pop	edi						;
  3592                                  			pop	ecx						;
  3593                                  			ret							;return
  3594                                  ;-----------------------------------------------------------------------------------------------------------------------
  3595                                  ;
  3596                                  ;	Routine:	PutDayString
  3597                                  ;
  3598                                  ;	Description:	This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3599                                  ;			structure at ds:ebx.
  3600                                  ;
  3601                                  ;	In:		DS:EBX	DATETIME address
  3602                                  ;			DS:EDX	output buffer address
  3603                                  ;
  3604                                  ;-----------------------------------------------------------------------------------------------------------------------
  3605                                  PutDayString		push	ecx						;save non-volatile regs
  3606                                  			movzx	ecx,byte [ebx+DATETIME.day]			;day
  3607                                  			mov	bh,1						;trim leading zeros; no commas
  3608                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3609                                  			pop	ecx						;
  3610                                  			ret							;return
  3611                                  ;-----------------------------------------------------------------------------------------------------------------------
  3612                                  ;
  3613                                  ;	Routine:	PutHourString
  3614                                  ;
  3615                                  ;	Description:	This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3616                                  ;			structure at ds:ebx.
  3617                                  ;
  3618                                  ;	In:		DS:EBX	DATETIME address
  3619                                  ;			DS:EDX	output buffer address
  3620                                  ;
  3621                                  ;-----------------------------------------------------------------------------------------------------------------------
  3622                                  PutHourString		push	ecx						;save non-volatile regs
  3623                                  			movzx	ecx,byte [ebx+DATETIME.hour]			;hour
  3624                                  			mov	bh,1						;trim leading zeros; no commas
  3625                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3626                                  			pop	ecx						;
  3627                                  			ret							;return
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629                                  ;
  3630                                  ;	Routine:	PutMinuteString
  3631                                  ;
  3632                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3633                                  ;			structure at ds:ebx.
  3634                                  ;
  3635                                  ;	In:		DS:EBX	DATETIME address
  3636                                  ;			DS:EDX	output buffer address
  3637                                  ;
  3638                                  ;-----------------------------------------------------------------------------------------------------------------------
  3639                                  PutMinuteString		push	ecx						;save non-volatile regs
  3640                                  			movzx	ecx,byte [ebx+DATETIME.minute]			;minute
  3641                                  			mov	bh,1						;trim leading zeros; no commas
  3642                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3643                                  			pop	ecx						;
  3644                                  			ret							;return
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646                                  ;
  3647                                  ;	Routine:	PutMonthString
  3648                                  ;
  3649                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3650                                  ;			structure at ds:ebx.
  3651                                  ;
  3652                                  ;	In:		DS:EBX	DATETIME address
  3653                                  ;			DS:EDX	output buffer address
  3654                                  ;
  3655                                  ;-----------------------------------------------------------------------------------------------------------------------
  3656                                  PutMonthString		push	ecx						;save non-volatile regs
  3657                                  			movzx	ecx,byte [ebx+DATETIME.month]			;month
  3658                                  			mov	bh,1						;trim leading zeros; no commas
  3659                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3660                                  			pop	ecx						;
  3661                                  			ret							;return
  3662                                  ;-----------------------------------------------------------------------------------------------------------------------
  3663                                  ;
  3664                                  ;	Routine:	PutMonthNameString
  3665                                  ;
  3666                                  ;	Description:	This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3667                                  ;			structure at ds:ebx.
  3668                                  ;
  3669                                  ;	In:		DS:EBX	DATETIME address
  3670                                  ;			DS:EDX	output buffer address
  3671                                  ;
  3672                                  ;-----------------------------------------------------------------------------------------------------------------------
  3673                                  PutMonthNameString	push	esi						;save non-volatile regs
  3674                                  			push	edi						;
  3675                                  			push	ds						;
  3676                                  			push	es						;
  3677                                  			push	ds						;load data selector ...
  3678                                  			pop	es						;... into extra segment
  3679                                  			mov	edi,edx						;output buffer address
  3680                                  			movzx	eax,byte [ebx+DATETIME.month]			;month (1-12)
  3681                                  			dec	eax						;month (0-11)
  3682                                  			shl	eax,2						;offset into month name lookup table
  3683                                  			push	cs						;load code selector ...
  3684                                  			pop	ds						;... into data segment
  3685                                  			mov	esi,[tMonthNames+eax]				;month name address
  3686                                  			cld							;forward strings
  3687                                  .10			lodsb							;name character
  3688                                  			stosb							;store in output buffer
  3689                                  			test	al,al						;end of string?
  3690                                  			jnz	.10						;no, continue
  3691                                  			pop	es						;restore non-volatile regs
  3692                                  			pop	ds						;
  3693                                  			pop	edi						;
  3694                                  			pop	esi						;
  3695                                  			ret							;return
  3696                                  ;-----------------------------------------------------------------------------------------------------------------------
  3697                                  ;
  3698                                  ;	Routine:	PutSecondString
  3699                                  ;
  3700                                  ;	Description:	This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3701                                  ;			structure at ds:ebx.
  3702                                  ;
  3703                                  ;	In:		DS:EBX	DATETIME address
  3704                                  ;			DS:EDX	output buffer address
  3705                                  ;
  3706                                  ;-----------------------------------------------------------------------------------------------------------------------
  3707                                  PutSecondString		push	ecx						;save non-volatile regs
  3708                                  			movzx	ecx,byte [ebx+DATETIME.second]			;second
  3709                                  			mov	bh,1						;trim leading zeros; no commas
  3710                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3711                                  			pop	ecx						;
  3712                                  			ret							;return
  3713                                  ;-----------------------------------------------------------------------------------------------------------------------
  3714                                  ;
  3715                                  ;	Routine:	PutTimeString
  3716                                  ;
  3717                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3718                                  ;			structure at ds:ebx.
  3719                                  ;
  3720                                  ;	In:		DS:EBX	DATETIME address
  3721                                  ;			DS:EDX	output buffer address
  3722                                  ;
  3723                                  ;-----------------------------------------------------------------------------------------------------------------------
  3724                                  PutTimeString		push	ecx						;save non-volatile regs
  3725                                  			push	edi						;
  3726                                  			push	es						;
  3727                                  			push	ds						;store data selector ...
  3728                                  			pop	es						;... in extra segment reg
  3729                                  			mov	edi,edx						;output buffer address
  3730                                  			mov	cl,10						;divisor
  3731                                  			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  3732                                  			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  3733                                  			div	cl						;ah = rem; al = quotient
  3734                                  			or	eax,edx						;apply ASCII zones and delimiter
  3735                                  			cld							;forward strings
  3736                                  			stosd							;store "mm/"nul
  3737                                  			dec	edi						;address of terminator
  3738                                  			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  3739                                  			div	cl						;ah = rem; al = quotient
  3740                                  			or	eax,edx						;apply ASCII zones and delimiter
  3741                                  			stosd							;store "dd/"nul
  3742                                  			dec	edi						;address of terminator
  3743                                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  3744                                  			div	cl						;ah = rem; al = quotient
  3745                                  			or	eax,edx						;apply ASCII zones and delimiter
  3746                                  			stosb							;store quotient
  3747                                  			mov	al,ah						;remainder
  3748                                  			stosb							;store remainder
  3749                                  			xor	al,al						;null terminator
  3750                                  			stosb							;store terminator
  3751                                  			pop	es						;restore non-volatile regs
  3752                                  			pop	edi						;
  3753                                  			pop	ecx						;
  3754                                  			ret							;return
  3755                                  ;-----------------------------------------------------------------------------------------------------------------------
  3756                                  ;
  3757                                  ;	Routine:	PutWeekdayString
  3758                                  ;
  3759                                  ;	Description:	This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3760                                  ;			structure at ds:ebx.
  3761                                  ;
  3762                                  ;	In:		DS:EBX	DATETIME address
  3763                                  ;			DS:EDX	output buffer address
  3764                                  ;
  3765                                  ;-----------------------------------------------------------------------------------------------------------------------
  3766                                  PutWeekdayString	push	ecx						;save non-volatile regs
  3767                                  			movzx	ecx,byte [ebx+DATETIME.weekday]			;weekday
  3768                                  			mov	bh,1						;trim leading zeros; no commas
  3769                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3770                                  			pop	ecx						;
  3771                                  			ret							;return
  3772                                  ;-----------------------------------------------------------------------------------------------------------------------
  3773                                  ;
  3774                                  ;	Routine:	PutWeekdayNameString
  3775                                  ;
  3776                                  ;	Description:	This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3777                                  ;			structure at ds:ebx.
  3778                                  ;
  3779                                  ;	In:		DS:EBX	DATETIME address
  3780                                  ;			DS:EDX	output buffer address
  3781                                  ;
  3782                                  ;-----------------------------------------------------------------------------------------------------------------------
  3783                                  PutWeekdayNameString	push	esi						;save non-volatile regs
  3784                                  			push	edi						;
  3785                                  			push	ds						;
  3786                                  			push	es						;
  3787                                  			push	ds						;load data selector ...
  3788                                  			pop	es						;... into extra segment
  3789                                  			mov	edi,edx						;output buffer address
  3790                                  			movzx	eax,byte [ebx+DATETIME.weekday]			;weekday (0-6)
  3791                                  			shl	eax,2						;offset into day name lookup table
  3792                                  			push	cs						;load code selector ...
  3793                                  			pop	ds						;... into data segment
  3794                                  			mov	esi,[tDayNames+eax]				;day name address
  3795                                  			cld							;forward strings
  3796                                  .10			lodsb							;name character
  3797                                  			stosb							;store in output buffer
  3798                                  			test	al,al						;end of string?
  3799                                  			jnz	.10						;no, continue
  3800                                  			pop	es						;restore non-volatile regs
  3801                                  			pop	ds						;
  3802                                  			pop	edi						;
  3803                                  			pop	esi						;
  3804                                  			ret							;return
  3805                                  ;-----------------------------------------------------------------------------------------------------------------------
  3806                                  ;
  3807                                  ;	Routine:	PutYearString
  3808                                  ;
  3809                                  ;	Description:	This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3810                                  ;			structure at ds:ebx.
  3811                                  ;
  3812                                  ;	In:		DS:EBX	DATETIME address
  3813                                  ;			DS:EDX	output buffer address
  3814                                  ;
  3815                                  ;-----------------------------------------------------------------------------------------------------------------------
  3816                                  PutYearString		push	ecx						;save non-volatile regs
  3817                                  			call	GetYear						;ECX = YYYY
  3818                                  			mov	bh,1						;trim leading zeros; no commas
  3819                                  			call	UnsignedToDecimalString				;store decimal string at DS:EDX
  3820                                  			pop	ecx						;restore non-volatile regs
  3821                                  			ret							;return
  3822                                  ;-----------------------------------------------------------------------------------------------------------------------
  3823                                  ;
  3824                                  ;	Day Names
  3825                                  ;
  3826                                  ;-----------------------------------------------------------------------------------------------------------------------
  3827                                  czSunday		db	"Sunday",0
  3828                                  czMonday		db	"Monday",0
  3829                                  czTuesday		db	"Tuesday",0
  3830                                  czWednesday		db	"Wednesday",0
  3831                                  czThursday		db	"Thursday",0
  3832                                  czFriday		db	"Friday",0
  3833                                  czSaturday		db	"Saturday",0
  3834                                  ;-----------------------------------------------------------------------------------------------------------------------
  3835                                  ;
  3836                                  ;	Month Names
  3837                                  ;
  3838                                  ;-----------------------------------------------------------------------------------------------------------------------
  3839                                  czJanuary		db	"January",0
  3840                                  czFebruary		db	"February",0
  3841                                  czMarch			db	"March",0
  3842                                  czApril			db	"April",0
  3843                                  czMay			db	"May",0
  3844                                  czJune			db	"June",0
  3845                                  czJuly			db	"July",0
  3846                                  czAugust		db	"August",0
  3847                                  czSeptember		db	"September",0
  3848                                  czOctober		db	"October",0
  3849                                  czNovember		db	"November",0
  3850                                  czDecember		db	"December",0
  3851                                  ;-----------------------------------------------------------------------------------------------------------------------
  3852                                  ;
  3853                                  ;	Day Names Lookup Table
  3854                                  ;
  3855                                  ;-----------------------------------------------------------------------------------------------------------------------
  3856                                  			align	4
  3857                                  tDayNames		equ	$
  3858                                  			dd	czSunday
  3859                                  			dd	czMonday
  3860                                  			dd	czTuesday
  3861                                  			dd	czWednesday
  3862                                  			dd	czThursday
  3863                                  			dd	czFriday
  3864                                  			dd	czSaturday
  3865                                  EDAYNAMESTBLL		equ	($-tDayNames)
  3866                                  EDAYNAMESTBLCNT		equ	EDAYNAMESTBLL/4
  3867                                  ;-----------------------------------------------------------------------------------------------------------------------
  3868                                  ;
  3869                                  ;	Month Names Lookup Table
  3870                                  ;
  3871                                  ;-----------------------------------------------------------------------------------------------------------------------
  3872                                  			align	4
  3873                                  tMonthNames		equ	$
  3874                                  			dd	czJanuary
  3875                                  			dd	czFebruary
  3876                                  			dd	czMarch
  3877                                  			dd	czApril
  3878                                  			dd	czMay
  3879                                  			dd	czJune
  3880                                  			dd	czJuly
  3881                                  			dd	czAugust
  3882                                  			dd	czSeptember
  3883                                  			dd	czOctober
  3884                                  			dd	czNovember
  3885                                  			dd	czDecember
  3886                                  EMONTHNAMESTBLL		equ	($-tMonthNames)
  3887                                  EMONTHNAMESTBLCNT	equ	EMONTHNAMESTBLL/4
  3888                                  ;=======================================================================================================================
  3889                                  ;
  3890                                  ;	String Helper Routines
  3891                                  ;
  3892                                  ;	UpperCaseString
  3893                                  ;	CompareMemory
  3894                                  ;	CopyMemory
  3895                                  ;
  3896                                  ;=======================================================================================================================
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898                                  ;
  3899                                  ;	Routine:	UpperCaseString
  3900                                  ;
  3901                                  ;	Description:	This routine places all characters in the given string to upper case.
  3902                                  ;
  3903                                  ;	In:		DS:EDX	string address
  3904                                  ;
  3905                                  ;	Out:		EDX	string address
  3906                                  ;
  3907                                  ;-----------------------------------------------------------------------------------------------------------------------
  3908                                  UpperCaseString		push	esi						;save non-volatile regs
  3909                                  			mov	esi,edx						;string address
  3910                                  			cld							;forward strings
  3911                                  .10			lodsb							;string character
  3912                                  			test	al,al						;null?
  3913                                  			jz	.20						;yes, skip ahead
  3914                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  3915                                  			jb	.10						;no, continue
  3916                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  3917                                  			ja	.10						;no, continue
  3918                                  			and	al,EASCIICASEMASK				;mask for upper case
  3919                                  			mov	[esi-1],al					;upper character
  3920                                  			jmp	.10						;continue
  3921                                  .20			pop	esi						;restore non-volatile regs
  3922                                  			ret							;return
  3923                                  ;-----------------------------------------------------------------------------------------------------------------------
  3924                                  ;
  3925                                  ;	Routine:	CompareMemory
  3926                                  ;
  3927                                  ;	Description:	This routine compares two byte arrays.
  3928                                  ;
  3929                                  ;	In:		DS:EDX	first source address
  3930                                  ;			DS:EBX	second source address
  3931                                  ;			ECX	comparison length
  3932                                  ;
  3933                                  ;	Out:		EDX	first source address
  3934                                  ;			EBX	second source address
  3935                                  ;			ECX	0	array 1 = array 2
  3936                                  ;				<0	array 1 < array 2
  3937                                  ;				>0	array 1 > array 2
  3938                                  ;
  3939                                  ;-----------------------------------------------------------------------------------------------------------------------
  3940                                  CompareMemory		push	esi						;save non-volatile regs
  3941                                  			push	edi						;
  3942                                  			push	es						;
  3943                                  			push	ds						;copy DS
  3944                                  			pop	es						;... to ES
  3945                                  			mov	esi,edx						;first source address
  3946                                  			mov	edi,ebx						;second source address
  3947                                  			cld							;forward strings
  3948                                  			rep	cmpsb						;compare bytes
  3949                                  			mov	al,0						;default result
  3950                                  			jz	.10						;branch if arrays equal
  3951                                  			mov	al,1						;positive result
  3952                                  			jnc	.10						;branch if target > source
  3953                                  			mov	al,-1						;negative result
  3954                                  .10			movsx	ecx,al						;extend sign
  3955                                  			pop	es						;restore non-volatile regs
  3956                                  			pop	edi						;
  3957                                  			pop	esi						;
  3958                                  			ret							;return
  3959                                  ;-----------------------------------------------------------------------------------------------------------------------
  3960                                  ;
  3961                                  ;	Routine:	CopyMemory
  3962                                  ;
  3963                                  ;	Description:	This routine copies a byte array.
  3964                                  ;
  3965                                  ;	In:		DS:EDX	first source address
  3966                                  ;			DS:EBX	second source address
  3967                                  ;			ECX	copy length
  3968                                  ;
  3969                                  ;-----------------------------------------------------------------------------------------------------------------------
  3970                                  CopyMemory		push	ecx						;save non-volatile regs
  3971                                  			push	esi						;
  3972                                  			push	edi						;
  3973                                  			push	es						;
  3974                                  ;
  3975                                  ;	Compare byte array
  3976                                  ;
  3977                                  			push	ds						;load data selector
  3978                                  			pop	es						;... into ES register
  3979                                  			mov	esi,edx						;first source address
  3980                                  			mov	edi,ebx						;second source address
  3981                                  			cld							;forward strings
  3982                                  			rep	movsb						;copy bytes
  3983                                  ;
  3984                                  ;	Restore and return
  3985                                  ;
  3986                                  			pop	es						;restore non-volatile regs
  3987                                  			pop	edi						;
  3988                                  			pop	esi						;
  3989                                  			pop	ecx						;
  3990                                  			ret							;return
  3991                                  ;=======================================================================================================================
  3992                                  ;
  3993                                  ;	Console Helper Routines
  3994                                  ;
  3995                                  ;	PutConsoleString
  3996                                  ;	GetConsoleString
  3997                                  ;	GetConsoleChar
  3998                                  ;	Yield
  3999                                  ;	PreviousConsoleColumn
  4000                                  ;	NextConsoleColumn
  4001                                  ;	FirstConsoleColumn
  4002                                  ;	NextConsoleRow
  4003                                  ;	PutConsoleChar
  4004                                  ;	PutConsoleOIAShift
  4005                                  ;	PutConsoleOIAChar
  4006                                  ;	PutConsoleHexByte
  4007                                  ;
  4008                                  ;=======================================================================================================================
  4009                                  ;-----------------------------------------------------------------------------------------------------------------------
  4010                                  ;
  4011                                  ;	Routine:	PutConsoleString
  4012                                  ;
  4013                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  4014                                  ;			console position as needed.
  4015                                  ;
  4016                                  ;	In:		EDX	source address
  4017                                  ;			DS	OS data selector
  4018                                  ;
  4019                                  ;-----------------------------------------------------------------------------------------------------------------------
  4020                                  PutConsoleString	push	esi						;save non-volatile regs
  4021                                  			mov	esi,edx						;source address
  4022                                  			cld							;forward strings
  4023                                  .10			lodsb							;ASCII character
  4024                                  			or	al,al						;end of string?
  4025                                  			jz	.40						;yes, skip ahead
  4026                                  			cmp	al,EASCIIRETURN					;carriage return?
  4027                                  			jne	.20						;no, skip ahead
  4028                                  			call	FirstConsoleColumn				;move to start of row
  4029                                  			jmp	.10						;next character
  4030                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  4031                                  			jne	.30						;no, skip ahead
  4032                                  			call	NextConsoleRow					;move to next row
  4033                                  			jmp	.10						;next character
  4034                                  .30			call	PutConsoleChar					;output character to console
  4035                                  			call	NextConsoleColumn				;advance to next column
  4036                                  			jmp	.10						;next character
  4037                                  .40			pop	esi						;restore non-volatile regs
  4038                                  			ret							;return
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040                                  ;
  4041                                  ;	Routine:	GetConsoleString
  4042                                  ;
  4043                                  ;	Description:	This routine accepts keyboard input into a buffer.
  4044                                  ;
  4045                                  ;	In:		DS:EDX	target buffer address
  4046                                  ;			ECX	maximum number of characters to accept
  4047                                  ;			BH	echo to terminal
  4048                                  ;			BL	terminating character
  4049                                  ;
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  GetConsoleString	push	ecx						;save non-volatile regs
  4052                                  			push	esi						;
  4053                                  			push	edi						;
  4054                                  			push	es						;
  4055                                  			push	ds						;load data segment selector ...
  4056                                  			pop	es						;... into extra segment register
  4057                                  			mov	edi,edx						;edi = target buffer
  4058                                  			push	ecx						;save maximum characters
  4059                                  			xor	al,al						;zero register
  4060                                  			cld							;forward strings
  4061                                  			rep	stosb						;zero fill buffer
  4062                                  			pop	ecx						;maximum characters
  4063                                  			mov	edi,edx						;edi = target buffer
  4064                                  			mov	esi,edx						;esi = target buffer
  4065                                  .10			jecxz	.50						;exit if max-length is zero
  4066                                  .20			call	GetConsoleChar					;al = next input char
  4067                                  			cmp	al,bl						;is this the terminator?
  4068                                  			je	.50						;yes, exit
  4069                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  4070                                  			jne	.30						;no, skip ahead
  4071                                  			cmp	esi,edi						;at start of buffer?
  4072                                  			je	.20						;yes, get next character
  4073                                  			dec	edi						;backup target pointer
  4074                                  			mov	byte [edi],0					;zero previous character
  4075                                  			inc	ecx						;increment remaining chars
  4076                                  			test	bh,1						;echo to console?
  4077                                  			jz	.20						;no, get next character
  4078                                  			call	PreviousConsoleColumn				;backup console position
  4079                                  			mov	al,EASCIISPACE					;ASCII space
  4080                                  			call	PutConsoleChar					;write space to console
  4081                                  			call	PlaceCursor					;position the cursor
  4082                                  			jmp	.20						;get next character
  4083                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  4084                                  			jb	.20						;no, get another character
  4085                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  4086                                  			ja	.20						;no, get another character
  4087                                  			stosb							;store character in buffer
  4088                                  			test	bh,1						;echo to console?
  4089                                  			jz	.40						;no, skip ahead
  4090                                  			call	PutConsoleChar					;write character to console
  4091                                  			call	NextConsoleColumn				;advance console position
  4092                                  			call	PlaceCursor					;position the cursor
  4093                                  .40			dec	ecx						;decrement remaining chars
  4094                                  			jmp	.10						;next
  4095                                  .50			xor	al,al						;null
  4096                                  			stosb							;terminate buffer
  4097                                  			pop	es						;restore non-volatile regs
  4098                                  			pop	edi						;
  4099                                  			pop	esi						;
  4100                                  			pop	ecx						;
  4101                                  			ret							;return
  4102                                  ;-----------------------------------------------------------------------------------------------------------------------
  4103                                  ;
  4104                                  ;	Routine:	GetConsoleChar
  4105                                  ;
  4106                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  4107                                  ;
  4108                                  ;	Out:		AL	ASCII character code
  4109                                  ;			AH	keyboard scan code
  4110                                  ;
  4111                                  ;-----------------------------------------------------------------------------------------------------------------------
  4112                                  GetConsoleChar.10	call	Yield						;pass control or halt
  4113                                  GetConsoleChar		call	GetMessage					;get the next message
  4114                                  			or	eax,eax						;do we have a message?
  4115                                  			jz	GetConsoleChar.10				;no, skip ahead
  4116                                  			push	eax						;save key codes
  4117                                  			and	eax,0FFFF0000h					;mask for message type
  4118                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  4119                                  			pop	eax						;restore key codes
  4120                                  			jne	GetConsoleChar					;no, try again
  4121                                  			and	eax,0000ffffh					;mask for key codes
  4122                                  			ret							;return
  4123                                  ;-----------------------------------------------------------------------------------------------------------------------
  4124                                  ;
  4125                                  ;	Routine:	Yield
  4126                                  ;
  4127                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  4128                                  ;
  4129                                  ;-----------------------------------------------------------------------------------------------------------------------
  4130                                  Yield			sti							;enable maskagle interrupts
  4131                                  			hlt							;halt until external interrupt
  4132                                  			ret							;return
  4133                                  ;-----------------------------------------------------------------------------------------------------------------------
  4134                                  ;
  4135                                  ;	Routine:	PreviousConsoleColumn
  4136                                  ;
  4137                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4138                                  ;			the column is set to the last position in the row and the row is decremented.
  4139                                  ;
  4140                                  ;	In:		DS	OS data selector
  4141                                  ;
  4142                                  ;-----------------------------------------------------------------------------------------------------------------------
  4143                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  4144                                  			or	al,al						;start of row?
  4145                                  			jnz	.10						;no, skip ahead
  4146                                  			mov	ah,[wbConsoleRow]				;current row
  4147                                  			or	ah,ah						;top of screen?
  4148                                  			jz	.20						;yes, exit with no change
  4149                                  			dec	ah						;decrement row
  4150                                  			mov	[wbConsoleRow],ah				;save row
  4151                                  			mov	al,ECONCOLS					;set maximum column
  4152                                  .10			dec	al						;decrement column
  4153                                  			mov	[wbConsoleColumn],al				;save column
  4154                                  .20			ret							;return
  4155                                  ;-----------------------------------------------------------------------------------------------------------------------
  4156                                  ;
  4157                                  ;	Routine:	NextConsoleColumn
  4158                                  ;
  4159                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  4160                                  ;			incremented if the end of the current row is reached.
  4161                                  ;
  4162                                  ;	In:		DS	OS data selector
  4163                                  ;
  4164                                  ;-----------------------------------------------------------------------------------------------------------------------
  4165                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  4166                                  			inc	al						;increment column
  4167                                  			mov	[wbConsoleColumn],al				;save column
  4168                                  			cmp	al,ECONCOLS					;end of row?
  4169                                  			jb	.10						;no, skip ahead
  4170                                  			call	FirstConsoleColumn				;reset column to start of row
  4171                                  			call	NextConsoleRow					;line feed to next row
  4172                                  .10			ret							;return
  4173                                  ;-----------------------------------------------------------------------------------------------------------------------
  4174                                  ;
  4175                                  ;	Routine:	FirstConsoleColumn
  4176                                  ;
  4177                                  ;	Description:	This routine resets the console column to start of the row.
  4178                                  ;
  4179                                  ;	In:		DS	OS data selector
  4180                                  ;
  4181                                  ;-----------------------------------------------------------------------------------------------------------------------
  4182                                  FirstConsoleColumn	xor	al,al						;zero column
  4183                                  			mov	[wbConsoleColumn],al				;save column
  4184                                  			ret							;return
  4185                                  ;-----------------------------------------------------------------------------------------------------------------------
  4186                                  ;
  4187                                  ;	Routine:	NextConsoleRow
  4188                                  ;
  4189                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  4190                                  ;
  4191                                  ;	In:		DS	OS data selector
  4192                                  ;
  4193                                  ;-----------------------------------------------------------------------------------------------------------------------
  4194                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  4195                                  			inc	al						;increment row
  4196                                  			mov	[wbConsoleRow],al				;save row
  4197                                  			cmp	al,ECONROWS					;end of screen?
  4198                                  			jb	.10						;no, skip ahead
  4199                                  			call	ScrollConsoleRow				;scroll up one row
  4200                                  			mov	al,[wbConsoleRow]				;row
  4201                                  			dec	al						;decrement row
  4202                                  			mov	[wbConsoleRow],al				;save row
  4203                                  .10			ret							;return
  4204                                  ;-----------------------------------------------------------------------------------------------------------------------
  4205                                  ;
  4206                                  ;	Routine:	PutConsoleChar
  4207                                  ;
  4208                                  ;	Description:	This routine writes one ASCII character to the console screen.
  4209                                  ;
  4210                                  ;	In:		AL	ASCII character
  4211                                  ;			DS	OS data selector
  4212                                  ;
  4213                                  ;-----------------------------------------------------------------------------------------------------------------------
  4214                                  PutConsoleChar		push	ecx						;save non-volatile regs
  4215                                  			push	es						;
  4216                                  			push	ESELCGA						;load CGA selector ...
  4217                                  			pop	es						;... into extra segment reg
  4218                                  			mov	cl,[wbConsoleColumn]				;column
  4219                                  			mov	ch,[wbConsoleRow]				;row
  4220                                  			call	SetConsoleChar					;put character at row, column
  4221                                  			pop	es						;restore non-volatile regs
  4222                                  			pop	ecx						;
  4223                                  			ret							;return
  4224                                  ;-----------------------------------------------------------------------------------------------------------------------
  4225                                  ;
  4226                                  ;	Routine:	PutConsoleOIAShift
  4227                                  ;
  4228                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4229                                  ;
  4230                                  ;	In:		BL	shift flags
  4231                                  ;			BH	lock flags
  4232                                  ;			DS	OS data selector
  4233                                  ;
  4234                                  ;-----------------------------------------------------------------------------------------------------------------------
  4235                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  4236                                  			push	es						;
  4237                                  			push	ESELCGA						;load CGA selector ...
  4238                                  			pop	es						;... into ES register
  4239                                  			mov	ch,ECONOIAROW					;OIA row
  4240                                  			mov	al,EASCIISPACE					;space is default character
  4241                                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  4242                                  			jz	.10						;no, skip ahead
  4243                                  			mov	al,'S'						;yes, indicate with 'S'
  4244                                  .10			mov	cl,14						;indicator column
  4245                                  			call	SetConsoleChar					;display ASCII character
  4246                                  			mov	al,EASCIISPACE					;ASCII space
  4247                                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  4248                                  			jz	.20						;no, skip ahead
  4249                                  			mov	al,'S'						;yes, indicate with 'S'
  4250                                  .20			mov	cl,64						;indicator column
  4251                                  			call	SetConsoleChar					;display ASCII character
  4252                                  			mov	al,EASCIISPACE					;ASCII space
  4253                                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  4254                                  			jz	.30						;no, skip ahead
  4255                                  			mov	al,'C'						;yes, indicate with 'C'
  4256                                  .30			mov	cl,15						;indicator column
  4257                                  			call	SetConsoleChar					;display ASCII character
  4258                                  			mov	al,EASCIISPACE					;ASCII space
  4259                                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  4260                                  			jz	.40						;no, skip ahead
  4261                                  			mov	al,'C'						;yes, indicate with 'C'
  4262                                  .40			mov	cl,63						;indicator column
  4263                                  			call	SetConsoleChar					;display ASCII character
  4264                                  			mov	al,EASCIISPACE					;ASCII space
  4265                                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  4266                                  			jz	.50						;no, skip ahead
  4267                                  			mov	al,'A'						;yes, indicate with 'A'
  4268                                  .50			mov	cl,16						;indicator column
  4269                                  			call	SetConsoleChar					;display ASCII character
  4270                                  			mov	al,EASCIISPACE					;ASCII space
  4271                                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  4272                                  			jz	.60						;no, skip ahead
  4273                                  			mov	al,'A'						;yes, indicate with 'A'
  4274                                  .60			mov	cl,62						;indicator column
  4275                                  			call	SetConsoleChar					;display ASCII character
  4276                                  			mov	al,EASCIISPACE					;ASCII space
  4277                                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  4278                                  			jz	.70						;no, skip ahead
  4279                                  			mov	al,'C'						;yes, indicate with 'C'
  4280                                  .70			mov	cl,78						;indicator column
  4281                                  			call	SetConsoleChar					;display ASCII character
  4282                                  			mov	al,EASCIISPACE					;ASCII space
  4283                                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  4284                                  			jz	.80						;no, skip ahead
  4285                                  			mov	al,'N'						;yes, indicate with 'N'
  4286                                  .80			mov	cl,77						;indicator column
  4287                                  			call	SetConsoleChar					;display ASCII character
  4288                                  			mov	al,EASCIISPACE					;ASCII space
  4289                                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  4290                                  			jz	.90						;no, skip ahead
  4291                                  			mov	al,'S'						;yes, indicate with 'S'
  4292                                  .90			mov	cl,76						;indicator column
  4293                                  			call	SetConsoleChar					;display ASCII character
  4294                                  			pop	es						;restore non-volatile regs
  4295                                  			pop	ecx						;
  4296                                  			ret							;return
  4297                                  ;-----------------------------------------------------------------------------------------------------------------------
  4298                                  ;
  4299                                  ;	Routine:	PutConsoleOIAChar
  4300                                  ;
  4301                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  4302                                  ;
  4303                                  ;	In:		DS	OS data selector
  4304                                  ;
  4305                                  ;-----------------------------------------------------------------------------------------------------------------------
  4306                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  4307                                  			push	ecx						;
  4308                                  			push	esi						;
  4309                                  			push	ds						;
  4310                                  			push	es						;
  4311                                  			push	ESELDAT						;load OS data selector ...
  4312                                  			pop	ds						;... into data segment register
  4313                                  			push	ESELCGA						;load CGA selector ...
  4314                                  			pop	es						;... into extra segment register
  4315                                  			mov	esi,wbConsoleScan0				;scan codes address
  4316                                  			mov	bh,ECONOIAROW					;OIA row
  4317                                  			mov	bl,0						;starting column
  4318                                  			mov	ecx,6						;maximum scan codes
  4319                                  .10			push	ecx						;save remaining count
  4320                                  			mov	ecx,ebx						;row, column
  4321                                  			lodsb							;read scan code
  4322                                  			or	al,al						;scan code present?
  4323                                  			jz	.20						;no, skip ahead
  4324                                  			call	PutConsoleHexByte				;display scan code
  4325                                  			jmp	.30						;continue
  4326                                  .20			mov	al,' '						;ASCII space
  4327                                  			call	SetConsoleChar					;display space
  4328                                  			mov	al,' '						;ASCII space
  4329                                  			call	SetConsoleChar					;display space
  4330                                  .30			add	bl,2						;next column (+2)
  4331                                  			pop	ecx						;restore remaining
  4332                                  			loop	.10						;next code
  4333                                  			mov	al,[wbConsoleChar]				;console ASCII character
  4334                                  			cmp	al,32						;printable? (lower-bounds)
  4335                                  			jb	.40						;no, skip ahead
  4336                                  			cmp	al,126						;printable? (upper-bounds)
  4337                                  			ja	.40						;no, skip ahead
  4338                                  			mov	ch,bh						;OIA row
  4339                                  			mov	cl,40						;character display column
  4340                                  			call	SetConsoleChar					;display ASCII character
  4341                                  .40			pop	es						;restore non-volatile regs
  4342                                  			pop	ds						;
  4343                                  			pop	esi						;
  4344                                  			pop	ecx						;
  4345                                  			pop	ebx						;
  4346                                  			ret							;return
  4347                                  ;-----------------------------------------------------------------------------------------------------------------------
  4348                                  ;
  4349                                  ;	Routine:	PutConsoleHexDword
  4350                                  ;
  4351                                  ;	Description:	This routine writes eight ASCII characters to the console representing a doubleword value.
  4352                                  ;
  4353                                  ;	In:		EAX	value
  4354                                  ;			CL	column
  4355                                  ;			CH	row
  4356                                  ;			DS	OS data selector
  4357                                  ;			ES	CGA selector
  4358                                  ;
  4359                                  ;-----------------------------------------------------------------------------------------------------------------------
  4360                                  PutConsoleHexDword	push	eax
  4361                                  			shr	eax,16
  4362                                  			call	PutConsoleHexWord
  4363                                  			pop	eax
  4364                                  			call	PutConsoleHexWord
  4365                                  			ret
  4366                                  ;-----------------------------------------------------------------------------------------------------------------------
  4367                                  ;
  4368                                  ;	Routine:	PutConsoleHexWord
  4369                                  ;
  4370                                  ;	Description:	This routine writes four ASCII characters to the console representing a word value.
  4371                                  ;
  4372                                  ;	In:		EAX	value
  4373                                  ;			CL	column
  4374                                  ;			CH	row
  4375                                  ;			DS	OS data selector
  4376                                  ;			ES	CGA selector
  4377                                  ;
  4378                                  ;-----------------------------------------------------------------------------------------------------------------------
  4379                                  PutConsoleHexWord	push	eax
  4380                                  			shr	eax,8
  4381                                  			call	PutConsoleHexByte
  4382                                  			pop	eax
  4383                                  			call	PutConsoleHexByte
  4384                                  			ret
  4385                                  ;-----------------------------------------------------------------------------------------------------------------------
  4386                                  ;
  4387                                  ;	Routine:	PutConsoleHexByte
  4388                                  ;
  4389                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  4390                                  ;
  4391                                  ;	In:		AL	byte value
  4392                                  ;			CL	column
  4393                                  ;			CH	row
  4394                                  ;			DS	OS data selector
  4395                                  ;			ES	CGA selector
  4396                                  ;
  4397                                  ;-----------------------------------------------------------------------------------------------------------------------
  4398                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  4399                                  			mov	bl,al						;save byte value
  4400                                  			shr	al,4						;hi-order nybble
  4401                                  			or	al,030h						;apply ASCII zone
  4402                                  			cmp	al,03ah						;numeric?
  4403                                  			jb	.10						;yes, skip ahead
  4404                                  			add	al,7						;add ASCII offset for alpha
  4405                                  .10			call	SetConsoleChar					;display ASCII character
  4406                                  			mov	al,bl						;byte value
  4407                                  			and	al,0fh						;lo-order nybble
  4408                                  			or	al,30h						;apply ASCII zone
  4409                                  			cmp	al,03ah						;numeric?
  4410                                  			jb	.20						;yes, skip ahead
  4411                                  			add	al,7						;add ASCII offset for alpha
  4412                                  .20			call	SetConsoleChar					;display ASCII character
  4413                                  			pop	ebx						;restore non-volatile regs
  4414                                  			ret							;return
  4415                                  ;=======================================================================================================================
  4416                                  ;
  4417                                  ;	Data-Type Conversion Helper Routines
  4418                                  ;
  4419                                  ;	UnsignedToDecimalString
  4420                                  ;	UnsignedToHexadecimal
  4421                                  ;	HexadecimalToUnsigned
  4422                                  ;
  4423                                  ;=======================================================================================================================
  4424                                  ;-----------------------------------------------------------------------------------------------------------------------
  4425                                  ;
  4426                                  ;	Routine:	UnsignedToDecimalString
  4427                                  ;
  4428                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4429                                  ;
  4430                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  4431                                  ;						bit 1: 1 = include comma grouping delimiters
  4432                                  ;						bit 4: 1 = non-zero digit found (internal)
  4433                                  ;			ECX	32-bit binary
  4434                                  ;			DS:EDX	output buffer address
  4435                                  ;
  4436                                  ;-----------------------------------------------------------------------------------------------------------------------
  4437                                  UnsignedToDecimalString push	ebx						;save non-volatile regs
  4438                                  			push	ecx						;
  4439                                  			push	edi						;
  4440                                  			push	es						;
  4441                                  			push	ds						;load data selector
  4442                                  			pop	es						;... into extra segment reg
  4443                                  			mov	edi,edx 					;output buffer address
  4444                                  			and	bh,00001111b					;zero internal flags
  4445                                  			mov	edx,ecx 					;binary
  4446                                  			mov	ecx,1000000000					;10^9 divisor
  4447                                  			call	.30						;divide and store
  4448                                  			mov	ecx,100000000					;10^8 divisor
  4449                                  			call	.10						;divide and store
  4450                                  			mov	ecx,10000000					;10^7 divisor
  4451                                  			call	.30						;divide and store
  4452                                  			mov	ecx,1000000					;10^6 divisor
  4453                                  			call	.30						;divide and store
  4454                                  			mov	ecx,100000					;10^5 divisor
  4455                                  			call	.10						;divide and store
  4456                                  			mov	ecx,10000					;10^4 divisor
  4457                                  			call	.30						;divide and store
  4458                                  			mov	ecx,1000					;10^3 divisor
  4459                                  			call	.30						;divide and store
  4460                                  			mov	ecx,100 					;10^2 divisor
  4461                                  			call	.10						;divide and store
  4462                                  			mov	ecx,10						;10^2 divisor
  4463                                  			call	.30						;divide and store
  4464                                  			mov	eax,edx 					;10^1 remainder
  4465                                  			call	.40						;store
  4466                                  			xor	al,al						;null terminator
  4467                                  			stosb
  4468                                  			pop	es						;restore non-volatile regs
  4469                                  			pop	edi						;
  4470                                  			pop	ecx						;
  4471                                  			pop	ebx						;
  4472                                  			ret							;return
  4473                                  .10			test	bh,00000010b					;comma group delims?
  4474                                  			jz	.30						;no, branch
  4475                                  			test	bh,00000001b					;trim leading zeros?
  4476                                  			jz	.20						;no, store delim
  4477                                  			test	bh,00010000b					;non-zero found?
  4478                                  			jz	.30						;no, branch
  4479                                  .20			mov	al,','						;delimiter
  4480                                  			stosb							;store delimiter
  4481                                  .30			mov	eax,edx 					;lo-orer dividend
  4482                                  			xor	edx,edx 					;zero hi-order
  4483                                  			div	ecx						;divide by power of 10
  4484                                  			test	al,al						;zero?
  4485                                  			jz	.50						;yes, branch
  4486                                  			or	bh,00010000b					;non-zero found
  4487                                  .40			or	al,30h						;ASCII zone
  4488                                  			stosb							;store digit
  4489                                  			ret							;return
  4490                                  .50			test	bh,00000001b					;trim leading zeros?
  4491                                  			jz	.40						;no, store and continue
  4492                                  			test	bh,00010000b					;non-zero found?
  4493                                  			jnz	.40						;yes, store and continue
  4494                                  			ret							;return
  4495                                  ;-----------------------------------------------------------------------------------------------------------------------
  4496                                  ;
  4497                                  ;	Routine:	UnsignedToHexadecimal
  4498                                  ;
  4499                                  ;	Description:	This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4500                                  ;
  4501                                  ;	Input:		DS:EDX	output buffer address
  4502                                  ;			ECX	32-bit binary
  4503                                  ;
  4504                                  ;-----------------------------------------------------------------------------------------------------------------------
  4505                                  UnsignedToHexadecimal	push	edi						;store non-volatile regs
  4506                                  			mov	edi,edx						;output buffer address
  4507                                  			mov	edx,ecx						;32-bit unsigned
  4508                                  			xor	ecx,ecx						;zero register
  4509                                  			mov	cl,8						;nybble count
  4510                                  .10			rol	edx,4						;next hi-order nybble in bits 0-3
  4511                                  			mov	al,dl						;????bbbb
  4512                                  			and	al,0fh						;mask out bits 4-7
  4513                                  			or	al,30h						;mask in ascii zone
  4514                                  			cmp	al,3ah						;A through F?
  4515                                  			jb	.20						;no, skip ahead
  4516                                  			add	al,7						;41h through 46h
  4517                                  .20			stosb							;store hexnum
  4518                                  			loop	.10						;next nybble
  4519                                  			xor	al,al						;zero reg
  4520                                  			stosb							;null terminate
  4521                                  			pop	edi						;restore non-volatile regs
  4522                                  			ret							;return
  4523                                  ;-----------------------------------------------------------------------------------------------------------------------
  4524                                  ;
  4525                                  ;	Routine:	DecimalToUnsigned
  4526                                  ;
  4527                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4528                                  ;
  4529                                  ;	Input:		DS:EDX	null-terminated decimal string address
  4530                                  ;
  4531                                  ;	Output: 	EAX	unsigned integer value
  4532                                  ;
  4533                                  ;-----------------------------------------------------------------------------------------------------------------------
  4534                                  DecimalToUnsigned	push	esi						;save non-volatile regs
  4535                                  			mov	esi,edx						;source address
  4536                                  			xor	edx,edx						;zero total
  4537                                  
  4538                                  .10			lodsb							;source byte
  4539                                  			cmp	al,','						;comma?
  4540                                  			je	.10						;yes, ignore
  4541                                  
  4542                                  			test	al,al						;end of string?
  4543                                  			jz	.30						;yes, done
  4544                                  			cmp	al,'.'						;decimal point?
  4545                                  			je	.30						;yes, done
  4546                                  
  4547                                  			cmp	al,'0'						;numeral?
  4548                                  			jb	.20						;no, invalid string
  4549                                  			cmp	al,'9'						;numeral?
  4550                                  			ja	.20						;no, invalid string
  4551                                  
  4552                                  			and	al,00Fh						;mask ASCII zone
  4553                                  
  4554                                  			push	eax						;save numeral
  4555                                  			shl	edx,1						;total * 2
  4556                                  			mov	eax,edx						;total * 2
  4557                                  			shl	edx,2						;total * 8
  4558                                  			add	edx,eax						;total * 10
  4559                                  			pop	eax						;restore numeral
  4560                                  
  4561                                  			add	edx,eax						;accumulate decimal digit
  4562                                  			xor	eax,eax						;zero register
  4563                                  			jmp	.10						;next
  4564                                  
  4565                                  .20			xor	edx,edx						;zero result on error
  4566                                  .30			mov	eax,edx						;result
  4567                                  			pop	esi						;restore non-volatile regs
  4568                                  			ret							;return
  4569                                  ;-----------------------------------------------------------------------------------------------------------------------
  4570                                  ;
  4571                                  ;	Routine:	HexadecimalToUnsigned
  4572                                  ;
  4573                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4574                                  ;
  4575                                  ;	Input:		DS:EDX	null-terminated hexadecimal string address
  4576                                  ;
  4577                                  ;	Output: 	EAX	unsigned integer value
  4578                                  ;
  4579                                  ;-----------------------------------------------------------------------------------------------------------------------
  4580                                  HexadecimalToUnsigned	push	esi						;save non-volatile regs
  4581                                  			mov	esi,edx						;source address
  4582                                  			xor	edx,edx						;zero register
  4583                                  .10			lodsb							;source byte
  4584                                  			test	al,al						;end of string?
  4585                                  			jz	.30						;yes, branch
  4586                                  			cmp	al,'9'						;hexadecimal?
  4587                                  			jna	.20						;no, skip ahead
  4588                                  			sub	al,37h						;'A' = 41h, less 37h = 0Ah
  4589                                  .20			and	eax,0fh						;remove ascii zone
  4590                                  			shl	edx,4						;previous total x 16
  4591                                  			add	edx,eax						;add prior value x 16
  4592                                  			jmp	.10						;next
  4593                                  .30			mov	eax,edx						;result
  4594                                  			pop	esi						;restore non-volatile regs
  4595                                  			ret							;return
  4596                                  ;=======================================================================================================================
  4597                                  ;
  4598                                  ;	Message Queue Helper Routines
  4599                                  ;
  4600                                  ;	PutMessage
  4601                                  ;	GetMessage
  4602                                  ;
  4603                                  ;=======================================================================================================================
  4604                                  ;-----------------------------------------------------------------------------------------------------------------------
  4605                                  ;
  4606                                  ;	Routine:	PutMessage
  4607                                  ;
  4608                                  ;	Description:	This routine adda a message to the message queue.
  4609                                  ;
  4610                                  ;	In:		EAX	message queue selector
  4611                                  ;			ECX	hi-order data word
  4612                                  ;			EDX	lo-order data word
  4613                                  ;
  4614                                  ;	Out:		CY	0 = success
  4615                                  ;				1 = fail: queue is full
  4616                                  ;
  4617                                  ;-----------------------------------------------------------------------------------------------------------------------
  4618                                  PutMessage		push	ds						;save non-volatile regs
  4619                                  			push	eax						;load task message queue selector ...
  4620                                  			pop	ds						;... into data segment register
  4621                                  			mov	eax,[MQTail]					;tail ptr
  4622                                  			cmp	dword [eax],0					;is queue full?
  4623                                  			stc							;assume failure
  4624                                  			jne	.20						;yes, cannot store
  4625                                  			mov	[eax],edx					;store lo-order data
  4626                                  			mov	[eax+4],ecx					;store hi-order data
  4627                                  			add	eax,8						;next queue element adr
  4628                                  			and	eax,03fch					;at end of queue?
  4629                                  			jnz	.10						;no, skip ahead
  4630                                  			mov	al,8						;reset to top of queue
  4631                                  .10			mov	[MQTail],eax					;save new tail ptr
  4632                                  			clc							;indicate success
  4633                                  .20			pop	ds						;restore non-volatile regs
  4634                                  			ret							;return
  4635                                  ;-----------------------------------------------------------------------------------------------------------------------
  4636                                  ;
  4637                                  ;	Routine:	GetMessage
  4638                                  ;
  4639                                  ;	Description:	This routine reads and removes a message from the message queue.
  4640                                  ;
  4641                                  ;	Out:		EAX	lo-order message data
  4642                                  ;			EDX	hi-order message data
  4643                                  ;
  4644                                  ;			CY	0 = message read
  4645                                  ;				1 = no message to read
  4646                                  ;
  4647                                  ;-----------------------------------------------------------------------------------------------------------------------
  4648                                  GetMessage		push	ebx						;save non-volatile regs
  4649                                  			push	ecx						;
  4650                                  			push	ds						;
  4651                                  			push	ESELMQ						;load message queue selector ...
  4652                                  			pop	ds						;... into data segment register
  4653                                  			mov	ebx,[MQHead]					;head ptr
  4654                                  			mov	eax,[ebx]					;lo-order 32 bits
  4655                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  4656                                  			or	eax,edx						;is queue empty?
  4657                                  			stc							;assume queue is emtpy
  4658                                  			jz	.20						;yes, skip ahead
  4659                                  			xor	ecx,ecx						;store zero
  4660                                  			mov	[ebx],ecx					;... in lo-order dword
  4661                                  			mov	[ebx+4],ecx					;... in hi-order dword
  4662                                  			add	ebx,8						;next queue element
  4663                                  			and	ebx,03fch					;at end of queue?
  4664                                  			jnz	.10						;no, skip ahead
  4665                                  			mov	bl,8						;reset to 1st entry
  4666                                  .10			mov	[MQHead],ebx					;save new head ptr
  4667                                  			clc							;indicate message read
  4668                                  .20			pop	ds						;restore non-volatile regs
  4669                                  			pop	ecx						;
  4670                                  			pop	ebx						;
  4671                                  			ret							;return
  4672                                  ;=======================================================================================================================
  4673                                  ;
  4674                                  ;	Memory-Mapped Video Routines
  4675                                  ;
  4676                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  4677                                  ;
  4678                                  ;	ClearConsoleScreen
  4679                                  ;	ScrollConsoleRow
  4680                                  ;	SetConsoleChar
  4681                                  ;
  4682                                  ;=======================================================================================================================
  4683                                  ;-----------------------------------------------------------------------------------------------------------------------
  4684                                  ;
  4685                                  ;	Routine:	ClearConsoleScreen
  4686                                  ;
  4687                                  ;	Description:	This routine clears the console (CGA) screen.
  4688                                  ;
  4689                                  ;-----------------------------------------------------------------------------------------------------------------------
  4690                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  4691                                  			push	edi						;
  4692                                  			push	ds						;
  4693                                  			push	es						;
  4694                                  			push	ESELDAT						;load OS Data selector ...
  4695                                  			pop	ds						;... into DS register
  4696                                  			push	ESELCGA						;load CGA selector ...
  4697                                  			pop	es						;... into ES register
  4698                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  4699                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  4700                                  			xor	edi,edi						;target offset
  4701                                  			cld							;forward strings
  4702                                  			rep	stosd						;reset screen body
  4703                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  4704                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  4705                                  			rep	stosd						;reset OIA line
  4706                                  			xor	al,al						;zero register
  4707                                  			mov	[wbConsoleRow],al				;reset console row
  4708                                  			mov	[wbConsoleColumn],al				;reset console column
  4709                                  			call	PlaceCursor					;place cursor at current position
  4710                                  			pop	es						;restore non-volatile regs
  4711                                  			pop	ds						;
  4712                                  			pop	edi						;
  4713                                  			pop	ecx						;
  4714                                  			ret							;return
  4715                                  ;-----------------------------------------------------------------------------------------------------------------------
  4716                                  ;
  4717                                  ;	Routine:	ScrollConsoleRow
  4718                                  ;
  4719                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  4720                                  ;
  4721                                  ;-----------------------------------------------------------------------------------------------------------------------
  4722                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  4723                                  			push	esi						;
  4724                                  			push	edi						;
  4725                                  			push	ds						;
  4726                                  			push	es						;
  4727                                  			push	ESELCGA						;load CGA video selector ...
  4728                                  			pop	ds						;... into DS
  4729                                  			push	ESELCGA						;load CGA video selector ...
  4730                                  			pop	es						;... into ES
  4731                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  4732                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  4733                                  			xor	edi,edi						;edi = target (line 1)
  4734                                  			cld							;forward strings
  4735                                  			rep	movsd						;move 24 lines up
  4736                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  4737                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  4738                                  			rep	stosd						;clear bottom row
  4739                                  			pop	es						;restore non-volatile regs
  4740                                  			pop	ds						;
  4741                                  			pop	edi						;
  4742                                  			pop	esi						;
  4743                                  			pop	ecx						;
  4744                                  			ret							;return
  4745                                  ;-----------------------------------------------------------------------------------------------------------------------
  4746                                  ;
  4747                                  ;	Routine:	SetConsoleString
  4748                                  ;
  4749                                  ;	Description:	This routine outputs a sequence of ASCII character at the given row and column.
  4750                                  ;
  4751                                  ;	In:		ESI	source offset (DS:)
  4752                                  ;			CL	column
  4753                                  ;			CH	row
  4754                                  ;			ES	CGA selector
  4755                                  ;
  4756                                  ;-----------------------------------------------------------------------------------------------------------------------
  4757                                  SetConsoleString	push	esi						;save non-volatile regs
  4758                                  			cld							;forward strings
  4759                                  .10			lodsb							;next ASCII character
  4760                                  			test	al,al						;end of string?
  4761                                  			jz	.20						;yes, branch
  4762                                  			call	SetConsoleChar					;store character
  4763                                  			jmp	.10						;continue
  4764                                  .20			pop	esi						;restore non-volatile regs
  4765                                  			ret							;return
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ;
  4768                                  ;	Routine:	SetConsoleChar
  4769                                  ;
  4770                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  4771                                  ;
  4772                                  ;	In:		AL	ASCII character
  4773                                  ;			CL	column
  4774                                  ;			CH	row
  4775                                  ;			ES	CGA selector
  4776                                  ;
  4777                                  ;	Out:		EAX	last target address written (ES:)
  4778                                  ;			CL	column + 1
  4779                                  ;
  4780                                  ;-----------------------------------------------------------------------------------------------------------------------
  4781                                  SetConsoleChar		mov	dl,al						;ASCII character
  4782                                  			movzx	eax,ch						;row
  4783                                  			mov	ah,ECONCOLS					;cols/row
  4784                                  			mul	ah						;row * cols/row
  4785                                  			add	al,cl						;add column
  4786                                  			adc	ah,0						;handle carry
  4787                                  			shl	eax,1						;screen offset
  4788                                  			mov	[es:eax],dl					;store character
  4789                                  			inc	cl						;next column
  4790                                  			ret							;return
  4791                                  ;=======================================================================================================================
  4792                                  ;
  4793                                  ;	Input/Output Routines
  4794                                  ;
  4795                                  ;	These routines read and/or write directly to ports.
  4796                                  ;
  4797                                  ;	PlaceCursor
  4798                                  ;	PutPrimaryEndOfInt
  4799                                  ;	PutSecondaryEndOfInt
  4800                                  ;	ReadRealTimeClock
  4801                                  ;	ResetSystem
  4802                                  ;	SetKeyboardLamps
  4803                                  ;	WaitForKeyInBuffer
  4804                                  ;	WaitForKeyOutBuffer
  4805                                  ;
  4806                                  ;=======================================================================================================================
  4807                                  ;-----------------------------------------------------------------------------------------------------------------------
  4808                                  ;
  4809                                  ;	Routine:	PlaceCursor
  4810                                  ;
  4811                                  ;	Description:	This routine positions the cursor on the console.
  4812                                  ;
  4813                                  ;	In:		DS	OS data selector
  4814                                  ;
  4815                                  ;-----------------------------------------------------------------------------------------------------------------------
  4816                                  PlaceCursor		push	ecx						;save non-volatile regs
  4817                                  			mov	al,[wbConsoleRow]				;al = row
  4818                                  			mov	ah,ECONCOLS					;ah = cols/row
  4819                                  			mul	ah						;row offset
  4820                                  			add	al,[wbConsoleColumn]				;add column
  4821                                  			adc	ah,0						;add overflow
  4822                                  			mov	ecx,eax						;screen offset
  4823                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  4824                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  4825                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  4826                                  			out	dx,al						;select register
  4827                                  			inc	edx						;data port
  4828                                  			mov	al,ch						;hi-order cursor loc
  4829                                  			out	dx,al						;store hi-order loc
  4830                                  			dec	edx						;register select port
  4831                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  4832                                  			out	dx,al						;select register
  4833                                  			inc	edx						;data port
  4834                                  			mov	al,cl						;lo-order cursor loc
  4835                                  			out	dx,al						;store lo-order loc
  4836                                  			pop	ecx						;restore non-volatile regs
  4837                                  			ret							;return
  4838                                  ;-----------------------------------------------------------------------------------------------------------------------
  4839                                  ;
  4840                                  ;	Routine:	PutPrimaryEndOfInt
  4841                                  ;
  4842                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4843                                  ;
  4844                                  ;-----------------------------------------------------------------------------------------------------------------------
  4845                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  4846                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  4847                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  4848                                  			ret							;return
  4849                                  ;-----------------------------------------------------------------------------------------------------------------------
  4850                                  ;
  4851                                  ;	Routine:	PutSecondaryEndOfInt
  4852                                  ;
  4853                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4854                                  ;
  4855                                  ;-----------------------------------------------------------------------------------------------------------------------
  4856                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  4857                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  4858                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  4859                                  			ret							;return
  4860                                  ;-----------------------------------------------------------------------------------------------------------------------
  4861                                  ;
  4862                                  ;	Routine:	ReadRealTimeClock
  4863                                  ;
  4864                                  ;	Description:	This routine gets current date time from the real-time clock.
  4865                                  ;
  4866                                  ;	In:		DS:EBX	DATETIME structure
  4867                                  ;
  4868                                  ;-----------------------------------------------------------------------------------------------------------------------
  4869                                  ReadRealTimeClock	push	esi						;save non-volatile regs
  4870                                  			push	edi						;
  4871                                  			push	es						;
  4872                                  			push	ds						;store data selector ...
  4873                                  			pop	es						;... in es register
  4874                                  			mov	edi,ebx						;date-time structure
  4875                                  			mov	al,ERTCSECONDREG				;second register
  4876                                  			out	ERTCREGPORT,al					;select second register
  4877                                  			in	al,ERTCDATAPORT					;read second register
  4878                                  			cld							;forward strings
  4879                                  			stosb							;store second value
  4880                                  			mov	al,ERTCMINUTEREG				;minute register
  4881                                  			out	ERTCREGPORT,al					;select minute register
  4882                                  			in	al,ERTCDATAPORT					;read minute register
  4883                                  			stosb							;store minute value
  4884                                  			mov	al,ERTCHOURREG					;hour register
  4885                                  			out	ERTCREGPORT,al					;select hour register
  4886                                  			in	al,ERTCDATAPORT					;read hour register
  4887                                  			stosb							;store hour value
  4888                                  			mov	al,ERTCWEEKDAYREG				;weekday register
  4889                                  			out	ERTCREGPORT,al					;select weekday register
  4890                                  			in	al,ERTCDATAPORT					;read weekday register
  4891                                  			stosb							;store weekday value
  4892                                  			mov	al,ERTCDAYREG					;day register
  4893                                  			out	ERTCREGPORT,al					;select day register
  4894                                  			in	al,ERTCDATAPORT					;read day register
  4895                                  			stosb							;store day value
  4896                                  			mov	al,ERTCMONTHREG					;month register
  4897                                  			out	ERTCREGPORT,al					;select month register
  4898                                  			in	al,ERTCDATAPORT					;read month register
  4899                                  			stosb							;store month value
  4900                                  			mov	al,ERTCYEARREG					;year register
  4901                                  			out	ERTCREGPORT,al					;select year register
  4902                                  			in	al,ERTCDATAPORT					;read year register
  4903                                  			stosb							;store year value
  4904                                  			mov	al,ERTCCENTURYREG				;century register
  4905                                  			out	ERTCREGPORT,al					;select century register
  4906                                  			in	al,ERTCDATAPORT					;read century register
  4907                                  			stosb							;store century value
  4908                                  			mov	al,ERTCSTATUSREG				;status register
  4909                                  			out	ERTCREGPORT,al					;select status register
  4910                                  			in	al,ERTCDATAPORT					;read status register
  4911                                  			test	al,ERTCBINARYVALS				;test if values are binary
  4912                                  			jnz	.20						;skip ahead if binary values
  4913                                  			mov	esi,ebx						;date-time structure address
  4914                                  			mov	edi,ebx						;date-time structure address
  4915                                  			mov	ecx,8						;loop counter
  4916                                  .10			lodsb							;BCD value
  4917                                  			mov	ah,al						;BCD value
  4918                                  			and	al,00001111b					;low-order decimal zone
  4919                                  			and	ah,11110000b					;hi-order decimal zone
  4920                                  			shr	ah,1						;hi-order decimal * 8
  4921                                  			add	al,ah						;low-order + hi-order * 8
  4922                                  			shr	ah,2						;hi-order decimal * 2
  4923                                  			add	al,ah						;low-order + hi-order * 10
  4924                                  			stosb							;replace BCD with binary
  4925                                  			loop	.10						;next value
  4926                                  .20			pop	es						;restore non-volatile regs
  4927                                  			pop	edi						;
  4928                                  			pop	esi						;
  4929                                  			ret							;return
  4930                                  ;-----------------------------------------------------------------------------------------------------------------------
  4931                                  ;
  4932                                  ;	Routine:	ResetSystem
  4933                                  ;
  4934                                  ;	Description:	This routine restarts the system using the 8042 controller.
  4935                                  ;
  4936                                  ;	Out:		N/A	This routine does not return.
  4937                                  ;
  4938                                  ;-----------------------------------------------------------------------------------------------------------------------
  4939                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  4940                                  			loop	$						;clear interrupts
  4941                                  			mov	al,EKEYBCMDRESET				;mask out bit zero
  4942                                  			out	EKEYBPORTSTAT,al				;drive bit zero low
  4943                                  .10			sti							;enable maskable interrupts
  4944                                  			hlt							;halt until interrupt
  4945                                  			jmp	.10						;repeat until reset kicks in
  4946                                  ;-----------------------------------------------------------------------------------------------------------------------
  4947                                  ;
  4948                                  ;	Routine:	SetKeyboardLamps
  4949                                  ;
  4950                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  4951                                  ;
  4952                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4953                                  ;
  4954                                  ;-----------------------------------------------------------------------------------------------------------------------
  4955                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  4956                                  			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  4957                                  			out	EKEYBPORTDATA,al				;send command to 8042
  4958                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  4959                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4960                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  4961                                  			mov	al,bh						;set/reset lamps value
  4962                                  			out	EKEYBPORTDATA,al				;send lamps value
  4963                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  4964                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4965                                  			ret							;return
  4966                                  ;-----------------------------------------------------------------------------------------------------------------------
  4967                                  ;
  4968                                  ;	Routine:	WaitForKeyInBuffer
  4969                                  ;
  4970                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  4971                                  ;
  4972                                  ;	Out:		ZF	1 = Input buffer ready
  4973                                  ;				0 = Input buffer not ready after timeout
  4974                                  ;
  4975                                  ;-----------------------------------------------------------------------------------------------------------------------
  4976                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  4977                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4978                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4979                                  			test	al,EKEYBBITIN					;is input buffer still full?
  4980                                  			loopnz	.10						;yes, repeat till timeout
  4981                                  			pop	ecx						;restore non-volatile regs
  4982                                  			ret							;return
  4983                                  ;-----------------------------------------------------------------------------------------------------------------------
  4984                                  ;
  4985                                  ;	Routine:	WaitForKeyOutBuffer
  4986                                  ;
  4987                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  4988                                  ;
  4989                                  ;	Out:		ZF	1 = Output buffer has data from controller
  4990                                  ;				0 = Output buffer empty after timeout
  4991                                  ;
  4992                                  ;-----------------------------------------------------------------------------------------------------------------------
  4993                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  4994                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4995                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4996                                  			test	al,EKEYBBITOUT					;output buffer status bit
  4997                                  			loopz	.10						;loop until output buffer bit
  4998                                  			pop	ecx						;restore non-volatile regs
  4999                                  			ret							;return
  5000                                  ;-----------------------------------------------------------------------------------------------------------------------
  5001                                  ;
  5002                                  ;	End of the Kernel Function Library
  5003                                  ;
  5004                                  ;-----------------------------------------------------------------------------------------------------------------------
  5005                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  5006                                  			db	055h,0AAh					;end of segment
  5007                                  ;=======================================================================================================================
  5008                                  ;
  5009                                  ;	Console Task
  5010                                  ;
  5011                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5012                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5013                                  ;	screen and responds to user commands.
  5014                                  ;
  5015                                  ;=======================================================================================================================
  5016                                  ;-----------------------------------------------------------------------------------------------------------------------
  5017                                  ;
  5018                                  ;	Console Stack								@disk: 007400	@mem:  004000
  5019                                  ;
  5020                                  ;	This is the stack for the console task. It supports 448 nested calls.
  5021                                  ;
  5022                                  ;-----------------------------------------------------------------------------------------------------------------------
  5023                                  section			constack						;console task stack
  5024                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  5025                                  ;-----------------------------------------------------------------------------------------------------------------------
  5026                                  ;
  5027                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  5028                                  ;
  5029                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5030                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5031                                  ;	16 descriptors. Six are initially defined.
  5032                                  ;
  5033                                  ;-----------------------------------------------------------------------------------------------------------------------
  5034                                  section			conldt							;console local descriptors
  5035                                  			dq	004093004780007Fh				;04 TSS alias
  5036                                  			dq	004093004700007Fh				;0C LDT alias
  5037                                  			dq	00409300400006FFh				;14 stack
  5038                                  			dq	00CF93000000FFFFh				;1C data
  5039                                  			dq	00409B0050000FFFh				;24 code
  5040                                  			dq	00409300480007FFh				;2C message queue
  5041                                  			times	128-($-$$) db 0h				;zero fill to end of section
  5042                                  ;-----------------------------------------------------------------------------------------------------------------------
  5043                                  ;
  5044                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  5045                                  ;
  5046                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5047                                  ;	segment. CS to console code.
  5048                                  ;
  5049                                  ;-----------------------------------------------------------------------------------------------------------------------
  5050                                  section			contss							;console task state segment
  5051                                  			dd	0						;00 back-link tss
  5052                                  			dd	0700h						;04 esp ring 0
  5053                                  			dd	0014h						;08 ss ring 0
  5054                                  			dd	0700h						;0C esp ring 1
  5055                                  			dd	0014h						;10 es ring 1
  5056                                  			dd	0700h						;14 esp ring 2
  5057                                  			dd	0014h						;18 ss ring 2
  5058                                  			dd	0						;1C cr ring 3
  5059                                  			dd	0						;20 eip
  5060                                  			dd	0200h						;24 eflags
  5061                                  			dd	0						;28 eax
  5062                                  			dd	0						;2C ecx
  5063                                  			dd	0						;30 edx
  5064                                  			dd	0						;34 ebx
  5065                                  			dd	0700h						;38 esp ring 3
  5066                                  			dd	0						;3C ebp
  5067                                  			dd	0						;40 esi
  5068                                  			dd	0						;44 edi
  5069                                  			dd	001Ch						;48 es
  5070                                  			dd	0024h						;4C cs
  5071                                  			dd	0014h						;50 ss ring 3
  5072                                  			dd	001Ch						;54 ds
  5073                                  			dd	0						;58 fs
  5074                                  			dd	0						;5c gs
  5075                                  			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  5076                                  			times	128-($-$$) db 0h				;zero fill to end of section
  5077                                  ;-----------------------------------------------------------------------------------------------------------------------
  5078                                  ;
  5079                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  5080                                  ;
  5081                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5082                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5083                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5084                                  ;	event.
  5085                                  ;
  5086                                  ;-----------------------------------------------------------------------------------------------------------------------
  5087                                  section			conmque							;console message queue
  5088                                  			dd	8						;head pointer
  5089                                  			dd	8						;tail pointer
  5090                                  			times	510 dd 0					;queue elements
  5091                                  ;-----------------------------------------------------------------------------------------------------------------------
  5092                                  ;
  5093                                  ;	Console Code								@disk: 008400	@mem: 005000
  5094                                  ;
  5095                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5096                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5097                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5098                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5099                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5100                                  ;	board input, echoing to the console screen and responding to user commands.
  5101                                  ;
  5102                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  5103                                  ;
  5104                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  5105                                  ;				|  Real Mode Interrupt Vectors			|
  5106                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  5107                                  ;				|  Reserved BIOS Memory Area			|
  5108                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  5109                                  ;				|  Shared Kernel Memory Area			|
  5110                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  5111                                  ;				|  Global Descriptor Table (GDT)		|
  5112                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  5113                                  ;				|  Interrupt Descriptor Table (IDT)		|
  5114                                  ;			002000	+-----------------------------------------------+
  5115                                  ;				|  Interrupt Handlers				|
  5116                                  ;				|  Kernel Function Library			|
  5117                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  5118                                  ;				|  Console Task Stack Area			|
  5119                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  5120                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  5121                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  5122                                  ;				|  Console Task Task State Segment (TSS)	|
  5123                                  ;			004800	+-----------------------------------------------+
  5124                                  ;				|  Console Task Message Queue			|
  5125                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  5126                                  ;				|  Console Task Code				|
  5127                                  ;				|  Console Task Constants			|
  5128                                  ;			006000	+===============================================+
  5129                                  ;
  5130                                  ;-----------------------------------------------------------------------------------------------------------------------
  5131                                  section			concode	vstart=05000h					;labels relative to 5000h
  5132                                  ConCode			call	ConInitializeData				;initialize console variables
  5133                                  
  5134                                  			clearConsoleScreen					;clear the console screen
  5135                                  			putConsoleString czTitle				;display startup message
  5136                                  .10			putConsoleString czPrompt				;display input prompt
  5137                                  			placeCursor						;set CRT cursor location
  5138                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  5139                                  			putConsoleString czNewLine				;newline
  5140                                  
  5141                                  			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  5142                                  			mov	edx,wzConsoleInBuffer				;console input buffer
  5143                                  			mov	ebx,wzConsoleToken				;token buffer
  5144                                  			call	ConTakeToken					;handle console input
  5145                                  			mov	edx,wzConsoleToken				;token buffer
  5146                                  			call	ConDetermineCommand				;determine command number
  5147                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  5148                                  			jb	.20						;yes, branch
  5149                                  
  5150                                  			putConsoleString czUnknownCommand			;display error message
  5151                                  
  5152                                  			jmp	.10						;next command
  5153                                  .20			shl	eax,2						;index into jump table
  5154                                  			mov	edx,tConJmpTbl					;jump table base address
  5155                                  			mov	eax,[edx+eax]					;command handler routine address
  5156                                  			call	eax						;call command handler
  5157                                  			jmp	.10						;next command
  5158                                  ;-----------------------------------------------------------------------------------------------------------------------
  5159                                  ;
  5160                                  ;	Routine:	ConInitializeData
  5161                                  ;
  5162                                  ;	Description:	This routine initializes console task variables.
  5163                                  ;
  5164                                  ;-----------------------------------------------------------------------------------------------------------------------
  5165                                  ConInitializeData	push	ecx						;save non-volatile regs
  5166                                  			push	edi						;
  5167                                  			push	es						;
  5168                                  ;
  5169                                  ;	Initialize console work areas
  5170                                  ;
  5171                                  			push	ESELDAT						;load OS data selector ...
  5172                                  			pop	es						;... into extra segment register
  5173                                  			mov	edi,ECONDATA					;OS console data address
  5174                                  			xor	al,al						;initialization value
  5175                                  			mov	ecx,ECONDATALEN					;size of OS console data
  5176                                  			cld							;forward strings
  5177                                  			rep	stosb						;initialize data
  5178                                  ;
  5179                                  ;	Initialize heap size
  5180                                  ;
  5181                                  			mov	eax,EMEMHEAPSIZE				;heap size (temporary)
  5182                                  			mov	[wfHeapSize],eax				;set heap size
  5183                                  			mov	al,6
  5184                                  			mov	[wbConsoleRow],al
  5185                                  ;
  5186                                  ;	Initialize MEMROOT structure
  5187                                  ;
  5188                                  			mov	edi,wsMemRoot					;memory root structure address
  5189                                  			mov	eax,EMEMBASE					;base address of heap storage
  5190                                  			xor	ecx,ecx						;zero register
  5191                                  			mov	cl,4						;count
  5192                                  			rep	stosd						;store first/last contig and free addrs
  5193                                  			xor	eax,eax						;zero register
  5194                                  			stosd							;zero first task block
  5195                                  			stosd							;zero last task block
  5196                                  ;
  5197                                  ;	Initialize MEMBLOCK structure at EMEMBASE
  5198                                  ;
  5199                                  			mov	edi,EMEMBASE					;memory block structure address
  5200                                  			mov	eax,EMEMFREECODE				;free memory signature
  5201                                  			stosd							;store signature
  5202                                  			mov	eax,[wfHeapSize]				;heap size
  5203                                  			stosd							;store block size
  5204                                  			xor	eax,eax						;zero register
  5205                                  			xor	ecx,ecx						;zero register
  5206                                  			mov	cl,6						;count
  5207                                  			rep	stosd						;zero owner, reserved, pointers
  5208                                  ;
  5209                                  ;	Restore and return
  5210                                  ;
  5211                                  			pop	es						;restore non-volatile regs
  5212                                  			pop	edi						;
  5213                                  			pop	ecx						;
  5214                                  			ret							;return
  5215                                  ;-----------------------------------------------------------------------------------------------------------------------
  5216                                  ;
  5217                                  ;	Routine:	ConTakeToken
  5218                                  ;
  5219                                  ;	Description:	This routine extracts the next token from the given source buffer.
  5220                                  ;
  5221                                  ;	In:		DS:EDX	source buffer address
  5222                                  ;			DS:EBX	target buffer address
  5223                                  ;
  5224                                  ;	Out:		DS:EDX	source buffer address
  5225                                  ;			DS:EBX	target buffer address
  5226                                  ;
  5227                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  5228                                  ;
  5229                                  ;-----------------------------------------------------------------------------------------------------------------------
  5230                                  ConTakeToken		push	esi						;save non-volatile regs
  5231                                  			push	edi						;
  5232                                  			mov	esi,edx						;source buffer address
  5233                                  			mov	edi,ebx						;target buffer address
  5234                                  			cld							;forward strings
  5235                                  .10			lodsb							;load byte
  5236                                  			cmp	al,EASCIISPACE					;space?
  5237                                  			je	.10						;yes, continue
  5238                                  			test	al,al						;end of line?
  5239                                  			jz	.40						;yes, branch
  5240                                  .20			stosb							;store byte
  5241                                  			lodsb							;load byte
  5242                                  			test	al,al						;end of line?
  5243                                  			jz	.40						;no, continue
  5244                                  			cmp	al,EASCIISPACE					;space?
  5245                                  			jne	.20						;no, continue
  5246                                  .30			lodsb							;load byte
  5247                                  			cmp	al,EASCIISPACE					;space?
  5248                                  			je	.30						;yes, continue
  5249                                  			dec	esi						;pre-position
  5250                                  .40			mov	byte [edi],0					;terminate buffer
  5251                                  			mov	edi,edx						;source buffer address
  5252                                  .50			lodsb							;remaining byte
  5253                                  			stosb							;move to front of buffer
  5254                                  			test	al,al						;end of line?
  5255                                  			jnz	.50						;no, continue
  5256                                  			pop	edi						;restore non-volatile regs
  5257                                  			pop	esi						;
  5258                                  			ret							;return
  5259                                  ;-----------------------------------------------------------------------------------------------------------------------
  5260                                  ;
  5261                                  ;	Routine:	ConDetermineCommand
  5262                                  ;
  5263                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  5264                                  ;
  5265                                  ;	input:		DS:EDX	command address
  5266                                  ;
  5267                                  ;	output:		EAX	>=0	= command nbr
  5268                                  ;				0	= unknown command
  5269                                  ;
  5270                                  ;-----------------------------------------------------------------------------------------------------------------------
  5271                                  ConDetermineCommand	push	ebx						;save non-volatile regs
  5272                                  			push	ecx						;
  5273                                  			push	esi						;
  5274                                  			push	edi						;
  5275                                  
  5276                                  			upperCaseString						;upper-case string at EDX
  5277                                  
  5278                                  			mov	esi,tConCmdTbl					;commands table
  5279                                  			xor	edi,edi						;intialize command number
  5280                                  			cld							;forward strings
  5281                                  .10			lodsb							;command length
  5282                                  			movzx	ecx,al						;command length
  5283                                  			jecxz	.20						;branch if end of table
  5284                                  			mov	ebx,esi						;table entry address
  5285                                  			add	esi,ecx						;next table entry address
  5286                                  
  5287                                  			compareMemory						;compare byte arrays at EDX, EBX
  5288                                  
  5289                                  			jecxz	.20						;branch if equal
  5290                                  			inc	edi						;increment command nbr
  5291                                  			jmp	.10						;repeat
  5292                                  .20			mov	eax,edi						;command number
  5293                                  			pop	edi						;restore non-volatile regs
  5294                                  			pop	esi						;
  5295                                  			pop	ecx						;
  5296                                  			pop	ebx						;
  5297                                  			ret							;return
  5298                                  ;-----------------------------------------------------------------------------------------------------------------------
  5299                                  ;
  5300                                  ;	Routine:	ConClear
  5301                                  ;
  5302                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  5303                                  ;
  5304                                  ;-----------------------------------------------------------------------------------------------------------------------
  5305                                  ConClear		clearConsoleScreen					;clear console screen
  5306                                  			ret							;return
  5307                                  ;-----------------------------------------------------------------------------------------------------------------------
  5308                                  ;
  5309                                  ;	Routine:	ConDate
  5310                                  ;
  5311                                  ;	Description:	This routine handles the DATE command.
  5312                                  ;
  5313                                  ;-----------------------------------------------------------------------------------------------------------------------
  5314                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5315                                  			putDateString	  wsConsoleDateTime,wzConsoleOutBuffer	;format date string
  5316                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5317                                  			putConsoleString  czNewLine				;write newline to console
  5318                                  			ret							;return
  5319                                  ;-----------------------------------------------------------------------------------------------------------------------
  5320                                  ;
  5321                                  ;	Routine:	ConDay
  5322                                  ;
  5323                                  ;	Description:	This routine handles the DAY command.
  5324                                  ;
  5325                                  ;-----------------------------------------------------------------------------------------------------------------------
  5326                                  ConDay			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5327                                  			putDayString      wsConsoleDateTime,wzConsoleOutBuffer	;format day string
  5328                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5329                                  			putConsoleString  czNewLine				;write newline to console
  5330                                  			ret							;return
  5331                                  ;-----------------------------------------------------------------------------------------------------------------------
  5332                                  ;
  5333                                  ;	Routine:	ConExit
  5334                                  ;
  5335                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5336                                  ;
  5337                                  ;-----------------------------------------------------------------------------------------------------------------------
  5338                                  ConExit			resetSystem						;issue system reset
  5339                                  			ret							;return
  5340                                  ;-----------------------------------------------------------------------------------------------------------------------
  5341                                  ;
  5342                                  ;	Routine:	ConFree
  5343                                  ;
  5344                                  ;	Description:	This routine handles the FREE command.
  5345                                  ;
  5346                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  5347                                  ;
  5348                                  ;-----------------------------------------------------------------------------------------------------------------------
  5349                                  ConFree			push	ebx						;save non-volatile regs
  5350                                  			push	ecx						;
  5351                                  			push	esi						;
  5352                                  			push	edi						;
  5353                                  ;
  5354                                  ;	Get address parameter
  5355                                  ;
  5356                                  			mov	edx,wzConsoleInBuffer				;console input buffer address (param)
  5357                                  			mov	ebx,wzConsoleToken				;console command token address
  5358                                  			call	ConTakeToken					;take first param as token
  5359                                  ;
  5360                                  ;	Convert input parameter from hexadecimal string to binary
  5361                                  ;
  5362                                  			cmp	byte [wzConsoleToken],0				;token found?
  5363                                  			je	.10						;no, branch
  5364                                  			mov	edx,wzConsoleToken				;first param as token address
  5365                                  
  5366                                  			hexadecimalToUnsigned					;convert string token to unsigned
  5367                                  
  5368                                  			test	eax,eax						;valid parameter?
  5369                                  			jz	.10						;no, branch
  5370                                  ;
  5371                                  ;	Free memory block
  5372                                  ;
  5373                                  			freeMemory eax						;free memory
  5374                                  
  5375                                  			cmp	eax,-1						;memory freed?
  5376                                  			je	.10						;no, branch
  5377                                  ;
  5378                                  ;	Indicate memory freed
  5379                                  ;
  5380                                  			putConsoleString czOK
  5381                                  ;
  5382                                  ;	Restore and return
  5383                                  ;
  5384                                  .10			pop	edi						;restore non-volatile regs
  5385                                  			pop	esi						;
  5386                                  			pop	ecx						;
  5387                                  			pop	ebx						;
  5388                                  			ret							;return
  5389                                  ;-----------------------------------------------------------------------------------------------------------------------
  5390                                  ;
  5391                                  ;	Routine:	ConHour
  5392                                  ;
  5393                                  ;	Description:	This routine Handles the HOUR command.
  5394                                  ;
  5395                                  ;-----------------------------------------------------------------------------------------------------------------------
  5396                                  ConHour			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5397                                  			putHourString     wsConsoleDateTime,wzConsoleOutBuffer	;format hour string
  5398                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5399                                  			putConsoleString  czNewLine				;write newline to console
  5400                                  			ret							;return
  5401                                  ;-----------------------------------------------------------------------------------------------------------------------
  5402                                  ;
  5403                                  ;	Routine:	ConInt6
  5404                                  ;
  5405                                  ;	Description:	This routine issues an interrupt 6 to exercise the interrupt handler.
  5406                                  ;
  5407                                  ;-----------------------------------------------------------------------------------------------------------------------
  5408                                  ConInt6			ud2							;raise bad opcode exception
  5409                                  			ret							;return (not executed)
  5410                                  ;-----------------------------------------------------------------------------------------------------------------------
  5411                                  ;
  5412                                  ;	Routine:	ConMalloc
  5413                                  ;
  5414                                  ;	Description:	This routine handles the MALLOC command.
  5415                                  ;
  5416                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  5417                                  ;
  5418                                  ;-----------------------------------------------------------------------------------------------------------------------
  5419                                  ConMalloc		push	ebx						;save non-volatile regs
  5420                                  			push	ecx						;
  5421                                  			push	esi						;
  5422                                  			push	edi						;
  5423                                  ;
  5424                                  ;	Get size parameter
  5425                                  ;
  5426                                  			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  5427                                  			mov	ebx,wzConsoleToken				;console command token address
  5428                                  			call	ConTakeToken					;take first param as token
  5429                                  ;
  5430                                  ;	Convert input parameter from decimal string to binary
  5431                                  ;
  5432                                  			cmp	byte [wzConsoleToken],0				;token found?
  5433                                  			je	.10						;no, branch
  5434                                  			mov	edx,wzConsoleToken				;first param as token address
  5435                                  
  5436                                  			decimalToUnsigned					;convert string token to unsigned
  5437                                  
  5438                                  			test	eax,eax						;valid parameter?
  5439                                  			jz	.10						;no, branch
  5440                                  ;
  5441                                  ;	Allocate memory block
  5442                                  ;
  5443                                  			allocateMemory eax					;allocate memory
  5444                                  
  5445                                  			test	eax,eax						;memory allocated?
  5446                                  			jz	.10						;no, branch
  5447                                  ;
  5448                                  ;	Report allocated memory block address
  5449                                  ;
  5450                                  			mov	edx,wzConsoleOutBuffer				;output buffer address
  5451                                  			mov	ecx,eax						;memory address
  5452                                  
  5453                                  			unsignedToHexadecimal					;convert memory address to hex
  5454                                  			putConsoleString wzConsoleOutBuffer			;display memory address
  5455                                  			putConsoleString czNewLine				;display new line
  5456                                  
  5457                                  .10			pop	edi						;restore non-volatile regs
  5458                                  			pop	esi						;
  5459                                  			pop	ecx						;
  5460                                  			pop	ebx
  5461                                  			ret							;return
  5462                                  ;-----------------------------------------------------------------------------------------------------------------------
  5463                                  ;
  5464                                  ;	Routine:	ConMem
  5465                                  ;
  5466                                  ;	Description:	This routine handles the MEMORY command and its MEM alias.
  5467                                  ;
  5468                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  5469                                  ;
  5470                                  ;-----------------------------------------------------------------------------------------------------------------------
  5471                                  ConMem			push	ebx						;save non-volatile regs
  5472                                  			push	esi						;
  5473                                  			push	edi						;
  5474                                  ;
  5475                                  ;			update the source address if a parameter is given
  5476                                  ;
  5477                                  			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  5478                                  			mov	ebx,wzConsoleToken				;console command token address
  5479                                  			call	ConTakeToken					;take first param as token
  5480                                  			cmp	byte [wzConsoleToken],0				;token found?
  5481                                  			je	.10						;no, branch
  5482                                  			mov	edx,wzConsoleToken				;first param as token address
  5483                                  
  5484                                  			hexadecimalToUnsigned					;convert string token to unsigned
  5485                                  
  5486                                  			mov	[wfConsoleMemAddr],eax				;save console memory address
  5487                                  ;
  5488                                  ;			setup source address and row count
  5489                                  ;
  5490                                  .10			mov	esi,[wfConsoleMemAddr]				;source memory address
  5491                                  			xor	ecx,ecx						;zero register
  5492                                  			mov	cl,16						;row count
  5493                                  ;
  5494                                  ;			start the row with the source address in hexadecimal
  5495                                  ;
  5496                                  .20			push	ecx						;save remaining rows
  5497                                  			mov	edi,wzConsoleOutBuffer				;output buffer address
  5498                                  			mov	edx,edi						;output buffer address
  5499                                  			mov	ecx,esi						;console memory address
  5500                                  
  5501                                  			unsignedToHexadecimal					;convert unsigned address to hex string
  5502                                  
  5503                                  			add	edi,8						;end of memory addr hexnum
  5504                                  			mov	al,' '						;ascii space
  5505                                  			stosb							;store delimiter
  5506                                  ;
  5507                                  ;			output 16 ASCII hexadecimal byte values for the row
  5508                                  ;
  5509                                  			xor	ecx,ecx						;zero register
  5510                                  			mov	cl,16						;loop count
  5511                                  .30			push	ecx						;save loop count
  5512                                  			lodsb							;memory byte
  5513                                  			mov	ah,al						;memory byte
  5514                                  			shr	al,4						;high-order in bits 3-0
  5515                                  			or	al,30h						;apply ascii numeric zone
  5516                                  			cmp	al,3ah						;numeric range?
  5517                                  			jb	.40						;yes, skip ahead
  5518                                  			add	al,7						;adjust ascii for 'A'-'F'
  5519                                  .40			stosb							;store ascii hexadecimal of high-order
  5520                                  			mov	al,ah						;low-order in bits 3-0
  5521                                  			and	al,0fh						;mask out high-order bits
  5522                                  			or	al,30h						;apply ascii numeric zone
  5523                                  			cmp	al,3ah						;numeric range?
  5524                                  			jb	.50						;yes, skip ahead
  5525                                  			add	al,7						;adjust ascii for 'A'-'F'
  5526                                  .50			stosb							;store ascii hexadecimal of low-order
  5527                                  			mov	al,' '						;ascii space
  5528                                  			stosb							;store ascii space delimiter
  5529                                  			pop	ecx						;loop count
  5530                                  			loop	.30						;next
  5531                                  ;
  5532                                  ;			output printable ASCII character section for the row
  5533                                  ;
  5534                                  			sub	esi,16						;reset source pointer
  5535                                  			mov	cl,16						;loop count
  5536                                  .60			lodsb							;source byte
  5537                                  			cmp	al,32						;printable? (low-range test)
  5538                                  			jb	.70						;no, skip ahead
  5539                                  			cmp	al,128						;printable? (high-range test)
  5540                                  			jb	.80						;yes, skip ahead
  5541                                  .70			mov	al,' '						;display space instead of printable
  5542                                  .80			stosb							;store printable ascii byte
  5543                                  			loop	.60						;next source byte
  5544                                  			xor	al,al						;nul-terminator
  5545                                  			stosb							;terminate output line
  5546                                  ;
  5547                                  ;			display constructed output buffer and newline
  5548                                  ;
  5549                                  			putConsoleString wzConsoleOutBuffer			;display constructed output
  5550                                  			putConsoleString czNewLine				;display new line
  5551                                  ;
  5552                                  ;			repeat until all lines displayed and preserve source address
  5553                                  ;
  5554                                  			pop	ecx						;remaining rows
  5555                                  			loop	.20						;next row
  5556                                  			mov	[wfConsoleMemAddr],esi				;update console memory address
  5557                                  			pop	edi						;restore regs
  5558                                  			pop	esi						;
  5559                                  			pop	ebx						;
  5560                                  			ret							;return
  5561                                  ;-----------------------------------------------------------------------------------------------------------------------
  5562                                  ;
  5563                                  ;	Routine:	ConMinute
  5564                                  ;
  5565                                  ;	Description:	This routine Handles the MINUTE command.
  5566                                  ;
  5567                                  ;-----------------------------------------------------------------------------------------------------------------------
  5568                                  ConMinute		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5569                                  			putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer	;format minute string
  5570                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5571                                  			putConsoleString  czNewLine				;write newline to console
  5572                                  			ret							;return
  5573                                  ;-----------------------------------------------------------------------------------------------------------------------
  5574                                  ;
  5575                                  ;	Routine:	ConMonth
  5576                                  ;
  5577                                  ;	Description:	This routine Handles the MONTH command.
  5578                                  ;
  5579                                  ;-----------------------------------------------------------------------------------------------------------------------
  5580                                  ConMonth		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5581                                  			putMonthString    wsConsoleDateTime,wzConsoleOutBuffer	;format month string
  5582                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5583                                  			putConsoleString  czNewLine				;write newline to console
  5584                                  			ret							;return
  5585                                  ;-----------------------------------------------------------------------------------------------------------------------
  5586                                  ;
  5587                                  ;	Routine:	ConMonthName
  5588                                  ;
  5589                                  ;	Description:	This routine Handles the MONTH.NAME command.
  5590                                  ;
  5591                                  ;-----------------------------------------------------------------------------------------------------------------------
  5592                                  ConMonthName		readRealTimeClock  wsConsoleDateTime			;read RTC data into structure
  5593                                  			putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer	;format month name string
  5594                                  			putConsoleString   wzConsoleOutBuffer			;write string to console
  5595                                  			putConsoleString   czNewLine				;write newline to console
  5596                                  			ret							;return
  5597                                  ;-----------------------------------------------------------------------------------------------------------------------
  5598                                  ;
  5599                                  ;	Routine:	ConSecond
  5600                                  ;
  5601                                  ;	Description:	This routine Handles the SECOND command.
  5602                                  ;
  5603                                  ;-----------------------------------------------------------------------------------------------------------------------
  5604                                  ConSecond		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5605                                  			putSecondString   wsConsoleDateTime,wzConsoleOutBuffer	;format second string
  5606                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5607                                  			putConsoleString  czNewLine				;write newline to console
  5608                                  			ret							;return
  5609                                  ;-----------------------------------------------------------------------------------------------------------------------
  5610                                  ;
  5611                                  ;	Routine:	ConTime
  5612                                  ;
  5613                                  ;	Description:	This routine Handles the TIME command.
  5614                                  ;
  5615                                  ;-----------------------------------------------------------------------------------------------------------------------
  5616                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5617                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  5618                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5619                                  			putConsoleString  czNewLine				;write newline to console
  5620                                  			ret							;return
  5621                                  ;-----------------------------------------------------------------------------------------------------------------------
  5622                                  ;
  5623                                  ;	Routine:	ConWeekday
  5624                                  ;
  5625                                  ;	Description:	This routine handles the WEEKDAY command.
  5626                                  ;
  5627                                  ;-----------------------------------------------------------------------------------------------------------------------
  5628                                  ConWeekday		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5629                                  			putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer	;format weekday string
  5630                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5631                                  			putConsoleString  czNewLine				;write newline to console
  5632                                  			ret							;return
  5633                                  ;-----------------------------------------------------------------------------------------------------------------------
  5634                                  ;
  5635                                  ;	Routine:	ConWeekdayName
  5636                                  ;
  5637                                  ;	Description:	This routine Handles the WEEKDAY.NAME command.
  5638                                  ;
  5639                                  ;-----------------------------------------------------------------------------------------------------------------------
  5640                                  ConWeekdayName		readRealTimeClock    wsConsoleDateTime				;read RTC data into structure
  5641                                  			putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer	;format day name string
  5642                                  			putConsoleString     wzConsoleOutBuffer				;write string to console
  5643                                  			putConsoleString     czNewLine					;write newline to console
  5644                                  			ret								;return
  5645                                  ;-----------------------------------------------------------------------------------------------------------------------
  5646                                  ;
  5647                                  ;	Routine:	ConYear
  5648                                  ;
  5649                                  ;	Description:	This routine Handles the YEAR command.
  5650                                  ;
  5651                                  ;-----------------------------------------------------------------------------------------------------------------------
  5652                                  ConYear			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5653                                  			putYearString	  wsConsoleDateTime,wzConsoleOutBuffer	;format year string
  5654                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  5655                                  			putConsoleString  czNewLine				;write newline to console
  5656                                  			ret							;return
  5657                                  ;-----------------------------------------------------------------------------------------------------------------------
  5658                                  ;
  5659                                  ;	Routine:	ConYearIsLeap
  5660                                  ;
  5661                                  ;	Description:	This routine handles the YEAR.ISLEAP command
  5662                                  ;
  5663                                  ;-----------------------------------------------------------------------------------------------------------------------
  5664                                  ConYearIsLeap		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  5665                                  			isLeapYear        wsConsoleDateTime			;indicate if year is leap year
  5666                                  
  5667                                  			jecxz	.10						;branch if not leap
  5668                                  
  5669                                  			putConsoleString  czYearIsLeap				;display year is leap message
  5670                                  
  5671                                  			jmp	.20						;continue
  5672                                  
  5673                                  .10			putConsoleString  czYearIsNotLeap			;display year is not leap mesage
  5674                                  .20			ret							;return
  5675                                  ;-----------------------------------------------------------------------------------------------------------------------
  5676                                  ;
  5677                                  ;	Routine:	ConVersion
  5678                                  ;
  5679                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  5680                                  ;
  5681                                  ;-----------------------------------------------------------------------------------------------------------------------
  5682                                  ConVersion		putConsoleString czTitle				;display version message
  5683                                  			ret							;return
  5684                                  ;-----------------------------------------------------------------------------------------------------------------------
  5685                                  ;
  5686                                  ;	Tables
  5687                                  ;
  5688                                  ;-----------------------------------------------------------------------------------------------------------------------
  5689                                  										;---------------------------------------
  5690                                  										;  Command Jump Table
  5691                                  										;---------------------------------------
  5692                                  tConJmpTbl		equ	$						;command jump table
  5693                                  			dd	ConWeekdayName	- ConCode			;weekday.name command routine offset
  5694                                  			dd	ConYearIsLeap	- ConCode			;year.isleap command routine offset
  5695                                  			dd	ConMonthName	- ConCode			;month.name command routine offset
  5696                                  			dd	ConExit		- ConCode			;shutdown command routine offset
  5697                                  			dd	ConVersion	- ConCode			;version command routine offset
  5698                                  			dd	ConWeekday	- ConCode			;weekday command routine offset
  5699                                  			dd	ConMalloc	- ConCode			;malloc command routine offset
  5700                                  			dd	ConMem		- ConCode			;memory command routine offset
  5701                                  			dd	ConMinute	- ConCode			;minute command routine offset
  5702                                  			dd	ConSecond	- ConCode			;second command routine offset
  5703                                  			dd	ConClear	- ConCode			;clear command routine offset
  5704                                  			dd	ConMonth	- ConCode			;month command routine offset
  5705                                  			dd	ConDate		- ConCode			;date command routine offset
  5706                                  			dd	ConExit		- ConCode			;exit command routine offset
  5707                                  			dd	ConFree		- ConCode			;free command routine offset
  5708                                  			dd	ConHour		- ConCode			;hour command routine offset
  5709                                  			dd	ConInt6		- ConCode			;int6 command routine offset
  5710                                  			dd	ConExit		- ConCode			;quit command routine offset
  5711                                  			dd	ConTime		- ConCode			;time command routine offset
  5712                                  			dd	ConYear		- ConCode			;year command routine offset
  5713                                  			dd	ConClear	- ConCode			;cls command routine offset
  5714                                  			dd	ConDay		- ConCode			;day command routine offset
  5715                                  			dd	ConMem		- ConCode			;mem command routine offset
  5716                                  			dd	ConVersion	- ConCode			;ver command routine offset
  5717                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  5718                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  5719                                  										;---------------------------------------
  5720                                  										;  Command Name Table
  5721                                  										;---------------------------------------
  5722                                  tConCmdTbl		equ	$						;command name table
  5723                                  			db	13,"WEEKDAY.NAME",0				;weekday.name command
  5724                                  			db	12,"YEAR.ISLEAP",0				;year.isleap command
  5725                                  			db	11,"MONTH.NAME",0				;month.name command
  5726                                  			db	9,"SHUTDOWN",0					;shutdown command
  5727                                  			db	8,"VERSION",0					;version command
  5728                                  			db	8,"WEEKDAY",0					;weekday command
  5729                                  			db	7,"MALLOC",0					;malloc command
  5730                                  			db	7,"MEMORY",0					;memory command
  5731                                  			db	7,"MINUTE",0					;minute command
  5732                                  			db	7,"SECOND",0					;second command
  5733                                  			db	6,"CLEAR",0					;clear command
  5734                                  			db	6,"MONTH",0					;month command
  5735                                  			db	5,"DATE",0					;date command
  5736                                  			db	5,"EXIT",0					;exit command
  5737                                  			db	5,"FREE",0					;free command
  5738                                  			db	5,"HOUR",0					;hour command
  5739                                  			db	5,"INT6",0					;int6 command
  5740                                  			db	5,"QUIT",0					;quit command
  5741                                  			db	5,"TIME",0					;time command
  5742                                  			db	5,"YEAR",0					;year command
  5743                                  			db	4,"CLS",0					;cls command
  5744                                  			db	4,"DAY",0					;day command
  5745                                  			db	4,"MEM",0					;mem command
  5746                                  			db	4,"VER",0					;ver command
  5747                                  			db	0						;end of table
  5748                                  ;-----------------------------------------------------------------------------------------------------------------------
  5749                                  ;
  5750                                  ;	Constants
  5751                                  ;
  5752                                  ;-----------------------------------------------------------------------------------------------------------------------
  5753                                  czNewLine		db	13,10,0						;new line string
  5754                                  czOK			db	"OK",13,10,0					;OK string
  5755                                  czPrompt		db	":",0						;prompt string
  5756                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  5757                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  5758                                  czYearIsLeap		db	"The year is a leap year.",13,10,0		;leap year message
  5759                                  czYearIsNotLeap		db	"The year is not a leap year.",13,10,0		;not leap year message
  5760                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  5761                                  			db	055h,0AAh					;end of section
  5762                                  ;=======================================================================================================================
  5763                                  ;
  5764                                  ;	Background Task								@disk: 009400	@mem: 006000
  5765                                  ;
  5766                                  ;	This task executes monitoring and self-correcting functions.
  5767                                  ;
  5768                                  ;			000000	+-----------------------------------------------+
  5769                                  ;				|  Real Mode Interrupt Vectors			|
  5770                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  5771                                  ;				|  Reserved BIOS Memory Area			|
  5772                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  5773                                  ;				|  Shared Kernel Memory Area			|
  5774                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  5775                                  ;				|  Global Descriptor Table (GDT)		|
  5776                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  5777                                  ;				|  Interrupt Descriptor Table (IDT)		|
  5778                                  ;			002000	+-----------------------------------------------+
  5779                                  ;				|  Interrupt Handlers				|
  5780                                  ;				|  Kernel Function Library			|
  5781                                  ;			004000	+===============================================+
  5782                                  ;				|  Console Task Stack Area			|
  5783                                  ;			004700	+-----------------------------------------------+
  5784                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  5785                                  ;			004780	+-----------------------------------------------+
  5786                                  ;				|  Console Task Task State Segment (TSS)	|
  5787                                  ;			004800	+-----------------------------------------------+
  5788                                  ;				|  Console Task Message Queue			|
  5789                                  ;			005000	+-----------------------------------------------+
  5790                                  ;				|  Console Task Code				|
  5791                                  ;				|  Console Task Constants			|
  5792                                  ;			006000	+===============================================+
  5793                                  ;				|  Background Task Stack Area			|
  5794                                  ;	SS:SP --------> 006700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0060h
  5795                                  ;				|  Background Task Local Descriptor Table (LDT) |
  5796                                  ;			006780  +-----------------------------------------------+		<-- TR = GDT.SEL 0068h
  5797                                  ;				|  Background Task Task State Segment (TSS)	|
  5798                                  ;			006800	+-----------------------------------------------+
  5799                                  ;				|  Background Task Message Queue		|
  5800                                  ;	CS,CS:IP ----->	007000	+-----------------------------------------------+ CS:0000
  5801                                  ;				|  Background Task Code				|
  5802                                  ;				|  Background Task Constants			|
  5803                                  ;			008000	+===============================================+
  5804                                  ;
  5805                                  ;=======================================================================================================================
  5806                                  ;-----------------------------------------------------------------------------------------------------------------------
  5807                                  ;
  5808                                  ;	Background Task Stack							@disk: 009400	@mem:  006000
  5809                                  ;
  5810                                  ;	This is the stack for the background task. It supports 448 nested calls.
  5811                                  ;
  5812                                  ;-----------------------------------------------------------------------------------------------------------------------
  5813                                  section			bgstack							;background task stack
  5814                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  5815                                  ;-----------------------------------------------------------------------------------------------------------------------
  5816                                  ;
  5817                                  ;	Background Task Local Descriptor Table					@disk: 009B00	@mem:  006700
  5818                                  ;
  5819                                  ;	This is the LDT for the background task. It defines the stack, code, data and queue segments as well as data
  5820                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5821                                  ;	16 descriptors. Six are initially defined.
  5822                                  ;
  5823                                  ;-----------------------------------------------------------------------------------------------------------------------
  5824                                  section			bgldt							;background task local descriptors
  5825                                  			dq	004093006780007Fh				;04 TSS alias		128B  @ 6780
  5826                                  			dq	004093006700007Fh				;0C LDT alias		128B  @ 6700
  5827                                  			dq	00409300600006FFh				;14 stack		1792B @ 6600
  5828                                  			dq	00CF93000000FFFFh				;1C data		4GB   @ 0000
  5829                                  			dq	00409B0070000FFFh				;24 code                4KB   @ 7000
  5830                                  			dq	00409300680007FFh				;2C message queue	2KB   @ 6800
  5831                                  			times	128-($-$$) db 0h				;zero fill to end of section
  5832                                  ;-----------------------------------------------------------------------------------------------------------------------
  5833                                  ;
  5834                                  ;	Background Task State Segment						@disk: 009B80	@mem:  006780
  5835                                  ;
  5836                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5837                                  ;	segment. CS to console code.
  5838                                  ;
  5839                                  ;-----------------------------------------------------------------------------------------------------------------------
  5840                                  section			bgtss							;background task state segment
  5841                                  			dd	0						;00 back-link tss
  5842                                  			dd	0700h						;04 esp ring 0
  5843                                  			dd	0014h						;08 ss ring 0
  5844                                  			dd	0700h						;0C esp ring 1
  5845                                  			dd	0014h						;10 es ring 1
  5846                                  			dd	0700h						;14 esp ring 2
  5847                                  			dd	0014h						;18 ss ring 2
  5848                                  			dd	0						;1C cr ring 3
  5849                                  			dd	0						;20 eip
  5850                                  			dd	0200h						;24 eflags
  5851                                  			dd	0						;28 eax
  5852                                  			dd	0						;2C ecx
  5853                                  			dd	0						;30 edx
  5854                                  			dd	0						;34 ebx
  5855                                  			dd	0700h						;38 esp ring 3
  5856                                  			dd	0						;3C ebp
  5857                                  			dd	0						;40 esi
  5858                                  			dd	0						;44 edi
  5859                                  			dd	001Ch						;48 es
  5860                                  			dd	0024h						;4C cs
  5861                                  			dd	0014h						;50 ss ring 3
  5862                                  			dd	001Ch						;54 ds
  5863                                  			dd	0						;58 fs
  5864                                  			dd	0						;5c gs
  5865                                  			dd	ESELBACKGROUNDLDT				;60 ldt selector in gdt
  5866                                  			times	128-($-$$) db 0h				;zero fill to end of section
  5867                                  ;-----------------------------------------------------------------------------------------------------------------------
  5868                                  ;
  5869                                  ;	Background Task Message Queue						@disk: 009C00	@mem: 006800
  5870                                  ;
  5871                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5872                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5873                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5874                                  ;	event.
  5875                                  ;
  5876                                  ;-----------------------------------------------------------------------------------------------------------------------
  5877                                  section			bgmque							;console message queue
  5878                                  			dd	8						;head pointer
  5879                                  			dd	8						;tail pointer
  5880                                  			times	510 dd 0					;queue elements
  5881                                  ;-----------------------------------------------------------------------------------------------------------------------
  5882                                  ;
  5883                                  ;	Background Task Code							@disk: 00A400	@mem: 007000
  5884                                  ;
  5885                                  ;-----------------------------------------------------------------------------------------------------------------------
  5886                                  section			bgcode	vstart=07000h					;labels relative to 7000h
  5887                                  BackgroundCode		call	BgInitializeData				;initialize the background variables
  5888                                  
  5889                                  .10			readRealTimeClock wsBgDateTime				;read real-time clock data
  5890                                  			putTimeString     wsBgDateTime,wzBgTime			;create ASCII time string
  5891                                  			compareMemory	  wzBgTime,wzBgTimeCmpr,EBGTIMELEN	;compare to previous time string
  5892                                  
  5893                                  			jecxz	.10						;repeat if equal
  5894                                  			push	es						;save non-volatile reg
  5895                                  			push	ESELCGA						;load CGA selector ...
  5896                                  			pop	es						;... into extra segment reg
  5897                                  			mov	esi,wzBgTime					;string address
  5898                                  			mov	ch,24						;OIA row
  5899                                  			mov	cl,67						;OIA column
  5900                                  
  5901                                  			setConsoleString					;display string
  5902                                  
  5903                                  			pop	es						;restore non-volatile reg
  5904                                  
  5905                                  			copyMemory	  wzBgTime,wzBgTimeCmpr,EBGTIMELEN	;copy to comparison string
  5906                                  			yield							;halt until interrupt
  5907                                  
  5908                                  			jmp	.10						;continue
  5909                                  ;-----------------------------------------------------------------------------------------------------------------------
  5910                                  ;
  5911                                  ;	Routine:	BgInitializeData
  5912                                  ;
  5913                                  ;	Description:	This routine initializes background task variables.
  5914                                  ;
  5915                                  ;-----------------------------------------------------------------------------------------------------------------------
  5916                                  BgInitializeData	push	ecx						;save non-volatile regs
  5917                                  			push	edi						;
  5918                                  			push	es						;
  5919                                  ;
  5920                                  ;	Initialize console work areas
  5921                                  ;
  5922                                  			push	ESELDAT						;load OS data selector ...
  5923                                  			pop	es						;... into extra segment register
  5924                                  			mov	edi,EBGDATA					;OS console data address
  5925                                  			xor	al,al						;initialization value
  5926                                  			mov	ecx,EBGDATALEN					;size of OS console data
  5927                                  			cld							;forward strings
  5928                                  			rep	stosb						;initialize data
  5929                                  ;
  5930                                  ;	Restore and return
  5931                                  ;
  5932                                  			pop	es						;restore non-volatile regs
  5933                                  			pop	edi						;
  5934                                  			pop	ecx						;
  5935                                  			ret							;return
  5936                                  ;-----------------------------------------------------------------------------------------------------------------------
  5937                                  ;
  5938                                  ;	Background Task Constants
  5939                                  ;
  5940                                  ;-----------------------------------------------------------------------------------------------------------------------
  5941                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  5942                                  			db	055h,0AAh					;end of section
  5943                                  %endif
  5944                                  %ifdef BUILDDISK
  5945                                  ;-----------------------------------------------------------------------------------------------------------------------
  5946                                  ;
  5947                                  ;	Free Disk Space								@disk: 00B400	@mem:  n/a
  5948                                  ;
  5949                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5950                                  ;
  5951                                  ;-----------------------------------------------------------------------------------------------------------------------
  5952                                  section			unused							;unused disk space
  5953                                  			times	EBOOTDISKBYTES-0B400h db 0F6h			;fill to end of disk image
  5954                                  %endif
  5955                                  ;=======================================================================================================================
  5956                                  ;
  5957                                  ;	End of Program Code
  5958                                  ;
  5959                                  ;=======================================================================================================================
