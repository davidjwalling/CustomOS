     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.012
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;                       "date" and "time" and other related commands.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMEM...         Memory Management values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   295                                  ;
   296                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   297                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   298                                  ;
   299                                  ;       0.......        Segment is not present in memory (triggers int 11)
   300                                  ;       1.......        Segment is present in memory
   301                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   302                                  ;       ...0....        Segment is a system segment
   303                                  ;       ...00010                Local Descriptor Table
   304                                  ;       ...00101                Task Gate
   305                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   306                                  ;       ...01100                Call Gate (386)
   307                                  ;       ...01110                Interrupt Gate (386)
   308                                  ;       ...01111                Trap Gate (386)
   309                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   310                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   311                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   315                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   316                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   317                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   318                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   319                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   320                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   321                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       Firmware-Defined Values
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   330                                  ;
   331                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   332                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   336                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   337                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   338                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   339                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   340                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   341                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   342                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   343                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   344                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   345                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Standards-Based Values
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       ASCII                                                                   EASCII...
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   357                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   358                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   359                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   360                                  EASCIISPACE             equ     020h                                            ;space
   361                                  EASCIIUPPERA            equ     041h                                            ;'A'
   362                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   363                                  EASCIILOWERA            equ     061h                                            ;'a'
   364                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   365                                  EASCIITILDE             equ     07Eh                                            ;'~'
   366                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   367                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   368                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   369                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   370                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   371                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   372                                  EASCIICASE              equ     00100000b                                       ;case bit
   373                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ;
   376                                  ;       Operating System Values
   377                                  ;
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  ;
   381                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   382                                  ;
   383                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   384                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   385                                  ;
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   388                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   389                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   390                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   391                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   392                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   393                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  ;       Console Constants                                                       ECON...
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ECONCOLS                equ     80                                              ;columns per row
   398                                  ECONROWS                equ     24                                              ;console rows
   399                                  ECONOIAROW              equ     24                                              ;operator information area row
   400                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   401                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   402                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   403                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   404                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   409                                  EGDTCGA                 equ     020h                                            ;cga video selector
   410                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   411                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   412                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   413                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   414                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   415                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  ;       Keyboard Flags                                                          EKEYF...
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   420                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   421                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   422                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   423                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   424                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   425                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   426                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   427                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   428                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   429                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;       Kernel Constants                                                        EKRN...
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   434                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   435                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   436                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   437                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   438                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;       Memory Management Constants                                             EMEM...
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   447                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   448                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   449                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  ;       Message Identifiers                                                     EMSG...
   452                                  ;-----------------------------------------------------------------------------------------------------------------------
   453                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   454                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   455                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   456                                  ;=======================================================================================================================
   457                                  ;
   458                                  ;       Structures
   459                                  ;
   460                                  ;=======================================================================================================================
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  ;
   463                                  ;       DATETIME
   464                                  ;
   465                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   466                                  ;
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  struc                   DATETIME
   469 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   470 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   471 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   472 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   473 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   474 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   475 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   476 00000007 <res 00000001>          .century                resb    1                                               ;century
   477                                  EDATETIMELEN            equ     ($-.second)
   478                                  endstruc
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  ;
   481                                  ;       MEMBLOCK
   482                                  ;
   483                                  ;       The MEMBLOCK structure defines a memory block.
   484                                  ;
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  struc                   MEMBLOCK
   487 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   488 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   489 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   490 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   491 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   492 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   493 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   494 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   495                                  EMEMBLOCKLEN            equ     ($-.signature)
   496                                  endstruc
   497                                  ;-----------------------------------------------------------------------------------------------------------------------
   498                                  ;
   499                                  ;       MEMROOT
   500                                  ;
   501                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   502                                  ;
   503                                  ;-----------------------------------------------------------------------------------------------------------------------
   504                                  struc                   MEMROOT
   505 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   506 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   507 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   508 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   509 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   510 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   511                                  EMEMROOTLEN             equ     ($-.firstcontig)
   512                                  endstruc
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514                                  ;
   515                                  ;       MQUEUE
   516                                  ;
   517                                  ;       The MQUEUE structure maps memory used for a message queue.
   518                                  ;
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  struc                   MQUEUE
   521 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   522 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   523 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   524                                  endstruc
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  ;
   527                                  ;       OSDATA
   528                                  ;
   529                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   530                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   531                                  ;
   532                                  ;-----------------------------------------------------------------------------------------------------------------------
   533                                  struc                   OSDATA
   534 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   535 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   536 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   537 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   538 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   539 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   540 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   541 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   542 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   543 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   544 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   545 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   546 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   547 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   548 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   549 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   550 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   551 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   552 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   553 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   554 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   555 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   556 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   557 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   558 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   559 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   560 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   561 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   562 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   563 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   564 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   565 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   566 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   567 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   568 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   569 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   570 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   571 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   572 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   573 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   574 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   575 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   576 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   577 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   578 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   579 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   580 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   581 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   582 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   583 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   584 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   585 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   586 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   587 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   588 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   589 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   590 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   591 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   592 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   593 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   594 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   595 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   596 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   597 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   598 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   599 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   600 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   601 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   602 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   603 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   604 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   605 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   606 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   607 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   608 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   609 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   610 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   611 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   612 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   613 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   614 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   615 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   616 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   617 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   618 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   619 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   620 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   621 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   622 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   623 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   624 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   625 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   626 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   627 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   628 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   629 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   630 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   631 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   632 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   633 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   634 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   635                                  ;-----------------------------------------------------------------------------------------------------------------------
   636                                  ;
   637                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   638                                  ;
   639                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   640                                  ;
   641                                  ;-----------------------------------------------------------------------------------------------------------------------
   642                                  ECONDATA                equ     ($)
   643 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   644 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   645 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   646 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   647 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   648 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   649 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   650 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   651 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   652 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   653 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   654 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   655 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   656 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   657 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   658 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   659 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   660 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   661 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   662 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   663 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   664 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   665 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   666 00000931 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   667 00000949 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   668                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   669                                  ;-----------------------------------------------------------------------------------------------------------------------
   670                                  ;
   671                                  ;       End of OS Variables
   672                                  ;
   673                                  ;-----------------------------------------------------------------------------------------------------------------------
   674                                  endstruc
   675                                  ;-----------------------------------------------------------------------------------------------------------------------
   676                                  ;
   677                                  ;       Macros
   678                                  ;
   679                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   680                                  ;
   681                                  ;-----------------------------------------------------------------------------------------------------------------------
   682                                  %macro                  mint    1
   683                                  _%1                     equ     ($-$$) / EX86DESCLEN
   684                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   685                                  %endmacro
   686                                  %macro                  mtrap   1
   687                                  _%1                     equ     ($-$$) / EX86DESCLEN
   688                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   689                                  %endmacro
   690                                  %macro                  menter  1
   691                                  ?%1                     equ     ($-$$)
   692                                  %endmacro
   693                                  %macro                  tsvce   1
   694                                  e%1                     equ     ($-tsvc)/4
   695                                                          dd      %1
   696                                  %endmacro
   697                                  %ifdef BUILDBOOT
   698                                  ;=======================================================================================================================
   699                                  ;
   700                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   701                                  ;
   702                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   703                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   704                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   705                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   706                                  ;
   707                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   708                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   709                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   710                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   711                                  ;       immediately followed by a disk parameter table.
   712                                  ;
   713                                  ;=======================================================================================================================
   714                                                          cpu     8086                                            ;assume minimal CPU
   715                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   716                                                          bits    16                                              ;16-bit code at power-up
   717                                  %ifdef BUILDPREP
   718                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   719                                  %else
   720                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   721                                  %endif
   722                                  ;-----------------------------------------------------------------------------------------------------------------------
   723                                  ;
   724                                  ;       Disk Parameter Table
   725                                  ;
   726                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   727                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   728                                  ;
   729                                  ;-----------------------------------------------------------------------------------------------------------------------
   730                                                          db      "CustomOS"                                      ;eight-byte label
   731                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   732                                  cbClusterSectors        db      1                                               ;sectors per cluster
   733                                  cwReservedSectors       dw      1                                               ;reserved sectors
   734                                  cbFatCount              db      2                                               ;file allocation table copies
   735                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   736                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   737                                  cbDiskType              db      0F0h                                            ;1.44MB
   738                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   739                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   740                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   741                                  cwDiskSides             dw      2                                               ;sides per disk
   742                                  cwSpecialSectors        dw      0                                               ;special sectors
   743                                  ;
   744                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   745                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   746                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   747                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   748                                  ;       given several possible starting values for CS:IP.
   749                                  ;
   750                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   751                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   752                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   753                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   754                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   755                                                          mov     cl,4                                            ;shift count
   756                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   757                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   758                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   759                                  ;
   760                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   761                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   762                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   763                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   764                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   765                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   766                                  ;
   767                                                          sub     bx,16                                           ;BX = 07b0
   768                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   769                                                          mov     es,bx                                           ;ES = 07b0 = psp
   770                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   771                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   772                                  ;
   773                                  ;       Our boot addressability is now set up according to the following diagram.
   774                                  ;
   775                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   776                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   777                                  ;                               |  256 = 100h bytes                             |
   778                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   779                                  ;                               |  Boot Sector (vstart=0100h)                   |
   780                                  ;                               |  1 sector = 512 = 200h bytes                  |
   781                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   782                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   783                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   784                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   785                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   786                                  ;                               |  2 sectors = 1024 = 400h bytes
   787                                  ;                       009400  +-----------------------------------------------+ DS:1900
   788                                  ;
   789                                  ;       On entry, DL indicates the drive being booted from.
   790                                  ;
   791                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   792                                  ;
   793                                  ;       Compute directory i/o buffer address.
   794                                  ;
   795                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   796                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   797                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   798                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   799                                  ;
   800                                  ;       Compute segment where os.com will be loaded.
   801                                  ;
   802                                                          shr     ax,cl                                           ;AX = 0150
   803                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   804                                                          sub     ax,16                                           ;AX = 08f0
   805                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   806                                  ;
   807                                  ;       Set the video mode to 80 column, 25 row, text.
   808                                  ;
   809                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   810                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   811                                  ;
   812                                  ;       Write a message to the console so we know we have our addressability established.
   813                                  ;
   814                                                          mov     si,czLoadMsg                                    ;loading message
   815                                                          call    BootPrint                                       ;display loader message
   816                                  ;
   817                                  ;       Initialize the number of directory sectors to search.
   818                                  ;
   819                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   820                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   821                                  ;
   822                                  ;       Compute number of directory sectors and initialize overhead count.
   823                                  ;
   824                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   825                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   826                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   827                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   828                                  ;
   829                                  ;       Compute directory entries per sector.
   830                                  ;
   831                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   832                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   833                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   834                                  ;
   835                                  ;       Compute first logical directory sector and update overhead count.
   836                                  ;
   837                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   838                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   839                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   840                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   841                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   842                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   843                                  ;
   844                                  ;       Read directory sector.
   845                                  ;
   846                                  .30                     mov     al,1                                            ;sector count
   847                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   848                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   849                                                          call    ReadSector                                      ;read sector into es:bx
   850                                  ;
   851                                  ;       Setup variables to search this directory sector.
   852                                  ;
   853                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   854                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   855                                                          jna     .40                                             ;no, continue
   856                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   857                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   858                                                          mov     si,cbKernelProgram                              ;program name
   859                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   860                                  ;
   861                                  ;       Loop through directory sectors searching for kernel program.
   862                                  ;
   863                                  .50                     push    si                                              ;save kernel name address
   864                                                          push    di                                              ;save dir i/o buffer address
   865                                                          mov     cx,11                                           ;length of 8+3 name
   866                                                          cld                                                     ;forward strings
   867                                                          repe    cmpsb                                           ;compare entry name
   868                                                          pop     di                                              ;restore dir i/o buffer address
   869                                                          pop     si                                              ;restore kernel name address
   870                                                          je      .60                                             ;exit loop if found
   871                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   872                                                          dec     ax                                              ;decrement remaining entries
   873                                                          jnz     .50                                             ;next entry
   874                                  ;
   875                                  ;       Repeat search if we are not at the end of the directory.
   876                                  ;
   877                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   878                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   879                                                          jne     .30                                             ;no, get next sector
   880                                                          mov     si,czNoKernel                                   ;missing kernel message
   881                                                          jmp     BootExit                                        ;display message and exit
   882                                  ;
   883                                  ;       If we find the kernel program in the directory, read the FAT.
   884                                  ;
   885                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   886                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   887                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   888                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   889                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   890                                                          call    ReadSector                                      ;read FAT into buffer
   891                                  ;
   892                                  ;       Get the starting cluster of the kernel program and target address.
   893                                  ;
   894                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   895                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   896                                  ;
   897                                  ;       Read each program cluster into RAM.
   898                                  ;
   899                                  .70                     push    ax                                              ;save cluster nbr
   900                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   901                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   902                                                          mov     [wbReadCount],cl                                ;save sectors to read
   903                                                          xor     ch,ch                                           ;CX = sectors per cluster
   904                                                          mul     cx                                              ;DX:AX = logical cluster sector
   905                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   906                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   907                                                          call    ReadSector                                      ;read sectors into ES:BX
   908                                  ;
   909                                  ;       Update buffer pointer for next cluster.
   910                                  ;
   911                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   912                                                          xor     ah,ah                                           ;AX = sectors per cluster
   913                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   914                                                          add     bx,ax                                           ;BX = next cluster target address
   915                                                          pop     ax                                              ;AX = restore cluster nbr
   916                                  ;
   917                                  ;       Compute next cluster number.
   918                                  ;
   919                                                          mov     cx,ax                                           ;CX = cluster nbr
   920                                                          mov     di,ax                                           ;DI = cluster nbr
   921                                                          shr     ax,1                                            ;AX = cluster/2
   922                                                          mov     dx,ax                                           ;DX = cluster/2
   923                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   924                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   925                                                          and     di,1                                            ;get low bit
   926                                                          add     di,ax                                           ;add one if cluster is odd
   927                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   928                                                          mov     ax,[di]                                         ;get cluster bytes
   929                                  ;
   930                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   931                                  ;
   932                                                          test    cl,1                                            ;is cluster odd?
   933                                                          jz      .80                                             ;no, skip ahead
   934                                                          mov     cl,4                                            ;shift count
   935                                                          shr     ax,cl                                           ;shift nybble low
   936                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   937                                                          cmp     ax,0FFFh                                        ;end of chain?
   938                                                          jne     .70                                             ;no, continue
   939                                  ;
   940                                  ;       Transfer control to the operating system program.
   941                                  ;
   942                                                          db      0EAh                                            ;jmp seg:offset
   943                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   944                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   945                                  ;
   946                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   947                                  ;
   948                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   949                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   950                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   951                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   952                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   953                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   954                                                          mov     ax,dx                                           ;AX = cyl sector
   955                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   956                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   957                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   958                                  ;
   959                                  ;       Try maxtries times to read sector.
   960                                  ;
   961                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   962                                  .10                     push    bx                                              ;save buffer address
   963                                                          push    cx                                              ;save retry count
   964                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   965                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   966                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   967                                                          int     EBIOSINTDISKETTE                                ;read sector
   968                                                          pop     cx                                              ;restore retry count
   969                                                          pop     bx                                              ;restore buffer address
   970                                                          jnc     BootReturn                                      ;skip ahead if done
   971                                                          loop    .10                                             ;retry
   972                                  ;
   973                                  ;       Handle disk error: convert to ASCII and store in error string.
   974                                  ;
   975                                                          mov     al,ah                                           ;AL = bios error code
   976                                                          xor     ah,ah                                           ;AX = bios error code
   977                                                          mov     dl,16                                           ;divisor for base 16
   978                                                          div     dl                                              ;AL = hi order, AH = lo order
   979                                                          or      ax,03030h                                       ;apply ASCII zone bits
   980                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   981                                                          jb      .20                                             ;continue if numeral
   982                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   983                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   984                                                          jb      .30                                             ;continue if numeral
   985                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   986                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   987                                                          mov     si,czErrorMsg                                   ;error message address
   988                                  BootExit                call    BootPrint                                       ;display messge to console
   989                                  ;
   990                                  ;       Wait for a key press.
   991                                  ;
   992                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   993                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   994                                                          jnz     .20                                             ;continue if key pressed
   995                                                          sti                                                     ;enable maskable interrupts
   996                                                          hlt                                                     ;wait for interrupt
   997                                                          jmp     .10                                             ;repeat
   998                                  ;
   999                                  ;       Reset the system.
  1000                                  ;
  1001                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1002                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1003                                  .30                     sti                                                     ;enable maskable interrupts
  1004                                                          hlt                                                     ;stop until reset, int, nmi
  1005                                                          jmp     .30                                             ;loop until restart kicks in
  1006                                  ;
  1007                                  ;       Display text message.
  1008                                  ;
  1009                                  BootPrint               cld                                                     ;forward strings
  1010                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1011                                                          test    al,al                                           ;end of string?
  1012                                                          jz      BootReturn                                      ;... yes, exit our loop
  1013                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1014                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1015                                                          jmp     .10                                             ;repeat until done
  1016                                  BootReturn              ret                                                     ;return
  1017                                  ;-----------------------------------------------------------------------------------------------------------------------
  1018                                  ;
  1019                                  ;       Constants
  1020                                  ;
  1021                                  ;-----------------------------------------------------------------------------------------------------------------------
  1022                                                          align   2
  1023                                  cwEntryLen              dw      32                                              ;length of directory entry
  1024                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1025                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1026                                  czErrorMsg              db      "Disk error "                                   ;error message
  1027                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1028                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1029                                  ;-----------------------------------------------------------------------------------------------------------------------
  1030                                  ;
  1031                                  ;       Work Areas
  1032                                  ;
  1033                                  ;-----------------------------------------------------------------------------------------------------------------------
  1034                                                          align   2
  1035                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1036                                  wwEntriesLeft           dw      0                                               ;directory entries to search
  1037                                  wwOverhead              dw      0                                               ;overhead sectors
  1038                                  wwSectorEntries         dw      0                                               ;directory entries per sector
  1039                                  wwLogicalSector         dw      0                                               ;current logical sector
  1040                                  wwReadCountCommand      equ     $                                               ;read count and command
  1041                                  wbReadCount             db      0                                               ;sectors to read
  1042                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1043                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1044                                  wbDrive                 db      0                                               ;drive
  1045                                  wbHead                  db      0                                               ;head
  1046                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1047                                                          db      0                                               ;sector
  1048                                  wbTrack                 db      0                                               ;track
  1049                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
  1050                                                          db      055h,0AAh                                       ;end of sector signature
  1051                                  %endif
  1052                                  %ifdef BUILDPREP
  1053                                  ;=======================================================================================================================
  1054                                  ;
  1055                                  ;       Diskette Preparation Code
  1056                                  ;
  1057                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1058                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1059                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1060                                  ;
  1061                                  ;=======================================================================================================================
  1062                                  ;
  1063                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1064                                  ;
  1065                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1066                                                          call    BootPrint                                       ;display message
  1067                                  ;
  1068                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1069                                  ;
  1070                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1071                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1072                                                          jnz     .20                                             ;continue if key pressed
  1073                                                          sti                                                     ;enable interrupts
  1074                                                          hlt                                                     ;wait for interrupt
  1075                                                          jmp     .10                                             ;repeat
  1076                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1077                                                          je      .30                                             ;yes, branch
  1078                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1079                                                          jne     .10                                             ;no, repeat
  1080                                                          jmp     .120                                            ;yes, exit program
  1081                                  ;
  1082                                  ;       Display writing-sector message and patch the JMP instruction.
  1083                                  ;
  1084                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1085                                                          call    BootPrint                                       ;display message
  1086                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1087                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1088                                                          mov     [bx],ax                                         ;update the JMP instruction
  1089                                  ;
  1090                                  ;       Try to read the boot sector.
  1091                                  ;
  1092                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1093                                  .40                     push    cx                                              ;save remaining tries
  1094                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1095                                                          mov     dx,0                                            ;head zero, drive zero
  1096                                                          mov     cx,1                                            ;track zero, sector one
  1097                                                          mov     al,1                                            ;one sector
  1098                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1099                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1100                                                          pop     cx                                              ;restore remaining retries
  1101                                                          jnc     .50                                             ;skip ahead if successful
  1102                                                          loop    .40                                             ;try again
  1103                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1104                                                          jmp     .70                                             ;branch to error routine
  1105                                  ;
  1106                                  ;       Copy diskette parms from input buffer to output buffer.
  1107                                  ;
  1108                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1109                                                          add     si,11                                           ;skip over JMP and system ID
  1110                                                          mov     di,Boot                                         ;output buffer address
  1111                                                          add     di,11                                           ;skip over JMP and system ID
  1112                                                          mov     cx,19                                           ;length of diskette parameters
  1113                                                          cld                                                     ;forward string copies
  1114                                                          rep     movsb                                           ;copy diskette parameters
  1115                                  ;
  1116                                  ;       Try to write boot sector to diskette.
  1117                                  ;
  1118                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1119                                  .60                     push    cx                                              ;save remaining tries
  1120                                                          mov     bx,Boot                                         ;output buffer address
  1121                                                          mov     dx,0                                            ;head zero, drive zero
  1122                                                          mov     cx,1                                            ;track zero, sector one
  1123                                                          mov     al,1                                            ;one sector
  1124                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1125                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1126                                                          pop     cx                                              ;restore remaining retries
  1127                                                          jnc     .100                                            ;skip ahead if successful
  1128                                                          loop    .60                                             ;try again
  1129                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1130                                  ;
  1131                                  ;       Convert the error code to ASCII and display the error message.
  1132                                  ;
  1133                                  .70                     push    ax                                              ;save error code
  1134                                                          mov     al,ah                                           ;copy error code
  1135                                                          mov     ah,0                                            ;AX = error code
  1136                                                          mov     dl,10h                                          ;hexadecimal divisor
  1137                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1138                                                          or      ax,03030h                                       ;add ASCII zone digits
  1139                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1140                                                          jb      .80                                             ;yes, continue
  1141                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1142                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1143                                                          jb      .90                                             ;yes, continue
  1144                                                          add     al,7                                            ;no, make ASCII
  1145                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1146                                                          call    BootPrint                                       ;write error message
  1147                                                          pop     ax                                              ;restore error code
  1148                                  ;
  1149                                  ;       Display the completion message.
  1150                                  ;
  1151                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1152                                                          mov     al,ah                                           ;BIOS return code
  1153                                                          cmp     al,0                                            ;success?
  1154                                                          je      .110                                            ;yes, continue
  1155                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1156                                                          cmp     al,1                                            ;disk parameter error?
  1157                                                          je      .110                                            ;yes, continue
  1158                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1159                                                          cmp     al,2                                            ;address mark not found?
  1160                                                          je      .110                                            ;yes, continue
  1161                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1162                                                          cmp     al,3                                            ;protected disk?
  1163                                                          je      .110                                            ;yes, continue
  1164                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1165                                                          cmp     al,6                                            ;diskette removed?
  1166                                                          je      .110                                            ;yes, continue
  1167                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1168                                                          cmp     al,80H                                          ;drive timed out?
  1169                                                          je      .110                                            ;yes, continue
  1170                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1171                                  .110                    call    BootPrint                                       ;display result message
  1172                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1173                                                          int     021h                                            ;terminate DOS program
  1174                                                          ret                                                     ;return (should not execute)
  1175                                  ;-----------------------------------------------------------------------------------------------------------------------
  1176                                  ;
  1177                                  ;       Diskette Preparation Messages
  1178                                  ;
  1179                                  ;-----------------------------------------------------------------------------------------------------------------------
  1180                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1181                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1182                                                          db      13,10
  1183                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1184                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1185                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1186                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1187                                                          db      13,10,0
  1188                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1189                                                          db      13,10,0
  1190                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1191                                                          db      13,10,0
  1192                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1193                                                          db      13,10,0
  1194                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1195                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1196                                                          db      13,10,0
  1197                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1198                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1199                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1200                                                          db      13,10,"and retry."
  1201                                                          db      13,10,0
  1202                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1203                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1204                                                          db      13,10,"using another diskette."
  1205                                                          db      13,10,0
  1206                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1207                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1208                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1209                                                          db      13,10,0
  1210                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1211                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1212                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1213                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1214                                                          db      13,10,"is properly inserted in the diskette drive."
  1215                                                          db      13,10,0
  1216                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1217                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1218                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1219                                                          db      13,10,0
  1220                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1221                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1222                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1223                                                          db      13,10,0
  1224                                  wcPrepInBuf             equ     $
  1225                                  %endif
  1226                                  %ifdef BUILDDISK
  1227                                  ;=======================================================================================================================
  1228                                  ;
  1229                                  ;       File Allocation Tables
  1230                                  ;
  1231                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1232                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1233                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1234                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1235                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1236                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1237                                  ;       the last cluster in the chain.
  1238                                  ;
  1239                                  ;       Every three bytes encode two FAT entries as follows:
  1240                                  ;
  1241                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1242                                  ;
  1243                                  ;=======================================================================================================================
  1244                                  ;-----------------------------------------------------------------------------------------------------------------------
  1245                                  ;
  1246                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1247                                  ;
  1248                                  ;-----------------------------------------------------------------------------------------------------------------------
  1249                                  section                 fat1                                                    ;first copy of FAT
  1250                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1251                                                          db      005h,060h,000h, 007h,080h,000h
  1252                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1253                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1254                                                          db      011h,020h,001h, 013h,040h,001h
  1255                                                          db      015h,060h,001h, 017h,080h,001h
  1256                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1257                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1258                                                          db      021h,020h,002h, 023h,040h,002h
  1259                                                          db      025h,060h,002h, 027h,080h,002h
  1260                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1261                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1262                                  ;-----------------------------------------------------------------------------------------------------------------------
  1263                                  ;
  1264                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1265                                  ;
  1266                                  ;-----------------------------------------------------------------------------------------------------------------------
  1267                                  section                 fat2                                                    ;second copy of FAT
  1268                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1269                                                          db      005h,060h,000h, 007h,080h,000h
  1270                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1271                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1272                                                          db      011h,020h,001h, 013h,040h,001h
  1273                                                          db      015h,060h,001h, 017h,080h,001h
  1274                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1275                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1276                                                          db      021h,020h,002h, 023h,040h,002h
  1277                                                          db      025h,060h,002h, 027h,080h,002h
  1278                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1279                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1280                                  ;-----------------------------------------------------------------------------------------------------------------------
  1281                                  ;
  1282                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1283                                  ;
  1284                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1285                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1286                                  ;       copy.
  1287                                  ;
  1288                                  ;-----------------------------------------------------------------------------------------------------------------------
  1289                                  section                 dir                                                     ;diskette directory
  1290                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1291                                                          db      020h                                            ;attribute (archive bit set)
  1292                                                          times   10 db 0                                         ;unused
  1293                                                          dw      0h                                              ;time
  1294                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1295                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1296                                                          dw      2                                               ;first cluster
  1297                                                          dd      05400h                                          ;file size
  1298                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1299                                  %endif
  1300                                  %ifdef BUILDCOM
  1301                                  ;=======================================================================================================================
  1302                                  ;
  1303                                  ;       OS.COM
  1304                                  ;
  1305                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1306                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1307                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1308                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1309                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1310                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1311                                  ;
  1312                                  ;       Our loader addressability is set up according to the following diagram.
  1313                                  ;
  1314                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1315                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1316                                  ;                               |  256 = 100h bytes                             |
  1317                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1318                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1319                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1320                                  ;                       007e00  +-----------------------------------------------+
  1321                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1322                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1323                                  ;                               |                                               |
  1324                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1325                                  ;                               |                                               |
  1326                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1327                                  ;                               |  Loader Code                                  |
  1328                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1329                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1330                                  ;
  1331                                  ;=======================================================================================================================
  1332                                  ;-----------------------------------------------------------------------------------------------------------------------
  1333                                  ;
  1334                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1335                                  ;
  1336                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1337                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1338                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1339                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1340                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1341                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1342                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1343                                  ;       registers.
  1344                                  ;
  1345                                  ;-----------------------------------------------------------------------------------------------------------------------
  1346                                                          cpu     8086                                            ;assume minimal CPU
  1347                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1348                                                          bits    16                                              ;this is 16-bit code
  1349 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1350 00000001 1F                                              pop     ds                                              ;...as our data segment
  1351 00000002 0E                                              push    cs                                              ;use the code segment
  1352 00000003 07                                              pop     es                                              ;...as our extra segment
  1353                                  ;
  1354                                  ;       Write a message to the console so we know we have our addressability established.
  1355                                  ;
  1356 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1357 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1358                                  ;
  1359                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1360                                  ;
  1361 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1362 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1363 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1364 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1365                                                          cpu     386                                             ;allow 80386 instructions
  1366 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1367 00000017 E89600                                          call    PutTTYString                                    ;display message
  1368                                  ;
  1369                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1370                                  ;
  1371 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1372 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1373 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1374 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1375 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1376 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1377 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1378 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1379 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1380 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1381                                  ;
  1382                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1383                                  ;
  1384 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1385 00000038 07                                              pop     es                                              ;... as target segment
  1386 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1387 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1388 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1389 00000041 FC                                              cld                                                     ;forward strings
  1390 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1391 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1392 00000047 E86600                                          call    PutTTYString                                    ;display message
  1393                                  ;
  1394                                  ;       Switch to protected mode.
  1395                                  ;
  1396 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1397 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1398 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1399 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1400 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1401 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1402 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1403 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1404 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1405 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1406 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1407                                  ;
  1408                                  ;       Enable hardware and maskable interrupts.
  1409                                  ;
  1410 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1411 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1412 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1413 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1414                                  ;
  1415                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1416                                  ;
  1417 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1418 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1419 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;       Routine:        LoaderExit
  1423                                  ;
  1424                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1425                                  ;
  1426                                  ;       In:             DS:SI   string address
  1427                                  ;
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1430                                  ;
  1431                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1432                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1433                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1434                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1435                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1436                                  ;
  1437 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1438 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1439 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1440 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1441 00000085 F4                                              hlt                                                     ;wait for interrupt
  1442 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1443                                  ;
  1444                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1445                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1446                                  ;       HLT until the system resets.
  1447                                  ;
  1448 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1449 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1450 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1451 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1452 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1453                                  ;-----------------------------------------------------------------------------------------------------------------------
  1454                                  ;
  1455                                  ;       Routine:        GetCPUType
  1456                                  ;
  1457                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1458                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1459                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1460                                  ;
  1461                                  ;       Out:            AX      0 = 808x, v20, etc.
  1462                                  ;                               1 = 80186
  1463                                  ;                               2 = 80286
  1464                                  ;                               3 = 80386
  1465                                  ;
  1466                                  ;-----------------------------------------------------------------------------------------------------------------------
  1467 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1468 00000092 B120                                            mov     cl,32                                           ;shift count
  1469 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1470 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1471 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1472                                                          cpu     186
  1473 0000009A 54                                              push    sp                                              ;save stack pointer
  1474 0000009B 59                                              pop     cx                                              ;...into cx
  1475 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1476 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1477                                                          cpu     286
  1478 000000A0 40                                              inc     ax                                              ;AX = 2
  1479 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1480 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1481 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1482 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1483 000000AE 40                                              inc     ax                                              ;AX = 3
  1484 000000AF C3                      .10                     ret                                                     ;return
  1485                                  ;-----------------------------------------------------------------------------------------------------------------------
  1486                                  ;
  1487                                  ;       Routine:        PutTTYString
  1488                                  ;
  1489                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1490                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1491                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1492                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1493                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1494                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1495                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1496                                  ;                       to LODSB is not needed.
  1497                                  ;
  1498                                  ;       In:             DS:SI   address of string
  1499                                  ;
  1500                                  ;       Out:            DF      0
  1501                                  ;                       ZF      1
  1502                                  ;                       AL      0
  1503                                  ;
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1506 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1507 000000B2 84C0                                            test    al,al                                           ;end of string?
  1508 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1509 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1510 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1511 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1512 000000BC C3                      .20                     ret                                                     ;return
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                  ;
  1515                                  ;       Loader Data
  1516                                  ;
  1517                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1518                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1519                                  ;
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521 000000BD 90                                              align   2
  1522 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1523 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1524 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1525 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1526 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1526 000000D1 74696E672073797374-
  1526 000000DA 656D20726571756972-
  1526 000000E3 657320616E20693338-
  1526 000000EC 36206F72206C617465-
  1526 000000F5 722070726F63657373-
  1526 000000FE 6F722E0D0A         
  1527 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1527 0000010C 65737320616E79206B-
  1527 00000115 657920746F20726573-
  1527 0000011E 746172742074686520-
  1527 00000127 636F6D70757465722E-
  1527 00000130 0D0A00             
  1528 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1529 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1529 00000145 7265640D0A00       
  1530 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1530 00000154 616465640D0A00     
  1531 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1531 00000164 4F530D0A00         
  1532 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1533                                  ;=======================================================================================================================
  1534                                  ;
  1535                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1536                                  ;
  1537                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1538                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1539                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1540                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1541                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1542                                  ;
  1543                                  ;=======================================================================================================================
  1544                                  ;=======================================================================================================================
  1545                                  ;
  1546                                  ;       Kernel Tables
  1547                                  ;
  1548                                  ;=======================================================================================================================
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  ;
  1551                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1552                                  ;
  1553                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1554                                  ;       first descriptor must be all nulls.
  1555                                  ;
  1556                                  ;       6   5         4         3         2         1         0
  1557                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1558                                  ;       ----------------------------------------------------------------
  1559                                  ;       h......hffffmmmma......ab......................bn..............n
  1560                                  ;       00000000                        all areas have base addresses below 2^24
  1561                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1562                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1563                                  ;                   1001                present, ring-0, selector
  1564                                  ;
  1565                                  ;       h...h   hi-order base address (bits 24-31)
  1566                                  ;       ffff    flags
  1567                                  ;       mmmm    hi-order limit (bits 16-19)
  1568                                  ;       a...a   access
  1569                                  ;       b...b   lo-order base address (bits 0-23)
  1570                                  ;       n...n   lo-order limit (bits 0-15)
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                  section                 gdt                                                     ;global descriptor table
  1574 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1575 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1576 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1577 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1578 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1579 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1580 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1581 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1582 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1583 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1584 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1585 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1586 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1587 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1588 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1589                                  ;-----------------------------------------------------------------------------------------------------------------------
  1590                                  ;
  1591                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1592                                  ;
  1593                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1594                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1595                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1596                                  ;
  1597                                  ;       6   5         4         3         2         1         0
  1598                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1599                                  ;       ----------------------------------------------------------------
  1600                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1601                                  ;
  1602                                  ;       h...h   high-order offset (bits 16-31)
  1603                                  ;       P       present (0=unused interrupt)
  1604                                  ;       zz      descriptor privilege level
  1605                                  ;       S       storage segment (must be zero for IDT)
  1606                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1607                                  ;       S...S   handling code selector in GDT
  1608                                  ;       l...l   lo-order offset (bits 0-15)
  1609                                  ;
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                  section                 idt                                                     ;interrupt descriptor table
  1612                                                          mint    dividebyzero                                    ;00 divide by zero
  1612                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1612 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1613                                                          mint    singlestep                                      ;01 single step
  1613                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1613 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1614                                                          mint    nmi                                             ;02 non-maskable
  1614                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1614 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1615                                                          mint    break                                           ;03 break
  1615                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1615 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1616                                                          mint    into                                            ;04 into
  1616                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1616 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1617                                                          mint    bounds                                          ;05 bounds
  1617                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1617 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1618                                                          mint    badopcode                                       ;06 bad op code
  1618                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1618 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1619                                                          mint    nocoproc                                        ;07 no coprocessor
  1619                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1619 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1620                                                          mint    doublefault                                     ;08 double-fault
  1620                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1620 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1621                                                          mint    operand                                         ;09 operand
  1621                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1621 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1622                                                          mint    badtss                                          ;0a bad TSS
  1622                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1622 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1623                                                          mint    notpresent                                      ;0b not-present
  1623                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1623 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1624                                                          mint    stacklimit                                      ;0c stack limit
  1624                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1624 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1625                                                          mint    protection                                      ;0d general protection fault
  1625                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1625 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1626                                                          mint    int14                                           ;0e (reserved)
  1626                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1626 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1627                                                          mint    int15                                           ;0f (reserved)
  1627                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1627 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1628                                                          mint    coproccalc                                      ;10 (reserved)
  1628                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1628 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1629                                                          mint    int17                                           ;11 (reserved)
  1629                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1629 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1630                                                          mint    int18                                           ;12 (reserved)
  1630                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1630 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1631                                                          mint    int19                                           ;13 (reserved)
  1631                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1631 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1632                                                          mint    int20                                           ;14 (reserved)
  1632                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1632 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1633                                                          mint    int21                                           ;15 (reserved)
  1633                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1633 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1634                                                          mint    int22                                           ;16 (reserved)
  1634                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1634 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1635                                                          mint    int23                                           ;17 (reserved)
  1635                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1635 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1636                                                          mint    int24                                           ;18 (reserved)
  1636                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1636 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1637                                                          mint    int25                                           ;19 (reserved)
  1637                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1637 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1638                                                          mint    int26                                           ;1a (reserved)
  1638                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1638 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1639                                                          mint    int27                                           ;1b (reserved)
  1639                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1639 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1640                                                          mint    int28                                           ;1c (reserved)
  1640                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1640 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1641                                                          mint    int29                                           ;1d (reserved)
  1641                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1641 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1642                                                          mint    int30                                           ;1e (reserved)
  1642                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1642 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1643                                                          mint    int31                                           ;1f (reserved)
  1643                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1643 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1644                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1644                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1644 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1645                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1645                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1645 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1646                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1646                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1646 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1647                                                          mtrap   com2                                            ;23 IRQ3 com2
  1647                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1647 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1648                                                          mtrap   com1                                            ;24 IRQ4 com1
  1648                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1648 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1649                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1649                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1649 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1650                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1650                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1650 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1651                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1651                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1651 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1652                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1652                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1652 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1653                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1653                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1653 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1654                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1654                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1654 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1655                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1655                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1655 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1656                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1656                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1656 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1657                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1657                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1657 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1658                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1658                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1658 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1659                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1659                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1659 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1660                                                          mtrap   svc                                             ;30 OS services
  1660                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1660 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1661 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1662                                  ;=======================================================================================================================
  1663                                  ;
  1664                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1665                                  ;
  1666                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1667                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1668                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1669                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1670                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1671                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1672                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1673                                  ;
  1674                                  ;=======================================================================================================================
  1675                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1676                                                          cpu     386                                             ;allow 80386 instructions
  1677                                                          bits    32                                              ;this is 32-bit code
  1678                                  ;=======================================================================================================================
  1679                                  ;
  1680                                  ;       CPU Interrupt Handlers
  1681                                  ;
  1682                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1683                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1684                                  ;
  1685                                  ;=======================================================================================================================
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT0    Divide By Zero
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  dividebyzero                                    ;divide by zero
  1691                              <1> ?%1 equ ($-$$)
  1692 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1693 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1694 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT1    Single Step
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  singlestep                                      ;single step
  1700                              <1> ?%1 equ ($-$$)
  1701 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1702 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1703 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT2    Non-Maskable Interrupt
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  nmi                                             ;non-maskable
  1709                              <1> ?%1 equ ($-$$)
  1710 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1711 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1712 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT3    Break
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  break                                           ;break
  1718                              <1> ?%1 equ ($-$$)
  1719 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1720 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1721 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT4    Into
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  into                                            ;into
  1727                              <1> ?%1 equ ($-$$)
  1728 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1729 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1730 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT5    Bounds
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  bounds                                          ;bounds
  1736                              <1> ?%1 equ ($-$$)
  1737 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1738 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1739 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT6    Bad Operation Code
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  badopcode                                       ;bad opcode interrupt
  1745                              <1> ?%1 equ ($-$$)
  1746 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1747 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1748 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT7    No Coprocessor
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1754                              <1> ?%1 equ ($-$$)
  1755 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1756 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1757 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT8    Double Fault
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  doublefault                                     ;doublefault interrupt
  1763                              <1> ?%1 equ ($-$$)
  1764 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1765 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1766 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT9    Operand
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  operand                                         ;operand interrupt
  1772                              <1> ?%1 equ ($-$$)
  1773 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1774 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1775 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT10   Bad Task State Segment
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  badtss                                          ;bad TSS interrupt
  1781                              <1> ?%1 equ ($-$$)
  1782 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1783 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1784 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT11   Not Present
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  notpresent                                      ;not present interrupt
  1790                              <1> ?%1 equ ($-$$)
  1791 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1792 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1793 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT12   Stack Limit
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  stacklimit                                      ;stack limit interrupt
  1799                              <1> ?%1 equ ($-$$)
  1800 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1801 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1802 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT13   General Protection Fault
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  protection                                      ;protection fault interrupt
  1808                              <1> ?%1 equ ($-$$)
  1809 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1810 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1811 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT14   Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  int14                                           ;(reserved)
  1817                              <1> ?%1 equ ($-$$)
  1818 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1819 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1820 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT15   Reserved
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  int15                                           ;(reserved)
  1826                              <1> ?%1 equ ($-$$)
  1827 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1828 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1829 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT16   Coprocessor Calculation
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  coproccalc                                      ;coprocessor calculation
  1835                              <1> ?%1 equ ($-$$)
  1836 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1837 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1838 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT17   Reserved
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  int17                                           ;(reserved)
  1844                              <1> ?%1 equ ($-$$)
  1845 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1846 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1847 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT18   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int18                                           ;(reserved)
  1853                              <1> ?%1 equ ($-$$)
  1854 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1855 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1856 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT19   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int19                                           ;(reserved)
  1862                              <1> ?%1 equ ($-$$)
  1863 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1864 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1865 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       INT20   Reserved
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                                          menter  int20                                           ;(reserved)
  1871                              <1> ?%1 equ ($-$$)
  1872 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1873 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1874 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       INT21   Reserved
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                                          menter  int21                                           ;(reserved)
  1880                              <1> ?%1 equ ($-$$)
  1881 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1882 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1883 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;       INT22   Reserved
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                                          menter  int22                                           ;(reserved)
  1889                              <1> ?%1 equ ($-$$)
  1890 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1891 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1892 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ;
  1895                                  ;       INT23   Reserved
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                                          menter  int23                                           ;(reserved)
  1898                              <1> ?%1 equ ($-$$)
  1899 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1900 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1901 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;       INT24   Reserved
  1905                                  ;
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                                          menter  int24                                           ;(reserved)
  1907                              <1> ?%1 equ ($-$$)
  1908 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1909 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1910 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  ;
  1913                                  ;       INT25   Reserved
  1914                                  ;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                                          menter  int25                                           ;(reserved)
  1916                              <1> ?%1 equ ($-$$)
  1917 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1918 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1919 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;       INT26   Reserved
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                                          menter  int26                                           ;(reserved)
  1925                              <1> ?%1 equ ($-$$)
  1926 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1927 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1928 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       INT27   Reserved
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  int27                                           ;(reserved)
  1934                              <1> ?%1 equ ($-$$)
  1935 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1936 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1937 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       INT28   Reserved
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  int28                                           ;(reserved)
  1943                              <1> ?%1 equ ($-$$)
  1944 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1945 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1946 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;       INT29   Reserved
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                                          menter  int29                                           ;(reserved)
  1952                              <1> ?%1 equ ($-$$)
  1953 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1954 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1955 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT30   Reserved
  1959                                  ;
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                                          menter  int30                                           ;(reserved)
  1961                              <1> ?%1 equ ($-$$)
  1962 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1963 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1964 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;       INT31   Reserved
  1968                                  ;
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                                          menter  int31                                           ;(reserved)
  1970                              <1> ?%1 equ ($-$$)
  1971 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1972 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1973 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  ;
  1976                                  ;       Routine:        ReportInterrupt
  1977                                  ;
  1978                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1979                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1980                                  ;
  1981                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1982                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1983                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1984                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1985                                  ;                       [esp+0]         error message address                   stored by push instructions
  1986                                  ;
  1987                                  ;       Out:            N/A             This routine does not exit.
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1991 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1992 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1993 00000156 89E5                                            mov     ebp,esp                                         ;ebp --> [EDI]
  1994                                  ;
  1995                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1996                                  ;
  1997                                  ;                       [ebp+56]        eflags
  1998                                  ;                       [ebp+52]        cs
  1999                                  ;                       [ebp+48]        eip
  2000                                  ;                       [ebp+44]        interrupt number (0-31)
  2001                                  ;                       [ebp+40]        error message address
  2002                                  ;                       [ebp+36]        ds
  2003                                  ;                       [ebp+32]        es
  2004                                  ;                       [ebp+28]        eax
  2005                                  ;                       [ebp+24]        ecx
  2006                                  ;                       [ebp+20]        edx
  2007                                  ;                       [ebp+16]        ebx
  2008                                  ;                       [ebp+12]        esp
  2009                                  ;                       [ebp+8]         ebp
  2010                                  ;                       [ebp+4]         esi
  2011                                  ;                       [ebp+0]         edi
  2012                                  ;
  2013 00000158 0E                                              push    cs                                              ;load code selector ...
  2014 00000159 1F                                              pop     ds                                              ;... into DS
  2015 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2016 0000015C 07                                              pop     es                                              ;... into ES
  2017                                  ;
  2018                                  ;       Display the interrupt report boundary box
  2019                                  ;
  2020 0000015D B10D                                            mov     cl,13                                           ;column
  2021 0000015F B506                                            mov     ch,6                                            ;row
  2022 00000161 B232                                            mov     dl,50                                           ;width
  2023 00000163 B608                                            mov     dh,8                                            ;height
  2024 00000165 B707                                            mov     bh,07h                                          ;attribute
  2025 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2026                                  ;
  2027                                  ;       Display the report header
  2028                                  ;
  2029 0000016C B10F                                            mov     cl,15                                           ;column
  2030 0000016E B507                                            mov     ch,7                                            ;row
  2031 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2032 00000175 E84F110000                                      call    SetConsoleString                                ;draw text string
  2033                                  ;
  2034                                  ;       Display the interrupt description label
  2035                                  ;
  2036 0000017A B10F                                            mov     cl,15                                           ;column
  2037 0000017C B508                                            mov     ch,8                                            ;row
  2038 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2039 00000183 E841110000                                      call    SetConsoleString                                ;draw text string
  2040                                  ;
  2041                                  ;       Display the interrupt number
  2042                                  ;
  2043 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2044 0000018B B11A                                            mov     cl,26                                           ;column
  2045 0000018D B508                                            mov     ch,8                                            ;row
  2046 0000018F E8DE0D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2047                                  ;
  2048                                  ;       Display the interrupt name
  2049                                  ;
  2050 00000194 B11D                                            mov     cl,29                                           ;column
  2051 00000196 B508                                            mov     ch,8                                            ;row
  2052 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2053 0000019B E829110000                                      call    SetConsoleString                                ;display interrupt description
  2054                                  ;
  2055                                  ;       Display the register values header
  2056                                  ;
  2057 000001A0 B10F                                            mov     cl,15                                           ;column
  2058 000001A2 B50A                                            mov     ch,10                                           ;row
  2059 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2060 000001A9 E81B110000                                      call    SetConsoleString                                ;draw text string
  2061                                  ;
  2062                                  ;       Display the EAX register label and value
  2063                                  ;
  2064 000001AE B10F                                            mov     cl,15                                           ;column
  2065 000001B0 B50B                                            mov     ch,11                                           ;row
  2066 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2067 000001B7 E80D110000                                      call    SetConsoleString                                ;draw label
  2068 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2069 000001BF B113                                            mov     cl,19                                           ;column
  2070 000001C1 B50B                                            mov     ch,11                                           ;row
  2071 000001C3 E8D00D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2072                                  ;
  2073                                  ;       Display the ECX register label and value
  2074                                  ;
  2075 000001C8 B10F                                            mov     cl,15                                           ;column
  2076 000001CA B50C                                            mov     ch,12                                           ;row
  2077 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2078 000001D1 E8F3100000                                      call    SetConsoleString                                ;draw label
  2079 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2080 000001D9 B113                                            mov     cl,19                                           ;column
  2081 000001DB B50C                                            mov     ch,12                                           ;row
  2082 000001DD E8B60D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2083                                  ;
  2084                                  ;       Display the EDX register label and value
  2085                                  ;
  2086 000001E2 B10F                                            mov     cl,15                                           ;column
  2087 000001E4 B50D                                            mov     ch,13                                           ;row
  2088 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2089 000001EB E8D9100000                                      call    SetConsoleString                                ;draw label
  2090 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2091 000001F3 B113                                            mov     cl,19                                           ;column
  2092 000001F5 B50D                                            mov     ch,13                                           ;row
  2093 000001F7 E89C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2094                                  ;
  2095                                  ;       Display the EBX register label and value
  2096                                  ;
  2097 000001FC B10F                                            mov     cl,15                                           ;column
  2098 000001FE B50E                                            mov     ch,14                                           ;row
  2099 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2100 00000205 E8BF100000                                      call    SetConsoleString                                ;draw label
  2101 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2102 0000020D B113                                            mov     cl,19                                           ;column
  2103 0000020F B50E                                            mov     ch,14                                           ;row
  2104 00000211 E8820D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2105                                  ;
  2106                                  ;       Display the ESI register label and value
  2107                                  ;
  2108 00000216 B11D                                            mov     cl,29                                           ;column
  2109 00000218 B50B                                            mov     ch,11                                           ;row
  2110 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2111 0000021F E8A5100000                                      call    SetConsoleString                                ;draw label
  2112 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2113 00000227 B121                                            mov     cl,33                                           ;column
  2114 00000229 B50B                                            mov     ch,11                                           ;row
  2115 0000022B E8680D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2116                                  ;
  2117                                  ;       Display the EDI register label and value
  2118                                  ;
  2119 00000230 B11D                                            mov     cl,29                                           ;column
  2120 00000232 B50C                                            mov     ch,12                                           ;row
  2121 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2122 00000239 E88B100000                                      call    SetConsoleString                                ;draw label
  2123 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2124 00000241 B121                                            mov     cl,33                                           ;column
  2125 00000243 B50C                                            mov     ch,12                                           ;row
  2126 00000245 E84E0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2127                                  ;
  2128                                  ;       Display the EBP register label and value
  2129                                  ;
  2130 0000024A B11D                                            mov     cl,29                                           ;column
  2131 0000024C B50D                                            mov     ch,13                                           ;row
  2132 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2133 00000253 E871100000                                      call    SetConsoleString                                ;draw label
  2134 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2135 0000025B B121                                            mov     cl,33                                           ;column
  2136 0000025D B50D                                            mov     ch,13                                           ;row
  2137 0000025F E8340D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2138                                  ;
  2139                                  ;       Display the DS register label and value
  2140                                  ;
  2141 00000264 B12A                                            mov     cl,42                                           ;column
  2142 00000266 B50B                                            mov     ch,11                                           ;row
  2143 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2144 0000026D E857100000                                      call    SetConsoleString                                ;draw label
  2145 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2146 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2147 00000278 B12E                                            mov     cl,46                                           ;column
  2148 0000027A B50B                                            mov     ch,11                                           ;row
  2149 0000027C E8270D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2150                                  ;
  2151                                  ;       Display the ES register label and value
  2152                                  ;
  2153 00000281 B12A                                            mov     cl,42                                           ;column
  2154 00000283 B50C                                            mov     ch,12                                           ;row
  2155 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2156 0000028A E83A100000                                      call    SetConsoleString                                ;draw label
  2157 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2158 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2159 00000295 B12E                                            mov     cl,46                                           ;column
  2160 00000297 B50C                                            mov     ch,12                                           ;row
  2161 00000299 E80A0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2162                                  ;
  2163                                  ;       Display the SS register label and value
  2164                                  ;
  2165 0000029E B12A                                            mov     cl,42                                           ;column
  2166 000002A0 B50D                                            mov     ch,13                                           ;row
  2167 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2168 000002A7 E81D100000                                      call    SetConsoleString                                ;draw label
  2169 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2170 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2171 000002B1 B12E                                            mov     cl,46                                           ;column
  2172 000002B3 B50D                                            mov     ch,13                                           ;row
  2173 000002B5 E8EE0C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2174                                  ;
  2175                                  ;       Display the CS register lable and value
  2176                                  ;
  2177 000002BA B12A                                            mov     cl,42                                           ;column
  2178 000002BC B50E                                            mov     ch,14                                           ;row
  2179 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2180 000002C3 E801100000                                      call    SetConsoleString                                ;draw label
  2181 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2182 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2183 000002CE B12E                                            mov     cl,46                                           ;column
  2184 000002D0 B50E                                            mov     ch,14                                           ;row
  2185 000002D2 E8D10C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2186                                  ;
  2187                                  ;       Display the EFLAGS register label and value
  2188                                  ;
  2189 000002D7 B133                                            mov     cl,51                                           ;column
  2190 000002D9 B50B                                            mov     ch,11                                           ;row
  2191 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2192 000002E0 E8E40F0000                                      call    SetConsoleString                                ;draw label
  2193 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2194 000002E8 B137                                            mov     cl,55                                           ;column
  2195 000002EA B50B                                            mov     ch,11                                           ;row
  2196 000002EC E8A70C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2197                                  ;
  2198                                  ;       Display the ESP register label and value
  2199                                  ;
  2200 000002F1 B133                                            mov     cl,51                                           ;column
  2201 000002F3 B50D                                            mov     ch,13                                           ;row
  2202 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2203 000002FA E8CA0F0000                                      call    SetConsoleString                                ;draw label
  2204 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2205 00000302 B137                                            mov     cl,55                                           ;column
  2206 00000304 B50D                                            mov     ch,13                                           ;row
  2207 00000306 E88D0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2208                                  ;
  2209                                  ;       Display the EIP register label and value
  2210                                  ;
  2211 0000030B B133                                            mov     cl,51                                           ;column
  2212 0000030D B50E                                            mov     ch,14                                           ;row
  2213 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2214 00000314 E8B00F0000                                      call    SetConsoleString                                ;draw label
  2215 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2216 0000031C B137                                            mov     cl,55                                           ;column
  2217 0000031E B50E                                            mov     ch,14                                           ;row
  2218 00000320 E8730C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2219                                  ;
  2220                                  ;       Halt and loop until reset
  2221                                  ;
  2222 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2223 00000326 F4                                              hlt                                                     ;halt processor
  2224 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2225                                  ;-----------------------------------------------------------------------------------------------------------------------
  2226                                  ;
  2227                                  ;       Processor Interrupt Name Strings
  2228                                  ;
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2230 00000332 6279207A65726F00   
  2231 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2231 00000343 657000             
  2232 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2232 0000034F 626C6520696E746572-
  2232 00000358 7275707400         
  2233 0000035D 427265616B00            czIntBreak              db      "Break",0
  2234 00000363 496E746F00              czIntInto               db      "Into",0
  2235 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2236 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2236 00000378 74696F6E20436F6465-
  2236 00000381 00                 
  2237 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2237 0000038B 6573736F7200       
  2238 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2238 0000039A 756C7400           
  2239 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2240 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2240 000003AF 537461746520536567-
  2240 000003B8 6D656E7400         
  2241 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2241 000003C6 6E7400             
  2242 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2242 000003D2 697400             
  2243 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2243 000003DE 726F74656374696F6E-
  2243 000003E7 204661756C7400     
  2244 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2244 000003F7 6F722043616C63756C-
  2244 00000400 6174696F6E00       
  2245 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  ;
  2248                                  ;       Processor Interrupt Handling Strings
  2249                                  ;
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2251 00000418 6C65642070726F6365-
  2251 00000421 73736F7220696E7465-
  2251 0000042A 727275707420686173-
  2251 00000433 206F63637572726564-
  2251 0000043C 3A00               
  2252 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2252 00000447 202300             
  2253 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2253 00000453 206174207468652074-
  2253 0000045C 696D65206F66207468-
  2253 00000465 6520696E7465727275-
  2253 0000046E 70743A00           
  2254 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2255 00000477 4543583A00              czIntECX                db      "ECX:",0
  2256 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2257 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2258 00000486 4553493A00              czIntESI                db      "ESI:",0
  2259 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2260 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2261 00000495 4553503A00              czIntESP                db      "ESP:",0
  2262 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2263 0000049F 2045533A00              czIntES                 db      " ES:",0
  2264 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2265 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2266 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2267 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269                                  ;
  2270                                  ;       Routine:        DrawTextDialogBox
  2271                                  ;
  2272                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2273                                  ;
  2274                                  ;       In:             CL      upper left column (0-79)
  2275                                  ;                       CH      upper left row (0-24)
  2276                                  ;                       DL      column width, excluding border
  2277                                  ;                       DH      row height, excluding border
  2278                                  ;                       BH      color attribute
  2279                                  ;
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2282 000004B9 56                                              push    esi                                             ;
  2283 000004BA 57                                              push    edi                                             ;
  2284 000004BB 06                                              push    es                                              ;
  2285 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2286 000004BE 07                                              pop     es                                              ;... into ES
  2287                                  ;
  2288                                  ;       Compute target display offset
  2289                                  ;
  2290 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2291 000004C1 88E8                                            mov     al,ch                                           ;row
  2292 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2293 000004C5 F6E4                                            mul     ah                                              ;row offset
  2294 000004C7 00C8                                            add     al,cl                                           ;add column
  2295 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2296 000004CC 00C8                                            add     al,cl                                           ;add column
  2297 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2298 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2299                                  ;
  2300                                  ;       Display top border row
  2301                                  ;
  2302 000004D3 57                                              push    edi                                             ;save target row offset
  2303 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2304 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2305 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2306 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2307 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2308 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2309 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2310 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2311 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2312 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2313 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2314                                  ;
  2315                                  ;       Display dialog box body rows
  2316                                  ;
  2317 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2318 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2319 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2320 000004F3 57                                              push    edi                                             ;save target row offset
  2321 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2322 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2323 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2324 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2325 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2326 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2327 00000500 F366AB                                          rep     stosw                                           ;display row
  2328 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2329 00000505 66AB                                            stosw                                                   ;display character and attribute
  2330 00000507 5F                                              pop     edi                                             ;restore target row offset
  2331 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2332 0000050E 59                                              pop     ecx                                             ;remaining rows
  2333 0000050F E2E1                                            loop    .10                                             ;next row
  2334                                  ;
  2335                                  ;       Display bottom border row
  2336                                  ;
  2337 00000511 57                                              push    edi                                             ;save target row offset
  2338 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2339 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2340 00000516 66AB                                            stosw                                                   ;display character and attribute
  2341 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2342 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2343 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2344 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2345 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2346 00000523 66AB                                            stosw                                                   ;display character and attribute
  2347 00000525 5F                                              pop     edi                                             ;restore target row offset
  2348 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2349                                  ;
  2350                                  ;       Restore and return
  2351                                  ;
  2352 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2353 0000052D 5F                                              pop     edi                                             ;
  2354 0000052E 5E                                              pop     esi                                             ;
  2355 0000052F 59                                              pop     ecx                                             ;
  2356 00000530 C3                                              ret                                                     ;return
  2357                                  ;=======================================================================================================================
  2358                                  ;
  2359                                  ;       Hardware Device Interupts
  2360                                  ;
  2361                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2362                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2363                                  ;       (BX=2028h).
  2364                                  ;
  2365                                  ;=======================================================================================================================
  2366                                  ;-----------------------------------------------------------------------------------------------------------------------
  2367                                  ;
  2368                                  ;       IRQ0    Clock Tick Interrupt
  2369                                  ;
  2370                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2371                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2372                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2373                                  ;
  2374                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2375                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2376                                  ;
  2377                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2378                                  ;       zero, the floppy disk motors are turned off.
  2379                                  ;
  2380                                  ;-----------------------------------------------------------------------------------------------------------------------
  2381                                                          menter  clocktick                                       ;clock tick interrupt
  2381                              <1> ?%1 equ ($-$$)
  2382 00000531 50                                              push    eax                                             ;save non-volatile regs
  2383 00000532 52                                              push    edx                                             ;
  2384 00000533 1E                                              push    ds                                              ;
  2385                                  ;
  2386                                  ;       Update the clock tick count and the elapsed days as needed.
  2387                                  ;
  2388 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2389 00000536 1F                                              pop     ds                                              ;... into data segment register
  2390 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2391 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2392 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2393 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2394 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2395 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2396 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2397                                  ;
  2398                                  ;       Decrement floppy disk motor timeout.
  2399                                  ;
  2400 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2401 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2402 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2403 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2404                                  ;
  2405                                  ;       Turn off the floppy disk motor if appropriate.
  2406                                  ;
  2407 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2408 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2409 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2410 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2411 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2412 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2413 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2414 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2415 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2416 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2417 00000577 EE                                              out     dx,al                                           ;turn motor off
  2418                                  ;
  2419                                  ;       Signal the end of the hardware interrupt.
  2420                                  ;
  2421 00000578 E8B10D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2422                                  ;
  2423                                  ;       Restore and return.
  2424                                  ;
  2425 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2426 0000057E 5A                                              pop     edx                                             ;
  2427 0000057F 58                                              pop     eax                                             ;
  2428 00000580 CF                                              iretd                                                   ;return
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430                                  ;
  2431                                  ;       IRQ1    Keyboard Interrupt
  2432                                  ;
  2433                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2434                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2435                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2436                                  ;       ALL modified registers upon return.
  2437                                  ;
  2438                                  ;-----------------------------------------------------------------------------------------------------------------------
  2439                                                          menter  keyboard                                        ;keyboard interrrupt
  2439                              <1> ?%1 equ ($-$$)
  2440 00000581 50                                              push    eax                                             ;save non-volatile regs
  2441 00000582 53                                              push    ebx                                             ;
  2442 00000583 51                                              push    ecx                                             ;
  2443 00000584 56                                              push    esi                                             ;
  2444 00000585 1E                                              push    ds                                              ;
  2445 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2446 00000588 1F                                              pop     ds                                              ;... into data segment register
  2447 00000589 30C0                                            xor     al,al                                           ;zero
  2448 0000058B A219080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2449 00000590 A21A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2450 00000595 A21B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2451 0000059A A21C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2452 0000059F A21D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2453 000005A4 A21E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2454 000005A9 B020                                            mov     al,' '                                          ;space
  2455 000005AB A21F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2456 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2457 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2458 000005B4 200518080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2459 000005BA 8A1D16080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2460 000005C0 8A3D17080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2461 000005C6 E8180E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2462 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2463 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2464 000005D3 A219080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2465 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2466 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2467 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2468 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2469 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2470 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2471 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2472 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2473 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2474 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2475 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2476 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2477 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2478 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2479 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2480 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2481 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2482 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2483 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2484 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2485 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2486 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2487 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2488 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2489 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2490 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2491 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2492 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2493 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2494 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2495 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2496 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2497 00000654 E88A0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2498 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2499 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2500 00000661 A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2501 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2502 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2503 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2504 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2505 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2506 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2507 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2508 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2509 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2510 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2511 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2512 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2513 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2514 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2515 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2516 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2517 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2518 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2519 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2520 0000069C E8420D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2521 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2522 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2523 000006A9 A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2524 000006AE E8300D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2525 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2526 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2527 000006BB A21C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2528 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2529 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2530 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2531 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2532 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2533 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2534 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2535 000006D1 E8DE0C0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2536 000006D6 881D16080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2537 000006DC 883D17080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2538 000006E2 E829090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2539 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2540 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2541 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2542 000006F1 E8ED0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2543 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2544 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2545 000006FE A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2546 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2547 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2548 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2549 0000070E E8D00C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2550 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2551 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2552 0000071B A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2553 00000720 E8BE0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2554 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2555 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2556 0000072D A21C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2557 00000732 E8AC0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2558 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2559 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2560 0000073F A21D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2561 00000744 E89A0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2562 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2563 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2564 0000074D A21E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2565 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2566 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2567 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2568 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2569 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2570 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2571 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2572 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2573 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2574 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2575 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2576 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2577 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2578 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2579 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2580 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2581 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2582 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2583 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2584 00000787 A21F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2585 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2586 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2587 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2588 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2589 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2590 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2591 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2592 000007A4 50                                              push    eax                                             ;save codes
  2593 000007A5 E87A0A0000                                      call    PutMessage                                      ;put message to console
  2594 000007AA 58                                              pop     eax                                             ;restore codes
  2595 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2596 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2597 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2598 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2599 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2600 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2601 000007BD E8620A0000                                      call    PutMessage                                      ;put message to console
  2602 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2603 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2604 000007C6 080518080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2605 000007CC E8E7070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2606 000007D1 E8580B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2607 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2608 000007D7 5E                                              pop     esi                                             ;
  2609 000007D8 59                                              pop     ecx                                             ;
  2610 000007D9 5B                                              pop     ebx                                             ;
  2611 000007DA 58                                              pop     eax                                             ;
  2612 000007DB CF                                              iretd                                                   ;return
  2613                                  ;-----------------------------------------------------------------------------------------------------------------------
  2614                                  ;       Scan-Code to ASCII Translation Tables
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2617 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2618 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2619 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2620 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2621 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2622 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2623 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2624 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2625 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2626 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2627 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2628 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2629 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2630 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2631 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2632 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2633 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2634 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2635 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2636 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2637 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2638 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2639 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2640 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2641 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2642 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2643 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2644 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2645 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2646 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2647 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                  ;
  2650                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2651                                  ;
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                                          menter  iochannel                                       ;secondary 8259A cascade
  2653                              <1> ?%1 equ ($-$$)
  2654 000008DC 50                                              push    eax                                             ;save modified regs
  2655 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2659                                  ;
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                                          menter  com2                                            ;serial port 2 interrupt
  2661                              <1> ?%1 equ ($-$$)
  2662 000008DF 50                                              push    eax                                             ;save modified regs
  2663 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  ;
  2666                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                                          menter  com1                                            ;serial port 1 interrupt
  2669                              <1> ?%1 equ ($-$$)
  2670 000008E2 50                                              push    eax                                             ;save modified regs
  2671 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                  ;
  2674                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2677                              <1> ?%1 equ ($-$$)
  2678 000008E5 50                                              push    eax                                             ;save modified regs
  2679 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                  ;
  2682                                  ;       IRQ6    Diskette Hardware Interrupt
  2683                                  ;
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                                          menter  diskette                                        ;floppy disk interrupt
  2685                              <1> ?%1 equ ($-$$)
  2686 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2687 000008E9 1E                                              push    ds                                              ;
  2688 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2689 000008EC 1F                                              pop     ds                                              ;... into DS register
  2690 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2691 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2692 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2693 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2694 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696                                  ;
  2697                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2698                                  ;
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2700                              <1> ?%1 equ ($-$$)
  2701 000008FC 50                                              push    eax                                             ;save modified regs
  2702 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2703                                  ;-----------------------------------------------------------------------------------------------------------------------
  2704                                  ;
  2705                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2706                                  ;
  2707                                  ;-----------------------------------------------------------------------------------------------------------------------
  2708                                                          menter  rtclock                                         ;real-time clock interrupt
  2708                              <1> ?%1 equ ($-$$)
  2709 000008FF 50                                              push    eax                                             ;save modified regs
  2710 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;
  2713                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2714                                  ;
  2715                                  ;-----------------------------------------------------------------------------------------------------------------------
  2716                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2716                              <1> ?%1 equ ($-$$)
  2717 00000902 50                                              push    eax                                             ;save modified regs
  2718 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                  ;
  2721                                  ;       IRQ10   Reserved Hardware Interrupt
  2722                                  ;
  2723                                  ;-----------------------------------------------------------------------------------------------------------------------
  2724                                                          menter  irq10                                           ;reserved
  2724                              <1> ?%1 equ ($-$$)
  2725 00000905 50                                              push    eax                                             ;save modified regs
  2726 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2727                                  ;-----------------------------------------------------------------------------------------------------------------------
  2728                                  ;
  2729                                  ;       IRQ11   Reserved Hardware Interrupt
  2730                                  ;
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                                          menter  irq11                                           ;reserved
  2732                              <1> ?%1 equ ($-$$)
  2733 00000908 50                                              push    eax                                             ;save modified regs
  2734 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                  ;
  2737                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2738                                  ;
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2740                              <1> ?%1 equ ($-$$)
  2741 0000090B 50                                              push    eax                                             ;save modified regs
  2742 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  ;
  2745                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2746                                  ;
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                                          menter  coprocessor                                     ;coprocessor interrupt
  2748                              <1> ?%1 equ ($-$$)
  2749 0000090E 50                                              push    eax                                             ;save modified regs
  2750 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                  ;
  2753                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2754                                  ;
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2756                              <1> ?%1 equ ($-$$)
  2757 00000911 50                                              push    eax                                             ;save modified regs
  2758 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                  ;
  2761                                  ;       IRQ15   Reserved Hardware Interrupt
  2762                                  ;
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                                          menter  irq15                                           ;reserved
  2764                              <1> ?%1 equ ($-$$)
  2765 00000914 50                                              push    eax                                             ;save modified regs
  2766 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                  ;
  2769                                  ;       Exit from hardware interrupt
  2770                                  ;
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772 00000917 E8180A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2773 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2774 0000091E E80B0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2775 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2776 00000924 CF                                              iretd                                                   ;return from interrupt
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                  ;
  2779                                  ;       INT 30h Operating System Software Service Interrupt
  2780                                  ;
  2781                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2782                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2783                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2784                                  ;       the entry address of the specific function from a table.
  2785                                  ;
  2786                                  ;-----------------------------------------------------------------------------------------------------------------------
  2787                                                          menter  svc
  2787                              <1> ?%1 equ ($-$$)
  2788 00000925 3C1D                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2789 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2790 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2791 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2792 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2793 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2794                                  ;-----------------------------------------------------------------------------------------------------------------------
  2795                                  ;
  2796                                  ;       Service Request Table
  2797                                  ;
  2798                                  ;
  2799                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2800                                  ;
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2802                              <1> tsvc :
  2802                              <1> e%1 equ ($-tsvc)/4
  2802 00000937 [D00B0000]          <1>  dd %1
  2803                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2803                              <1> e%1 equ ($-tsvc)/4
  2803 0000093B [4C120000]          <1>  dd %1
  2804                                                          tsvce   CompareMemory                                   ;compare memory
  2804                              <1> e%1 equ ($-tsvc)/4
  2804 0000093F [2B0E0000]          <1>  dd %1
  2805                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2805                              <1> e%1 equ ($-tsvc)/4
  2805 00000943 [DA100000]          <1>  dd %1
  2806                                                          tsvce   FreeMemory                                      ;free memory block
  2806                              <1> e%1 equ ($-tsvc)/4
  2806 00000947 [EE0C0000]          <1>  dd %1
  2807                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2807                              <1> e%1 equ ($-tsvc)/4
  2807 0000094B [D9120000]          <1>  dd %1
  2808                                                          tsvce   GetConsoleString                                ;get string input
  2808                              <1> e%1 equ ($-tsvc)/4
  2808 0000094F [8C0E0000]          <1>  dd %1
  2809                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2809                              <1> e%1 equ ($-tsvc)/4
  2809 00000953 [EA120000]          <1>  dd %1
  2810                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2810                              <1> e%1 equ ($-tsvc)/4
  2810 00000957 [FB120000]          <1>  dd %1
  2811                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2811                              <1> e%1 equ ($-tsvc)/4
  2811 0000095B [0D110000]          <1>  dd %1
  2812                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2812                              <1> e%1 equ ($-tsvc)/4
  2812 0000095F [B9090000]          <1>  dd %1
  2813                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2813                              <1> e%1 equ ($-tsvc)/4
  2813 00000963 [04130000]          <1>  dd %1
  2814                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2814                              <1> e%1 equ ($-tsvc)/4
  2814 00000967 [AA100000]          <1>  dd %1
  2815                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2815                              <1> e%1 equ ($-tsvc)/4
  2815 0000096B [D4090000]          <1>  dd %1
  2816                                                          tsvce   PutDayString                                    ;put DD string
  2816                              <1> e%1 equ ($-tsvc)/4
  2816 0000096F [150A0000]          <1>  dd %1
  2817                                                          tsvce   PutHourString                                   ;put hh string
  2817                              <1> e%1 equ ($-tsvc)/4
  2817 00000973 [230A0000]          <1>  dd %1
  2818                                                          tsvce   PutMinuteString                                 ;put mm string
  2818                              <1> e%1 equ ($-tsvc)/4
  2818 00000977 [310A0000]          <1>  dd %1
  2819                                                          tsvce   PutMonthString                                  ;put MM string
  2819                              <1> e%1 equ ($-tsvc)/4
  2819 0000097B [3F0A0000]          <1>  dd %1
  2820                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2820                              <1> e%1 equ ($-tsvc)/4
  2820 0000097F [4D0A0000]          <1>  dd %1
  2821                                                          tsvce   PutSecondString                                 ;put ss string
  2821                              <1> e%1 equ ($-tsvc)/4
  2821 00000983 [710A0000]          <1>  dd %1
  2822                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2822                              <1> e%1 equ ($-tsvc)/4
  2822 00000987 [7E0A0000]          <1>  dd %1
  2823                                                          tsvce   PutWeekdayString                                ;put weekday string
  2823                              <1> e%1 equ ($-tsvc)/4
  2823 0000098B [B30A0000]          <1>  dd %1
  2824                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2824                              <1> e%1 equ ($-tsvc)/4
  2824 0000098F [C10A0000]          <1>  dd %1
  2825                                                          tsvce   PutYearString                                   ;put YYYY string
  2825                              <1> e%1 equ ($-tsvc)/4
  2825 00000993 [E40A0000]          <1>  dd %1
  2826                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2826                              <1> e%1 equ ($-tsvc)/4
  2826 00000997 [3A130000]          <1>  dd %1
  2827                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2827                              <1> e%1 equ ($-tsvc)/4
  2827 0000099B [A5130000]          <1>  dd %1
  2828                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2828                              <1> e%1 equ ($-tsvc)/4
  2828 0000099F [2B110000]          <1>  dd %1
  2829                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2829                              <1> e%1 equ ($-tsvc)/4
  2829 000009A3 [CF110000]          <1>  dd %1
  2830                                                          tsvce   UpperCaseString                                 ;upper-case string
  2830                              <1> e%1 equ ($-tsvc)/4
  2830 000009A7 [480E0000]          <1>  dd %1
  2831                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833                                  ;
  2834                                  ;       Service Request Macros
  2835                                  ;
  2836                                  ;       These macros provide positional parameterization of service request calls.
  2837                                  ;
  2838                                  ;-----------------------------------------------------------------------------------------------------------------------
  2839                                  %macro                  allocateMemory 1
  2840                                                          mov     ecx,%1                                          ;bytes to allocate
  2841                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2842                                                          int     _svc                                            ;invoke OS service
  2843                                  %endmacro
  2844                                  %macro                  clearConsoleScreen 0
  2845                                                          mov     al,eClearConsoleScreen                          ;function code
  2846                                                          int     _svc                                            ;invoke OS service
  2847                                  %endmacro
  2848                                  %macro                  compareMemory 0
  2849                                                          mov     al,eCompareMemory                               ;function code
  2850                                                          int     _svc                                            ;invoke OS service
  2851                                  %endmacro
  2852                                  %macro                  decimalToUnsigned 0
  2853                                                          mov     al,eDecimalToUnsigned                           ;function code
  2854                                                          int     _svc                                            ;invoke OS servie
  2855                                  %endmacro
  2856                                  %macro                  freeMemory 1
  2857                                                          mov     edx,%1                                          ;address of memory block
  2858                                                          mov     al,eFreeMemory                                  ;function code
  2859                                                          int     _svc                                            ;invoke OS service
  2860                                  %endmacro
  2861                                  %macro                  getBaseMemSize 0
  2862                                                          mov     al,eGetBaseMemSize                              ;function code
  2863                                                          int     _svc                                            ;invoke OS service
  2864                                  %endmacro
  2865                                  %macro                  getConsoleString 4
  2866                                                          mov     edx,%1                                          ;buffer address
  2867                                                          mov     ecx,%2                                          ;max characters
  2868                                                          mov     bh,%3                                           ;echo indicator
  2869                                                          mov     bl,%4                                           ;terminator
  2870                                                          mov     al,eGetConsoleString                            ;function code
  2871                                                          int     _svc                                            ;invoke OS service
  2872                                  %endmacro
  2873                                  %macro                  getExtendedMemSize 0
  2874                                                          mov     al,eGetExtendedMemSize                          ;function code
  2875                                                          int     _svc                                            ;invoke OS service
  2876                                  %endmacro
  2877                                  %macro                  getROMMemSize 0
  2878                                                          mov     al,eGetROMMemSize                               ;function code
  2879                                                          int     _svc                                            ;invoke OS service
  2880                                  %endmacro
  2881                                  %macro                  hexadecimalToUnsigned 0
  2882                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2883                                                          int     _svc                                            ;invoke OS service
  2884                                  %endmacro
  2885                                  %macro                  isLeapYear 1
  2886                                                          mov     ebx,%1                                          ;DATETIME addr
  2887                                                          mov     al,eIsLeapYear                                  ;function code
  2888                                                          int     _svc                                            ;invoke OS service
  2889                                  %endmacro
  2890                                  %macro                  placeCursor 0
  2891                                                          mov     al,ePlaceCursor                                 ;function code
  2892                                                          int     _svc                                            ;invoke OS service
  2893                                  %endmacro
  2894                                  %macro                  putConsoleString 1
  2895                                                          mov     edx,%1                                          ;string address
  2896                                                          mov     al,ePutConsoleString                            ;function code
  2897                                                          int     _svc                                            ;invoke OS service
  2898                                  %endmacro
  2899                                  %macro                  putDateString 0
  2900                                                          mov     al,ePutDateString                               ;function code
  2901                                                          int     _svc                                            ;invoke OS service
  2902                                  %endmacro
  2903                                  %macro                  putDateString 2
  2904                                                          mov     ebx,%1                                          ;DATETIME addr
  2905                                                          mov     edx,%2                                          ;output buffer addr
  2906                                                          mov     al,ePutDateString                               ;function code
  2907                                                          int     _svc                                            ;invoke OS service
  2908                                  %endmacro
  2909                                  %macro                  putDayString 2
  2910                                                          mov     ebx,%1                                          ;DATETIME addr
  2911                                                          mov     edx,%2                                          ;output buffer addr
  2912                                                          mov     al,ePutDayString                                ;function code
  2913                                                          int     _svc                                            ;invoke OS service
  2914                                  %endmacro
  2915                                  %macro                  putHourString 2
  2916                                                          mov     ebx,%1                                          ;DATETIME addr
  2917                                                          mov     edx,%2                                          ;output buffer addr
  2918                                                          mov     al,ePutHourString                               ;function code
  2919                                                          int     _svc                                            ;invoke OS service
  2920                                  %endmacro
  2921                                  %macro                  putMinuteString 2
  2922                                                          mov     ebx,%1                                          ;DATETIME addr
  2923                                                          mov     edx,%2                                          ;output buffer addr
  2924                                                          mov     al,ePutMinuteString                             ;function code
  2925                                                          int     _svc                                            ;invoke OS service
  2926                                  %endmacro
  2927                                  %macro                  putMonthString 2
  2928                                                          mov     ebx,%1                                          ;DATETIME addr
  2929                                                          mov     edx,%2                                          ;output buffer addr
  2930                                                          mov     al,ePutMonthString                              ;function code
  2931                                                          int     _svc                                            ;invoke OS service
  2932                                  %endmacro
  2933                                  %macro                  putMonthNameString 2
  2934                                                          mov     ebx,%1                                          ;DATETIME addr
  2935                                                          mov     edx,%2                                          ;output buffer addr
  2936                                                          mov     al,ePutMonthNameString                          ;function code
  2937                                                          int     _svc                                            ;invoke OS service
  2938                                  %endmacro
  2939                                  %macro                  putSecondString 2
  2940                                                          mov     ebx,%1                                          ;DATETIME addr
  2941                                                          mov     edx,%2                                          ;output buffer addr
  2942                                                          mov     al,ePutSecondString                             ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  putTimeString 0
  2946                                                          mov     al,ePutTimeString                               ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  putTimeString 2
  2950                                                          mov     ebx,%1                                          ;DATETIME addr
  2951                                                          mov     edx,%2                                          ;output buffer addr
  2952                                                          mov     al,ePutTimeString                               ;function code
  2953                                                          int     _svc                                            ;invoke OS service
  2954                                  %endmacro
  2955                                  %macro                  putWeekdayString 2
  2956                                                          mov     ebx,%1                                          ;DATETIME addr
  2957                                                          mov     edx,%2                                          ;output buffer addr
  2958                                                          mov     al,ePutWeekdayString                            ;function code
  2959                                                          int     _svc                                            ;invoke OS service
  2960                                  %endmacro
  2961                                  %macro                  putWeekdayNameString 2
  2962                                                          mov     ebx,%1                                          ;DATETIME addr
  2963                                                          mov     edx,%2                                          ;output buffer addr
  2964                                                          mov     al,ePutWeekdayNameString                        ;function code
  2965                                                          int     _svc                                            ;invoke OS service
  2966                                  %endmacro
  2967                                  %macro                  putYearString 2
  2968                                                          mov     ebx,%1                                          ;DATETIME addr
  2969                                                          mov     edx,%2                                          ;output buffer addr
  2970                                                          mov     al,ePutYearString                               ;function code
  2971                                                          int     _svc                                            ;invoke OS service
  2972                                  %endmacro
  2973                                  %macro                  readRealTimeClock 0
  2974                                                          mov     al,eReadRealTimeClock                           ;function code
  2975                                                          int     _svc                                            ;invoke OS service
  2976                                  %endmacro
  2977                                  %macro                  readRealTimeClock 1
  2978                                                          mov     ebx,%1                                          ;DATETIME addr
  2979                                                          mov     al,eReadRealTimeClock                           ;function code
  2980                                                          int     _svc                                            ;invoke OS service
  2981                                  %endmacro
  2982                                  %macro                  resetSystem 0
  2983                                                          mov     al,eResetSystem                                 ;function code
  2984                                                          int     _svc                                            ;invoke OS service
  2985                                  %endmacro
  2986                                  %macro                  unsignedToDecimalString 0
  2987                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2988                                                          int     _svc                                            ;invoke OS service
  2989                                  %endmacro
  2990                                  %macro                  unsignedToHexadecimal 0
  2991                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2992                                                          int     _svc                                            ;invoke OS service
  2993                                  %endmacro
  2994                                  %macro                  upperCaseString 0
  2995                                                          mov     al,eUpperCaseString                             ;function code
  2996                                                          int     _svc                                            ;invoke OS service
  2997                                  %endmacro
  2998                                  ;=======================================================================================================================
  2999                                  ;
  3000                                  ;       Kernel Function Library
  3001                                  ;
  3002                                  ;=======================================================================================================================
  3003                                  ;=======================================================================================================================
  3004                                  ;
  3005                                  ;       Date and Time Helper Routines
  3006                                  ;
  3007                                  ;       GetYear
  3008                                  ;       IsLeapYear
  3009                                  ;       PutDateString
  3010                                  ;       PutDayString
  3011                                  ;       PutHourString
  3012                                  ;       PutMinuteString
  3013                                  ;       PutMonthString
  3014                                  ;       PutMonthNameString
  3015                                  ;       PutSecondString
  3016                                  ;       PutTimeString
  3017                                  ;       PutWeekdayString
  3018                                  ;       PutWeekdayNameString
  3019                                  ;       PutYearString
  3020                                  ;
  3021                                  ;=======================================================================================================================
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ;
  3024                                  ;       Routine:        GetYear
  3025                                  ;
  3026                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3027                                  ;
  3028                                  ;       In:             DS:EBX  DATETIME address
  3029                                  ;
  3030                                  ;       Out:            ECX     year
  3031                                  ;
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033 000009AB 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3034 000009AF 6BC964                                          imul    ecx,100                                         ;century * 100
  3035 000009B2 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3036 000009B6 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3037 000009B8 C3                                              ret                                                     ;return
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039                                  ;
  3040                                  ;       Routine:        IsLeapYear
  3041                                  ;
  3042                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3043                                  ;
  3044                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3045                                  ;
  3046                                  ;       Out:            ECX     0 = not a leap year
  3047                                  ;                               1 = leap year
  3048                                  ;
  3049                                  ;-----------------------------------------------------------------------------------------------------------------------
  3050 000009B9 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3051 000009BE 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3052 000009C0 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3053 000009C2 A803                                            test    al,00000011b                                    ;multiple of four?
  3054 000009C4 750D                                            jnz     .no                                             ;no, branch
  3055 000009C6 B264                                            mov     dl,100                                          ;divisor
  3056 000009C8 F6F2                                            div     dl                                              ;divide by 100
  3057 000009CA 84E4                                            test    ah,ah                                           ;multiple of 100?
  3058 000009CC 7504                                            jnz     .yes                                            ;yes, branch
  3059 000009CE A803                                            test    al,00000011b                                    ;multiple of 400?
  3060 000009D0 7501                                            jnz     .no                                             ;no, branch
  3061 000009D2 41                      .yes                    inc     ecx                                             ;indicate leap
  3062 000009D3 C3                      .no                     ret                                                     ;return
  3063                                  ;-----------------------------------------------------------------------------------------------------------------------
  3064                                  ;
  3065                                  ;       Routine:        PutDateString
  3066                                  ;
  3067                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3068                                  ;                       structure at ds:ebx.
  3069                                  ;
  3070                                  ;       In:             DS:EBX  DATETIME address
  3071                                  ;                       DS:EDX  output buffer address
  3072                                  ;
  3073                                  ;-----------------------------------------------------------------------------------------------------------------------
  3074 000009D4 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3075 000009D5 57                                              push    edi                                             ;
  3076 000009D6 06                                              push    es                                              ;
  3077 000009D7 1E                                              push    ds                                              ;store data selector ...
  3078 000009D8 07                                              pop     es                                              ;... in extra segment reg
  3079 000009D9 89D7                                            mov     edi,edx                                         ;output buffer address
  3080 000009DB B10A                                            mov     cl,10                                           ;divisor
  3081 000009DD BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3082 000009E2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3083 000009E6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3084 000009E8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3085 000009EA FC                                              cld                                                     ;forward strings
  3086 000009EB AB                                              stosd                                                   ;store "mm/"nul
  3087 000009EC 4F                                              dec     edi                                             ;address of terminator
  3088 000009ED 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3089 000009F1 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3090 000009F3 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3091 000009F5 AB                                              stosd                                                   ;store "dd/"nul
  3092 000009F6 4F                                              dec     edi                                             ;address of terminator
  3093 000009F7 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3094 000009FB F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3095 000009FD 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3096 000009FF AB                                              stosd                                                   ;store "cc/"null
  3097 00000A00 4F                                              dec     edi                                             ;address of terminator
  3098 00000A01 4F                                              dec     edi                                             ;address of delimiter
  3099 00000A02 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3100 00000A06 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3101 00000A08 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3102 00000A0A AA                                              stosb                                                   ;store quotient
  3103 00000A0B 88E0                                            mov     al,ah                                           ;remainder
  3104 00000A0D AA                                              stosb                                                   ;store remainder
  3105 00000A0E 30C0                                            xor     al,al                                           ;null terminator
  3106 00000A10 AA                                              stosb                                                   ;store terminator
  3107 00000A11 07                                              pop     es                                              ;restore non-volatile regs
  3108 00000A12 5F                                              pop     edi                                             ;
  3109 00000A13 59                                              pop     ecx                                             ;
  3110 00000A14 C3                                              ret                                                     ;return
  3111                                  ;-----------------------------------------------------------------------------------------------------------------------
  3112                                  ;
  3113                                  ;       Routine:        PutDayString
  3114                                  ;
  3115                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3116                                  ;                       structure at ds:ebx.
  3117                                  ;
  3118                                  ;       In:             DS:EBX  DATETIME address
  3119                                  ;                       DS:EDX  output buffer address
  3120                                  ;
  3121                                  ;-----------------------------------------------------------------------------------------------------------------------
  3122 00000A15 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3123 00000A16 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3124 00000A1A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3125 00000A1C E80A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3126 00000A21 59                                              pop     ecx                                             ;
  3127 00000A22 C3                                              ret                                                     ;return
  3128                                  ;-----------------------------------------------------------------------------------------------------------------------
  3129                                  ;
  3130                                  ;       Routine:        PutHourString
  3131                                  ;
  3132                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3133                                  ;                       structure at ds:ebx.
  3134                                  ;
  3135                                  ;       In:             DS:EBX  DATETIME address
  3136                                  ;                       DS:EDX  output buffer address
  3137                                  ;
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139 00000A23 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3140 00000A24 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3141 00000A28 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3142 00000A2A E8FC060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3143 00000A2F 59                                              pop     ecx                                             ;
  3144 00000A30 C3                                              ret                                                     ;return
  3145                                  ;-----------------------------------------------------------------------------------------------------------------------
  3146                                  ;
  3147                                  ;       Routine:        PutMinuteString
  3148                                  ;
  3149                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3150                                  ;                       structure at ds:ebx.
  3151                                  ;
  3152                                  ;       In:             DS:EBX  DATETIME address
  3153                                  ;                       DS:EDX  output buffer address
  3154                                  ;
  3155                                  ;-----------------------------------------------------------------------------------------------------------------------
  3156 00000A31 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3157 00000A32 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3158 00000A36 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3159 00000A38 E8EE060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3160 00000A3D 59                                              pop     ecx                                             ;
  3161 00000A3E C3                                              ret                                                     ;return
  3162                                  ;-----------------------------------------------------------------------------------------------------------------------
  3163                                  ;
  3164                                  ;       Routine:        PutMonthString
  3165                                  ;
  3166                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3167                                  ;                       structure at ds:ebx.
  3168                                  ;
  3169                                  ;       In:             DS:EBX  DATETIME address
  3170                                  ;                       DS:EDX  output buffer address
  3171                                  ;
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173 00000A3F 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3174 00000A40 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3175 00000A44 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3176 00000A46 E8E0060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3177 00000A4B 59                                              pop     ecx                                             ;
  3178 00000A4C C3                                              ret                                                     ;return
  3179                                  ;-----------------------------------------------------------------------------------------------------------------------
  3180                                  ;
  3181                                  ;       Routine:        PutMonthNameString
  3182                                  ;
  3183                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3184                                  ;                       structure at ds:ebx.
  3185                                  ;
  3186                                  ;       In:             DS:EBX  DATETIME address
  3187                                  ;                       DS:EDX  output buffer address
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190 00000A4D 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3191 00000A4E 57                                              push    edi                                             ;
  3192 00000A4F 1E                                              push    ds                                              ;
  3193 00000A50 06                                              push    es                                              ;
  3194 00000A51 1E                                              push    ds                                              ;load data selector ...
  3195 00000A52 07                                              pop     es                                              ;... into extra segment
  3196 00000A53 89D7                                            mov     edi,edx                                         ;output buffer address
  3197 00000A55 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3198 00000A59 48                                              dec     eax                                             ;month (0-11)
  3199 00000A5A C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3200 00000A5D 0E                                              push    cs                                              ;load code selector ...
  3201 00000A5E 1F                                              pop     ds                                              ;... into data segment
  3202 00000A5F 8BB0[A00B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3203 00000A65 FC                                              cld                                                     ;forward strings
  3204 00000A66 AC                      .10                     lodsb                                                   ;name character
  3205 00000A67 AA                                              stosb                                                   ;store in output buffer
  3206 00000A68 84C0                                            test    al,al                                           ;end of string?
  3207 00000A6A 75FA                                            jnz     .10                                             ;no, continue
  3208 00000A6C 07                                              pop     es                                              ;restore non-volatile regs
  3209 00000A6D 1F                                              pop     ds                                              ;
  3210 00000A6E 5F                                              pop     edi                                             ;
  3211 00000A6F 5E                                              pop     esi                                             ;
  3212 00000A70 C3                                              ret                                                     ;return
  3213                                  ;-----------------------------------------------------------------------------------------------------------------------
  3214                                  ;
  3215                                  ;       Routine:        PutSecondString
  3216                                  ;
  3217                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3218                                  ;                       structure at ds:ebx.
  3219                                  ;
  3220                                  ;       In:             DS:EBX  DATETIME address
  3221                                  ;                       DS:EDX  output buffer address
  3222                                  ;
  3223                                  ;-----------------------------------------------------------------------------------------------------------------------
  3224 00000A71 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3225 00000A72 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3226 00000A75 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3227 00000A77 E8AF060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3228 00000A7C 59                                              pop     ecx                                             ;
  3229 00000A7D C3                                              ret                                                     ;return
  3230                                  ;-----------------------------------------------------------------------------------------------------------------------
  3231                                  ;
  3232                                  ;       Routine:        PutTimeString
  3233                                  ;
  3234                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3235                                  ;                       structure at ds:ebx.
  3236                                  ;
  3237                                  ;       In:             DS:EBX  DATETIME address
  3238                                  ;                       DS:EDX  output buffer address
  3239                                  ;
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241 00000A7E 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3242 00000A7F 57                                              push    edi                                             ;
  3243 00000A80 06                                              push    es                                              ;
  3244 00000A81 1E                                              push    ds                                              ;store data selector ...
  3245 00000A82 07                                              pop     es                                              ;... in extra segment reg
  3246 00000A83 89D7                                            mov     edi,edx                                         ;output buffer address
  3247 00000A85 B10A                                            mov     cl,10                                           ;divisor
  3248 00000A87 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3249 00000A8C 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3250 00000A90 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3251 00000A92 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3252 00000A94 FC                                              cld                                                     ;forward strings
  3253 00000A95 AB                                              stosd                                                   ;store "mm/"nul
  3254 00000A96 4F                                              dec     edi                                             ;address of terminator
  3255 00000A97 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3256 00000A9B F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3257 00000A9D 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3258 00000A9F AB                                              stosd                                                   ;store "dd/"nul
  3259 00000AA0 4F                                              dec     edi                                             ;address of terminator
  3260 00000AA1 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3261 00000AA4 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3262 00000AA6 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3263 00000AA8 AA                                              stosb                                                   ;store quotient
  3264 00000AA9 88E0                                            mov     al,ah                                           ;remainder
  3265 00000AAB AA                                              stosb                                                   ;store remainder
  3266 00000AAC 30C0                                            xor     al,al                                           ;null terminator
  3267 00000AAE AA                                              stosb                                                   ;store terminator
  3268 00000AAF 07                                              pop     es                                              ;restore non-volatile regs
  3269 00000AB0 5F                                              pop     edi                                             ;
  3270 00000AB1 59                                              pop     ecx                                             ;
  3271 00000AB2 C3                                              ret                                                     ;return
  3272                                  ;-----------------------------------------------------------------------------------------------------------------------
  3273                                  ;
  3274                                  ;       Routine:        PutWeekdayString
  3275                                  ;
  3276                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3277                                  ;                       structure at ds:ebx.
  3278                                  ;
  3279                                  ;       In:             DS:EBX  DATETIME address
  3280                                  ;                       DS:EDX  output buffer address
  3281                                  ;
  3282                                  ;-----------------------------------------------------------------------------------------------------------------------
  3283 00000AB3 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3284 00000AB4 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3285 00000AB8 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3286 00000ABA E86C060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3287 00000ABF 59                                              pop     ecx                                             ;
  3288 00000AC0 C3                                              ret                                                     ;return
  3289                                  ;-----------------------------------------------------------------------------------------------------------------------
  3290                                  ;
  3291                                  ;       Routine:        PutWeekdayNameString
  3292                                  ;
  3293                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3294                                  ;                       structure at ds:ebx.
  3295                                  ;
  3296                                  ;       In:             DS:EBX  DATETIME address
  3297                                  ;                       DS:EDX  output buffer address
  3298                                  ;
  3299                                  ;-----------------------------------------------------------------------------------------------------------------------
  3300 00000AC1 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3301 00000AC2 57                                              push    edi                                             ;
  3302 00000AC3 1E                                              push    ds                                              ;
  3303 00000AC4 06                                              push    es                                              ;
  3304 00000AC5 1E                                              push    ds                                              ;load data selector ...
  3305 00000AC6 07                                              pop     es                                              ;... into extra segment
  3306 00000AC7 89D7                                            mov     edi,edx                                         ;output buffer address
  3307 00000AC9 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3308 00000ACD C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3309 00000AD0 0E                                              push    cs                                              ;load code selector ...
  3310 00000AD1 1F                                              pop     ds                                              ;... into data segment
  3311 00000AD2 8BB0[840B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3312 00000AD8 FC                                              cld                                                     ;forward strings
  3313 00000AD9 AC                      .10                     lodsb                                                   ;name character
  3314 00000ADA AA                                              stosb                                                   ;store in output buffer
  3315 00000ADB 84C0                                            test    al,al                                           ;end of string?
  3316 00000ADD 75FA                                            jnz     .10                                             ;no, continue
  3317 00000ADF 07                                              pop     es                                              ;restore non-volatile regs
  3318 00000AE0 1F                                              pop     ds                                              ;
  3319 00000AE1 5F                                              pop     edi                                             ;
  3320 00000AE2 5E                                              pop     esi                                             ;
  3321 00000AE3 C3                                              ret                                                     ;return
  3322                                  ;-----------------------------------------------------------------------------------------------------------------------
  3323                                  ;
  3324                                  ;       Routine:        PutYearString
  3325                                  ;
  3326                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3327                                  ;                       structure at ds:ebx.
  3328                                  ;
  3329                                  ;       In:             DS:EBX  DATETIME address
  3330                                  ;                       DS:EDX  output buffer address
  3331                                  ;
  3332                                  ;-----------------------------------------------------------------------------------------------------------------------
  3333 00000AE4 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3334 00000AE5 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3335 00000AEA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3336 00000AEC E83A060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3337 00000AF1 59                                              pop     ecx                                             ;restore non-volatile regs
  3338 00000AF2 C3                                              ret                                                     ;return
  3339                                  ;-----------------------------------------------------------------------------------------------------------------------
  3340                                  ;
  3341                                  ;       Day Names
  3342                                  ;
  3343                                  ;-----------------------------------------------------------------------------------------------------------------------
  3344 00000AF3 53756E64617900          czSunday                db      "Sunday",0
  3345 00000AFA 4D6F6E64617900          czMonday                db      "Monday",0
  3346 00000B01 5475657364617900        czTuesday               db      "Tuesday",0
  3347 00000B09 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3347 00000B12 00                 
  3348 00000B13 546875727364617900      czThursday              db      "Thursday",0
  3349 00000B1C 46726964617900          czFriday                db      "Friday",0
  3350 00000B23 536174757264617900      czSaturday              db      "Saturday",0
  3351                                  ;-----------------------------------------------------------------------------------------------------------------------
  3352                                  ;
  3353                                  ;       Month Names
  3354                                  ;
  3355                                  ;-----------------------------------------------------------------------------------------------------------------------
  3356 00000B2C 4A616E7561727900        czJanuary               db      "January",0
  3357 00000B34 466562727561727900      czFebruary              db      "February",0
  3358 00000B3D 4D6172636800            czMarch                 db      "March",0
  3359 00000B43 417072696C00            czApril                 db      "April",0
  3360 00000B49 4D617900                czMay                   db      "May",0
  3361 00000B4D 4A756E6500              czJune                  db      "June",0
  3362 00000B52 4A756C7900              czJuly                  db      "July",0
  3363 00000B57 41756775737400          czAugust                db      "August",0
  3364 00000B5E 53657074656D626572-     czSeptember             db      "September",0
  3364 00000B67 00                 
  3365 00000B68 4F63746F62657200        czOctober               db      "October",0
  3366 00000B70 4E6F76656D62657200      czNovember              db      "November",0
  3367 00000B79 446563656D62657200      czDecember              db      "December",0
  3368                                  ;-----------------------------------------------------------------------------------------------------------------------
  3369                                  ;
  3370                                  ;       Day Names Lookup Table
  3371                                  ;
  3372                                  ;-----------------------------------------------------------------------------------------------------------------------
  3373 00000B82 90<rept>                                        align   4
  3374                                  tDayNames               equ     $
  3375 00000B84 [F30A0000]                                      dd      czSunday
  3376 00000B88 [FA0A0000]                                      dd      czMonday
  3377 00000B8C [010B0000]                                      dd      czTuesday
  3378 00000B90 [090B0000]                                      dd      czWednesday
  3379 00000B94 [130B0000]                                      dd      czThursday
  3380 00000B98 [1C0B0000]                                      dd      czFriday
  3381 00000B9C [230B0000]                                      dd      czSaturday
  3382                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3383                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3384                                  ;-----------------------------------------------------------------------------------------------------------------------
  3385                                  ;
  3386                                  ;       Month Names Lookup Table
  3387                                  ;
  3388                                  ;-----------------------------------------------------------------------------------------------------------------------
  3389                                                          align   4
  3390                                  tMonthNames             equ     $
  3391 00000BA0 [2C0B0000]                                      dd      czJanuary
  3392 00000BA4 [340B0000]                                      dd      czFebruary
  3393 00000BA8 [3D0B0000]                                      dd      czMarch
  3394 00000BAC [430B0000]                                      dd      czApril
  3395 00000BB0 [490B0000]                                      dd      czMay
  3396 00000BB4 [4D0B0000]                                      dd      czJune
  3397 00000BB8 [520B0000]                                      dd      czJuly
  3398 00000BBC [570B0000]                                      dd      czAugust
  3399 00000BC0 [5E0B0000]                                      dd      czSeptember
  3400 00000BC4 [680B0000]                                      dd      czOctober
  3401 00000BC8 [700B0000]                                      dd      czNovember
  3402 00000BCC [790B0000]                                      dd      czDecember
  3403                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3404                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3405                                  ;=======================================================================================================================
  3406                                  ;
  3407                                  ;       Memory Helper Routines
  3408                                  ;
  3409                                  ;       AllocateMemory
  3410                                  ;       FreeMemory
  3411                                  ;
  3412                                  ;=======================================================================================================================
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414                                  ;
  3415                                  ;       Routine:        AllocateMemory
  3416                                  ;
  3417                                  ;       Description:    This routine allocates a memory block for the given task.
  3418                                  ;
  3419                                  ;       In:             ECX     bytes of memory to allocate
  3420                                  ;
  3421                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3422                                  ;                               0       unable to allocate memory
  3423                                  ;
  3424                                  ;-----------------------------------------------------------------------------------------------------------------------
  3425 00000BD0 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3426 00000BD1 51                                              push    ecx                                             ;
  3427 00000BD2 56                                              push    esi                                             ;
  3428 00000BD3 1E                                              push    ds                                              ;
  3429                                  ;
  3430                                  ;       Address kernel memory structures
  3431                                  ;
  3432 00000BD4 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3433 00000BD6 1F                                              pop     ds                                              ;... into data segment reg
  3434 00000BD7 BE31090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3435                                  ;
  3436                                  ;       Set requested size to minimum block size if requested size is too small.
  3437                                  ;
  3438 00000BDC 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3439 00000BE2 7305                                            jae     .10                                             ;no, branch
  3440 00000BE4 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3441 00000BE9 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3442                                  ;
  3443                                  ;       Find the first free memory block large enough to satisfy the request.
  3444                                  ;
  3445 00000BEC 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3446 00000BEF 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3447 00000BF1 0F84F2000000                                    jz      .220                                            ;yes, branch
  3448 00000BF7 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3449 00000BFA 7605                                            jbe     .30                                             ;yes, branch
  3450 00000BFC 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3451 00000BFF EBEE                                            jmp     .20                                             ;continue
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;       Address the previous and next free memory blocks.
  3455                                  ;
  3456 00000C01 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3457 00000C04 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3458                                  ;
  3459                                  ;       Remove the free memory block from the forward free memory block chain.
  3460                                  ;
  3461 00000C07 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3462 00000C09 7405                                            jz      .40                                             ;no, branch
  3463 00000C0B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3464 00000C0E EB03                                            jmp     .50                                             ;continue
  3465 00000C10 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3466                                  ;
  3467                                  ;       Remove the free memory block from the reverse free memory block chain.
  3468                                  ;
  3469 00000C13 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3470 00000C15 7405                                            jz      .60                                             ;no, branch
  3471 00000C17 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3472 00000C1A EB03                                            jmp     .70                                             ;continue
  3473 00000C1C 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3474                                  ;-----------------------------------------------------------------------------------------------------------------------
  3475                                  ;
  3476                                  ;       Determine if the free memory block can be split.
  3477                                  ;
  3478 00000C1F 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3479 00000C22 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3480 00000C24 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3481 00000C2A 7263                                            jb      .150                                            ;no, branch
  3482                                  ;
  3483                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3484                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3485                                  ;       of the requested memory size.
  3486                                  ;
  3487 00000C2C 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3488 00000C2F 89C2                                            mov     edx,eax                                         ;memory block address
  3489 00000C31 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3490 00000C33 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3491 00000C36 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3492                                  ;
  3493                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3494                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3495                                  ;
  3496 00000C39 E305                                            jecxz   .80                                             ;no next contig, branch
  3497 00000C3B 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3498 00000C3E EB03                                            jmp     .90                                             ;continue
  3499 00000C40 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3500                                  ;
  3501                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3502                                  ;
  3503 00000C43 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3504 00000C46 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3505 00000C49 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3506 00000C4C BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3507 00000C51 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3508 00000C53 31DB                                            xor     ebx,ebx                                         ;zero register
  3509 00000C55 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3510 00000C58 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3511                                  ;
  3512                                  ;       Find the proper location in the free block chain for the new free block
  3513                                  ;
  3514 00000C5B 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3515 00000C5E 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3516 00000C61 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3517 00000C63 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3518 00000C66 7605                                            jbe     .110                                            ;yes, branch
  3519 00000C68 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3520 00000C6B EBF4                                            jmp     .100                                            ;continue
  3521                                  ;
  3522                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3523                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3524                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3525                                  ;       block of hte next block, if there is one.
  3526                                  ;
  3527 00000C6D 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3528 00000C70 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3529 00000C73 E308                                            jecxz   .120                                            ;branch if no next block
  3530 00000C75 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3531 00000C78 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3532 00000C7B EB03                                            jmp     .130                                            ;continue
  3533 00000C7D 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3534                                  ;
  3535                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3536                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3537                                  ;       last user block pointers if necessary.
  3538                                  ;
  3539 00000C80 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3540 00000C83 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3541 00000C85 7405                                            jz      .140                                            ;no, branch
  3542 00000C87 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3543 00000C8A EB03                                            jmp     .150                                            ;continue
  3544 00000C8C 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3545                                  ;
  3546                                  ;       Update the newly allocated block's owner and signature.
  3547                                  ;
  3548 00000C8F BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3549 00000C94 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3550 00000C96 31D2                                            xor     edx,edx                                         ;zero register
  3551 00000C98 660F00CA                                        str     dx                                              ;load the task state register
  3552 00000C9C 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3553                                  ;
  3554                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3555                                  ;
  3556 00000C9F 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3557 00000CA2 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3558 00000CA4 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3559 00000CA7 721E                                            jb      .180                                            ;branch if block belongs to next task
  3560 00000CA9 7405                                            je      .170                                            ;branch if block belongs to this task
  3561 00000CAB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3562 00000CAE EBF2                                            jmp     .160                                            ;continue
  3563                                  ;
  3564                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3565                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3566                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3567                                  ;       place to insert the block.
  3568                                  ;
  3569 00000CB0 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3570 00000CB3 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3571 00000CB6 760F                                            jbe     .180                                            ;yes, branch
  3572 00000CB8 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3573 00000CBB 85C9                                            test    ecx,ecx                                         ;end of chain?
  3574 00000CBD 7408                                            jz      .180                                            ;yes, branch
  3575 00000CBF 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3576 00000CC2 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3577 00000CC5 74E9                                            je      .170                                            ;yes, continue search
  3578                                  ;
  3579                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3580                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3581                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3582                                  ;       do have a previous-block, we update that block's next-block pointer.
  3583                                  ;
  3584 00000CC7 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3585 00000CCA 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3586 00000CCD E308                                            jecxz   .190                                            ;branch if no next-task block
  3587 00000CCF 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3588 00000CD2 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3589 00000CD5 EB03                                            jmp     .200                                            ;continue
  3590 00000CD7 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3591                                  ;
  3592                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3593                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3594                                  ;       global first and/or last user-block pointers if necessary.
  3595                                  ;
  3596 00000CDA 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3597 00000CDD 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3598 00000CDF 7405                                            jz      .210                                            ;no, branch
  3599 00000CE1 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3600 00000CE4 EB03                                            jmp     .220                                            ;continue
  3601 00000CE6 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3602                                  ;
  3603                                  ;       Restore registers and return to caller.
  3604                                  ;
  3605 00000CE9 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3606 00000CEA 5E                                              pop     esi                                             ;
  3607 00000CEB 59                                              pop     ecx                                             ;
  3608 00000CEC 5B                                              pop     ebx                                             ;
  3609 00000CED C3                                              ret                                                     ;return
  3610                                  ;-----------------------------------------------------------------------------------------------------------------------
  3611                                  ;
  3612                                  ;       Routine:        FreeMemory
  3613                                  ;
  3614                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3615                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3616                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3617                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3618                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3619                                  ;
  3620                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3621                                  ;
  3622                                  ;       Out:            EAX     -1      invalid memory block
  3623                                  ;                               0       memory block freed
  3624                                  ;
  3625                                  ;-----------------------------------------------------------------------------------------------------------------------
  3626 00000CEE 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3627 00000CEF 51                                              push    ecx                                             ;
  3628 00000CF0 56                                              push    esi                                             ;
  3629 00000CF1 57                                              push    edi                                             ;
  3630 00000CF2 1E                                              push    ds                                              ;
  3631 00000CF3 06                                              push    es                                              ;
  3632                                  ;
  3633                                  ;       Address the root memory structure
  3634                                  ;
  3635 00000CF4 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3636 00000CF6 07                                              pop     es                                              ;... into extra segment reg
  3637 00000CF7 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3638 00000CF9 1F                                              pop     ds                                              ;... into data segment reg
  3639 00000CFA BE31090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3640 00000CFF 89D7                                            mov     edi,edx                                         ;memory block address
  3641                                  ;
  3642                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3643                                  ;
  3644 00000D01 31C0                                            xor     eax,eax                                         ;indicate success
  3645 00000D03 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3646 00000D09 0F8415010000                                    je      .240                                            ;yes, branch
  3647 00000D0F 48                                              dec     eax                                             ;indicate failure
  3648 00000D10 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3649 00000D16 0F8508010000                                    jne     .240                                            ;no, branch
  3650                                  ;-----------------------------------------------------------------------------------------------------------------------
  3651                                  ;
  3652                                  ;       Unlink the USER memory block.
  3653                                  ;
  3654                                  ;-----------------------------------------------------------------------------------------------------------------------
  3655                                  ;
  3656                                  ;       Set the block signature. Reset owner.
  3657                                  ;
  3658 00000D1C C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3659 00000D22 31C0                                            xor     eax,eax                                         ;zero register
  3660 00000D24 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3661                                  ;
  3662                                  ;       Wipe user area.
  3663                                  ;
  3664 00000D27 57                                              push    edi                                             ;save block address
  3665 00000D28 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3666 00000D2B 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3667 00000D2E 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3668 00000D31 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3669 00000D33 F3AA                                            rep     stosb                                           ;clear memory
  3670 00000D35 5F                                              pop     edi                                             ;restore block address
  3671                                  ;
  3672                                  ;       Address the preceding and following USER memory blocks
  3673                                  ;
  3674 00000D36 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3675 00000D39 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3676                                  ;
  3677                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3678                                  ;       pointer to point to the USER block following this block.
  3679                                  ;
  3680 00000D3C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3681 00000D3E 7405                                            jz      .10                                             ;no, branch
  3682 00000D40 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3683 00000D43 EB03                                            jmp     .20                                             ;continue
  3684 00000D45 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3685                                  ;
  3686                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3687                                  ;       pointer to point to the USER block preceding this block.
  3688                                  ;
  3689 00000D48 E305                    .20                     jecxz   .30                                             ;branch if no next block
  3690 00000D4A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3691 00000D4D EB03                                            jmp     .40                                             ;continue
  3692 00000D4F 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3693                                  ;-----------------------------------------------------------------------------------------------------------------------
  3694                                  ;
  3695                                  ;       Merge with a previous contiguous FREE memory block.
  3696                                  ;
  3697                                  ;-----------------------------------------------------------------------------------------------------------------------
  3698                                  ;
  3699                                  ;       Address the preceding and following contiguous memory blocks.
  3700                                  ;
  3701 00000D52 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3702 00000D55 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3703                                  ;
  3704                                  ;       Verify we have a previous contiguous FREE block.
  3705                                  ;
  3706 00000D58 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3707 00000D5A 7442                                            jz      .100                                            ;no, branch
  3708 00000D5C 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3709 00000D62 753A                                            jne     .100                                            ;no, branch
  3710                                  ;
  3711                                  ;       Update adjacent block's contiguous pointers.
  3712                                  ;
  3713 00000D64 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3714 00000D67 E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3715 00000D69 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3716 00000D6C EB03                                            jmp     .60                                             ;continue
  3717 00000D6E 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3718                                  ;
  3719                                  ;       Update the size of the merged FREE block.
  3720                                  ;
  3721 00000D71 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3722 00000D74 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3723                                  ;
  3724                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3725                                  ;
  3726 00000D77 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3727 00000D7C B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3728 00000D7E F3AA                                            rep     stosb                                           ;clear memory header
  3729 00000D80 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3730                                  ;-----------------------------------------------------------------------------------------------------------------------
  3731                                  ;
  3732                                  ;       Unlink the previous contiguous FREE memory block
  3733                                  ;
  3734                                  ;-----------------------------------------------------------------------------------------------------------------------
  3735                                  ;
  3736                                  ;       Address the preceding and following USER memory blocks
  3737                                  ;
  3738 00000D82 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3739 00000D85 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3740                                  ;
  3741                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3742                                  ;       block pointer.
  3743                                  ;
  3744 00000D88 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3745 00000D8A 7405                                            jz      .70                                             ;no, branch
  3746 00000D8C 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3747 00000D8F EB03                                            jmp     .80                                             ;branch
  3748 00000D91 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3749                                  ;
  3750                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3751                                  ;       pointer.
  3752                                  ;
  3753 00000D94 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3754 00000D96 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3755 00000D99 EB03                                            jmp     .100                                            ;continue
  3756 00000D9B 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3757                                  ;-----------------------------------------------------------------------------------------------------------------------
  3758                                  ;
  3759                                  ;       Merge with a following contiguous FREE memory block.
  3760                                  ;
  3761                                  ;-----------------------------------------------------------------------------------------------------------------------
  3762                                  ;
  3763                                  ;       Verify we have a following contiguous FREE block.
  3764                                  ;
  3765 00000D9E 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3766 00000DA1 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3767 00000DA3 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3768 00000DA9 7543                                            jne     .170                                            ;no, branch
  3769                                  ;
  3770                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3771                                  ;
  3772 00000DAB 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3773 00000DAE 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3774                                  ;
  3775                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3776                                  ;
  3777 00000DB1 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3778 00000DB4 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3779 00000DB7 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3780 00000DB9 7405                                            jz      .110                                            ;no, branch
  3781 00000DBB 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3782 00000DBE EB03                                            jmp     .120                                            ;continue
  3783 00000DC0 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3784                                  ;-----------------------------------------------------------------------------------------------------------------------
  3785                                  ;
  3786                                  ;       Unlink the following contiguous FREE memory block
  3787                                  ;
  3788                                  ;-----------------------------------------------------------------------------------------------------------------------
  3789                                  ;
  3790                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3791                                  ;
  3792 00000DC3 57                      .120                    push    edi                                             ;save this block
  3793 00000DC4 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3794 00000DC6 51                                              push    ecx                                             ;save next contiguous block
  3795                                  ;
  3796                                  ;       Address the preceding and following USER memory blocks
  3797                                  ;
  3798 00000DC7 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3799 00000DCA 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3800                                  ;
  3801                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3802                                  ;       block pointer.
  3803                                  ;
  3804 00000DCD 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3805 00000DCF 7405                                            jz      .130                                            ;no, branch
  3806 00000DD1 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3807 00000DD4 EB03                                            jmp     .140                                            ;branch
  3808 00000DD6 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3809                                  ;
  3810                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3811                                  ;       pointer.
  3812                                  ;
  3813 00000DD9 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3814 00000DDB 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3815 00000DDE EB03                                            jmp     .160                                            ;continue
  3816 00000DE0 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3817                                  ;
  3818                                  ;       Clear next contiguous block's header
  3819                                  ;
  3820 00000DE3 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3821 00000DE4 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3822 00000DE9 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3823 00000DEB F3AA                                            rep     stosb                                           ;clear memory header
  3824 00000DED 5F                                              pop     edi                                             ;this block's pointer
  3825                                  ;-----------------------------------------------------------------------------------------------------------------------
  3826                                  ;
  3827                                  ;       Insert the final FREE block back into the block chain.
  3828                                  ;
  3829                                  ;-----------------------------------------------------------------------------------------------------------------------
  3830                                  ;
  3831                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3832                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3833                                  ;       all are smaller in size.
  3834                                  ;
  3835 00000DEE 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3836 00000DF1 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3837 00000DF4 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3838 00000DF6 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3839 00000DF9 7205                                            jb      .190                                            ;yes, branch
  3840 00000DFB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3841 00000DFE EBF4                                            jmp     .180                                            ;continue
  3842                                  ;
  3843                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3844                                  ;       larger free block. Update the next block's previous block pointer.
  3845                                  ;
  3846 00000E00 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3847 00000E03 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3848 00000E06 E308                                            jecxz   .200                                            ;branch if no block found
  3849 00000E08 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3850 00000E0B 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3851 00000E0E EB03                                            jmp     .210                                            ;continue
  3852 00000E10 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3853                                  ;
  3854                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3855                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3856                                  ;       next pointer.
  3857                                  ;
  3858 00000E13 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3859 00000E16 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3860 00000E18 7405                                            jz      .220                                            ;no, branch
  3861 00000E1A 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3862 00000E1D EB03                                            jmp     .230                                            ;continue
  3863 00000E1F 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3864                                  ;
  3865                                  ;       The memory free has completed.
  3866                                  ;
  3867 00000E22 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3868                                  ;
  3869                                  ;       Restore and return.
  3870                                  ;
  3871 00000E24 07                      .240                    pop     es                                              ;restore non-volatile regs
  3872 00000E25 1F                                              pop     ds                                              ;
  3873 00000E26 5F                                              pop     edi                                             ;
  3874 00000E27 5E                                              pop     esi                                             ;
  3875 00000E28 59                                              pop     ecx                                             ;
  3876 00000E29 5B                                              pop     ebx                                             ;
  3877 00000E2A C3                                              ret                                                     ;return
  3878                                  ;=======================================================================================================================
  3879                                  ;
  3880                                  ;       String Helper Routines
  3881                                  ;
  3882                                  ;       CompareMemory
  3883                                  ;       UpperCaseString
  3884                                  ;
  3885                                  ;=======================================================================================================================
  3886                                  ;-----------------------------------------------------------------------------------------------------------------------
  3887                                  ;
  3888                                  ;       Routine:        CompareMemory
  3889                                  ;
  3890                                  ;       Description:    This routine compares two byte arrays.
  3891                                  ;
  3892                                  ;       In:             DS:EDX  first source address
  3893                                  ;                       DS:EBX  second source address
  3894                                  ;                       ECX     comparison length
  3895                                  ;
  3896                                  ;       Out:            EDX     first source address
  3897                                  ;                       EBX     second source address
  3898                                  ;                       ECX     0       array 1 = array 2
  3899                                  ;                               <0      array 1 < array 2
  3900                                  ;                               >0      array 1 > array 2
  3901                                  ;
  3902                                  ;-----------------------------------------------------------------------------------------------------------------------
  3903 00000E2B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3904 00000E2C 57                                              push    edi                                             ;
  3905 00000E2D 06                                              push    es                                              ;
  3906 00000E2E 1E                                              push    ds                                              ;copy DS
  3907 00000E2F 07                                              pop     es                                              ;... to ES
  3908 00000E30 89D6                                            mov     esi,edx                                         ;first source address
  3909 00000E32 89DF                                            mov     edi,ebx                                         ;second source address
  3910 00000E34 FC                                              cld                                                     ;forward strings
  3911 00000E35 F3A6                                            rep     cmpsb                                           ;compare bytes
  3912 00000E37 B000                                            mov     al,0                                            ;default result
  3913 00000E39 7406                                            jz      .10                                             ;branch if arrays equal
  3914 00000E3B B001                                            mov     al,1                                            ;positive result
  3915 00000E3D 7302                                            jnc     .10                                             ;branch if target > source
  3916 00000E3F B0FF                                            mov     al,-1                                           ;negative result
  3917 00000E41 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3918 00000E44 07                                              pop     es                                              ;restore non-volatile regs
  3919 00000E45 5F                                              pop     edi                                             ;
  3920 00000E46 5E                                              pop     esi                                             ;
  3921 00000E47 C3                                              ret                                                     ;return
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;       Routine:        UpperCaseString
  3925                                  ;
  3926                                  ;       Description:    This routine places all characters in the given string to upper case.
  3927                                  ;
  3928                                  ;       In:             DS:EDX  string address
  3929                                  ;
  3930                                  ;       Out:            EDX     string address
  3931                                  ;
  3932                                  ;-----------------------------------------------------------------------------------------------------------------------
  3933 00000E48 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3934 00000E49 89D6                                            mov     esi,edx                                         ;string address
  3935 00000E4B FC                                              cld                                                     ;forward strings
  3936 00000E4C AC                      .10                     lodsb                                                   ;string character
  3937 00000E4D 84C0                                            test    al,al                                           ;null?
  3938 00000E4F 740F                                            jz      .20                                             ;yes, skip ahead
  3939 00000E51 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3940 00000E53 72F7                                            jb      .10                                             ;no, continue
  3941 00000E55 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3942 00000E57 77F3                                            ja      .10                                             ;no, continue
  3943 00000E59 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3944 00000E5B 8846FF                                          mov     [esi-1],al                                      ;upper character
  3945 00000E5E EBEC                                            jmp     .10                                             ;continue
  3946 00000E60 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3947 00000E61 C3                                              ret                                                     ;return
  3948                                  ;=======================================================================================================================
  3949                                  ;
  3950                                  ;       Console Helper Routines
  3951                                  ;
  3952                                  ;       FirstConsoleColumn
  3953                                  ;       GetConsoleChar
  3954                                  ;       GetConsoleString
  3955                                  ;       NextConsoleColumn
  3956                                  ;       NextConsoleRow
  3957                                  ;       PreviousConsoleColumn
  3958                                  ;       PutConsoleChar
  3959                                  ;       PutConsoleHexByte
  3960                                  ;       PutConsoleHexDword
  3961                                  ;       PutConsoleHexWord
  3962                                  ;       PutConsoleOIAChar
  3963                                  ;       PutConsoleOIAShift
  3964                                  ;       PutConsoleString
  3965                                  ;       Yield
  3966                                  ;
  3967                                  ;=======================================================================================================================
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969                                  ;
  3970                                  ;       Routine:        FirstConsoleColumn
  3971                                  ;
  3972                                  ;       Description:    This routine resets the console column to start of the row.
  3973                                  ;
  3974                                  ;       In:             DS      OS data selector
  3975                                  ;
  3976                                  ;-----------------------------------------------------------------------------------------------------------------------
  3977 00000E62 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  3978 00000E64 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  3979 00000E69 C3                                              ret                                                     ;return
  3980                                  ;-----------------------------------------------------------------------------------------------------------------------
  3981                                  ;
  3982                                  ;       Routine:        GetConsoleChar
  3983                                  ;
  3984                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3985                                  ;
  3986                                  ;       Out:            AL      ASCII character code
  3987                                  ;                       AH      keyboard scan code
  3988                                  ;
  3989                                  ;-----------------------------------------------------------------------------------------------------------------------
  3990 00000E6A E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3991 00000E6F E87B030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  3992 00000E74 09C0                                            or      eax,eax                                         ;do we have a message?
  3993 00000E76 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  3994 00000E78 50                                              push    eax                                             ;save key codes
  3995 00000E79 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  3996 00000E7E 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3997 00000E83 58                                              pop     eax                                             ;restore key codes
  3998 00000E84 75E9                                            jne     GetConsoleChar                                  ;no, try again
  3999 00000E86 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4000 00000E8B C3                                              ret                                                     ;return
  4001                                  ;-----------------------------------------------------------------------------------------------------------------------
  4002                                  ;
  4003                                  ;       Routine:        GetConsoleString
  4004                                  ;
  4005                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4006                                  ;
  4007                                  ;       In:             DS:EDX  target buffer address
  4008                                  ;                       ECX     maximum number of characters to accept
  4009                                  ;                       BH      echo to terminal
  4010                                  ;                       BL      terminating character
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013 00000E8C 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4014 00000E8D 56                                              push    esi                                             ;
  4015 00000E8E 57                                              push    edi                                             ;
  4016 00000E8F 06                                              push    es                                              ;
  4017 00000E90 1E                                              push    ds                                              ;load data segment selector ...
  4018 00000E91 07                                              pop     es                                              ;... into extra segment register
  4019 00000E92 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4020 00000E94 51                                              push    ecx                                             ;save maximum characters
  4021 00000E95 30C0                                            xor     al,al                                           ;zero register
  4022 00000E97 FC                                              cld                                                     ;forward strings
  4023 00000E98 F3AA                                            rep     stosb                                           ;zero fill buffer
  4024 00000E9A 59                                              pop     ecx                                             ;maximum characters
  4025 00000E9B 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4026 00000E9D 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4027 00000E9F E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4028 00000EA1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4029 00000EA6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4030 00000EA8 7445                                            je      .50                                             ;yes, exit
  4031 00000EAA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4032 00000EAC 7521                                            jne     .30                                             ;no, skip ahead
  4033 00000EAE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4034 00000EB0 74EF                                            je      .20                                             ;yes, get next character
  4035 00000EB2 4F                                              dec     edi                                             ;backup target pointer
  4036 00000EB3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4037 00000EB6 41                                              inc     ecx                                             ;increment remaining chars
  4038 00000EB7 F6C701                                          test    bh,1                                            ;echo to console?
  4039 00000EBA 74E5                                            jz      .20                                             ;no, get next character
  4040 00000EBC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4041 00000EC1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4042 00000EC3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4043 00000EC8 E837040000                                      call    PlaceCursor                                     ;position the cursor
  4044 00000ECD EBD2                                            jmp     .20                                             ;get next character
  4045 00000ECF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4046 00000ED1 72CE                                            jb      .20                                             ;no, get another character
  4047 00000ED3 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4048 00000ED5 77CA                                            ja      .20                                             ;no, get another character
  4049 00000ED7 AA                                              stosb                                                   ;store character in buffer
  4050 00000ED8 F6C701                                          test    bh,1                                            ;echo to console?
  4051 00000EDB 740F                                            jz      .40                                             ;no, skip ahead
  4052 00000EDD E877000000                                      call    PutConsoleChar                                  ;write character to console
  4053 00000EE2 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4054 00000EE7 E818040000                                      call    PlaceCursor                                     ;position the cursor
  4055 00000EEC 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4056 00000EED EBB0                                            jmp     .10                                             ;next
  4057 00000EEF 30C0                    .50                     xor     al,al                                           ;null
  4058 00000EF1 AA                                              stosb                                                   ;terminate buffer
  4059 00000EF2 07                                              pop     es                                              ;restore non-volatile regs
  4060 00000EF3 5F                                              pop     edi                                             ;
  4061 00000EF4 5E                                              pop     esi                                             ;
  4062 00000EF5 59                                              pop     ecx                                             ;
  4063 00000EF6 C3                                              ret                                                     ;return
  4064                                  ;-----------------------------------------------------------------------------------------------------------------------
  4065                                  ;
  4066                                  ;       Routine:        NextConsoleColumn
  4067                                  ;
  4068                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4069                                  ;                       incremented if the end of the current row is reached.
  4070                                  ;
  4071                                  ;       In:             DS      OS data selector
  4072                                  ;
  4073                                  ;-----------------------------------------------------------------------------------------------------------------------
  4074 00000EF7 A014080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4075 00000EFC FEC0                                            inc     al                                              ;increment column
  4076 00000EFE A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4077 00000F03 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4078 00000F05 720A                                            jb      .10                                             ;no, skip ahead
  4079 00000F07 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4080 00000F0C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4081 00000F11 C3                      .10                     ret                                                     ;return
  4082                                  ;-----------------------------------------------------------------------------------------------------------------------
  4083                                  ;
  4084                                  ;       Routine:        NextConsoleRow
  4085                                  ;
  4086                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4087                                  ;
  4088                                  ;       In:             DS      OS data selector
  4089                                  ;
  4090                                  ;-----------------------------------------------------------------------------------------------------------------------
  4091 00000F12 A015080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4092 00000F17 FEC0                                            inc     al                                              ;increment row
  4093 00000F19 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4094 00000F1E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4095 00000F20 7211                                            jb      .10                                             ;no, skip ahead
  4096 00000F22 E860030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4097 00000F27 A015080000                                      mov     al,[wbConsoleRow]                               ;row
  4098 00000F2C FEC8                                            dec     al                                              ;decrement row
  4099 00000F2E A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4100 00000F33 C3                      .10                     ret                                                     ;return
  4101                                  ;-----------------------------------------------------------------------------------------------------------------------
  4102                                  ;
  4103                                  ;       Routine:        PreviousConsoleColumn
  4104                                  ;
  4105                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4106                                  ;                       the column is set to the last position in the row and the row is decremented.
  4107                                  ;
  4108                                  ;       In:             DS      OS data selector
  4109                                  ;
  4110                                  ;-----------------------------------------------------------------------------------------------------------------------
  4111 00000F34 A014080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4112 00000F39 08C0                                            or      al,al                                           ;start of row?
  4113 00000F3B 7514                                            jnz     .10                                             ;no, skip ahead
  4114 00000F3D 8A2515080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4115 00000F43 08E4                                            or      ah,ah                                           ;top of screen?
  4116 00000F45 7411                                            jz      .20                                             ;yes, exit with no change
  4117 00000F47 FECC                                            dec     ah                                              ;decrement row
  4118 00000F49 882515080000                                    mov     [wbConsoleRow],ah                               ;save row
  4119 00000F4F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4120 00000F51 FEC8                    .10                     dec     al                                              ;decrement column
  4121 00000F53 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4122 00000F58 C3                      .20                     ret                                                     ;return
  4123                                  ;-----------------------------------------------------------------------------------------------------------------------
  4124                                  ;
  4125                                  ;       Routine:        PutConsoleChar
  4126                                  ;
  4127                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4128                                  ;
  4129                                  ;       In:             AL      ASCII character
  4130                                  ;                       DS      OS data selector
  4131                                  ;
  4132                                  ;-----------------------------------------------------------------------------------------------------------------------
  4133 00000F59 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4134 00000F5A 06                                              push    es                                              ;
  4135 00000F5B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4136 00000F5D 07                                              pop     es                                              ;... into extra segment reg
  4137 00000F5E 8A0D14080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4138 00000F64 8A2D15080000                                    mov     ch,[wbConsoleRow]                               ;row
  4139 00000F6A E844030000                                      call    SetConsoleChar                                  ;put character at row, column
  4140 00000F6F 07                                              pop     es                                              ;restore non-volatile regs
  4141 00000F70 59                                              pop     ecx                                             ;
  4142 00000F71 C3                                              ret                                                     ;return
  4143                                  ;-----------------------------------------------------------------------------------------------------------------------
  4144                                  ;
  4145                                  ;       Routine:        PutConsoleHexByte
  4146                                  ;
  4147                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4148                                  ;
  4149                                  ;       In:             AL      byte value
  4150                                  ;                       CL      column
  4151                                  ;                       CH      row
  4152                                  ;                       DS      OS data selector
  4153                                  ;                       ES      CGA selector
  4154                                  ;
  4155                                  ;-----------------------------------------------------------------------------------------------------------------------
  4156 00000F72 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4157 00000F73 88C3                                            mov     bl,al                                           ;save byte value
  4158 00000F75 C0E804                                          shr     al,4                                            ;hi-order nybble
  4159 00000F78 0C30                                            or      al,030h                                         ;apply ASCII zone
  4160 00000F7A 3C3A                                            cmp     al,03ah                                         ;numeric?
  4161 00000F7C 7202                                            jb      .10                                             ;yes, skip ahead
  4162 00000F7E 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4163 00000F80 E82E030000              .10                     call    SetConsoleChar                                  ;display ASCII character
  4164 00000F85 88D8                                            mov     al,bl                                           ;byte value
  4165 00000F87 240F                                            and     al,0fh                                          ;lo-order nybble
  4166 00000F89 0C30                                            or      al,30h                                          ;apply ASCII zone
  4167 00000F8B 3C3A                                            cmp     al,03ah                                         ;numeric?
  4168 00000F8D 7202                                            jb      .20                                             ;yes, skip ahead
  4169 00000F8F 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4170 00000F91 E81D030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4171 00000F96 5B                                              pop     ebx                                             ;restore non-volatile regs
  4172 00000F97 C3                                              ret                                                     ;return
  4173                                  ;-----------------------------------------------------------------------------------------------------------------------
  4174                                  ;
  4175                                  ;       Routine:        PutConsoleHexDword
  4176                                  ;
  4177                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4178                                  ;
  4179                                  ;       In:             EAX     value
  4180                                  ;                       CL      column
  4181                                  ;                       CH      row
  4182                                  ;                       DS      OS data selector
  4183                                  ;                       ES      CGA selector
  4184                                  ;
  4185                                  ;-----------------------------------------------------------------------------------------------------------------------
  4186 00000F98 50                      PutConsoleHexDword      push    eax
  4187 00000F99 C1E810                                          shr     eax,16
  4188 00000F9C E807000000                                      call    PutConsoleHexWord
  4189 00000FA1 58                                              pop     eax
  4190 00000FA2 E801000000                                      call    PutConsoleHexWord
  4191 00000FA7 C3                                              ret
  4192                                  ;-----------------------------------------------------------------------------------------------------------------------
  4193                                  ;
  4194                                  ;       Routine:        PutConsoleHexWord
  4195                                  ;
  4196                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4197                                  ;
  4198                                  ;       In:             EAX     value
  4199                                  ;                       CL      column
  4200                                  ;                       CH      row
  4201                                  ;                       DS      OS data selector
  4202                                  ;                       ES      CGA selector
  4203                                  ;
  4204                                  ;-----------------------------------------------------------------------------------------------------------------------
  4205 00000FA8 50                      PutConsoleHexWord       push    eax
  4206 00000FA9 C1E808                                          shr     eax,8
  4207 00000FAC E8C1FFFFFF                                      call    PutConsoleHexByte
  4208 00000FB1 58                                              pop     eax
  4209 00000FB2 E8BBFFFFFF                                      call    PutConsoleHexByte
  4210 00000FB7 C3                                              ret
  4211                                  ;-----------------------------------------------------------------------------------------------------------------------
  4212                                  ;
  4213                                  ;       Routine:        PutConsoleOIAChar
  4214                                  ;
  4215                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4216                                  ;
  4217                                  ;       In:             DS      OS data selector
  4218                                  ;
  4219                                  ;-----------------------------------------------------------------------------------------------------------------------
  4220 00000FB8 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4221 00000FB9 51                                              push    ecx                                             ;
  4222 00000FBA 56                                              push    esi                                             ;
  4223 00000FBB 1E                                              push    ds                                              ;
  4224 00000FBC 06                                              push    es                                              ;
  4225 00000FBD 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4226 00000FBF 1F                                              pop     ds                                              ;... into data segment register
  4227 00000FC0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4228 00000FC2 07                                              pop     es                                              ;... into extra segment register
  4229 00000FC3 BE19080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4230 00000FC8 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4231 00000FCA B300                                            mov     bl,0                                            ;starting column
  4232 00000FCC B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4233 00000FD1 51                      .10                     push    ecx                                             ;save remaining count
  4234 00000FD2 89D9                                            mov     ecx,ebx                                         ;row, column
  4235 00000FD4 AC                                              lodsb                                                   ;read scan code
  4236 00000FD5 08C0                                            or      al,al                                           ;scan code present?
  4237 00000FD7 7407                                            jz      .20                                             ;no, skip ahead
  4238 00000FD9 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4239 00000FDE EB0E                                            jmp     .30                                             ;continue
  4240 00000FE0 B020                    .20                     mov     al,' '                                          ;ASCII space
  4241 00000FE2 E8CC020000                                      call    SetConsoleChar                                  ;display space
  4242 00000FE7 B020                                            mov     al,' '                                          ;ASCII space
  4243 00000FE9 E8C5020000                                      call    SetConsoleChar                                  ;display space
  4244 00000FEE 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4245 00000FF1 59                                              pop     ecx                                             ;restore remaining
  4246 00000FF2 E2DD                                            loop    .10                                             ;next code
  4247 00000FF4 A01F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4248 00000FF9 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4249 00000FFB 720D                                            jb      .40                                             ;no, skip ahead
  4250 00000FFD 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4251 00000FFF 7709                                            ja      .40                                             ;no, skip ahead
  4252 00001001 88FD                                            mov     ch,bh                                           ;OIA row
  4253 00001003 B128                                            mov     cl,40                                           ;character display column
  4254 00001005 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  4255 0000100A 07                      .40                     pop     es                                              ;restore non-volatile regs
  4256 0000100B 1F                                              pop     ds                                              ;
  4257 0000100C 5E                                              pop     esi                                             ;
  4258 0000100D 59                                              pop     ecx                                             ;
  4259 0000100E 5B                                              pop     ebx                                             ;
  4260 0000100F C3                                              ret                                                     ;return
  4261                                  ;-----------------------------------------------------------------------------------------------------------------------
  4262                                  ;
  4263                                  ;       Routine:        PutConsoleOIAShift
  4264                                  ;
  4265                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4266                                  ;
  4267                                  ;       In:             BL      shift flags
  4268                                  ;                       BH      lock flags
  4269                                  ;                       DS      OS data selector
  4270                                  ;
  4271                                  ;-----------------------------------------------------------------------------------------------------------------------
  4272 00001010 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4273 00001011 06                                              push    es                                              ;
  4274 00001012 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4275 00001014 07                                              pop     es                                              ;... into ES register
  4276 00001015 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4277 00001017 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4278 00001019 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4279 0000101C 7402                                            jz      .10                                             ;no, skip ahead
  4280 0000101E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4281 00001020 B10E                    .10                     mov     cl,14                                           ;indicator column
  4282 00001022 E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4283 00001027 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4284 00001029 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4285 0000102C 7402                                            jz      .20                                             ;no, skip ahead
  4286 0000102E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4287 00001030 B140                    .20                     mov     cl,64                                           ;indicator column
  4288 00001032 E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4289 00001037 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4290 00001039 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4291 0000103C 7402                                            jz      .30                                             ;no, skip ahead
  4292 0000103E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4293 00001040 B10F                    .30                     mov     cl,15                                           ;indicator column
  4294 00001042 E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4295 00001047 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4296 00001049 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4297 0000104C 7402                                            jz      .40                                             ;no, skip ahead
  4298 0000104E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4299 00001050 B13F                    .40                     mov     cl,63                                           ;indicator column
  4300 00001052 E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4301 00001057 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4302 00001059 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4303 0000105C 7402                                            jz      .50                                             ;no, skip ahead
  4304 0000105E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4305 00001060 B110                    .50                     mov     cl,16                                           ;indicator column
  4306 00001062 E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4307 00001067 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4308 00001069 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4309 0000106C 7402                                            jz      .60                                             ;no, skip ahead
  4310 0000106E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4311 00001070 B13E                    .60                     mov     cl,62                                           ;indicator column
  4312 00001072 E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4313 00001077 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4314 00001079 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4315 0000107C 7402                                            jz      .70                                             ;no, skip ahead
  4316 0000107E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4317 00001080 B14E                    .70                     mov     cl,78                                           ;indicator column
  4318 00001082 E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4319 00001087 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4320 00001089 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4321 0000108C 7402                                            jz      .80                                             ;no, skip ahead
  4322 0000108E B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4323 00001090 B14D                    .80                     mov     cl,77                                           ;indicator column
  4324 00001092 E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4325 00001097 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4326 00001099 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4327 0000109C 7402                                            jz      .90                                             ;no, skip ahead
  4328 0000109E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4329 000010A0 B14C                    .90                     mov     cl,76                                           ;indicator column
  4330 000010A2 E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4331 000010A7 07                                              pop     es                                              ;restore non-volatile regs
  4332 000010A8 59                                              pop     ecx                                             ;
  4333 000010A9 C3                                              ret                                                     ;return
  4334                                  ;-----------------------------------------------------------------------------------------------------------------------
  4335                                  ;
  4336                                  ;       Routine:        PutConsoleString
  4337                                  ;
  4338                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4339                                  ;                       console position as needed.
  4340                                  ;
  4341                                  ;       In:             EDX     source address
  4342                                  ;                       DS      OS data selector
  4343                                  ;
  4344                                  ;-----------------------------------------------------------------------------------------------------------------------
  4345 000010AA 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4346 000010AB 89D6                                            mov     esi,edx                                         ;source address
  4347 000010AD FC                                              cld                                                     ;forward strings
  4348 000010AE AC                      .10                     lodsb                                                   ;ASCII character
  4349 000010AF 08C0                                            or      al,al                                           ;end of string?
  4350 000010B1 7422                                            jz      .40                                             ;yes, skip ahead
  4351 000010B3 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4352 000010B5 7507                                            jne     .20                                             ;no, skip ahead
  4353 000010B7 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4354 000010BC EBF0                                            jmp     .10                                             ;next character
  4355 000010BE 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4356 000010C0 7507                                            jne     .30                                             ;no, skip ahead
  4357 000010C2 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4358 000010C7 EBE5                                            jmp     .10                                             ;next character
  4359 000010C9 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4360 000010CE E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4361 000010D3 EBD9                                            jmp     .10                                             ;next character
  4362 000010D5 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4363 000010D6 C3                                              ret                                                     ;return
  4364                                  ;-----------------------------------------------------------------------------------------------------------------------
  4365                                  ;
  4366                                  ;       Routine:        Yield
  4367                                  ;
  4368                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4369                                  ;
  4370                                  ;-----------------------------------------------------------------------------------------------------------------------
  4371 000010D7 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4372 000010D8 F4                                              hlt                                                     ;halt until external interrupt
  4373 000010D9 C3                                              ret                                                     ;return
  4374                                  ;=======================================================================================================================
  4375                                  ;
  4376                                  ;       Data-Type Conversion Helper Routines
  4377                                  ;
  4378                                  ;       DecimalToUnsigned
  4379                                  ;       HexadecimalToUnsigned
  4380                                  ;       UnsignedToDecimalString
  4381                                  ;       UnsignedToHexadecimal
  4382                                  ;
  4383                                  ;=======================================================================================================================
  4384                                  ;-----------------------------------------------------------------------------------------------------------------------
  4385                                  ;
  4386                                  ;       Routine:        DecimalToUnsigned
  4387                                  ;
  4388                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4389                                  ;
  4390                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4391                                  ;
  4392                                  ;       Output:         EAX     unsigned integer value
  4393                                  ;
  4394                                  ;-----------------------------------------------------------------------------------------------------------------------
  4395 000010DA 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4396 000010DB 89D6                                            mov     esi,edx                                         ;source address
  4397 000010DD 31D2                                            xor     edx,edx                                         ;zero total
  4398 000010DF AC                      .10                     lodsb                                                   ;source byte
  4399 000010E0 3C2C                                            cmp     al,','                                          ;comma?
  4400 000010E2 74FB                                            je      .10                                             ;yes, ignore
  4401 000010E4 84C0                                            test    al,al                                           ;end of string?
  4402 000010E6 7421                                            jz      .30                                             ;yes, done
  4403 000010E8 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4404 000010EA 741D                                            je      .30                                             ;yes, done
  4405 000010EC 3C30                                            cmp     al,'0'                                          ;numeral?
  4406 000010EE 7217                                            jb      .20                                             ;no, invalid string
  4407 000010F0 3C39                                            cmp     al,'9'                                          ;numeral?
  4408 000010F2 7713                                            ja      .20                                             ;no, invalid string
  4409 000010F4 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4410 000010F6 50                                              push    eax                                             ;save numeral
  4411 000010F7 D1E2                                            shl     edx,1                                           ;total * 2
  4412 000010F9 89D0                                            mov     eax,edx                                         ;total * 2
  4413 000010FB C1E202                                          shl     edx,2                                           ;total * 8
  4414 000010FE 01C2                                            add     edx,eax                                         ;total * 10
  4415 00001100 58                                              pop     eax                                             ;restore numeral
  4416 00001101 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4417 00001103 31C0                                            xor     eax,eax                                         ;zero register
  4418 00001105 EBD8                                            jmp     .10                                             ;next
  4419 00001107 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4420 00001109 89D0                    .30                     mov     eax,edx                                         ;result
  4421 0000110B 5E                                              pop     esi                                             ;restore non-volatile regs
  4422 0000110C C3                                              ret                                                     ;return
  4423                                  ;-----------------------------------------------------------------------------------------------------------------------
  4424                                  ;
  4425                                  ;       Routine:        HexadecimalToUnsigned
  4426                                  ;
  4427                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4428                                  ;
  4429                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4430                                  ;
  4431                                  ;       Output:         EAX     unsigned integer value
  4432                                  ;
  4433                                  ;-----------------------------------------------------------------------------------------------------------------------
  4434 0000110D 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4435 0000110E 89D6                                            mov     esi,edx                                         ;source address
  4436 00001110 31D2                                            xor     edx,edx                                         ;zero register
  4437 00001112 AC                      .10                     lodsb                                                   ;source byte
  4438 00001113 84C0                                            test    al,al                                           ;end of string?
  4439 00001115 7410                                            jz      .30                                             ;yes, branch
  4440 00001117 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4441 00001119 7602                                            jna     .20                                             ;no, skip ahead
  4442 0000111B 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4443 0000111D 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  4444 00001120 C1E204                                          shl     edx,4                                           ;previous total x 16
  4445 00001123 01C2                                            add     edx,eax                                         ;add prior value x 16
  4446 00001125 EBEB                                            jmp     .10                                             ;next
  4447 00001127 89D0                    .30                     mov     eax,edx                                         ;result
  4448 00001129 5E                                              pop     esi                                             ;restore non-volatile regs
  4449 0000112A C3                                              ret                                                     ;return
  4450                                  ;-----------------------------------------------------------------------------------------------------------------------
  4451                                  ;
  4452                                  ;       Routine:        UnsignedToDecimalString
  4453                                  ;
  4454                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4455                                  ;
  4456                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4457                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4458                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4459                                  ;                       ECX     32-bit binary
  4460                                  ;                       DS:EDX  output buffer address
  4461                                  ;
  4462                                  ;-----------------------------------------------------------------------------------------------------------------------
  4463 0000112B 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4464 0000112C 51                                              push    ecx                                             ;
  4465 0000112D 57                                              push    edi                                             ;
  4466 0000112E 06                                              push    es                                              ;
  4467 0000112F 1E                                              push    ds                                              ;load data selector
  4468 00001130 07                                              pop     es                                              ;... into extra segment reg
  4469 00001131 89D7                                            mov     edi,edx                                         ;output buffer address
  4470 00001133 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4471 00001136 89CA                                            mov     edx,ecx                                         ;binary
  4472 00001138 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4473 0000113D E871000000                                      call    .30                                             ;divide and store
  4474 00001142 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4475 00001147 E855000000                                      call    .10                                             ;divide and store
  4476 0000114C B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4477 00001151 E85D000000                                      call    .30                                             ;divide and store
  4478 00001156 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4479 0000115B E853000000                                      call    .30                                             ;divide and store
  4480 00001160 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4481 00001165 E837000000                                      call    .10                                             ;divide and store
  4482 0000116A B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4483 0000116F E83F000000                                      call    .30                                             ;divide and store
  4484 00001174 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4485 00001179 E835000000                                      call    .30                                             ;divide and store
  4486 0000117E B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4487 00001183 E819000000                                      call    .10                                             ;divide and store
  4488 00001188 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4489 0000118D E821000000                                      call    .30                                             ;divide and store
  4490 00001192 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4491 00001194 E827000000                                      call    .40                                             ;store
  4492 00001199 30C0                                            xor     al,al                                           ;null terminator
  4493 0000119B AA                                              stosb
  4494 0000119C 07                                              pop     es                                              ;restore non-volatile regs
  4495 0000119D 5F                                              pop     edi                                             ;
  4496 0000119E 59                                              pop     ecx                                             ;
  4497 0000119F 5B                                              pop     ebx                                             ;
  4498 000011A0 C3                                              ret                                                     ;return
  4499 000011A1 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4500 000011A4 740D                                            jz      .30                                             ;no, branch
  4501 000011A6 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4502 000011A9 7405                                            jz      .20                                             ;no, store delim
  4503 000011AB F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4504 000011AE 7403                                            jz      .30                                             ;no, branch
  4505 000011B0 B02C                    .20                     mov     al,','                                          ;delimiter
  4506 000011B2 AA                                              stosb                                                   ;store delimiter
  4507 000011B3 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4508 000011B5 31D2                                            xor     edx,edx                                         ;zero hi-order
  4509 000011B7 F7F1                                            div     ecx                                             ;divide by power of 10
  4510 000011B9 84C0                                            test    al,al                                           ;zero?
  4511 000011BB 7407                                            jz      .50                                             ;yes, branch
  4512 000011BD 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4513 000011C0 0C30                    .40                     or      al,30h                                          ;ASCII zone
  4514 000011C2 AA                                              stosb                                                   ;store digit
  4515 000011C3 C3                                              ret                                                     ;return
  4516 000011C4 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4517 000011C7 74F7                                            jz      .40                                             ;no, store and continue
  4518 000011C9 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4519 000011CC 75F2                                            jnz     .40                                             ;yes, store and continue
  4520 000011CE C3                                              ret                                                     ;return
  4521                                  ;-----------------------------------------------------------------------------------------------------------------------
  4522                                  ;
  4523                                  ;       Routine:        UnsignedToHexadecimal
  4524                                  ;
  4525                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4526                                  ;
  4527                                  ;       Input:          DS:EDX  output buffer address
  4528                                  ;                       ECX     32-bit binary
  4529                                  ;
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531 000011CF 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4532 000011D0 89D7                                            mov     edi,edx                                         ;output buffer address
  4533 000011D2 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4534 000011D4 31C9                                            xor     ecx,ecx                                         ;zero register
  4535 000011D6 B108                                            mov     cl,8                                            ;nybble count
  4536 000011D8 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4537 000011DB 88D0                                            mov     al,dl                                           ;????bbbb
  4538 000011DD 240F                                            and     al,0fh                                          ;mask out bits 4-7
  4539 000011DF 0C30                                            or      al,30h                                          ;mask in ascii zone
  4540 000011E1 3C3A                                            cmp     al,3ah                                          ;A through F?
  4541 000011E3 7202                                            jb      .20                                             ;no, skip ahead
  4542 000011E5 0407                                            add     al,7                                            ;41h through 46h
  4543 000011E7 AA                      .20                     stosb                                                   ;store hexnum
  4544 000011E8 E2EE                                            loop    .10                                             ;next nybble
  4545 000011EA 30C0                                            xor     al,al                                           ;zero reg
  4546 000011EC AA                                              stosb                                                   ;null terminate
  4547 000011ED 5F                                              pop     edi                                             ;restore non-volatile regs
  4548 000011EE C3                                              ret                                                     ;return
  4549                                  ;=======================================================================================================================
  4550                                  ;
  4551                                  ;       Message Queue Helper Routines
  4552                                  ;
  4553                                  ;       GetMessage
  4554                                  ;       PutMessage
  4555                                  ;
  4556                                  ;=======================================================================================================================
  4557                                  ;-----------------------------------------------------------------------------------------------------------------------
  4558                                  ;
  4559                                  ;       Routine:        GetMessage
  4560                                  ;
  4561                                  ;       Description:    This routine reads and removes a message from the message queue.
  4562                                  ;
  4563                                  ;       Out:            EAX     lo-order message data
  4564                                  ;                       EDX     hi-order message data
  4565                                  ;
  4566                                  ;                       CY      0 = message read
  4567                                  ;                               1 = no message to read
  4568                                  ;
  4569                                  ;-----------------------------------------------------------------------------------------------------------------------
  4570 000011EF 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4571 000011F0 51                                              push    ecx                                             ;
  4572 000011F1 1E                                              push    ds                                              ;
  4573 000011F2 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4574 000011F4 1F                                              pop     ds                                              ;... into data segment register
  4575 000011F5 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4576 000011FB 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4577 000011FD 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4578 00001200 09D0                                            or      eax,edx                                         ;is queue empty?
  4579 00001202 F9                                              stc                                                     ;assume queue is emtpy
  4580 00001203 741B                                            jz      .20                                             ;yes, skip ahead
  4581 00001205 31C9                                            xor     ecx,ecx                                         ;store zero
  4582 00001207 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4583 00001209 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4584 0000120C 83C308                                          add     ebx,8                                           ;next queue element
  4585 0000120F 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  4586 00001215 7502                                            jnz     .10                                             ;no, skip ahead
  4587 00001217 B308                                            mov     bl,8                                            ;reset to 1st entry
  4588 00001219 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4589 0000121F F8                                              clc                                                     ;indicate message read
  4590 00001220 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4591 00001221 59                                              pop     ecx                                             ;
  4592 00001222 5B                                              pop     ebx                                             ;
  4593 00001223 C3                                              ret                                                     ;return
  4594                                  ;-----------------------------------------------------------------------------------------------------------------------
  4595                                  ;
  4596                                  ;       Routine:        PutMessage
  4597                                  ;
  4598                                  ;       Description:    This routine adda a message to the message queue.
  4599                                  ;
  4600                                  ;       In:             ECX     hi-order data word
  4601                                  ;                       EDX     lo-order data word
  4602                                  ;
  4603                                  ;       Out:            CY      0 = success
  4604                                  ;                               1 = fail: queue is full
  4605                                  ;
  4606                                  ;-----------------------------------------------------------------------------------------------------------------------
  4607 00001224 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4608 00001225 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4609 00001227 1F                                              pop     ds                                              ;... into data segment register
  4610 00001228 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4611 0000122D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4612 00001230 F9                                              stc                                                     ;assume failure
  4613 00001231 7517                                            jne     .20                                             ;yes, cannot store
  4614 00001233 8910                                            mov     [eax],edx                                       ;store lo-order data
  4615 00001235 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4616 00001238 83C008                                          add     eax,8                                           ;next queue element adr
  4617 0000123B 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  4618 00001240 7502                                            jnz     .10                                             ;no, skip ahead
  4619 00001242 B008                                            mov     al,8                                            ;reset to top of queue
  4620 00001244 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4621 00001249 F8                                              clc                                                     ;indicate success
  4622 0000124A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4623 0000124B C3                                              ret                                                     ;return
  4624                                  ;=======================================================================================================================
  4625                                  ;
  4626                                  ;       Memory-Mapped Video Routines
  4627                                  ;
  4628                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4629                                  ;
  4630                                  ;       ClearConsoleScreen
  4631                                  ;       ScrollConsoleRow
  4632                                  ;       SetConsoleChar
  4633                                  ;       SetConsoleString
  4634                                  ;
  4635                                  ;=======================================================================================================================
  4636                                  ;-----------------------------------------------------------------------------------------------------------------------
  4637                                  ;
  4638                                  ;       Routine:        ClearConsoleScreen
  4639                                  ;
  4640                                  ;       Description:    This routine clears the console (CGA) screen.
  4641                                  ;
  4642                                  ;-----------------------------------------------------------------------------------------------------------------------
  4643 0000124C 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4644 0000124D 57                                              push    edi                                             ;
  4645 0000124E 1E                                              push    ds                                              ;
  4646 0000124F 06                                              push    es                                              ;
  4647 00001250 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4648 00001252 1F                                              pop     ds                                              ;... into DS register
  4649 00001253 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4650 00001255 07                                              pop     es                                              ;... into ES register
  4651 00001256 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4652 0000125B B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4653 00001260 31FF                                            xor     edi,edi                                         ;target offset
  4654 00001262 FC                                              cld                                                     ;forward strings
  4655 00001263 F3AB                                            rep     stosd                                           ;reset screen body
  4656 00001265 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4657 0000126A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4658 0000126F F3AB                                            rep     stosd                                           ;reset OIA line
  4659 00001271 30C0                                            xor     al,al                                           ;zero register
  4660 00001273 A215080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4661 00001278 A214080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4662 0000127D E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4663 00001282 07                                              pop     es                                              ;restore non-volatile regs
  4664 00001283 1F                                              pop     ds                                              ;
  4665 00001284 5F                                              pop     edi                                             ;
  4666 00001285 59                                              pop     ecx                                             ;
  4667 00001286 C3                                              ret                                                     ;return
  4668                                  ;-----------------------------------------------------------------------------------------------------------------------
  4669                                  ;
  4670                                  ;       Routine:        ScrollConsoleRow
  4671                                  ;
  4672                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4673                                  ;
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675 00001287 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4676 00001288 56                                              push    esi                                             ;
  4677 00001289 57                                              push    edi                                             ;
  4678 0000128A 1E                                              push    ds                                              ;
  4679 0000128B 06                                              push    es                                              ;
  4680 0000128C 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4681 0000128E 1F                                              pop     ds                                              ;... into DS
  4682 0000128F 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4683 00001291 07                                              pop     es                                              ;... into ES
  4684 00001292 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4685 00001297 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4686 0000129C 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4687 0000129E FC                                              cld                                                     ;forward strings
  4688 0000129F F3A5                                            rep     movsd                                           ;move 24 lines up
  4689 000012A1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4690 000012A6 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4691 000012AB F3AB                                            rep     stosd                                           ;clear bottom row
  4692 000012AD 07                                              pop     es                                              ;restore non-volatile regs
  4693 000012AE 1F                                              pop     ds                                              ;
  4694 000012AF 5F                                              pop     edi                                             ;
  4695 000012B0 5E                                              pop     esi                                             ;
  4696 000012B1 59                                              pop     ecx                                             ;
  4697 000012B2 C3                                              ret                                                     ;return
  4698                                  ;-----------------------------------------------------------------------------------------------------------------------
  4699                                  ;
  4700                                  ;       Routine:        SetConsoleChar
  4701                                  ;
  4702                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4703                                  ;
  4704                                  ;       In:             AL      ASCII character
  4705                                  ;                       CL      column
  4706                                  ;                       CH      row
  4707                                  ;                       ES      CGA selector
  4708                                  ;
  4709                                  ;       Out:            EAX     last target address written (ES:)
  4710                                  ;                       CL      column + 1
  4711                                  ;
  4712                                  ;-----------------------------------------------------------------------------------------------------------------------
  4713 000012B3 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4714 000012B5 0FB6C5                                          movzx   eax,ch                                          ;row
  4715 000012B8 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4716 000012BA F6E4                                            mul     ah                                              ;row * cols/row
  4717 000012BC 00C8                                            add     al,cl                                           ;add column
  4718 000012BE 80D400                                          adc     ah,0                                            ;handle carry
  4719 000012C1 D1E0                                            shl     eax,1                                           ;screen offset
  4720 000012C3 268810                                          mov     [es:eax],dl                                     ;store character
  4721 000012C6 FEC1                                            inc     cl                                              ;next column
  4722 000012C8 C3                                              ret                                                     ;return
  4723                                  ;-----------------------------------------------------------------------------------------------------------------------
  4724                                  ;
  4725                                  ;       Routine:        SetConsoleString
  4726                                  ;
  4727                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4728                                  ;
  4729                                  ;       In:             ESI     source offset (DS:)
  4730                                  ;                       CL      column
  4731                                  ;                       CH      row
  4732                                  ;                       ES      CGA selector
  4733                                  ;
  4734                                  ;-----------------------------------------------------------------------------------------------------------------------
  4735 000012C9 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4736 000012CA FC                                              cld                                                     ;forward strings
  4737 000012CB AC                      .10                     lodsb                                                   ;next ASCII character
  4738 000012CC 84C0                                            test    al,al                                           ;end of string?
  4739 000012CE 7407                                            jz      .20                                             ;yes, branch
  4740 000012D0 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4741 000012D5 EBF4                                            jmp     .10                                             ;continue
  4742 000012D7 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4743 000012D8 C3                                              ret                                                     ;return
  4744                                  ;=======================================================================================================================
  4745                                  ;
  4746                                  ;       Input/Output Routines
  4747                                  ;
  4748                                  ;       These routines read and/or write directly to ports.
  4749                                  ;
  4750                                  ;       GetBaseMemSize
  4751                                  ;       GetExtendedMemSize
  4752                                  ;       GetROMMemSize
  4753                                  ;       PlaceCursor
  4754                                  ;       PutPrimaryEndOfInt
  4755                                  ;       PutSecondaryEndOfInt
  4756                                  ;       ReadRealTimeClock
  4757                                  ;       ResetSystem
  4758                                  ;       SetKeyboardLamps
  4759                                  ;       WaitForKeyInBuffer
  4760                                  ;       WaitForKeyOutBuffer
  4761                                  ;
  4762                                  ;=======================================================================================================================
  4763                                  ;-----------------------------------------------------------------------------------------------------------------------
  4764                                  ;
  4765                                  ;       Routine:        GetBaseMemSize
  4766                                  ;
  4767                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4768                                  ;
  4769                                  ;       Output:         EAX     base RAM size in bytes
  4770                                  ;
  4771                                  ;-----------------------------------------------------------------------------------------------------------------------
  4772 000012D9 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4773 000012DB B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4774 000012DD E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4775 000012DF E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4776 000012E1 88C4                                            mov     ah,al                                           ;save base RAM high
  4777 000012E3 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4778 000012E5 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4779 000012E7 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4780 000012E9 C3                                              ret                                                     ;return to caller
  4781                                  ;-----------------------------------------------------------------------------------------------------------------------
  4782                                  ;
  4783                                  ;       Routine:        GetExtendedMemSize
  4784                                  ;
  4785                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4786                                  ;
  4787                                  ;       Output:         EAX     extended RAM size in bytes
  4788                                  ;
  4789                                  ;-----------------------------------------------------------------------------------------------------------------------
  4790 000012EA 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4791 000012EC B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4792 000012EE E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4793 000012F0 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4794 000012F2 88C4                                            mov     ah,al                                           ;save extended RAM high
  4795 000012F4 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4796 000012F6 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4797 000012F8 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4798 000012FA C3                                              ret                                                     ;return to caller
  4799                                  ;-----------------------------------------------------------------------------------------------------------------------
  4800                                  ;
  4801                                  ;       Routine:        GetROMMemSize
  4802                                  ;
  4803                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4804                                  ;
  4805                                  ;       Output:         EAX     RAM size in bytes
  4806                                  ;
  4807                                  ;-----------------------------------------------------------------------------------------------------------------------
  4808 000012FB 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4809 000012FD 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4810 00001303 C3                                              ret                                                     ;return
  4811                                  ;-----------------------------------------------------------------------------------------------------------------------
  4812                                  ;
  4813                                  ;       Routine:        PlaceCursor
  4814                                  ;
  4815                                  ;       Description:    This routine positions the cursor on the console.
  4816                                  ;
  4817                                  ;       In:             DS      OS data selector
  4818                                  ;
  4819                                  ;-----------------------------------------------------------------------------------------------------------------------
  4820 00001304 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4821 00001305 A015080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4822 0000130A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4823 0000130C F6E4                                            mul     ah                                              ;row offset
  4824 0000130E 020514080000                                    add     al,[wbConsoleColumn]                            ;add column
  4825 00001314 80D400                                          adc     ah,0                                            ;add overflow
  4826 00001317 89C1                                            mov     ecx,eax                                         ;screen offset
  4827 00001319 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4828 0000131B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4829 0000131D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4830 0000131F EE                                              out     dx,al                                           ;select register
  4831 00001320 42                                              inc     edx                                             ;data port
  4832 00001321 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4833 00001323 EE                                              out     dx,al                                           ;store hi-order loc
  4834 00001324 4A                                              dec     edx                                             ;register select port
  4835 00001325 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4836 00001327 EE                                              out     dx,al                                           ;select register
  4837 00001328 42                                              inc     edx                                             ;data port
  4838 00001329 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4839 0000132B EE                                              out     dx,al                                           ;store lo-order loc
  4840 0000132C 59                                              pop     ecx                                             ;restore non-volatile regs
  4841 0000132D C3                                              ret                                                     ;return
  4842                                  ;-----------------------------------------------------------------------------------------------------------------------
  4843                                  ;
  4844                                  ;       Routine:        PutPrimaryEndOfInt
  4845                                  ;
  4846                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4847                                  ;
  4848                                  ;-----------------------------------------------------------------------------------------------------------------------
  4849 0000132E FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4850 0000132F B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4851 00001331 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4852 00001333 C3                                              ret                                                     ;return
  4853                                  ;-----------------------------------------------------------------------------------------------------------------------
  4854                                  ;
  4855                                  ;       Routine:        PutSecondaryEndOfInt
  4856                                  ;
  4857                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4858                                  ;
  4859                                  ;-----------------------------------------------------------------------------------------------------------------------
  4860 00001334 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4861 00001335 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4862 00001337 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4863 00001339 C3                                              ret                                                     ;return
  4864                                  ;-----------------------------------------------------------------------------------------------------------------------
  4865                                  ;
  4866                                  ;       Routine:        ReadRealTimeClock
  4867                                  ;
  4868                                  ;       Description:    This routine gets current date time from the real-time clock.
  4869                                  ;
  4870                                  ;       In:             DS:EBX  DATETIME structure
  4871                                  ;
  4872                                  ;-----------------------------------------------------------------------------------------------------------------------
  4873 0000133A 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4874 0000133B 57                                              push    edi                                             ;
  4875 0000133C 06                                              push    es                                              ;
  4876 0000133D 1E                                              push    ds                                              ;store data selector ...
  4877 0000133E 07                                              pop     es                                              ;... in es register
  4878 0000133F 89DF                                            mov     edi,ebx                                         ;date-time structure
  4879 00001341 B000                                            mov     al,ERTCSECONDREG                                ;second register
  4880 00001343 E670                                            out     ERTCREGPORT,al                                  ;select second register
  4881 00001345 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4882 00001347 FC                                              cld                                                     ;forward strings
  4883 00001348 AA                                              stosb                                                   ;store second value
  4884 00001349 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4885 0000134B E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4886 0000134D E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4887 0000134F AA                                              stosb                                                   ;store minute value
  4888 00001350 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4889 00001352 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4890 00001354 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4891 00001356 AA                                              stosb                                                   ;store hour value
  4892 00001357 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4893 00001359 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4894 0000135B E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4895 0000135D AA                                              stosb                                                   ;store weekday value
  4896 0000135E B007                                            mov     al,ERTCDAYREG                                   ;day register
  4897 00001360 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4898 00001362 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4899 00001364 AA                                              stosb                                                   ;store day value
  4900 00001365 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4901 00001367 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4902 00001369 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4903 0000136B AA                                              stosb                                                   ;store month value
  4904 0000136C B009                                            mov     al,ERTCYEARREG                                  ;year register
  4905 0000136E E670                                            out     ERTCREGPORT,al                                  ;select year register
  4906 00001370 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4907 00001372 AA                                              stosb                                                   ;store year value
  4908 00001373 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4909 00001375 E670                                            out     ERTCREGPORT,al                                  ;select century register
  4910 00001377 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4911 00001379 AA                                              stosb                                                   ;store century value
  4912 0000137A B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  4913 0000137C E670                                            out     ERTCREGPORT,al                                  ;select status register
  4914 0000137E E471                                            in      al,ERTCDATAPORT                                 ;read status register
  4915 00001380 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  4916 00001382 751D                                            jnz     .20                                             ;skip ahead if binary values
  4917 00001384 89DE                                            mov     esi,ebx                                         ;date-time structure address
  4918 00001386 89DF                                            mov     edi,ebx                                         ;date-time structure address
  4919 00001388 B908000000                                      mov     ecx,8                                           ;loop counter
  4920 0000138D AC                      .10                     lodsb                                                   ;BCD value
  4921 0000138E 88C4                                            mov     ah,al                                           ;BCD value
  4922 00001390 240F                                            and     al,00001111b                                    ;low-order decimal zone
  4923 00001392 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  4924 00001395 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  4925 00001397 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  4926 00001399 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  4927 0000139C 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  4928 0000139E AA                                              stosb                                                   ;replace BCD with binary
  4929 0000139F E2EC                                            loop    .10                                             ;next value
  4930 000013A1 07                      .20                     pop     es                                              ;restore non-volatile regs
  4931 000013A2 5F                                              pop     edi                                             ;
  4932 000013A3 5E                                              pop     esi                                             ;
  4933 000013A4 C3                                              ret                                                     ;return
  4934                                  ;-----------------------------------------------------------------------------------------------------------------------
  4935                                  ;
  4936                                  ;       Routine:        ResetSystem
  4937                                  ;
  4938                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4939                                  ;
  4940                                  ;       Out:            N/A     This routine does not return.
  4941                                  ;
  4942                                  ;-----------------------------------------------------------------------------------------------------------------------
  4943 000013A5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4944 000013AA E2FE                                            loop    $                                               ;clear interrupts
  4945 000013AC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4946 000013AE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4947 000013B0 FB                      .10                     sti                                                     ;enable maskable interrupts
  4948 000013B1 F4                                              hlt                                                     ;halt until interrupt
  4949 000013B2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4950                                  ;-----------------------------------------------------------------------------------------------------------------------
  4951                                  ;
  4952                                  ;       Routine:        SetKeyboardLamps
  4953                                  ;
  4954                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4955                                  ;
  4956                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4957                                  ;
  4958                                  ;-----------------------------------------------------------------------------------------------------------------------
  4959 000013B4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4960 000013B9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4961 000013BB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4962 000013BD E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4963 000013C2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4964 000013C4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4965 000013C9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  4966 000013CB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  4967 000013CD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4968 000013D2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4969 000013D4 C3                                              ret                                                     ;return
  4970                                  ;-----------------------------------------------------------------------------------------------------------------------
  4971                                  ;
  4972                                  ;       Routine:        WaitForKeyInBuffer
  4973                                  ;
  4974                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4975                                  ;
  4976                                  ;       Out:            ZF      1 = Input buffer ready
  4977                                  ;                               0 = Input buffer not ready after timeout
  4978                                  ;
  4979                                  ;-----------------------------------------------------------------------------------------------------------------------
  4980 000013D5 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4981 000013D6 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4982 000013DB E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4983 000013DD A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  4984 000013DF E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  4985 000013E1 59                                              pop     ecx                                             ;restore non-volatile regs
  4986 000013E2 C3                                              ret                                                     ;return
  4987                                  ;-----------------------------------------------------------------------------------------------------------------------
  4988                                  ;
  4989                                  ;       Routine:        WaitForKeyOutBuffer
  4990                                  ;
  4991                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4992                                  ;
  4993                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4994                                  ;                               0 = Output buffer empty after timeout
  4995                                  ;
  4996                                  ;-----------------------------------------------------------------------------------------------------------------------
  4997 000013E3 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4998 000013E4 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4999 000013E9 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5000 000013EB A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5001 000013ED E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5002 000013EF 59                                              pop     ecx                                             ;restore non-volatile regs
  5003 000013F0 C3                                              ret                                                     ;return
  5004                                  ;-----------------------------------------------------------------------------------------------------------------------
  5005                                  ;
  5006                                  ;       End of the Kernel Function Library
  5007                                  ;
  5008                                  ;-----------------------------------------------------------------------------------------------------------------------
  5009 000013F1 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5010                                  ;=======================================================================================================================
  5011                                  ;
  5012                                  ;       Console Task
  5013                                  ;
  5014                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5015                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5016                                  ;       screen and responds to user commands.
  5017                                  ;
  5018                                  ;=======================================================================================================================
  5019                                  ;-----------------------------------------------------------------------------------------------------------------------
  5020                                  ;
  5021                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5022                                  ;
  5023                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5024                                  ;
  5025                                  ;-----------------------------------------------------------------------------------------------------------------------
  5026                                  section                 constack                                                ;console task stack
  5027 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5028                                  ;-----------------------------------------------------------------------------------------------------------------------
  5029                                  ;
  5030                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5031                                  ;
  5032                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5033                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5034                                  ;       16 descriptors. Six are initially defined.
  5035                                  ;
  5036                                  ;-----------------------------------------------------------------------------------------------------------------------
  5037                                  section                 conldt                                                  ;console local descriptors
  5038 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5039 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5040 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5041 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5042 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5043 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5044 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5045                                  ;-----------------------------------------------------------------------------------------------------------------------
  5046                                  ;
  5047                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5048                                  ;
  5049                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5050                                  ;       segment. CS to console code.
  5051                                  ;
  5052                                  ;-----------------------------------------------------------------------------------------------------------------------
  5053                                  section                 contss                                                  ;console task state segment
  5054 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5055 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5056 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5057 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5058 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5059 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5060 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5061 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5062 00000020 00000000                                        dd      0                                               ;20 eip
  5063 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5064 00000028 00000000                                        dd      0                                               ;28 eax
  5065 0000002C 00000000                                        dd      0                                               ;2c ecx
  5066 00000030 00000000                                        dd      0                                               ;30 edx
  5067 00000034 00000000                                        dd      0                                               ;34 ebx
  5068 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5069 0000003C 00000000                                        dd      0                                               ;3c ebp
  5070 00000040 00000000                                        dd      0                                               ;40 esi
  5071 00000044 00000000                                        dd      0                                               ;44 edi
  5072 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5073 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5074 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5075 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5076 00000058 00000000                                        dd      0                                               ;58 fs
  5077 0000005C 00000000                                        dd      0                                               ;5c gs
  5078 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5079 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5080                                  ;-----------------------------------------------------------------------------------------------------------------------
  5081                                  ;
  5082                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5083                                  ;
  5084                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5085                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5086                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5087                                  ;       event.
  5088                                  ;
  5089                                  ;-----------------------------------------------------------------------------------------------------------------------
  5090                                  section                 conmque                                                 ;console message queue
  5091 00000000 08000000                                        dd      8                                               ;head pointer
  5092 00000004 08000000                                        dd      8                                               ;tail pointer
  5093 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5094                                  ;-----------------------------------------------------------------------------------------------------------------------
  5095                                  ;
  5096                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5097                                  ;
  5098                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5099                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5100                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5101                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5102                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5103                                  ;       board input, echoing to the console screen and responding to user commands.
  5104                                  ;
  5105                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5106                                  ;
  5107                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5108                                  ;                               |  Real Mode Interrupt Vectors                  |
  5109                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5110                                  ;                               |  Reserved BIOS Memory Area                    |
  5111                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5112                                  ;                               |  Shared Kernel Memory Area                    |
  5113                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5114                                  ;                               |  Global Descriptor Table (GDT)                |
  5115                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5116                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5117                                  ;                       002000  +-----------------------------------------------+
  5118                                  ;                               |  Interrupt Handlers                           |
  5119                                  ;                               |  Kernel Function Library                      |
  5120                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5121                                  ;                               |  Console Task Stack Area                      |
  5122                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5123                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5124                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5125                                  ;                               |  Console Task Task State Segment (TSS)        |
  5126                                  ;                       004800  +-----------------------------------------------+
  5127                                  ;                               |  Console Task Message Queue                   |
  5128                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5129                                  ;                               |  Console Task Code                            |
  5130                                  ;                               |  Console Task Constants                       |
  5131                                  ;                       006000  +===============================================+
  5132                                  ;
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5135 00000000 E8D9000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5136                                  
  5137                                                          clearConsoleScreen                                      ;clear the console screen
  5137 00000005 B001                <1>  mov al,eClearConsoleScreen
  5137 00000007 CD30                <1>  int _svc
  5138                                                          putConsoleString czTitle                                ;display startup message
  5138 00000009 BA[7D060000]        <1>  mov edx,%1
  5138 0000000E B00C                <1>  mov al,ePutConsoleString
  5138 00000010 CD30                <1>  int _svc
  5139                                                          putConsoleString czROMMem                               ;ROM memory label
  5139 00000012 BA[5A060000]        <1>  mov edx,%1
  5139 00000017 B00C                <1>  mov al,ePutConsoleString
  5139 00000019 CD30                <1>  int _svc
  5140                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5140 0000001B BA1B090000          <1>  mov edx,%1
  5140 00000020 B00C                <1>  mov al,ePutConsoleString
  5140 00000022 CD30                <1>  int _svc
  5141                                                          putConsoleString czKB                                   ;Kilobytes
  5141 00000024 BA[4D060000]        <1>  mov edx,%1
  5141 00000029 B00C                <1>  mov al,ePutConsoleString
  5141 0000002B CD30                <1>  int _svc
  5142                                                          putConsoleString czNewLine                              ;new line
  5142 0000002D BA[50060000]        <1>  mov edx,%1
  5142 00000032 B00C                <1>  mov al,ePutConsoleString
  5142 00000034 CD30                <1>  int _svc
  5143                                                          putConsoleString czBaseMem                              ;base memory label
  5143 00000036 BA[2D060000]        <1>  mov edx,%1
  5143 0000003B B00C                <1>  mov al,ePutConsoleString
  5143 0000003D CD30                <1>  int _svc
  5144                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5144 0000003F BA10090000          <1>  mov edx,%1
  5144 00000044 B00C                <1>  mov al,ePutConsoleString
  5144 00000046 CD30                <1>  int _svc
  5145                                                          putConsoleString czKB                                   ;Kilobytes
  5145 00000048 BA[4D060000]        <1>  mov edx,%1
  5145 0000004D B00C                <1>  mov al,ePutConsoleString
  5145 0000004F CD30                <1>  int _svc
  5146                                                          putConsoleString czNewLine                              ;new line
  5146 00000051 BA[50060000]        <1>  mov edx,%1
  5146 00000056 B00C                <1>  mov al,ePutConsoleString
  5146 00000058 CD30                <1>  int _svc
  5147                                                          putConsoleString czExtendedMem                          ;extended memory label
  5147 0000005A BA[3B060000]        <1>  mov edx,%1
  5147 0000005F B00C                <1>  mov al,ePutConsoleString
  5147 00000061 CD30                <1>  int _svc
  5148                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5148 00000063 BA26090000          <1>  mov edx,%1
  5148 00000068 B00C                <1>  mov al,ePutConsoleString
  5148 0000006A CD30                <1>  int _svc
  5149                                                          putConsoleString czKB                                   ;Kilobytes
  5149 0000006C BA[4D060000]        <1>  mov edx,%1
  5149 00000071 B00C                <1>  mov al,ePutConsoleString
  5149 00000073 CD30                <1>  int _svc
  5150                                                          putConsoleString czNewLine                              ;new line
  5150 00000075 BA[50060000]        <1>  mov edx,%1
  5150 0000007A B00C                <1>  mov al,ePutConsoleString
  5150 0000007C CD30                <1>  int _svc
  5151                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5151                              <1> .10 :
  5151 0000007E BA[58060000]        <1>  mov edx,%1
  5151 00000083 B00C                <1>  mov al,ePutConsoleString
  5151 00000085 CD30                <1>  int _svc
  5152                                                          placeCursor                                             ;set CRT cursor location
  5152 00000087 B00B                <1>  mov al,ePlaceCursor
  5152 00000089 CD30                <1>  int _svc
  5153                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5153 0000008B BA20080000          <1>  mov edx,%1
  5153 00000090 B94F000000          <1>  mov ecx,%2
  5153 00000095 B701                <1>  mov bh,%3
  5153 00000097 B30D                <1>  mov bl,%4
  5153 00000099 B006                <1>  mov al,eGetConsoleString
  5153 0000009B CD30                <1>  int _svc
  5154                                                          putConsoleString czNewLine                              ;newline
  5154 0000009D BA[50060000]        <1>  mov edx,%1
  5154 000000A2 B00C                <1>  mov al,ePutConsoleString
  5154 000000A4 CD30                <1>  int _svc
  5155                                  
  5156 000000A6 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5157 000000AB BB70080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5158 000000B0 E8BB000000                                      call    ConTakeToken                                    ;handle console input
  5159 000000B5 BA70080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5160 000000BA E8E6000000                                      call    ConDetermineCommand                             ;determine command number
  5161 000000BF 83F818                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5162 000000C2 720B                                            jb      .20                                             ;yes, branch
  5163                                  
  5164                                                          putConsoleString czUnknownCommand                       ;display error message
  5164 000000C4 BA[9B060000]        <1>  mov edx,%1
  5164 000000C9 B00C                <1>  mov al,ePutConsoleString
  5164 000000CB CD30                <1>  int _svc
  5165                                  
  5166 000000CD EBAF                                            jmp     .10                                             ;next command
  5167 000000CF C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5168 000000D2 BA[17050000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5169 000000D7 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5170 000000DA FFD0                                            call    eax                                             ;call command handler
  5171 000000DC EBA0                                            jmp     .10                                             ;next command
  5172                                  ;-----------------------------------------------------------------------------------------------------------------------
  5173                                  ;
  5174                                  ;       Routine:        ConInitializeData
  5175                                  ;
  5176                                  ;       Description:    This routine initializes console task variables.
  5177                                  ;
  5178                                  ;-----------------------------------------------------------------------------------------------------------------------
  5179 000000DE 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5180 000000DF 57                                              push    edi                                             ;
  5181 000000E0 06                                              push    es                                              ;
  5182                                  ;
  5183                                  ;       Initialize console work areas.
  5184                                  ;
  5185 000000E1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5186 000000E3 07                                              pop     es                                              ;... into extra segment register
  5187 000000E4 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5188 000000E9 30C0                                            xor     al,al                                           ;initialization value
  5189 000000EB B951010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5190 000000F0 FC                                              cld                                                     ;forward strings
  5191 000000F1 F3AA                                            rep     stosb                                           ;initialize data
  5192                                  ;
  5193                                  ;       Initialize heap size
  5194                                  ;
  5195 000000F3 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5196 000000F8 A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5197                                  ;
  5198                                  ;       Initialize MEMROOT structure
  5199                                  ;
  5200 000000FD BF31090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5201 00000102 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5202 00000107 31C9                                            xor     ecx,ecx                                         ;zero register
  5203 00000109 B104                                            mov     cl,4                                            ;count
  5204 0000010B F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5205 0000010D 31C0                                            xor     eax,eax                                         ;zero register
  5206 0000010F AB                                              stosd                                                   ;zero first task block
  5207 00000110 AB                                              stosd                                                   ;zero last task block
  5208                                  ;
  5209                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5210                                  ;
  5211 00000111 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5212 00000116 B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5213 0000011B AB                                              stosd                                                   ;store signature
  5214 0000011C B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5215 00000121 AB                                              stosd                                                   ;store block size
  5216 00000122 31C9                                            xor     ecx,ecx                                         ;zero register
  5217 00000124 B106                                            mov     cl,6                                            ;count
  5218 00000126 31C0                                            xor     eax,eax                                         ;zero register
  5219 00000128 F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5220                                  ;
  5221                                  ;       Read memory sizes from ROM
  5222                                  ;
  5223                                                          getROMMemSize                                           ;get ROM memory size
  5223 0000012A B008                <1>  mov al,eGetROMMemSize
  5223 0000012C CD30                <1>  int _svc
  5224 0000012E A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5225 00000133 89C1                                            mov     ecx,eax                                         ;integer param
  5226 00000135 BA1B090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5227 0000013A B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5228                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5228 0000013C B01A                <1>  mov al,eUnsignedToDecimalString
  5228 0000013E CD30                <1>  int _svc
  5229                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5229 00000140 B005                <1>  mov al,eGetBaseMemSize
  5229 00000142 CD30                <1>  int _svc
  5230 00000144 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5231 00000149 89C1                                            mov     ecx,eax                                         ;integer param
  5232 0000014B BA10090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5233 00000150 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5234                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5234 00000152 B01A                <1>  mov al,eUnsignedToDecimalString
  5234 00000154 CD30                <1>  int _svc
  5235                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5235 00000156 B007                <1>  mov al,eGetExtendedMemSize
  5235 00000158 CD30                <1>  int _svc
  5236 0000015A A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5237 0000015F 89C1                                            mov     ecx,eax                                         ;integer param
  5238 00000161 BA26090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5239 00000166 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5240                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5240 00000168 B01A                <1>  mov al,eUnsignedToDecimalString
  5240 0000016A CD30                <1>  int _svc
  5241                                  ;
  5242                                  ;       Restore and return.
  5243                                  ;
  5244 0000016C 07                                              pop     es                                              ;restore non-volatile regs
  5245 0000016D 5F                                              pop     edi                                             ;
  5246 0000016E 59                                              pop     ecx                                             ;
  5247 0000016F C3                                              ret                                                     ;return
  5248                                  ;-----------------------------------------------------------------------------------------------------------------------
  5249                                  ;
  5250                                  ;       Routine:        ConTakeToken
  5251                                  ;
  5252                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5253                                  ;
  5254                                  ;       In:             DS:EDX  source buffer address
  5255                                  ;                       DS:EBX  target buffer address
  5256                                  ;
  5257                                  ;       Out:            DS:EDX  source buffer address
  5258                                  ;                       DS:EBX  target buffer address
  5259                                  ;
  5260                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5261                                  ;
  5262                                  ;-----------------------------------------------------------------------------------------------------------------------
  5263 00000170 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5264 00000171 57                                              push    edi                                             ;
  5265 00000172 06                                              push    es                                              ;
  5266 00000173 1E                                              push    ds                                              ;load data segment selector ...
  5267 00000174 07                                              pop     es                                              ;... into extra segment reg
  5268 00000175 89D6                                            mov     esi,edx                                         ;source buffer address
  5269 00000177 89DF                                            mov     edi,ebx                                         ;target buffer address
  5270 00000179 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5271 0000017C FC                                              cld                                                     ;forward strings
  5272 0000017D AC                      .10                     lodsb                                                   ;load byte
  5273 0000017E 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5274 00000180 74FB                                            je      .10                                             ;yes, continue
  5275 00000182 84C0                                            test    al,al                                           ;end of line?
  5276 00000184 7410                                            jz      .40                                             ;yes, branch
  5277 00000186 AA                      .20                     stosb                                                   ;store byte
  5278 00000187 AC                                              lodsb                                                   ;load byte
  5279 00000188 84C0                                            test    al,al                                           ;end of line?
  5280 0000018A 740A                                            jz      .40                                             ;no, continue
  5281 0000018C 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5282 0000018E 75F6                                            jne     .20                                             ;no, continue
  5283 00000190 AC                      .30                     lodsb                                                   ;load byte
  5284 00000191 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5285 00000193 74FB                                            je      .30                                             ;yes, continue
  5286 00000195 4E                                              dec     esi                                             ;pre-position
  5287 00000196 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5288 00000199 89D7                                            mov     edi,edx                                         ;source buffer address
  5289 0000019B AC                      .50                     lodsb                                                   ;remaining byte
  5290 0000019C AA                                              stosb                                                   ;move to front of buffer
  5291 0000019D 84C0                                            test    al,al                                           ;end of line?
  5292 0000019F 75FA                                            jnz     .50                                             ;no, continue
  5293 000001A1 07                                              pop     es                                              ;restore non-volatile regs
  5294 000001A2 5F                                              pop     edi                                             ;
  5295 000001A3 5E                                              pop     esi                                             ;
  5296 000001A4 C3                                              ret                                                     ;return
  5297                                  ;-----------------------------------------------------------------------------------------------------------------------
  5298                                  ;
  5299                                  ;       Routine:        ConDetermineCommand
  5300                                  ;
  5301                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5302                                  ;
  5303                                  ;       input:          DS:EDX  command address
  5304                                  ;
  5305                                  ;       output:         EAX     >=0     = command nbr
  5306                                  ;                               0       = unknown command
  5307                                  ;
  5308                                  ;-----------------------------------------------------------------------------------------------------------------------
  5309 000001A5 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5310 000001A6 51                                              push    ecx                                             ;
  5311 000001A7 56                                              push    esi                                             ;
  5312 000001A8 57                                              push    edi                                             ;
  5313                                  
  5314                                                          upperCaseString                                         ;upper-case string at EDX
  5314 000001A9 B01C                <1>  mov al,eUpperCaseString
  5314 000001AB CD30                <1>  int _svc
  5315                                  
  5316 000001AD BE[77050000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5317 000001B2 31FF                                            xor     edi,edi                                         ;intialize command number
  5318 000001B4 FC                                              cld                                                     ;forward strings
  5319 000001B5 AC                      .10                     lodsb                                                   ;command length
  5320 000001B6 0FB6C8                                          movzx   ecx,al                                          ;command length
  5321 000001B9 E30D                                            jecxz   .20                                             ;branch if end of table
  5322 000001BB 89F3                                            mov     ebx,esi                                         ;table entry address
  5323 000001BD 01CE                                            add     esi,ecx                                         ;next table entry address
  5324                                  
  5325                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5325 000001BF B002                <1>  mov al,eCompareMemory
  5325 000001C1 CD30                <1>  int _svc
  5326                                  
  5327 000001C3 E303                                            jecxz   .20                                             ;branch if equal
  5328 000001C5 47                                              inc     edi                                             ;increment command nbr
  5329 000001C6 EBED                                            jmp     .10                                             ;repeat
  5330 000001C8 89F8                    .20                     mov     eax,edi                                         ;command number
  5331 000001CA 5F                                              pop     edi                                             ;restore non-volatile regs
  5332 000001CB 5E                                              pop     esi                                             ;
  5333 000001CC 59                                              pop     ecx                                             ;
  5334 000001CD 5B                                              pop     ebx                                             ;
  5335 000001CE C3                                              ret                                                     ;return
  5336                                  ;-----------------------------------------------------------------------------------------------------------------------
  5337                                  ;
  5338                                  ;       Routine:        ConClear
  5339                                  ;
  5340                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5341                                  ;
  5342                                  ;-----------------------------------------------------------------------------------------------------------------------
  5343                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5343                              <1> ConClear :
  5343 000001CF B001                <1>  mov al,eClearConsoleScreen
  5343 000001D1 CD30                <1>  int _svc
  5344 000001D3 C3                                              ret                                                     ;return
  5345                                  ;-----------------------------------------------------------------------------------------------------------------------
  5346                                  ;
  5347                                  ;       Routine:        ConDate
  5348                                  ;
  5349                                  ;       Description:    This routine handles the DATE command.
  5350                                  ;
  5351                                  ;-----------------------------------------------------------------------------------------------------------------------
  5352                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5352                              <1> ConDate :
  5352 000001D4 BB49090000          <1>  mov ebx,%1
  5352 000001D9 B018                <1>  mov al,eReadRealTimeClock
  5352 000001DB CD30                <1>  int _svc
  5353                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5353 000001DD BB49090000          <1>  mov ebx,%1
  5353 000001E2 BAC0080000          <1>  mov edx,%2
  5353 000001E7 B00D                <1>  mov al,ePutDateString
  5353 000001E9 CD30                <1>  int _svc
  5354                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5354 000001EB BAC0080000          <1>  mov edx,%1
  5354 000001F0 B00C                <1>  mov al,ePutConsoleString
  5354 000001F2 CD30                <1>  int _svc
  5355                                                          putConsoleString  czNewLine                             ;write newline to console
  5355 000001F4 BA[50060000]        <1>  mov edx,%1
  5355 000001F9 B00C                <1>  mov al,ePutConsoleString
  5355 000001FB CD30                <1>  int _svc
  5356 000001FD C3                                              ret                                                     ;return
  5357                                  ;-----------------------------------------------------------------------------------------------------------------------
  5358                                  ;
  5359                                  ;       Routine:        ConDay
  5360                                  ;
  5361                                  ;       Description:    This routine handles the DAY command.
  5362                                  ;
  5363                                  ;-----------------------------------------------------------------------------------------------------------------------
  5364                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5364                              <1> ConDay :
  5364 000001FE BB49090000          <1>  mov ebx,%1
  5364 00000203 B018                <1>  mov al,eReadRealTimeClock
  5364 00000205 CD30                <1>  int _svc
  5365                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5365 00000207 BB49090000          <1>  mov ebx,%1
  5365 0000020C BAC0080000          <1>  mov edx,%2
  5365 00000211 B00E                <1>  mov al,ePutDayString
  5365 00000213 CD30                <1>  int _svc
  5366                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5366 00000215 BAC0080000          <1>  mov edx,%1
  5366 0000021A B00C                <1>  mov al,ePutConsoleString
  5366 0000021C CD30                <1>  int _svc
  5367                                                          putConsoleString  czNewLine                             ;write newline to console
  5367 0000021E BA[50060000]        <1>  mov edx,%1
  5367 00000223 B00C                <1>  mov al,ePutConsoleString
  5367 00000225 CD30                <1>  int _svc
  5368 00000227 C3                                              ret                                                     ;return
  5369                                  ;-----------------------------------------------------------------------------------------------------------------------
  5370                                  ;
  5371                                  ;       Routine:        ConExit
  5372                                  ;
  5373                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5374                                  ;
  5375                                  ;-----------------------------------------------------------------------------------------------------------------------
  5376                                  ConExit                 resetSystem                                             ;issue system reset
  5376                              <1> ConExit :
  5376 00000228 B019                <1>  mov al,eResetSystem
  5376 0000022A CD30                <1>  int _svc
  5377 0000022C C3                                              ret                                                     ;return
  5378                                  ;-----------------------------------------------------------------------------------------------------------------------
  5379                                  ;
  5380                                  ;       Routine:        ConFree
  5381                                  ;
  5382                                  ;       Description:    This routine handles the FREE command.
  5383                                  ;
  5384                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5385                                  ;
  5386                                  ;-----------------------------------------------------------------------------------------------------------------------
  5387 0000022D 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5388 0000022E 51                                              push    ecx                                             ;
  5389 0000022F 56                                              push    esi                                             ;
  5390 00000230 57                                              push    edi                                             ;
  5391                                  ;
  5392                                  ;       Get address parameter
  5393                                  ;
  5394 00000231 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5395 00000236 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5396 0000023B E830FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5397                                  ;
  5398                                  ;       Convert input parameter from hexadecimal string to binary
  5399                                  ;
  5400 00000240 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5401 00000247 7421                                            je      .10                                             ;no, branch
  5402 00000249 BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5403                                  
  5404                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5404 0000024E B009                <1>  mov al,eHexadecimalToUnsigned
  5404 00000250 CD30                <1>  int _svc
  5405                                  
  5406 00000252 85C0                                            test    eax,eax                                         ;valid parameter?
  5407 00000254 7414                                            jz      .10                                             ;no, branch
  5408                                  ;
  5409                                  ;       Free memory block
  5410                                  ;
  5411                                                          freeMemory eax                                          ;free memory
  5411 00000256 89C2                <1>  mov edx,%1
  5411 00000258 B004                <1>  mov al,eFreeMemory
  5411 0000025A CD30                <1>  int _svc
  5412                                  
  5413 0000025C 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5414 0000025F 7409                                            je      .10                                             ;no, branch
  5415                                  ;
  5416                                  ;       Indicate memory freed
  5417                                  ;
  5418                                                          putConsoleString czOK                                   ;indicate success
  5418 00000261 BA[53060000]        <1>  mov edx,%1
  5418 00000266 B00C                <1>  mov al,ePutConsoleString
  5418 00000268 CD30                <1>  int _svc
  5419                                  ;
  5420                                  ;       Restore and return
  5421                                  ;
  5422 0000026A 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5423 0000026B 5E                                              pop     esi                                             ;
  5424 0000026C 59                                              pop     ecx                                             ;
  5425 0000026D 5B                                              pop     ebx                                             ;
  5426 0000026E C3                                              ret                                                     ;return
  5427                                  ;-----------------------------------------------------------------------------------------------------------------------
  5428                                  ;
  5429                                  ;       Routine:        ConHour
  5430                                  ;
  5431                                  ;       Description:    This routine Handles the HOUR command.
  5432                                  ;
  5433                                  ;-----------------------------------------------------------------------------------------------------------------------
  5434                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5434                              <1> ConHour :
  5434 0000026F BB49090000          <1>  mov ebx,%1
  5434 00000274 B018                <1>  mov al,eReadRealTimeClock
  5434 00000276 CD30                <1>  int _svc
  5435                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5435 00000278 BB49090000          <1>  mov ebx,%1
  5435 0000027D BAC0080000          <1>  mov edx,%2
  5435 00000282 B00F                <1>  mov al,ePutHourString
  5435 00000284 CD30                <1>  int _svc
  5436                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5436 00000286 BAC0080000          <1>  mov edx,%1
  5436 0000028B B00C                <1>  mov al,ePutConsoleString
  5436 0000028D CD30                <1>  int _svc
  5437                                                          putConsoleString  czNewLine                             ;write newline to console
  5437 0000028F BA[50060000]        <1>  mov edx,%1
  5437 00000294 B00C                <1>  mov al,ePutConsoleString
  5437 00000296 CD30                <1>  int _svc
  5438 00000298 C3                                              ret                                                     ;return
  5439                                  ;-----------------------------------------------------------------------------------------------------------------------
  5440                                  ;
  5441                                  ;       Routine:        ConInt6
  5442                                  ;
  5443                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5444                                  ;
  5445                                  ;-----------------------------------------------------------------------------------------------------------------------
  5446 00000299 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5447 0000029B C3                                              ret                                                     ;return (not executed)
  5448                                  ;-----------------------------------------------------------------------------------------------------------------------
  5449                                  ;
  5450                                  ;       Routine:        ConMalloc
  5451                                  ;
  5452                                  ;       Description:    This routine handles the MALLOC command.
  5453                                  ;
  5454                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5455                                  ;
  5456                                  ;-----------------------------------------------------------------------------------------------------------------------
  5457 0000029C 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5458 0000029D 51                                              push    ecx                                             ;
  5459 0000029E 56                                              push    esi                                             ;
  5460 0000029F 57                                              push    edi                                             ;
  5461                                  ;
  5462                                  ;       Get size parameter
  5463                                  ;
  5464 000002A0 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5465 000002A5 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5466 000002AA E8C1FEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5467                                  ;
  5468                                  ;       Convert input parameter from decimal string to binary
  5469                                  ;
  5470 000002AF 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5471 000002B6 7434                                            je      .10                                             ;no, branch
  5472 000002B8 BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5473                                  
  5474                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5474 000002BD B003                <1>  mov al,eDecimalToUnsigned
  5474 000002BF CD30                <1>  int _svc
  5475                                  
  5476 000002C1 85C0                                            test    eax,eax                                         ;valid parameter?
  5477 000002C3 7427                                            jz      .10                                             ;no, branch
  5478                                  ;
  5479                                  ;       Allocate memory block
  5480                                  ;
  5481                                                          allocateMemory eax                                      ;allocate memory
  5481 000002C5 89C1                <1>  mov ecx,%1
  5481 000002C7 B000                <1>  mov al,eAllocateMemory
  5481 000002C9 CD30                <1>  int _svc
  5482                                  
  5483 000002CB 85C0                                            test    eax,eax                                         ;memory allocated?
  5484 000002CD 741D                                            jz      .10                                             ;no, branch
  5485                                  ;
  5486                                  ;       Report allocated memory block address
  5487                                  ;
  5488 000002CF BAC0080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5489 000002D4 89C1                                            mov     ecx,eax                                         ;memory address
  5490                                  
  5491                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5491 000002D6 B01B                <1>  mov al,eUnsignedToHexadecimal
  5491 000002D8 CD30                <1>  int _svc
  5492                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5492 000002DA BAC0080000          <1>  mov edx,%1
  5492 000002DF B00C                <1>  mov al,ePutConsoleString
  5492 000002E1 CD30                <1>  int _svc
  5493                                                          putConsoleString czNewLine                              ;display new line
  5493 000002E3 BA[50060000]        <1>  mov edx,%1
  5493 000002E8 B00C                <1>  mov al,ePutConsoleString
  5493 000002EA CD30                <1>  int _svc
  5494                                  
  5495 000002EC 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5496 000002ED 5E                                              pop     esi                                             ;
  5497 000002EE 59                                              pop     ecx                                             ;
  5498 000002EF 5B                                              pop     ebx                                             ;
  5499 000002F0 C3                                              ret                                                     ;return
  5500                                  ;-----------------------------------------------------------------------------------------------------------------------
  5501                                  ;
  5502                                  ;       Routine:        ConMem
  5503                                  ;
  5504                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5505                                  ;
  5506                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5507                                  ;
  5508                                  ;-----------------------------------------------------------------------------------------------------------------------
  5509 000002F1 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5510 000002F2 56                                              push    esi                                             ;
  5511 000002F3 57                                              push    edi                                             ;
  5512                                  ;
  5513                                  ;                       update the source address if a parameter is given
  5514                                  ;
  5515 000002F4 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5516 000002F9 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5517 000002FE E86DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5518 00000303 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5519 0000030A 740E                                            je      .10                                             ;no, branch
  5520 0000030C BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5521                                  
  5522                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5522 00000311 B009                <1>  mov al,eHexadecimalToUnsigned
  5522 00000313 CD30                <1>  int _svc
  5523                                  
  5524 00000315 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5525                                  ;
  5526                                  ;                       setup source address and row count
  5527                                  ;
  5528 0000031A 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5529 00000320 31C9                                            xor     ecx,ecx                                         ;zero register
  5530 00000322 B110                                            mov     cl,16                                           ;row count
  5531                                  ;
  5532                                  ;                       start the row with the source address in hexadecimal
  5533                                  ;
  5534 00000324 51                      .20                     push    ecx                                             ;save remaining rows
  5535 00000325 BFC0080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5536 0000032A 89FA                                            mov     edx,edi                                         ;output buffer address
  5537 0000032C 89F1                                            mov     ecx,esi                                         ;console memory address
  5538                                  
  5539                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5539 0000032E B01B                <1>  mov al,eUnsignedToHexadecimal
  5539 00000330 CD30                <1>  int _svc
  5540                                  
  5541 00000332 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5542 00000335 B020                                            mov     al,' '                                          ;ascii space
  5543 00000337 AA                                              stosb                                                   ;store delimiter
  5544                                  ;
  5545                                  ;                       output 16 ASCII hexadecimal byte values for the row
  5546                                  ;
  5547 00000338 31C9                                            xor     ecx,ecx                                         ;zero register
  5548 0000033A B110                                            mov     cl,16                                           ;loop count
  5549 0000033C 51                      .30                     push    ecx                                             ;save loop count
  5550 0000033D AC                                              lodsb                                                   ;memory byte
  5551 0000033E 88C4                                            mov     ah,al                                           ;memory byte
  5552 00000340 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5553 00000343 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5554 00000345 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5555 00000347 7202                                            jb      .40                                             ;yes, skip ahead
  5556 00000349 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5557 0000034B AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5558 0000034C 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5559 0000034E 240F                                            and     al,0fh                                          ;mask out high-order bits
  5560 00000350 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5561 00000352 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5562 00000354 7202                                            jb      .50                                             ;yes, skip ahead
  5563 00000356 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5564 00000358 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5565 00000359 B020                                            mov     al,' '                                          ;ascii space
  5566 0000035B AA                                              stosb                                                   ;store ascii space delimiter
  5567 0000035C 59                                              pop     ecx                                             ;loop count
  5568 0000035D E2DD                                            loop    .30                                             ;next
  5569                                  ;
  5570                                  ;                       output printable ASCII character section for the row
  5571                                  ;
  5572 0000035F 83EE10                                          sub     esi,16                                          ;reset source pointer
  5573 00000362 B110                                            mov     cl,16                                           ;loop count
  5574 00000364 AC                      .60                     lodsb                                                   ;source byte
  5575 00000365 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5576 00000367 7204                                            jb      .70                                             ;no, skip ahead
  5577 00000369 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5578 0000036B 7202                                            jb      .80                                             ;yes, skip ahead
  5579 0000036D B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5580 0000036F AA                      .80                     stosb                                                   ;store printable ascii byte
  5581 00000370 E2F2                                            loop    .60                                             ;next source byte
  5582 00000372 30C0                                            xor     al,al                                           ;nul-terminator
  5583 00000374 AA                                              stosb                                                   ;terminate output line
  5584                                  ;
  5585                                  ;                       display constructed output buffer and newline
  5586                                  ;
  5587                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5587 00000375 BAC0080000          <1>  mov edx,%1
  5587 0000037A B00C                <1>  mov al,ePutConsoleString
  5587 0000037C CD30                <1>  int _svc
  5588                                                          putConsoleString czNewLine                              ;display new line
  5588 0000037E BA[50060000]        <1>  mov edx,%1
  5588 00000383 B00C                <1>  mov al,ePutConsoleString
  5588 00000385 CD30                <1>  int _svc
  5589                                  ;
  5590                                  ;                       repeat until all lines displayed and preserve source address
  5591                                  ;
  5592 00000387 59                                              pop     ecx                                             ;remaining rows
  5593 00000388 E29A                                            loop    .20                                             ;next row
  5594 0000038A 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  5595 00000390 5F                                              pop     edi                                             ;restore regs
  5596 00000391 5E                                              pop     esi                                             ;
  5597 00000392 5B                                              pop     ebx                                             ;
  5598 00000393 C3                                              ret                                                     ;return
  5599                                  ;-----------------------------------------------------------------------------------------------------------------------
  5600                                  ;
  5601                                  ;       Routine:        ConMinute
  5602                                  ;
  5603                                  ;       Description:    This routine Handles the MINUTE command.
  5604                                  ;
  5605                                  ;-----------------------------------------------------------------------------------------------------------------------
  5606                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5606                              <1> ConMinute :
  5606 00000394 BB49090000          <1>  mov ebx,%1
  5606 00000399 B018                <1>  mov al,eReadRealTimeClock
  5606 0000039B CD30                <1>  int _svc
  5607                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5607 0000039D BB49090000          <1>  mov ebx,%1
  5607 000003A2 BAC0080000          <1>  mov edx,%2
  5607 000003A7 B010                <1>  mov al,ePutMinuteString
  5607 000003A9 CD30                <1>  int _svc
  5608                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5608 000003AB BAC0080000          <1>  mov edx,%1
  5608 000003B0 B00C                <1>  mov al,ePutConsoleString
  5608 000003B2 CD30                <1>  int _svc
  5609                                                          putConsoleString  czNewLine                             ;write newline to console
  5609 000003B4 BA[50060000]        <1>  mov edx,%1
  5609 000003B9 B00C                <1>  mov al,ePutConsoleString
  5609 000003BB CD30                <1>  int _svc
  5610 000003BD C3                                              ret                                                     ;return
  5611                                  ;-----------------------------------------------------------------------------------------------------------------------
  5612                                  ;
  5613                                  ;       Routine:        ConMonth
  5614                                  ;
  5615                                  ;       Description:    This routine Handles the MONTH command.
  5616                                  ;
  5617                                  ;-----------------------------------------------------------------------------------------------------------------------
  5618                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5618                              <1> ConMonth :
  5618 000003BE BB49090000          <1>  mov ebx,%1
  5618 000003C3 B018                <1>  mov al,eReadRealTimeClock
  5618 000003C5 CD30                <1>  int _svc
  5619                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5619 000003C7 BB49090000          <1>  mov ebx,%1
  5619 000003CC BAC0080000          <1>  mov edx,%2
  5619 000003D1 B011                <1>  mov al,ePutMonthString
  5619 000003D3 CD30                <1>  int _svc
  5620                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5620 000003D5 BAC0080000          <1>  mov edx,%1
  5620 000003DA B00C                <1>  mov al,ePutConsoleString
  5620 000003DC CD30                <1>  int _svc
  5621                                                          putConsoleString  czNewLine                             ;write newline to console
  5621 000003DE BA[50060000]        <1>  mov edx,%1
  5621 000003E3 B00C                <1>  mov al,ePutConsoleString
  5621 000003E5 CD30                <1>  int _svc
  5622 000003E7 C3                                              ret                                                     ;return
  5623                                  ;-----------------------------------------------------------------------------------------------------------------------
  5624                                  ;
  5625                                  ;       Routine:        ConMonthName
  5626                                  ;
  5627                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5628                                  ;
  5629                                  ;-----------------------------------------------------------------------------------------------------------------------
  5630                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5630                              <1> ConMonthName :
  5630 000003E8 BB49090000          <1>  mov ebx,%1
  5630 000003ED B018                <1>  mov al,eReadRealTimeClock
  5630 000003EF CD30                <1>  int _svc
  5631                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5631 000003F1 BB49090000          <1>  mov ebx,%1
  5631 000003F6 BAC0080000          <1>  mov edx,%2
  5631 000003FB B012                <1>  mov al,ePutMonthNameString
  5631 000003FD CD30                <1>  int _svc
  5632                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5632 000003FF BAC0080000          <1>  mov edx,%1
  5632 00000404 B00C                <1>  mov al,ePutConsoleString
  5632 00000406 CD30                <1>  int _svc
  5633                                                          putConsoleString   czNewLine                            ;write newline to console
  5633 00000408 BA[50060000]        <1>  mov edx,%1
  5633 0000040D B00C                <1>  mov al,ePutConsoleString
  5633 0000040F CD30                <1>  int _svc
  5634 00000411 C3                                              ret                                                     ;return
  5635                                  ;-----------------------------------------------------------------------------------------------------------------------
  5636                                  ;
  5637                                  ;       Routine:        ConSecond
  5638                                  ;
  5639                                  ;       Description:    This routine Handles the SECOND command.
  5640                                  ;
  5641                                  ;-----------------------------------------------------------------------------------------------------------------------
  5642                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5642                              <1> ConSecond :
  5642 00000412 BB49090000          <1>  mov ebx,%1
  5642 00000417 B018                <1>  mov al,eReadRealTimeClock
  5642 00000419 CD30                <1>  int _svc
  5643                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5643 0000041B BB49090000          <1>  mov ebx,%1
  5643 00000420 BAC0080000          <1>  mov edx,%2
  5643 00000425 B013                <1>  mov al,ePutSecondString
  5643 00000427 CD30                <1>  int _svc
  5644                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5644 00000429 BAC0080000          <1>  mov edx,%1
  5644 0000042E B00C                <1>  mov al,ePutConsoleString
  5644 00000430 CD30                <1>  int _svc
  5645                                                          putConsoleString  czNewLine                             ;write newline to console
  5645 00000432 BA[50060000]        <1>  mov edx,%1
  5645 00000437 B00C                <1>  mov al,ePutConsoleString
  5645 00000439 CD30                <1>  int _svc
  5646 0000043B C3                                              ret                                                     ;return
  5647                                  ;-----------------------------------------------------------------------------------------------------------------------
  5648                                  ;
  5649                                  ;       Routine:        ConTime
  5650                                  ;
  5651                                  ;       Description:    This routine Handles the TIME command.
  5652                                  ;
  5653                                  ;-----------------------------------------------------------------------------------------------------------------------
  5654                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5654                              <1> ConTime :
  5654 0000043C BB49090000          <1>  mov ebx,%1
  5654 00000441 B018                <1>  mov al,eReadRealTimeClock
  5654 00000443 CD30                <1>  int _svc
  5655                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5655 00000445 BB49090000          <1>  mov ebx,%1
  5655 0000044A BAC0080000          <1>  mov edx,%2
  5655 0000044F B014                <1>  mov al,ePutTimeString
  5655 00000451 CD30                <1>  int _svc
  5656                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5656 00000453 BAC0080000          <1>  mov edx,%1
  5656 00000458 B00C                <1>  mov al,ePutConsoleString
  5656 0000045A CD30                <1>  int _svc
  5657                                                          putConsoleString  czNewLine                             ;write newline to console
  5657 0000045C BA[50060000]        <1>  mov edx,%1
  5657 00000461 B00C                <1>  mov al,ePutConsoleString
  5657 00000463 CD30                <1>  int _svc
  5658 00000465 C3                                              ret                                                     ;return
  5659                                  ;-----------------------------------------------------------------------------------------------------------------------
  5660                                  ;
  5661                                  ;       Routine:        ConVersion
  5662                                  ;
  5663                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5664                                  ;
  5665                                  ;-----------------------------------------------------------------------------------------------------------------------
  5666                                  ConVersion              putConsoleString czTitle                                ;display version message
  5666                              <1> ConVersion :
  5666 00000466 BA[7D060000]        <1>  mov edx,%1
  5666 0000046B B00C                <1>  mov al,ePutConsoleString
  5666 0000046D CD30                <1>  int _svc
  5667 0000046F C3                                              ret                                                     ;return
  5668                                  ;-----------------------------------------------------------------------------------------------------------------------
  5669                                  ;
  5670                                  ;       Routine:        ConWeekday
  5671                                  ;
  5672                                  ;       Description:    This routine handles the WEEKDAY command.
  5673                                  ;
  5674                                  ;-----------------------------------------------------------------------------------------------------------------------
  5675                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5675                              <1> ConWeekday :
  5675 00000470 BB49090000          <1>  mov ebx,%1
  5675 00000475 B018                <1>  mov al,eReadRealTimeClock
  5675 00000477 CD30                <1>  int _svc
  5676                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5676 00000479 BB49090000          <1>  mov ebx,%1
  5676 0000047E BAC0080000          <1>  mov edx,%2
  5676 00000483 B015                <1>  mov al,ePutWeekdayString
  5676 00000485 CD30                <1>  int _svc
  5677                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5677 00000487 BAC0080000          <1>  mov edx,%1
  5677 0000048C B00C                <1>  mov al,ePutConsoleString
  5677 0000048E CD30                <1>  int _svc
  5678                                                          putConsoleString  czNewLine                             ;write newline to console
  5678 00000490 BA[50060000]        <1>  mov edx,%1
  5678 00000495 B00C                <1>  mov al,ePutConsoleString
  5678 00000497 CD30                <1>  int _svc
  5679 00000499 C3                                              ret                                                     ;return
  5680                                  ;-----------------------------------------------------------------------------------------------------------------------
  5681                                  ;
  5682                                  ;       Routine:        ConWeekdayName
  5683                                  ;
  5684                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5685                                  ;
  5686                                  ;-----------------------------------------------------------------------------------------------------------------------
  5687                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5687                              <1> ConWeekdayName :
  5687 0000049A BB49090000          <1>  mov ebx,%1
  5687 0000049F B018                <1>  mov al,eReadRealTimeClock
  5687 000004A1 CD30                <1>  int _svc
  5688                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5688 000004A3 BB49090000          <1>  mov ebx,%1
  5688 000004A8 BAC0080000          <1>  mov edx,%2
  5688 000004AD B016                <1>  mov al,ePutWeekdayNameString
  5688 000004AF CD30                <1>  int _svc
  5689                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5689 000004B1 BAC0080000          <1>  mov edx,%1
  5689 000004B6 B00C                <1>  mov al,ePutConsoleString
  5689 000004B8 CD30                <1>  int _svc
  5690                                                          putConsoleString     czNewLine                                  ;write newline to console
  5690 000004BA BA[50060000]        <1>  mov edx,%1
  5690 000004BF B00C                <1>  mov al,ePutConsoleString
  5690 000004C1 CD30                <1>  int _svc
  5691 000004C3 C3                                              ret                                                             ;return
  5692                                  ;-----------------------------------------------------------------------------------------------------------------------
  5693                                  ;
  5694                                  ;       Routine:        ConYear
  5695                                  ;
  5696                                  ;       Description:    This routine Handles the YEAR command.
  5697                                  ;
  5698                                  ;-----------------------------------------------------------------------------------------------------------------------
  5699                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5699                              <1> ConYear :
  5699 000004C4 BB49090000          <1>  mov ebx,%1
  5699 000004C9 B018                <1>  mov al,eReadRealTimeClock
  5699 000004CB CD30                <1>  int _svc
  5700                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5700 000004CD BB49090000          <1>  mov ebx,%1
  5700 000004D2 BAC0080000          <1>  mov edx,%2
  5700 000004D7 B017                <1>  mov al,ePutYearString
  5700 000004D9 CD30                <1>  int _svc
  5701                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5701 000004DB BAC0080000          <1>  mov edx,%1
  5701 000004E0 B00C                <1>  mov al,ePutConsoleString
  5701 000004E2 CD30                <1>  int _svc
  5702                                                          putConsoleString  czNewLine                             ;write newline to console
  5702 000004E4 BA[50060000]        <1>  mov edx,%1
  5702 000004E9 B00C                <1>  mov al,ePutConsoleString
  5702 000004EB CD30                <1>  int _svc
  5703 000004ED C3                                              ret                                                     ;return
  5704                                  ;-----------------------------------------------------------------------------------------------------------------------
  5705                                  ;
  5706                                  ;       Routine:        ConYearIsLeap
  5707                                  ;
  5708                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5709                                  ;
  5710                                  ;-----------------------------------------------------------------------------------------------------------------------
  5711                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5711                              <1> ConYearIsLeap :
  5711 000004EE BB49090000          <1>  mov ebx,%1
  5711 000004F3 B018                <1>  mov al,eReadRealTimeClock
  5711 000004F5 CD30                <1>  int _svc
  5712                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5712 000004F7 BB49090000          <1>  mov ebx,%1
  5712 000004FC B00A                <1>  mov al,eIsLeapYear
  5712 000004FE CD30                <1>  int _svc
  5713                                  
  5714 00000500 E30B                                            jecxz   .10                                             ;branch if not leap
  5715                                  
  5716                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5716 00000502 BA[AD060000]        <1>  mov edx,%1
  5716 00000507 B00C                <1>  mov al,ePutConsoleString
  5716 00000509 CD30                <1>  int _svc
  5717                                  
  5718 0000050B EB09                                            jmp     .20                                             ;continue
  5719                                  
  5720                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5720                              <1> .10 :
  5720 0000050D BA[C8060000]        <1>  mov edx,%1
  5720 00000512 B00C                <1>  mov al,ePutConsoleString
  5720 00000514 CD30                <1>  int _svc
  5721 00000516 C3                      .20                     ret                                                     ;return
  5722                                  ;-----------------------------------------------------------------------------------------------------------------------
  5723                                  ;
  5724                                  ;       Tables
  5725                                  ;
  5726                                  ;-----------------------------------------------------------------------------------------------------------------------
  5727                                                                                                                  ;---------------------------------------
  5728                                                                                                                  ;  Command Jump Table
  5729                                                                                                                  ;---------------------------------------
  5730                                  tConJmpTbl              equ     $                                               ;command jump table
  5731 00000517 9A040000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5732 0000051B EE040000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5733 0000051F E8030000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5734 00000523 28020000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  5735 00000527 66040000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  5736 0000052B 70040000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5737 0000052F 9C020000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5738 00000533 F1020000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  5739 00000537 94030000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  5740 0000053B 12040000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  5741 0000053F CF010000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  5742 00000543 BE030000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  5743 00000547 D4010000                                        dd      ConDate         - ConCode                       ;date command routine offset
  5744 0000054B 28020000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  5745 0000054F 2D020000                                        dd      ConFree         - ConCode                       ;free command routine offset
  5746 00000553 6F020000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  5747 00000557 99020000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  5748 0000055B 28020000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  5749 0000055F 3C040000                                        dd      ConTime         - ConCode                       ;time command routine offset
  5750 00000563 C4040000                                        dd      ConYear         - ConCode                       ;year command routine offset
  5751 00000567 CF010000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  5752 0000056B FE010000                                        dd      ConDay          - ConCode                       ;day command routine offset
  5753 0000056F F1020000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  5754 00000573 66040000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  5755                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  5756                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  5757                                                                                                                  ;---------------------------------------
  5758                                                                                                                  ;  Command Name Table
  5759                                                                                                                  ;---------------------------------------
  5760                                  tConCmdTbl              equ     $                                               ;command name table
  5761 00000577 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  5761 00000580 4E414D4500         
  5762 00000585 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  5762 0000058E 45415000           
  5763 00000592 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  5763 0000059B 4D4500             
  5764 0000059E 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  5764 000005A7 00                 
  5765 000005A8 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  5766 000005B1 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  5767 000005BA 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  5768 000005C2 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  5769 000005CA 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  5770 000005D2 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  5771 000005DA 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  5772 000005E1 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  5773 000005E8 054441544500                                    db      5,"DATE",0                                      ;date command
  5774 000005EE 054558495400                                    db      5,"EXIT",0                                      ;exit command
  5775 000005F4 054652454500                                    db      5,"FREE",0                                      ;free command
  5776 000005FA 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  5777 00000600 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  5778 00000606 055155495400                                    db      5,"QUIT",0                                      ;quit command
  5779 0000060C 0554494D4500                                    db      5,"TIME",0                                      ;time command
  5780 00000612 055945415200                                    db      5,"YEAR",0                                      ;year command
  5781 00000618 04434C5300                                      db      4,"CLS",0                                       ;cls command
  5782 0000061D 0444415900                                      db      4,"DAY",0                                       ;day command
  5783 00000622 044D454D00                                      db      4,"MEM",0                                       ;mem command
  5784 00000627 0456455200                                      db      4,"VER",0                                       ;ver command
  5785 0000062C 00                                              db      0                                               ;end of table
  5786                                  ;-----------------------------------------------------------------------------------------------------------------------
  5787                                  ;
  5788                                  ;       Constants
  5789                                  ;
  5790                                  ;-----------------------------------------------------------------------------------------------------------------------
  5791 0000062D 42617365206D656D6F-     czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  5791 00000636 72793A2000         
  5792 0000063B 457874656E64656420-     czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  5792 00000644 6D656D6F72793A2000 
  5793 0000064D 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  5794 00000650 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  5795 00000653 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  5796 00000658 3A00                    czPrompt                db      ":",0                                           ;prompt string
  5797 0000065A 42617365206D656D6F-     czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  5797 00000663 72792062656C6F7720-
  5797 0000066C 454244412028496E74-
  5797 00000675 20313268293A2000   
  5798 0000067D 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5798 00000686 65726174696E672053-
  5798 0000068F 797374656D20312E30-
  5798 00000698 0D0A00             
  5799 0000069B 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5799 000006A4 6F6D6D616E640D0A00 
  5800 000006AD 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  5800 000006B6 69732061206C656170-
  5800 000006BF 20796561722E0D0A00 
  5801 000006C8 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  5801 000006D1 6973206E6F74206120-
  5801 000006DA 6C6561702079656172-
  5801 000006E3 2E0D0A00           
  5802 000006E7 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  5803                                  %endif
  5804                                  %ifdef BUILDDISK
  5805                                  ;-----------------------------------------------------------------------------------------------------------------------
  5806                                  ;
  5807                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5808                                  ;
  5809                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5810                                  ;
  5811                                  ;-----------------------------------------------------------------------------------------------------------------------
  5812                                  section                 unused                                                  ;unused disk space
  5813                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5814                                  %endif
  5815                                  ;=======================================================================================================================
  5816                                  ;
  5817                                  ;       End of Program Code
  5818                                  ;
  5819                                  ;=======================================================================================================================
