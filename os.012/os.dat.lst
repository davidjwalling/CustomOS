     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.012
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;                       "date" and "time" and other related commands.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EKEYF...        Keyboard status flags
   168                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   169                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   170                                  ;       EMEM...         Memory Management values
   171                                  ;       EMSG...         Message identifers
   172                                  ;
   173                                  ;=======================================================================================================================
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       Hardware-Defined Values
   177                                  ;
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;
   181                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   182                                  ;
   183                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   184                                  ;       for CGA, EGA, VGA and compatible video modes.
   185                                  ;
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   188                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   189                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   190                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  ;
   193                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   194                                  ;
   195                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   196                                  ;
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   199                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   200                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   201                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   202                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  ;
   205                                  ;       8042 Keyboard Controller                                                EKEYB...
   206                                  ;
   207                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   208                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   209                                  ;
   210                                  ;-----------------------------------------------------------------------------------------------------------------------
   211                                  EKEYBPORTDATA           equ     060h                                            ;data port
   212                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   213                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   214                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   215                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   216                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   217                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   218                                                                                                                  ;---------------------------------------
   219                                                                                                                  ;       Keyboard Scan Codes
   220                                                                                                                  ;---------------------------------------
   221                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   222                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   223                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   224                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   225                                  EKEYBSLASH              equ     035h                                            ;slash
   226                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   227                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   228                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   229                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   230                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   231                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   232                                  EKEYBUP                 equ     080h                                            ;up
   233                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   234                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   235                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   236                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   237                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   238                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   239                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   240                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   241                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   242                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   243                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   244                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  ;
   247                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   248                                  ;
   249                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   250                                  ;       external devices and signals a hardware interrupt to the CPU.
   251                                  ;
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   254                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   255                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   256                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   257                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  ;
   260                                  ;       8253 Programmable Interval Timer                                        EPIT...
   261                                  ;
   262                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   263                                  ;       approximately 18.2 times per second.
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   270                                  ;
   271                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  ERTCREGPORT             equ     070h                                            ;register select port
   275                                  ERTCDATAPORT            equ     071h                                            ;data port
   276                                  ERTCSECONDREG           equ     000h                                            ;second
   277                                  ERTCMINUTEREG           equ     002h                                            ;minute
   278                                  ERTCHOURREG             equ     004h                                            ;hour
   279                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   280                                  ERTCDAYREG              equ     007h                                            ;day
   281                                  ERTCMONTHREG            equ     008h                                            ;month
   282                                  ERTCYEARREG             equ     009h                                            ;year of the century
   283                                  ERTCSTATUSREG           equ     00bh                                            ;status
   284                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   285                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   286                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   287                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   288                                  ERTCCENTURYREG          equ     032h                                            ;century
   289                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;
   292                                  ;       x86 CPU Architecture                                                    ;EX86...
   293                                  ;
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   299                                  ;
   300                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   301                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   302                                  ;
   303                                  ;       0.......        Segment is not present in memory (triggers int 11)
   304                                  ;       1.......        Segment is present in memory
   305                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   306                                  ;       ...0....        Segment is a system segment
   307                                  ;       ...00010                Local Descriptor Table
   308                                  ;       ...00101                Task Gate
   309                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   310                                  ;       ...01100                Call Gate (386)
   311                                  ;       ...01110                Interrupt Gate (386)
   312                                  ;       ...01111                Trap Gate (386)
   313                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   314                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   315                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   316                                  ;
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   319                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   320                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   321                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   322                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   323                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   324                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   325                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;       Firmware-Defined Values
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;
   333                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   334                                  ;
   335                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   336                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   337                                  ;
   338                                  ;-----------------------------------------------------------------------------------------------------------------------
   339                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   340                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   341                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   342                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   343                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   344                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   345                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   346                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   347                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   348                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   349                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;
   352                                  ;       Standards-Based Values
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;
   357                                  ;       ASCII                                                                   EASCII...
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   361                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   362                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   363                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   364                                  EASCIISPACE             equ     020h                                            ;space
   365                                  EASCIIUPPERA            equ     041h                                            ;'A'
   366                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   367                                  EASCIILOWERA            equ     061h                                            ;'a'
   368                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   369                                  EASCIITILDE             equ     07Eh                                            ;'~'
   370                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   371                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   372                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   373                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   374                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   375                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   376                                  EASCIICASE              equ     00100000b                                       ;case bit
   377                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;
   380                                  ;       Operating System Values
   381                                  ;
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;
   385                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   386                                  ;
   387                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   388                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   389                                  ;
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   392                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   393                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   394                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   395                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   396                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   397                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  ;       Console Constants                                                       ECON...
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  ECONCOLS                equ     80                                              ;columns per row
   402                                  ECONROWS                equ     24                                              ;console rows
   403                                  ECONOIAROW              equ     24                                              ;operator information area row
   404                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   405                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   406                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   407                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   408                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   413                                  EGDTCGA                 equ     020h                                            ;cga video selector
   414                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   415                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   416                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   417                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   418                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   419                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;       Keyboard Flags                                                          EKEYF...
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   424                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   425                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   426                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   427                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   428                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   429                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   430                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   431                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   432                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   433                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Kernel Constants                                                        EKRN...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   438                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   439                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   440                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   441                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   442                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   447                                  ;-----------------------------------------------------------------------------------------------------------------------
   448                                  ;       Memory Management Constants                                             EMEM...
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   451                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   452                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   453                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   454                                  ;-----------------------------------------------------------------------------------------------------------------------
   455                                  ;       Message Identifiers                                                     EMSG...
   456                                  ;-----------------------------------------------------------------------------------------------------------------------
   457                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   458                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   459                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   460                                  ;=======================================================================================================================
   461                                  ;
   462                                  ;       Structures
   463                                  ;
   464                                  ;=======================================================================================================================
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ;
   467                                  ;       DATETIME
   468                                  ;
   469                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   470                                  ;
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  struc                   DATETIME
   473 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   474 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   475 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   476 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   477 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   478 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   479 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   480 00000007 <res 00000001>          .century                resb    1                                               ;century
   481                                  EDATETIMELEN            equ     ($-.second)
   482                                  endstruc
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;       MEMBLOCK
   486                                  ;
   487                                  ;       The MEMBLOCK structure defines a memory block.
   488                                  ;
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  struc                   MEMBLOCK
   491 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   492 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   493 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   494 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   495 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   496 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   497 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   498 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   499                                  EMEMBLOCKLEN            equ     ($-.signature)
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;       MEMROOT
   504                                  ;
   505                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   506                                  ;
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  struc                   MEMROOT
   509 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   510 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   511 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   512 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   513 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   514 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   515                                  EMEMROOTLEN             equ     ($-.firstcontig)
   516                                  endstruc
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  ;
   519                                  ;       MQUEUE
   520                                  ;
   521                                  ;       The MQUEUE structure maps memory used for a message queue.
   522                                  ;
   523                                  ;-----------------------------------------------------------------------------------------------------------------------
   524                                  struc                   MQUEUE
   525 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   526 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   527 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   528                                  endstruc
   529                                  ;-----------------------------------------------------------------------------------------------------------------------
   530                                  ;
   531                                  ;       OSDATA
   532                                  ;
   533                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   534                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   535                                  ;
   536                                  ;-----------------------------------------------------------------------------------------------------------------------
   537                                  struc                   OSDATA
   538 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   539 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   540 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   541 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   542 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   543 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   544 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   545 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   546 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   547 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   548 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   549 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   550 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   551 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   552 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   553 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   554 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   555 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   556 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   557 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   558 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   559 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   560 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   561 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   562 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   563 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   564 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   565 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   566 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   567 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   568 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   569 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   570 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   571 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   572 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   573 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   574 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   575 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   576 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   577 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   578 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   579 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   580 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   581 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   582 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   583 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   584 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   585 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   586 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   587 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   588 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   589 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   590 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   591 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   592 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   593 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   594 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   595 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   596 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   597 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   598 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   599 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   600 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   601 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   602 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   603 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   604 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   605 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   606 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   607 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   608 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   609 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   610 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   611 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   612 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   613 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   614 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   615 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   616 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   617 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   618 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   619 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   620 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   621 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   622 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   623 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   624 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   625 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   626 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   627 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   628 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   629 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   630 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   631 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   632 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   633 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   634 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   635 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   636 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   637 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   638 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   639                                  ;-----------------------------------------------------------------------------------------------------------------------
   640                                  ;
   641                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   642                                  ;
   643                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   644                                  ;
   645                                  ;-----------------------------------------------------------------------------------------------------------------------
   646                                  ECONDATA                equ     ($)
   647 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   648 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   649 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   650 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   651 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   652 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   653 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   654 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   655 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   656 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   657 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   658 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   659 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   660 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   661 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   662 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   663 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   664 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   665 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   666 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   667 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   668 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   669 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   670 00000931 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   671 00000949 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   672                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   673                                  ;-----------------------------------------------------------------------------------------------------------------------
   674                                  ;
   675                                  ;       End of OS Variables
   676                                  ;
   677                                  ;-----------------------------------------------------------------------------------------------------------------------
   678                                  endstruc
   679                                  ;-----------------------------------------------------------------------------------------------------------------------
   680                                  ;
   681                                  ;       Macros
   682                                  ;
   683                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   684                                  ;
   685                                  ;-----------------------------------------------------------------------------------------------------------------------
   686                                  %macro                  mint    1
   687                                  _%1                     equ     ($-$$) / EX86DESCLEN
   688                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   689                                  %endmacro
   690                                  %macro                  mtrap   1
   691                                  _%1                     equ     ($-$$) / EX86DESCLEN
   692                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   693                                  %endmacro
   694                                  %macro                  menter  1
   695                                  ?%1                     equ     ($-$$)
   696                                  %endmacro
   697                                  %macro                  tsvce   1
   698                                  e%1                     equ     ($-tsvc)/4
   699                                                          dd      %1
   700                                  %endmacro
   701                                  %ifdef BUILDBOOT
   702                                  ;=======================================================================================================================
   703                                  ;
   704                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   705                                  ;
   706                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   707                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   708                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   709                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   710                                  ;
   711                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   712                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   713                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   714                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   715                                  ;       immediately followed by a disk parameter table.
   716                                  ;
   717                                  ;=======================================================================================================================
   718                                                          cpu     8086                                            ;assume minimal CPU
   719                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   720                                                          bits    16                                              ;16-bit code at power-up
   721                                  %ifdef BUILDPREP
   722                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   723                                  %else
   724 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   725                                  %endif
   726                                  ;-----------------------------------------------------------------------------------------------------------------------
   727                                  ;
   728                                  ;       Disk Parameter Table
   729                                  ;
   730                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   731                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   732                                  ;
   733                                  ;-----------------------------------------------------------------------------------------------------------------------
   734 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   735 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   736 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   737 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   738 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   739 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   740 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   741 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   742 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   743                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   744 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   745 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   746 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   747                                  ;
   748                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   749                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   750                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   751                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   752                                  ;       given several possible starting values for CS:IP.
   753                                  ;
   754                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   755 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   756                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   757 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   758 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   759 00000025 B104                                            mov     cl,4                                            ;shift count
   760 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   761 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   762 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   763                                  ;
   764                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   765                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   766                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   767                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   768                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   769                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   770                                  ;
   771 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   772 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   773 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   774 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   775 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   776                                  ;
   777                                  ;       Our boot addressability is now set up according to the following diagram.
   778                                  ;
   779                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   780                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   781                                  ;                               |  256 = 100h bytes                             |
   782                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   783                                  ;                               |  Boot Sector (vstart=0100h)                   |
   784                                  ;                               |  1 sector = 512 = 200h bytes                  |
   785                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   786                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   787                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   788                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   789                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   790                                  ;                               |  2 sectors = 1024 = 400h bytes
   791                                  ;                       009400  +-----------------------------------------------+ DS:1900
   792                                  ;
   793                                  ;       On entry, DL indicates the drive being booted from.
   794                                  ;
   795 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   796                                  ;
   797                                  ;       Compute directory i/o buffer address.
   798                                  ;
   799 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   800 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   801 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   802 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   803                                  ;
   804                                  ;       Compute segment where os.com will be loaded.
   805                                  ;
   806 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   807 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   808 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   809 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   810                                  ;
   811                                  ;       Set the video mode to 80 column, 25 row, text.
   812                                  ;
   813 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   814 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   815                                  ;
   816                                  ;       Write a message to the console so we know we have our addressability established.
   817                                  ;
   818 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   819 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   820                                  ;
   821                                  ;       Initialize the number of directory sectors to search.
   822                                  ;
   823 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   824 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   825                                  ;
   826                                  ;       Compute number of directory sectors and initialize overhead count.
   827                                  ;
   828 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   829 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   830 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   831 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   832                                  ;
   833                                  ;       Compute directory entries per sector.
   834                                  ;
   835 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   836 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   837 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   838                                  ;
   839                                  ;       Compute first logical directory sector and update overhead count.
   840                                  ;
   841 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   842 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   843 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   844 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   845 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   846 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   847                                  ;
   848                                  ;       Read directory sector.
   849                                  ;
   850 0000008E B001                    .30                     mov     al,1                                            ;sector count
   851 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   852 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   853 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   854                                  ;
   855                                  ;       Setup variables to search this directory sector.
   856                                  ;
   857 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   858 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   859 000000A1 7603                                            jna     .40                                             ;no, continue
   860 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   861 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   862 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   863 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   864                                  ;
   865                                  ;       Loop through directory sectors searching for kernel program.
   866                                  ;
   867 000000B1 56                      .50                     push    si                                              ;save kernel name address
   868 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   869 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   870 000000B6 FC                                              cld                                                     ;forward strings
   871 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   872 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   873 000000BA 5E                                              pop     si                                              ;restore kernel name address
   874 000000BB 7418                                            je      .60                                             ;exit loop if found
   875 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   876 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   877 000000C2 75ED                                            jnz     .50                                             ;next entry
   878                                  ;
   879                                  ;       Repeat search if we are not at the end of the directory.
   880                                  ;
   881 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   882 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   883 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   884 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   885 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   886                                  ;
   887                                  ;       If we find the kernel program in the directory, read the FAT.
   888                                  ;
   889 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   890 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   891 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   892 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   893 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   894 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   895                                  ;
   896                                  ;       Get the starting cluster of the kernel program and target address.
   897                                  ;
   898 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   899 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   900                                  ;
   901                                  ;       Read each program cluster into RAM.
   902                                  ;
   903 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   904 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   905 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   906 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   907 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   908 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   909 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   910 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   911 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   912                                  ;
   913                                  ;       Update buffer pointer for next cluster.
   914                                  ;
   915 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   916 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   917 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   918 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   919 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   920                                  ;
   921                                  ;       Compute next cluster number.
   922                                  ;
   923 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   924 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   925 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   926 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   927 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   928 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   929 00000120 83E701                                          and     di,1                                            ;get low bit
   930 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   931 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   932 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   933                                  ;
   934                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   935                                  ;
   936 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   937 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   938 00000130 B104                                            mov     cl,4                                            ;shift count
   939 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   940 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   941 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   942 0000013A 75B2                                            jne     .70                                             ;no, continue
   943                                  ;
   944                                  ;       Transfer control to the operating system program.
   945                                  ;
   946 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   947 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   948 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   949                                  ;
   950                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   951                                  ;
   952 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   953 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   954 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   955 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   956 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   957 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   958 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   959 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   960 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   961 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   962                                  ;
   963                                  ;       Try maxtries times to read sector.
   964                                  ;
   965 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   966 00000160 53                      .10                     push    bx                                              ;save buffer address
   967 00000161 51                                              push    cx                                              ;save retry count
   968 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   969 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   970 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   971 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   972 0000016F 59                                              pop     cx                                              ;restore retry count
   973 00000170 5B                                              pop     bx                                              ;restore buffer address
   974 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   975 00000173 E2EB                                            loop    .10                                             ;retry
   976                                  ;
   977                                  ;       Handle disk error: convert to ASCII and store in error string.
   978                                  ;
   979 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   980 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   981 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   982 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   983 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   984 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   985 00000183 7203                                            jb      .20                                             ;continue if numeral
   986 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   987 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   988 0000018A 7203                                            jb      .30                                             ;continue if numeral
   989 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   990 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   991 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   992 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   993                                  ;
   994                                  ;       Wait for a key press.
   995                                  ;
   996 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   997 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   998 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   999 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1000 0000019F F4                                              hlt                                                     ;wait for interrupt
  1001 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1002                                  ;
  1003                                  ;       Reset the system.
  1004                                  ;
  1005 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1006 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1007 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1008 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1009 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1010                                  ;
  1011                                  ;       Display text message.
  1012                                  ;
  1013 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1014 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1015 000001AC 84C0                                            test    al,al                                           ;end of string?
  1016 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1017 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1018 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1019 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1020 000001B6 C3                      BootReturn              ret                                                     ;return
  1021                                  ;-----------------------------------------------------------------------------------------------------------------------
  1022                                  ;
  1023                                  ;       Constants
  1024                                  ;
  1025                                  ;-----------------------------------------------------------------------------------------------------------------------
  1026 000001B7 90                                              align   2
  1027 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1028 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1028 000001C3 4F4D               
  1029 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1029 000001CE 530D0A00           
  1030 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1030 000001DB 7220               
  1031 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1032 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1032 000001E9 6700               
  1033                                  ;-----------------------------------------------------------------------------------------------------------------------
  1034                                  ;
  1035                                  ;       Work Areas
  1036                                  ;
  1037                                  ;-----------------------------------------------------------------------------------------------------------------------
  1038 000001EB 90                                              align   2
  1039 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1040 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1041 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1042 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1043 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1044                                  wwReadCountCommand      equ     $                                               ;read count and command
  1045 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1046 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1047                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1048 000001F8 00                      wbDrive                 db      0                                               ;drive
  1049 000001F9 00                      wbHead                  db      0                                               ;head
  1050                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1051 000001FA 00                                              db      0                                               ;sector
  1052 000001FB 00                      wbTrack                 db      0                                               ;track
  1053 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1054 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1055                                  %endif
  1056                                  %ifdef BUILDPREP
  1057                                  ;=======================================================================================================================
  1058                                  ;
  1059                                  ;       Diskette Preparation Code
  1060                                  ;
  1061                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1062                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1063                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1064                                  ;
  1065                                  ;=======================================================================================================================
  1066                                  ;
  1067                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1068                                  ;
  1069                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1070                                                          call    BootPrint                                       ;display message
  1071                                  ;
  1072                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1073                                  ;
  1074                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1075                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1076                                                          jnz     .20                                             ;continue if key pressed
  1077                                                          sti                                                     ;enable interrupts
  1078                                                          hlt                                                     ;wait for interrupt
  1079                                                          jmp     .10                                             ;repeat
  1080                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1081                                                          je      .30                                             ;yes, branch
  1082                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1083                                                          jne     .10                                             ;no, repeat
  1084                                                          jmp     .120                                            ;yes, exit program
  1085                                  ;
  1086                                  ;       Display writing-sector message and patch the JMP instruction.
  1087                                  ;
  1088                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1089                                                          call    BootPrint                                       ;display message
  1090                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1091                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1092                                                          mov     [bx],ax                                         ;update the JMP instruction
  1093                                  ;
  1094                                  ;       Try to read the boot sector.
  1095                                  ;
  1096                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1097                                  .40                     push    cx                                              ;save remaining tries
  1098                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1099                                                          mov     dx,0                                            ;head zero, drive zero
  1100                                                          mov     cx,1                                            ;track zero, sector one
  1101                                                          mov     al,1                                            ;one sector
  1102                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1103                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1104                                                          pop     cx                                              ;restore remaining retries
  1105                                                          jnc     .50                                             ;skip ahead if successful
  1106                                                          loop    .40                                             ;try again
  1107                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1108                                                          jmp     .70                                             ;branch to error routine
  1109                                  ;
  1110                                  ;       Copy diskette parms from input buffer to output buffer.
  1111                                  ;
  1112                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1113                                                          add     si,11                                           ;skip over JMP and system ID
  1114                                                          mov     di,Boot                                         ;output buffer address
  1115                                                          add     di,11                                           ;skip over JMP and system ID
  1116                                                          mov     cx,19                                           ;length of diskette parameters
  1117                                                          cld                                                     ;forward string copies
  1118                                                          rep     movsb                                           ;copy diskette parameters
  1119                                  ;
  1120                                  ;       Try to write boot sector to diskette.
  1121                                  ;
  1122                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1123                                  .60                     push    cx                                              ;save remaining tries
  1124                                                          mov     bx,Boot                                         ;output buffer address
  1125                                                          mov     dx,0                                            ;head zero, drive zero
  1126                                                          mov     cx,1                                            ;track zero, sector one
  1127                                                          mov     al,1                                            ;one sector
  1128                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1129                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1130                                                          pop     cx                                              ;restore remaining retries
  1131                                                          jnc     .100                                            ;skip ahead if successful
  1132                                                          loop    .60                                             ;try again
  1133                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1134                                  ;
  1135                                  ;       Convert the error code to ASCII and display the error message.
  1136                                  ;
  1137                                  .70                     push    ax                                              ;save error code
  1138                                                          mov     al,ah                                           ;copy error code
  1139                                                          mov     ah,0                                            ;AX = error code
  1140                                                          mov     dl,10h                                          ;hexadecimal divisor
  1141                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1142                                                          or      ax,03030h                                       ;add ASCII zone digits
  1143                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1144                                                          jb      .80                                             ;yes, continue
  1145                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1146                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1147                                                          jb      .90                                             ;yes, continue
  1148                                                          add     al,7                                            ;no, make ASCII
  1149                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1150                                                          call    BootPrint                                       ;write error message
  1151                                                          pop     ax                                              ;restore error code
  1152                                  ;
  1153                                  ;       Display the completion message.
  1154                                  ;
  1155                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1156                                                          mov     al,ah                                           ;BIOS return code
  1157                                                          cmp     al,0                                            ;success?
  1158                                                          je      .110                                            ;yes, continue
  1159                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1160                                                          cmp     al,1                                            ;disk parameter error?
  1161                                                          je      .110                                            ;yes, continue
  1162                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1163                                                          cmp     al,2                                            ;address mark not found?
  1164                                                          je      .110                                            ;yes, continue
  1165                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1166                                                          cmp     al,3                                            ;protected disk?
  1167                                                          je      .110                                            ;yes, continue
  1168                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1169                                                          cmp     al,6                                            ;diskette removed?
  1170                                                          je      .110                                            ;yes, continue
  1171                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1172                                                          cmp     al,80H                                          ;drive timed out?
  1173                                                          je      .110                                            ;yes, continue
  1174                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1175                                  .110                    call    BootPrint                                       ;display result message
  1176                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1177                                                          int     021h                                            ;terminate DOS program
  1178                                                          ret                                                     ;return (should not execute)
  1179                                  ;-----------------------------------------------------------------------------------------------------------------------
  1180                                  ;
  1181                                  ;       Diskette Preparation Messages
  1182                                  ;
  1183                                  ;-----------------------------------------------------------------------------------------------------------------------
  1184                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1185                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1186                                                          db      13,10
  1187                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1188                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1189                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1190                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1191                                                          db      13,10,0
  1192                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1193                                                          db      13,10,0
  1194                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1195                                                          db      13,10,0
  1196                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1197                                                          db      13,10,0
  1198                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1199                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1200                                                          db      13,10,0
  1201                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1202                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1203                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1204                                                          db      13,10,"and retry."
  1205                                                          db      13,10,0
  1206                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1207                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1208                                                          db      13,10,"using another diskette."
  1209                                                          db      13,10,0
  1210                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1211                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1212                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1213                                                          db      13,10,0
  1214                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1215                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1216                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1217                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1218                                                          db      13,10,"is properly inserted in the diskette drive."
  1219                                                          db      13,10,0
  1220                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1221                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1222                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1223                                                          db      13,10,0
  1224                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1225                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1226                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1227                                                          db      13,10,0
  1228                                  wcPrepInBuf             equ     $
  1229                                  %endif
  1230                                  %ifdef BUILDDISK
  1231                                  ;=======================================================================================================================
  1232                                  ;
  1233                                  ;       File Allocation Tables
  1234                                  ;
  1235                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1236                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1237                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1238                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1239                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1240                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1241                                  ;       the last cluster in the chain.
  1242                                  ;
  1243                                  ;       Every three bytes encode two FAT entries as follows:
  1244                                  ;
  1245                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1246                                  ;
  1247                                  ;=======================================================================================================================
  1248                                  ;-----------------------------------------------------------------------------------------------------------------------
  1249                                  ;
  1250                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1251                                  ;
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  section                 fat1                                                    ;first copy of FAT
  1254                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1255                                                          db      005h,060h,000h, 007h,080h,000h
  1256                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1257                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1258                                                          db      011h,020h,001h, 013h,040h,001h
  1259                                                          db      015h,060h,001h, 017h,080h,001h
  1260                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1261                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1262                                                          db      021h,020h,002h, 023h,040h,002h
  1263                                                          db      025h,060h,002h, 027h,080h,002h
  1264                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1265                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1266                                  ;-----------------------------------------------------------------------------------------------------------------------
  1267                                  ;
  1268                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1269                                  ;
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271                                  section                 fat2                                                    ;second copy of FAT
  1272                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1273                                                          db      005h,060h,000h, 007h,080h,000h
  1274                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1275                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1276                                                          db      011h,020h,001h, 013h,040h,001h
  1277                                                          db      015h,060h,001h, 017h,080h,001h
  1278                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1279                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1280                                                          db      021h,020h,002h, 023h,040h,002h
  1281                                                          db      025h,060h,002h, 027h,080h,002h
  1282                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1283                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                  ;
  1286                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1287                                  ;
  1288                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1289                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1290                                  ;       copy.
  1291                                  ;
  1292                                  ;-----------------------------------------------------------------------------------------------------------------------
  1293                                  section                 dir                                                     ;diskette directory
  1294                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1295                                                          db      020h                                            ;attribute (archive bit set)
  1296                                                          times   10 db 0                                         ;unused
  1297                                                          dw      0h                                              ;time
  1298                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1299                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1300                                                          dw      2                                               ;first cluster
  1301                                                          dd      05400h                                          ;file size
  1302                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1303                                  %endif
  1304                                  %ifdef BUILDCOM
  1305                                  ;=======================================================================================================================
  1306                                  ;
  1307                                  ;       OS.COM
  1308                                  ;
  1309                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1310                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1311                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1312                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1313                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1314                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1315                                  ;
  1316                                  ;       Our loader addressability is set up according to the following diagram.
  1317                                  ;
  1318                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1319                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1320                                  ;                               |  256 = 100h bytes                             |
  1321                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1322                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1323                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1324                                  ;                       007e00  +-----------------------------------------------+
  1325                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1326                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1327                                  ;                               |                                               |
  1328                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1329                                  ;                               |                                               |
  1330                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1331                                  ;                               |  Loader Code                                  |
  1332                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1333                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1334                                  ;
  1335                                  ;=======================================================================================================================
  1336                                  ;-----------------------------------------------------------------------------------------------------------------------
  1337                                  ;
  1338                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1339                                  ;
  1340                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1341                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1342                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1343                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1344                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1345                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1346                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1347                                  ;       registers.
  1348                                  ;
  1349                                  ;-----------------------------------------------------------------------------------------------------------------------
  1350                                                          cpu     8086                                            ;assume minimal CPU
  1351                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1352                                                          bits    16                                              ;this is 16-bit code
  1353                                  Loader                  push    cs                                              ;use the code segment
  1354                                                          pop     ds                                              ;...as our data segment
  1355                                                          push    cs                                              ;use the code segment
  1356                                                          pop     es                                              ;...as our extra segment
  1357                                  ;
  1358                                  ;       Write a message to the console so we know we have our addressability established.
  1359                                  ;
  1360                                                          mov     si,czStartingMsg                                ;starting message
  1361                                                          call    PutTTYString                                    ;display loader message
  1362                                  ;
  1363                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1364                                  ;
  1365                                                          call    GetCPUType                                      ;AL = cpu type
  1366                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1367                                                          cmp     al,3                                            ;80386+?
  1368                                                          jb      LoaderExit                                      ;no, exit with error message
  1369                                                          cpu     386                                             ;allow 80386 instructions
  1370                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1371                                                          call    PutTTYString                                    ;display message
  1372                                  ;
  1373                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1374                                  ;
  1375                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1376                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1377                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1378                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1379                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1380                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1381                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1382                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1383                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1384                                                          call    PutTTYString                                    ;display message
  1385                                  ;
  1386                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1387                                  ;
  1388                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1389                                                          pop     es                                              ;... as target segment
  1390                                                          xor     di,di                                           ;ES:DI = target address
  1391                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1392                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1393                                                          cld                                                     ;forward strings
  1394                                                          rep     movsb                                           ;copy kernel image
  1395                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1396                                                          call    PutTTYString                                    ;display message
  1397                                  ;
  1398                                  ;       Switch to protected mode.
  1399                                  ;
  1400                                                          xor     si,si                                           ;ES:SI = gdt addr
  1401                                                          mov     ss,si                                           ;protected mode ss
  1402                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1403                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1404                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1405                                                          mov     dx,001Fh                                        ;outer delay loop count
  1406                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1407                                                          loop    $                                               ;wait out pending interrupts
  1408                                                          dec     dx                                              ;restore outer loop count
  1409                                                          jnz     .10                                             ;continue outer loop
  1410                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1411                                  ;
  1412                                  ;       Enable hardware and maskable interrupts.
  1413                                  ;
  1414                                                          xor     al,al                                           ;enable all registers code
  1415                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1416                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1417                                                          sti                                                     ;enable maskable interrupts
  1418                                  ;
  1419                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1420                                  ;
  1421                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1422                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1423                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1424                                  ;-----------------------------------------------------------------------------------------------------------------------
  1425                                  ;
  1426                                  ;       Routine:        LoaderExit
  1427                                  ;
  1428                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1429                                  ;
  1430                                  ;       In:             DS:SI   string address
  1431                                  ;
  1432                                  ;-----------------------------------------------------------------------------------------------------------------------
  1433                                  LoaderExit              call    PutTTYString                                    ;display error message
  1434                                  ;
  1435                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1436                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1437                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1438                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1439                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1440                                  ;
  1441                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1442                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1443                                                          jnz     .40                                             ;exit if key pressed
  1444                                                          sti                                                     ;enable maskable interrupts
  1445                                                          hlt                                                     ;wait for interrupt
  1446                                                          jmp     .30                                             ;repeat until keypress
  1447                                  ;
  1448                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1449                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1450                                  ;       HLT until the system resets.
  1451                                  ;
  1452                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1453                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1454                                  .50                     sti                                                     ;enable maskable interrupts
  1455                                                          hlt                                                     ;stop until reset, int, nmi
  1456                                                          jmp     .50                                             ;loop until restart kicks in
  1457                                  ;-----------------------------------------------------------------------------------------------------------------------
  1458                                  ;
  1459                                  ;       Routine:        GetCPUType
  1460                                  ;
  1461                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1462                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1463                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1464                                  ;
  1465                                  ;       Out:            AX      0 = 808x, v20, etc.
  1466                                  ;                               1 = 80186
  1467                                  ;                               2 = 80286
  1468                                  ;                               3 = 80386
  1469                                  ;
  1470                                  ;-----------------------------------------------------------------------------------------------------------------------
  1471                                  GetCPUType              mov     al,1                                            ;AL = 1
  1472                                                          mov     cl,32                                           ;shift count
  1473                                                          shr     al,cl                                           ;try a 32-bit shift
  1474                                                          or      al,al                                           ;did the shift happen?
  1475                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1476                                                          cpu     186
  1477                                                          push    sp                                              ;save stack pointer
  1478                                                          pop     cx                                              ;...into cx
  1479                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1480                                                          jne     .10                                             ;yes, cpu is 80186
  1481                                                          cpu     286
  1482                                                          inc     ax                                              ;AX = 2
  1483                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1484                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1485                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1486                                                          jz      .10                                             ;yes, cpu is 80286
  1487                                                          inc     ax                                              ;AX = 3
  1488                                  .10                     ret                                                     ;return
  1489                                  ;-----------------------------------------------------------------------------------------------------------------------
  1490                                  ;
  1491                                  ;       Routine:        PutTTYString
  1492                                  ;
  1493                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1494                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1495                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1496                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1497                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1498                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1499                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1500                                  ;                       to LODSB is not needed.
  1501                                  ;
  1502                                  ;       In:             DS:SI   address of string
  1503                                  ;
  1504                                  ;       Out:            DF      0
  1505                                  ;                       ZF      1
  1506                                  ;                       AL      0
  1507                                  ;
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509                                  PutTTYString            cld                                                     ;forward strings
  1510                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1511                                                          test    al,al                                           ;end of string?
  1512                                                          jz      .20                                             ;... yes, exit our loop
  1513                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1514                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1515                                                          jmp     .10                                             ;repeat until done
  1516                                  .20                     ret                                                     ;return
  1517                                  ;-----------------------------------------------------------------------------------------------------------------------
  1518                                  ;
  1519                                  ;       Loader Data
  1520                                  ;
  1521                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1522                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1523                                  ;
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                                          align   2
  1526                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1527                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1528                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1529                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1530                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1531                                                          db      "Please press any key to restart the computer.",13,10,0
  1532                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1533                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1534                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1535                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1536                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1537                                  ;=======================================================================================================================
  1538                                  ;
  1539                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1540                                  ;
  1541                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1542                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1543                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1544                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1545                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1546                                  ;
  1547                                  ;=======================================================================================================================
  1548                                  ;=======================================================================================================================
  1549                                  ;
  1550                                  ;       Kernel Tables
  1551                                  ;
  1552                                  ;=======================================================================================================================
  1553                                  ;-----------------------------------------------------------------------------------------------------------------------
  1554                                  ;
  1555                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1556                                  ;
  1557                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1558                                  ;       first descriptor must be all nulls.
  1559                                  ;
  1560                                  ;       6   5         4         3         2         1         0
  1561                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1562                                  ;       ----------------------------------------------------------------
  1563                                  ;       h......hffffmmmma......ab......................bn..............n
  1564                                  ;
  1565                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1566                                  ;               ffff                                                            flags
  1567                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1568                                  ;                       a......a                                                access
  1569                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1570                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1571                                  ;
  1572                                  ;       00000000                                                                all areas have base addresses below 2^24
  1573                                  ;               0...                                                            single-byte size granularity
  1574                                  ;               1...                                                            4-kilobyte size granularity
  1575                                  ;               .0..                                                            16-bit default for code segments
  1576                                  ;               .1..                                                            32-bit default for code segments
  1577                                  ;               ..0.                                                            intel-reserved; should be zero
  1578                                  ;               ...0                                                            available for operating system use
  1579                                  ;                   0000                                                        segment is less than 2^16 in size
  1580                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1581                                  ;                       1.......                                                segment is present in memory
  1582                                  ;                       .00.....                                                segment is of privilege level 0
  1583                                  ;                       ...0....                                                segment is of system or gate type
  1584                                  ;                       ...00010                                                local decriptor table (LDT)
  1585                                  ;                       ...01001                                                task state segment (TSS) available
  1586                                  ;                       ...01011                                                task state segment (TSS) busy
  1587                                  ;                       ...10...                                                data segment
  1588                                  ;                       ...10011                                                writable data (accessed)
  1589                                  ;                       ...11...                                                code segment
  1590                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1591                                  ;
  1592                                  ;-----------------------------------------------------------------------------------------------------------------------
  1593                                  section                 gdt                                                     ;global descriptor table
  1594                                                          dq      0000000000000000h                               ;00 required null selector
  1595                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1596                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1597                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1598                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1599                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1600                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1601                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1602                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1603                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1604                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1605                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1606                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1607                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1608                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1612                                  ;
  1613                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1614                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1615                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1616                                  ;
  1617                                  ;       6   5         4         3         2         1         0
  1618                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1619                                  ;       ----------------------------------------------------------------
  1620                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1621                                  ;
  1622                                  ;       h...h   high-order offset (bits 16-31)
  1623                                  ;       P       present (0=unused interrupt)
  1624                                  ;       zz      descriptor privilege level
  1625                                  ;       S       storage segment (must be zero for IDT)
  1626                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1627                                  ;       S...S   handling code selector in GDT
  1628                                  ;       l...l   lo-order offset (bits 0-15)
  1629                                  ;
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  section                 idt                                                     ;interrupt descriptor table
  1632                                                          mint    dividebyzero                                    ;00 divide by zero
  1633                                                          mint    singlestep                                      ;01 single step
  1634                                                          mint    nmi                                             ;02 non-maskable
  1635                                                          mint    break                                           ;03 break
  1636                                                          mint    into                                            ;04 into
  1637                                                          mint    bounds                                          ;05 bounds
  1638                                                          mint    badopcode                                       ;06 bad op code
  1639                                                          mint    nocoproc                                        ;07 no coprocessor
  1640                                                          mint    doublefault                                     ;08 double-fault
  1641                                                          mint    operand                                         ;09 operand
  1642                                                          mint    badtss                                          ;0a bad TSS
  1643                                                          mint    notpresent                                      ;0b not-present
  1644                                                          mint    stacklimit                                      ;0c stack limit
  1645                                                          mint    protection                                      ;0d general protection fault
  1646                                                          mint    int14                                           ;0e (reserved)
  1647                                                          mint    int15                                           ;0f (reserved)
  1648                                                          mint    coproccalc                                      ;10 (reserved)
  1649                                                          mint    int17                                           ;11 (reserved)
  1650                                                          mint    int18                                           ;12 (reserved)
  1651                                                          mint    int19                                           ;13 (reserved)
  1652                                                          mint    int20                                           ;14 (reserved)
  1653                                                          mint    int21                                           ;15 (reserved)
  1654                                                          mint    int22                                           ;16 (reserved)
  1655                                                          mint    int23                                           ;17 (reserved)
  1656                                                          mint    int24                                           ;18 (reserved)
  1657                                                          mint    int25                                           ;19 (reserved)
  1658                                                          mint    int26                                           ;1a (reserved)
  1659                                                          mint    int27                                           ;1b (reserved)
  1660                                                          mint    int28                                           ;1c (reserved)
  1661                                                          mint    int29                                           ;1d (reserved)
  1662                                                          mint    int30                                           ;1e (reserved)
  1663                                                          mint    int31                                           ;1f (reserved)
  1664                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1665                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1666                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1667                                                          mtrap   com2                                            ;23 IRQ3 com2
  1668                                                          mtrap   com1                                            ;24 IRQ4 com1
  1669                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1670                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1671                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1672                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1673                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1674                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1675                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1676                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1677                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1678                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1679                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1680                                                          mtrap   svc                                             ;30 OS services
  1681                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1682                                  ;=======================================================================================================================
  1683                                  ;
  1684                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1685                                  ;
  1686                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1687                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1688                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1689                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1690                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1691                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1692                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1693                                  ;
  1694                                  ;=======================================================================================================================
  1695                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1696                                                          cpu     386                                             ;allow 80386 instructions
  1697                                                          bits    32                                              ;this is 32-bit code
  1698                                  ;=======================================================================================================================
  1699                                  ;
  1700                                  ;       CPU Interrupt Handlers
  1701                                  ;
  1702                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1703                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1704                                  ;
  1705                                  ;=======================================================================================================================
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT0    Divide By Zero
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  dividebyzero                                    ;divide by zero
  1712                                                          push    0                                               ;store interrupt nbr
  1713                                                          push    czIntDivideByZero                               ;store message offset
  1714                                                          jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT1    Single Step
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  singlestep                                      ;single step
  1721                                                          push    1                                               ;store interrupt nbr
  1722                                                          push    czIntSingleStep                                 ;store message offset
  1723                                                          jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT2    Non-Maskable Interrupt
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  nmi                                             ;non-maskable
  1730                                                          push    2                                               ;store interrupt nbr
  1731                                                          push    czIntNonMaskable                                ;store message offset
  1732                                                          jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT3    Break
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  break                                           ;break
  1739                                                          push    3                                               ;store interrupt nbr
  1740                                                          push    czIntBreak                                      ;store message offset
  1741                                                          jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT4    Into
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  into                                            ;into
  1748                                                          push    4                                               ;store interrupt nbr
  1749                                                          push    czIntInto                                       ;store message offset
  1750                                                          jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT5    Bounds
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  bounds                                          ;bounds
  1757                                                          push    5                                               ;store interrupt nbr
  1758                                                          push    czIntBounds                                     ;store message offset
  1759                                                          jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT6    Bad Operation Code
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  badopcode                                       ;bad opcode interrupt
  1766                                                          push    6                                               ;store interrupt nbr
  1767                                                          push    czIntBadOpCode                                  ;store message offset
  1768                                                          jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT7    No Coprocessor
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1775                                                          push    7                                               ;store interrupt nbr
  1776                                                          push    czIntNoCoprocessor                              ;store message offset
  1777                                                          jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT8    Double Fault
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  doublefault                                     ;doublefault interrupt
  1784                                                          push    8                                               ;store interrupt nbr
  1785                                                          push    czIntDoubleFault                                ;store message offset
  1786                                                          jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT9    Operand
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  operand                                         ;operand interrupt
  1793                                                          push    9                                               ;store interrupt nbr
  1794                                                          push    czIntOperand                                    ;store message offset
  1795                                                          jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT10   Bad Task State Segment
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  badtss                                          ;bad TSS interrupt
  1802                                                          push    10                                              ;store interrupt nbr
  1803                                                          push    czIntBadTSS                                     ;store message offset
  1804                                                          jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT11   Not Present
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  notpresent                                      ;not present interrupt
  1811                                                          push    11                                              ;store interrupt nbr
  1812                                                          push    czIntNotPresent                                 ;store message offset
  1813                                                          jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT12   Stack Limit
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  stacklimit                                      ;stack limit interrupt
  1820                                                          push    12                                              ;store interrupt nbr
  1821                                                          push    czIntStackLimit                                 ;store message offset
  1822                                                          jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT13   General Protection Fault
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  protection                                      ;protection fault interrupt
  1829                                                          push    13                                              ;store interrupt nbr
  1830                                                          push    czIntProtection                                 ;store message offset
  1831                                                          jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT14   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int14                                           ;(reserved)
  1838                                                          push    14                                              ;store interrupt nbr
  1839                                                          push    czIntReserved                                   ;store message offset
  1840                                                          jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT15   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int15                                           ;(reserved)
  1847                                                          push    15                                              ;store interrupt nbr
  1848                                                          push    czIntReserved                                   ;store message offset
  1849                                                          jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT16   Coprocessor Calculation
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  coproccalc                                      ;coprocessor calculation
  1856                                                          push    16                                              ;store interrupt nbr
  1857                                                          push    czIntCoprocessorCalc                            ;store message offset
  1858                                                          jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT17   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int17                                           ;(reserved)
  1865                                                          push    17                                              ;store interrupt nbr
  1866                                                          push    czIntReserved                                   ;store message offset
  1867                                                          jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       INT18   Reserved
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                                          menter  int18                                           ;(reserved)
  1874                                                          push    18                                              ;store interrupt nbr
  1875                                                          push    czIntReserved                                   ;store message offset
  1876                                                          jmp     ReportInterrupt                                 ;report interrupt
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;       INT19   Reserved
  1880                                  ;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                                          menter  int19                                           ;(reserved)
  1883                                                          push    19                                              ;store interrupt nbr
  1884                                                          push    czIntReserved                                   ;store message offset
  1885                                                          jmp     ReportInterrupt                                 ;report interrupt
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       INT20   Reserved
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  int20                                           ;(reserved)
  1892                                                          push    20                                              ;store interrupt nbr
  1893                                                          push    czIntReserved                                   ;store message offset
  1894                                                          jmp     ReportInterrupt                                 ;report interrupt
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;       INT21   Reserved
  1898                                  ;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                                          menter  int21                                           ;(reserved)
  1901                                                          push    21                                              ;store interrupt nbr
  1902                                                          push    czIntReserved                                   ;store message offset
  1903                                                          jmp     ReportInterrupt                                 ;report interrupt
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;       INT22   Reserved
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                                          menter  int22                                           ;(reserved)
  1910                                                          push    22                                              ;store interrupt nbr
  1911                                                          push    czIntReserved                                   ;store message offset
  1912                                                          jmp     ReportInterrupt                                 ;report interrupt
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       INT23   Reserved
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                                          menter  int23                                           ;(reserved)
  1919                                                          push    23                                              ;store interrupt nbr
  1920                                                          push    czIntReserved                                   ;store message offset
  1921                                                          jmp     ReportInterrupt                                 ;report interrupt
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                  ;
  1924                                  ;       INT24   Reserved
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                                          menter  int24                                           ;(reserved)
  1928                                                          push    24                                              ;store interrupt nbr
  1929                                                          push    czIntReserved                                   ;store message offset
  1930                                                          jmp     ReportInterrupt                                 ;report interrupt
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                  ;
  1933                                  ;       INT25   Reserved
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                                          menter  int25                                           ;(reserved)
  1937                                                          push    25                                              ;store interrupt nbr
  1938                                                          push    czIntReserved                                   ;store message offset
  1939                                                          jmp     ReportInterrupt                                 ;report interrupt
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                  ;
  1942                                  ;       INT26   Reserved
  1943                                  ;
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                                          menter  int26                                           ;(reserved)
  1946                                                          push    26                                              ;store interrupt nbr
  1947                                                          push    czIntReserved                                   ;store message offset
  1948                                                          jmp     ReportInterrupt                                 ;report interrupt
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                  ;
  1951                                  ;       INT27   Reserved
  1952                                  ;
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                                          menter  int27                                           ;(reserved)
  1955                                                          push    27                                              ;store interrupt nbr
  1956                                                          push    czIntReserved                                   ;store message offset
  1957                                                          jmp     ReportInterrupt                                 ;report interrupt
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                  ;
  1960                                  ;       INT28   Reserved
  1961                                  ;
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                                          menter  int28                                           ;(reserved)
  1964                                                          push    28                                              ;store interrupt nbr
  1965                                                          push    czIntReserved                                   ;store message offset
  1966                                                          jmp     ReportInterrupt                                 ;report interrupt
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  ;
  1969                                  ;       INT29   Reserved
  1970                                  ;
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                                          menter  int29                                           ;(reserved)
  1973                                                          push    29                                              ;store interrupt nbr
  1974                                                          push    czIntReserved                                   ;store message offset
  1975                                                          jmp     ReportInterrupt                                 ;report interrupt
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                  ;
  1978                                  ;       INT30   Reserved
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                                          menter  int30                                           ;(reserved)
  1982                                                          push    30                                              ;store interrupt nbr
  1983                                                          push    czIntReserved                                   ;store message offset
  1984                                                          jmp     ReportInterrupt                                 ;report interrupt
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                  ;
  1987                                  ;       INT31   Reserved
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                                          menter  int31                                           ;(reserved)
  1991                                                          push    31                                              ;store interrupt nbr
  1992                                                          push    czIntReserved                                   ;store message offset
  1993                                                          jmp     ReportInterrupt                                 ;report interrupt
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                  ;
  1996                                  ;       Routine:        ReportInterrupt
  1997                                  ;
  1998                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1999                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2000                                  ;
  2001                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2002                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2003                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2004                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2005                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2006                                  ;
  2007                                  ;       Out:            N/A             This routine does not exit.
  2008                                  ;
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2011                                                          push    es                                              ;save ES at time of interrupt
  2012                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2013                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2014                                  ;
  2015                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2016                                  ;
  2017                                  ;                       [EBP+56]        EFLAGS
  2018                                  ;                       [EBP+52]        CS
  2019                                  ;                       [EBP+48]        EIP
  2020                                  ;                       [EBP+44]        interrupt number (0-31)
  2021                                  ;                       [EBP+40]        error message address
  2022                                  ;                       [EBP+36]        DS
  2023                                  ;                       [EBP+32]        ES
  2024                                  ;                       [EBP+28]        EAX
  2025                                  ;                       [EBP+24]        ECX
  2026                                  ;                       [EBP+20]        EDX
  2027                                  ;                       [EBP+16]        EBX
  2028                                  ;                       [EBP+12]        ESP
  2029                                  ;                       [EBP+8]         EBP
  2030                                  ;                       [EBP+4]         ESI
  2031                                  ;                       [EBP+0]         EDI
  2032                                  ;
  2033                                                          push    cs                                              ;load code selector ...
  2034                                                          pop     ds                                              ;... into DS
  2035                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2036                                                          pop     es                                              ;... into ES
  2037                                  ;
  2038                                  ;       Display the interrupt report boundary box
  2039                                  ;
  2040                                                          mov     cl,13                                           ;column
  2041                                                          mov     ch,6                                            ;row
  2042                                                          mov     dl,50                                           ;width
  2043                                                          mov     dh,8                                            ;height
  2044                                                          mov     bh,07h                                          ;attribute
  2045                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2046                                  ;
  2047                                  ;       Display the report header
  2048                                  ;
  2049                                                          mov     cl,15                                           ;column
  2050                                                          mov     ch,7                                            ;row
  2051                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2052                                                          call    SetConsoleString                                ;draw text string
  2053                                  ;
  2054                                  ;       Display the interrupt description label
  2055                                  ;
  2056                                                          mov     cl,15                                           ;column
  2057                                                          mov     ch,8                                            ;row
  2058                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2059                                                          call    SetConsoleString                                ;draw text string
  2060                                  ;
  2061                                  ;       Display the interrupt number
  2062                                  ;
  2063                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2064                                                          mov     cl,26                                           ;column
  2065                                                          mov     ch,8                                            ;row
  2066                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2067                                  ;
  2068                                  ;       Display the interrupt name
  2069                                  ;
  2070                                                          mov     cl,29                                           ;column
  2071                                                          mov     ch,8                                            ;row
  2072                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2073                                                          call    SetConsoleString                                ;display interrupt description
  2074                                  ;
  2075                                  ;       Display the register values header
  2076                                  ;
  2077                                                          mov     cl,15                                           ;column
  2078                                                          mov     ch,10                                           ;row
  2079                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2080                                                          call    SetConsoleString                                ;draw text string
  2081                                  ;
  2082                                  ;       Display the EAX register label and value
  2083                                  ;
  2084                                                          mov     cl,15                                           ;column
  2085                                                          mov     ch,11                                           ;row
  2086                                                          mov     esi,czIntEAX                                    ;register EAX label
  2087                                                          call    SetConsoleString                                ;draw label
  2088                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2089                                                          mov     cl,19                                           ;column
  2090                                                          mov     ch,11                                           ;row
  2091                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2092                                  ;
  2093                                  ;       Display the ECX register label and value
  2094                                  ;
  2095                                                          mov     cl,15                                           ;column
  2096                                                          mov     ch,12                                           ;row
  2097                                                          mov     esi,czIntECX                                    ;label
  2098                                                          call    SetConsoleString                                ;draw label
  2099                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2100                                                          mov     cl,19                                           ;column
  2101                                                          mov     ch,12                                           ;row
  2102                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2103                                  ;
  2104                                  ;       Display the EDX register label and value
  2105                                  ;
  2106                                                          mov     cl,15                                           ;column
  2107                                                          mov     ch,13                                           ;row
  2108                                                          mov     esi,czIntEDX                                    ;label
  2109                                                          call    SetConsoleString                                ;draw label
  2110                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2111                                                          mov     cl,19                                           ;column
  2112                                                          mov     ch,13                                           ;row
  2113                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2114                                  ;
  2115                                  ;       Display the EBX register label and value
  2116                                  ;
  2117                                                          mov     cl,15                                           ;column
  2118                                                          mov     ch,14                                           ;row
  2119                                                          mov     esi,czIntEBX                                    ;label
  2120                                                          call    SetConsoleString                                ;draw label
  2121                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2122                                                          mov     cl,19                                           ;column
  2123                                                          mov     ch,14                                           ;row
  2124                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2125                                  ;
  2126                                  ;       Display the ESI register label and value
  2127                                  ;
  2128                                                          mov     cl,29                                           ;column
  2129                                                          mov     ch,11                                           ;row
  2130                                                          mov     esi,czIntESI                                    ;label
  2131                                                          call    SetConsoleString                                ;draw label
  2132                                                          mov     eax,[ebp+4]                                     ;ESI
  2133                                                          mov     cl,33                                           ;column
  2134                                                          mov     ch,11                                           ;row
  2135                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2136                                  ;
  2137                                  ;       Display the EDI register label and value
  2138                                  ;
  2139                                                          mov     cl,29                                           ;column
  2140                                                          mov     ch,12                                           ;row
  2141                                                          mov     esi,czIntEDI                                    ;label
  2142                                                          call    SetConsoleString                                ;draw label
  2143                                                          mov     eax,[ebp+0]                                     ;EDI
  2144                                                          mov     cl,33                                           ;column
  2145                                                          mov     ch,12                                           ;row
  2146                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2147                                  ;
  2148                                  ;       Display the EBP register label and value
  2149                                  ;
  2150                                                          mov     cl,29                                           ;column
  2151                                                          mov     ch,13                                           ;row
  2152                                                          mov     esi,czIntEBP                                    ;label
  2153                                                          call    SetConsoleString                                ;draw label
  2154                                                          mov     eax,[ebp+8]                                     ;EBP
  2155                                                          mov     cl,33                                           ;column
  2156                                                          mov     ch,13                                           ;row
  2157                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2158                                  ;
  2159                                  ;       Display the DS register label and value
  2160                                  ;
  2161                                                          mov     cl,42                                           ;column
  2162                                                          mov     ch,11                                           ;row
  2163                                                          mov     esi,czIntDS                                     ;label
  2164                                                          call    SetConsoleString                                ;draw label
  2165                                                          xor     eax,eax                                         ;zero register
  2166                                                          mov     ax,[ebp+36]                                     ;DS
  2167                                                          mov     cl,46                                           ;column
  2168                                                          mov     ch,11                                           ;row
  2169                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2170                                  ;
  2171                                  ;       Display the ES register label and value
  2172                                  ;
  2173                                                          mov     cl,42                                           ;column
  2174                                                          mov     ch,12                                           ;row
  2175                                                          mov     esi,czIntES                                     ;label
  2176                                                          call    SetConsoleString                                ;draw label
  2177                                                          xor     eax,eax                                         ;zero register
  2178                                                          mov     ax,[ebp+32]                                     ;ES
  2179                                                          mov     cl,46                                           ;column
  2180                                                          mov     ch,12                                           ;row
  2181                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2182                                  ;
  2183                                  ;       Display the SS register label and value
  2184                                  ;
  2185                                                          mov     cl,42                                           ;column
  2186                                                          mov     ch,13                                           ;row
  2187                                                          mov     esi,czIntSS                                     ;label
  2188                                                          call    SetConsoleString                                ;draw label
  2189                                                          xor     eax,eax                                         ;zero register
  2190                                                          mov     ax,ss                                           ;SS
  2191                                                          mov     cl,46                                           ;column
  2192                                                          mov     ch,13                                           ;row
  2193                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2194                                  ;
  2195                                  ;       Display the CS register lable and value
  2196                                  ;
  2197                                                          mov     cl,42                                           ;column
  2198                                                          mov     ch,14                                           ;row
  2199                                                          mov     esi,czIntCS                                     ;label
  2200                                                          call    SetConsoleString                                ;draw label
  2201                                                          xor     eax,eax                                         ;zero register
  2202                                                          mov     ax,[ebp+52]                                     ;CS
  2203                                                          mov     cl,46                                           ;column
  2204                                                          mov     ch,14                                           ;row
  2205                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2206                                  ;
  2207                                  ;       Display the EFLAGS register label and value
  2208                                  ;
  2209                                                          mov     cl,51                                           ;column
  2210                                                          mov     ch,11                                           ;row
  2211                                                          mov     esi,czIntEFLAGS                                 ;label
  2212                                                          call    SetConsoleString                                ;draw label
  2213                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2214                                                          mov     cl,55                                           ;column
  2215                                                          mov     ch,11                                           ;row
  2216                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2217                                  ;
  2218                                  ;       Display the ESP register label and value
  2219                                  ;
  2220                                                          mov     cl,51                                           ;column
  2221                                                          mov     ch,13                                           ;row
  2222                                                          mov     esi,czIntESP                                    ;label
  2223                                                          call    SetConsoleString                                ;draw label
  2224                                                          mov     eax,[ebp+12]                                    ;ESP
  2225                                                          mov     cl,55                                           ;column
  2226                                                          mov     ch,13                                           ;row
  2227                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2228                                  ;
  2229                                  ;       Display the EIP register label and value
  2230                                  ;
  2231                                                          mov     cl,51                                           ;column
  2232                                                          mov     ch,14                                           ;row
  2233                                                          mov     esi,czIntEIP                                    ;label
  2234                                                          call    SetConsoleString                                ;draw label
  2235                                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2236                                                          mov     cl,55                                           ;column
  2237                                                          mov     ch,14                                           ;row
  2238                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2239                                  ;
  2240                                  ;       Halt and loop until reset
  2241                                  ;
  2242                                  .10                     sti                                                     ;enable maskable interrupts
  2243                                                          hlt                                                     ;halt processor
  2244                                                          jmp     .10                                             ;resume on interrupt
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                  ;
  2247                                  ;       Processor Interrupt Name Strings
  2248                                  ;
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  czIntDivideByZero       db      "Division by zero",0
  2251                                  czIntSingleStep         db      "Single step",0
  2252                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2253                                  czIntBreak              db      "Break",0
  2254                                  czIntInto               db      "Into",0
  2255                                  czIntBounds             db      "Bounds",0
  2256                                  czIntBadOpCode          db      "Bad Operation Code",0
  2257                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2258                                  czIntDoubleFault        db      "Double Fault",0
  2259                                  czIntOperand            db      "Operand",0
  2260                                  czIntBadTSS             db      "Bad Task State Segment",0
  2261                                  czIntNotPresent         db      "Not Present",0
  2262                                  czIntStackLimit         db      "Stack Limit",0
  2263                                  czIntProtection         db      "General Protection Fault",0
  2264                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2265                                  czIntReserved           db      "Reserved",0
  2266                                  ;-----------------------------------------------------------------------------------------------------------------------
  2267                                  ;
  2268                                  ;       Processor Interrupt Handling Strings
  2269                                  ;
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2272                                  czIntLabel              db      "Interrupt #",0
  2273                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2274                                  czIntEAX                db      "EAX:",0
  2275                                  czIntECX                db      "ECX:",0
  2276                                  czIntEDX                db      "EDX:",0
  2277                                  czIntEBX                db      "EBX:",0
  2278                                  czIntESI                db      "ESI:",0
  2279                                  czIntEDI                db      "EDI:",0
  2280                                  czIntEBP                db      "EBP:",0
  2281                                  czIntESP                db      "ESP:",0
  2282                                  czIntDS                 db      " DS:",0
  2283                                  czIntES                 db      " ES:",0
  2284                                  czIntSS                 db      " SS:",0
  2285                                  czIntCS                 db      " CS:",0
  2286                                  czIntEFLAGS             db      "FLG:",0
  2287                                  czIntEIP                db      "EIP:",0
  2288                                  ;-----------------------------------------------------------------------------------------------------------------------
  2289                                  ;
  2290                                  ;       Routine:        DrawTextDialogBox
  2291                                  ;
  2292                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2293                                  ;
  2294                                  ;       In:             CL      upper left column (0-79)
  2295                                  ;                       CH      upper left row (0-24)
  2296                                  ;                       DL      column width, excluding border
  2297                                  ;                       DH      row height, excluding border
  2298                                  ;                       BH      color attribute
  2299                                  ;
  2300                                  ;-----------------------------------------------------------------------------------------------------------------------
  2301                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2302                                                          push    esi                                             ;
  2303                                                          push    edi                                             ;
  2304                                                          push    es                                              ;
  2305                                                          push    EGDTCGA                                         ;load CGA selector ...
  2306                                                          pop     es                                              ;... into ES
  2307                                  ;
  2308                                  ;       Compute target display offset
  2309                                  ;
  2310                                                          xor     eax,eax                                         ;zero register
  2311                                                          mov     al,ch                                           ;row
  2312                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2313                                                          mul     ah                                              ;row offset
  2314                                                          add     al,cl                                           ;add column
  2315                                                          adc     ah,0                                            ;add overflow
  2316                                                          add     al,cl                                           ;add column
  2317                                                          adc     ah,0                                            ;add overflow
  2318                                                          mov     edi,eax                                         ;target row offset
  2319                                  ;
  2320                                  ;       Display top border row
  2321                                  ;
  2322                                                          push    edi                                             ;save target row offset
  2323                                                          mov     ah,bh                                           ;attribute
  2324                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2325                                                          stosw                                                   ;display character and attribute
  2326                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2327                                                          xor     ecx,ecx                                         ;zero register
  2328                                                          mov     cl,dl                                           ;width, excluding border
  2329                                                          rep     stosw                                           ;display horizontal border
  2330                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2331                                                          stosw                                                   ;display character and attribute
  2332                                                          pop     edi                                             ;restore target row offset
  2333                                                          add     edi,ECONROWBYTES                                ;next row
  2334                                  ;
  2335                                  ;       Display dialog box body rows
  2336                                  ;
  2337                                                          xor     ecx,ecx                                         ;zero register
  2338                                                          mov     cl,dh                                           ;height, excluding border
  2339                                  .10                     push    ecx                                             ;save remaining rows
  2340                                                          push    edi                                             ;save target row offset
  2341                                                          mov     ah,bh                                           ;attribute
  2342                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2343                                                          stosw                                                   ;display character and attribute
  2344                                                          mov     al,EASCIISPACE                                  ;space
  2345                                                          xor     ecx,ecx                                         ;zero register
  2346                                                          mov     cl,dl                                           ;width, excluding border
  2347                                                          rep     stosw                                           ;display row
  2348                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2349                                                          stosw                                                   ;display character and attribute
  2350                                                          pop     edi                                             ;restore target row offset
  2351                                                          add     edi,ECONROWBYTES                                ;next row
  2352                                                          pop     ecx                                             ;remaining rows
  2353                                                          loop    .10                                             ;next row
  2354                                  ;
  2355                                  ;       Display bottom border row
  2356                                  ;
  2357                                                          push    edi                                             ;save target row offset
  2358                                                          mov     ah,bh                                           ;attribute
  2359                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2360                                                          stosw                                                   ;display character and attribute
  2361                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2362                                                          xor     ecx,ecx                                         ;zero register
  2363                                                          mov     cl,dl                                           ;width, excluding border
  2364                                                          rep     stosw                                           ;display horizontal border
  2365                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2366                                                          stosw                                                   ;display character and attribute
  2367                                                          pop     edi                                             ;restore target row offset
  2368                                                          add     edi,ECONROWBYTES                                ;next row
  2369                                  ;
  2370                                  ;       Restore and return
  2371                                  ;
  2372                                                          pop     es                                              ;restore non-volatile regs
  2373                                                          pop     edi                                             ;
  2374                                                          pop     esi                                             ;
  2375                                                          pop     ecx                                             ;
  2376                                                          ret                                                     ;return
  2377                                  ;=======================================================================================================================
  2378                                  ;
  2379                                  ;       Hardware Device Interupts
  2380                                  ;
  2381                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2382                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2383                                  ;       (BX=2028h).
  2384                                  ;
  2385                                  ;=======================================================================================================================
  2386                                  ;-----------------------------------------------------------------------------------------------------------------------
  2387                                  ;
  2388                                  ;       IRQ0    Clock Tick Interrupt
  2389                                  ;
  2390                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2391                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2392                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2393                                  ;
  2394                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2395                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2396                                  ;
  2397                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2398                                  ;       zero, the floppy disk motors are turned off.
  2399                                  ;
  2400                                  ;-----------------------------------------------------------------------------------------------------------------------
  2401                                                          menter  clocktick                                       ;clock tick interrupt
  2402                                                          push    eax                                             ;save non-volatile regs
  2403                                                          push    edx                                             ;
  2404                                                          push    ds                                              ;
  2405                                  ;
  2406                                  ;       Update the clock tick count and the elapsed days as needed.
  2407                                  ;
  2408                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2409                                                          pop     ds                                              ;... into data segment register
  2410                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2411                                                          inc     eax                                             ;increment clock ticks
  2412                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2413                                                          jb      irq0.10                                         ;no, skip ahead
  2414                                                          inc     byte [wbClockDays]                              ;increment clock days
  2415                                                          xor     eax,eax                                         ;reset clock ticks
  2416                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2417                                  ;
  2418                                  ;       Decrement floppy disk motor timeout.
  2419                                  ;
  2420                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2421                                                          je      irq0.20                                         ;yes, skip ahead
  2422                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2423                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2424                                  ;
  2425                                  ;       Turn off the floppy disk motor if appropriate.
  2426                                  ;
  2427                                                          sti                                                     ;enable maskable interrupts
  2428                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2429                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2430                                                          in      al,dx                                           ;FDC main status byte
  2431                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2432                                                          jnz     irq0.15                                         ;wait while busy
  2433                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2434                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2435                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2436                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2437                                                          out     dx,al                                           ;turn motor off
  2438                                  ;
  2439                                  ;       Signal the end of the hardware interrupt.
  2440                                  ;
  2441                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2442                                  ;
  2443                                  ;       Restore and return.
  2444                                  ;
  2445                                                          pop     ds                                              ;restore modified regs
  2446                                                          pop     edx                                             ;
  2447                                                          pop     eax                                             ;
  2448                                                          iretd                                                   ;return
  2449                                  ;-----------------------------------------------------------------------------------------------------------------------
  2450                                  ;
  2451                                  ;       IRQ1    Keyboard Interrupt
  2452                                  ;
  2453                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2454                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2455                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2456                                  ;       ALL modified registers upon return.
  2457                                  ;
  2458                                  ;-----------------------------------------------------------------------------------------------------------------------
  2459                                                          menter  keyboard                                        ;keyboard interrrupt
  2460                                                          push    eax                                             ;save non-volatile regs
  2461                                                          push    ebx                                             ;
  2462                                                          push    ecx                                             ;
  2463                                                          push    esi                                             ;
  2464                                                          push    ds                                              ;
  2465                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2466                                                          pop     ds                                              ;... into data segment register
  2467                                                          xor     al,al                                           ;zero
  2468                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2469                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2470                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2471                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2472                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2473                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2474                                                          mov     al,' '                                          ;space
  2475                                                          mov     [wbConsoleChar],al                              ;set character to space
  2476                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2477                                                          not     al                                              ;controller timeout mask
  2478                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2479                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2480                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2481                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2482                                                          jz      irq1.140                                        ;yes, skip ahead
  2483                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2484                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2485                                                          mov     ah,al                                           ;copy scan code 0
  2486                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2487                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2488                                                          je      irq1.30                                         ;yes, set flag
  2489                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2490                                                          je      irq1.40                                         ;yes, reset flag
  2491                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2492                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2493                                                          je      irq1.30                                         ;yes, set flag
  2494                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2495                                                          je      irq1.40                                         ;yes, reset flag
  2496                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2497                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2498                                                          je      irq1.30                                         ;yes, set flag
  2499                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2500                                                          je      irq1.40                                         ;yes, reset flag
  2501                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2502                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2503                                                          je      irq1.30                                         ;yes, set flag
  2504                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2505                                                          je      irq1.40                                         ;yes, reset flag
  2506                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2507                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2508                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2509                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2510                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2511                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2512                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2513                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2514                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2515                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2516                                                          jne     irq1.70                                         ;no, skip ahead
  2517                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2518                                                          jz      irq1.140                                        ;yes, skip ahead
  2519                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2520                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2521                                                          mov     ah,al                                           ;copy scan code 1
  2522                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2523                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2524                                                          je      irq1.30                                         ;yes, set flag
  2525                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2526                                                          je      irq1.40                                         ;yes, reset flag
  2527                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2528                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2529                                                          je      irq1.30                                         ;yes, set flag
  2530                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2531                                                          je      irq1.40                                         ;yes, reset flag
  2532                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2533                                                          je      irq1.80                                         ;yes, skip ahead
  2534                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2535                                                          je      irq1.80                                         ;yes, skip ahead
  2536                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2537                                                          je      irq1.10                                         ;yes, continue
  2538                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2539                                                          jne     irq1.20                                         ;no, skip ahead
  2540                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2541                                                          jz      irq1.140                                        ;yes, skip ahead
  2542                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2543                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2544                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2545                                                          jz      irq1.140                                        ;yes, skip ahead
  2546                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2547                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2548                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2549                                  irq1.30                 or      bl,al                                           ;set shift flag
  2550                                                          jmp     irq1.60                                         ;skip ahead
  2551                                  irq1.40                 not     al                                              ;convert flag to mask
  2552                                                          and     bl,al                                           ;reset shift flag
  2553                                                          jmp     irq1.60                                         ;skip ahead
  2554                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2555                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2556                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2557                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2558                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2559                                                          jmp     irq1.150                                        ;finish keyboard handling
  2560                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2561                                                          jne     irq1.80                                         ;no continue
  2562                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2563                                                          jz      irq1.140                                        ;yes, skip ahead
  2564                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2565                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2566                                                          mov     ah,al                                           ;copy scan code 1
  2567                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2568                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2569                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2570                                                          jz      irq1.140                                        ;yes, skip ahead
  2571                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2572                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2573                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2574                                                          jz      irq1.140                                        ;yes, skip ahead
  2575                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2576                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2577                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2578                                                          jz      irq1.140                                        ;yes, skip ahead
  2579                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2580                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2581                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2582                                                          jz      irq1.140                                        ;yes, skip ahead
  2583                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2584                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2585                                                          jmp     irq1.150                                        ;continue
  2586                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2587                                                          test    ah,EKEYBUP                                      ;release code?
  2588                                                          jnz     irq1.130                                        ;yes, skip ahead
  2589                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2590                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2591                                                          jz      irq1.90                                         ;no, skip ahead
  2592                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2593                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2594                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2595                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2596                                                          jz      irq1.100                                        ;no skip ahead
  2597                                                          mov     cl,al                                           ;copy ASCII code
  2598                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2599                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2600                                                          jb      irq1.100                                        ;yes, skip ahead
  2601                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2602                                                          ja      irq1.100                                        ;yes, skip ahead
  2603                                                          xor     al,EASCIICASE                                   ;switch case
  2604                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2605                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2606                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2607                                                          jz      irq1.120                                        ;no, skip ahead
  2608                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2609                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2610                                                          or      edx,eax                                         ;msg id and codes
  2611                                                          xor     ecx,ecx                                         ;null param
  2612                                                          push    eax                                             ;save codes
  2613                                                          call    PutMessage                                      ;put message to console
  2614                                                          pop     eax                                             ;restore codes
  2615                                                          test    al,al                                           ;ASCII translation?
  2616                                                          jz      irq1.130                                        ;no, skip ahead
  2617                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2618                                                          and     eax,0FFFFh                                      ;clear high-order word
  2619                                                          or      edx,eax                                         ;msg id and codes
  2620                                                          xor     ecx,ecx                                         ;null param
  2621                                                          call    PutMessage                                      ;put message to console
  2622                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2623                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2624                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2625                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2626                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2627                                                          pop     ds                                              ;restore non-volatile regs
  2628                                                          pop     esi                                             ;
  2629                                                          pop     ecx                                             ;
  2630                                                          pop     ebx                                             ;
  2631                                                          pop     eax                                             ;
  2632                                                          iretd                                                   ;return
  2633                                  ;-----------------------------------------------------------------------------------------------------------------------
  2634                                  ;       Scan-Code to ASCII Translation Tables
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2637                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2638                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2639                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2640                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2641                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2642                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2643                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2644                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2645                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2646                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2647                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2648                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2649                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2650                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2651                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2652                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2653                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2654                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2655                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2656                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2657                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2658                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2659                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2660                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2661                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2662                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2663                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2664                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2665                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2666                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2667                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2671                                  ;
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                                          menter  iochannel                                       ;secondary 8259A cascade
  2674                                                          push    eax                                             ;save modified regs
  2675                                                          jmp     hwint                                           ;end interrupt and return
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  ;
  2678                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2679                                  ;
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                                          menter  com2                                            ;serial port 2 interrupt
  2682                                                          push    eax                                             ;save modified regs
  2683                                                          jmp     hwint                                           ;end interrupt and return
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  ;
  2686                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2687                                  ;
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                                          menter  com1                                            ;serial port 1 interrupt
  2690                                                          push    eax                                             ;save modified regs
  2691                                                          jmp     hwint                                           ;end interrupt and return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2695                                  ;
  2696                                  ;-----------------------------------------------------------------------------------------------------------------------
  2697                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2698                                                          push    eax                                             ;save modified regs
  2699                                                          jmp     hwint                                           ;end interrupt and return
  2700                                  ;-----------------------------------------------------------------------------------------------------------------------
  2701                                  ;
  2702                                  ;       IRQ6    Diskette Hardware Interrupt
  2703                                  ;
  2704                                  ;-----------------------------------------------------------------------------------------------------------------------
  2705                                                          menter  diskette                                        ;floppy disk interrupt
  2706                                                          push    eax                                             ;save non-volatile regs
  2707                                                          push    ds                                              ;
  2708                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2709                                                          pop     ds                                              ;... into DS register
  2710                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2711                                                          or      al,10000000b                                    ;set IRQ flag
  2712                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2713                                                          pop     ds                                              ;restore non-volatile regs
  2714                                                          jmp     hwint                                           ;end primary PIC interrupt
  2715                                  ;-----------------------------------------------------------------------------------------------------------------------
  2716                                  ;
  2717                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2718                                  ;
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2721                                                          push    eax                                             ;save modified regs
  2722                                                          jmp     hwint                                           ;end interrupt and return
  2723                                  ;-----------------------------------------------------------------------------------------------------------------------
  2724                                  ;
  2725                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2726                                  ;
  2727                                  ;-----------------------------------------------------------------------------------------------------------------------
  2728                                                          menter  rtclock                                         ;real-time clock interrupt
  2729                                                          push    eax                                             ;save modified regs
  2730                                                          jmp     hwwint                                          ;end interrupt and return
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;
  2733                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2734                                  ;
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2737                                                          push    eax                                             ;save modified regs
  2738                                                          jmp     hwwint                                          ;end interrupt and return
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  ;
  2741                                  ;       IRQ10   Reserved Hardware Interrupt
  2742                                  ;
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                                          menter  irq10                                           ;reserved
  2745                                                          push    eax                                             ;save modified regs
  2746                                                          jmp     hwwint                                          ;end interrupt and return
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                  ;
  2749                                  ;       IRQ11   Reserved Hardware Interrupt
  2750                                  ;
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                                          menter  irq11                                           ;reserved
  2753                                                          push    eax                                             ;save modified regs
  2754                                                          jmp     hwwint                                          ;end interrupt and return
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  ;
  2757                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2758                                  ;
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2761                                                          push    eax                                             ;save modified regs
  2762                                                          jmp     hwwint                                          ;end interrupt and return
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2766                                  ;
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                                          menter  coprocessor                                     ;coprocessor interrupt
  2769                                                          push    eax                                             ;save modified regs
  2770                                                          jmp     hwwint                                          ;end interrupt and return
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  ;
  2773                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2777                                                          push    eax                                             ;save modified regs
  2778                                                          jmp     hwwint                                          ;end interrupt and return
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  ;
  2781                                  ;       IRQ15   Reserved Hardware Interrupt
  2782                                  ;
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                                          menter  irq15                                           ;reserved
  2785                                                          push    eax                                             ;save modified regs
  2786                                                          jmp     hwwint                                          ;end interrupt and return
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                  ;
  2789                                  ;       Exit from hardware interrupt
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2793                                                          jmp     hwint90                                         ;skip ahead
  2794                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2795                                  hwint90                 pop     eax                                             ;restore modified regs
  2796                                                          iretd                                                   ;return from interrupt
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                  ;
  2799                                  ;       INT 30h Operating System Software Service Interrupt
  2800                                  ;
  2801                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2802                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2803                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2804                                  ;       the entry address of the specific function from a table.
  2805                                  ;
  2806                                  ;-----------------------------------------------------------------------------------------------------------------------
  2807                                                          menter  svc
  2808                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2809                                                          jae     svc90                                           ;yes, skip ahead
  2810                                                          movzx   eax,al                                          ;function
  2811                                                          shl     eax,2                                           ;offset into table
  2812                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2813                                  svc90                   iretd                                                   ;return from interrupt
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  ;
  2816                                  ;       Service Request Table
  2817                                  ;
  2818                                  ;
  2819                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2820                                  ;
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2823                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2824                                                          tsvce   CompareMemory                                   ;compare memory
  2825                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2826                                                          tsvce   FreeMemory                                      ;free memory block
  2827                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2828                                                          tsvce   GetConsoleString                                ;get string input
  2829                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2830                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2831                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2832                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2833                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2834                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2835                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2836                                                          tsvce   PutDayString                                    ;put DD string
  2837                                                          tsvce   PutHourString                                   ;put hh string
  2838                                                          tsvce   PutMinuteString                                 ;put mm string
  2839                                                          tsvce   PutMonthString                                  ;put MM string
  2840                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2841                                                          tsvce   PutSecondString                                 ;put ss string
  2842                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2843                                                          tsvce   PutWeekdayString                                ;put weekday string
  2844                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2845                                                          tsvce   PutYearString                                   ;put YYYY string
  2846                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2847                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2848                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2849                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2850                                                          tsvce   UpperCaseString                                 ;upper-case string
  2851                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                  ;
  2854                                  ;       Service Request Macros
  2855                                  ;
  2856                                  ;       These macros provide positional parameterization of service request calls.
  2857                                  ;
  2858                                  ;-----------------------------------------------------------------------------------------------------------------------
  2859                                  %macro                  allocateMemory 1
  2860                                                          mov     ecx,%1                                          ;bytes to allocate
  2861                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2862                                                          int     _svc                                            ;invoke OS service
  2863                                  %endmacro
  2864                                  %macro                  clearConsoleScreen 0
  2865                                                          mov     al,eClearConsoleScreen                          ;function code
  2866                                                          int     _svc                                            ;invoke OS service
  2867                                  %endmacro
  2868                                  %macro                  compareMemory 0
  2869                                                          mov     al,eCompareMemory                               ;function code
  2870                                                          int     _svc                                            ;invoke OS service
  2871                                  %endmacro
  2872                                  %macro                  decimalToUnsigned 0
  2873                                                          mov     al,eDecimalToUnsigned                           ;function code
  2874                                                          int     _svc                                            ;invoke OS servie
  2875                                  %endmacro
  2876                                  %macro                  freeMemory 1
  2877                                                          mov     edx,%1                                          ;address of memory block
  2878                                                          mov     al,eFreeMemory                                  ;function code
  2879                                                          int     _svc                                            ;invoke OS service
  2880                                  %endmacro
  2881                                  %macro                  getBaseMemSize 0
  2882                                                          mov     al,eGetBaseMemSize                              ;function code
  2883                                                          int     _svc                                            ;invoke OS service
  2884                                  %endmacro
  2885                                  %macro                  getConsoleString 4
  2886                                                          mov     edx,%1                                          ;buffer address
  2887                                                          mov     ecx,%2                                          ;max characters
  2888                                                          mov     bh,%3                                           ;echo indicator
  2889                                                          mov     bl,%4                                           ;terminator
  2890                                                          mov     al,eGetConsoleString                            ;function code
  2891                                                          int     _svc                                            ;invoke OS service
  2892                                  %endmacro
  2893                                  %macro                  getExtendedMemSize 0
  2894                                                          mov     al,eGetExtendedMemSize                          ;function code
  2895                                                          int     _svc                                            ;invoke OS service
  2896                                  %endmacro
  2897                                  %macro                  getROMMemSize 0
  2898                                                          mov     al,eGetROMMemSize                               ;function code
  2899                                                          int     _svc                                            ;invoke OS service
  2900                                  %endmacro
  2901                                  %macro                  hexadecimalToUnsigned 0
  2902                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2903                                                          int     _svc                                            ;invoke OS service
  2904                                  %endmacro
  2905                                  %macro                  isLeapYear 1
  2906                                                          mov     ebx,%1                                          ;DATETIME addr
  2907                                                          mov     al,eIsLeapYear                                  ;function code
  2908                                                          int     _svc                                            ;invoke OS service
  2909                                  %endmacro
  2910                                  %macro                  placeCursor 0
  2911                                                          mov     al,ePlaceCursor                                 ;function code
  2912                                                          int     _svc                                            ;invoke OS service
  2913                                  %endmacro
  2914                                  %macro                  putConsoleString 1
  2915                                                          mov     edx,%1                                          ;string address
  2916                                                          mov     al,ePutConsoleString                            ;function code
  2917                                                          int     _svc                                            ;invoke OS service
  2918                                  %endmacro
  2919                                  %macro                  putDateString 0
  2920                                                          mov     al,ePutDateString                               ;function code
  2921                                                          int     _svc                                            ;invoke OS service
  2922                                  %endmacro
  2923                                  %macro                  putDateString 2
  2924                                                          mov     ebx,%1                                          ;DATETIME addr
  2925                                                          mov     edx,%2                                          ;output buffer addr
  2926                                                          mov     al,ePutDateString                               ;function code
  2927                                                          int     _svc                                            ;invoke OS service
  2928                                  %endmacro
  2929                                  %macro                  putDayString 2
  2930                                                          mov     ebx,%1                                          ;DATETIME addr
  2931                                                          mov     edx,%2                                          ;output buffer addr
  2932                                                          mov     al,ePutDayString                                ;function code
  2933                                                          int     _svc                                            ;invoke OS service
  2934                                  %endmacro
  2935                                  %macro                  putHourString 2
  2936                                                          mov     ebx,%1                                          ;DATETIME addr
  2937                                                          mov     edx,%2                                          ;output buffer addr
  2938                                                          mov     al,ePutHourString                               ;function code
  2939                                                          int     _svc                                            ;invoke OS service
  2940                                  %endmacro
  2941                                  %macro                  putMinuteString 2
  2942                                                          mov     ebx,%1                                          ;DATETIME addr
  2943                                                          mov     edx,%2                                          ;output buffer addr
  2944                                                          mov     al,ePutMinuteString                             ;function code
  2945                                                          int     _svc                                            ;invoke OS service
  2946                                  %endmacro
  2947                                  %macro                  putMonthString 2
  2948                                                          mov     ebx,%1                                          ;DATETIME addr
  2949                                                          mov     edx,%2                                          ;output buffer addr
  2950                                                          mov     al,ePutMonthString                              ;function code
  2951                                                          int     _svc                                            ;invoke OS service
  2952                                  %endmacro
  2953                                  %macro                  putMonthNameString 2
  2954                                                          mov     ebx,%1                                          ;DATETIME addr
  2955                                                          mov     edx,%2                                          ;output buffer addr
  2956                                                          mov     al,ePutMonthNameString                          ;function code
  2957                                                          int     _svc                                            ;invoke OS service
  2958                                  %endmacro
  2959                                  %macro                  putSecondString 2
  2960                                                          mov     ebx,%1                                          ;DATETIME addr
  2961                                                          mov     edx,%2                                          ;output buffer addr
  2962                                                          mov     al,ePutSecondString                             ;function code
  2963                                                          int     _svc                                            ;invoke OS service
  2964                                  %endmacro
  2965                                  %macro                  putTimeString 0
  2966                                                          mov     al,ePutTimeString                               ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  putTimeString 2
  2970                                                          mov     ebx,%1                                          ;DATETIME addr
  2971                                                          mov     edx,%2                                          ;output buffer addr
  2972                                                          mov     al,ePutTimeString                               ;function code
  2973                                                          int     _svc                                            ;invoke OS service
  2974                                  %endmacro
  2975                                  %macro                  putWeekdayString 2
  2976                                                          mov     ebx,%1                                          ;DATETIME addr
  2977                                                          mov     edx,%2                                          ;output buffer addr
  2978                                                          mov     al,ePutWeekdayString                            ;function code
  2979                                                          int     _svc                                            ;invoke OS service
  2980                                  %endmacro
  2981                                  %macro                  putWeekdayNameString 2
  2982                                                          mov     ebx,%1                                          ;DATETIME addr
  2983                                                          mov     edx,%2                                          ;output buffer addr
  2984                                                          mov     al,ePutWeekdayNameString                        ;function code
  2985                                                          int     _svc                                            ;invoke OS service
  2986                                  %endmacro
  2987                                  %macro                  putYearString 2
  2988                                                          mov     ebx,%1                                          ;DATETIME addr
  2989                                                          mov     edx,%2                                          ;output buffer addr
  2990                                                          mov     al,ePutYearString                               ;function code
  2991                                                          int     _svc                                            ;invoke OS service
  2992                                  %endmacro
  2993                                  %macro                  readRealTimeClock 0
  2994                                                          mov     al,eReadRealTimeClock                           ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  readRealTimeClock 1
  2998                                                          mov     ebx,%1                                          ;DATETIME addr
  2999                                                          mov     al,eReadRealTimeClock                           ;function code
  3000                                                          int     _svc                                            ;invoke OS service
  3001                                  %endmacro
  3002                                  %macro                  resetSystem 0
  3003                                                          mov     al,eResetSystem                                 ;function code
  3004                                                          int     _svc                                            ;invoke OS service
  3005                                  %endmacro
  3006                                  %macro                  unsignedToDecimalString 0
  3007                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3008                                                          int     _svc                                            ;invoke OS service
  3009                                  %endmacro
  3010                                  %macro                  unsignedToHexadecimal 0
  3011                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3012                                                          int     _svc                                            ;invoke OS service
  3013                                  %endmacro
  3014                                  %macro                  upperCaseString 0
  3015                                                          mov     al,eUpperCaseString                             ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  ;=======================================================================================================================
  3019                                  ;
  3020                                  ;       Kernel Function Library
  3021                                  ;
  3022                                  ;=======================================================================================================================
  3023                                  ;=======================================================================================================================
  3024                                  ;
  3025                                  ;       Date and Time Helper Routines
  3026                                  ;
  3027                                  ;       GetYear
  3028                                  ;       IsLeapYear
  3029                                  ;       PutDateString
  3030                                  ;       PutDayString
  3031                                  ;       PutHourString
  3032                                  ;       PutMinuteString
  3033                                  ;       PutMonthString
  3034                                  ;       PutMonthNameString
  3035                                  ;       PutSecondString
  3036                                  ;       PutTimeString
  3037                                  ;       PutWeekdayString
  3038                                  ;       PutWeekdayNameString
  3039                                  ;       PutYearString
  3040                                  ;
  3041                                  ;=======================================================================================================================
  3042                                  ;-----------------------------------------------------------------------------------------------------------------------
  3043                                  ;
  3044                                  ;       Routine:        GetYear
  3045                                  ;
  3046                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3047                                  ;
  3048                                  ;       In:             DS:EBX  DATETIME address
  3049                                  ;
  3050                                  ;       Out:            ECX     year
  3051                                  ;
  3052                                  ;-----------------------------------------------------------------------------------------------------------------------
  3053                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3054                                                          imul    ecx,100                                         ;century * 100
  3055                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3056                                                          add     ecx,eax                                         ;year (YYYY)
  3057                                                          ret                                                     ;return
  3058                                  ;-----------------------------------------------------------------------------------------------------------------------
  3059                                  ;
  3060                                  ;       Routine:        IsLeapYear
  3061                                  ;
  3062                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3063                                  ;
  3064                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3065                                  ;
  3066                                  ;       Out:            ECX     0 = not a leap year
  3067                                  ;                               1 = leap year
  3068                                  ;
  3069                                  ;-----------------------------------------------------------------------------------------------------------------------
  3070                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3071                                                          mov     eax,ecx                                         ;EAX = YYYY
  3072                                                          xor     ecx,ecx                                         ;assume not leap year
  3073                                                          test    al,00000011b                                    ;multiple of four?
  3074                                                          jnz     .no                                             ;no, branch
  3075                                                          mov     dl,100                                          ;divisor
  3076                                                          div     dl                                              ;divide by 100
  3077                                                          test    ah,ah                                           ;multiple of 100?
  3078                                                          jnz     .yes                                            ;yes, branch
  3079                                                          test    al,00000011b                                    ;multiple of 400?
  3080                                                          jnz     .no                                             ;no, branch
  3081                                  .yes                    inc     ecx                                             ;indicate leap
  3082                                  .no                     ret                                                     ;return
  3083                                  ;-----------------------------------------------------------------------------------------------------------------------
  3084                                  ;
  3085                                  ;       Routine:        PutDateString
  3086                                  ;
  3087                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3088                                  ;                       structure at ds:ebx.
  3089                                  ;
  3090                                  ;       In:             DS:EBX  DATETIME address
  3091                                  ;                       DS:EDX  output buffer address
  3092                                  ;
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3095                                                          push    edi                                             ;
  3096                                                          push    es                                              ;
  3097                                                          push    ds                                              ;store data selector ...
  3098                                                          pop     es                                              ;... in extra segment reg
  3099                                                          mov     edi,edx                                         ;output buffer address
  3100                                                          mov     cl,10                                           ;divisor
  3101                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3102                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3103                                                          div     cl                                              ;AH = rem; AL = quotient
  3104                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3105                                                          cld                                                     ;forward strings
  3106                                                          stosd                                                   ;store "mm/"nul
  3107                                                          dec     edi                                             ;address of terminator
  3108                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3109                                                          div     cl                                              ;AH = rem; AL = quotient
  3110                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3111                                                          stosd                                                   ;store "dd/"nul
  3112                                                          dec     edi                                             ;address of terminator
  3113                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3114                                                          div     cl                                              ;AH = rem; AL = quotient
  3115                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3116                                                          stosd                                                   ;store "cc/"null
  3117                                                          dec     edi                                             ;address of terminator
  3118                                                          dec     edi                                             ;address of delimiter
  3119                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3120                                                          div     cl                                              ;AH = rem; AL = quotient
  3121                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3122                                                          stosb                                                   ;store quotient
  3123                                                          mov     al,ah                                           ;remainder
  3124                                                          stosb                                                   ;store remainder
  3125                                                          xor     al,al                                           ;null terminator
  3126                                                          stosb                                                   ;store terminator
  3127                                                          pop     es                                              ;restore non-volatile regs
  3128                                                          pop     edi                                             ;
  3129                                                          pop     ecx                                             ;
  3130                                                          ret                                                     ;return
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  ;
  3133                                  ;       Routine:        PutDayString
  3134                                  ;
  3135                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3136                                  ;                       structure at ds:ebx.
  3137                                  ;
  3138                                  ;       In:             DS:EBX  DATETIME address
  3139                                  ;                       DS:EDX  output buffer address
  3140                                  ;
  3141                                  ;-----------------------------------------------------------------------------------------------------------------------
  3142                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3143                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3144                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3145                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3146                                                          pop     ecx                                             ;
  3147                                                          ret                                                     ;return
  3148                                  ;-----------------------------------------------------------------------------------------------------------------------
  3149                                  ;
  3150                                  ;       Routine:        PutHourString
  3151                                  ;
  3152                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3153                                  ;                       structure at ds:ebx.
  3154                                  ;
  3155                                  ;       In:             DS:EBX  DATETIME address
  3156                                  ;                       DS:EDX  output buffer address
  3157                                  ;
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3160                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3161                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3162                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3163                                                          pop     ecx                                             ;
  3164                                                          ret                                                     ;return
  3165                                  ;-----------------------------------------------------------------------------------------------------------------------
  3166                                  ;
  3167                                  ;       Routine:        PutMinuteString
  3168                                  ;
  3169                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3170                                  ;                       structure at ds:ebx.
  3171                                  ;
  3172                                  ;       In:             DS:EBX  DATETIME address
  3173                                  ;                       DS:EDX  output buffer address
  3174                                  ;
  3175                                  ;-----------------------------------------------------------------------------------------------------------------------
  3176                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3177                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3178                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3179                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3180                                                          pop     ecx                                             ;
  3181                                                          ret                                                     ;return
  3182                                  ;-----------------------------------------------------------------------------------------------------------------------
  3183                                  ;
  3184                                  ;       Routine:        PutMonthString
  3185                                  ;
  3186                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3187                                  ;                       structure at ds:ebx.
  3188                                  ;
  3189                                  ;       In:             DS:EBX  DATETIME address
  3190                                  ;                       DS:EDX  output buffer address
  3191                                  ;
  3192                                  ;-----------------------------------------------------------------------------------------------------------------------
  3193                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3194                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3195                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3196                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3197                                                          pop     ecx                                             ;
  3198                                                          ret                                                     ;return
  3199                                  ;-----------------------------------------------------------------------------------------------------------------------
  3200                                  ;
  3201                                  ;       Routine:        PutMonthNameString
  3202                                  ;
  3203                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3204                                  ;                       structure at ds:ebx.
  3205                                  ;
  3206                                  ;       In:             DS:EBX  DATETIME address
  3207                                  ;                       DS:EDX  output buffer address
  3208                                  ;
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3211                                                          push    edi                                             ;
  3212                                                          push    ds                                              ;
  3213                                                          push    es                                              ;
  3214                                                          push    ds                                              ;load data selector ...
  3215                                                          pop     es                                              ;... into extra segment
  3216                                                          mov     edi,edx                                         ;output buffer address
  3217                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3218                                                          dec     eax                                             ;month (0-11)
  3219                                                          shl     eax,2                                           ;offset into month name lookup table
  3220                                                          push    cs                                              ;load code selector ...
  3221                                                          pop     ds                                              ;... into data segment
  3222                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3223                                                          cld                                                     ;forward strings
  3224                                  .10                     lodsb                                                   ;name character
  3225                                                          stosb                                                   ;store in output buffer
  3226                                                          test    al,al                                           ;end of string?
  3227                                                          jnz     .10                                             ;no, continue
  3228                                                          pop     es                                              ;restore non-volatile regs
  3229                                                          pop     ds                                              ;
  3230                                                          pop     edi                                             ;
  3231                                                          pop     esi                                             ;
  3232                                                          ret                                                     ;return
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  ;
  3235                                  ;       Routine:        PutSecondString
  3236                                  ;
  3237                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3238                                  ;                       structure at ds:ebx.
  3239                                  ;
  3240                                  ;       In:             DS:EBX  DATETIME address
  3241                                  ;                       DS:EDX  output buffer address
  3242                                  ;
  3243                                  ;-----------------------------------------------------------------------------------------------------------------------
  3244                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3245                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3246                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3247                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3248                                                          pop     ecx                                             ;
  3249                                                          ret                                                     ;return
  3250                                  ;-----------------------------------------------------------------------------------------------------------------------
  3251                                  ;
  3252                                  ;       Routine:        PutTimeString
  3253                                  ;
  3254                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3255                                  ;                       structure at ds:ebx.
  3256                                  ;
  3257                                  ;       In:             DS:EBX  DATETIME address
  3258                                  ;                       DS:EDX  output buffer address
  3259                                  ;
  3260                                  ;-----------------------------------------------------------------------------------------------------------------------
  3261                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3262                                                          push    edi                                             ;
  3263                                                          push    es                                              ;
  3264                                                          push    ds                                              ;store data selector ...
  3265                                                          pop     es                                              ;... in extra segment reg
  3266                                                          mov     edi,edx                                         ;output buffer address
  3267                                                          mov     cl,10                                           ;divisor
  3268                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3269                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3270                                                          div     cl                                              ;ah = rem; al = quotient
  3271                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3272                                                          cld                                                     ;forward strings
  3273                                                          stosd                                                   ;store "mm/"nul
  3274                                                          dec     edi                                             ;address of terminator
  3275                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3276                                                          div     cl                                              ;ah = rem; al = quotient
  3277                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3278                                                          stosd                                                   ;store "dd/"nul
  3279                                                          dec     edi                                             ;address of terminator
  3280                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3281                                                          div     cl                                              ;ah = rem; al = quotient
  3282                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3283                                                          stosb                                                   ;store quotient
  3284                                                          mov     al,ah                                           ;remainder
  3285                                                          stosb                                                   ;store remainder
  3286                                                          xor     al,al                                           ;null terminator
  3287                                                          stosb                                                   ;store terminator
  3288                                                          pop     es                                              ;restore non-volatile regs
  3289                                                          pop     edi                                             ;
  3290                                                          pop     ecx                                             ;
  3291                                                          ret                                                     ;return
  3292                                  ;-----------------------------------------------------------------------------------------------------------------------
  3293                                  ;
  3294                                  ;       Routine:        PutWeekdayString
  3295                                  ;
  3296                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3297                                  ;                       structure at ds:ebx.
  3298                                  ;
  3299                                  ;       In:             DS:EBX  DATETIME address
  3300                                  ;                       DS:EDX  output buffer address
  3301                                  ;
  3302                                  ;-----------------------------------------------------------------------------------------------------------------------
  3303                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3304                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3305                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3306                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3307                                                          pop     ecx                                             ;
  3308                                                          ret                                                     ;return
  3309                                  ;-----------------------------------------------------------------------------------------------------------------------
  3310                                  ;
  3311                                  ;       Routine:        PutWeekdayNameString
  3312                                  ;
  3313                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3314                                  ;                       structure at ds:ebx.
  3315                                  ;
  3316                                  ;       In:             DS:EBX  DATETIME address
  3317                                  ;                       DS:EDX  output buffer address
  3318                                  ;
  3319                                  ;-----------------------------------------------------------------------------------------------------------------------
  3320                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3321                                                          push    edi                                             ;
  3322                                                          push    ds                                              ;
  3323                                                          push    es                                              ;
  3324                                                          push    ds                                              ;load data selector ...
  3325                                                          pop     es                                              ;... into extra segment
  3326                                                          mov     edi,edx                                         ;output buffer address
  3327                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3328                                                          shl     eax,2                                           ;offset into day name lookup table
  3329                                                          push    cs                                              ;load code selector ...
  3330                                                          pop     ds                                              ;... into data segment
  3331                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3332                                                          cld                                                     ;forward strings
  3333                                  .10                     lodsb                                                   ;name character
  3334                                                          stosb                                                   ;store in output buffer
  3335                                                          test    al,al                                           ;end of string?
  3336                                                          jnz     .10                                             ;no, continue
  3337                                                          pop     es                                              ;restore non-volatile regs
  3338                                                          pop     ds                                              ;
  3339                                                          pop     edi                                             ;
  3340                                                          pop     esi                                             ;
  3341                                                          ret                                                     ;return
  3342                                  ;-----------------------------------------------------------------------------------------------------------------------
  3343                                  ;
  3344                                  ;       Routine:        PutYearString
  3345                                  ;
  3346                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3347                                  ;                       structure at ds:ebx.
  3348                                  ;
  3349                                  ;       In:             DS:EBX  DATETIME address
  3350                                  ;                       DS:EDX  output buffer address
  3351                                  ;
  3352                                  ;-----------------------------------------------------------------------------------------------------------------------
  3353                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3354                                                          call    GetYear                                         ;ECX = YYYY
  3355                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3356                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3357                                                          pop     ecx                                             ;restore non-volatile regs
  3358                                                          ret                                                     ;return
  3359                                  ;-----------------------------------------------------------------------------------------------------------------------
  3360                                  ;
  3361                                  ;       Day Names
  3362                                  ;
  3363                                  ;-----------------------------------------------------------------------------------------------------------------------
  3364                                  czSunday                db      "Sunday",0
  3365                                  czMonday                db      "Monday",0
  3366                                  czTuesday               db      "Tuesday",0
  3367                                  czWednesday             db      "Wednesday",0
  3368                                  czThursday              db      "Thursday",0
  3369                                  czFriday                db      "Friday",0
  3370                                  czSaturday              db      "Saturday",0
  3371                                  ;-----------------------------------------------------------------------------------------------------------------------
  3372                                  ;
  3373                                  ;       Month Names
  3374                                  ;
  3375                                  ;-----------------------------------------------------------------------------------------------------------------------
  3376                                  czJanuary               db      "January",0
  3377                                  czFebruary              db      "February",0
  3378                                  czMarch                 db      "March",0
  3379                                  czApril                 db      "April",0
  3380                                  czMay                   db      "May",0
  3381                                  czJune                  db      "June",0
  3382                                  czJuly                  db      "July",0
  3383                                  czAugust                db      "August",0
  3384                                  czSeptember             db      "September",0
  3385                                  czOctober               db      "October",0
  3386                                  czNovember              db      "November",0
  3387                                  czDecember              db      "December",0
  3388                                  ;-----------------------------------------------------------------------------------------------------------------------
  3389                                  ;
  3390                                  ;       Day Names Lookup Table
  3391                                  ;
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                                          align   4
  3394                                  tDayNames               equ     $
  3395                                                          dd      czSunday
  3396                                                          dd      czMonday
  3397                                                          dd      czTuesday
  3398                                                          dd      czWednesday
  3399                                                          dd      czThursday
  3400                                                          dd      czFriday
  3401                                                          dd      czSaturday
  3402                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3403                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Month Names Lookup Table
  3407                                  ;
  3408                                  ;-----------------------------------------------------------------------------------------------------------------------
  3409                                                          align   4
  3410                                  tMonthNames             equ     $
  3411                                                          dd      czJanuary
  3412                                                          dd      czFebruary
  3413                                                          dd      czMarch
  3414                                                          dd      czApril
  3415                                                          dd      czMay
  3416                                                          dd      czJune
  3417                                                          dd      czJuly
  3418                                                          dd      czAugust
  3419                                                          dd      czSeptember
  3420                                                          dd      czOctober
  3421                                                          dd      czNovember
  3422                                                          dd      czDecember
  3423                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3424                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3425                                  ;=======================================================================================================================
  3426                                  ;
  3427                                  ;       Memory Helper Routines
  3428                                  ;
  3429                                  ;       AllocateMemory
  3430                                  ;       FreeMemory
  3431                                  ;
  3432                                  ;=======================================================================================================================
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434                                  ;
  3435                                  ;       Routine:        AllocateMemory
  3436                                  ;
  3437                                  ;       Description:    This routine allocates a memory block for the given task.
  3438                                  ;
  3439                                  ;       In:             ECX     bytes of memory to allocate
  3440                                  ;
  3441                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3442                                  ;                               0       unable to allocate memory
  3443                                  ;
  3444                                  ;-----------------------------------------------------------------------------------------------------------------------
  3445                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3446                                                          push    ecx                                             ;
  3447                                                          push    esi                                             ;
  3448                                                          push    ds                                              ;
  3449                                  ;
  3450                                  ;       Address kernel memory structures
  3451                                  ;
  3452                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3453                                                          pop     ds                                              ;... into data segment reg
  3454                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3455                                  ;
  3456                                  ;       Set requested size to minimum block size if requested size is too small.
  3457                                  ;
  3458                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3459                                                          jae     .10                                             ;no, branch
  3460                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3461                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3462                                  ;
  3463                                  ;       Find the first free memory block large enough to satisfy the request.
  3464                                  ;
  3465                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3466                                  .20                     test    eax,eax                                         ;end of free block chain?
  3467                                                          jz      .220                                            ;yes, branch
  3468                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3469                                                          jbe     .30                                             ;yes, branch
  3470                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3471                                                          jmp     .20                                             ;continue
  3472                                  ;-----------------------------------------------------------------------------------------------------------------------
  3473                                  ;
  3474                                  ;       Address the previous and next free memory blocks.
  3475                                  ;
  3476                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3477                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3478                                  ;
  3479                                  ;       Remove the free memory block from the forward free memory block chain.
  3480                                  ;
  3481                                                          test    ebx,ebx                                         ;any previous free memory block?
  3482                                                          jz      .40                                             ;no, branch
  3483                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3484                                                          jmp     .50                                             ;continue
  3485                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3486                                  ;
  3487                                  ;       Remove the free memory block from the reverse free memory block chain.
  3488                                  ;
  3489                                  .50                     test    edx,edx                                         ;any next free memory block?
  3490                                                          jz      .60                                             ;no, branch
  3491                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3492                                                          jmp     .70                                             ;continue
  3493                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3494                                  ;-----------------------------------------------------------------------------------------------------------------------
  3495                                  ;
  3496                                  ;       Determine if the free memory block can be split.
  3497                                  ;
  3498                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3499                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3500                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3501                                                          jb      .150                                            ;no, branch
  3502                                  ;
  3503                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3504                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3505                                  ;       of the requested memory size.
  3506                                  ;
  3507                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3508                                                          mov     edx,eax                                         ;memory block address
  3509                                                          add     edx,ecx                                         ;address new new next contig block
  3510                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3511                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3512                                  ;
  3513                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3514                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3515                                  ;
  3516                                                          jecxz   .80                                             ;no next contig, branch
  3517                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3518                                                          jmp     .90                                             ;continue
  3519                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3520                                  ;
  3521                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3522                                  ;
  3523                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3524                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3525                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3526                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3527                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3528                                                          xor     ebx,ebx                                         ;zero register
  3529                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3530                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3531                                  ;
  3532                                  ;       Find the proper location in the free block chain for the new free block
  3533                                  ;
  3534                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3535                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3536                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3537                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3538                                                          jbe     .110                                            ;yes, branch
  3539                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3540                                                          jmp     .100                                            ;continue
  3541                                  ;
  3542                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3543                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3544                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3545                                  ;       block of hte next block, if there is one.
  3546                                  ;
  3547                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3548                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3549                                                          jecxz   .120                                            ;branch if no next block
  3550                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3551                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3552                                                          jmp     .130                                            ;continue
  3553                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3554                                  ;
  3555                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3556                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3557                                  ;       last user block pointers if necessary.
  3558                                  ;
  3559                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3560                                                          test    ebx,ebx                                         ;is there a previous block?
  3561                                                          jz      .140                                            ;no, branch
  3562                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3563                                                          jmp     .150                                            ;continue
  3564                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3565                                  ;
  3566                                  ;       Update the newly allocated block's owner and signature.
  3567                                  ;
  3568                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3569                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3570                                                          xor     edx,edx                                         ;zero register
  3571                                                          str     dx                                              ;load the task state register
  3572                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3573                                  ;
  3574                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3575                                  ;
  3576                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3577                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3578                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3579                                                          jb      .180                                            ;branch if block belongs to next task
  3580                                                          je      .170                                            ;branch if block belongs to this task
  3581                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3582                                                          jmp     .160                                            ;continue
  3583                                  ;
  3584                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3585                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3586                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3587                                  ;       place to insert the block.
  3588                                  ;
  3589                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3590                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3591                                                          jbe     .180                                            ;yes, branch
  3592                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3593                                                          test    ecx,ecx                                         ;end of chain?
  3594                                                          jz      .180                                            ;yes, branch
  3595                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3596                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3597                                                          je      .170                                            ;yes, continue search
  3598                                  ;
  3599                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3600                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3601                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3602                                  ;       do have a previous-block, we update that block's next-block pointer.
  3603                                  ;
  3604                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3605                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3606                                                          jecxz   .190                                            ;branch if no next-task block
  3607                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3608                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3609                                                          jmp     .200                                            ;continue
  3610                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3611                                  ;
  3612                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3613                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3614                                  ;       global first and/or last user-block pointers if necessary.
  3615                                  ;
  3616                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3617                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3618                                                          jz      .210                                            ;no, branch
  3619                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3620                                                          jmp     .220                                            ;continue
  3621                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3622                                  ;
  3623                                  ;       Restore registers and return to caller.
  3624                                  ;
  3625                                  .220                    pop     ds                                              ;restore non-volatie regs
  3626                                                          pop     esi                                             ;
  3627                                                          pop     ecx                                             ;
  3628                                                          pop     ebx                                             ;
  3629                                                          ret                                                     ;return
  3630                                  ;-----------------------------------------------------------------------------------------------------------------------
  3631                                  ;
  3632                                  ;       Routine:        FreeMemory
  3633                                  ;
  3634                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3635                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3636                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3637                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3638                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3639                                  ;
  3640                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3641                                  ;
  3642                                  ;       Out:            EAX     -1      invalid memory block
  3643                                  ;                               0       memory block freed
  3644                                  ;
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3647                                                          push    ecx                                             ;
  3648                                                          push    esi                                             ;
  3649                                                          push    edi                                             ;
  3650                                                          push    ds                                              ;
  3651                                                          push    es                                              ;
  3652                                  ;
  3653                                  ;       Address the root memory structure
  3654                                  ;
  3655                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3656                                                          pop     es                                              ;... into extra segment reg
  3657                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3658                                                          pop     ds                                              ;... into data segment reg
  3659                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3660                                                          mov     edi,edx                                         ;memory block address
  3661                                  ;
  3662                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3663                                  ;
  3664                                                          xor     eax,eax                                         ;indicate success
  3665                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3666                                                          je      .240                                            ;yes, branch
  3667                                                          dec     eax                                             ;indicate failure
  3668                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3669                                                          jne     .240                                            ;no, branch
  3670                                  ;-----------------------------------------------------------------------------------------------------------------------
  3671                                  ;
  3672                                  ;       Unlink the USER memory block.
  3673                                  ;
  3674                                  ;-----------------------------------------------------------------------------------------------------------------------
  3675                                  ;
  3676                                  ;       Set the block signature. Reset owner.
  3677                                  ;
  3678                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3679                                                          xor     eax,eax                                         ;zero register
  3680                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3681                                  ;
  3682                                  ;       Wipe user area.
  3683                                  ;
  3684                                                          push    edi                                             ;save block address
  3685                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3686                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3687                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3688                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3689                                                          rep     stosb                                           ;clear memory
  3690                                                          pop     edi                                             ;restore block address
  3691                                  ;
  3692                                  ;       Address the preceding and following USER memory blocks
  3693                                  ;
  3694                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3695                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3696                                  ;
  3697                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3698                                  ;       pointer to point to the USER block following this block.
  3699                                  ;
  3700                                                          test    ebx,ebx                                         ;is there a previous block?
  3701                                                          jz      .10                                             ;no, branch
  3702                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3703                                                          jmp     .20                                             ;continue
  3704                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3705                                  ;
  3706                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3707                                  ;       pointer to point to the USER block preceding this block.
  3708                                  ;
  3709                                  .20                     jecxz   .30                                             ;branch if no next block
  3710                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3711                                                          jmp     .40                                             ;continue
  3712                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3713                                  ;-----------------------------------------------------------------------------------------------------------------------
  3714                                  ;
  3715                                  ;       Merge with a previous contiguous FREE memory block.
  3716                                  ;
  3717                                  ;-----------------------------------------------------------------------------------------------------------------------
  3718                                  ;
  3719                                  ;       Address the preceding and following contiguous memory blocks.
  3720                                  ;
  3721                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3722                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3723                                  ;
  3724                                  ;       Verify we have a previous contiguous FREE block.
  3725                                  ;
  3726                                                          test    ebx,ebx                                         ;is there a previous block?
  3727                                                          jz      .100                                            ;no, branch
  3728                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3729                                                          jne     .100                                            ;no, branch
  3730                                  ;
  3731                                  ;       Update adjacent block's contiguous pointers.
  3732                                  ;
  3733                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3734                                                          jecxz   .50                                             ;branch if no next contiguous block
  3735                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3736                                                          jmp     .60                                             ;continue
  3737                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3738                                  ;
  3739                                  ;       Update the size of the merged FREE block.
  3740                                  ;
  3741                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3742                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3743                                  ;
  3744                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3745                                  ;
  3746                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3747                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3748                                                          rep     stosb                                           ;clear memory header
  3749                                                          mov     edi,ebx                                         ;current block is now previous block
  3750                                  ;-----------------------------------------------------------------------------------------------------------------------
  3751                                  ;
  3752                                  ;       Unlink the previous contiguous FREE memory block
  3753                                  ;
  3754                                  ;-----------------------------------------------------------------------------------------------------------------------
  3755                                  ;
  3756                                  ;       Address the preceding and following USER memory blocks
  3757                                  ;
  3758                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3759                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3760                                  ;
  3761                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3762                                  ;       block pointer.
  3763                                  ;
  3764                                                          test    ebx,ebx                                         ;is there a previous block?
  3765                                                          jz      .70                                             ;no, branch
  3766                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3767                                                          jmp     .80                                             ;branch
  3768                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3769                                  ;
  3770                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3771                                  ;       pointer.
  3772                                  ;
  3773                                  .80                     jecxz   .90                                             ;branch if no next block
  3774                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3775                                                          jmp     .100                                            ;continue
  3776                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3777                                  ;-----------------------------------------------------------------------------------------------------------------------
  3778                                  ;
  3779                                  ;       Merge with a following contiguous FREE memory block.
  3780                                  ;
  3781                                  ;-----------------------------------------------------------------------------------------------------------------------
  3782                                  ;
  3783                                  ;       Verify we have a following contiguous FREE block.
  3784                                  ;
  3785                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3786                                                          jecxz   .170                                            ;branch if no next contiguous block
  3787                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3788                                                          jne     .170                                            ;no, branch
  3789                                  ;
  3790                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3791                                  ;
  3792                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3793                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3794                                  ;
  3795                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3796                                  ;
  3797                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3798                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3799                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3800                                                          jz      .110                                            ;no, branch
  3801                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3802                                                          jmp     .120                                            ;continue
  3803                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805                                  ;
  3806                                  ;       Unlink the following contiguous FREE memory block
  3807                                  ;
  3808                                  ;-----------------------------------------------------------------------------------------------------------------------
  3809                                  ;
  3810                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3811                                  ;
  3812                                  .120                    push    edi                                             ;save this block
  3813                                                          mov     edi,ecx                                         ;next contiguous block
  3814                                                          push    ecx                                             ;save next contiguous block
  3815                                  ;
  3816                                  ;       Address the preceding and following USER memory blocks
  3817                                  ;
  3818                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3819                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3820                                  ;
  3821                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3822                                  ;       block pointer.
  3823                                  ;
  3824                                                          test    ebx,ebx                                         ;is there a previous block?
  3825                                                          jz      .130                                            ;no, branch
  3826                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3827                                                          jmp     .140                                            ;branch
  3828                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3829                                  ;
  3830                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3831                                  ;       pointer.
  3832                                  ;
  3833                                  .140                    jecxz   .150                                            ;branch if no next block
  3834                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3835                                                          jmp     .160                                            ;continue
  3836                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3837                                  ;
  3838                                  ;       Clear next contiguous block's header
  3839                                  ;
  3840                                  .160                    pop     edi                                             ;next congiguous block pointer
  3841                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3842                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3843                                                          rep     stosb                                           ;clear memory header
  3844                                                          pop     edi                                             ;this block's pointer
  3845                                  ;-----------------------------------------------------------------------------------------------------------------------
  3846                                  ;
  3847                                  ;       Insert the final FREE block back into the block chain.
  3848                                  ;
  3849                                  ;-----------------------------------------------------------------------------------------------------------------------
  3850                                  ;
  3851                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3852                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3853                                  ;       all are smaller in size.
  3854                                  ;
  3855                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3856                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3857                                  .180                    jecxz   .190                                            ;exit if no ptr
  3858                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3859                                                          jb      .190                                            ;yes, branch
  3860                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3861                                                          jmp     .180                                            ;continue
  3862                                  ;
  3863                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3864                                  ;       larger free block. Update the next block's previous block pointer.
  3865                                  ;
  3866                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3867                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3868                                                          jecxz   .200                                            ;branch if no block found
  3869                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3870                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3871                                                          jmp     .210                                            ;continue
  3872                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3873                                  ;
  3874                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3875                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3876                                  ;       next pointer.
  3877                                  ;
  3878                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3879                                                          test    ebx,ebx                                         ;do we have a previous block?
  3880                                                          jz      .220                                            ;no, branch
  3881                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3882                                                          jmp     .230                                            ;continue
  3883                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3884                                  ;
  3885                                  ;       The memory free has completed.
  3886                                  ;
  3887                                  .230                    xor     eax,eax                                         ;indicate success
  3888                                  ;
  3889                                  ;       Restore and return.
  3890                                  ;
  3891                                  .240                    pop     es                                              ;restore non-volatile regs
  3892                                                          pop     ds                                              ;
  3893                                                          pop     edi                                             ;
  3894                                                          pop     esi                                             ;
  3895                                                          pop     ecx                                             ;
  3896                                                          pop     ebx                                             ;
  3897                                                          ret                                                     ;return
  3898                                  ;=======================================================================================================================
  3899                                  ;
  3900                                  ;       String Helper Routines
  3901                                  ;
  3902                                  ;       CompareMemory
  3903                                  ;       UpperCaseString
  3904                                  ;
  3905                                  ;=======================================================================================================================
  3906                                  ;-----------------------------------------------------------------------------------------------------------------------
  3907                                  ;
  3908                                  ;       Routine:        CompareMemory
  3909                                  ;
  3910                                  ;       Description:    This routine compares two byte arrays.
  3911                                  ;
  3912                                  ;       In:             DS:EDX  first source address
  3913                                  ;                       DS:EBX  second source address
  3914                                  ;                       ECX     comparison length
  3915                                  ;
  3916                                  ;       Out:            EDX     first source address
  3917                                  ;                       EBX     second source address
  3918                                  ;                       ECX     0       array 1 = array 2
  3919                                  ;                               <0      array 1 < array 2
  3920                                  ;                               >0      array 1 > array 2
  3921                                  ;
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3924                                                          push    edi                                             ;
  3925                                                          push    es                                              ;
  3926                                                          push    ds                                              ;copy DS
  3927                                                          pop     es                                              ;... to ES
  3928                                                          mov     esi,edx                                         ;first source address
  3929                                                          mov     edi,ebx                                         ;second source address
  3930                                                          cld                                                     ;forward strings
  3931                                                          rep     cmpsb                                           ;compare bytes
  3932                                                          mov     al,0                                            ;default result
  3933                                                          jz      .10                                             ;branch if arrays equal
  3934                                                          mov     al,1                                            ;positive result
  3935                                                          jnc     .10                                             ;branch if target > source
  3936                                                          mov     al,-1                                           ;negative result
  3937                                  .10                     movsx   ecx,al                                          ;extend sign
  3938                                                          pop     es                                              ;restore non-volatile regs
  3939                                                          pop     edi                                             ;
  3940                                                          pop     esi                                             ;
  3941                                                          ret                                                     ;return
  3942                                  ;-----------------------------------------------------------------------------------------------------------------------
  3943                                  ;
  3944                                  ;       Routine:        UpperCaseString
  3945                                  ;
  3946                                  ;       Description:    This routine places all characters in the given string to upper case.
  3947                                  ;
  3948                                  ;       In:             DS:EDX  string address
  3949                                  ;
  3950                                  ;       Out:            EDX     string address
  3951                                  ;
  3952                                  ;-----------------------------------------------------------------------------------------------------------------------
  3953                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3954                                                          mov     esi,edx                                         ;string address
  3955                                                          cld                                                     ;forward strings
  3956                                  .10                     lodsb                                                   ;string character
  3957                                                          test    al,al                                           ;null?
  3958                                                          jz      .20                                             ;yes, skip ahead
  3959                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3960                                                          jb      .10                                             ;no, continue
  3961                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3962                                                          ja      .10                                             ;no, continue
  3963                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3964                                                          mov     [esi-1],al                                      ;upper character
  3965                                                          jmp     .10                                             ;continue
  3966                                  .20                     pop     esi                                             ;restore non-volatile regs
  3967                                                          ret                                                     ;return
  3968                                  ;=======================================================================================================================
  3969                                  ;
  3970                                  ;       Console Helper Routines
  3971                                  ;
  3972                                  ;       FirstConsoleColumn
  3973                                  ;       GetConsoleChar
  3974                                  ;       GetConsoleString
  3975                                  ;       NextConsoleColumn
  3976                                  ;       NextConsoleRow
  3977                                  ;       PreviousConsoleColumn
  3978                                  ;       PutConsoleChar
  3979                                  ;       PutConsoleHexByte
  3980                                  ;       PutConsoleHexDword
  3981                                  ;       PutConsoleHexWord
  3982                                  ;       PutConsoleOIAChar
  3983                                  ;       PutConsoleOIAShift
  3984                                  ;       PutConsoleString
  3985                                  ;       Yield
  3986                                  ;
  3987                                  ;=======================================================================================================================
  3988                                  ;-----------------------------------------------------------------------------------------------------------------------
  3989                                  ;
  3990                                  ;       Routine:        FirstConsoleColumn
  3991                                  ;
  3992                                  ;       Description:    This routine resets the console column to start of the row.
  3993                                  ;
  3994                                  ;       In:             DS      OS data selector
  3995                                  ;
  3996                                  ;-----------------------------------------------------------------------------------------------------------------------
  3997                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3998                                                          mov     [wbConsoleColumn],al                            ;save column
  3999                                                          ret                                                     ;return
  4000                                  ;-----------------------------------------------------------------------------------------------------------------------
  4001                                  ;
  4002                                  ;       Routine:        GetConsoleChar
  4003                                  ;
  4004                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4005                                  ;
  4006                                  ;       Out:            AL      ASCII character code
  4007                                  ;                       AH      keyboard scan code
  4008                                  ;
  4009                                  ;-----------------------------------------------------------------------------------------------------------------------
  4010                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4011                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4012                                                          or      eax,eax                                         ;do we have a message?
  4013                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4014                                                          push    eax                                             ;save key codes
  4015                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4016                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4017                                                          pop     eax                                             ;restore key codes
  4018                                                          jne     GetConsoleChar                                  ;no, try again
  4019                                                          and     eax,0000ffffh                                   ;mask for key codes
  4020                                                          ret                                                     ;return
  4021                                  ;-----------------------------------------------------------------------------------------------------------------------
  4022                                  ;
  4023                                  ;       Routine:        GetConsoleString
  4024                                  ;
  4025                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4026                                  ;
  4027                                  ;       In:             DS:EDX  target buffer address
  4028                                  ;                       ECX     maximum number of characters to accept
  4029                                  ;                       BH      echo to terminal
  4030                                  ;                       BL      terminating character
  4031                                  ;
  4032                                  ;-----------------------------------------------------------------------------------------------------------------------
  4033                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4034                                                          push    esi                                             ;
  4035                                                          push    edi                                             ;
  4036                                                          push    es                                              ;
  4037                                                          push    ds                                              ;load data segment selector ...
  4038                                                          pop     es                                              ;... into extra segment register
  4039                                                          mov     edi,edx                                         ;edi = target buffer
  4040                                                          push    ecx                                             ;save maximum characters
  4041                                                          xor     al,al                                           ;zero register
  4042                                                          cld                                                     ;forward strings
  4043                                                          rep     stosb                                           ;zero fill buffer
  4044                                                          pop     ecx                                             ;maximum characters
  4045                                                          mov     edi,edx                                         ;edi = target buffer
  4046                                                          mov     esi,edx                                         ;esi = target buffer
  4047                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4048                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4049                                                          cmp     al,bl                                           ;is this the terminator?
  4050                                                          je      .50                                             ;yes, exit
  4051                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4052                                                          jne     .30                                             ;no, skip ahead
  4053                                                          cmp     esi,edi                                         ;at start of buffer?
  4054                                                          je      .20                                             ;yes, get next character
  4055                                                          dec     edi                                             ;backup target pointer
  4056                                                          mov     byte [edi],0                                    ;zero previous character
  4057                                                          inc     ecx                                             ;increment remaining chars
  4058                                                          test    bh,1                                            ;echo to console?
  4059                                                          jz      .20                                             ;no, get next character
  4060                                                          call    PreviousConsoleColumn                           ;backup console position
  4061                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4062                                                          call    PutConsoleChar                                  ;write space to console
  4063                                                          call    PlaceCursor                                     ;position the cursor
  4064                                                          jmp     .20                                             ;get next character
  4065                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4066                                                          jb      .20                                             ;no, get another character
  4067                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4068                                                          ja      .20                                             ;no, get another character
  4069                                                          stosb                                                   ;store character in buffer
  4070                                                          test    bh,1                                            ;echo to console?
  4071                                                          jz      .40                                             ;no, skip ahead
  4072                                                          call    PutConsoleChar                                  ;write character to console
  4073                                                          call    NextConsoleColumn                               ;advance console position
  4074                                                          call    PlaceCursor                                     ;position the cursor
  4075                                  .40                     dec     ecx                                             ;decrement remaining chars
  4076                                                          jmp     .10                                             ;next
  4077                                  .50                     xor     al,al                                           ;null
  4078                                                          stosb                                                   ;terminate buffer
  4079                                                          pop     es                                              ;restore non-volatile regs
  4080                                                          pop     edi                                             ;
  4081                                                          pop     esi                                             ;
  4082                                                          pop     ecx                                             ;
  4083                                                          ret                                                     ;return
  4084                                  ;-----------------------------------------------------------------------------------------------------------------------
  4085                                  ;
  4086                                  ;       Routine:        NextConsoleColumn
  4087                                  ;
  4088                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4089                                  ;                       incremented if the end of the current row is reached.
  4090                                  ;
  4091                                  ;       In:             DS      OS data selector
  4092                                  ;
  4093                                  ;-----------------------------------------------------------------------------------------------------------------------
  4094                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4095                                                          inc     al                                              ;increment column
  4096                                                          mov     [wbConsoleColumn],al                            ;save column
  4097                                                          cmp     al,ECONCOLS                                     ;end of row?
  4098                                                          jb      .10                                             ;no, skip ahead
  4099                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4100                                                          call    NextConsoleRow                                  ;line feed to next row
  4101                                  .10                     ret                                                     ;return
  4102                                  ;-----------------------------------------------------------------------------------------------------------------------
  4103                                  ;
  4104                                  ;       Routine:        NextConsoleRow
  4105                                  ;
  4106                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4107                                  ;
  4108                                  ;       In:             DS      OS data selector
  4109                                  ;
  4110                                  ;-----------------------------------------------------------------------------------------------------------------------
  4111                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4112                                                          inc     al                                              ;increment row
  4113                                                          mov     [wbConsoleRow],al                               ;save row
  4114                                                          cmp     al,ECONROWS                                     ;end of screen?
  4115                                                          jb      .10                                             ;no, skip ahead
  4116                                                          call    ScrollConsoleRow                                ;scroll up one row
  4117                                                          mov     al,[wbConsoleRow]                               ;row
  4118                                                          dec     al                                              ;decrement row
  4119                                                          mov     [wbConsoleRow],al                               ;save row
  4120                                  .10                     ret                                                     ;return
  4121                                  ;-----------------------------------------------------------------------------------------------------------------------
  4122                                  ;
  4123                                  ;       Routine:        PreviousConsoleColumn
  4124                                  ;
  4125                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4126                                  ;                       the column is set to the last position in the row and the row is decremented.
  4127                                  ;
  4128                                  ;       In:             DS      OS data selector
  4129                                  ;
  4130                                  ;-----------------------------------------------------------------------------------------------------------------------
  4131                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4132                                                          or      al,al                                           ;start of row?
  4133                                                          jnz     .10                                             ;no, skip ahead
  4134                                                          mov     ah,[wbConsoleRow]                               ;current row
  4135                                                          or      ah,ah                                           ;top of screen?
  4136                                                          jz      .20                                             ;yes, exit with no change
  4137                                                          dec     ah                                              ;decrement row
  4138                                                          mov     [wbConsoleRow],ah                               ;save row
  4139                                                          mov     al,ECONCOLS                                     ;set maximum column
  4140                                  .10                     dec     al                                              ;decrement column
  4141                                                          mov     [wbConsoleColumn],al                            ;save column
  4142                                  .20                     ret                                                     ;return
  4143                                  ;-----------------------------------------------------------------------------------------------------------------------
  4144                                  ;
  4145                                  ;       Routine:        PutConsoleChar
  4146                                  ;
  4147                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4148                                  ;
  4149                                  ;       In:             AL      ASCII character
  4150                                  ;                       DS      OS data selector
  4151                                  ;
  4152                                  ;-----------------------------------------------------------------------------------------------------------------------
  4153                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4154                                                          push    es                                              ;
  4155                                                          push    EGDTCGA                                         ;load CGA selector ...
  4156                                                          pop     es                                              ;... into extra segment reg
  4157                                                          mov     cl,[wbConsoleColumn]                            ;column
  4158                                                          mov     ch,[wbConsoleRow]                               ;row
  4159                                                          call    SetConsoleChar                                  ;put character at row, column
  4160                                                          pop     es                                              ;restore non-volatile regs
  4161                                                          pop     ecx                                             ;
  4162                                                          ret                                                     ;return
  4163                                  ;-----------------------------------------------------------------------------------------------------------------------
  4164                                  ;
  4165                                  ;       Routine:        PutConsoleHexByte
  4166                                  ;
  4167                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4168                                  ;
  4169                                  ;       In:             AL      byte value
  4170                                  ;                       CL      column
  4171                                  ;                       CH      row
  4172                                  ;                       DS      OS data selector
  4173                                  ;                       ES      CGA selector
  4174                                  ;
  4175                                  ;-----------------------------------------------------------------------------------------------------------------------
  4176                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4177                                                          shr     al,4                                            ;hi-order nybble
  4178                                                          call    .10                                             ;make ASCII and store
  4179                                                          pop     eax                                             ;byte value
  4180                                                          and     al,0Fh                                          ;lo-order nybble
  4181                                  .10                     or      al,030h                                         ;apply ASCII zone
  4182                                                          cmp     al,03Ah                                         ;numeric?
  4183                                                          jb      .20                                             ;yes, skip ahead
  4184                                                          add     al,7                                            ;add ASCII offset for alpha
  4185                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4186                                                          ret                                                     ;return
  4187                                  ;-----------------------------------------------------------------------------------------------------------------------
  4188                                  ;
  4189                                  ;       Routine:        PutConsoleHexDword
  4190                                  ;
  4191                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4192                                  ;
  4193                                  ;       In:             EAX     value
  4194                                  ;                       CL      column
  4195                                  ;                       CH      row
  4196                                  ;                       DS      OS data selector
  4197                                  ;                       ES      CGA selector
  4198                                  ;
  4199                                  ;-----------------------------------------------------------------------------------------------------------------------
  4200                                  PutConsoleHexDword      push    eax
  4201                                                          shr     eax,16
  4202                                                          call    PutConsoleHexWord
  4203                                                          pop     eax
  4204                                                          call    PutConsoleHexWord
  4205                                                          ret
  4206                                  ;-----------------------------------------------------------------------------------------------------------------------
  4207                                  ;
  4208                                  ;       Routine:        PutConsoleHexWord
  4209                                  ;
  4210                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4211                                  ;
  4212                                  ;       In:             EAX     value
  4213                                  ;                       CL      column
  4214                                  ;                       CH      row
  4215                                  ;                       DS      OS data selector
  4216                                  ;                       ES      CGA selector
  4217                                  ;
  4218                                  ;-----------------------------------------------------------------------------------------------------------------------
  4219                                  PutConsoleHexWord       push    eax
  4220                                                          shr     eax,8
  4221                                                          call    PutConsoleHexByte
  4222                                                          pop     eax
  4223                                                          call    PutConsoleHexByte
  4224                                                          ret
  4225                                  ;-----------------------------------------------------------------------------------------------------------------------
  4226                                  ;
  4227                                  ;       Routine:        PutConsoleOIAChar
  4228                                  ;
  4229                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4230                                  ;
  4231                                  ;       In:             DS      OS data selector
  4232                                  ;
  4233                                  ;-----------------------------------------------------------------------------------------------------------------------
  4234                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4235                                                          push    ecx                                             ;
  4236                                                          push    esi                                             ;
  4237                                                          push    ds                                              ;
  4238                                                          push    es                                              ;
  4239                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4240                                                          pop     ds                                              ;... into data segment register
  4241                                                          push    EGDTCGA                                         ;load CGA selector ...
  4242                                                          pop     es                                              ;... into extra segment register
  4243                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4244                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4245                                                          mov     bl,0                                            ;starting column
  4246                                                          mov     ecx,6                                           ;maximum scan codes
  4247                                  .10                     push    ecx                                             ;save remaining count
  4248                                                          mov     ecx,ebx                                         ;row, column
  4249                                                          lodsb                                                   ;read scan code
  4250                                                          or      al,al                                           ;scan code present?
  4251                                                          jz      .20                                             ;no, skip ahead
  4252                                                          call    PutConsoleHexByte                               ;display scan code
  4253                                                          jmp     .30                                             ;continue
  4254                                  .20                     mov     al,' '                                          ;ASCII space
  4255                                                          call    SetConsoleChar                                  ;display space
  4256                                                          mov     al,' '                                          ;ASCII space
  4257                                                          call    SetConsoleChar                                  ;display space
  4258                                  .30                     add     bl,2                                            ;next column (+2)
  4259                                                          pop     ecx                                             ;restore remaining
  4260                                                          loop    .10                                             ;next code
  4261                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4262                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4263                                                          jb      .40                                             ;no, skip ahead
  4264                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4265                                                          ja      .40                                             ;no, skip ahead
  4266                                                          mov     ch,bh                                           ;OIA row
  4267                                                          mov     cl,40                                           ;character display column
  4268                                                          call    SetConsoleChar                                  ;display ASCII character
  4269                                  .40                     pop     es                                              ;restore non-volatile regs
  4270                                                          pop     ds                                              ;
  4271                                                          pop     esi                                             ;
  4272                                                          pop     ecx                                             ;
  4273                                                          pop     ebx                                             ;
  4274                                                          ret                                                     ;return
  4275                                  ;-----------------------------------------------------------------------------------------------------------------------
  4276                                  ;
  4277                                  ;       Routine:        PutConsoleOIAShift
  4278                                  ;
  4279                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4280                                  ;
  4281                                  ;       In:             BL      shift flags
  4282                                  ;                       BH      lock flags
  4283                                  ;                       DS      OS data selector
  4284                                  ;
  4285                                  ;-----------------------------------------------------------------------------------------------------------------------
  4286                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4287                                                          push    es                                              ;
  4288                                                          push    EGDTCGA                                         ;load CGA selector ...
  4289                                                          pop     es                                              ;... into ES register
  4290                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4291                                                          mov     al,EASCIISPACE                                  ;space is default character
  4292                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4293                                                          jz      .10                                             ;no, skip ahead
  4294                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4295                                  .10                     mov     cl,14                                           ;indicator column
  4296                                                          call    SetConsoleChar                                  ;display ASCII character
  4297                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4298                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4299                                                          jz      .20                                             ;no, skip ahead
  4300                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4301                                  .20                     mov     cl,64                                           ;indicator column
  4302                                                          call    SetConsoleChar                                  ;display ASCII character
  4303                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4304                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4305                                                          jz      .30                                             ;no, skip ahead
  4306                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4307                                  .30                     mov     cl,15                                           ;indicator column
  4308                                                          call    SetConsoleChar                                  ;display ASCII character
  4309                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4310                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4311                                                          jz      .40                                             ;no, skip ahead
  4312                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4313                                  .40                     mov     cl,63                                           ;indicator column
  4314                                                          call    SetConsoleChar                                  ;display ASCII character
  4315                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4316                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4317                                                          jz      .50                                             ;no, skip ahead
  4318                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4319                                  .50                     mov     cl,16                                           ;indicator column
  4320                                                          call    SetConsoleChar                                  ;display ASCII character
  4321                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4322                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4323                                                          jz      .60                                             ;no, skip ahead
  4324                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4325                                  .60                     mov     cl,62                                           ;indicator column
  4326                                                          call    SetConsoleChar                                  ;display ASCII character
  4327                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4328                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4329                                                          jz      .70                                             ;no, skip ahead
  4330                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4331                                  .70                     mov     cl,78                                           ;indicator column
  4332                                                          call    SetConsoleChar                                  ;display ASCII character
  4333                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4334                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4335                                                          jz      .80                                             ;no, skip ahead
  4336                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4337                                  .80                     mov     cl,77                                           ;indicator column
  4338                                                          call    SetConsoleChar                                  ;display ASCII character
  4339                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4340                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4341                                                          jz      .90                                             ;no, skip ahead
  4342                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4343                                  .90                     mov     cl,76                                           ;indicator column
  4344                                                          call    SetConsoleChar                                  ;display ASCII character
  4345                                                          pop     es                                              ;restore non-volatile regs
  4346                                                          pop     ecx                                             ;
  4347                                                          ret                                                     ;return
  4348                                  ;-----------------------------------------------------------------------------------------------------------------------
  4349                                  ;
  4350                                  ;       Routine:        PutConsoleString
  4351                                  ;
  4352                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4353                                  ;                       console position as needed.
  4354                                  ;
  4355                                  ;       In:             EDX     source address
  4356                                  ;                       DS      OS data selector
  4357                                  ;
  4358                                  ;-----------------------------------------------------------------------------------------------------------------------
  4359                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4360                                                          mov     esi,edx                                         ;source address
  4361                                                          cld                                                     ;forward strings
  4362                                  .10                     lodsb                                                   ;ASCII character
  4363                                                          or      al,al                                           ;end of string?
  4364                                                          jz      .40                                             ;yes, skip ahead
  4365                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4366                                                          jne     .20                                             ;no, skip ahead
  4367                                                          call    FirstConsoleColumn                              ;move to start of row
  4368                                                          jmp     .10                                             ;next character
  4369                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4370                                                          jne     .30                                             ;no, skip ahead
  4371                                                          call    NextConsoleRow                                  ;move to next row
  4372                                                          jmp     .10                                             ;next character
  4373                                  .30                     call    PutConsoleChar                                  ;output character to console
  4374                                                          call    NextConsoleColumn                               ;advance to next column
  4375                                                          jmp     .10                                             ;next character
  4376                                  .40                     pop     esi                                             ;restore non-volatile regs
  4377                                                          ret                                                     ;return
  4378                                  ;-----------------------------------------------------------------------------------------------------------------------
  4379                                  ;
  4380                                  ;       Routine:        Yield
  4381                                  ;
  4382                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4383                                  ;
  4384                                  ;-----------------------------------------------------------------------------------------------------------------------
  4385                                  Yield                   sti                                                     ;enable maskagle interrupts
  4386                                                          hlt                                                     ;halt until external interrupt
  4387                                                          ret                                                     ;return
  4388                                  ;=======================================================================================================================
  4389                                  ;
  4390                                  ;       Data-Type Conversion Helper Routines
  4391                                  ;
  4392                                  ;       DecimalToUnsigned
  4393                                  ;       HexadecimalToUnsigned
  4394                                  ;       UnsignedToDecimalString
  4395                                  ;       UnsignedToHexadecimal
  4396                                  ;
  4397                                  ;=======================================================================================================================
  4398                                  ;-----------------------------------------------------------------------------------------------------------------------
  4399                                  ;
  4400                                  ;       Routine:        DecimalToUnsigned
  4401                                  ;
  4402                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4403                                  ;
  4404                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4405                                  ;
  4406                                  ;       Output:         EAX     unsigned integer value
  4407                                  ;
  4408                                  ;-----------------------------------------------------------------------------------------------------------------------
  4409                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4410                                                          mov     esi,edx                                         ;source address
  4411                                                          xor     edx,edx                                         ;zero total
  4412                                  .10                     lodsb                                                   ;source byte
  4413                                                          cmp     al,','                                          ;comma?
  4414                                                          je      .10                                             ;yes, ignore
  4415                                                          test    al,al                                           ;end of string?
  4416                                                          jz      .30                                             ;yes, done
  4417                                                          cmp     al,'.'                                          ;decimal point?
  4418                                                          je      .30                                             ;yes, done
  4419                                                          cmp     al,'0'                                          ;numeral?
  4420                                                          jb      .20                                             ;no, invalid string
  4421                                                          cmp     al,'9'                                          ;numeral?
  4422                                                          ja      .20                                             ;no, invalid string
  4423                                                          and     al,00Fh                                         ;mask ASCII zone
  4424                                                          push    eax                                             ;save numeral
  4425                                                          shl     edx,1                                           ;total * 2
  4426                                                          mov     eax,edx                                         ;total * 2
  4427                                                          shl     edx,2                                           ;total * 8
  4428                                                          add     edx,eax                                         ;total * 10
  4429                                                          pop     eax                                             ;restore numeral
  4430                                                          add     edx,eax                                         ;accumulate decimal digit
  4431                                                          xor     eax,eax                                         ;zero register
  4432                                                          jmp     .10                                             ;next
  4433                                  .20                     xor     edx,edx                                         ;zero result on error
  4434                                  .30                     mov     eax,edx                                         ;result
  4435                                                          pop     esi                                             ;restore non-volatile regs
  4436                                                          ret                                                     ;return
  4437                                  ;-----------------------------------------------------------------------------------------------------------------------
  4438                                  ;
  4439                                  ;       Routine:        HexadecimalToUnsigned
  4440                                  ;
  4441                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4442                                  ;
  4443                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4444                                  ;
  4445                                  ;       Output:         EAX     unsigned integer value
  4446                                  ;
  4447                                  ;-----------------------------------------------------------------------------------------------------------------------
  4448                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4449                                                          mov     esi,edx                                         ;source address
  4450                                                          xor     edx,edx                                         ;zero register
  4451                                  .10                     lodsb                                                   ;source byte
  4452                                                          test    al,al                                           ;end of string?
  4453                                                          jz      .30                                             ;yes, branch
  4454                                                          cmp     al,'9'                                          ;hexadecimal?
  4455                                                          jna     .20                                             ;no, skip ahead
  4456                                                          sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4457                                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4458                                                          shl     edx,4                                           ;previous total x 16
  4459                                                          add     edx,eax                                         ;add prior value x 16
  4460                                                          jmp     .10                                             ;next
  4461                                  .30                     mov     eax,edx                                         ;result
  4462                                                          pop     esi                                             ;restore non-volatile regs
  4463                                                          ret                                                     ;return
  4464                                  ;-----------------------------------------------------------------------------------------------------------------------
  4465                                  ;
  4466                                  ;       Routine:        UnsignedToDecimalString
  4467                                  ;
  4468                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4469                                  ;
  4470                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4471                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4472                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4473                                  ;                       ECX     32-bit binary
  4474                                  ;                       DS:EDX  output buffer address
  4475                                  ;
  4476                                  ;-----------------------------------------------------------------------------------------------------------------------
  4477                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4478                                                          push    ecx                                             ;
  4479                                                          push    edi                                             ;
  4480                                                          push    es                                              ;
  4481                                                          push    ds                                              ;load data selector
  4482                                                          pop     es                                              ;... into extra segment reg
  4483                                                          mov     edi,edx                                         ;output buffer address
  4484                                                          and     bh,00001111b                                    ;zero internal flags
  4485                                                          mov     edx,ecx                                         ;binary
  4486                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4487                                                          call    .30                                             ;divide and store
  4488                                                          mov     ecx,100000000                                   ;10^8 divisor
  4489                                                          call    .10                                             ;divide and store
  4490                                                          mov     ecx,10000000                                    ;10^7 divisor
  4491                                                          call    .30                                             ;divide and store
  4492                                                          mov     ecx,1000000                                     ;10^6 divisor
  4493                                                          call    .30                                             ;divide and store
  4494                                                          mov     ecx,100000                                      ;10^5 divisor
  4495                                                          call    .10                                             ;divide and store
  4496                                                          mov     ecx,10000                                       ;10^4 divisor
  4497                                                          call    .30                                             ;divide and store
  4498                                                          mov     ecx,1000                                        ;10^3 divisor
  4499                                                          call    .30                                             ;divide and store
  4500                                                          mov     ecx,100                                         ;10^2 divisor
  4501                                                          call    .10                                             ;divide and store
  4502                                                          mov     ecx,10                                          ;10^2 divisor
  4503                                                          call    .30                                             ;divide and store
  4504                                                          mov     eax,edx                                         ;10^1 remainder
  4505                                                          call    .40                                             ;store
  4506                                                          xor     al,al                                           ;null terminator
  4507                                                          stosb                                                   ;store in output buffer
  4508                                                          pop     es                                              ;restore non-volatile regs
  4509                                                          pop     edi                                             ;
  4510                                                          pop     ecx                                             ;
  4511                                                          pop     ebx                                             ;
  4512                                                          ret                                                     ;return
  4513                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4514                                                          jz      .30                                             ;no, branch
  4515                                                          test    bh,00000001b                                    ;trim leading zeros?
  4516                                                          jz      .20                                             ;no, store delim
  4517                                                          test    bh,00010000b                                    ;non-zero found?
  4518                                                          jz      .30                                             ;no, branch
  4519                                  .20                     mov     al,','                                          ;delimiter
  4520                                                          stosb                                                   ;store delimiter
  4521                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4522                                                          xor     edx,edx                                         ;zero hi-order
  4523                                                          div     ecx                                             ;divide by power of 10
  4524                                                          test    al,al                                           ;zero?
  4525                                                          jz      .50                                             ;yes, branch
  4526                                                          or      bh,00010000b                                    ;non-zero found
  4527                                  .40                     or      al,030h                                         ;ASCII zone
  4528                                                          stosb                                                   ;store digit
  4529                                                          ret                                                     ;return
  4530                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4531                                                          jz      .40                                             ;no, store and continue
  4532                                                          test    bh,00010000b                                    ;non-zero found?
  4533                                                          jnz     .40                                             ;yes, store and continue
  4534                                                          ret                                                     ;return
  4535                                  ;-----------------------------------------------------------------------------------------------------------------------
  4536                                  ;
  4537                                  ;       Routine:        UnsignedToHexadecimal
  4538                                  ;
  4539                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4540                                  ;
  4541                                  ;       Input:          DS:EDX  output buffer address
  4542                                  ;                       ECX     32-bit binary
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4546                                                          mov     edi,edx                                         ;output buffer address
  4547                                                          mov     edx,ecx                                         ;32-bit unsigned
  4548                                                          xor     ecx,ecx                                         ;zero register
  4549                                                          mov     cl,8                                            ;nybble count
  4550                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4551                                                          mov     al,dl                                           ;????bbbb
  4552                                                          and     al,00Fh                                         ;mask out bits 4-7
  4553                                                          or      al,030h                                         ;mask in ascii zone
  4554                                                          cmp     al,03Ah                                         ;A through F?
  4555                                                          jb      .20                                             ;no, skip ahead
  4556                                                          add     al,7                                            ;41h through 46h
  4557                                  .20                     stosb                                                   ;store hexnum
  4558                                                          loop    .10                                             ;next nybble
  4559                                                          xor     al,al                                           ;zero reg
  4560                                                          stosb                                                   ;null terminate
  4561                                                          pop     edi                                             ;restore non-volatile regs
  4562                                                          ret                                                     ;return
  4563                                  ;=======================================================================================================================
  4564                                  ;
  4565                                  ;       Message Queue Helper Routines
  4566                                  ;
  4567                                  ;       GetMessage
  4568                                  ;       PutMessage
  4569                                  ;
  4570                                  ;=======================================================================================================================
  4571                                  ;-----------------------------------------------------------------------------------------------------------------------
  4572                                  ;
  4573                                  ;       Routine:        GetMessage
  4574                                  ;
  4575                                  ;       Description:    This routine reads and removes a message from the message queue.
  4576                                  ;
  4577                                  ;       Out:            EAX     lo-order message data
  4578                                  ;                       EDX     hi-order message data
  4579                                  ;
  4580                                  ;                       CY      0 = message read
  4581                                  ;                               1 = no message to read
  4582                                  ;
  4583                                  ;-----------------------------------------------------------------------------------------------------------------------
  4584                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4585                                                          push    ecx                                             ;
  4586                                                          push    ds                                              ;
  4587                                                          push    ELDTMQ                                          ;load message queue selector ...
  4588                                                          pop     ds                                              ;... into data segment register
  4589                                                          mov     ebx,[MQHead]                                    ;head ptr
  4590                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4591                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4592                                                          or      eax,edx                                         ;is queue empty?
  4593                                                          stc                                                     ;assume queue is emtpy
  4594                                                          jz      .20                                             ;yes, skip ahead
  4595                                                          xor     ecx,ecx                                         ;store zero
  4596                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4597                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4598                                                          add     ebx,8                                           ;next queue element
  4599                                                          and     ebx,03FCh                                       ;at end of queue?
  4600                                                          jnz     .10                                             ;no, skip ahead
  4601                                                          mov     bl,8                                            ;reset to 1st entry
  4602                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4603                                                          clc                                                     ;indicate message read
  4604                                  .20                     pop     ds                                              ;restore non-volatile regs
  4605                                                          pop     ecx                                             ;
  4606                                                          pop     ebx                                             ;
  4607                                                          ret                                                     ;return
  4608                                  ;-----------------------------------------------------------------------------------------------------------------------
  4609                                  ;
  4610                                  ;       Routine:        PutMessage
  4611                                  ;
  4612                                  ;       Description:    This routine adda a message to the message queue.
  4613                                  ;
  4614                                  ;       In:             ECX     hi-order data word
  4615                                  ;                       EDX     lo-order data word
  4616                                  ;
  4617                                  ;       Out:            CY      0 = success
  4618                                  ;                               1 = fail: queue is full
  4619                                  ;
  4620                                  ;-----------------------------------------------------------------------------------------------------------------------
  4621                                  PutMessage              push    ds                                              ;save non-volatile regs
  4622                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4623                                                          pop     ds                                              ;... into data segment register
  4624                                                          mov     eax,[MQTail]                                    ;tail ptr
  4625                                                          cmp     dword [eax],0                                   ;is queue full?
  4626                                                          stc                                                     ;assume failure
  4627                                                          jne     .20                                             ;yes, cannot store
  4628                                                          mov     [eax],edx                                       ;store lo-order data
  4629                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4630                                                          add     eax,8                                           ;next queue element adr
  4631                                                          and     eax,03FCh                                       ;at end of queue?
  4632                                                          jnz     .10                                             ;no, skip ahead
  4633                                                          mov     al,8                                            ;reset to top of queue
  4634                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4635                                                          clc                                                     ;indicate success
  4636                                  .20                     pop     ds                                              ;restore non-volatile regs
  4637                                                          ret                                                     ;return
  4638                                  ;=======================================================================================================================
  4639                                  ;
  4640                                  ;       Memory-Mapped Video Routines
  4641                                  ;
  4642                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4643                                  ;
  4644                                  ;       ClearConsoleScreen
  4645                                  ;       ScrollConsoleRow
  4646                                  ;       SetConsoleChar
  4647                                  ;       SetConsoleString
  4648                                  ;
  4649                                  ;=======================================================================================================================
  4650                                  ;-----------------------------------------------------------------------------------------------------------------------
  4651                                  ;
  4652                                  ;       Routine:        ClearConsoleScreen
  4653                                  ;
  4654                                  ;       Description:    This routine clears the console (CGA) screen.
  4655                                  ;
  4656                                  ;-----------------------------------------------------------------------------------------------------------------------
  4657                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4658                                                          push    edi                                             ;
  4659                                                          push    ds                                              ;
  4660                                                          push    es                                              ;
  4661                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4662                                                          pop     ds                                              ;... into DS register
  4663                                                          push    EGDTCGA                                         ;load CGA selector ...
  4664                                                          pop     es                                              ;... into ES register
  4665                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4666                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4667                                                          xor     edi,edi                                         ;target offset
  4668                                                          cld                                                     ;forward strings
  4669                                                          rep     stosd                                           ;reset screen body
  4670                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4671                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4672                                                          rep     stosd                                           ;reset OIA line
  4673                                                          xor     al,al                                           ;zero register
  4674                                                          mov     [wbConsoleRow],al                               ;reset console row
  4675                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4676                                                          call    PlaceCursor                                     ;place cursor at current position
  4677                                                          pop     es                                              ;restore non-volatile regs
  4678                                                          pop     ds                                              ;
  4679                                                          pop     edi                                             ;
  4680                                                          pop     ecx                                             ;
  4681                                                          ret                                                     ;return
  4682                                  ;-----------------------------------------------------------------------------------------------------------------------
  4683                                  ;
  4684                                  ;       Routine:        ScrollConsoleRow
  4685                                  ;
  4686                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4687                                  ;
  4688                                  ;-----------------------------------------------------------------------------------------------------------------------
  4689                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4690                                                          push    esi                                             ;
  4691                                                          push    edi                                             ;
  4692                                                          push    ds                                              ;
  4693                                                          push    es                                              ;
  4694                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4695                                                          pop     ds                                              ;... into DS
  4696                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4697                                                          pop     es                                              ;... into ES
  4698                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4699                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4700                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4701                                                          cld                                                     ;forward strings
  4702                                                          rep     movsd                                           ;move 24 lines up
  4703                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4704                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4705                                                          rep     stosd                                           ;clear bottom row
  4706                                                          pop     es                                              ;restore non-volatile regs
  4707                                                          pop     ds                                              ;
  4708                                                          pop     edi                                             ;
  4709                                                          pop     esi                                             ;
  4710                                                          pop     ecx                                             ;
  4711                                                          ret                                                     ;return
  4712                                  ;-----------------------------------------------------------------------------------------------------------------------
  4713                                  ;
  4714                                  ;       Routine:        SetConsoleChar
  4715                                  ;
  4716                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4717                                  ;
  4718                                  ;       In:             AL      ASCII character
  4719                                  ;                       CL      column
  4720                                  ;                       CH      row
  4721                                  ;                       ES      CGA selector
  4722                                  ;
  4723                                  ;       Out:            EAX     last target address written (ES:)
  4724                                  ;                       CL      column + 1
  4725                                  ;
  4726                                  ;-----------------------------------------------------------------------------------------------------------------------
  4727                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4728                                                          movzx   eax,ch                                          ;row
  4729                                                          mov     ah,ECONCOLS                                     ;cols/row
  4730                                                          mul     ah                                              ;row * cols/row
  4731                                                          add     al,cl                                           ;add column
  4732                                                          adc     ah,0                                            ;handle carry
  4733                                                          shl     eax,1                                           ;screen offset
  4734                                                          mov     [es:eax],dl                                     ;store character
  4735                                                          inc     cl                                              ;next column
  4736                                                          ret                                                     ;return
  4737                                  ;-----------------------------------------------------------------------------------------------------------------------
  4738                                  ;
  4739                                  ;       Routine:        SetConsoleString
  4740                                  ;
  4741                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4742                                  ;
  4743                                  ;       In:             ESI     source offset (DS:)
  4744                                  ;                       CL      column
  4745                                  ;                       CH      row
  4746                                  ;                       ES      CGA selector
  4747                                  ;
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4750                                                          cld                                                     ;forward strings
  4751                                  .10                     lodsb                                                   ;next ASCII character
  4752                                                          test    al,al                                           ;end of string?
  4753                                                          jz      .20                                             ;yes, branch
  4754                                                          call    SetConsoleChar                                  ;store character
  4755                                                          jmp     .10                                             ;continue
  4756                                  .20                     pop     esi                                             ;restore non-volatile regs
  4757                                                          ret                                                     ;return
  4758                                  ;=======================================================================================================================
  4759                                  ;
  4760                                  ;       Input/Output Routines
  4761                                  ;
  4762                                  ;       These routines read and/or write directly to ports.
  4763                                  ;
  4764                                  ;       GetBaseMemSize
  4765                                  ;       GetExtendedMemSize
  4766                                  ;       GetROMMemSize
  4767                                  ;       PlaceCursor
  4768                                  ;       PutPrimaryEndOfInt
  4769                                  ;       PutSecondaryEndOfInt
  4770                                  ;       ReadRealTimeClock
  4771                                  ;       ResetSystem
  4772                                  ;       SetKeyboardLamps
  4773                                  ;       WaitForKeyInBuffer
  4774                                  ;       WaitForKeyOutBuffer
  4775                                  ;
  4776                                  ;=======================================================================================================================
  4777                                  ;-----------------------------------------------------------------------------------------------------------------------
  4778                                  ;
  4779                                  ;       Routine:        GetBaseMemSize
  4780                                  ;
  4781                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4782                                  ;
  4783                                  ;       Output:         EAX     base RAM size in bytes
  4784                                  ;
  4785                                  ;-----------------------------------------------------------------------------------------------------------------------
  4786                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4787                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4788                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4789                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4790                                                          mov     ah,al                                           ;save base RAM high
  4791                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4792                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4793                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4794                                                          ret                                                     ;return to caller
  4795                                  ;-----------------------------------------------------------------------------------------------------------------------
  4796                                  ;
  4797                                  ;       Routine:        GetExtendedMemSize
  4798                                  ;
  4799                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4800                                  ;
  4801                                  ;       Output:         EAX     extended RAM size in bytes
  4802                                  ;
  4803                                  ;-----------------------------------------------------------------------------------------------------------------------
  4804                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4805                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4806                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4807                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4808                                                          mov     ah,al                                           ;save extended RAM high
  4809                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4810                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4811                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4812                                                          ret                                                     ;return to caller
  4813                                  ;-----------------------------------------------------------------------------------------------------------------------
  4814                                  ;
  4815                                  ;       Routine:        GetROMMemSize
  4816                                  ;
  4817                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4818                                  ;
  4819                                  ;       Output:         EAX     RAM size in bytes
  4820                                  ;
  4821                                  ;-----------------------------------------------------------------------------------------------------------------------
  4822                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4823                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4824                                                          ret                                                     ;return
  4825                                  ;-----------------------------------------------------------------------------------------------------------------------
  4826                                  ;
  4827                                  ;       Routine:        PlaceCursor
  4828                                  ;
  4829                                  ;       Description:    This routine positions the cursor on the console.
  4830                                  ;
  4831                                  ;       In:             DS      OS data selector
  4832                                  ;
  4833                                  ;-----------------------------------------------------------------------------------------------------------------------
  4834                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4835                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4836                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4837                                                          mul     ah                                              ;row offset
  4838                                                          add     al,[wbConsoleColumn]                            ;add column
  4839                                                          adc     ah,0                                            ;add overflow
  4840                                                          mov     ecx,eax                                         ;screen offset
  4841                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4842                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4843                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4844                                                          out     dx,al                                           ;select register
  4845                                                          inc     edx                                             ;data port
  4846                                                          mov     al,ch                                           ;hi-order cursor loc
  4847                                                          out     dx,al                                           ;store hi-order loc
  4848                                                          dec     edx                                             ;register select port
  4849                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4850                                                          out     dx,al                                           ;select register
  4851                                                          inc     edx                                             ;data port
  4852                                                          mov     al,cl                                           ;lo-order cursor loc
  4853                                                          out     dx,al                                           ;store lo-order loc
  4854                                                          pop     ecx                                             ;restore non-volatile regs
  4855                                                          ret                                                     ;return
  4856                                  ;-----------------------------------------------------------------------------------------------------------------------
  4857                                  ;
  4858                                  ;       Routine:        PutPrimaryEndOfInt
  4859                                  ;
  4860                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4861                                  ;
  4862                                  ;-----------------------------------------------------------------------------------------------------------------------
  4863                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4864                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4865                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4866                                                          ret                                                     ;return
  4867                                  ;-----------------------------------------------------------------------------------------------------------------------
  4868                                  ;
  4869                                  ;       Routine:        PutSecondaryEndOfInt
  4870                                  ;
  4871                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4872                                  ;
  4873                                  ;-----------------------------------------------------------------------------------------------------------------------
  4874                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4875                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4876                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4877                                                          ret                                                     ;return
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        ReadRealTimeClock
  4881                                  ;
  4882                                  ;       Description:    This routine gets current date time from the real-time clock.
  4883                                  ;
  4884                                  ;       In:             DS:EBX  DATETIME structure
  4885                                  ;
  4886                                  ;-----------------------------------------------------------------------------------------------------------------------
  4887                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4888                                                          push    edi                                             ;
  4889                                                          push    es                                              ;
  4890                                                          push    ds                                              ;store data selector ...
  4891                                                          pop     es                                              ;... in es register
  4892                                                          mov     edi,ebx                                         ;date-time structure
  4893                                                          mov     al,ERTCSECONDREG                                ;second register
  4894                                                          out     ERTCREGPORT,al                                  ;select second register
  4895                                                          in      al,ERTCDATAPORT                                 ;read second register
  4896                                                          cld                                                     ;forward strings
  4897                                                          stosb                                                   ;store second value
  4898                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4899                                                          out     ERTCREGPORT,al                                  ;select minute register
  4900                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4901                                                          stosb                                                   ;store minute value
  4902                                                          mov     al,ERTCHOURREG                                  ;hour register
  4903                                                          out     ERTCREGPORT,al                                  ;select hour register
  4904                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4905                                                          stosb                                                   ;store hour value
  4906                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4907                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4908                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4909                                                          stosb                                                   ;store weekday value
  4910                                                          mov     al,ERTCDAYREG                                   ;day register
  4911                                                          out     ERTCREGPORT,al                                  ;select day register
  4912                                                          in      al,ERTCDATAPORT                                 ;read day register
  4913                                                          stosb                                                   ;store day value
  4914                                                          mov     al,ERTCMONTHREG                                 ;month register
  4915                                                          out     ERTCREGPORT,al                                  ;select month register
  4916                                                          in      al,ERTCDATAPORT                                 ;read month register
  4917                                                          stosb                                                   ;store month value
  4918                                                          mov     al,ERTCYEARREG                                  ;year register
  4919                                                          out     ERTCREGPORT,al                                  ;select year register
  4920                                                          in      al,ERTCDATAPORT                                 ;read year register
  4921                                                          stosb                                                   ;store year value
  4922                                                          mov     al,ERTCCENTURYREG                               ;century register
  4923                                                          out     ERTCREGPORT,al                                  ;select century register
  4924                                                          in      al,ERTCDATAPORT                                 ;read century register
  4925                                                          stosb                                                   ;store century value
  4926                                                          mov     al,ERTCSTATUSREG                                ;status register
  4927                                                          out     ERTCREGPORT,al                                  ;select status register
  4928                                                          in      al,ERTCDATAPORT                                 ;read status register
  4929                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4930                                                          jnz     .20                                             ;skip ahead if binary values
  4931                                                          mov     esi,ebx                                         ;date-time structure address
  4932                                                          mov     edi,ebx                                         ;date-time structure address
  4933                                                          mov     ecx,8                                           ;loop counter
  4934                                  .10                     lodsb                                                   ;BCD value
  4935                                                          mov     ah,al                                           ;BCD value
  4936                                                          and     al,00001111b                                    ;low-order decimal zone
  4937                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4938                                                          shr     ah,1                                            ;hi-order decimal * 8
  4939                                                          add     al,ah                                           ;low-order + hi-order * 8
  4940                                                          shr     ah,2                                            ;hi-order decimal * 2
  4941                                                          add     al,ah                                           ;low-order + hi-order * 10
  4942                                                          stosb                                                   ;replace BCD with binary
  4943                                                          loop    .10                                             ;next value
  4944                                  .20                     pop     es                                              ;restore non-volatile regs
  4945                                                          pop     edi                                             ;
  4946                                                          pop     esi                                             ;
  4947                                                          ret                                                     ;return
  4948                                  ;-----------------------------------------------------------------------------------------------------------------------
  4949                                  ;
  4950                                  ;       Routine:        ResetSystem
  4951                                  ;
  4952                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4953                                  ;
  4954                                  ;       Out:            N/A     This routine does not return.
  4955                                  ;
  4956                                  ;-----------------------------------------------------------------------------------------------------------------------
  4957                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4958                                                          loop    $                                               ;clear interrupts
  4959                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4960                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4961                                  .10                     sti                                                     ;enable maskable interrupts
  4962                                                          hlt                                                     ;halt until interrupt
  4963                                                          jmp     .10                                             ;repeat until reset kicks in
  4964                                  ;-----------------------------------------------------------------------------------------------------------------------
  4965                                  ;
  4966                                  ;       Routine:        SetKeyboardLamps
  4967                                  ;
  4968                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4969                                  ;
  4970                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4971                                  ;
  4972                                  ;-----------------------------------------------------------------------------------------------------------------------
  4973                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4974                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4975                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4976                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4977                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4978                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4979                                                          mov     al,bh                                           ;set/reset lamps value
  4980                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4981                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4982                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4983                                                          ret                                                     ;return
  4984                                  ;-----------------------------------------------------------------------------------------------------------------------
  4985                                  ;
  4986                                  ;       Routine:        WaitForKeyInBuffer
  4987                                  ;
  4988                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4989                                  ;
  4990                                  ;       Out:            ZF      1 = Input buffer ready
  4991                                  ;                               0 = Input buffer not ready after timeout
  4992                                  ;
  4993                                  ;-----------------------------------------------------------------------------------------------------------------------
  4994                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4995                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4996                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4997                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4998                                                          loopnz  .10                                             ;yes, repeat till timeout
  4999                                                          pop     ecx                                             ;restore non-volatile regs
  5000                                                          ret                                                     ;return
  5001                                  ;-----------------------------------------------------------------------------------------------------------------------
  5002                                  ;
  5003                                  ;       Routine:        WaitForKeyOutBuffer
  5004                                  ;
  5005                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5006                                  ;
  5007                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5008                                  ;                               0 = Output buffer empty after timeout
  5009                                  ;
  5010                                  ;-----------------------------------------------------------------------------------------------------------------------
  5011                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5012                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5013                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5014                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5015                                                          loopz   .10                                             ;loop until output buffer bit
  5016                                                          pop     ecx                                             ;restore non-volatile regs
  5017                                                          ret                                                     ;return
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       End of the Kernel Function Library
  5021                                  ;
  5022                                  ;-----------------------------------------------------------------------------------------------------------------------
  5023                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5024                                  ;=======================================================================================================================
  5025                                  ;
  5026                                  ;       Console Task
  5027                                  ;
  5028                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5029                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5030                                  ;       screen and responds to user commands.
  5031                                  ;
  5032                                  ;=======================================================================================================================
  5033                                  ;-----------------------------------------------------------------------------------------------------------------------
  5034                                  ;
  5035                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5036                                  ;
  5037                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5038                                  ;
  5039                                  ;-----------------------------------------------------------------------------------------------------------------------
  5040                                  section                 constack                                                ;console task stack
  5041                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5042                                  ;-----------------------------------------------------------------------------------------------------------------------
  5043                                  ;
  5044                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5045                                  ;
  5046                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5047                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5048                                  ;       16 descriptors. Six are initially defined.
  5049                                  ;
  5050                                  ;-----------------------------------------------------------------------------------------------------------------------
  5051                                  section                 conldt                                                  ;console local descriptors
  5052                                                          dq      004093004780007Fh                               ;04 TSS alias
  5053                                                          dq      004093004700007Fh                               ;0c LDT alias
  5054                                                          dq      00409300400006FFh                               ;14 stack
  5055                                                          dq      00CF93000000FFFFh                               ;1c data
  5056                                                          dq      00409B0050000FFFh                               ;24 code
  5057                                                          dq      00409300480007FFh                               ;2c message queue
  5058                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5059                                  ;-----------------------------------------------------------------------------------------------------------------------
  5060                                  ;
  5061                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5062                                  ;
  5063                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5064                                  ;       segment. CS to console code.
  5065                                  ;
  5066                                  ;-----------------------------------------------------------------------------------------------------------------------
  5067                                  section                 contss                                                  ;console task state segment
  5068                                                          dd      0                                               ;00 back-link tss
  5069                                                          dd      0700h                                           ;04 esp ring 0
  5070                                                          dd      0014h                                           ;08 ss ring 0
  5071                                                          dd      0700h                                           ;0c esp ring 1
  5072                                                          dd      0014h                                           ;10 es ring 1
  5073                                                          dd      0700h                                           ;14 esp ring 2
  5074                                                          dd      0014h                                           ;18 ss ring 2
  5075                                                          dd      0                                               ;1c cr ring 3
  5076                                                          dd      0                                               ;20 eip
  5077                                                          dd      0200h                                           ;24 eflags
  5078                                                          dd      0                                               ;28 eax
  5079                                                          dd      0                                               ;2c ecx
  5080                                                          dd      0                                               ;30 edx
  5081                                                          dd      0                                               ;34 ebx
  5082                                                          dd      0700h                                           ;38 esp ring 3
  5083                                                          dd      0                                               ;3c ebp
  5084                                                          dd      0                                               ;40 esi
  5085                                                          dd      0                                               ;44 edi
  5086                                                          dd      001Ch                                           ;48 es
  5087                                                          dd      0024h                                           ;4c cs
  5088                                                          dd      0014h                                           ;50 ss ring 3
  5089                                                          dd      001Ch                                           ;54 ds
  5090                                                          dd      0                                               ;58 fs
  5091                                                          dd      0                                               ;5c gs
  5092                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5093                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5094                                  ;-----------------------------------------------------------------------------------------------------------------------
  5095                                  ;
  5096                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5097                                  ;
  5098                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5099                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5100                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5101                                  ;       event.
  5102                                  ;
  5103                                  ;-----------------------------------------------------------------------------------------------------------------------
  5104                                  section                 conmque                                                 ;console message queue
  5105                                                          dd      8                                               ;head pointer
  5106                                                          dd      8                                               ;tail pointer
  5107                                                          times   510 dd 0                                        ;queue elements
  5108                                  ;-----------------------------------------------------------------------------------------------------------------------
  5109                                  ;
  5110                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5111                                  ;
  5112                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5113                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5114                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5115                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5116                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5117                                  ;       board input, echoing to the console screen and responding to user commands.
  5118                                  ;
  5119                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5120                                  ;
  5121                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5122                                  ;                               |  Real Mode Interrupt Vectors                  |
  5123                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5124                                  ;                               |  Reserved BIOS Memory Area                    |
  5125                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5126                                  ;                               |  Shared Kernel Memory Area                    |
  5127                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5128                                  ;                               |  Global Descriptor Table (GDT)                |
  5129                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5130                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5131                                  ;                       002000  +-----------------------------------------------+
  5132                                  ;                               |  Interrupt Handlers                           |
  5133                                  ;                               |  Kernel Function Library                      |
  5134                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5135                                  ;                               |  Console Task Stack Area                      |
  5136                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5137                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5138                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5139                                  ;                               |  Console Task Task State Segment (TSS)        |
  5140                                  ;                       004800  +-----------------------------------------------+
  5141                                  ;                               |  Console Task Message Queue                   |
  5142                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5143                                  ;                               |  Console Task Code                            |
  5144                                  ;                               |  Console Task Constants                       |
  5145                                  ;                       006000  +===============================================+
  5146                                  ;
  5147                                  ;-----------------------------------------------------------------------------------------------------------------------
  5148                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5149                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5150                                                          clearConsoleScreen                                      ;clear the console screen
  5151                                                          putConsoleString czTitle                                ;display startup message
  5152                                                          putConsoleString czBaseMem                              ;base memory label
  5153                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5154                                                          putConsoleString czKB                                   ;Kilobytes
  5155                                                          call    ConPutNewLine                                   ;new line
  5156                                                          putConsoleString czROMMem                               ;ROM memory label
  5157                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5158                                                          putConsoleString czKB                                   ;Kilobytes
  5159                                                          call    ConPutNewLine                                   ;new line
  5160                                                          putConsoleString czExtendedMem                          ;extended memory label
  5161                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5162                                                          putConsoleString czKB                                   ;Kilobytes
  5163                                                          call    ConPutNewLine                                   ;new line
  5164                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5165                                                          placeCursor                                             ;set CRT cursor location
  5166                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5167                                                          call    ConPutNewLine                                   ;newline
  5168                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5169                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5170                                                          call    ConTakeToken                                    ;handle console input
  5171                                                          mov     edx,wzConsoleToken                              ;token buffer
  5172                                                          call    ConDetermineCommand                             ;determine command number
  5173                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5174                                                          jb      .20                                             ;yes, branch
  5175                                                          putConsoleString czUnknownCommand                       ;display error message
  5176                                                          jmp     .10                                             ;next command
  5177                                  .20                     shl     eax,2                                           ;index into jump table
  5178                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5179                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5180                                                          call    eax                                             ;call command handler
  5181                                                          jmp     .10                                             ;next command
  5182                                  ;-----------------------------------------------------------------------------------------------------------------------
  5183                                  ;
  5184                                  ;       Routine:        ConInitializeData
  5185                                  ;
  5186                                  ;       Description:    This routine initializes console task variables.
  5187                                  ;
  5188                                  ;-----------------------------------------------------------------------------------------------------------------------
  5189                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5190                                                          push    edi                                             ;
  5191                                                          push    es                                              ;
  5192                                  ;
  5193                                  ;       Initialize console work areas.
  5194                                  ;
  5195                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5196                                                          pop     es                                              ;... into extra segment register
  5197                                                          mov     edi,ECONDATA                                    ;OS console data address
  5198                                                          xor     al,al                                           ;initialization value
  5199                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5200                                                          cld                                                     ;forward strings
  5201                                                          rep     stosb                                           ;initialize data
  5202                                  ;
  5203                                  ;       Initialize heap size
  5204                                  ;
  5205                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5206                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5207                                  ;
  5208                                  ;       Initialize MEMROOT structure
  5209                                  ;
  5210                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5211                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5212                                                          xor     ecx,ecx                                         ;zero register
  5213                                                          mov     cl,4                                            ;count
  5214                                                          rep     stosd                                           ;store first/last contig and free addrs
  5215                                                          xor     eax,eax                                         ;zero register
  5216                                                          stosd                                                   ;zero first task block
  5217                                                          stosd                                                   ;zero last task block
  5218                                  ;
  5219                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5220                                  ;
  5221                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5222                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5223                                                          stosd                                                   ;store signature
  5224                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5225                                                          stosd                                                   ;store block size
  5226                                                          xor     ecx,ecx                                         ;zero register
  5227                                                          mov     cl,6                                            ;count
  5228                                                          xor     eax,eax                                         ;zero register
  5229                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5230                                  ;
  5231                                  ;       Read memory sizes from ROM
  5232                                  ;
  5233                                                          getROMMemSize                                           ;get ROM memory size
  5234                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5235                                                          mov     ecx,eax                                         ;integer param
  5236                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5237                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5238                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5239                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5240                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5241                                                          mov     ecx,eax                                         ;integer param
  5242                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5243                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5244                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5245                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5246                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5247                                                          mov     ecx,eax                                         ;integer param
  5248                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5249                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5250                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5251                                  ;
  5252                                  ;       Restore and return.
  5253                                  ;
  5254                                                          pop     es                                              ;restore non-volatile regs
  5255                                                          pop     edi                                             ;
  5256                                                          pop     ecx                                             ;
  5257                                                          ret                                                     ;return
  5258                                  ;-----------------------------------------------------------------------------------------------------------------------
  5259                                  ;
  5260                                  ;       Routine:        ConPutNewLine
  5261                                  ;
  5262                                  ;       Description:    Write a new-line to the console.
  5263                                  ;
  5264                                  ;-----------------------------------------------------------------------------------------------------------------------
  5265                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  5266                                                          ret                                                     ;return
  5267                                  ;-----------------------------------------------------------------------------------------------------------------------
  5268                                  ;
  5269                                  ;       Routine:        ConTakeToken
  5270                                  ;
  5271                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5272                                  ;
  5273                                  ;       In:             DS:EDX  source buffer address
  5274                                  ;                       DS:EBX  target buffer address
  5275                                  ;
  5276                                  ;       Out:            DS:EDX  source buffer address
  5277                                  ;                       DS:EBX  target buffer address
  5278                                  ;
  5279                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5280                                  ;
  5281                                  ;-----------------------------------------------------------------------------------------------------------------------
  5282                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5283                                                          push    edi                                             ;
  5284                                                          push    es                                              ;
  5285                                                          push    ds                                              ;load data segment selector ...
  5286                                                          pop     es                                              ;... into extra segment reg
  5287                                                          mov     esi,edx                                         ;source buffer address
  5288                                                          mov     edi,ebx                                         ;target buffer address
  5289                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5290                                                          cld                                                     ;forward strings
  5291                                  .10                     lodsb                                                   ;load byte
  5292                                                          cmp     al,EASCIISPACE                                  ;space?
  5293                                                          je      .10                                             ;yes, continue
  5294                                                          test    al,al                                           ;end of line?
  5295                                                          jz      .40                                             ;yes, branch
  5296                                  .20                     stosb                                                   ;store byte
  5297                                                          lodsb                                                   ;load byte
  5298                                                          test    al,al                                           ;end of line?
  5299                                                          jz      .40                                             ;no, continue
  5300                                                          cmp     al,EASCIISPACE                                  ;space?
  5301                                                          jne     .20                                             ;no, continue
  5302                                  .30                     lodsb                                                   ;load byte
  5303                                                          cmp     al,EASCIISPACE                                  ;space?
  5304                                                          je      .30                                             ;yes, continue
  5305                                                          dec     esi                                             ;pre-position
  5306                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5307                                                          mov     edi,edx                                         ;source buffer address
  5308                                  .50                     lodsb                                                   ;remaining byte
  5309                                                          stosb                                                   ;move to front of buffer
  5310                                                          test    al,al                                           ;end of line?
  5311                                                          jnz     .50                                             ;no, continue
  5312                                                          pop     es                                              ;restore non-volatile regs
  5313                                                          pop     edi                                             ;
  5314                                                          pop     esi                                             ;
  5315                                                          ret                                                     ;return
  5316                                  ;-----------------------------------------------------------------------------------------------------------------------
  5317                                  ;
  5318                                  ;       Routine:        ConDetermineCommand
  5319                                  ;
  5320                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5321                                  ;
  5322                                  ;       input:          DS:EDX  command address
  5323                                  ;
  5324                                  ;       output:         EAX     >=0     = command nbr
  5325                                  ;                               0       = unknown command
  5326                                  ;
  5327                                  ;-----------------------------------------------------------------------------------------------------------------------
  5328                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5329                                                          push    ecx                                             ;
  5330                                                          push    esi                                             ;
  5331                                                          push    edi                                             ;
  5332                                                          upperCaseString                                         ;upper-case string at EDX
  5333                                                          mov     esi,tConCmdTbl                                  ;commands table
  5334                                                          xor     edi,edi                                         ;intialize command number
  5335                                                          cld                                                     ;forward strings
  5336                                  .10                     lodsb                                                   ;command length
  5337                                                          movzx   ecx,al                                          ;command length
  5338                                                          jecxz   .20                                             ;branch if end of table
  5339                                                          mov     ebx,esi                                         ;table entry address
  5340                                                          add     esi,ecx                                         ;next table entry address
  5341                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5342                                                          jecxz   .20                                             ;branch if equal
  5343                                                          inc     edi                                             ;increment command nbr
  5344                                                          jmp     .10                                             ;repeat
  5345                                  .20                     mov     eax,edi                                         ;command number
  5346                                                          pop     edi                                             ;restore non-volatile regs
  5347                                                          pop     esi                                             ;
  5348                                                          pop     ecx                                             ;
  5349                                                          pop     ebx                                             ;
  5350                                                          ret                                                     ;return
  5351                                  ;-----------------------------------------------------------------------------------------------------------------------
  5352                                  ;
  5353                                  ;       Routine:        ConClear
  5354                                  ;
  5355                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5356                                  ;
  5357                                  ;-----------------------------------------------------------------------------------------------------------------------
  5358                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5359                                                          ret                                                     ;return
  5360                                  ;-----------------------------------------------------------------------------------------------------------------------
  5361                                  ;
  5362                                  ;       Routine:        ConDate
  5363                                  ;
  5364                                  ;       Description:    This routine handles the DATE command.
  5365                                  ;
  5366                                  ;-----------------------------------------------------------------------------------------------------------------------
  5367                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5368                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5369                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5370                                                          call    ConPutNewLine                                   ;write newline to console
  5371                                                          ret                                                     ;return
  5372                                  ;-----------------------------------------------------------------------------------------------------------------------
  5373                                  ;
  5374                                  ;       Routine:        ConDay
  5375                                  ;
  5376                                  ;       Description:    This routine handles the DAY command.
  5377                                  ;
  5378                                  ;-----------------------------------------------------------------------------------------------------------------------
  5379                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5380                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5381                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5382                                                          call    ConPutNewLine                                   ;write newline to console
  5383                                                          ret                                                     ;return
  5384                                  ;-----------------------------------------------------------------------------------------------------------------------
  5385                                  ;
  5386                                  ;       Routine:        ConExit
  5387                                  ;
  5388                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5389                                  ;
  5390                                  ;-----------------------------------------------------------------------------------------------------------------------
  5391                                  ConExit                 resetSystem                                             ;issue system reset
  5392                                                          ret                                                     ;return
  5393                                  ;-----------------------------------------------------------------------------------------------------------------------
  5394                                  ;
  5395                                  ;       Routine:        ConFree
  5396                                  ;
  5397                                  ;       Description:    This routine handles the FREE command.
  5398                                  ;
  5399                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5400                                  ;
  5401                                  ;-----------------------------------------------------------------------------------------------------------------------
  5402                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5403                                                          push    ecx                                             ;
  5404                                                          push    esi                                             ;
  5405                                                          push    edi                                             ;
  5406                                  ;
  5407                                  ;       Get address parameter
  5408                                  ;
  5409                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5410                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5411                                                          call    ConTakeToken                                    ;take first param as token
  5412                                  ;
  5413                                  ;       Convert input parameter from hexadecimal string to binary
  5414                                  ;
  5415                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5416                                                          je      .10                                             ;no, branch
  5417                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5418                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5419                                                          test    eax,eax                                         ;valid parameter?
  5420                                                          jz      .10                                             ;no, branch
  5421                                  ;
  5422                                  ;       Free memory block
  5423                                  ;
  5424                                                          freeMemory eax                                          ;free memory
  5425                                                          cmp     eax,-1                                          ;memory freed?
  5426                                                          je      .10                                             ;no, branch
  5427                                  ;
  5428                                  ;       Indicate memory freed
  5429                                  ;
  5430                                                          putConsoleString czOK                                   ;indicate success
  5431                                  ;
  5432                                  ;       Restore and return
  5433                                  ;
  5434                                  .10                     pop     edi                                             ;restore non-volatile regs
  5435                                                          pop     esi                                             ;
  5436                                                          pop     ecx                                             ;
  5437                                                          pop     ebx                                             ;
  5438                                                          ret                                                     ;return
  5439                                  ;-----------------------------------------------------------------------------------------------------------------------
  5440                                  ;
  5441                                  ;       Routine:        ConHour
  5442                                  ;
  5443                                  ;       Description:    This routine Handles the HOUR command.
  5444                                  ;
  5445                                  ;-----------------------------------------------------------------------------------------------------------------------
  5446                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5447                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5448                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5449                                                          call    ConPutNewLine                                   ;write newline to console
  5450                                                          ret                                                     ;return
  5451                                  ;-----------------------------------------------------------------------------------------------------------------------
  5452                                  ;
  5453                                  ;       Routine:        ConInt6
  5454                                  ;
  5455                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5456                                  ;
  5457                                  ;-----------------------------------------------------------------------------------------------------------------------
  5458                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5459                                                          ret                                                     ;return (not executed)
  5460                                  ;-----------------------------------------------------------------------------------------------------------------------
  5461                                  ;
  5462                                  ;       Routine:        ConMalloc
  5463                                  ;
  5464                                  ;       Description:    This routine handles the MALLOC command.
  5465                                  ;
  5466                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5467                                  ;
  5468                                  ;-----------------------------------------------------------------------------------------------------------------------
  5469                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5470                                                          push    ecx                                             ;
  5471                                                          push    esi                                             ;
  5472                                                          push    edi                                             ;
  5473                                  ;
  5474                                  ;       Get size parameter
  5475                                  ;
  5476                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5477                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5478                                                          call    ConTakeToken                                    ;take first param as token
  5479                                  ;
  5480                                  ;       Convert input parameter from decimal string to binary
  5481                                  ;
  5482                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5483                                                          je      .10                                             ;no, branch
  5484                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5485                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5486                                                          test    eax,eax                                         ;valid parameter?
  5487                                                          jz      .10                                             ;no, branch
  5488                                  ;
  5489                                  ;       Allocate memory block
  5490                                  ;
  5491                                                          allocateMemory eax                                      ;allocate memory
  5492                                                          test    eax,eax                                         ;memory allocated?
  5493                                                          jz      .10                                             ;no, branch
  5494                                  ;
  5495                                  ;       Report allocated memory block address
  5496                                  ;
  5497                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5498                                                          mov     ecx,eax                                         ;memory address
  5499                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5500                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5501                                                          call    ConPutNewLine                                   ;display new line
  5502                                  .10                     pop     edi                                             ;restore non-volatile regs
  5503                                                          pop     esi                                             ;
  5504                                                          pop     ecx                                             ;
  5505                                                          pop     ebx                                             ;
  5506                                                          ret                                                     ;return
  5507                                  ;-----------------------------------------------------------------------------------------------------------------------
  5508                                  ;
  5509                                  ;       Routine:        ConMem
  5510                                  ;
  5511                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5512                                  ;
  5513                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5514                                  ;
  5515                                  ;-----------------------------------------------------------------------------------------------------------------------
  5516                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5517                                                          push    esi                                             ;
  5518                                                          push    edi                                             ;
  5519                                  ;
  5520                                  ;       Update the source address if a parameter is given.
  5521                                  ;
  5522                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5523                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5524                                                          call    ConTakeToken                                    ;take first param as token
  5525                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5526                                                          je      .10                                             ;no, branch
  5527                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5528                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5529                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5530                                  ;
  5531                                  ;       Setup source address and row count.
  5532                                  ;
  5533                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5534                                                          xor     ecx,ecx                                         ;zero register
  5535                                                          mov     cl,16                                           ;row count
  5536                                  ;
  5537                                  ;       Start the row with the source address in hexadecimal.
  5538                                  ;
  5539                                  .20                     push    ecx                                             ;save remaining rows
  5540                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5541                                                          mov     edx,edi                                         ;output buffer address
  5542                                                          mov     ecx,esi                                         ;console memory address
  5543                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5544                                                          add     edi,8                                           ;end of memory addr hexnum
  5545                                                          mov     al,' '                                          ;ascii space
  5546                                                          stosb                                                   ;store delimiter
  5547                                  ;
  5548                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5549                                  ;
  5550                                                          xor     ecx,ecx                                         ;zero register
  5551                                                          mov     cl,16                                           ;loop count
  5552                                  .30                     push    ecx                                             ;save loop count
  5553                                                          lodsb                                                   ;memory byte
  5554                                                          mov     ah,al                                           ;memory byte
  5555                                                          shr     al,4                                            ;high-order in bits 3-0
  5556                                                          or      al,30h                                          ;apply ascii numeric zone
  5557                                                          cmp     al,3ah                                          ;numeric range?
  5558                                                          jb      .40                                             ;yes, skip ahead
  5559                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5560                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5561                                                          mov     al,ah                                           ;low-order in bits 3-0
  5562                                                          and     al,0fh                                          ;mask out high-order bits
  5563                                                          or      al,30h                                          ;apply ascii numeric zone
  5564                                                          cmp     al,3ah                                          ;numeric range?
  5565                                                          jb      .50                                             ;yes, skip ahead
  5566                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5567                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5568                                                          mov     al,' '                                          ;ascii space
  5569                                                          stosb                                                   ;store ascii space delimiter
  5570                                                          pop     ecx                                             ;loop count
  5571                                                          loop    .30                                             ;next
  5572                                  ;
  5573                                  ;       Output printable ASCII character section for the row.
  5574                                  ;
  5575                                                          sub     esi,16                                          ;reset source pointer
  5576                                                          mov     cl,16                                           ;loop count
  5577                                  .60                     lodsb                                                   ;source byte
  5578                                                          cmp     al,32                                           ;printable? (low-range test)
  5579                                                          jb      .70                                             ;no, skip ahead
  5580                                                          cmp     al,128                                          ;printable? (high-range test)
  5581                                                          jb      .80                                             ;yes, skip ahead
  5582                                  .70                     mov     al,' '                                          ;display space instead of printable
  5583                                  .80                     stosb                                                   ;store printable ascii byte
  5584                                                          loop    .60                                             ;next source byte
  5585                                                          xor     al,al                                           ;nul-terminator
  5586                                                          stosb                                                   ;terminate output line
  5587                                  ;
  5588                                  ;       Display constructed output buffer and newline.
  5589                                  ;
  5590                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5591                                                          call    ConPutNewLine                                   ;display new line
  5592                                  ;
  5593                                  ;       Repeat until all lines displayed and preserve source address.
  5594                                  ;
  5595                                                          pop     ecx                                             ;remaining rows
  5596                                                          loop    .20                                             ;next row
  5597                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5598                                                          pop     edi                                             ;restore regs
  5599                                                          pop     esi                                             ;
  5600                                                          pop     ebx                                             ;
  5601                                                          ret                                                     ;return
  5602                                  ;-----------------------------------------------------------------------------------------------------------------------
  5603                                  ;
  5604                                  ;       Routine:        ConMinute
  5605                                  ;
  5606                                  ;       Description:    This routine Handles the MINUTE command.
  5607                                  ;
  5608                                  ;-----------------------------------------------------------------------------------------------------------------------
  5609                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5610                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5611                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5612                                                          call    ConPutNewLine                                   ;write newline to console
  5613                                                          ret                                                     ;return
  5614                                  ;-----------------------------------------------------------------------------------------------------------------------
  5615                                  ;
  5616                                  ;       Routine:        ConMonth
  5617                                  ;
  5618                                  ;       Description:    This routine Handles the MONTH command.
  5619                                  ;
  5620                                  ;-----------------------------------------------------------------------------------------------------------------------
  5621                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5622                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5623                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5624                                                          call    ConPutNewLine                                   ;write newline to console
  5625                                                          ret                                                     ;return
  5626                                  ;-----------------------------------------------------------------------------------------------------------------------
  5627                                  ;
  5628                                  ;       Routine:        ConMonthName
  5629                                  ;
  5630                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5631                                  ;
  5632                                  ;-----------------------------------------------------------------------------------------------------------------------
  5633                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5634                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5635                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5636                                                          call    ConPutNewLine                                   ;write newline to console
  5637                                                          ret                                                     ;return
  5638                                  ;-----------------------------------------------------------------------------------------------------------------------
  5639                                  ;
  5640                                  ;       Routine:        ConSecond
  5641                                  ;
  5642                                  ;       Description:    This routine Handles the SECOND command.
  5643                                  ;
  5644                                  ;-----------------------------------------------------------------------------------------------------------------------
  5645                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5646                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5647                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5648                                                          call    ConPutNewLine                                   ;write newline to console
  5649                                                          ret                                                     ;return
  5650                                  ;-----------------------------------------------------------------------------------------------------------------------
  5651                                  ;
  5652                                  ;       Routine:        ConTime
  5653                                  ;
  5654                                  ;       Description:    This routine Handles the TIME command.
  5655                                  ;
  5656                                  ;-----------------------------------------------------------------------------------------------------------------------
  5657                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5658                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5659                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5660                                                          call    ConPutNewLine                                   ;write newline to console
  5661                                                          ret                                                     ;return
  5662                                  ;-----------------------------------------------------------------------------------------------------------------------
  5663                                  ;
  5664                                  ;       Routine:        ConVersion
  5665                                  ;
  5666                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5667                                  ;
  5668                                  ;-----------------------------------------------------------------------------------------------------------------------
  5669                                  ConVersion              putConsoleString czTitle                                ;display version message
  5670                                                          ret                                                     ;return
  5671                                  ;-----------------------------------------------------------------------------------------------------------------------
  5672                                  ;
  5673                                  ;       Routine:        ConWeekday
  5674                                  ;
  5675                                  ;       Description:    This routine handles the WEEKDAY command.
  5676                                  ;
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5679                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5680                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5681                                                          call    ConPutNewLine                                   ;write newline to console
  5682                                                          ret                                                     ;return
  5683                                  ;-----------------------------------------------------------------------------------------------------------------------
  5684                                  ;
  5685                                  ;       Routine:        ConWeekdayName
  5686                                  ;
  5687                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5688                                  ;
  5689                                  ;-----------------------------------------------------------------------------------------------------------------------
  5690                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5691                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5692                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5693                                                          call    ConPutNewLine                                           ;write newline to console
  5694                                                          ret                                                             ;return
  5695                                  ;-----------------------------------------------------------------------------------------------------------------------
  5696                                  ;
  5697                                  ;       Routine:        ConYear
  5698                                  ;
  5699                                  ;       Description:    This routine Handles the YEAR command.
  5700                                  ;
  5701                                  ;-----------------------------------------------------------------------------------------------------------------------
  5702                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5703                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5704                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5705                                                          call    ConPutNewLine                                   ;write newline to console
  5706                                                          ret                                                     ;return
  5707                                  ;-----------------------------------------------------------------------------------------------------------------------
  5708                                  ;
  5709                                  ;       Routine:        ConYearIsLeap
  5710                                  ;
  5711                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5712                                  ;
  5713                                  ;-----------------------------------------------------------------------------------------------------------------------
  5714                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5715                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5716                                                          jecxz   .10                                             ;branch if not leap
  5717                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5718                                                          jmp     .20                                             ;continue
  5719                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5720                                  .20                     ret                                                     ;return
  5721                                  ;-----------------------------------------------------------------------------------------------------------------------
  5722                                  ;
  5723                                  ;       Tables
  5724                                  ;
  5725                                  ;-----------------------------------------------------------------------------------------------------------------------
  5726                                                                                                                  ;---------------------------------------
  5727                                                                                                                  ;  Command Jump Table
  5728                                                                                                                  ;---------------------------------------
  5729                                  tConJmpTbl              equ     $                                               ;command jump table
  5730                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5731                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5732                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5733                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  5734                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  5735                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5736                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5737                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  5738                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  5739                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  5740                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  5741                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  5742                                                          dd      ConDate         - ConCode                       ;date command routine offset
  5743                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  5744                                                          dd      ConFree         - ConCode                       ;free command routine offset
  5745                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  5746                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  5747                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  5748                                                          dd      ConTime         - ConCode                       ;time command routine offset
  5749                                                          dd      ConYear         - ConCode                       ;year command routine offset
  5750                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  5751                                                          dd      ConDay          - ConCode                       ;day command routine offset
  5752                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  5753                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  5754                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  5755                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  5756                                                                                                                  ;---------------------------------------
  5757                                                                                                                  ;  Command Name Table
  5758                                                                                                                  ;---------------------------------------
  5759                                  tConCmdTbl              equ     $                                               ;command name table
  5760                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  5761                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  5762                                                          db      11,"MONTH.NAME",0                               ;month.name command
  5763                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  5764                                                          db      8,"VERSION",0                                   ;version command
  5765                                                          db      8,"WEEKDAY",0                                   ;weekday command
  5766                                                          db      7,"MALLOC",0                                    ;malloc command
  5767                                                          db      7,"MEMORY",0                                    ;memory command
  5768                                                          db      7,"MINUTE",0                                    ;minute command
  5769                                                          db      7,"SECOND",0                                    ;second command
  5770                                                          db      6,"CLEAR",0                                     ;clear command
  5771                                                          db      6,"MONTH",0                                     ;month command
  5772                                                          db      5,"DATE",0                                      ;date command
  5773                                                          db      5,"EXIT",0                                      ;exit command
  5774                                                          db      5,"FREE",0                                      ;free command
  5775                                                          db      5,"HOUR",0                                      ;hour command
  5776                                                          db      5,"INT6",0                                      ;int6 command
  5777                                                          db      5,"QUIT",0                                      ;quit command
  5778                                                          db      5,"TIME",0                                      ;time command
  5779                                                          db      5,"YEAR",0                                      ;year command
  5780                                                          db      4,"CLS",0                                       ;cls command
  5781                                                          db      4,"DAY",0                                       ;day command
  5782                                                          db      4,"MEM",0                                       ;mem command
  5783                                                          db      4,"VER",0                                       ;ver command
  5784                                                          db      0                                               ;end of table
  5785                                  ;-----------------------------------------------------------------------------------------------------------------------
  5786                                  ;
  5787                                  ;       Constants
  5788                                  ;
  5789                                  ;-----------------------------------------------------------------------------------------------------------------------
  5790                                  czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  5791                                  czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  5792                                  czKB                    db      "KB",0                                          ;Kilobytes
  5793                                  czNewLine               db      13,10,0                                         ;new line string
  5794                                  czOK                    db      "ok",13,10,0                                    ;ok string
  5795                                  czPrompt                db      ":",0                                           ;prompt string
  5796                                  czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  5797                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5798                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5799                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  5800                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  5801                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  5802                                  %endif
  5803                                  %ifdef BUILDDISK
  5804                                  ;-----------------------------------------------------------------------------------------------------------------------
  5805                                  ;
  5806                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5807                                  ;
  5808                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5809                                  ;
  5810                                  ;-----------------------------------------------------------------------------------------------------------------------
  5811                                  section                 unused                                                  ;unused disk space
  5812                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5813                                  %endif
  5814                                  ;=======================================================================================================================
  5815                                  ;
  5816                                  ;       End of Program Code
  5817                                  ;
  5818                                  ;=======================================================================================================================
