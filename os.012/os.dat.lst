     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.012
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;                       "date" and "time" and other related commands.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMEM...         Memory Management values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   295                                  ;
   296                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   297                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   298                                  ;
   299                                  ;       0.......        Segment is not present in memory (triggers int 11)
   300                                  ;       1.......        Segment is present in memory
   301                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   302                                  ;       ...0....        Segment is a system segment
   303                                  ;       ...00010                Local Descriptor Table
   304                                  ;       ...00101                Task Gate
   305                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   306                                  ;       ...01100                Call Gate (386)
   307                                  ;       ...01110                Interrupt Gate (386)
   308                                  ;       ...01111                Trap Gate (386)
   309                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   310                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   311                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   315                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   316                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   317                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   318                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   319                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   320                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   321                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       Firmware-Defined Values
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   330                                  ;
   331                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   332                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   336                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   337                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   338                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   339                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   340                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   341                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   342                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   343                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   344                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   345                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Standards-Based Values
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       ASCII                                                                   EASCII...
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   357                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   358                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   359                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   360                                  EASCIISPACE             equ     020h                                            ;space
   361                                  EASCIIUPPERA            equ     041h                                            ;'A'
   362                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   363                                  EASCIILOWERA            equ     061h                                            ;'a'
   364                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   365                                  EASCIITILDE             equ     07Eh                                            ;'~'
   366                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   367                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   368                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   369                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   370                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   371                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   372                                  EASCIICASE              equ     00100000b                                       ;case bit
   373                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ;
   376                                  ;       Operating System Values
   377                                  ;
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  ;
   381                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   382                                  ;
   383                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   384                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   385                                  ;
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   388                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   389                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   390                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   391                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   392                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   393                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  ;       Console Constants                                                       ECON...
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ECONCOLS                equ     80                                              ;columns per row
   398                                  ECONROWS                equ     24                                              ;console rows
   399                                  ECONOIAROW              equ     24                                              ;operator information area row
   400                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   401                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   402                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   403                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   404                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   409                                  EGDTCGA                 equ     020h                                            ;cga video selector
   410                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   411                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   412                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   413                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   414                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   415                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  ;       Keyboard Flags                                                          EKEYF...
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   420                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   421                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   422                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   423                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   424                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   425                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   426                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   427                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   428                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   429                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;       Kernel Constants                                                        EKRN...
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   434                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   435                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   436                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   437                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   438                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;       Memory Management Constants                                             EMEM...
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   447                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   448                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   449                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  ;       Message Identifiers                                                     EMSG...
   452                                  ;-----------------------------------------------------------------------------------------------------------------------
   453                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   454                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   455                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   456                                  ;=======================================================================================================================
   457                                  ;
   458                                  ;       Structures
   459                                  ;
   460                                  ;=======================================================================================================================
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  ;
   463                                  ;       DATETIME
   464                                  ;
   465                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   466                                  ;
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  struc                   DATETIME
   469 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   470 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   471 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   472 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   473 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   474 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   475 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   476 00000007 <res 00000001>          .century                resb    1                                               ;century
   477                                  EDATETIMELEN            equ     ($-.second)
   478                                  endstruc
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  ;
   481                                  ;       MEMBLOCK
   482                                  ;
   483                                  ;       The MEMBLOCK structure defines a memory block.
   484                                  ;
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  struc                   MEMBLOCK
   487 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   488 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   489 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   490 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   491 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   492 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   493 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   494 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   495                                  EMEMBLOCKLEN            equ     ($-.signature)
   496                                  endstruc
   497                                  ;-----------------------------------------------------------------------------------------------------------------------
   498                                  ;
   499                                  ;       MEMROOT
   500                                  ;
   501                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   502                                  ;
   503                                  ;-----------------------------------------------------------------------------------------------------------------------
   504                                  struc                   MEMROOT
   505 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   506 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   507 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   508 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   509 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   510 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   511                                  EMEMROOTLEN             equ     ($-.firstcontig)
   512                                  endstruc
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514                                  ;
   515                                  ;       MQUEUE
   516                                  ;
   517                                  ;       The MQUEUE structure maps memory used for a message queue.
   518                                  ;
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  struc                   MQUEUE
   521 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   522 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   523 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   524                                  endstruc
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  ;
   527                                  ;       OSDATA
   528                                  ;
   529                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   530                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   531                                  ;
   532                                  ;-----------------------------------------------------------------------------------------------------------------------
   533                                  struc                   OSDATA
   534 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   535 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   536 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   537 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   538 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   539 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   540 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   541 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   542 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   543 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   544 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   545 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   546 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   547 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   548 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   549 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   550 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   551 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   552 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   553 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   554 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   555 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   556 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   557 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   558 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   559 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   560 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   561 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   562 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   563 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   564 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   565 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   566 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   567 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   568 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   569 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   570 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   571 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   572 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   573 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   574 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   575 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   576 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   577 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   578 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   579 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   580 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   581 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   582 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   583 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   584 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   585 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   586 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   587 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   588 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   589 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   590 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   591 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   592 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   593 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   594 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   595 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   596 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   597 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   598 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   599 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   600 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   601 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   602 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   603 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   604 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   605 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   606 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   607 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   608 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   609 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   610 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   611 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   612 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   613 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   614 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   615 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   616 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   617 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   618 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   619 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   620 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   621 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   622 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   623 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   624 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   625 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   626 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   627 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   628 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   629 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   630 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   631 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   632 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   633 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   634 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   635                                  ;-----------------------------------------------------------------------------------------------------------------------
   636                                  ;
   637                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   638                                  ;
   639                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   640                                  ;
   641                                  ;-----------------------------------------------------------------------------------------------------------------------
   642                                  ECONDATA                equ     ($)
   643 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   644 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   645 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   646 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   647 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   648 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   649 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   650 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   651 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   652 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   653 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   654 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   655 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   656 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   657 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   658 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   659 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   660 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   661 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   662 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   663 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   664 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   665 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   666 00000931 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   667 00000949 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   668                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   669                                  ;-----------------------------------------------------------------------------------------------------------------------
   670                                  ;
   671                                  ;       End of OS Variables
   672                                  ;
   673                                  ;-----------------------------------------------------------------------------------------------------------------------
   674                                  endstruc
   675                                  ;-----------------------------------------------------------------------------------------------------------------------
   676                                  ;
   677                                  ;       Macros
   678                                  ;
   679                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   680                                  ;
   681                                  ;-----------------------------------------------------------------------------------------------------------------------
   682                                  %macro                  mint    1
   683                                  _%1                     equ     ($-$$) / EX86DESCLEN
   684                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   685                                  %endmacro
   686                                  %macro                  mtrap   1
   687                                  _%1                     equ     ($-$$) / EX86DESCLEN
   688                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   689                                  %endmacro
   690                                  %macro                  menter  1
   691                                  ?%1                     equ     ($-$$)
   692                                  %endmacro
   693                                  %macro                  tsvce   1
   694                                  e%1                     equ     ($-tsvc)/4
   695                                                          dd      %1
   696                                  %endmacro
   697                                  %ifdef BUILDBOOT
   698                                  ;=======================================================================================================================
   699                                  ;
   700                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   701                                  ;
   702                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   703                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   704                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   705                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   706                                  ;
   707                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   708                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   709                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   710                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   711                                  ;       immediately followed by a disk parameter table.
   712                                  ;
   713                                  ;=======================================================================================================================
   714                                                          cpu     8086                                            ;assume minimal CPU
   715                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   716                                                          bits    16                                              ;16-bit code at power-up
   717                                  %ifdef BUILDPREP
   718                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   719                                  %else
   720 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   721                                  %endif
   722                                  ;-----------------------------------------------------------------------------------------------------------------------
   723                                  ;
   724                                  ;       Disk Parameter Table
   725                                  ;
   726                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   727                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   728                                  ;
   729                                  ;-----------------------------------------------------------------------------------------------------------------------
   730 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   731 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   732 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   733 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   734 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   735 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   736 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   737 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   738 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   739                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   740 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   741 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   742 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   743                                  ;
   744                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   745                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   746                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   747                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   748                                  ;       given several possible starting values for CS:IP.
   749                                  ;
   750                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   751 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   752                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   753 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   754 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   755 00000025 B104                                            mov     cl,4                                            ;shift count
   756 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   757 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   758 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   759                                  ;
   760                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   761                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   762                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   763                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   764                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   765                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   766                                  ;
   767 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   768 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   769 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   770 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   771 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   772                                  ;
   773                                  ;       Our boot addressability is now set up according to the following diagram.
   774                                  ;
   775                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   776                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   777                                  ;                               |  256 = 100h bytes                             |
   778                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   779                                  ;                               |  Boot Sector (vstart=0100h)                   |
   780                                  ;                               |  1 sector = 512 = 200h bytes                  |
   781                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   782                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   783                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   784                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   785                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   786                                  ;                               |  2 sectors = 1024 = 400h bytes
   787                                  ;                       009400  +-----------------------------------------------+ DS:1900
   788                                  ;
   789                                  ;       On entry, DL indicates the drive being booted from.
   790                                  ;
   791 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   792                                  ;
   793                                  ;       Compute directory i/o buffer address.
   794                                  ;
   795 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   796 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   797 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   798 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   799                                  ;
   800                                  ;       Compute segment where os.com will be loaded.
   801                                  ;
   802 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   803 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   804 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   805 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   806                                  ;
   807                                  ;       Set the video mode to 80 column, 25 row, text.
   808                                  ;
   809 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   810 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   811                                  ;
   812                                  ;       Write a message to the console so we know we have our addressability established.
   813                                  ;
   814 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   815 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   816                                  ;
   817                                  ;       Initialize the number of directory sectors to search.
   818                                  ;
   819 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   820 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   821                                  ;
   822                                  ;       Compute number of directory sectors and initialize overhead count.
   823                                  ;
   824 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   825 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   826 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   827 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   828                                  ;
   829                                  ;       Compute directory entries per sector.
   830                                  ;
   831 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   832 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   833 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   834                                  ;
   835                                  ;       Compute first logical directory sector and update overhead count.
   836                                  ;
   837 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   838 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   839 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   840 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   841 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   842 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   843                                  ;
   844                                  ;       Read directory sector.
   845                                  ;
   846 0000008E B001                    .30                     mov     al,1                                            ;sector count
   847 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   848 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   849 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   850                                  ;
   851                                  ;       Setup variables to search this directory sector.
   852                                  ;
   853 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   854 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   855 000000A1 7603                                            jna     .40                                             ;no, continue
   856 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   857 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   858 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   859 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   860                                  ;
   861                                  ;       Loop through directory sectors searching for kernel program.
   862                                  ;
   863 000000B1 56                      .50                     push    si                                              ;save kernel name address
   864 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   865 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   866 000000B6 FC                                              cld                                                     ;forward strings
   867 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   868 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   869 000000BA 5E                                              pop     si                                              ;restore kernel name address
   870 000000BB 7418                                            je      .60                                             ;exit loop if found
   871 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   872 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   873 000000C2 75ED                                            jnz     .50                                             ;next entry
   874                                  ;
   875                                  ;       Repeat search if we are not at the end of the directory.
   876                                  ;
   877 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   878 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   879 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   880 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   881 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   882                                  ;
   883                                  ;       If we find the kernel program in the directory, read the FAT.
   884                                  ;
   885 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   886 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   887 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   888 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   889 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   890 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   891                                  ;
   892                                  ;       Get the starting cluster of the kernel program and target address.
   893                                  ;
   894 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   895 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   896                                  ;
   897                                  ;       Read each program cluster into RAM.
   898                                  ;
   899 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   900 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   901 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   902 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   903 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   904 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   905 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   906 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   907 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   908                                  ;
   909                                  ;       Update buffer pointer for next cluster.
   910                                  ;
   911 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   912 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   913 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   914 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   915 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   916                                  ;
   917                                  ;       Compute next cluster number.
   918                                  ;
   919 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   920 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   921 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   922 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   923 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   924 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   925 00000120 83E701                                          and     di,1                                            ;get low bit
   926 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   927 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   928 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   929                                  ;
   930                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   931                                  ;
   932 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   933 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   934 00000130 B104                                            mov     cl,4                                            ;shift count
   935 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   936 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   937 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   938 0000013A 75B2                                            jne     .70                                             ;no, continue
   939                                  ;
   940                                  ;       Transfer control to the operating system program.
   941                                  ;
   942 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   943 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   944 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   945                                  ;
   946                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   947                                  ;
   948 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   949 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   950 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   951 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   952 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   953 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   954 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   955 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   956 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   957 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   958                                  ;
   959                                  ;       Try maxtries times to read sector.
   960                                  ;
   961 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   962 00000160 53                      .10                     push    bx                                              ;save buffer address
   963 00000161 51                                              push    cx                                              ;save retry count
   964 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   965 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   966 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   967 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   968 0000016F 59                                              pop     cx                                              ;restore retry count
   969 00000170 5B                                              pop     bx                                              ;restore buffer address
   970 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   971 00000173 E2EB                                            loop    .10                                             ;retry
   972                                  ;
   973                                  ;       Handle disk error: convert to ASCII and store in error string.
   974                                  ;
   975 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   976 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   977 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   978 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   979 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   980 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   981 00000183 7203                                            jb      .20                                             ;continue if numeral
   982 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   983 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   984 0000018A 7203                                            jb      .30                                             ;continue if numeral
   985 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   986 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   987 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   988 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   989                                  ;
   990                                  ;       Wait for a key press.
   991                                  ;
   992 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   993 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   994 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   995 0000019E FB                                              sti                                                     ;enable maskable interrupts
   996 0000019F F4                                              hlt                                                     ;wait for interrupt
   997 000001A0 EBF6                                            jmp     .10                                             ;repeat
   998                                  ;
   999                                  ;       Reset the system.
  1000                                  ;
  1001 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1002 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1003 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1004 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1005 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1006                                  ;
  1007                                  ;       Display text message.
  1008                                  ;
  1009 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1010 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1011 000001AC 84C0                                            test    al,al                                           ;end of string?
  1012 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1013 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1014 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1015 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1016 000001B6 C3                      BootReturn              ret                                                     ;return
  1017                                  ;-----------------------------------------------------------------------------------------------------------------------
  1018                                  ;
  1019                                  ;       Constants
  1020                                  ;
  1021                                  ;-----------------------------------------------------------------------------------------------------------------------
  1022 000001B7 90                                              align   2
  1023 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1024 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1024 000001C3 4F4D               
  1025 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1025 000001CE 530D0A00           
  1026 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1026 000001DB 7220               
  1027 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1028 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1028 000001E9 6700               
  1029                                  ;-----------------------------------------------------------------------------------------------------------------------
  1030                                  ;
  1031                                  ;       Work Areas
  1032                                  ;
  1033                                  ;-----------------------------------------------------------------------------------------------------------------------
  1034 000001EB 90                                              align   2
  1035 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1036 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1037 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1038 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1039 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1040                                  wwReadCountCommand      equ     $                                               ;read count and command
  1041 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1042 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1043                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1044 000001F8 00                      wbDrive                 db      0                                               ;drive
  1045 000001F9 00                      wbHead                  db      0                                               ;head
  1046                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1047 000001FA 00                                              db      0                                               ;sector
  1048 000001FB 00                      wbTrack                 db      0                                               ;track
  1049 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1050 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1051                                  %endif
  1052                                  %ifdef BUILDPREP
  1053                                  ;=======================================================================================================================
  1054                                  ;
  1055                                  ;       Diskette Preparation Code
  1056                                  ;
  1057                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1058                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1059                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1060                                  ;
  1061                                  ;=======================================================================================================================
  1062                                  ;
  1063                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1064                                  ;
  1065                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1066                                                          call    BootPrint                                       ;display message
  1067                                  ;
  1068                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1069                                  ;
  1070                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1071                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1072                                                          jnz     .20                                             ;continue if key pressed
  1073                                                          sti                                                     ;enable interrupts
  1074                                                          hlt                                                     ;wait for interrupt
  1075                                                          jmp     .10                                             ;repeat
  1076                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1077                                                          je      .30                                             ;yes, branch
  1078                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1079                                                          jne     .10                                             ;no, repeat
  1080                                                          jmp     .120                                            ;yes, exit program
  1081                                  ;
  1082                                  ;       Display writing-sector message and patch the JMP instruction.
  1083                                  ;
  1084                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1085                                                          call    BootPrint                                       ;display message
  1086                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1087                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1088                                                          mov     [bx],ax                                         ;update the JMP instruction
  1089                                  ;
  1090                                  ;       Try to read the boot sector.
  1091                                  ;
  1092                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1093                                  .40                     push    cx                                              ;save remaining tries
  1094                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1095                                                          mov     dx,0                                            ;head zero, drive zero
  1096                                                          mov     cx,1                                            ;track zero, sector one
  1097                                                          mov     al,1                                            ;one sector
  1098                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1099                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1100                                                          pop     cx                                              ;restore remaining retries
  1101                                                          jnc     .50                                             ;skip ahead if successful
  1102                                                          loop    .40                                             ;try again
  1103                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1104                                                          jmp     .70                                             ;branch to error routine
  1105                                  ;
  1106                                  ;       Copy diskette parms from input buffer to output buffer.
  1107                                  ;
  1108                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1109                                                          add     si,11                                           ;skip over JMP and system ID
  1110                                                          mov     di,Boot                                         ;output buffer address
  1111                                                          add     di,11                                           ;skip over JMP and system ID
  1112                                                          mov     cx,19                                           ;length of diskette parameters
  1113                                                          cld                                                     ;forward string copies
  1114                                                          rep     movsb                                           ;copy diskette parameters
  1115                                  ;
  1116                                  ;       Try to write boot sector to diskette.
  1117                                  ;
  1118                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1119                                  .60                     push    cx                                              ;save remaining tries
  1120                                                          mov     bx,Boot                                         ;output buffer address
  1121                                                          mov     dx,0                                            ;head zero, drive zero
  1122                                                          mov     cx,1                                            ;track zero, sector one
  1123                                                          mov     al,1                                            ;one sector
  1124                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1125                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1126                                                          pop     cx                                              ;restore remaining retries
  1127                                                          jnc     .100                                            ;skip ahead if successful
  1128                                                          loop    .60                                             ;try again
  1129                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1130                                  ;
  1131                                  ;       Convert the error code to ASCII and display the error message.
  1132                                  ;
  1133                                  .70                     push    ax                                              ;save error code
  1134                                                          mov     al,ah                                           ;copy error code
  1135                                                          mov     ah,0                                            ;AX = error code
  1136                                                          mov     dl,10h                                          ;hexadecimal divisor
  1137                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1138                                                          or      ax,03030h                                       ;add ASCII zone digits
  1139                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1140                                                          jb      .80                                             ;yes, continue
  1141                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1142                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1143                                                          jb      .90                                             ;yes, continue
  1144                                                          add     al,7                                            ;no, make ASCII
  1145                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1146                                                          call    BootPrint                                       ;write error message
  1147                                                          pop     ax                                              ;restore error code
  1148                                  ;
  1149                                  ;       Display the completion message.
  1150                                  ;
  1151                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1152                                                          mov     al,ah                                           ;BIOS return code
  1153                                                          cmp     al,0                                            ;success?
  1154                                                          je      .110                                            ;yes, continue
  1155                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1156                                                          cmp     al,1                                            ;disk parameter error?
  1157                                                          je      .110                                            ;yes, continue
  1158                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1159                                                          cmp     al,2                                            ;address mark not found?
  1160                                                          je      .110                                            ;yes, continue
  1161                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1162                                                          cmp     al,3                                            ;protected disk?
  1163                                                          je      .110                                            ;yes, continue
  1164                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1165                                                          cmp     al,6                                            ;diskette removed?
  1166                                                          je      .110                                            ;yes, continue
  1167                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1168                                                          cmp     al,80H                                          ;drive timed out?
  1169                                                          je      .110                                            ;yes, continue
  1170                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1171                                  .110                    call    BootPrint                                       ;display result message
  1172                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1173                                                          int     021h                                            ;terminate DOS program
  1174                                                          ret                                                     ;return (should not execute)
  1175                                  ;-----------------------------------------------------------------------------------------------------------------------
  1176                                  ;
  1177                                  ;       Diskette Preparation Messages
  1178                                  ;
  1179                                  ;-----------------------------------------------------------------------------------------------------------------------
  1180                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1181                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1182                                                          db      13,10
  1183                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1184                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1185                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1186                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1187                                                          db      13,10,0
  1188                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1189                                                          db      13,10,0
  1190                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1191                                                          db      13,10,0
  1192                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1193                                                          db      13,10,0
  1194                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1195                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1196                                                          db      13,10,0
  1197                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1198                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1199                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1200                                                          db      13,10,"and retry."
  1201                                                          db      13,10,0
  1202                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1203                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1204                                                          db      13,10,"using another diskette."
  1205                                                          db      13,10,0
  1206                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1207                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1208                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1209                                                          db      13,10,0
  1210                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1211                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1212                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1213                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1214                                                          db      13,10,"is properly inserted in the diskette drive."
  1215                                                          db      13,10,0
  1216                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1217                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1218                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1219                                                          db      13,10,0
  1220                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1221                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1222                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1223                                                          db      13,10,0
  1224                                  wcPrepInBuf             equ     $
  1225                                  %endif
  1226                                  %ifdef BUILDDISK
  1227                                  ;=======================================================================================================================
  1228                                  ;
  1229                                  ;       File Allocation Tables
  1230                                  ;
  1231                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1232                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1233                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1234                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1235                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1236                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1237                                  ;       the last cluster in the chain.
  1238                                  ;
  1239                                  ;       Every three bytes encode two FAT entries as follows:
  1240                                  ;
  1241                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1242                                  ;
  1243                                  ;=======================================================================================================================
  1244                                  ;-----------------------------------------------------------------------------------------------------------------------
  1245                                  ;
  1246                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1247                                  ;
  1248                                  ;-----------------------------------------------------------------------------------------------------------------------
  1249                                  section                 fat1                                                    ;first copy of FAT
  1250                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1251                                                          db      005h,060h,000h, 007h,080h,000h
  1252                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1253                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1254                                                          db      011h,020h,001h, 013h,040h,001h
  1255                                                          db      015h,060h,001h, 017h,080h,001h
  1256                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1257                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1258                                                          db      021h,020h,002h, 023h,040h,002h
  1259                                                          db      025h,060h,002h, 027h,080h,002h
  1260                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1261                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1262                                  ;-----------------------------------------------------------------------------------------------------------------------
  1263                                  ;
  1264                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1265                                  ;
  1266                                  ;-----------------------------------------------------------------------------------------------------------------------
  1267                                  section                 fat2                                                    ;second copy of FAT
  1268                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1269                                                          db      005h,060h,000h, 007h,080h,000h
  1270                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1271                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1272                                                          db      011h,020h,001h, 013h,040h,001h
  1273                                                          db      015h,060h,001h, 017h,080h,001h
  1274                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1275                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1276                                                          db      021h,020h,002h, 023h,040h,002h
  1277                                                          db      025h,060h,002h, 027h,080h,002h
  1278                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1279                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1280                                  ;-----------------------------------------------------------------------------------------------------------------------
  1281                                  ;
  1282                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1283                                  ;
  1284                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1285                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1286                                  ;       copy.
  1287                                  ;
  1288                                  ;-----------------------------------------------------------------------------------------------------------------------
  1289                                  section                 dir                                                     ;diskette directory
  1290                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1291                                                          db      020h                                            ;attribute (archive bit set)
  1292                                                          times   10 db 0                                         ;unused
  1293                                                          dw      0h                                              ;time
  1294                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1295                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1296                                                          dw      2                                               ;first cluster
  1297                                                          dd      05400h                                          ;file size
  1298                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1299                                  %endif
  1300                                  %ifdef BUILDCOM
  1301                                  ;=======================================================================================================================
  1302                                  ;
  1303                                  ;       OS.COM
  1304                                  ;
  1305                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1306                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1307                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1308                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1309                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1310                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1311                                  ;
  1312                                  ;       Our loader addressability is set up according to the following diagram.
  1313                                  ;
  1314                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1315                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1316                                  ;                               |  256 = 100h bytes                             |
  1317                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1318                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1319                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1320                                  ;                       007e00  +-----------------------------------------------+
  1321                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1322                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1323                                  ;                               |                                               |
  1324                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1325                                  ;                               |                                               |
  1326                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1327                                  ;                               |  Loader Code                                  |
  1328                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1329                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1330                                  ;
  1331                                  ;=======================================================================================================================
  1332                                  ;-----------------------------------------------------------------------------------------------------------------------
  1333                                  ;
  1334                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1335                                  ;
  1336                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1337                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1338                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1339                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1340                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1341                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1342                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1343                                  ;       registers.
  1344                                  ;
  1345                                  ;-----------------------------------------------------------------------------------------------------------------------
  1346                                                          cpu     8086                                            ;assume minimal CPU
  1347                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1348                                                          bits    16                                              ;this is 16-bit code
  1349                                  Loader                  push    cs                                              ;use the code segment
  1350                                                          pop     ds                                              ;...as our data segment
  1351                                                          push    cs                                              ;use the code segment
  1352                                                          pop     es                                              ;...as our extra segment
  1353                                  ;
  1354                                  ;       Write a message to the console so we know we have our addressability established.
  1355                                  ;
  1356                                                          mov     si,czStartingMsg                                ;starting message
  1357                                                          call    PutTTYString                                    ;display loader message
  1358                                  ;
  1359                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1360                                  ;
  1361                                                          call    GetCPUType                                      ;AL = cpu type
  1362                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1363                                                          cmp     al,3                                            ;80386+?
  1364                                                          jb      LoaderExit                                      ;no, exit with error message
  1365                                                          cpu     386                                             ;allow 80386 instructions
  1366                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1367                                                          call    PutTTYString                                    ;display message
  1368                                  ;
  1369                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1370                                  ;
  1371                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1372                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1373                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1374                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1375                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1376                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1377                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1378                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1379                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1380                                                          call    PutTTYString                                    ;display message
  1381                                  ;
  1382                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1383                                  ;
  1384                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1385                                                          pop     es                                              ;... as target segment
  1386                                                          xor     di,di                                           ;ES:DI = target address
  1387                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1388                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1389                                                          cld                                                     ;forward strings
  1390                                                          rep     movsb                                           ;copy kernel image
  1391                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1392                                                          call    PutTTYString                                    ;display message
  1393                                  ;
  1394                                  ;       Switch to protected mode.
  1395                                  ;
  1396                                                          xor     si,si                                           ;ES:SI = gdt addr
  1397                                                          mov     ss,si                                           ;protected mode ss
  1398                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1399                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1400                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1401                                                          mov     dx,001Fh                                        ;outer delay loop count
  1402                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1403                                                          loop    $                                               ;wait out pending interrupts
  1404                                                          dec     dx                                              ;restore outer loop count
  1405                                                          jnz     .10                                             ;continue outer loop
  1406                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1407                                  ;
  1408                                  ;       Enable hardware and maskable interrupts.
  1409                                  ;
  1410                                                          xor     al,al                                           ;enable all registers code
  1411                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1412                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1413                                                          sti                                                     ;enable maskable interrupts
  1414                                  ;
  1415                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1416                                  ;
  1417                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1418                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1419                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;       Routine:        LoaderExit
  1423                                  ;
  1424                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1425                                  ;
  1426                                  ;       In:             DS:SI   string address
  1427                                  ;
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429                                  LoaderExit              call    PutTTYString                                    ;display error message
  1430                                  ;
  1431                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1432                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1433                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1434                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1435                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1436                                  ;
  1437                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1438                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1439                                                          jnz     .40                                             ;exit if key pressed
  1440                                                          sti                                                     ;enable maskable interrupts
  1441                                                          hlt                                                     ;wait for interrupt
  1442                                                          jmp     .30                                             ;repeat until keypress
  1443                                  ;
  1444                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1445                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1446                                  ;       HLT until the system resets.
  1447                                  ;
  1448                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1449                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1450                                  .50                     sti                                                     ;enable maskable interrupts
  1451                                                          hlt                                                     ;stop until reset, int, nmi
  1452                                                          jmp     .50                                             ;loop until restart kicks in
  1453                                  ;-----------------------------------------------------------------------------------------------------------------------
  1454                                  ;
  1455                                  ;       Routine:        GetCPUType
  1456                                  ;
  1457                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1458                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1459                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1460                                  ;
  1461                                  ;       Out:            AX      0 = 808x, v20, etc.
  1462                                  ;                               1 = 80186
  1463                                  ;                               2 = 80286
  1464                                  ;                               3 = 80386
  1465                                  ;
  1466                                  ;-----------------------------------------------------------------------------------------------------------------------
  1467                                  GetCPUType              mov     al,1                                            ;AL = 1
  1468                                                          mov     cl,32                                           ;shift count
  1469                                                          shr     al,cl                                           ;try a 32-bit shift
  1470                                                          or      al,al                                           ;did the shift happen?
  1471                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1472                                                          cpu     186
  1473                                                          push    sp                                              ;save stack pointer
  1474                                                          pop     cx                                              ;...into cx
  1475                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1476                                                          jne     .10                                             ;yes, cpu is 80186
  1477                                                          cpu     286
  1478                                                          inc     ax                                              ;AX = 2
  1479                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1480                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1481                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1482                                                          jz      .10                                             ;yes, cpu is 80286
  1483                                                          inc     ax                                              ;AX = 3
  1484                                  .10                     ret                                                     ;return
  1485                                  ;-----------------------------------------------------------------------------------------------------------------------
  1486                                  ;
  1487                                  ;       Routine:        PutTTYString
  1488                                  ;
  1489                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1490                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1491                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1492                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1493                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1494                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1495                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1496                                  ;                       to LODSB is not needed.
  1497                                  ;
  1498                                  ;       In:             DS:SI   address of string
  1499                                  ;
  1500                                  ;       Out:            DF      0
  1501                                  ;                       ZF      1
  1502                                  ;                       AL      0
  1503                                  ;
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                  PutTTYString            cld                                                     ;forward strings
  1506                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1507                                                          test    al,al                                           ;end of string?
  1508                                                          jz      .20                                             ;... yes, exit our loop
  1509                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1510                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1511                                                          jmp     .10                                             ;repeat until done
  1512                                  .20                     ret                                                     ;return
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                  ;
  1515                                  ;       Loader Data
  1516                                  ;
  1517                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1518                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1519                                  ;
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                                          align   2
  1522                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1523                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1524                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1525                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1526                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1527                                                          db      "Please press any key to restart the computer.",13,10,0
  1528                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1529                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1530                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1531                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1532                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1533                                  ;=======================================================================================================================
  1534                                  ;
  1535                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1536                                  ;
  1537                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1538                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1539                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1540                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1541                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1542                                  ;
  1543                                  ;=======================================================================================================================
  1544                                  ;=======================================================================================================================
  1545                                  ;
  1546                                  ;       Kernel Tables
  1547                                  ;
  1548                                  ;=======================================================================================================================
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  ;
  1551                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1552                                  ;
  1553                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1554                                  ;       first descriptor must be all nulls.
  1555                                  ;
  1556                                  ;       6   5         4         3         2         1         0
  1557                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1558                                  ;       ----------------------------------------------------------------
  1559                                  ;       h......hffffmmmma......ab......................bn..............n
  1560                                  ;       00000000                        all areas have base addresses below 2^24
  1561                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1562                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1563                                  ;                   1001                present, ring-0, selector
  1564                                  ;
  1565                                  ;       h...h   hi-order base address (bits 24-31)
  1566                                  ;       ffff    flags
  1567                                  ;       mmmm    hi-order limit (bits 16-19)
  1568                                  ;       a...a   access
  1569                                  ;       b...b   lo-order base address (bits 0-23)
  1570                                  ;       n...n   lo-order limit (bits 0-15)
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                  section                 gdt                                                     ;global descriptor table
  1574                                                          dq      0000000000000000h                               ;00 required null selector
  1575                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1576                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1577                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1578                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1579                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1580                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1581                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1582                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1583                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1584                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1585                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1586                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1587                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1588                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1589                                  ;-----------------------------------------------------------------------------------------------------------------------
  1590                                  ;
  1591                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1592                                  ;
  1593                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1594                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1595                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1596                                  ;
  1597                                  ;       6   5         4         3         2         1         0
  1598                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1599                                  ;       ----------------------------------------------------------------
  1600                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1601                                  ;
  1602                                  ;       h...h   high-order offset (bits 16-31)
  1603                                  ;       P       present (0=unused interrupt)
  1604                                  ;       zz      descriptor privilege level
  1605                                  ;       S       storage segment (must be zero for IDT)
  1606                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1607                                  ;       S...S   handling code selector in GDT
  1608                                  ;       l...l   lo-order offset (bits 0-15)
  1609                                  ;
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                  section                 idt                                                     ;interrupt descriptor table
  1612                                                          mint    dividebyzero                                    ;00 divide by zero
  1613                                                          mint    singlestep                                      ;01 single step
  1614                                                          mint    nmi                                             ;02 non-maskable
  1615                                                          mint    break                                           ;03 break
  1616                                                          mint    into                                            ;04 into
  1617                                                          mint    bounds                                          ;05 bounds
  1618                                                          mint    badopcode                                       ;06 bad op code
  1619                                                          mint    nocoproc                                        ;07 no coprocessor
  1620                                                          mint    doublefault                                     ;08 double-fault
  1621                                                          mint    operand                                         ;09 operand
  1622                                                          mint    badtss                                          ;0a bad TSS
  1623                                                          mint    notpresent                                      ;0b not-present
  1624                                                          mint    stacklimit                                      ;0c stack limit
  1625                                                          mint    protection                                      ;0d general protection fault
  1626                                                          mint    int14                                           ;0e (reserved)
  1627                                                          mint    int15                                           ;0f (reserved)
  1628                                                          mint    coproccalc                                      ;10 (reserved)
  1629                                                          mint    int17                                           ;11 (reserved)
  1630                                                          mint    int18                                           ;12 (reserved)
  1631                                                          mint    int19                                           ;13 (reserved)
  1632                                                          mint    int20                                           ;14 (reserved)
  1633                                                          mint    int21                                           ;15 (reserved)
  1634                                                          mint    int22                                           ;16 (reserved)
  1635                                                          mint    int23                                           ;17 (reserved)
  1636                                                          mint    int24                                           ;18 (reserved)
  1637                                                          mint    int25                                           ;19 (reserved)
  1638                                                          mint    int26                                           ;1a (reserved)
  1639                                                          mint    int27                                           ;1b (reserved)
  1640                                                          mint    int28                                           ;1c (reserved)
  1641                                                          mint    int29                                           ;1d (reserved)
  1642                                                          mint    int30                                           ;1e (reserved)
  1643                                                          mint    int31                                           ;1f (reserved)
  1644                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1645                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1646                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1647                                                          mtrap   com2                                            ;23 IRQ3 com2
  1648                                                          mtrap   com1                                            ;24 IRQ4 com1
  1649                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1650                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1651                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1652                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1653                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1654                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1655                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1656                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1657                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1658                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1659                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1660                                                          mtrap   svc                                             ;30 OS services
  1661                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1662                                  ;=======================================================================================================================
  1663                                  ;
  1664                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1665                                  ;
  1666                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1667                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1668                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1669                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1670                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1671                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1672                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1673                                  ;
  1674                                  ;=======================================================================================================================
  1675                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1676                                                          cpu     386                                             ;allow 80386 instructions
  1677                                                          bits    32                                              ;this is 32-bit code
  1678                                  ;=======================================================================================================================
  1679                                  ;
  1680                                  ;       CPU Interrupt Handlers
  1681                                  ;
  1682                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1683                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1684                                  ;
  1685                                  ;=======================================================================================================================
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT0    Divide By Zero
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  dividebyzero                                    ;divide by zero
  1692                                                          push    0                                               ;store interrupt nbr
  1693                                                          push    czIntDivideByZero                               ;store message offset
  1694                                                          jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT1    Single Step
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  singlestep                                      ;single step
  1701                                                          push    1                                               ;store interrupt nbr
  1702                                                          push    czIntSingleStep                                 ;store message offset
  1703                                                          jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT2    Non-Maskable Interrupt
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  nmi                                             ;non-maskable
  1710                                                          push    2                                               ;store interrupt nbr
  1711                                                          push    czIntNonMaskable                                ;store message offset
  1712                                                          jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT3    Break
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  break                                           ;break
  1719                                                          push    3                                               ;store interrupt nbr
  1720                                                          push    czIntBreak                                      ;store message offset
  1721                                                          jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT4    Into
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  into                                            ;into
  1728                                                          push    4                                               ;store interrupt nbr
  1729                                                          push    czIntInto                                       ;store message offset
  1730                                                          jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT5    Bounds
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  bounds                                          ;bounds
  1737                                                          push    5                                               ;store interrupt nbr
  1738                                                          push    czIntBounds                                     ;store message offset
  1739                                                          jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT6    Bad Operation Code
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  badopcode                                       ;bad opcode interrupt
  1746                                                          push    6                                               ;store interrupt nbr
  1747                                                          push    czIntBadOpCode                                  ;store message offset
  1748                                                          jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT7    No Coprocessor
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1755                                                          push    7                                               ;store interrupt nbr
  1756                                                          push    czIntNoCoprocessor                              ;store message offset
  1757                                                          jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT8    Double Fault
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  doublefault                                     ;doublefault interrupt
  1764                                                          push    8                                               ;store interrupt nbr
  1765                                                          push    czIntDoubleFault                                ;store message offset
  1766                                                          jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT9    Operand
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  operand                                         ;operand interrupt
  1773                                                          push    9                                               ;store interrupt nbr
  1774                                                          push    czIntOperand                                    ;store message offset
  1775                                                          jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT10   Bad Task State Segment
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  badtss                                          ;bad TSS interrupt
  1782                                                          push    10                                              ;store interrupt nbr
  1783                                                          push    czIntBadTSS                                     ;store message offset
  1784                                                          jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT11   Not Present
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  notpresent                                      ;not present interrupt
  1791                                                          push    11                                              ;store interrupt nbr
  1792                                                          push    czIntNotPresent                                 ;store message offset
  1793                                                          jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT12   Stack Limit
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  stacklimit                                      ;stack limit interrupt
  1800                                                          push    12                                              ;store interrupt nbr
  1801                                                          push    czIntStackLimit                                 ;store message offset
  1802                                                          jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT13   General Protection Fault
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  protection                                      ;protection fault interrupt
  1809                                                          push    13                                              ;store interrupt nbr
  1810                                                          push    czIntProtection                                 ;store message offset
  1811                                                          jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT14   Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  int14                                           ;(reserved)
  1818                                                          push    14                                              ;store interrupt nbr
  1819                                                          push    czIntReserved                                   ;store message offset
  1820                                                          jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT15   Reserved
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  int15                                           ;(reserved)
  1827                                                          push    15                                              ;store interrupt nbr
  1828                                                          push    czIntReserved                                   ;store message offset
  1829                                                          jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT16   Coprocessor Calculation
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  coproccalc                                      ;coprocessor calculation
  1836                                                          push    16                                              ;store interrupt nbr
  1837                                                          push    czIntCoprocessorCalc                            ;store message offset
  1838                                                          jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT17   Reserved
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  int17                                           ;(reserved)
  1845                                                          push    17                                              ;store interrupt nbr
  1846                                                          push    czIntReserved                                   ;store message offset
  1847                                                          jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT18   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int18                                           ;(reserved)
  1854                                                          push    18                                              ;store interrupt nbr
  1855                                                          push    czIntReserved                                   ;store message offset
  1856                                                          jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT19   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int19                                           ;(reserved)
  1863                                                          push    19                                              ;store interrupt nbr
  1864                                                          push    czIntReserved                                   ;store message offset
  1865                                                          jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       INT20   Reserved
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                                          menter  int20                                           ;(reserved)
  1872                                                          push    20                                              ;store interrupt nbr
  1873                                                          push    czIntReserved                                   ;store message offset
  1874                                                          jmp     ReportInterrupt                                 ;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       INT21   Reserved
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                                          menter  int21                                           ;(reserved)
  1881                                                          push    21                                              ;store interrupt nbr
  1882                                                          push    czIntReserved                                   ;store message offset
  1883                                                          jmp     ReportInterrupt                                 ;report interrupt
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;       INT22   Reserved
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                                          menter  int22                                           ;(reserved)
  1890                                                          push    22                                              ;store interrupt nbr
  1891                                                          push    czIntReserved                                   ;store message offset
  1892                                                          jmp     ReportInterrupt                                 ;report interrupt
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ;
  1895                                  ;       INT23   Reserved
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                                          menter  int23                                           ;(reserved)
  1899                                                          push    23                                              ;store interrupt nbr
  1900                                                          push    czIntReserved                                   ;store message offset
  1901                                                          jmp     ReportInterrupt                                 ;report interrupt
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;       INT24   Reserved
  1905                                  ;
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                                          menter  int24                                           ;(reserved)
  1908                                                          push    24                                              ;store interrupt nbr
  1909                                                          push    czIntReserved                                   ;store message offset
  1910                                                          jmp     ReportInterrupt                                 ;report interrupt
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  ;
  1913                                  ;       INT25   Reserved
  1914                                  ;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                                          menter  int25                                           ;(reserved)
  1917                                                          push    25                                              ;store interrupt nbr
  1918                                                          push    czIntReserved                                   ;store message offset
  1919                                                          jmp     ReportInterrupt                                 ;report interrupt
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;       INT26   Reserved
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                                          menter  int26                                           ;(reserved)
  1926                                                          push    26                                              ;store interrupt nbr
  1927                                                          push    czIntReserved                                   ;store message offset
  1928                                                          jmp     ReportInterrupt                                 ;report interrupt
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       INT27   Reserved
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  int27                                           ;(reserved)
  1935                                                          push    27                                              ;store interrupt nbr
  1936                                                          push    czIntReserved                                   ;store message offset
  1937                                                          jmp     ReportInterrupt                                 ;report interrupt
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       INT28   Reserved
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  int28                                           ;(reserved)
  1944                                                          push    28                                              ;store interrupt nbr
  1945                                                          push    czIntReserved                                   ;store message offset
  1946                                                          jmp     ReportInterrupt                                 ;report interrupt
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;       INT29   Reserved
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                                          menter  int29                                           ;(reserved)
  1953                                                          push    29                                              ;store interrupt nbr
  1954                                                          push    czIntReserved                                   ;store message offset
  1955                                                          jmp     ReportInterrupt                                 ;report interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT30   Reserved
  1959                                  ;
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                                          menter  int30                                           ;(reserved)
  1962                                                          push    30                                              ;store interrupt nbr
  1963                                                          push    czIntReserved                                   ;store message offset
  1964                                                          jmp     ReportInterrupt                                 ;report interrupt
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;       INT31   Reserved
  1968                                  ;
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                                          menter  int31                                           ;(reserved)
  1971                                                          push    31                                              ;store interrupt nbr
  1972                                                          push    czIntReserved                                   ;store message offset
  1973                                                          jmp     ReportInterrupt                                 ;report interrupt
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  ;
  1976                                  ;       Routine:        ReportInterrupt
  1977                                  ;
  1978                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1979                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1980                                  ;
  1981                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1982                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1983                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1984                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1985                                  ;                       [esp+0]         error message address                   stored by push instructions
  1986                                  ;
  1987                                  ;       Out:            N/A             This routine does not exit.
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1991                                                          push    es                                              ;save ES at time of interrupt
  1992                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1993                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1994                                  ;
  1995                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1996                                  ;
  1997                                  ;                       [ebp+56]        eflags
  1998                                  ;                       [ebp+52]        cs
  1999                                  ;                       [ebp+48]        eip
  2000                                  ;                       [ebp+44]        interrupt number (0-31)
  2001                                  ;                       [ebp+40]        error message address
  2002                                  ;                       [ebp+36]        ds
  2003                                  ;                       [ebp+32]        es
  2004                                  ;                       [ebp+28]        eax
  2005                                  ;                       [ebp+24]        ecx
  2006                                  ;                       [ebp+20]        edx
  2007                                  ;                       [ebp+16]        ebx
  2008                                  ;                       [ebp+12]        esp
  2009                                  ;                       [ebp+8]         ebp
  2010                                  ;                       [ebp+4]         esi
  2011                                  ;                       [ebp+0]         edi
  2012                                  ;
  2013                                                          push    cs                                              ;load code selector ...
  2014                                                          pop     ds                                              ;... into DS
  2015                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2016                                                          pop     es                                              ;... into ES
  2017                                  ;
  2018                                  ;       Display the interrupt report boundary box
  2019                                  ;
  2020                                                          mov     cl,13                                           ;column
  2021                                                          mov     ch,6                                            ;row
  2022                                                          mov     dl,50                                           ;width
  2023                                                          mov     dh,8                                            ;height
  2024                                                          mov     bh,07h                                          ;attribute
  2025                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2026                                  ;
  2027                                  ;       Display the report header
  2028                                  ;
  2029                                                          mov     cl,15                                           ;column
  2030                                                          mov     ch,7                                            ;row
  2031                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2032                                                          call    SetConsoleString                                ;draw text string
  2033                                  ;
  2034                                  ;       Display the interrupt description label
  2035                                  ;
  2036                                                          mov     cl,15                                           ;column
  2037                                                          mov     ch,8                                            ;row
  2038                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2039                                                          call    SetConsoleString                                ;draw text string
  2040                                  ;
  2041                                  ;       Display the interrupt number
  2042                                  ;
  2043                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2044                                                          mov     cl,26                                           ;column
  2045                                                          mov     ch,8                                            ;row
  2046                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2047                                  ;
  2048                                  ;       Display the interrupt name
  2049                                  ;
  2050                                                          mov     cl,29                                           ;column
  2051                                                          mov     ch,8                                            ;row
  2052                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2053                                                          call    SetConsoleString                                ;display interrupt description
  2054                                  ;
  2055                                  ;       Display the register values header
  2056                                  ;
  2057                                                          mov     cl,15                                           ;column
  2058                                                          mov     ch,10                                           ;row
  2059                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2060                                                          call    SetConsoleString                                ;draw text string
  2061                                  ;
  2062                                  ;       Display the EAX register label and value
  2063                                  ;
  2064                                                          mov     cl,15                                           ;column
  2065                                                          mov     ch,11                                           ;row
  2066                                                          mov     esi,czIntEAX                                    ;register EAX label
  2067                                                          call    SetConsoleString                                ;draw label
  2068                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2069                                                          mov     cl,19                                           ;column
  2070                                                          mov     ch,11                                           ;row
  2071                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2072                                  ;
  2073                                  ;       Display the ECX register label and value
  2074                                  ;
  2075                                                          mov     cl,15                                           ;column
  2076                                                          mov     ch,12                                           ;row
  2077                                                          mov     esi,czIntECX                                    ;label
  2078                                                          call    SetConsoleString                                ;draw label
  2079                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2080                                                          mov     cl,19                                           ;column
  2081                                                          mov     ch,12                                           ;row
  2082                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2083                                  ;
  2084                                  ;       Display the EDX register label and value
  2085                                  ;
  2086                                                          mov     cl,15                                           ;column
  2087                                                          mov     ch,13                                           ;row
  2088                                                          mov     esi,czIntEDX                                    ;label
  2089                                                          call    SetConsoleString                                ;draw label
  2090                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2091                                                          mov     cl,19                                           ;column
  2092                                                          mov     ch,13                                           ;row
  2093                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2094                                  ;
  2095                                  ;       Display the EBX register label and value
  2096                                  ;
  2097                                                          mov     cl,15                                           ;column
  2098                                                          mov     ch,14                                           ;row
  2099                                                          mov     esi,czIntEBX                                    ;label
  2100                                                          call    SetConsoleString                                ;draw label
  2101                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2102                                                          mov     cl,19                                           ;column
  2103                                                          mov     ch,14                                           ;row
  2104                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2105                                  ;
  2106                                  ;       Display the ESI register label and value
  2107                                  ;
  2108                                                          mov     cl,29                                           ;column
  2109                                                          mov     ch,11                                           ;row
  2110                                                          mov     esi,czIntESI                                    ;label
  2111                                                          call    SetConsoleString                                ;draw label
  2112                                                          mov     eax,[ebp+4]                                     ;ESI
  2113                                                          mov     cl,33                                           ;column
  2114                                                          mov     ch,11                                           ;row
  2115                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2116                                  ;
  2117                                  ;       Display the EDI register label and value
  2118                                  ;
  2119                                                          mov     cl,29                                           ;column
  2120                                                          mov     ch,12                                           ;row
  2121                                                          mov     esi,czIntEDI                                    ;label
  2122                                                          call    SetConsoleString                                ;draw label
  2123                                                          mov     eax,[ebp+0]                                     ;EDI
  2124                                                          mov     cl,33                                           ;column
  2125                                                          mov     ch,12                                           ;row
  2126                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2127                                  ;
  2128                                  ;       Display the EBP register label and value
  2129                                  ;
  2130                                                          mov     cl,29                                           ;column
  2131                                                          mov     ch,13                                           ;row
  2132                                                          mov     esi,czIntEBP                                    ;label
  2133                                                          call    SetConsoleString                                ;draw label
  2134                                                          mov     eax,[ebp+8]                                     ;EBP
  2135                                                          mov     cl,33                                           ;column
  2136                                                          mov     ch,13                                           ;row
  2137                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2138                                  ;
  2139                                  ;       Display the DS register label and value
  2140                                  ;
  2141                                                          mov     cl,42                                           ;column
  2142                                                          mov     ch,11                                           ;row
  2143                                                          mov     esi,czIntDS                                     ;label
  2144                                                          call    SetConsoleString                                ;draw label
  2145                                                          xor     eax,eax                                         ;zero register
  2146                                                          mov     ax,[ebp+36]                                     ;DS
  2147                                                          mov     cl,46                                           ;column
  2148                                                          mov     ch,11                                           ;row
  2149                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2150                                  ;
  2151                                  ;       Display the ES register label and value
  2152                                  ;
  2153                                                          mov     cl,42                                           ;column
  2154                                                          mov     ch,12                                           ;row
  2155                                                          mov     esi,czIntES                                     ;label
  2156                                                          call    SetConsoleString                                ;draw label
  2157                                                          xor     eax,eax                                         ;zero register
  2158                                                          mov     ax,[ebp+32]                                     ;ES
  2159                                                          mov     cl,46                                           ;column
  2160                                                          mov     ch,12                                           ;row
  2161                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2162                                  ;
  2163                                  ;       Display the SS register label and value
  2164                                  ;
  2165                                                          mov     cl,42                                           ;column
  2166                                                          mov     ch,13                                           ;row
  2167                                                          mov     esi,czIntSS                                     ;label
  2168                                                          call    SetConsoleString                                ;draw label
  2169                                                          xor     eax,eax                                         ;zero register
  2170                                                          mov     ax,ss                                           ;SS
  2171                                                          mov     cl,46                                           ;column
  2172                                                          mov     ch,13                                           ;row
  2173                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2174                                  ;
  2175                                  ;       Display the CS register lable and value
  2176                                  ;
  2177                                                          mov     cl,42                                           ;column
  2178                                                          mov     ch,14                                           ;row
  2179                                                          mov     esi,czIntCS                                     ;label
  2180                                                          call    SetConsoleString                                ;draw label
  2181                                                          xor     eax,eax                                         ;zero register
  2182                                                          mov     ax,[ebp+52]                                     ;CS
  2183                                                          mov     cl,46                                           ;column
  2184                                                          mov     ch,14                                           ;row
  2185                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2186                                  ;
  2187                                  ;       Display the EFLAGS register label and value
  2188                                  ;
  2189                                                          mov     cl,51                                           ;column
  2190                                                          mov     ch,11                                           ;row
  2191                                                          mov     esi,czIntEFLAGS                                 ;label
  2192                                                          call    SetConsoleString                                ;draw label
  2193                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2194                                                          mov     cl,55                                           ;column
  2195                                                          mov     ch,11                                           ;row
  2196                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2197                                  ;
  2198                                  ;       Display the ESP register label and value
  2199                                  ;
  2200                                                          mov     cl,51                                           ;column
  2201                                                          mov     ch,13                                           ;row
  2202                                                          mov     esi,czIntESP                                    ;label
  2203                                                          call    SetConsoleString                                ;draw label
  2204                                                          mov     eax,[ebp+12]                                    ;ESP
  2205                                                          mov     cl,55                                           ;column
  2206                                                          mov     ch,13                                           ;row
  2207                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2208                                  ;
  2209                                  ;       Display the EIP register label and value
  2210                                  ;
  2211                                                          mov     cl,51                                           ;column
  2212                                                          mov     ch,14                                           ;row
  2213                                                          mov     esi,czIntEIP                                    ;label
  2214                                                          call    SetConsoleString                                ;draw label
  2215                                                          mov     eax,[ebp+48]                                    ;EIP
  2216                                                          mov     cl,55                                           ;column
  2217                                                          mov     ch,14                                           ;row
  2218                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2219                                  ;
  2220                                  ;       Halt and loop until reset
  2221                                  ;
  2222                                  .10                     sti                                                     ;enable maskable interrupts
  2223                                                          hlt                                                     ;halt processor
  2224                                                          jmp     .10                                             ;resume on interrupt
  2225                                  ;-----------------------------------------------------------------------------------------------------------------------
  2226                                  ;
  2227                                  ;       Processor Interrupt Name Strings
  2228                                  ;
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230                                  czIntDivideByZero       db      "Division by zero",0
  2231                                  czIntSingleStep         db      "Single step",0
  2232                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2233                                  czIntBreak              db      "Break",0
  2234                                  czIntInto               db      "Into",0
  2235                                  czIntBounds             db      "Bounds",0
  2236                                  czIntBadOpCode          db      "Bad Operation Code",0
  2237                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2238                                  czIntDoubleFault        db      "Double Fault",0
  2239                                  czIntOperand            db      "Operand",0
  2240                                  czIntBadTSS             db      "Bad Task State Segment",0
  2241                                  czIntNotPresent         db      "Not Present",0
  2242                                  czIntStackLimit         db      "Stack Limit",0
  2243                                  czIntProtection         db      "General Protection Fault",0
  2244                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2245                                  czIntReserved           db      "Reserved",0
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  ;
  2248                                  ;       Processor Interrupt Handling Strings
  2249                                  ;
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2252                                  czIntLabel              db      "Interrupt #",0
  2253                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2254                                  czIntEAX                db      "EAX:",0
  2255                                  czIntECX                db      "ECX:",0
  2256                                  czIntEDX                db      "EDX:",0
  2257                                  czIntEBX                db      "EBX:",0
  2258                                  czIntESI                db      "ESI:",0
  2259                                  czIntEDI                db      "EDI:",0
  2260                                  czIntEBP                db      "EBP:",0
  2261                                  czIntESP                db      "ESP:",0
  2262                                  czIntDS                 db      " DS:",0
  2263                                  czIntES                 db      " ES:",0
  2264                                  czIntSS                 db      " SS:",0
  2265                                  czIntCS                 db      " CS:",0
  2266                                  czIntEFLAGS             db      "FLG:",0
  2267                                  czIntEIP                db      "EIP:",0
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269                                  ;
  2270                                  ;       Routine:        DrawTextDialogBox
  2271                                  ;
  2272                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2273                                  ;
  2274                                  ;       In:             CL      upper left column (0-79)
  2275                                  ;                       CH      upper left row (0-24)
  2276                                  ;                       DL      column width, excluding border
  2277                                  ;                       DH      row height, excluding border
  2278                                  ;                       BH      color attribute
  2279                                  ;
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2282                                                          push    esi                                             ;
  2283                                                          push    edi                                             ;
  2284                                                          push    es                                              ;
  2285                                                          push    EGDTCGA                                         ;load CGA selector ...
  2286                                                          pop     es                                              ;... into ES
  2287                                  ;
  2288                                  ;       Compute target display offset
  2289                                  ;
  2290                                                          xor     eax,eax                                         ;zero register
  2291                                                          mov     al,ch                                           ;row
  2292                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2293                                                          mul     ah                                              ;row offset
  2294                                                          add     al,cl                                           ;add column
  2295                                                          adc     ah,0                                            ;add overflow
  2296                                                          add     al,cl                                           ;add column
  2297                                                          adc     ah,0                                            ;add overflow
  2298                                                          mov     edi,eax                                         ;target row offset
  2299                                  ;
  2300                                  ;       Display top border row
  2301                                  ;
  2302                                                          push    edi                                             ;save target row offset
  2303                                                          mov     ah,bh                                           ;attribute
  2304                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2305                                                          stosw                                                   ;display character and attribute
  2306                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2307                                                          xor     ecx,ecx                                         ;zero register
  2308                                                          mov     cl,dl                                           ;width, excluding border
  2309                                                          rep     stosw                                           ;display horizontal border
  2310                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2311                                                          stosw                                                   ;display character and attribute
  2312                                                          pop     edi                                             ;restore target row offset
  2313                                                          add     edi,ECONROWBYTES                                ;next row
  2314                                  ;
  2315                                  ;       Display dialog box body rows
  2316                                  ;
  2317                                                          xor     ecx,ecx                                         ;zero register
  2318                                                          mov     cl,dh                                           ;height, excluding border
  2319                                  .10                     push    ecx                                             ;save remaining rows
  2320                                                          push    edi                                             ;save target row offset
  2321                                                          mov     ah,bh                                           ;attribute
  2322                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2323                                                          stosw                                                   ;display character and attribute
  2324                                                          mov     al,EASCIISPACE                                  ;space
  2325                                                          xor     ecx,ecx                                         ;zero register
  2326                                                          mov     cl,dl                                           ;width, excluding border
  2327                                                          rep     stosw                                           ;display row
  2328                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2329                                                          stosw                                                   ;display character and attribute
  2330                                                          pop     edi                                             ;restore target row offset
  2331                                                          add     edi,ECONROWBYTES                                ;next row
  2332                                                          pop     ecx                                             ;remaining rows
  2333                                                          loop    .10                                             ;next row
  2334                                  ;
  2335                                  ;       Display bottom border row
  2336                                  ;
  2337                                                          push    edi                                             ;save target row offset
  2338                                                          mov     ah,bh                                           ;attribute
  2339                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2340                                                          stosw                                                   ;display character and attribute
  2341                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2342                                                          xor     ecx,ecx                                         ;zero register
  2343                                                          mov     cl,dl                                           ;width, excluding border
  2344                                                          rep     stosw                                           ;display horizontal border
  2345                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2346                                                          stosw                                                   ;display character and attribute
  2347                                                          pop     edi                                             ;restore target row offset
  2348                                                          add     edi,ECONROWBYTES                                ;next row
  2349                                  ;
  2350                                  ;       Restore and return
  2351                                  ;
  2352                                                          pop     es                                              ;restore non-volatile regs
  2353                                                          pop     edi                                             ;
  2354                                                          pop     esi                                             ;
  2355                                                          pop     ecx                                             ;
  2356                                                          ret                                                     ;return
  2357                                  ;=======================================================================================================================
  2358                                  ;
  2359                                  ;       Hardware Device Interupts
  2360                                  ;
  2361                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2362                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2363                                  ;       (BX=2028h).
  2364                                  ;
  2365                                  ;=======================================================================================================================
  2366                                  ;-----------------------------------------------------------------------------------------------------------------------
  2367                                  ;
  2368                                  ;       IRQ0    Clock Tick Interrupt
  2369                                  ;
  2370                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2371                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2372                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2373                                  ;
  2374                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2375                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2376                                  ;
  2377                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2378                                  ;       zero, the floppy disk motors are turned off.
  2379                                  ;
  2380                                  ;-----------------------------------------------------------------------------------------------------------------------
  2381                                                          menter  clocktick                                       ;clock tick interrupt
  2382                                                          push    eax                                             ;save non-volatile regs
  2383                                                          push    edx                                             ;
  2384                                                          push    ds                                              ;
  2385                                  ;
  2386                                  ;       Update the clock tick count and the elapsed days as needed.
  2387                                  ;
  2388                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2389                                                          pop     ds                                              ;... into data segment register
  2390                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2391                                                          inc     eax                                             ;increment clock ticks
  2392                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2393                                                          jb      irq0.10                                         ;no, skip ahead
  2394                                                          inc     byte [wbClockDays]                              ;increment clock days
  2395                                                          xor     eax,eax                                         ;reset clock ticks
  2396                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2397                                  ;
  2398                                  ;       Decrement floppy disk motor timeout.
  2399                                  ;
  2400                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2401                                                          je      irq0.20                                         ;yes, skip ahead
  2402                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2403                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2404                                  ;
  2405                                  ;       Turn off the floppy disk motor if appropriate.
  2406                                  ;
  2407                                                          sti                                                     ;enable maskable interrupts
  2408                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2409                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2410                                                          in      al,dx                                           ;FDC main status byte
  2411                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2412                                                          jnz     irq0.15                                         ;wait while busy
  2413                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2414                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2415                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2416                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2417                                                          out     dx,al                                           ;turn motor off
  2418                                  ;
  2419                                  ;       Signal the end of the hardware interrupt.
  2420                                  ;
  2421                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2422                                  ;
  2423                                  ;       Restore and return.
  2424                                  ;
  2425                                                          pop     ds                                              ;restore modified regs
  2426                                                          pop     edx                                             ;
  2427                                                          pop     eax                                             ;
  2428                                                          iretd                                                   ;return
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430                                  ;
  2431                                  ;       IRQ1    Keyboard Interrupt
  2432                                  ;
  2433                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2434                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2435                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2436                                  ;       ALL modified registers upon return.
  2437                                  ;
  2438                                  ;-----------------------------------------------------------------------------------------------------------------------
  2439                                                          menter  keyboard                                        ;keyboard interrrupt
  2440                                                          push    eax                                             ;save non-volatile regs
  2441                                                          push    ebx                                             ;
  2442                                                          push    ecx                                             ;
  2443                                                          push    esi                                             ;
  2444                                                          push    ds                                              ;
  2445                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2446                                                          pop     ds                                              ;... into data segment register
  2447                                                          xor     al,al                                           ;zero
  2448                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2449                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2450                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2451                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2452                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2453                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2454                                                          mov     al,' '                                          ;space
  2455                                                          mov     [wbConsoleChar],al                              ;set character to space
  2456                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2457                                                          not     al                                              ;controller timeout mask
  2458                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2459                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2460                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2461                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2462                                                          jz      irq1.140                                        ;yes, skip ahead
  2463                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2464                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2465                                                          mov     ah,al                                           ;copy scan code 0
  2466                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2467                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2468                                                          je      irq1.30                                         ;yes, set flag
  2469                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2470                                                          je      irq1.40                                         ;yes, reset flag
  2471                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2472                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2473                                                          je      irq1.30                                         ;yes, set flag
  2474                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2475                                                          je      irq1.40                                         ;yes, reset flag
  2476                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2477                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2478                                                          je      irq1.30                                         ;yes, set flag
  2479                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2480                                                          je      irq1.40                                         ;yes, reset flag
  2481                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2482                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2483                                                          je      irq1.30                                         ;yes, set flag
  2484                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2485                                                          je      irq1.40                                         ;yes, reset flag
  2486                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2487                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2488                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2489                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2490                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2491                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2492                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2493                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2494                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2495                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2496                                                          jne     irq1.70                                         ;no, skip ahead
  2497                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2498                                                          jz      irq1.140                                        ;yes, skip ahead
  2499                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2500                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2501                                                          mov     ah,al                                           ;copy scan code 1
  2502                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2503                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2504                                                          je      irq1.30                                         ;yes, set flag
  2505                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2506                                                          je      irq1.40                                         ;yes, reset flag
  2507                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2508                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2509                                                          je      irq1.30                                         ;yes, set flag
  2510                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2511                                                          je      irq1.40                                         ;yes, reset flag
  2512                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2513                                                          je      irq1.80                                         ;yes, skip ahead
  2514                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2515                                                          je      irq1.80                                         ;yes, skip ahead
  2516                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2517                                                          je      irq1.10                                         ;yes, continue
  2518                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2519                                                          jne     irq1.20                                         ;no, skip ahead
  2520                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2521                                                          jz      irq1.140                                        ;yes, skip ahead
  2522                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2523                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2524                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2525                                                          jz      irq1.140                                        ;yes, skip ahead
  2526                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2527                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2528                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2529                                  irq1.30                 or      bl,al                                           ;set shift flag
  2530                                                          jmp     irq1.60                                         ;skip ahead
  2531                                  irq1.40                 not     al                                              ;convert flag to mask
  2532                                                          and     bl,al                                           ;reset shift flag
  2533                                                          jmp     irq1.60                                         ;skip ahead
  2534                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2535                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2536                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2537                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2538                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2539                                                          jmp     irq1.150                                        ;finish keyboard handling
  2540                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2541                                                          jne     irq1.80                                         ;no continue
  2542                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2543                                                          jz      irq1.140                                        ;yes, skip ahead
  2544                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2545                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2546                                                          mov     ah,al                                           ;copy scan code 1
  2547                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2548                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2549                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2550                                                          jz      irq1.140                                        ;yes, skip ahead
  2551                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2552                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2553                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2554                                                          jz      irq1.140                                        ;yes, skip ahead
  2555                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2556                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2557                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2558                                                          jz      irq1.140                                        ;yes, skip ahead
  2559                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2560                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2561                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2562                                                          jz      irq1.140                                        ;yes, skip ahead
  2563                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2564                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2565                                                          jmp     irq1.150                                        ;continue
  2566                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2567                                                          test    ah,EKEYBUP                                      ;release code?
  2568                                                          jnz     irq1.130                                        ;yes, skip ahead
  2569                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2570                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2571                                                          jz      irq1.90                                         ;no, skip ahead
  2572                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2573                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2574                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2575                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2576                                                          jz      irq1.100                                        ;no skip ahead
  2577                                                          mov     cl,al                                           ;copy ASCII code
  2578                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2579                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2580                                                          jb      irq1.100                                        ;yes, skip ahead
  2581                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2582                                                          ja      irq1.100                                        ;yes, skip ahead
  2583                                                          xor     al,EASCIICASE                                   ;switch case
  2584                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2585                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2586                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2587                                                          jz      irq1.120                                        ;no, skip ahead
  2588                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2589                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2590                                                          or      edx,eax                                         ;msg id and codes
  2591                                                          xor     ecx,ecx                                         ;null param
  2592                                                          push    eax                                             ;save codes
  2593                                                          call    PutMessage                                      ;put message to console
  2594                                                          pop     eax                                             ;restore codes
  2595                                                          test    al,al                                           ;ASCII translation?
  2596                                                          jz      irq1.130                                        ;no, skip ahead
  2597                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2598                                                          and     eax,0FFFFh                                      ;clear high-order word
  2599                                                          or      edx,eax                                         ;msg id and codes
  2600                                                          xor     ecx,ecx                                         ;null param
  2601                                                          call    PutMessage                                      ;put message to console
  2602                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2603                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2604                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2605                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2606                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2607                                                          pop     ds                                              ;restore non-volatile regs
  2608                                                          pop     esi                                             ;
  2609                                                          pop     ecx                                             ;
  2610                                                          pop     ebx                                             ;
  2611                                                          pop     eax                                             ;
  2612                                                          iretd                                                   ;return
  2613                                  ;-----------------------------------------------------------------------------------------------------------------------
  2614                                  ;       Scan-Code to ASCII Translation Tables
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2617                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2618                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2619                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2620                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2621                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2622                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2623                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2624                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2625                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2626                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2627                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2628                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2629                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2630                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2631                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2632                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2633                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2634                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2635                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2636                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2637                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2638                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2639                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2640                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2641                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2642                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2643                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2644                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2645                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2646                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2647                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                  ;
  2650                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2651                                  ;
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                                          menter  iochannel                                       ;secondary 8259A cascade
  2654                                                          push    eax                                             ;save modified regs
  2655                                                          jmp     hwint                                           ;end interrupt and return
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2659                                  ;
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                                          menter  com2                                            ;serial port 2 interrupt
  2662                                                          push    eax                                             ;save modified regs
  2663                                                          jmp     hwint                                           ;end interrupt and return
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  ;
  2666                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                                          menter  com1                                            ;serial port 1 interrupt
  2670                                                          push    eax                                             ;save modified regs
  2671                                                          jmp     hwint                                           ;end interrupt and return
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                  ;
  2674                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2678                                                          push    eax                                             ;save modified regs
  2679                                                          jmp     hwint                                           ;end interrupt and return
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                  ;
  2682                                  ;       IRQ6    Diskette Hardware Interrupt
  2683                                  ;
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                                          menter  diskette                                        ;floppy disk interrupt
  2686                                                          push    eax                                             ;save non-volatile regs
  2687                                                          push    ds                                              ;
  2688                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2689                                                          pop     ds                                              ;... into DS register
  2690                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2691                                                          or      al,10000000b                                    ;set IRQ flag
  2692                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2693                                                          pop     ds                                              ;restore non-volatile regs
  2694                                                          jmp     hwint                                           ;end primary PIC interrupt
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696                                  ;
  2697                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2698                                  ;
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2701                                                          push    eax                                             ;save modified regs
  2702                                                          jmp     hwint                                           ;end interrupt and return
  2703                                  ;-----------------------------------------------------------------------------------------------------------------------
  2704                                  ;
  2705                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2706                                  ;
  2707                                  ;-----------------------------------------------------------------------------------------------------------------------
  2708                                                          menter  rtclock                                         ;real-time clock interrupt
  2709                                                          push    eax                                             ;save modified regs
  2710                                                          jmp     hwwint                                          ;end interrupt and return
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;
  2713                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2714                                  ;
  2715                                  ;-----------------------------------------------------------------------------------------------------------------------
  2716                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2717                                                          push    eax                                             ;save modified regs
  2718                                                          jmp     hwwint                                          ;end interrupt and return
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                  ;
  2721                                  ;       IRQ10   Reserved Hardware Interrupt
  2722                                  ;
  2723                                  ;-----------------------------------------------------------------------------------------------------------------------
  2724                                                          menter  irq10                                           ;reserved
  2725                                                          push    eax                                             ;save modified regs
  2726                                                          jmp     hwwint                                          ;end interrupt and return
  2727                                  ;-----------------------------------------------------------------------------------------------------------------------
  2728                                  ;
  2729                                  ;       IRQ11   Reserved Hardware Interrupt
  2730                                  ;
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                                          menter  irq11                                           ;reserved
  2733                                                          push    eax                                             ;save modified regs
  2734                                                          jmp     hwwint                                          ;end interrupt and return
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                  ;
  2737                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2738                                  ;
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2741                                                          push    eax                                             ;save modified regs
  2742                                                          jmp     hwwint                                          ;end interrupt and return
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  ;
  2745                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2746                                  ;
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                                          menter  coprocessor                                     ;coprocessor interrupt
  2749                                                          push    eax                                             ;save modified regs
  2750                                                          jmp     hwwint                                          ;end interrupt and return
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                  ;
  2753                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2754                                  ;
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2757                                                          push    eax                                             ;save modified regs
  2758                                                          jmp     hwwint                                          ;end interrupt and return
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                  ;
  2761                                  ;       IRQ15   Reserved Hardware Interrupt
  2762                                  ;
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                                          menter  irq15                                           ;reserved
  2765                                                          push    eax                                             ;save modified regs
  2766                                                          jmp     hwwint                                          ;end interrupt and return
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                  ;
  2769                                  ;       Exit from hardware interrupt
  2770                                  ;
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2773                                                          jmp     hwint90                                         ;skip ahead
  2774                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2775                                  hwint90                 pop     eax                                             ;restore modified regs
  2776                                                          iretd                                                   ;return from interrupt
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                  ;
  2779                                  ;       INT 30h Operating System Software Service Interrupt
  2780                                  ;
  2781                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2782                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2783                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2784                                  ;       the entry address of the specific function from a table.
  2785                                  ;
  2786                                  ;-----------------------------------------------------------------------------------------------------------------------
  2787                                                          menter  svc
  2788                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2789                                                          jae     svc90                                           ;yes, skip ahead
  2790                                                          movzx   eax,al                                          ;function
  2791                                                          shl     eax,2                                           ;offset into table
  2792                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2793                                  svc90                   iretd                                                   ;return from interrupt
  2794                                  ;-----------------------------------------------------------------------------------------------------------------------
  2795                                  ;
  2796                                  ;       Service Request Table
  2797                                  ;
  2798                                  ;
  2799                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2800                                  ;
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2803                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2804                                                          tsvce   CompareMemory                                   ;compare memory
  2805                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2806                                                          tsvce   FreeMemory                                      ;free memory block
  2807                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2808                                                          tsvce   GetConsoleString                                ;get string input
  2809                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2810                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2811                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2812                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2813                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2814                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2815                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2816                                                          tsvce   PutDayString                                    ;put DD string
  2817                                                          tsvce   PutHourString                                   ;put hh string
  2818                                                          tsvce   PutMinuteString                                 ;put mm string
  2819                                                          tsvce   PutMonthString                                  ;put MM string
  2820                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2821                                                          tsvce   PutSecondString                                 ;put ss string
  2822                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2823                                                          tsvce   PutWeekdayString                                ;put weekday string
  2824                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2825                                                          tsvce   PutYearString                                   ;put YYYY string
  2826                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2827                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2828                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2829                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2830                                                          tsvce   UpperCaseString                                 ;upper-case string
  2831                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833                                  ;
  2834                                  ;       Service Request Macros
  2835                                  ;
  2836                                  ;       These macros provide positional parameterization of service request calls.
  2837                                  ;
  2838                                  ;-----------------------------------------------------------------------------------------------------------------------
  2839                                  %macro                  allocateMemory 1
  2840                                                          mov     ecx,%1                                          ;bytes to allocate
  2841                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2842                                                          int     _svc                                            ;invoke OS service
  2843                                  %endmacro
  2844                                  %macro                  clearConsoleScreen 0
  2845                                                          mov     al,eClearConsoleScreen                          ;function code
  2846                                                          int     _svc                                            ;invoke OS service
  2847                                  %endmacro
  2848                                  %macro                  compareMemory 0
  2849                                                          mov     al,eCompareMemory                               ;function code
  2850                                                          int     _svc                                            ;invoke OS service
  2851                                  %endmacro
  2852                                  %macro                  decimalToUnsigned 0
  2853                                                          mov     al,eDecimalToUnsigned                           ;function code
  2854                                                          int     _svc                                            ;invoke OS servie
  2855                                  %endmacro
  2856                                  %macro                  freeMemory 1
  2857                                                          mov     edx,%1                                          ;address of memory block
  2858                                                          mov     al,eFreeMemory                                  ;function code
  2859                                                          int     _svc                                            ;invoke OS service
  2860                                  %endmacro
  2861                                  %macro                  getBaseMemSize 0
  2862                                                          mov     al,eGetBaseMemSize                              ;function code
  2863                                                          int     _svc                                            ;invoke OS service
  2864                                  %endmacro
  2865                                  %macro                  getConsoleString 4
  2866                                                          mov     edx,%1                                          ;buffer address
  2867                                                          mov     ecx,%2                                          ;max characters
  2868                                                          mov     bh,%3                                           ;echo indicator
  2869                                                          mov     bl,%4                                           ;terminator
  2870                                                          mov     al,eGetConsoleString                            ;function code
  2871                                                          int     _svc                                            ;invoke OS service
  2872                                  %endmacro
  2873                                  %macro                  getExtendedMemSize 0
  2874                                                          mov     al,eGetExtendedMemSize                          ;function code
  2875                                                          int     _svc                                            ;invoke OS service
  2876                                  %endmacro
  2877                                  %macro                  getROMMemSize 0
  2878                                                          mov     al,eGetROMMemSize                               ;function code
  2879                                                          int     _svc                                            ;invoke OS service
  2880                                  %endmacro
  2881                                  %macro                  hexadecimalToUnsigned 0
  2882                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2883                                                          int     _svc                                            ;invoke OS service
  2884                                  %endmacro
  2885                                  %macro                  isLeapYear 1
  2886                                                          mov     ebx,%1                                          ;DATETIME addr
  2887                                                          mov     al,eIsLeapYear                                  ;function code
  2888                                                          int     _svc                                            ;invoke OS service
  2889                                  %endmacro
  2890                                  %macro                  placeCursor 0
  2891                                                          mov     al,ePlaceCursor                                 ;function code
  2892                                                          int     _svc                                            ;invoke OS service
  2893                                  %endmacro
  2894                                  %macro                  putConsoleString 1
  2895                                                          mov     edx,%1                                          ;string address
  2896                                                          mov     al,ePutConsoleString                            ;function code
  2897                                                          int     _svc                                            ;invoke OS service
  2898                                  %endmacro
  2899                                  %macro                  putDateString 0
  2900                                                          mov     al,ePutDateString                               ;function code
  2901                                                          int     _svc                                            ;invoke OS service
  2902                                  %endmacro
  2903                                  %macro                  putDateString 2
  2904                                                          mov     ebx,%1                                          ;DATETIME addr
  2905                                                          mov     edx,%2                                          ;output buffer addr
  2906                                                          mov     al,ePutDateString                               ;function code
  2907                                                          int     _svc                                            ;invoke OS service
  2908                                  %endmacro
  2909                                  %macro                  putDayString 2
  2910                                                          mov     ebx,%1                                          ;DATETIME addr
  2911                                                          mov     edx,%2                                          ;output buffer addr
  2912                                                          mov     al,ePutDayString                                ;function code
  2913                                                          int     _svc                                            ;invoke OS service
  2914                                  %endmacro
  2915                                  %macro                  putHourString 2
  2916                                                          mov     ebx,%1                                          ;DATETIME addr
  2917                                                          mov     edx,%2                                          ;output buffer addr
  2918                                                          mov     al,ePutHourString                               ;function code
  2919                                                          int     _svc                                            ;invoke OS service
  2920                                  %endmacro
  2921                                  %macro                  putMinuteString 2
  2922                                                          mov     ebx,%1                                          ;DATETIME addr
  2923                                                          mov     edx,%2                                          ;output buffer addr
  2924                                                          mov     al,ePutMinuteString                             ;function code
  2925                                                          int     _svc                                            ;invoke OS service
  2926                                  %endmacro
  2927                                  %macro                  putMonthString 2
  2928                                                          mov     ebx,%1                                          ;DATETIME addr
  2929                                                          mov     edx,%2                                          ;output buffer addr
  2930                                                          mov     al,ePutMonthString                              ;function code
  2931                                                          int     _svc                                            ;invoke OS service
  2932                                  %endmacro
  2933                                  %macro                  putMonthNameString 2
  2934                                                          mov     ebx,%1                                          ;DATETIME addr
  2935                                                          mov     edx,%2                                          ;output buffer addr
  2936                                                          mov     al,ePutMonthNameString                          ;function code
  2937                                                          int     _svc                                            ;invoke OS service
  2938                                  %endmacro
  2939                                  %macro                  putSecondString 2
  2940                                                          mov     ebx,%1                                          ;DATETIME addr
  2941                                                          mov     edx,%2                                          ;output buffer addr
  2942                                                          mov     al,ePutSecondString                             ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  putTimeString 0
  2946                                                          mov     al,ePutTimeString                               ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  putTimeString 2
  2950                                                          mov     ebx,%1                                          ;DATETIME addr
  2951                                                          mov     edx,%2                                          ;output buffer addr
  2952                                                          mov     al,ePutTimeString                               ;function code
  2953                                                          int     _svc                                            ;invoke OS service
  2954                                  %endmacro
  2955                                  %macro                  putWeekdayString 2
  2956                                                          mov     ebx,%1                                          ;DATETIME addr
  2957                                                          mov     edx,%2                                          ;output buffer addr
  2958                                                          mov     al,ePutWeekdayString                            ;function code
  2959                                                          int     _svc                                            ;invoke OS service
  2960                                  %endmacro
  2961                                  %macro                  putWeekdayNameString 2
  2962                                                          mov     ebx,%1                                          ;DATETIME addr
  2963                                                          mov     edx,%2                                          ;output buffer addr
  2964                                                          mov     al,ePutWeekdayNameString                        ;function code
  2965                                                          int     _svc                                            ;invoke OS service
  2966                                  %endmacro
  2967                                  %macro                  putYearString 2
  2968                                                          mov     ebx,%1                                          ;DATETIME addr
  2969                                                          mov     edx,%2                                          ;output buffer addr
  2970                                                          mov     al,ePutYearString                               ;function code
  2971                                                          int     _svc                                            ;invoke OS service
  2972                                  %endmacro
  2973                                  %macro                  readRealTimeClock 0
  2974                                                          mov     al,eReadRealTimeClock                           ;function code
  2975                                                          int     _svc                                            ;invoke OS service
  2976                                  %endmacro
  2977                                  %macro                  readRealTimeClock 1
  2978                                                          mov     ebx,%1                                          ;DATETIME addr
  2979                                                          mov     al,eReadRealTimeClock                           ;function code
  2980                                                          int     _svc                                            ;invoke OS service
  2981                                  %endmacro
  2982                                  %macro                  resetSystem 0
  2983                                                          mov     al,eResetSystem                                 ;function code
  2984                                                          int     _svc                                            ;invoke OS service
  2985                                  %endmacro
  2986                                  %macro                  unsignedToDecimalString 0
  2987                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2988                                                          int     _svc                                            ;invoke OS service
  2989                                  %endmacro
  2990                                  %macro                  unsignedToHexadecimal 0
  2991                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2992                                                          int     _svc                                            ;invoke OS service
  2993                                  %endmacro
  2994                                  %macro                  upperCaseString 0
  2995                                                          mov     al,eUpperCaseString                             ;function code
  2996                                                          int     _svc                                            ;invoke OS service
  2997                                  %endmacro
  2998                                  ;=======================================================================================================================
  2999                                  ;
  3000                                  ;       Kernel Function Library
  3001                                  ;
  3002                                  ;=======================================================================================================================
  3003                                  ;=======================================================================================================================
  3004                                  ;
  3005                                  ;       Date and Time Helper Routines
  3006                                  ;
  3007                                  ;       GetYear
  3008                                  ;       IsLeapYear
  3009                                  ;       PutDateString
  3010                                  ;       PutDayString
  3011                                  ;       PutHourString
  3012                                  ;       PutMinuteString
  3013                                  ;       PutMonthString
  3014                                  ;       PutMonthNameString
  3015                                  ;       PutSecondString
  3016                                  ;       PutTimeString
  3017                                  ;       PutWeekdayString
  3018                                  ;       PutWeekdayNameString
  3019                                  ;       PutYearString
  3020                                  ;
  3021                                  ;=======================================================================================================================
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ;
  3024                                  ;       Routine:        GetYear
  3025                                  ;
  3026                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3027                                  ;
  3028                                  ;       In:             DS:EBX  DATETIME address
  3029                                  ;
  3030                                  ;       Out:            ECX     year
  3031                                  ;
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3034                                                          imul    ecx,100                                         ;century * 100
  3035                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3036                                                          add     ecx,eax                                         ;year (YYYY)
  3037                                                          ret                                                     ;return
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039                                  ;
  3040                                  ;       Routine:        IsLeapYear
  3041                                  ;
  3042                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3043                                  ;
  3044                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3045                                  ;
  3046                                  ;       Out:            ECX     0 = not a leap year
  3047                                  ;                               1 = leap year
  3048                                  ;
  3049                                  ;-----------------------------------------------------------------------------------------------------------------------
  3050                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3051                                                          mov     eax,ecx                                         ;EAX = YYYY
  3052                                                          xor     ecx,ecx                                         ;assume not leap year
  3053                                                          test    al,00000011b                                    ;multiple of four?
  3054                                                          jnz     .no                                             ;no, branch
  3055                                                          mov     dl,100                                          ;divisor
  3056                                                          div     dl                                              ;divide by 100
  3057                                                          test    ah,ah                                           ;multiple of 100?
  3058                                                          jnz     .yes                                            ;yes, branch
  3059                                                          test    al,00000011b                                    ;multiple of 400?
  3060                                                          jnz     .no                                             ;no, branch
  3061                                  .yes                    inc     ecx                                             ;indicate leap
  3062                                  .no                     ret                                                     ;return
  3063                                  ;-----------------------------------------------------------------------------------------------------------------------
  3064                                  ;
  3065                                  ;       Routine:        PutDateString
  3066                                  ;
  3067                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3068                                  ;                       structure at ds:ebx.
  3069                                  ;
  3070                                  ;       In:             DS:EBX  DATETIME address
  3071                                  ;                       DS:EDX  output buffer address
  3072                                  ;
  3073                                  ;-----------------------------------------------------------------------------------------------------------------------
  3074                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3075                                                          push    edi                                             ;
  3076                                                          push    es                                              ;
  3077                                                          push    ds                                              ;store data selector ...
  3078                                                          pop     es                                              ;... in extra segment reg
  3079                                                          mov     edi,edx                                         ;output buffer address
  3080                                                          mov     cl,10                                           ;divisor
  3081                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3082                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3083                                                          div     cl                                              ;AH = rem; AL = quotient
  3084                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3085                                                          cld                                                     ;forward strings
  3086                                                          stosd                                                   ;store "mm/"nul
  3087                                                          dec     edi                                             ;address of terminator
  3088                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3089                                                          div     cl                                              ;AH = rem; AL = quotient
  3090                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3091                                                          stosd                                                   ;store "dd/"nul
  3092                                                          dec     edi                                             ;address of terminator
  3093                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3094                                                          div     cl                                              ;AH = rem; AL = quotient
  3095                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3096                                                          stosd                                                   ;store "cc/"null
  3097                                                          dec     edi                                             ;address of terminator
  3098                                                          dec     edi                                             ;address of delimiter
  3099                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3100                                                          div     cl                                              ;AH = rem; AL = quotient
  3101                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3102                                                          stosb                                                   ;store quotient
  3103                                                          mov     al,ah                                           ;remainder
  3104                                                          stosb                                                   ;store remainder
  3105                                                          xor     al,al                                           ;null terminator
  3106                                                          stosb                                                   ;store terminator
  3107                                                          pop     es                                              ;restore non-volatile regs
  3108                                                          pop     edi                                             ;
  3109                                                          pop     ecx                                             ;
  3110                                                          ret                                                     ;return
  3111                                  ;-----------------------------------------------------------------------------------------------------------------------
  3112                                  ;
  3113                                  ;       Routine:        PutDayString
  3114                                  ;
  3115                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3116                                  ;                       structure at ds:ebx.
  3117                                  ;
  3118                                  ;       In:             DS:EBX  DATETIME address
  3119                                  ;                       DS:EDX  output buffer address
  3120                                  ;
  3121                                  ;-----------------------------------------------------------------------------------------------------------------------
  3122                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3123                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3124                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3125                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3126                                                          pop     ecx                                             ;
  3127                                                          ret                                                     ;return
  3128                                  ;-----------------------------------------------------------------------------------------------------------------------
  3129                                  ;
  3130                                  ;       Routine:        PutHourString
  3131                                  ;
  3132                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3133                                  ;                       structure at ds:ebx.
  3134                                  ;
  3135                                  ;       In:             DS:EBX  DATETIME address
  3136                                  ;                       DS:EDX  output buffer address
  3137                                  ;
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3140                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3141                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3142                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3143                                                          pop     ecx                                             ;
  3144                                                          ret                                                     ;return
  3145                                  ;-----------------------------------------------------------------------------------------------------------------------
  3146                                  ;
  3147                                  ;       Routine:        PutMinuteString
  3148                                  ;
  3149                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3150                                  ;                       structure at ds:ebx.
  3151                                  ;
  3152                                  ;       In:             DS:EBX  DATETIME address
  3153                                  ;                       DS:EDX  output buffer address
  3154                                  ;
  3155                                  ;-----------------------------------------------------------------------------------------------------------------------
  3156                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3157                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3158                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3159                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3160                                                          pop     ecx                                             ;
  3161                                                          ret                                                     ;return
  3162                                  ;-----------------------------------------------------------------------------------------------------------------------
  3163                                  ;
  3164                                  ;       Routine:        PutMonthString
  3165                                  ;
  3166                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3167                                  ;                       structure at ds:ebx.
  3168                                  ;
  3169                                  ;       In:             DS:EBX  DATETIME address
  3170                                  ;                       DS:EDX  output buffer address
  3171                                  ;
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3174                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3175                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3176                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3177                                                          pop     ecx                                             ;
  3178                                                          ret                                                     ;return
  3179                                  ;-----------------------------------------------------------------------------------------------------------------------
  3180                                  ;
  3181                                  ;       Routine:        PutMonthNameString
  3182                                  ;
  3183                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3184                                  ;                       structure at ds:ebx.
  3185                                  ;
  3186                                  ;       In:             DS:EBX  DATETIME address
  3187                                  ;                       DS:EDX  output buffer address
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3191                                                          push    edi                                             ;
  3192                                                          push    ds                                              ;
  3193                                                          push    es                                              ;
  3194                                                          push    ds                                              ;load data selector ...
  3195                                                          pop     es                                              ;... into extra segment
  3196                                                          mov     edi,edx                                         ;output buffer address
  3197                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3198                                                          dec     eax                                             ;month (0-11)
  3199                                                          shl     eax,2                                           ;offset into month name lookup table
  3200                                                          push    cs                                              ;load code selector ...
  3201                                                          pop     ds                                              ;... into data segment
  3202                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3203                                                          cld                                                     ;forward strings
  3204                                  .10                     lodsb                                                   ;name character
  3205                                                          stosb                                                   ;store in output buffer
  3206                                                          test    al,al                                           ;end of string?
  3207                                                          jnz     .10                                             ;no, continue
  3208                                                          pop     es                                              ;restore non-volatile regs
  3209                                                          pop     ds                                              ;
  3210                                                          pop     edi                                             ;
  3211                                                          pop     esi                                             ;
  3212                                                          ret                                                     ;return
  3213                                  ;-----------------------------------------------------------------------------------------------------------------------
  3214                                  ;
  3215                                  ;       Routine:        PutSecondString
  3216                                  ;
  3217                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3218                                  ;                       structure at ds:ebx.
  3219                                  ;
  3220                                  ;       In:             DS:EBX  DATETIME address
  3221                                  ;                       DS:EDX  output buffer address
  3222                                  ;
  3223                                  ;-----------------------------------------------------------------------------------------------------------------------
  3224                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3225                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3226                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3227                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3228                                                          pop     ecx                                             ;
  3229                                                          ret                                                     ;return
  3230                                  ;-----------------------------------------------------------------------------------------------------------------------
  3231                                  ;
  3232                                  ;       Routine:        PutTimeString
  3233                                  ;
  3234                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3235                                  ;                       structure at ds:ebx.
  3236                                  ;
  3237                                  ;       In:             DS:EBX  DATETIME address
  3238                                  ;                       DS:EDX  output buffer address
  3239                                  ;
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3242                                                          push    edi                                             ;
  3243                                                          push    es                                              ;
  3244                                                          push    ds                                              ;store data selector ...
  3245                                                          pop     es                                              ;... in extra segment reg
  3246                                                          mov     edi,edx                                         ;output buffer address
  3247                                                          mov     cl,10                                           ;divisor
  3248                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3249                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3250                                                          div     cl                                              ;ah = rem; al = quotient
  3251                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3252                                                          cld                                                     ;forward strings
  3253                                                          stosd                                                   ;store "mm/"nul
  3254                                                          dec     edi                                             ;address of terminator
  3255                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3256                                                          div     cl                                              ;ah = rem; al = quotient
  3257                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3258                                                          stosd                                                   ;store "dd/"nul
  3259                                                          dec     edi                                             ;address of terminator
  3260                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3261                                                          div     cl                                              ;ah = rem; al = quotient
  3262                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3263                                                          stosb                                                   ;store quotient
  3264                                                          mov     al,ah                                           ;remainder
  3265                                                          stosb                                                   ;store remainder
  3266                                                          xor     al,al                                           ;null terminator
  3267                                                          stosb                                                   ;store terminator
  3268                                                          pop     es                                              ;restore non-volatile regs
  3269                                                          pop     edi                                             ;
  3270                                                          pop     ecx                                             ;
  3271                                                          ret                                                     ;return
  3272                                  ;-----------------------------------------------------------------------------------------------------------------------
  3273                                  ;
  3274                                  ;       Routine:        PutWeekdayString
  3275                                  ;
  3276                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3277                                  ;                       structure at ds:ebx.
  3278                                  ;
  3279                                  ;       In:             DS:EBX  DATETIME address
  3280                                  ;                       DS:EDX  output buffer address
  3281                                  ;
  3282                                  ;-----------------------------------------------------------------------------------------------------------------------
  3283                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3284                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3285                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3286                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3287                                                          pop     ecx                                             ;
  3288                                                          ret                                                     ;return
  3289                                  ;-----------------------------------------------------------------------------------------------------------------------
  3290                                  ;
  3291                                  ;       Routine:        PutWeekdayNameString
  3292                                  ;
  3293                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3294                                  ;                       structure at ds:ebx.
  3295                                  ;
  3296                                  ;       In:             DS:EBX  DATETIME address
  3297                                  ;                       DS:EDX  output buffer address
  3298                                  ;
  3299                                  ;-----------------------------------------------------------------------------------------------------------------------
  3300                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3301                                                          push    edi                                             ;
  3302                                                          push    ds                                              ;
  3303                                                          push    es                                              ;
  3304                                                          push    ds                                              ;load data selector ...
  3305                                                          pop     es                                              ;... into extra segment
  3306                                                          mov     edi,edx                                         ;output buffer address
  3307                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3308                                                          shl     eax,2                                           ;offset into day name lookup table
  3309                                                          push    cs                                              ;load code selector ...
  3310                                                          pop     ds                                              ;... into data segment
  3311                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3312                                                          cld                                                     ;forward strings
  3313                                  .10                     lodsb                                                   ;name character
  3314                                                          stosb                                                   ;store in output buffer
  3315                                                          test    al,al                                           ;end of string?
  3316                                                          jnz     .10                                             ;no, continue
  3317                                                          pop     es                                              ;restore non-volatile regs
  3318                                                          pop     ds                                              ;
  3319                                                          pop     edi                                             ;
  3320                                                          pop     esi                                             ;
  3321                                                          ret                                                     ;return
  3322                                  ;-----------------------------------------------------------------------------------------------------------------------
  3323                                  ;
  3324                                  ;       Routine:        PutYearString
  3325                                  ;
  3326                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3327                                  ;                       structure at ds:ebx.
  3328                                  ;
  3329                                  ;       In:             DS:EBX  DATETIME address
  3330                                  ;                       DS:EDX  output buffer address
  3331                                  ;
  3332                                  ;-----------------------------------------------------------------------------------------------------------------------
  3333                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3334                                                          call    GetYear                                         ;ECX = YYYY
  3335                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3336                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3337                                                          pop     ecx                                             ;restore non-volatile regs
  3338                                                          ret                                                     ;return
  3339                                  ;-----------------------------------------------------------------------------------------------------------------------
  3340                                  ;
  3341                                  ;       Day Names
  3342                                  ;
  3343                                  ;-----------------------------------------------------------------------------------------------------------------------
  3344                                  czSunday                db      "Sunday",0
  3345                                  czMonday                db      "Monday",0
  3346                                  czTuesday               db      "Tuesday",0
  3347                                  czWednesday             db      "Wednesday",0
  3348                                  czThursday              db      "Thursday",0
  3349                                  czFriday                db      "Friday",0
  3350                                  czSaturday              db      "Saturday",0
  3351                                  ;-----------------------------------------------------------------------------------------------------------------------
  3352                                  ;
  3353                                  ;       Month Names
  3354                                  ;
  3355                                  ;-----------------------------------------------------------------------------------------------------------------------
  3356                                  czJanuary               db      "January",0
  3357                                  czFebruary              db      "February",0
  3358                                  czMarch                 db      "March",0
  3359                                  czApril                 db      "April",0
  3360                                  czMay                   db      "May",0
  3361                                  czJune                  db      "June",0
  3362                                  czJuly                  db      "July",0
  3363                                  czAugust                db      "August",0
  3364                                  czSeptember             db      "September",0
  3365                                  czOctober               db      "October",0
  3366                                  czNovember              db      "November",0
  3367                                  czDecember              db      "December",0
  3368                                  ;-----------------------------------------------------------------------------------------------------------------------
  3369                                  ;
  3370                                  ;       Day Names Lookup Table
  3371                                  ;
  3372                                  ;-----------------------------------------------------------------------------------------------------------------------
  3373                                                          align   4
  3374                                  tDayNames               equ     $
  3375                                                          dd      czSunday
  3376                                                          dd      czMonday
  3377                                                          dd      czTuesday
  3378                                                          dd      czWednesday
  3379                                                          dd      czThursday
  3380                                                          dd      czFriday
  3381                                                          dd      czSaturday
  3382                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3383                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3384                                  ;-----------------------------------------------------------------------------------------------------------------------
  3385                                  ;
  3386                                  ;       Month Names Lookup Table
  3387                                  ;
  3388                                  ;-----------------------------------------------------------------------------------------------------------------------
  3389                                                          align   4
  3390                                  tMonthNames             equ     $
  3391                                                          dd      czJanuary
  3392                                                          dd      czFebruary
  3393                                                          dd      czMarch
  3394                                                          dd      czApril
  3395                                                          dd      czMay
  3396                                                          dd      czJune
  3397                                                          dd      czJuly
  3398                                                          dd      czAugust
  3399                                                          dd      czSeptember
  3400                                                          dd      czOctober
  3401                                                          dd      czNovember
  3402                                                          dd      czDecember
  3403                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3404                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3405                                  ;=======================================================================================================================
  3406                                  ;
  3407                                  ;       Memory Helper Routines
  3408                                  ;
  3409                                  ;       AllocateMemory
  3410                                  ;       FreeMemory
  3411                                  ;
  3412                                  ;=======================================================================================================================
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414                                  ;
  3415                                  ;       Routine:        AllocateMemory
  3416                                  ;
  3417                                  ;       Description:    This routine allocates a memory block for the given task.
  3418                                  ;
  3419                                  ;       In:             ECX     bytes of memory to allocate
  3420                                  ;
  3421                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3422                                  ;                               0       unable to allocate memory
  3423                                  ;
  3424                                  ;-----------------------------------------------------------------------------------------------------------------------
  3425                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3426                                                          push    ecx                                             ;
  3427                                                          push    esi                                             ;
  3428                                                          push    ds                                              ;
  3429                                  ;
  3430                                  ;       Address kernel memory structures
  3431                                  ;
  3432                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3433                                                          pop     ds                                              ;... into data segment reg
  3434                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3435                                  ;
  3436                                  ;       Set requested size to minimum block size if requested size is too small.
  3437                                  ;
  3438                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3439                                                          jae     .10                                             ;no, branch
  3440                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3441                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3442                                  ;
  3443                                  ;       Find the first free memory block large enough to satisfy the request.
  3444                                  ;
  3445                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3446                                  .20                     test    eax,eax                                         ;end of free block chain?
  3447                                                          jz      .220                                            ;yes, branch
  3448                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3449                                                          jbe     .30                                             ;yes, branch
  3450                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3451                                                          jmp     .20                                             ;continue
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;       Address the previous and next free memory blocks.
  3455                                  ;
  3456                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3457                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3458                                  ;
  3459                                  ;       Remove the free memory block from the forward free memory block chain.
  3460                                  ;
  3461                                                          test    ebx,ebx                                         ;any previous free memory block?
  3462                                                          jz      .40                                             ;no, branch
  3463                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3464                                                          jmp     .50                                             ;continue
  3465                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3466                                  ;
  3467                                  ;       Remove the free memory block from the reverse free memory block chain.
  3468                                  ;
  3469                                  .50                     test    edx,edx                                         ;any next free memory block?
  3470                                                          jz      .60                                             ;no, branch
  3471                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3472                                                          jmp     .70                                             ;continue
  3473                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3474                                  ;-----------------------------------------------------------------------------------------------------------------------
  3475                                  ;
  3476                                  ;       Determine if the free memory block can be split.
  3477                                  ;
  3478                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3479                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3480                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3481                                                          jb      .150                                            ;no, branch
  3482                                  ;
  3483                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3484                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3485                                  ;       of the requested memory size.
  3486                                  ;
  3487                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3488                                                          mov     edx,eax                                         ;memory block address
  3489                                                          add     edx,ecx                                         ;address new new next contig block
  3490                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3491                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3492                                  ;
  3493                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3494                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3495                                  ;
  3496                                                          jecxz   .80                                             ;no next contig, branch
  3497                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3498                                                          jmp     .90                                             ;continue
  3499                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3500                                  ;
  3501                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3502                                  ;
  3503                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3504                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3505                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3506                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3507                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3508                                                          xor     ebx,ebx                                         ;zero register
  3509                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3510                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3511                                  ;
  3512                                  ;       Find the proper location in the free block chain for the new free block
  3513                                  ;
  3514                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3515                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3516                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3517                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3518                                                          jbe     .110                                            ;yes, branch
  3519                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3520                                                          jmp     .100                                            ;continue
  3521                                  ;
  3522                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3523                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3524                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3525                                  ;       block of hte next block, if there is one.
  3526                                  ;
  3527                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3528                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3529                                                          jecxz   .120                                            ;branch if no next block
  3530                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3531                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3532                                                          jmp     .130                                            ;continue
  3533                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3534                                  ;
  3535                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3536                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3537                                  ;       last user block pointers if necessary.
  3538                                  ;
  3539                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3540                                                          test    ebx,ebx                                         ;is there a previous block?
  3541                                                          jz      .140                                            ;no, branch
  3542                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3543                                                          jmp     .150                                            ;continue
  3544                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3545                                  ;
  3546                                  ;       Update the newly allocated block's owner and signature.
  3547                                  ;
  3548                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3549                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3550                                                          xor     edx,edx                                         ;zero register
  3551                                                          str     dx                                              ;load the task state register
  3552                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3553                                  ;
  3554                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3555                                  ;
  3556                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3557                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3558                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3559                                                          jb      .180                                            ;branch if block belongs to next task
  3560                                                          je      .170                                            ;branch if block belongs to this task
  3561                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3562                                                          jmp     .160                                            ;continue
  3563                                  ;
  3564                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3565                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3566                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3567                                  ;       place to insert the block.
  3568                                  ;
  3569                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3570                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3571                                                          jbe     .180                                            ;yes, branch
  3572                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3573                                                          test    ecx,ecx                                         ;end of chain?
  3574                                                          jz      .180                                            ;yes, branch
  3575                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3576                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3577                                                          je      .170                                            ;yes, continue search
  3578                                  ;
  3579                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3580                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3581                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3582                                  ;       do have a previous-block, we update that block's next-block pointer.
  3583                                  ;
  3584                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3585                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3586                                                          jecxz   .190                                            ;branch if no next-task block
  3587                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3588                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3589                                                          jmp     .200                                            ;continue
  3590                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3591                                  ;
  3592                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3593                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3594                                  ;       global first and/or last user-block pointers if necessary.
  3595                                  ;
  3596                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3597                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3598                                                          jz      .210                                            ;no, branch
  3599                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3600                                                          jmp     .220                                            ;continue
  3601                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3602                                  ;
  3603                                  ;       Restore registers and return to caller.
  3604                                  ;
  3605                                  .220                    pop     ds                                              ;restore non-volatie regs
  3606                                                          pop     esi                                             ;
  3607                                                          pop     ecx                                             ;
  3608                                                          pop     ebx                                             ;
  3609                                                          ret                                                     ;return
  3610                                  ;-----------------------------------------------------------------------------------------------------------------------
  3611                                  ;
  3612                                  ;       Routine:        FreeMemory
  3613                                  ;
  3614                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3615                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3616                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3617                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3618                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3619                                  ;
  3620                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3621                                  ;
  3622                                  ;       Out:            EAX     -1      invalid memory block
  3623                                  ;                               0       memory block freed
  3624                                  ;
  3625                                  ;-----------------------------------------------------------------------------------------------------------------------
  3626                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3627                                                          push    ecx                                             ;
  3628                                                          push    esi                                             ;
  3629                                                          push    edi                                             ;
  3630                                                          push    ds                                              ;
  3631                                                          push    es                                              ;
  3632                                  ;
  3633                                  ;       Address the root memory structure
  3634                                  ;
  3635                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3636                                                          pop     es                                              ;... into extra segment reg
  3637                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3638                                                          pop     ds                                              ;... into data segment reg
  3639                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3640                                                          mov     edi,edx                                         ;memory block address
  3641                                  ;
  3642                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3643                                  ;
  3644                                                          xor     eax,eax                                         ;indicate success
  3645                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3646                                                          je      .240                                            ;yes, branch
  3647                                                          dec     eax                                             ;indicate failure
  3648                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3649                                                          jne     .240                                            ;no, branch
  3650                                  ;-----------------------------------------------------------------------------------------------------------------------
  3651                                  ;
  3652                                  ;       Unlink the USER memory block.
  3653                                  ;
  3654                                  ;-----------------------------------------------------------------------------------------------------------------------
  3655                                  ;
  3656                                  ;       Set the block signature. Reset owner.
  3657                                  ;
  3658                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3659                                                          xor     eax,eax                                         ;zero register
  3660                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3661                                  ;
  3662                                  ;       Wipe user area.
  3663                                  ;
  3664                                                          push    edi                                             ;save block address
  3665                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3666                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3667                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3668                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3669                                                          rep     stosb                                           ;clear memory
  3670                                                          pop     edi                                             ;restore block address
  3671                                  ;
  3672                                  ;       Address the preceding and following USER memory blocks
  3673                                  ;
  3674                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3675                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3676                                  ;
  3677                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3678                                  ;       pointer to point to the USER block following this block.
  3679                                  ;
  3680                                                          test    ebx,ebx                                         ;is there a previous block?
  3681                                                          jz      .10                                             ;no, branch
  3682                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3683                                                          jmp     .20                                             ;continue
  3684                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3685                                  ;
  3686                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3687                                  ;       pointer to point to the USER block preceding this block.
  3688                                  ;
  3689                                  .20                     jecxz   .30                                             ;branch if no next block
  3690                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3691                                                          jmp     .40                                             ;continue
  3692                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3693                                  ;-----------------------------------------------------------------------------------------------------------------------
  3694                                  ;
  3695                                  ;       Merge with a previous contiguous FREE memory block.
  3696                                  ;
  3697                                  ;-----------------------------------------------------------------------------------------------------------------------
  3698                                  ;
  3699                                  ;       Address the preceding and following contiguous memory blocks.
  3700                                  ;
  3701                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3702                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3703                                  ;
  3704                                  ;       Verify we have a previous contiguous FREE block.
  3705                                  ;
  3706                                                          test    ebx,ebx                                         ;is there a previous block?
  3707                                                          jz      .100                                            ;no, branch
  3708                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3709                                                          jne     .100                                            ;no, branch
  3710                                  ;
  3711                                  ;       Update adjacent block's contiguous pointers.
  3712                                  ;
  3713                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3714                                                          jecxz   .50                                             ;branch if no next contiguous block
  3715                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3716                                                          jmp     .60                                             ;continue
  3717                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3718                                  ;
  3719                                  ;       Update the size of the merged FREE block.
  3720                                  ;
  3721                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3722                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3723                                  ;
  3724                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3725                                  ;
  3726                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3727                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3728                                                          rep     stosb                                           ;clear memory header
  3729                                                          mov     edi,ebx                                         ;current block is now previous block
  3730                                  ;-----------------------------------------------------------------------------------------------------------------------
  3731                                  ;
  3732                                  ;       Unlink the previous contiguous FREE memory block
  3733                                  ;
  3734                                  ;-----------------------------------------------------------------------------------------------------------------------
  3735                                  ;
  3736                                  ;       Address the preceding and following USER memory blocks
  3737                                  ;
  3738                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3739                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3740                                  ;
  3741                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3742                                  ;       block pointer.
  3743                                  ;
  3744                                                          test    ebx,ebx                                         ;is there a previous block?
  3745                                                          jz      .70                                             ;no, branch
  3746                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3747                                                          jmp     .80                                             ;branch
  3748                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3749                                  ;
  3750                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3751                                  ;       pointer.
  3752                                  ;
  3753                                  .80                     jecxz   .90                                             ;branch if no next block
  3754                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3755                                                          jmp     .100                                            ;continue
  3756                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3757                                  ;-----------------------------------------------------------------------------------------------------------------------
  3758                                  ;
  3759                                  ;       Merge with a following contiguous FREE memory block.
  3760                                  ;
  3761                                  ;-----------------------------------------------------------------------------------------------------------------------
  3762                                  ;
  3763                                  ;       Verify we have a following contiguous FREE block.
  3764                                  ;
  3765                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3766                                                          jecxz   .170                                            ;branch if no next contiguous block
  3767                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3768                                                          jne     .170                                            ;no, branch
  3769                                  ;
  3770                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3771                                  ;
  3772                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3773                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3774                                  ;
  3775                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3776                                  ;
  3777                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3778                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3779                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3780                                                          jz      .110                                            ;no, branch
  3781                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3782                                                          jmp     .120                                            ;continue
  3783                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3784                                  ;-----------------------------------------------------------------------------------------------------------------------
  3785                                  ;
  3786                                  ;       Unlink the following contiguous FREE memory block
  3787                                  ;
  3788                                  ;-----------------------------------------------------------------------------------------------------------------------
  3789                                  ;
  3790                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3791                                  ;
  3792                                  .120                    push    edi                                             ;save this block
  3793                                                          mov     edi,ecx                                         ;next contiguous block
  3794                                                          push    ecx                                             ;save next contiguous block
  3795                                  ;
  3796                                  ;       Address the preceding and following USER memory blocks
  3797                                  ;
  3798                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3799                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3800                                  ;
  3801                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3802                                  ;       block pointer.
  3803                                  ;
  3804                                                          test    ebx,ebx                                         ;is there a previous block?
  3805                                                          jz      .130                                            ;no, branch
  3806                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3807                                                          jmp     .140                                            ;branch
  3808                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3809                                  ;
  3810                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3811                                  ;       pointer.
  3812                                  ;
  3813                                  .140                    jecxz   .150                                            ;branch if no next block
  3814                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3815                                                          jmp     .160                                            ;continue
  3816                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3817                                  ;
  3818                                  ;       Clear next contiguous block's header
  3819                                  ;
  3820                                  .160                    pop     edi                                             ;next congiguous block pointer
  3821                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3822                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3823                                                          rep     stosb                                           ;clear memory header
  3824                                                          pop     edi                                             ;this block's pointer
  3825                                  ;-----------------------------------------------------------------------------------------------------------------------
  3826                                  ;
  3827                                  ;       Insert the final FREE block back into the block chain.
  3828                                  ;
  3829                                  ;-----------------------------------------------------------------------------------------------------------------------
  3830                                  ;
  3831                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3832                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3833                                  ;       all are smaller in size.
  3834                                  ;
  3835                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3836                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3837                                  .180                    jecxz   .190                                            ;exit if no ptr
  3838                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3839                                                          jb      .190                                            ;yes, branch
  3840                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3841                                                          jmp     .180                                            ;continue
  3842                                  ;
  3843                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3844                                  ;       larger free block. Update the next block's previous block pointer.
  3845                                  ;
  3846                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3847                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3848                                                          jecxz   .200                                            ;branch if no block found
  3849                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3850                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3851                                                          jmp     .210                                            ;continue
  3852                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3853                                  ;
  3854                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3855                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3856                                  ;       next pointer.
  3857                                  ;
  3858                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3859                                                          test    ebx,ebx                                         ;do we have a previous block?
  3860                                                          jz      .220                                            ;no, branch
  3861                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3862                                                          jmp     .230                                            ;continue
  3863                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3864                                  ;
  3865                                  ;       The memory free has completed.
  3866                                  ;
  3867                                  .230                    xor     eax,eax                                         ;indicate success
  3868                                  ;
  3869                                  ;       Restore and return.
  3870                                  ;
  3871                                  .240                    pop     es                                              ;restore non-volatile regs
  3872                                                          pop     ds                                              ;
  3873                                                          pop     edi                                             ;
  3874                                                          pop     esi                                             ;
  3875                                                          pop     ecx                                             ;
  3876                                                          pop     ebx                                             ;
  3877                                                          ret                                                     ;return
  3878                                  ;=======================================================================================================================
  3879                                  ;
  3880                                  ;       String Helper Routines
  3881                                  ;
  3882                                  ;       CompareMemory
  3883                                  ;       UpperCaseString
  3884                                  ;
  3885                                  ;=======================================================================================================================
  3886                                  ;-----------------------------------------------------------------------------------------------------------------------
  3887                                  ;
  3888                                  ;       Routine:        CompareMemory
  3889                                  ;
  3890                                  ;       Description:    This routine compares two byte arrays.
  3891                                  ;
  3892                                  ;       In:             DS:EDX  first source address
  3893                                  ;                       DS:EBX  second source address
  3894                                  ;                       ECX     comparison length
  3895                                  ;
  3896                                  ;       Out:            EDX     first source address
  3897                                  ;                       EBX     second source address
  3898                                  ;                       ECX     0       array 1 = array 2
  3899                                  ;                               <0      array 1 < array 2
  3900                                  ;                               >0      array 1 > array 2
  3901                                  ;
  3902                                  ;-----------------------------------------------------------------------------------------------------------------------
  3903                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3904                                                          push    edi                                             ;
  3905                                                          push    es                                              ;
  3906                                                          push    ds                                              ;copy DS
  3907                                                          pop     es                                              ;... to ES
  3908                                                          mov     esi,edx                                         ;first source address
  3909                                                          mov     edi,ebx                                         ;second source address
  3910                                                          cld                                                     ;forward strings
  3911                                                          rep     cmpsb                                           ;compare bytes
  3912                                                          mov     al,0                                            ;default result
  3913                                                          jz      .10                                             ;branch if arrays equal
  3914                                                          mov     al,1                                            ;positive result
  3915                                                          jnc     .10                                             ;branch if target > source
  3916                                                          mov     al,-1                                           ;negative result
  3917                                  .10                     movsx   ecx,al                                          ;extend sign
  3918                                                          pop     es                                              ;restore non-volatile regs
  3919                                                          pop     edi                                             ;
  3920                                                          pop     esi                                             ;
  3921                                                          ret                                                     ;return
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;       Routine:        UpperCaseString
  3925                                  ;
  3926                                  ;       Description:    This routine places all characters in the given string to upper case.
  3927                                  ;
  3928                                  ;       In:             DS:EDX  string address
  3929                                  ;
  3930                                  ;       Out:            EDX     string address
  3931                                  ;
  3932                                  ;-----------------------------------------------------------------------------------------------------------------------
  3933                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3934                                                          mov     esi,edx                                         ;string address
  3935                                                          cld                                                     ;forward strings
  3936                                  .10                     lodsb                                                   ;string character
  3937                                                          test    al,al                                           ;null?
  3938                                                          jz      .20                                             ;yes, skip ahead
  3939                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3940                                                          jb      .10                                             ;no, continue
  3941                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3942                                                          ja      .10                                             ;no, continue
  3943                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3944                                                          mov     [esi-1],al                                      ;upper character
  3945                                                          jmp     .10                                             ;continue
  3946                                  .20                     pop     esi                                             ;restore non-volatile regs
  3947                                                          ret                                                     ;return
  3948                                  ;=======================================================================================================================
  3949                                  ;
  3950                                  ;       Console Helper Routines
  3951                                  ;
  3952                                  ;       FirstConsoleColumn
  3953                                  ;       GetConsoleChar
  3954                                  ;       GetConsoleString
  3955                                  ;       NextConsoleColumn
  3956                                  ;       NextConsoleRow
  3957                                  ;       PreviousConsoleColumn
  3958                                  ;       PutConsoleChar
  3959                                  ;       PutConsoleHexByte
  3960                                  ;       PutConsoleHexDword
  3961                                  ;       PutConsoleHexWord
  3962                                  ;       PutConsoleOIAChar
  3963                                  ;       PutConsoleOIAShift
  3964                                  ;       PutConsoleString
  3965                                  ;       Yield
  3966                                  ;
  3967                                  ;=======================================================================================================================
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969                                  ;
  3970                                  ;       Routine:        FirstConsoleColumn
  3971                                  ;
  3972                                  ;       Description:    This routine resets the console column to start of the row.
  3973                                  ;
  3974                                  ;       In:             DS      OS data selector
  3975                                  ;
  3976                                  ;-----------------------------------------------------------------------------------------------------------------------
  3977                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3978                                                          mov     [wbConsoleColumn],al                            ;save column
  3979                                                          ret                                                     ;return
  3980                                  ;-----------------------------------------------------------------------------------------------------------------------
  3981                                  ;
  3982                                  ;       Routine:        GetConsoleChar
  3983                                  ;
  3984                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3985                                  ;
  3986                                  ;       Out:            AL      ASCII character code
  3987                                  ;                       AH      keyboard scan code
  3988                                  ;
  3989                                  ;-----------------------------------------------------------------------------------------------------------------------
  3990                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3991                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3992                                                          or      eax,eax                                         ;do we have a message?
  3993                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3994                                                          push    eax                                             ;save key codes
  3995                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3996                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3997                                                          pop     eax                                             ;restore key codes
  3998                                                          jne     GetConsoleChar                                  ;no, try again
  3999                                                          and     eax,0000ffffh                                   ;mask for key codes
  4000                                                          ret                                                     ;return
  4001                                  ;-----------------------------------------------------------------------------------------------------------------------
  4002                                  ;
  4003                                  ;       Routine:        GetConsoleString
  4004                                  ;
  4005                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4006                                  ;
  4007                                  ;       In:             DS:EDX  target buffer address
  4008                                  ;                       ECX     maximum number of characters to accept
  4009                                  ;                       BH      echo to terminal
  4010                                  ;                       BL      terminating character
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4014                                                          push    esi                                             ;
  4015                                                          push    edi                                             ;
  4016                                                          push    es                                              ;
  4017                                                          push    ds                                              ;load data segment selector ...
  4018                                                          pop     es                                              ;... into extra segment register
  4019                                                          mov     edi,edx                                         ;edi = target buffer
  4020                                                          push    ecx                                             ;save maximum characters
  4021                                                          xor     al,al                                           ;zero register
  4022                                                          cld                                                     ;forward strings
  4023                                                          rep     stosb                                           ;zero fill buffer
  4024                                                          pop     ecx                                             ;maximum characters
  4025                                                          mov     edi,edx                                         ;edi = target buffer
  4026                                                          mov     esi,edx                                         ;esi = target buffer
  4027                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4028                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4029                                                          cmp     al,bl                                           ;is this the terminator?
  4030                                                          je      .50                                             ;yes, exit
  4031                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4032                                                          jne     .30                                             ;no, skip ahead
  4033                                                          cmp     esi,edi                                         ;at start of buffer?
  4034                                                          je      .20                                             ;yes, get next character
  4035                                                          dec     edi                                             ;backup target pointer
  4036                                                          mov     byte [edi],0                                    ;zero previous character
  4037                                                          inc     ecx                                             ;increment remaining chars
  4038                                                          test    bh,1                                            ;echo to console?
  4039                                                          jz      .20                                             ;no, get next character
  4040                                                          call    PreviousConsoleColumn                           ;backup console position
  4041                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4042                                                          call    PutConsoleChar                                  ;write space to console
  4043                                                          call    PlaceCursor                                     ;position the cursor
  4044                                                          jmp     .20                                             ;get next character
  4045                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4046                                                          jb      .20                                             ;no, get another character
  4047                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4048                                                          ja      .20                                             ;no, get another character
  4049                                                          stosb                                                   ;store character in buffer
  4050                                                          test    bh,1                                            ;echo to console?
  4051                                                          jz      .40                                             ;no, skip ahead
  4052                                                          call    PutConsoleChar                                  ;write character to console
  4053                                                          call    NextConsoleColumn                               ;advance console position
  4054                                                          call    PlaceCursor                                     ;position the cursor
  4055                                  .40                     dec     ecx                                             ;decrement remaining chars
  4056                                                          jmp     .10                                             ;next
  4057                                  .50                     xor     al,al                                           ;null
  4058                                                          stosb                                                   ;terminate buffer
  4059                                                          pop     es                                              ;restore non-volatile regs
  4060                                                          pop     edi                                             ;
  4061                                                          pop     esi                                             ;
  4062                                                          pop     ecx                                             ;
  4063                                                          ret                                                     ;return
  4064                                  ;-----------------------------------------------------------------------------------------------------------------------
  4065                                  ;
  4066                                  ;       Routine:        NextConsoleColumn
  4067                                  ;
  4068                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4069                                  ;                       incremented if the end of the current row is reached.
  4070                                  ;
  4071                                  ;       In:             DS      OS data selector
  4072                                  ;
  4073                                  ;-----------------------------------------------------------------------------------------------------------------------
  4074                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4075                                                          inc     al                                              ;increment column
  4076                                                          mov     [wbConsoleColumn],al                            ;save column
  4077                                                          cmp     al,ECONCOLS                                     ;end of row?
  4078                                                          jb      .10                                             ;no, skip ahead
  4079                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4080                                                          call    NextConsoleRow                                  ;line feed to next row
  4081                                  .10                     ret                                                     ;return
  4082                                  ;-----------------------------------------------------------------------------------------------------------------------
  4083                                  ;
  4084                                  ;       Routine:        NextConsoleRow
  4085                                  ;
  4086                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4087                                  ;
  4088                                  ;       In:             DS      OS data selector
  4089                                  ;
  4090                                  ;-----------------------------------------------------------------------------------------------------------------------
  4091                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4092                                                          inc     al                                              ;increment row
  4093                                                          mov     [wbConsoleRow],al                               ;save row
  4094                                                          cmp     al,ECONROWS                                     ;end of screen?
  4095                                                          jb      .10                                             ;no, skip ahead
  4096                                                          call    ScrollConsoleRow                                ;scroll up one row
  4097                                                          mov     al,[wbConsoleRow]                               ;row
  4098                                                          dec     al                                              ;decrement row
  4099                                                          mov     [wbConsoleRow],al                               ;save row
  4100                                  .10                     ret                                                     ;return
  4101                                  ;-----------------------------------------------------------------------------------------------------------------------
  4102                                  ;
  4103                                  ;       Routine:        PreviousConsoleColumn
  4104                                  ;
  4105                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4106                                  ;                       the column is set to the last position in the row and the row is decremented.
  4107                                  ;
  4108                                  ;       In:             DS      OS data selector
  4109                                  ;
  4110                                  ;-----------------------------------------------------------------------------------------------------------------------
  4111                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4112                                                          or      al,al                                           ;start of row?
  4113                                                          jnz     .10                                             ;no, skip ahead
  4114                                                          mov     ah,[wbConsoleRow]                               ;current row
  4115                                                          or      ah,ah                                           ;top of screen?
  4116                                                          jz      .20                                             ;yes, exit with no change
  4117                                                          dec     ah                                              ;decrement row
  4118                                                          mov     [wbConsoleRow],ah                               ;save row
  4119                                                          mov     al,ECONCOLS                                     ;set maximum column
  4120                                  .10                     dec     al                                              ;decrement column
  4121                                                          mov     [wbConsoleColumn],al                            ;save column
  4122                                  .20                     ret                                                     ;return
  4123                                  ;-----------------------------------------------------------------------------------------------------------------------
  4124                                  ;
  4125                                  ;       Routine:        PutConsoleChar
  4126                                  ;
  4127                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4128                                  ;
  4129                                  ;       In:             AL      ASCII character
  4130                                  ;                       DS      OS data selector
  4131                                  ;
  4132                                  ;-----------------------------------------------------------------------------------------------------------------------
  4133                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4134                                                          push    es                                              ;
  4135                                                          push    EGDTCGA                                         ;load CGA selector ...
  4136                                                          pop     es                                              ;... into extra segment reg
  4137                                                          mov     cl,[wbConsoleColumn]                            ;column
  4138                                                          mov     ch,[wbConsoleRow]                               ;row
  4139                                                          call    SetConsoleChar                                  ;put character at row, column
  4140                                                          pop     es                                              ;restore non-volatile regs
  4141                                                          pop     ecx                                             ;
  4142                                                          ret                                                     ;return
  4143                                  ;-----------------------------------------------------------------------------------------------------------------------
  4144                                  ;
  4145                                  ;       Routine:        PutConsoleHexByte
  4146                                  ;
  4147                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4148                                  ;
  4149                                  ;       In:             AL      byte value
  4150                                  ;                       CL      column
  4151                                  ;                       CH      row
  4152                                  ;                       DS      OS data selector
  4153                                  ;                       ES      CGA selector
  4154                                  ;
  4155                                  ;-----------------------------------------------------------------------------------------------------------------------
  4156                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4157                                                          mov     bl,al                                           ;save byte value
  4158                                                          shr     al,4                                            ;hi-order nybble
  4159                                                          or      al,030h                                         ;apply ASCII zone
  4160                                                          cmp     al,03ah                                         ;numeric?
  4161                                                          jb      .10                                             ;yes, skip ahead
  4162                                                          add     al,7                                            ;add ASCII offset for alpha
  4163                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4164                                                          mov     al,bl                                           ;byte value
  4165                                                          and     al,0fh                                          ;lo-order nybble
  4166                                                          or      al,30h                                          ;apply ASCII zone
  4167                                                          cmp     al,03ah                                         ;numeric?
  4168                                                          jb      .20                                             ;yes, skip ahead
  4169                                                          add     al,7                                            ;add ASCII offset for alpha
  4170                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4171                                                          pop     ebx                                             ;restore non-volatile regs
  4172                                                          ret                                                     ;return
  4173                                  ;-----------------------------------------------------------------------------------------------------------------------
  4174                                  ;
  4175                                  ;       Routine:        PutConsoleHexDword
  4176                                  ;
  4177                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4178                                  ;
  4179                                  ;       In:             EAX     value
  4180                                  ;                       CL      column
  4181                                  ;                       CH      row
  4182                                  ;                       DS      OS data selector
  4183                                  ;                       ES      CGA selector
  4184                                  ;
  4185                                  ;-----------------------------------------------------------------------------------------------------------------------
  4186                                  PutConsoleHexDword      push    eax
  4187                                                          shr     eax,16
  4188                                                          call    PutConsoleHexWord
  4189                                                          pop     eax
  4190                                                          call    PutConsoleHexWord
  4191                                                          ret
  4192                                  ;-----------------------------------------------------------------------------------------------------------------------
  4193                                  ;
  4194                                  ;       Routine:        PutConsoleHexWord
  4195                                  ;
  4196                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4197                                  ;
  4198                                  ;       In:             EAX     value
  4199                                  ;                       CL      column
  4200                                  ;                       CH      row
  4201                                  ;                       DS      OS data selector
  4202                                  ;                       ES      CGA selector
  4203                                  ;
  4204                                  ;-----------------------------------------------------------------------------------------------------------------------
  4205                                  PutConsoleHexWord       push    eax
  4206                                                          shr     eax,8
  4207                                                          call    PutConsoleHexByte
  4208                                                          pop     eax
  4209                                                          call    PutConsoleHexByte
  4210                                                          ret
  4211                                  ;-----------------------------------------------------------------------------------------------------------------------
  4212                                  ;
  4213                                  ;       Routine:        PutConsoleOIAChar
  4214                                  ;
  4215                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4216                                  ;
  4217                                  ;       In:             DS      OS data selector
  4218                                  ;
  4219                                  ;-----------------------------------------------------------------------------------------------------------------------
  4220                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4221                                                          push    ecx                                             ;
  4222                                                          push    esi                                             ;
  4223                                                          push    ds                                              ;
  4224                                                          push    es                                              ;
  4225                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4226                                                          pop     ds                                              ;... into data segment register
  4227                                                          push    EGDTCGA                                         ;load CGA selector ...
  4228                                                          pop     es                                              ;... into extra segment register
  4229                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4230                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4231                                                          mov     bl,0                                            ;starting column
  4232                                                          mov     ecx,6                                           ;maximum scan codes
  4233                                  .10                     push    ecx                                             ;save remaining count
  4234                                                          mov     ecx,ebx                                         ;row, column
  4235                                                          lodsb                                                   ;read scan code
  4236                                                          or      al,al                                           ;scan code present?
  4237                                                          jz      .20                                             ;no, skip ahead
  4238                                                          call    PutConsoleHexByte                               ;display scan code
  4239                                                          jmp     .30                                             ;continue
  4240                                  .20                     mov     al,' '                                          ;ASCII space
  4241                                                          call    SetConsoleChar                                  ;display space
  4242                                                          mov     al,' '                                          ;ASCII space
  4243                                                          call    SetConsoleChar                                  ;display space
  4244                                  .30                     add     bl,2                                            ;next column (+2)
  4245                                                          pop     ecx                                             ;restore remaining
  4246                                                          loop    .10                                             ;next code
  4247                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4248                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4249                                                          jb      .40                                             ;no, skip ahead
  4250                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4251                                                          ja      .40                                             ;no, skip ahead
  4252                                                          mov     ch,bh                                           ;OIA row
  4253                                                          mov     cl,40                                           ;character display column
  4254                                                          call    SetConsoleChar                                  ;display ASCII character
  4255                                  .40                     pop     es                                              ;restore non-volatile regs
  4256                                                          pop     ds                                              ;
  4257                                                          pop     esi                                             ;
  4258                                                          pop     ecx                                             ;
  4259                                                          pop     ebx                                             ;
  4260                                                          ret                                                     ;return
  4261                                  ;-----------------------------------------------------------------------------------------------------------------------
  4262                                  ;
  4263                                  ;       Routine:        PutConsoleOIAShift
  4264                                  ;
  4265                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4266                                  ;
  4267                                  ;       In:             BL      shift flags
  4268                                  ;                       BH      lock flags
  4269                                  ;                       DS      OS data selector
  4270                                  ;
  4271                                  ;-----------------------------------------------------------------------------------------------------------------------
  4272                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4273                                                          push    es                                              ;
  4274                                                          push    EGDTCGA                                         ;load CGA selector ...
  4275                                                          pop     es                                              ;... into ES register
  4276                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4277                                                          mov     al,EASCIISPACE                                  ;space is default character
  4278                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4279                                                          jz      .10                                             ;no, skip ahead
  4280                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4281                                  .10                     mov     cl,14                                           ;indicator column
  4282                                                          call    SetConsoleChar                                  ;display ASCII character
  4283                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4284                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4285                                                          jz      .20                                             ;no, skip ahead
  4286                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4287                                  .20                     mov     cl,64                                           ;indicator column
  4288                                                          call    SetConsoleChar                                  ;display ASCII character
  4289                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4290                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4291                                                          jz      .30                                             ;no, skip ahead
  4292                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4293                                  .30                     mov     cl,15                                           ;indicator column
  4294                                                          call    SetConsoleChar                                  ;display ASCII character
  4295                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4296                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4297                                                          jz      .40                                             ;no, skip ahead
  4298                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4299                                  .40                     mov     cl,63                                           ;indicator column
  4300                                                          call    SetConsoleChar                                  ;display ASCII character
  4301                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4302                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4303                                                          jz      .50                                             ;no, skip ahead
  4304                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4305                                  .50                     mov     cl,16                                           ;indicator column
  4306                                                          call    SetConsoleChar                                  ;display ASCII character
  4307                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4308                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4309                                                          jz      .60                                             ;no, skip ahead
  4310                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4311                                  .60                     mov     cl,62                                           ;indicator column
  4312                                                          call    SetConsoleChar                                  ;display ASCII character
  4313                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4314                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4315                                                          jz      .70                                             ;no, skip ahead
  4316                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4317                                  .70                     mov     cl,78                                           ;indicator column
  4318                                                          call    SetConsoleChar                                  ;display ASCII character
  4319                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4320                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4321                                                          jz      .80                                             ;no, skip ahead
  4322                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4323                                  .80                     mov     cl,77                                           ;indicator column
  4324                                                          call    SetConsoleChar                                  ;display ASCII character
  4325                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4326                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4327                                                          jz      .90                                             ;no, skip ahead
  4328                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4329                                  .90                     mov     cl,76                                           ;indicator column
  4330                                                          call    SetConsoleChar                                  ;display ASCII character
  4331                                                          pop     es                                              ;restore non-volatile regs
  4332                                                          pop     ecx                                             ;
  4333                                                          ret                                                     ;return
  4334                                  ;-----------------------------------------------------------------------------------------------------------------------
  4335                                  ;
  4336                                  ;       Routine:        PutConsoleString
  4337                                  ;
  4338                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4339                                  ;                       console position as needed.
  4340                                  ;
  4341                                  ;       In:             EDX     source address
  4342                                  ;                       DS      OS data selector
  4343                                  ;
  4344                                  ;-----------------------------------------------------------------------------------------------------------------------
  4345                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4346                                                          mov     esi,edx                                         ;source address
  4347                                                          cld                                                     ;forward strings
  4348                                  .10                     lodsb                                                   ;ASCII character
  4349                                                          or      al,al                                           ;end of string?
  4350                                                          jz      .40                                             ;yes, skip ahead
  4351                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4352                                                          jne     .20                                             ;no, skip ahead
  4353                                                          call    FirstConsoleColumn                              ;move to start of row
  4354                                                          jmp     .10                                             ;next character
  4355                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4356                                                          jne     .30                                             ;no, skip ahead
  4357                                                          call    NextConsoleRow                                  ;move to next row
  4358                                                          jmp     .10                                             ;next character
  4359                                  .30                     call    PutConsoleChar                                  ;output character to console
  4360                                                          call    NextConsoleColumn                               ;advance to next column
  4361                                                          jmp     .10                                             ;next character
  4362                                  .40                     pop     esi                                             ;restore non-volatile regs
  4363                                                          ret                                                     ;return
  4364                                  ;-----------------------------------------------------------------------------------------------------------------------
  4365                                  ;
  4366                                  ;       Routine:        Yield
  4367                                  ;
  4368                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4369                                  ;
  4370                                  ;-----------------------------------------------------------------------------------------------------------------------
  4371                                  Yield                   sti                                                     ;enable maskagle interrupts
  4372                                                          hlt                                                     ;halt until external interrupt
  4373                                                          ret                                                     ;return
  4374                                  ;=======================================================================================================================
  4375                                  ;
  4376                                  ;       Data-Type Conversion Helper Routines
  4377                                  ;
  4378                                  ;       DecimalToUnsigned
  4379                                  ;       HexadecimalToUnsigned
  4380                                  ;       UnsignedToDecimalString
  4381                                  ;       UnsignedToHexadecimal
  4382                                  ;
  4383                                  ;=======================================================================================================================
  4384                                  ;-----------------------------------------------------------------------------------------------------------------------
  4385                                  ;
  4386                                  ;       Routine:        DecimalToUnsigned
  4387                                  ;
  4388                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4389                                  ;
  4390                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4391                                  ;
  4392                                  ;       Output:         EAX     unsigned integer value
  4393                                  ;
  4394                                  ;-----------------------------------------------------------------------------------------------------------------------
  4395                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4396                                                          mov     esi,edx                                         ;source address
  4397                                                          xor     edx,edx                                         ;zero total
  4398                                  .10                     lodsb                                                   ;source byte
  4399                                                          cmp     al,','                                          ;comma?
  4400                                                          je      .10                                             ;yes, ignore
  4401                                                          test    al,al                                           ;end of string?
  4402                                                          jz      .30                                             ;yes, done
  4403                                                          cmp     al,'.'                                          ;decimal point?
  4404                                                          je      .30                                             ;yes, done
  4405                                                          cmp     al,'0'                                          ;numeral?
  4406                                                          jb      .20                                             ;no, invalid string
  4407                                                          cmp     al,'9'                                          ;numeral?
  4408                                                          ja      .20                                             ;no, invalid string
  4409                                                          and     al,00Fh                                         ;mask ASCII zone
  4410                                                          push    eax                                             ;save numeral
  4411                                                          shl     edx,1                                           ;total * 2
  4412                                                          mov     eax,edx                                         ;total * 2
  4413                                                          shl     edx,2                                           ;total * 8
  4414                                                          add     edx,eax                                         ;total * 10
  4415                                                          pop     eax                                             ;restore numeral
  4416                                                          add     edx,eax                                         ;accumulate decimal digit
  4417                                                          xor     eax,eax                                         ;zero register
  4418                                                          jmp     .10                                             ;next
  4419                                  .20                     xor     edx,edx                                         ;zero result on error
  4420                                  .30                     mov     eax,edx                                         ;result
  4421                                                          pop     esi                                             ;restore non-volatile regs
  4422                                                          ret                                                     ;return
  4423                                  ;-----------------------------------------------------------------------------------------------------------------------
  4424                                  ;
  4425                                  ;       Routine:        HexadecimalToUnsigned
  4426                                  ;
  4427                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4428                                  ;
  4429                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4430                                  ;
  4431                                  ;       Output:         EAX     unsigned integer value
  4432                                  ;
  4433                                  ;-----------------------------------------------------------------------------------------------------------------------
  4434                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4435                                                          mov     esi,edx                                         ;source address
  4436                                                          xor     edx,edx                                         ;zero register
  4437                                  .10                     lodsb                                                   ;source byte
  4438                                                          test    al,al                                           ;end of string?
  4439                                                          jz      .30                                             ;yes, branch
  4440                                                          cmp     al,'9'                                          ;hexadecimal?
  4441                                                          jna     .20                                             ;no, skip ahead
  4442                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4443                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4444                                                          shl     edx,4                                           ;previous total x 16
  4445                                                          add     edx,eax                                         ;add prior value x 16
  4446                                                          jmp     .10                                             ;next
  4447                                  .30                     mov     eax,edx                                         ;result
  4448                                                          pop     esi                                             ;restore non-volatile regs
  4449                                                          ret                                                     ;return
  4450                                  ;-----------------------------------------------------------------------------------------------------------------------
  4451                                  ;
  4452                                  ;       Routine:        UnsignedToDecimalString
  4453                                  ;
  4454                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4455                                  ;
  4456                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4457                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4458                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4459                                  ;                       ECX     32-bit binary
  4460                                  ;                       DS:EDX  output buffer address
  4461                                  ;
  4462                                  ;-----------------------------------------------------------------------------------------------------------------------
  4463                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4464                                                          push    ecx                                             ;
  4465                                                          push    edi                                             ;
  4466                                                          push    es                                              ;
  4467                                                          push    ds                                              ;load data selector
  4468                                                          pop     es                                              ;... into extra segment reg
  4469                                                          mov     edi,edx                                         ;output buffer address
  4470                                                          and     bh,00001111b                                    ;zero internal flags
  4471                                                          mov     edx,ecx                                         ;binary
  4472                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4473                                                          call    .30                                             ;divide and store
  4474                                                          mov     ecx,100000000                                   ;10^8 divisor
  4475                                                          call    .10                                             ;divide and store
  4476                                                          mov     ecx,10000000                                    ;10^7 divisor
  4477                                                          call    .30                                             ;divide and store
  4478                                                          mov     ecx,1000000                                     ;10^6 divisor
  4479                                                          call    .30                                             ;divide and store
  4480                                                          mov     ecx,100000                                      ;10^5 divisor
  4481                                                          call    .10                                             ;divide and store
  4482                                                          mov     ecx,10000                                       ;10^4 divisor
  4483                                                          call    .30                                             ;divide and store
  4484                                                          mov     ecx,1000                                        ;10^3 divisor
  4485                                                          call    .30                                             ;divide and store
  4486                                                          mov     ecx,100                                         ;10^2 divisor
  4487                                                          call    .10                                             ;divide and store
  4488                                                          mov     ecx,10                                          ;10^2 divisor
  4489                                                          call    .30                                             ;divide and store
  4490                                                          mov     eax,edx                                         ;10^1 remainder
  4491                                                          call    .40                                             ;store
  4492                                                          xor     al,al                                           ;null terminator
  4493                                                          stosb
  4494                                                          pop     es                                              ;restore non-volatile regs
  4495                                                          pop     edi                                             ;
  4496                                                          pop     ecx                                             ;
  4497                                                          pop     ebx                                             ;
  4498                                                          ret                                                     ;return
  4499                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4500                                                          jz      .30                                             ;no, branch
  4501                                                          test    bh,00000001b                                    ;trim leading zeros?
  4502                                                          jz      .20                                             ;no, store delim
  4503                                                          test    bh,00010000b                                    ;non-zero found?
  4504                                                          jz      .30                                             ;no, branch
  4505                                  .20                     mov     al,','                                          ;delimiter
  4506                                                          stosb                                                   ;store delimiter
  4507                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4508                                                          xor     edx,edx                                         ;zero hi-order
  4509                                                          div     ecx                                             ;divide by power of 10
  4510                                                          test    al,al                                           ;zero?
  4511                                                          jz      .50                                             ;yes, branch
  4512                                                          or      bh,00010000b                                    ;non-zero found
  4513                                  .40                     or      al,30h                                          ;ASCII zone
  4514                                                          stosb                                                   ;store digit
  4515                                                          ret                                                     ;return
  4516                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4517                                                          jz      .40                                             ;no, store and continue
  4518                                                          test    bh,00010000b                                    ;non-zero found?
  4519                                                          jnz     .40                                             ;yes, store and continue
  4520                                                          ret                                                     ;return
  4521                                  ;-----------------------------------------------------------------------------------------------------------------------
  4522                                  ;
  4523                                  ;       Routine:        UnsignedToHexadecimal
  4524                                  ;
  4525                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4526                                  ;
  4527                                  ;       Input:          DS:EDX  output buffer address
  4528                                  ;                       ECX     32-bit binary
  4529                                  ;
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4532                                                          mov     edi,edx                                         ;output buffer address
  4533                                                          mov     edx,ecx                                         ;32-bit unsigned
  4534                                                          xor     ecx,ecx                                         ;zero register
  4535                                                          mov     cl,8                                            ;nybble count
  4536                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4537                                                          mov     al,dl                                           ;????bbbb
  4538                                                          and     al,0fh                                          ;mask out bits 4-7
  4539                                                          or      al,30h                                          ;mask in ascii zone
  4540                                                          cmp     al,3ah                                          ;A through F?
  4541                                                          jb      .20                                             ;no, skip ahead
  4542                                                          add     al,7                                            ;41h through 46h
  4543                                  .20                     stosb                                                   ;store hexnum
  4544                                                          loop    .10                                             ;next nybble
  4545                                                          xor     al,al                                           ;zero reg
  4546                                                          stosb                                                   ;null terminate
  4547                                                          pop     edi                                             ;restore non-volatile regs
  4548                                                          ret                                                     ;return
  4549                                  ;=======================================================================================================================
  4550                                  ;
  4551                                  ;       Message Queue Helper Routines
  4552                                  ;
  4553                                  ;       GetMessage
  4554                                  ;       PutMessage
  4555                                  ;
  4556                                  ;=======================================================================================================================
  4557                                  ;-----------------------------------------------------------------------------------------------------------------------
  4558                                  ;
  4559                                  ;       Routine:        GetMessage
  4560                                  ;
  4561                                  ;       Description:    This routine reads and removes a message from the message queue.
  4562                                  ;
  4563                                  ;       Out:            EAX     lo-order message data
  4564                                  ;                       EDX     hi-order message data
  4565                                  ;
  4566                                  ;                       CY      0 = message read
  4567                                  ;                               1 = no message to read
  4568                                  ;
  4569                                  ;-----------------------------------------------------------------------------------------------------------------------
  4570                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4571                                                          push    ecx                                             ;
  4572                                                          push    ds                                              ;
  4573                                                          push    ELDTMQ                                          ;load message queue selector ...
  4574                                                          pop     ds                                              ;... into data segment register
  4575                                                          mov     ebx,[MQHead]                                    ;head ptr
  4576                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4577                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4578                                                          or      eax,edx                                         ;is queue empty?
  4579                                                          stc                                                     ;assume queue is emtpy
  4580                                                          jz      .20                                             ;yes, skip ahead
  4581                                                          xor     ecx,ecx                                         ;store zero
  4582                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4583                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4584                                                          add     ebx,8                                           ;next queue element
  4585                                                          and     ebx,03fch                                       ;at end of queue?
  4586                                                          jnz     .10                                             ;no, skip ahead
  4587                                                          mov     bl,8                                            ;reset to 1st entry
  4588                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4589                                                          clc                                                     ;indicate message read
  4590                                  .20                     pop     ds                                              ;restore non-volatile regs
  4591                                                          pop     ecx                                             ;
  4592                                                          pop     ebx                                             ;
  4593                                                          ret                                                     ;return
  4594                                  ;-----------------------------------------------------------------------------------------------------------------------
  4595                                  ;
  4596                                  ;       Routine:        PutMessage
  4597                                  ;
  4598                                  ;       Description:    This routine adda a message to the message queue.
  4599                                  ;
  4600                                  ;       In:             ECX     hi-order data word
  4601                                  ;                       EDX     lo-order data word
  4602                                  ;
  4603                                  ;       Out:            CY      0 = success
  4604                                  ;                               1 = fail: queue is full
  4605                                  ;
  4606                                  ;-----------------------------------------------------------------------------------------------------------------------
  4607                                  PutMessage              push    ds                                              ;save non-volatile regs
  4608                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4609                                                          pop     ds                                              ;... into data segment register
  4610                                                          mov     eax,[MQTail]                                    ;tail ptr
  4611                                                          cmp     dword [eax],0                                   ;is queue full?
  4612                                                          stc                                                     ;assume failure
  4613                                                          jne     .20                                             ;yes, cannot store
  4614                                                          mov     [eax],edx                                       ;store lo-order data
  4615                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4616                                                          add     eax,8                                           ;next queue element adr
  4617                                                          and     eax,03fch                                       ;at end of queue?
  4618                                                          jnz     .10                                             ;no, skip ahead
  4619                                                          mov     al,8                                            ;reset to top of queue
  4620                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4621                                                          clc                                                     ;indicate success
  4622                                  .20                     pop     ds                                              ;restore non-volatile regs
  4623                                                          ret                                                     ;return
  4624                                  ;=======================================================================================================================
  4625                                  ;
  4626                                  ;       Memory-Mapped Video Routines
  4627                                  ;
  4628                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4629                                  ;
  4630                                  ;       ClearConsoleScreen
  4631                                  ;       ScrollConsoleRow
  4632                                  ;       SetConsoleChar
  4633                                  ;       SetConsoleString
  4634                                  ;
  4635                                  ;=======================================================================================================================
  4636                                  ;-----------------------------------------------------------------------------------------------------------------------
  4637                                  ;
  4638                                  ;       Routine:        ClearConsoleScreen
  4639                                  ;
  4640                                  ;       Description:    This routine clears the console (CGA) screen.
  4641                                  ;
  4642                                  ;-----------------------------------------------------------------------------------------------------------------------
  4643                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4644                                                          push    edi                                             ;
  4645                                                          push    ds                                              ;
  4646                                                          push    es                                              ;
  4647                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4648                                                          pop     ds                                              ;... into DS register
  4649                                                          push    EGDTCGA                                         ;load CGA selector ...
  4650                                                          pop     es                                              ;... into ES register
  4651                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4652                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4653                                                          xor     edi,edi                                         ;target offset
  4654                                                          cld                                                     ;forward strings
  4655                                                          rep     stosd                                           ;reset screen body
  4656                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4657                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4658                                                          rep     stosd                                           ;reset OIA line
  4659                                                          xor     al,al                                           ;zero register
  4660                                                          mov     [wbConsoleRow],al                               ;reset console row
  4661                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4662                                                          call    PlaceCursor                                     ;place cursor at current position
  4663                                                          pop     es                                              ;restore non-volatile regs
  4664                                                          pop     ds                                              ;
  4665                                                          pop     edi                                             ;
  4666                                                          pop     ecx                                             ;
  4667                                                          ret                                                     ;return
  4668                                  ;-----------------------------------------------------------------------------------------------------------------------
  4669                                  ;
  4670                                  ;       Routine:        ScrollConsoleRow
  4671                                  ;
  4672                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4673                                  ;
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4676                                                          push    esi                                             ;
  4677                                                          push    edi                                             ;
  4678                                                          push    ds                                              ;
  4679                                                          push    es                                              ;
  4680                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4681                                                          pop     ds                                              ;... into DS
  4682                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4683                                                          pop     es                                              ;... into ES
  4684                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4685                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4686                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4687                                                          cld                                                     ;forward strings
  4688                                                          rep     movsd                                           ;move 24 lines up
  4689                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4690                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4691                                                          rep     stosd                                           ;clear bottom row
  4692                                                          pop     es                                              ;restore non-volatile regs
  4693                                                          pop     ds                                              ;
  4694                                                          pop     edi                                             ;
  4695                                                          pop     esi                                             ;
  4696                                                          pop     ecx                                             ;
  4697                                                          ret                                                     ;return
  4698                                  ;-----------------------------------------------------------------------------------------------------------------------
  4699                                  ;
  4700                                  ;       Routine:        SetConsoleChar
  4701                                  ;
  4702                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4703                                  ;
  4704                                  ;       In:             AL      ASCII character
  4705                                  ;                       CL      column
  4706                                  ;                       CH      row
  4707                                  ;                       ES      CGA selector
  4708                                  ;
  4709                                  ;       Out:            EAX     last target address written (ES:)
  4710                                  ;                       CL      column + 1
  4711                                  ;
  4712                                  ;-----------------------------------------------------------------------------------------------------------------------
  4713                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4714                                                          movzx   eax,ch                                          ;row
  4715                                                          mov     ah,ECONCOLS                                     ;cols/row
  4716                                                          mul     ah                                              ;row * cols/row
  4717                                                          add     al,cl                                           ;add column
  4718                                                          adc     ah,0                                            ;handle carry
  4719                                                          shl     eax,1                                           ;screen offset
  4720                                                          mov     [es:eax],dl                                     ;store character
  4721                                                          inc     cl                                              ;next column
  4722                                                          ret                                                     ;return
  4723                                  ;-----------------------------------------------------------------------------------------------------------------------
  4724                                  ;
  4725                                  ;       Routine:        SetConsoleString
  4726                                  ;
  4727                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4728                                  ;
  4729                                  ;       In:             ESI     source offset (DS:)
  4730                                  ;                       CL      column
  4731                                  ;                       CH      row
  4732                                  ;                       ES      CGA selector
  4733                                  ;
  4734                                  ;-----------------------------------------------------------------------------------------------------------------------
  4735                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4736                                                          cld                                                     ;forward strings
  4737                                  .10                     lodsb                                                   ;next ASCII character
  4738                                                          test    al,al                                           ;end of string?
  4739                                                          jz      .20                                             ;yes, branch
  4740                                                          call    SetConsoleChar                                  ;store character
  4741                                                          jmp     .10                                             ;continue
  4742                                  .20                     pop     esi                                             ;restore non-volatile regs
  4743                                                          ret                                                     ;return
  4744                                  ;=======================================================================================================================
  4745                                  ;
  4746                                  ;       Input/Output Routines
  4747                                  ;
  4748                                  ;       These routines read and/or write directly to ports.
  4749                                  ;
  4750                                  ;       GetBaseMemSize
  4751                                  ;       GetExtendedMemSize
  4752                                  ;       GetROMMemSize
  4753                                  ;       PlaceCursor
  4754                                  ;       PutPrimaryEndOfInt
  4755                                  ;       PutSecondaryEndOfInt
  4756                                  ;       ReadRealTimeClock
  4757                                  ;       ResetSystem
  4758                                  ;       SetKeyboardLamps
  4759                                  ;       WaitForKeyInBuffer
  4760                                  ;       WaitForKeyOutBuffer
  4761                                  ;
  4762                                  ;=======================================================================================================================
  4763                                  ;-----------------------------------------------------------------------------------------------------------------------
  4764                                  ;
  4765                                  ;       Routine:        GetBaseMemSize
  4766                                  ;
  4767                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4768                                  ;
  4769                                  ;       Output:         EAX     base RAM size in bytes
  4770                                  ;
  4771                                  ;-----------------------------------------------------------------------------------------------------------------------
  4772                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4773                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4774                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4775                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4776                                                          mov     ah,al                                           ;save base RAM high
  4777                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4778                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4779                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4780                                                          ret                                                     ;return to caller
  4781                                  ;-----------------------------------------------------------------------------------------------------------------------
  4782                                  ;
  4783                                  ;       Routine:        GetExtendedMemSize
  4784                                  ;
  4785                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4786                                  ;
  4787                                  ;       Output:         EAX     extended RAM size in bytes
  4788                                  ;
  4789                                  ;-----------------------------------------------------------------------------------------------------------------------
  4790                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4791                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4792                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4793                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4794                                                          mov     ah,al                                           ;save extended RAM high
  4795                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4796                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4797                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4798                                                          ret                                                     ;return to caller
  4799                                  ;-----------------------------------------------------------------------------------------------------------------------
  4800                                  ;
  4801                                  ;       Routine:        GetROMMemSize
  4802                                  ;
  4803                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4804                                  ;
  4805                                  ;       Output:         EAX     RAM size in bytes
  4806                                  ;
  4807                                  ;-----------------------------------------------------------------------------------------------------------------------
  4808                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4809                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4810                                                          ret                                                     ;return
  4811                                  ;-----------------------------------------------------------------------------------------------------------------------
  4812                                  ;
  4813                                  ;       Routine:        PlaceCursor
  4814                                  ;
  4815                                  ;       Description:    This routine positions the cursor on the console.
  4816                                  ;
  4817                                  ;       In:             DS      OS data selector
  4818                                  ;
  4819                                  ;-----------------------------------------------------------------------------------------------------------------------
  4820                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4821                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4822                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4823                                                          mul     ah                                              ;row offset
  4824                                                          add     al,[wbConsoleColumn]                            ;add column
  4825                                                          adc     ah,0                                            ;add overflow
  4826                                                          mov     ecx,eax                                         ;screen offset
  4827                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4828                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4829                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4830                                                          out     dx,al                                           ;select register
  4831                                                          inc     edx                                             ;data port
  4832                                                          mov     al,ch                                           ;hi-order cursor loc
  4833                                                          out     dx,al                                           ;store hi-order loc
  4834                                                          dec     edx                                             ;register select port
  4835                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4836                                                          out     dx,al                                           ;select register
  4837                                                          inc     edx                                             ;data port
  4838                                                          mov     al,cl                                           ;lo-order cursor loc
  4839                                                          out     dx,al                                           ;store lo-order loc
  4840                                                          pop     ecx                                             ;restore non-volatile regs
  4841                                                          ret                                                     ;return
  4842                                  ;-----------------------------------------------------------------------------------------------------------------------
  4843                                  ;
  4844                                  ;       Routine:        PutPrimaryEndOfInt
  4845                                  ;
  4846                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4847                                  ;
  4848                                  ;-----------------------------------------------------------------------------------------------------------------------
  4849                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4850                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4851                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4852                                                          ret                                                     ;return
  4853                                  ;-----------------------------------------------------------------------------------------------------------------------
  4854                                  ;
  4855                                  ;       Routine:        PutSecondaryEndOfInt
  4856                                  ;
  4857                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4858                                  ;
  4859                                  ;-----------------------------------------------------------------------------------------------------------------------
  4860                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4861                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4862                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4863                                                          ret                                                     ;return
  4864                                  ;-----------------------------------------------------------------------------------------------------------------------
  4865                                  ;
  4866                                  ;       Routine:        ReadRealTimeClock
  4867                                  ;
  4868                                  ;       Description:    This routine gets current date time from the real-time clock.
  4869                                  ;
  4870                                  ;       In:             DS:EBX  DATETIME structure
  4871                                  ;
  4872                                  ;-----------------------------------------------------------------------------------------------------------------------
  4873                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4874                                                          push    edi                                             ;
  4875                                                          push    es                                              ;
  4876                                                          push    ds                                              ;store data selector ...
  4877                                                          pop     es                                              ;... in es register
  4878                                                          mov     edi,ebx                                         ;date-time structure
  4879                                                          mov     al,ERTCSECONDREG                                ;second register
  4880                                                          out     ERTCREGPORT,al                                  ;select second register
  4881                                                          in      al,ERTCDATAPORT                                 ;read second register
  4882                                                          cld                                                     ;forward strings
  4883                                                          stosb                                                   ;store second value
  4884                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4885                                                          out     ERTCREGPORT,al                                  ;select minute register
  4886                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4887                                                          stosb                                                   ;store minute value
  4888                                                          mov     al,ERTCHOURREG                                  ;hour register
  4889                                                          out     ERTCREGPORT,al                                  ;select hour register
  4890                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4891                                                          stosb                                                   ;store hour value
  4892                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4893                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4894                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4895                                                          stosb                                                   ;store weekday value
  4896                                                          mov     al,ERTCDAYREG                                   ;day register
  4897                                                          out     ERTCREGPORT,al                                  ;select day register
  4898                                                          in      al,ERTCDATAPORT                                 ;read day register
  4899                                                          stosb                                                   ;store day value
  4900                                                          mov     al,ERTCMONTHREG                                 ;month register
  4901                                                          out     ERTCREGPORT,al                                  ;select month register
  4902                                                          in      al,ERTCDATAPORT                                 ;read month register
  4903                                                          stosb                                                   ;store month value
  4904                                                          mov     al,ERTCYEARREG                                  ;year register
  4905                                                          out     ERTCREGPORT,al                                  ;select year register
  4906                                                          in      al,ERTCDATAPORT                                 ;read year register
  4907                                                          stosb                                                   ;store year value
  4908                                                          mov     al,ERTCCENTURYREG                               ;century register
  4909                                                          out     ERTCREGPORT,al                                  ;select century register
  4910                                                          in      al,ERTCDATAPORT                                 ;read century register
  4911                                                          stosb                                                   ;store century value
  4912                                                          mov     al,ERTCSTATUSREG                                ;status register
  4913                                                          out     ERTCREGPORT,al                                  ;select status register
  4914                                                          in      al,ERTCDATAPORT                                 ;read status register
  4915                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4916                                                          jnz     .20                                             ;skip ahead if binary values
  4917                                                          mov     esi,ebx                                         ;date-time structure address
  4918                                                          mov     edi,ebx                                         ;date-time structure address
  4919                                                          mov     ecx,8                                           ;loop counter
  4920                                  .10                     lodsb                                                   ;BCD value
  4921                                                          mov     ah,al                                           ;BCD value
  4922                                                          and     al,00001111b                                    ;low-order decimal zone
  4923                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4924                                                          shr     ah,1                                            ;hi-order decimal * 8
  4925                                                          add     al,ah                                           ;low-order + hi-order * 8
  4926                                                          shr     ah,2                                            ;hi-order decimal * 2
  4927                                                          add     al,ah                                           ;low-order + hi-order * 10
  4928                                                          stosb                                                   ;replace BCD with binary
  4929                                                          loop    .10                                             ;next value
  4930                                  .20                     pop     es                                              ;restore non-volatile regs
  4931                                                          pop     edi                                             ;
  4932                                                          pop     esi                                             ;
  4933                                                          ret                                                     ;return
  4934                                  ;-----------------------------------------------------------------------------------------------------------------------
  4935                                  ;
  4936                                  ;       Routine:        ResetSystem
  4937                                  ;
  4938                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4939                                  ;
  4940                                  ;       Out:            N/A     This routine does not return.
  4941                                  ;
  4942                                  ;-----------------------------------------------------------------------------------------------------------------------
  4943                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4944                                                          loop    $                                               ;clear interrupts
  4945                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4946                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4947                                  .10                     sti                                                     ;enable maskable interrupts
  4948                                                          hlt                                                     ;halt until interrupt
  4949                                                          jmp     .10                                             ;repeat until reset kicks in
  4950                                  ;-----------------------------------------------------------------------------------------------------------------------
  4951                                  ;
  4952                                  ;       Routine:        SetKeyboardLamps
  4953                                  ;
  4954                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4955                                  ;
  4956                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4957                                  ;
  4958                                  ;-----------------------------------------------------------------------------------------------------------------------
  4959                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4960                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4961                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4962                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4963                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4964                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4965                                                          mov     al,bh                                           ;set/reset lamps value
  4966                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4967                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4968                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4969                                                          ret                                                     ;return
  4970                                  ;-----------------------------------------------------------------------------------------------------------------------
  4971                                  ;
  4972                                  ;       Routine:        WaitForKeyInBuffer
  4973                                  ;
  4974                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4975                                  ;
  4976                                  ;       Out:            ZF      1 = Input buffer ready
  4977                                  ;                               0 = Input buffer not ready after timeout
  4978                                  ;
  4979                                  ;-----------------------------------------------------------------------------------------------------------------------
  4980                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4981                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4982                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4983                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4984                                                          loopnz  .10                                             ;yes, repeat till timeout
  4985                                                          pop     ecx                                             ;restore non-volatile regs
  4986                                                          ret                                                     ;return
  4987                                  ;-----------------------------------------------------------------------------------------------------------------------
  4988                                  ;
  4989                                  ;       Routine:        WaitForKeyOutBuffer
  4990                                  ;
  4991                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4992                                  ;
  4993                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4994                                  ;                               0 = Output buffer empty after timeout
  4995                                  ;
  4996                                  ;-----------------------------------------------------------------------------------------------------------------------
  4997                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4998                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4999                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5000                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5001                                                          loopz   .10                                             ;loop until output buffer bit
  5002                                                          pop     ecx                                             ;restore non-volatile regs
  5003                                                          ret                                                     ;return
  5004                                  ;-----------------------------------------------------------------------------------------------------------------------
  5005                                  ;
  5006                                  ;       End of the Kernel Function Library
  5007                                  ;
  5008                                  ;-----------------------------------------------------------------------------------------------------------------------
  5009                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5010                                  ;=======================================================================================================================
  5011                                  ;
  5012                                  ;       Console Task
  5013                                  ;
  5014                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5015                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5016                                  ;       screen and responds to user commands.
  5017                                  ;
  5018                                  ;=======================================================================================================================
  5019                                  ;-----------------------------------------------------------------------------------------------------------------------
  5020                                  ;
  5021                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5022                                  ;
  5023                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5024                                  ;
  5025                                  ;-----------------------------------------------------------------------------------------------------------------------
  5026                                  section                 constack                                                ;console task stack
  5027                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5028                                  ;-----------------------------------------------------------------------------------------------------------------------
  5029                                  ;
  5030                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5031                                  ;
  5032                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5033                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5034                                  ;       16 descriptors. Six are initially defined.
  5035                                  ;
  5036                                  ;-----------------------------------------------------------------------------------------------------------------------
  5037                                  section                 conldt                                                  ;console local descriptors
  5038                                                          dq      004093004780007Fh                               ;04 TSS alias
  5039                                                          dq      004093004700007Fh                               ;0c LDT alias
  5040                                                          dq      00409300400006FFh                               ;14 stack
  5041                                                          dq      00CF93000000FFFFh                               ;1c data
  5042                                                          dq      00409B0050000FFFh                               ;24 code
  5043                                                          dq      00409300480007FFh                               ;2c message queue
  5044                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5045                                  ;-----------------------------------------------------------------------------------------------------------------------
  5046                                  ;
  5047                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5048                                  ;
  5049                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5050                                  ;       segment. CS to console code.
  5051                                  ;
  5052                                  ;-----------------------------------------------------------------------------------------------------------------------
  5053                                  section                 contss                                                  ;console task state segment
  5054                                                          dd      0                                               ;00 back-link tss
  5055                                                          dd      0700h                                           ;04 esp ring 0
  5056                                                          dd      0014h                                           ;08 ss ring 0
  5057                                                          dd      0700h                                           ;0c esp ring 1
  5058                                                          dd      0014h                                           ;10 es ring 1
  5059                                                          dd      0700h                                           ;14 esp ring 2
  5060                                                          dd      0014h                                           ;18 ss ring 2
  5061                                                          dd      0                                               ;1c cr ring 3
  5062                                                          dd      0                                               ;20 eip
  5063                                                          dd      0200h                                           ;24 eflags
  5064                                                          dd      0                                               ;28 eax
  5065                                                          dd      0                                               ;2c ecx
  5066                                                          dd      0                                               ;30 edx
  5067                                                          dd      0                                               ;34 ebx
  5068                                                          dd      0700h                                           ;38 esp ring 3
  5069                                                          dd      0                                               ;3c ebp
  5070                                                          dd      0                                               ;40 esi
  5071                                                          dd      0                                               ;44 edi
  5072                                                          dd      001Ch                                           ;48 es
  5073                                                          dd      0024h                                           ;4c cs
  5074                                                          dd      0014h                                           ;50 ss ring 3
  5075                                                          dd      001Ch                                           ;54 ds
  5076                                                          dd      0                                               ;58 fs
  5077                                                          dd      0                                               ;5c gs
  5078                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5079                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5080                                  ;-----------------------------------------------------------------------------------------------------------------------
  5081                                  ;
  5082                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5083                                  ;
  5084                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5085                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5086                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5087                                  ;       event.
  5088                                  ;
  5089                                  ;-----------------------------------------------------------------------------------------------------------------------
  5090                                  section                 conmque                                                 ;console message queue
  5091                                                          dd      8                                               ;head pointer
  5092                                                          dd      8                                               ;tail pointer
  5093                                                          times   510 dd 0                                        ;queue elements
  5094                                  ;-----------------------------------------------------------------------------------------------------------------------
  5095                                  ;
  5096                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5097                                  ;
  5098                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5099                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5100                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5101                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5102                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5103                                  ;       board input, echoing to the console screen and responding to user commands.
  5104                                  ;
  5105                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5106                                  ;
  5107                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5108                                  ;                               |  Real Mode Interrupt Vectors                  |
  5109                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5110                                  ;                               |  Reserved BIOS Memory Area                    |
  5111                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5112                                  ;                               |  Shared Kernel Memory Area                    |
  5113                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5114                                  ;                               |  Global Descriptor Table (GDT)                |
  5115                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5116                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5117                                  ;                       002000  +-----------------------------------------------+
  5118                                  ;                               |  Interrupt Handlers                           |
  5119                                  ;                               |  Kernel Function Library                      |
  5120                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5121                                  ;                               |  Console Task Stack Area                      |
  5122                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5123                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5124                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5125                                  ;                               |  Console Task Task State Segment (TSS)        |
  5126                                  ;                       004800  +-----------------------------------------------+
  5127                                  ;                               |  Console Task Message Queue                   |
  5128                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5129                                  ;                               |  Console Task Code                            |
  5130                                  ;                               |  Console Task Constants                       |
  5131                                  ;                       006000  +===============================================+
  5132                                  ;
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5135                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5136                                  
  5137                                                          clearConsoleScreen                                      ;clear the console screen
  5138                                                          putConsoleString czTitle                                ;display startup message
  5139                                                          putConsoleString czROMMem                               ;ROM memory label
  5140                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5141                                                          putConsoleString czKB                                   ;Kilobytes
  5142                                                          putConsoleString czNewLine                              ;new line
  5143                                                          putConsoleString czBaseMem                              ;base memory label
  5144                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5145                                                          putConsoleString czKB                                   ;Kilobytes
  5146                                                          putConsoleString czNewLine                              ;new line
  5147                                                          putConsoleString czExtendedMem                          ;extended memory label
  5148                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5149                                                          putConsoleString czKB                                   ;Kilobytes
  5150                                                          putConsoleString czNewLine                              ;new line
  5151                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5152                                                          placeCursor                                             ;set CRT cursor location
  5153                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5154                                                          putConsoleString czNewLine                              ;newline
  5155                                  
  5156                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5157                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5158                                                          call    ConTakeToken                                    ;handle console input
  5159                                                          mov     edx,wzConsoleToken                              ;token buffer
  5160                                                          call    ConDetermineCommand                             ;determine command number
  5161                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5162                                                          jb      .20                                             ;yes, branch
  5163                                  
  5164                                                          putConsoleString czUnknownCommand                       ;display error message
  5165                                  
  5166                                                          jmp     .10                                             ;next command
  5167                                  .20                     shl     eax,2                                           ;index into jump table
  5168                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5169                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5170                                                          call    eax                                             ;call command handler
  5171                                                          jmp     .10                                             ;next command
  5172                                  ;-----------------------------------------------------------------------------------------------------------------------
  5173                                  ;
  5174                                  ;       Routine:        ConInitializeData
  5175                                  ;
  5176                                  ;       Description:    This routine initializes console task variables.
  5177                                  ;
  5178                                  ;-----------------------------------------------------------------------------------------------------------------------
  5179                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5180                                                          push    edi                                             ;
  5181                                                          push    es                                              ;
  5182                                  ;
  5183                                  ;       Initialize console work areas.
  5184                                  ;
  5185                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5186                                                          pop     es                                              ;... into extra segment register
  5187                                                          mov     edi,ECONDATA                                    ;OS console data address
  5188                                                          xor     al,al                                           ;initialization value
  5189                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5190                                                          cld                                                     ;forward strings
  5191                                                          rep     stosb                                           ;initialize data
  5192                                  ;
  5193                                  ;       Initialize heap size
  5194                                  ;
  5195                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5196                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5197                                  ;
  5198                                  ;       Initialize MEMROOT structure
  5199                                  ;
  5200                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5201                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5202                                                          xor     ecx,ecx                                         ;zero register
  5203                                                          mov     cl,4                                            ;count
  5204                                                          rep     stosd                                           ;store first/last contig and free addrs
  5205                                                          xor     eax,eax                                         ;zero register
  5206                                                          stosd                                                   ;zero first task block
  5207                                                          stosd                                                   ;zero last task block
  5208                                  ;
  5209                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5210                                  ;
  5211                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5212                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5213                                                          stosd                                                   ;store signature
  5214                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5215                                                          stosd                                                   ;store block size
  5216                                                          xor     ecx,ecx                                         ;zero register
  5217                                                          mov     cl,6                                            ;count
  5218                                                          xor     eax,eax                                         ;zero register
  5219                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5220                                  ;
  5221                                  ;       Read memory sizes from ROM
  5222                                  ;
  5223                                                          getROMMemSize                                           ;get ROM memory size
  5224                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5225                                                          mov     ecx,eax                                         ;integer param
  5226                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5227                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5228                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5229                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5230                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5231                                                          mov     ecx,eax                                         ;integer param
  5232                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5233                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5234                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5235                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5236                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5237                                                          mov     ecx,eax                                         ;integer param
  5238                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5239                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5240                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5241                                  ;
  5242                                  ;       Restore and return.
  5243                                  ;
  5244                                                          pop     es                                              ;restore non-volatile regs
  5245                                                          pop     edi                                             ;
  5246                                                          pop     ecx                                             ;
  5247                                                          ret                                                     ;return
  5248                                  ;-----------------------------------------------------------------------------------------------------------------------
  5249                                  ;
  5250                                  ;       Routine:        ConTakeToken
  5251                                  ;
  5252                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5253                                  ;
  5254                                  ;       In:             DS:EDX  source buffer address
  5255                                  ;                       DS:EBX  target buffer address
  5256                                  ;
  5257                                  ;       Out:            DS:EDX  source buffer address
  5258                                  ;                       DS:EBX  target buffer address
  5259                                  ;
  5260                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5261                                  ;
  5262                                  ;-----------------------------------------------------------------------------------------------------------------------
  5263                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5264                                                          push    edi                                             ;
  5265                                                          push    es                                              ;
  5266                                                          push    ds                                              ;load data segment selector ...
  5267                                                          pop     es                                              ;... into extra segment reg
  5268                                                          mov     esi,edx                                         ;source buffer address
  5269                                                          mov     edi,ebx                                         ;target buffer address
  5270                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5271                                                          cld                                                     ;forward strings
  5272                                  .10                     lodsb                                                   ;load byte
  5273                                                          cmp     al,EASCIISPACE                                  ;space?
  5274                                                          je      .10                                             ;yes, continue
  5275                                                          test    al,al                                           ;end of line?
  5276                                                          jz      .40                                             ;yes, branch
  5277                                  .20                     stosb                                                   ;store byte
  5278                                                          lodsb                                                   ;load byte
  5279                                                          test    al,al                                           ;end of line?
  5280                                                          jz      .40                                             ;no, continue
  5281                                                          cmp     al,EASCIISPACE                                  ;space?
  5282                                                          jne     .20                                             ;no, continue
  5283                                  .30                     lodsb                                                   ;load byte
  5284                                                          cmp     al,EASCIISPACE                                  ;space?
  5285                                                          je      .30                                             ;yes, continue
  5286                                                          dec     esi                                             ;pre-position
  5287                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5288                                                          mov     edi,edx                                         ;source buffer address
  5289                                  .50                     lodsb                                                   ;remaining byte
  5290                                                          stosb                                                   ;move to front of buffer
  5291                                                          test    al,al                                           ;end of line?
  5292                                                          jnz     .50                                             ;no, continue
  5293                                                          pop     es                                              ;restore non-volatile regs
  5294                                                          pop     edi                                             ;
  5295                                                          pop     esi                                             ;
  5296                                                          ret                                                     ;return
  5297                                  ;-----------------------------------------------------------------------------------------------------------------------
  5298                                  ;
  5299                                  ;       Routine:        ConDetermineCommand
  5300                                  ;
  5301                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5302                                  ;
  5303                                  ;       input:          DS:EDX  command address
  5304                                  ;
  5305                                  ;       output:         EAX     >=0     = command nbr
  5306                                  ;                               0       = unknown command
  5307                                  ;
  5308                                  ;-----------------------------------------------------------------------------------------------------------------------
  5309                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5310                                                          push    ecx                                             ;
  5311                                                          push    esi                                             ;
  5312                                                          push    edi                                             ;
  5313                                  
  5314                                                          upperCaseString                                         ;upper-case string at EDX
  5315                                  
  5316                                                          mov     esi,tConCmdTbl                                  ;commands table
  5317                                                          xor     edi,edi                                         ;intialize command number
  5318                                                          cld                                                     ;forward strings
  5319                                  .10                     lodsb                                                   ;command length
  5320                                                          movzx   ecx,al                                          ;command length
  5321                                                          jecxz   .20                                             ;branch if end of table
  5322                                                          mov     ebx,esi                                         ;table entry address
  5323                                                          add     esi,ecx                                         ;next table entry address
  5324                                  
  5325                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5326                                  
  5327                                                          jecxz   .20                                             ;branch if equal
  5328                                                          inc     edi                                             ;increment command nbr
  5329                                                          jmp     .10                                             ;repeat
  5330                                  .20                     mov     eax,edi                                         ;command number
  5331                                                          pop     edi                                             ;restore non-volatile regs
  5332                                                          pop     esi                                             ;
  5333                                                          pop     ecx                                             ;
  5334                                                          pop     ebx                                             ;
  5335                                                          ret                                                     ;return
  5336                                  ;-----------------------------------------------------------------------------------------------------------------------
  5337                                  ;
  5338                                  ;       Routine:        ConClear
  5339                                  ;
  5340                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5341                                  ;
  5342                                  ;-----------------------------------------------------------------------------------------------------------------------
  5343                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5344                                                          ret                                                     ;return
  5345                                  ;-----------------------------------------------------------------------------------------------------------------------
  5346                                  ;
  5347                                  ;       Routine:        ConDate
  5348                                  ;
  5349                                  ;       Description:    This routine handles the DATE command.
  5350                                  ;
  5351                                  ;-----------------------------------------------------------------------------------------------------------------------
  5352                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5353                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5354                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5355                                                          putConsoleString  czNewLine                             ;write newline to console
  5356                                                          ret                                                     ;return
  5357                                  ;-----------------------------------------------------------------------------------------------------------------------
  5358                                  ;
  5359                                  ;       Routine:        ConDay
  5360                                  ;
  5361                                  ;       Description:    This routine handles the DAY command.
  5362                                  ;
  5363                                  ;-----------------------------------------------------------------------------------------------------------------------
  5364                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5365                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5366                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5367                                                          putConsoleString  czNewLine                             ;write newline to console
  5368                                                          ret                                                     ;return
  5369                                  ;-----------------------------------------------------------------------------------------------------------------------
  5370                                  ;
  5371                                  ;       Routine:        ConExit
  5372                                  ;
  5373                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5374                                  ;
  5375                                  ;-----------------------------------------------------------------------------------------------------------------------
  5376                                  ConExit                 resetSystem                                             ;issue system reset
  5377                                                          ret                                                     ;return
  5378                                  ;-----------------------------------------------------------------------------------------------------------------------
  5379                                  ;
  5380                                  ;       Routine:        ConFree
  5381                                  ;
  5382                                  ;       Description:    This routine handles the FREE command.
  5383                                  ;
  5384                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5385                                  ;
  5386                                  ;-----------------------------------------------------------------------------------------------------------------------
  5387                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5388                                                          push    ecx                                             ;
  5389                                                          push    esi                                             ;
  5390                                                          push    edi                                             ;
  5391                                  ;
  5392                                  ;       Get address parameter
  5393                                  ;
  5394                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5395                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5396                                                          call    ConTakeToken                                    ;take first param as token
  5397                                  ;
  5398                                  ;       Convert input parameter from hexadecimal string to binary
  5399                                  ;
  5400                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5401                                                          je      .10                                             ;no, branch
  5402                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5403                                  
  5404                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5405                                  
  5406                                                          test    eax,eax                                         ;valid parameter?
  5407                                                          jz      .10                                             ;no, branch
  5408                                  ;
  5409                                  ;       Free memory block
  5410                                  ;
  5411                                                          freeMemory eax                                          ;free memory
  5412                                  
  5413                                                          cmp     eax,-1                                          ;memory freed?
  5414                                                          je      .10                                             ;no, branch
  5415                                  ;
  5416                                  ;       Indicate memory freed
  5417                                  ;
  5418                                                          putConsoleString czOK                                   ;indicate success
  5419                                  ;
  5420                                  ;       Restore and return
  5421                                  ;
  5422                                  .10                     pop     edi                                             ;restore non-volatile regs
  5423                                                          pop     esi                                             ;
  5424                                                          pop     ecx                                             ;
  5425                                                          pop     ebx                                             ;
  5426                                                          ret                                                     ;return
  5427                                  ;-----------------------------------------------------------------------------------------------------------------------
  5428                                  ;
  5429                                  ;       Routine:        ConHour
  5430                                  ;
  5431                                  ;       Description:    This routine Handles the HOUR command.
  5432                                  ;
  5433                                  ;-----------------------------------------------------------------------------------------------------------------------
  5434                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5435                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5436                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5437                                                          putConsoleString  czNewLine                             ;write newline to console
  5438                                                          ret                                                     ;return
  5439                                  ;-----------------------------------------------------------------------------------------------------------------------
  5440                                  ;
  5441                                  ;       Routine:        ConInt6
  5442                                  ;
  5443                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5444                                  ;
  5445                                  ;-----------------------------------------------------------------------------------------------------------------------
  5446                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5447                                                          ret                                                     ;return (not executed)
  5448                                  ;-----------------------------------------------------------------------------------------------------------------------
  5449                                  ;
  5450                                  ;       Routine:        ConMalloc
  5451                                  ;
  5452                                  ;       Description:    This routine handles the MALLOC command.
  5453                                  ;
  5454                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5455                                  ;
  5456                                  ;-----------------------------------------------------------------------------------------------------------------------
  5457                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5458                                                          push    ecx                                             ;
  5459                                                          push    esi                                             ;
  5460                                                          push    edi                                             ;
  5461                                  ;
  5462                                  ;       Get size parameter
  5463                                  ;
  5464                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5465                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5466                                                          call    ConTakeToken                                    ;take first param as token
  5467                                  ;
  5468                                  ;       Convert input parameter from decimal string to binary
  5469                                  ;
  5470                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5471                                                          je      .10                                             ;no, branch
  5472                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5473                                  
  5474                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5475                                  
  5476                                                          test    eax,eax                                         ;valid parameter?
  5477                                                          jz      .10                                             ;no, branch
  5478                                  ;
  5479                                  ;       Allocate memory block
  5480                                  ;
  5481                                                          allocateMemory eax                                      ;allocate memory
  5482                                  
  5483                                                          test    eax,eax                                         ;memory allocated?
  5484                                                          jz      .10                                             ;no, branch
  5485                                  ;
  5486                                  ;       Report allocated memory block address
  5487                                  ;
  5488                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5489                                                          mov     ecx,eax                                         ;memory address
  5490                                  
  5491                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5492                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5493                                                          putConsoleString czNewLine                              ;display new line
  5494                                  
  5495                                  .10                     pop     edi                                             ;restore non-volatile regs
  5496                                                          pop     esi                                             ;
  5497                                                          pop     ecx                                             ;
  5498                                                          pop     ebx                                             ;
  5499                                                          ret                                                     ;return
  5500                                  ;-----------------------------------------------------------------------------------------------------------------------
  5501                                  ;
  5502                                  ;       Routine:        ConMem
  5503                                  ;
  5504                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5505                                  ;
  5506                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5507                                  ;
  5508                                  ;-----------------------------------------------------------------------------------------------------------------------
  5509                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5510                                                          push    esi                                             ;
  5511                                                          push    edi                                             ;
  5512                                  ;
  5513                                  ;                       update the source address if a parameter is given
  5514                                  ;
  5515                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5516                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5517                                                          call    ConTakeToken                                    ;take first param as token
  5518                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5519                                                          je      .10                                             ;no, branch
  5520                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5521                                  
  5522                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5523                                  
  5524                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5525                                  ;
  5526                                  ;                       setup source address and row count
  5527                                  ;
  5528                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5529                                                          xor     ecx,ecx                                         ;zero register
  5530                                                          mov     cl,16                                           ;row count
  5531                                  ;
  5532                                  ;                       start the row with the source address in hexadecimal
  5533                                  ;
  5534                                  .20                     push    ecx                                             ;save remaining rows
  5535                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5536                                                          mov     edx,edi                                         ;output buffer address
  5537                                                          mov     ecx,esi                                         ;console memory address
  5538                                  
  5539                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5540                                  
  5541                                                          add     edi,8                                           ;end of memory addr hexnum
  5542                                                          mov     al,' '                                          ;ascii space
  5543                                                          stosb                                                   ;store delimiter
  5544                                  ;
  5545                                  ;                       output 16 ASCII hexadecimal byte values for the row
  5546                                  ;
  5547                                                          xor     ecx,ecx                                         ;zero register
  5548                                                          mov     cl,16                                           ;loop count
  5549                                  .30                     push    ecx                                             ;save loop count
  5550                                                          lodsb                                                   ;memory byte
  5551                                                          mov     ah,al                                           ;memory byte
  5552                                                          shr     al,4                                            ;high-order in bits 3-0
  5553                                                          or      al,30h                                          ;apply ascii numeric zone
  5554                                                          cmp     al,3ah                                          ;numeric range?
  5555                                                          jb      .40                                             ;yes, skip ahead
  5556                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5557                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5558                                                          mov     al,ah                                           ;low-order in bits 3-0
  5559                                                          and     al,0fh                                          ;mask out high-order bits
  5560                                                          or      al,30h                                          ;apply ascii numeric zone
  5561                                                          cmp     al,3ah                                          ;numeric range?
  5562                                                          jb      .50                                             ;yes, skip ahead
  5563                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5564                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5565                                                          mov     al,' '                                          ;ascii space
  5566                                                          stosb                                                   ;store ascii space delimiter
  5567                                                          pop     ecx                                             ;loop count
  5568                                                          loop    .30                                             ;next
  5569                                  ;
  5570                                  ;                       output printable ASCII character section for the row
  5571                                  ;
  5572                                                          sub     esi,16                                          ;reset source pointer
  5573                                                          mov     cl,16                                           ;loop count
  5574                                  .60                     lodsb                                                   ;source byte
  5575                                                          cmp     al,32                                           ;printable? (low-range test)
  5576                                                          jb      .70                                             ;no, skip ahead
  5577                                                          cmp     al,128                                          ;printable? (high-range test)
  5578                                                          jb      .80                                             ;yes, skip ahead
  5579                                  .70                     mov     al,' '                                          ;display space instead of printable
  5580                                  .80                     stosb                                                   ;store printable ascii byte
  5581                                                          loop    .60                                             ;next source byte
  5582                                                          xor     al,al                                           ;nul-terminator
  5583                                                          stosb                                                   ;terminate output line
  5584                                  ;
  5585                                  ;                       display constructed output buffer and newline
  5586                                  ;
  5587                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5588                                                          putConsoleString czNewLine                              ;display new line
  5589                                  ;
  5590                                  ;                       repeat until all lines displayed and preserve source address
  5591                                  ;
  5592                                                          pop     ecx                                             ;remaining rows
  5593                                                          loop    .20                                             ;next row
  5594                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5595                                                          pop     edi                                             ;restore regs
  5596                                                          pop     esi                                             ;
  5597                                                          pop     ebx                                             ;
  5598                                                          ret                                                     ;return
  5599                                  ;-----------------------------------------------------------------------------------------------------------------------
  5600                                  ;
  5601                                  ;       Routine:        ConMinute
  5602                                  ;
  5603                                  ;       Description:    This routine Handles the MINUTE command.
  5604                                  ;
  5605                                  ;-----------------------------------------------------------------------------------------------------------------------
  5606                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5607                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5608                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5609                                                          putConsoleString  czNewLine                             ;write newline to console
  5610                                                          ret                                                     ;return
  5611                                  ;-----------------------------------------------------------------------------------------------------------------------
  5612                                  ;
  5613                                  ;       Routine:        ConMonth
  5614                                  ;
  5615                                  ;       Description:    This routine Handles the MONTH command.
  5616                                  ;
  5617                                  ;-----------------------------------------------------------------------------------------------------------------------
  5618                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5619                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5620                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5621                                                          putConsoleString  czNewLine                             ;write newline to console
  5622                                                          ret                                                     ;return
  5623                                  ;-----------------------------------------------------------------------------------------------------------------------
  5624                                  ;
  5625                                  ;       Routine:        ConMonthName
  5626                                  ;
  5627                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5628                                  ;
  5629                                  ;-----------------------------------------------------------------------------------------------------------------------
  5630                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5631                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5632                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5633                                                          putConsoleString   czNewLine                            ;write newline to console
  5634                                                          ret                                                     ;return
  5635                                  ;-----------------------------------------------------------------------------------------------------------------------
  5636                                  ;
  5637                                  ;       Routine:        ConSecond
  5638                                  ;
  5639                                  ;       Description:    This routine Handles the SECOND command.
  5640                                  ;
  5641                                  ;-----------------------------------------------------------------------------------------------------------------------
  5642                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5643                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5644                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5645                                                          putConsoleString  czNewLine                             ;write newline to console
  5646                                                          ret                                                     ;return
  5647                                  ;-----------------------------------------------------------------------------------------------------------------------
  5648                                  ;
  5649                                  ;       Routine:        ConTime
  5650                                  ;
  5651                                  ;       Description:    This routine Handles the TIME command.
  5652                                  ;
  5653                                  ;-----------------------------------------------------------------------------------------------------------------------
  5654                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5655                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5656                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5657                                                          putConsoleString  czNewLine                             ;write newline to console
  5658                                                          ret                                                     ;return
  5659                                  ;-----------------------------------------------------------------------------------------------------------------------
  5660                                  ;
  5661                                  ;       Routine:        ConVersion
  5662                                  ;
  5663                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5664                                  ;
  5665                                  ;-----------------------------------------------------------------------------------------------------------------------
  5666                                  ConVersion              putConsoleString czTitle                                ;display version message
  5667                                                          ret                                                     ;return
  5668                                  ;-----------------------------------------------------------------------------------------------------------------------
  5669                                  ;
  5670                                  ;       Routine:        ConWeekday
  5671                                  ;
  5672                                  ;       Description:    This routine handles the WEEKDAY command.
  5673                                  ;
  5674                                  ;-----------------------------------------------------------------------------------------------------------------------
  5675                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5676                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5677                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5678                                                          putConsoleString  czNewLine                             ;write newline to console
  5679                                                          ret                                                     ;return
  5680                                  ;-----------------------------------------------------------------------------------------------------------------------
  5681                                  ;
  5682                                  ;       Routine:        ConWeekdayName
  5683                                  ;
  5684                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5685                                  ;
  5686                                  ;-----------------------------------------------------------------------------------------------------------------------
  5687                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5688                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5689                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5690                                                          putConsoleString     czNewLine                                  ;write newline to console
  5691                                                          ret                                                             ;return
  5692                                  ;-----------------------------------------------------------------------------------------------------------------------
  5693                                  ;
  5694                                  ;       Routine:        ConYear
  5695                                  ;
  5696                                  ;       Description:    This routine Handles the YEAR command.
  5697                                  ;
  5698                                  ;-----------------------------------------------------------------------------------------------------------------------
  5699                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5700                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5701                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5702                                                          putConsoleString  czNewLine                             ;write newline to console
  5703                                                          ret                                                     ;return
  5704                                  ;-----------------------------------------------------------------------------------------------------------------------
  5705                                  ;
  5706                                  ;       Routine:        ConYearIsLeap
  5707                                  ;
  5708                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5709                                  ;
  5710                                  ;-----------------------------------------------------------------------------------------------------------------------
  5711                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5712                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5713                                  
  5714                                                          jecxz   .10                                             ;branch if not leap
  5715                                  
  5716                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5717                                  
  5718                                                          jmp     .20                                             ;continue
  5719                                  
  5720                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5721                                  .20                     ret                                                     ;return
  5722                                  ;-----------------------------------------------------------------------------------------------------------------------
  5723                                  ;
  5724                                  ;       Tables
  5725                                  ;
  5726                                  ;-----------------------------------------------------------------------------------------------------------------------
  5727                                                                                                                  ;---------------------------------------
  5728                                                                                                                  ;  Command Jump Table
  5729                                                                                                                  ;---------------------------------------
  5730                                  tConJmpTbl              equ     $                                               ;command jump table
  5731                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5732                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5733                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5734                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  5735                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  5736                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5737                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5738                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  5739                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  5740                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  5741                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  5742                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  5743                                                          dd      ConDate         - ConCode                       ;date command routine offset
  5744                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  5745                                                          dd      ConFree         - ConCode                       ;free command routine offset
  5746                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  5747                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  5748                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  5749                                                          dd      ConTime         - ConCode                       ;time command routine offset
  5750                                                          dd      ConYear         - ConCode                       ;year command routine offset
  5751                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  5752                                                          dd      ConDay          - ConCode                       ;day command routine offset
  5753                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  5754                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  5755                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  5756                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  5757                                                                                                                  ;---------------------------------------
  5758                                                                                                                  ;  Command Name Table
  5759                                                                                                                  ;---------------------------------------
  5760                                  tConCmdTbl              equ     $                                               ;command name table
  5761                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  5762                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  5763                                                          db      11,"MONTH.NAME",0                               ;month.name command
  5764                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  5765                                                          db      8,"VERSION",0                                   ;version command
  5766                                                          db      8,"WEEKDAY",0                                   ;weekday command
  5767                                                          db      7,"MALLOC",0                                    ;malloc command
  5768                                                          db      7,"MEMORY",0                                    ;memory command
  5769                                                          db      7,"MINUTE",0                                    ;minute command
  5770                                                          db      7,"SECOND",0                                    ;second command
  5771                                                          db      6,"CLEAR",0                                     ;clear command
  5772                                                          db      6,"MONTH",0                                     ;month command
  5773                                                          db      5,"DATE",0                                      ;date command
  5774                                                          db      5,"EXIT",0                                      ;exit command
  5775                                                          db      5,"FREE",0                                      ;free command
  5776                                                          db      5,"HOUR",0                                      ;hour command
  5777                                                          db      5,"INT6",0                                      ;int6 command
  5778                                                          db      5,"QUIT",0                                      ;quit command
  5779                                                          db      5,"TIME",0                                      ;time command
  5780                                                          db      5,"YEAR",0                                      ;year command
  5781                                                          db      4,"CLS",0                                       ;cls command
  5782                                                          db      4,"DAY",0                                       ;day command
  5783                                                          db      4,"MEM",0                                       ;mem command
  5784                                                          db      4,"VER",0                                       ;ver command
  5785                                                          db      0                                               ;end of table
  5786                                  ;-----------------------------------------------------------------------------------------------------------------------
  5787                                  ;
  5788                                  ;       Constants
  5789                                  ;
  5790                                  ;-----------------------------------------------------------------------------------------------------------------------
  5791                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  5792                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  5793                                  czKB                    db      "KB",0                                          ;Kilobytes
  5794                                  czNewLine               db      13,10,0                                         ;new line string
  5795                                  czOK                    db      "ok",13,10,0                                    ;ok string
  5796                                  czPrompt                db      ":",0                                           ;prompt string
  5797                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  5798                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5799                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5800                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  5801                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  5802                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  5803                                  %endif
  5804                                  %ifdef BUILDDISK
  5805                                  ;-----------------------------------------------------------------------------------------------------------------------
  5806                                  ;
  5807                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5808                                  ;
  5809                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5810                                  ;
  5811                                  ;-----------------------------------------------------------------------------------------------------------------------
  5812                                  section                 unused                                                  ;unused disk space
  5813                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5814                                  %endif
  5815                                  ;=======================================================================================================================
  5816                                  ;
  5817                                  ;       End of Program Code
  5818                                  ;
  5819                                  ;=======================================================================================================================
