     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.013
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;                       system for PCI expansion BIOS.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EKEYF...        Keyboard status flags
   169                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   170                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   171                                  ;       EMEM...         Memory Management values
   172                                  ;       EMSG...         Message identifers
   173                                  ;
   174                                  ;=======================================================================================================================
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       Hardware-Defined Values
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;
   182                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   183                                  ;
   184                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   185                                  ;       for CGA, EGA, VGA and compatible video modes.
   186                                  ;
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   189                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   190                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   191                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  ;
   194                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   195                                  ;
   196                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   197                                  ;
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   200                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   201                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   202                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   203                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  ;
   206                                  ;       8042 Keyboard Controller                                                EKEYB...
   207                                  ;
   208                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   209                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   210                                  ;
   211                                  ;-----------------------------------------------------------------------------------------------------------------------
   212                                  EKEYBPORTDATA           equ     060h                                            ;data port
   213                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   214                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   215                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   216                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   217                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   218                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   219                                                                                                                  ;---------------------------------------
   220                                                                                                                  ;       Keyboard Scan Codes
   221                                                                                                                  ;---------------------------------------
   222                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   223                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   224                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   225                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   226                                  EKEYBSLASH              equ     035h                                            ;slash
   227                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   228                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   229                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   230                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   231                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   232                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   233                                  EKEYBUP                 equ     080h                                            ;up
   234                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   235                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   236                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   237                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   238                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   239                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   240                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   241                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   242                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   243                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   244                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   245                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  ;
   248                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   249                                  ;
   250                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   251                                  ;       external devices and signals a hardware interrupt to the CPU.
   252                                  ;
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   255                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   256                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   257                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   258                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  ;
   261                                  ;       8253 Programmable Interval Timer                                        EPIT...
   262                                  ;
   263                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   264                                  ;       approximately 18.2 times per second.
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   271                                  ;
   272                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   273                                  ;
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  ERTCREGPORT             equ     070h                                            ;register select port
   276                                  ERTCDATAPORT            equ     071h                                            ;data port
   277                                  ERTCSECONDREG           equ     000h                                            ;second
   278                                  ERTCMINUTEREG           equ     002h                                            ;minute
   279                                  ERTCHOURREG             equ     004h                                            ;hour
   280                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   281                                  ERTCDAYREG              equ     007h                                            ;day
   282                                  ERTCMONTHREG            equ     008h                                            ;month
   283                                  ERTCYEARREG             equ     009h                                            ;year of the century
   284                                  ERTCSTATUSREG           equ     00bh                                            ;status
   285                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   286                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   287                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   288                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   289                                  ERTCCENTURYREG          equ     032h                                            ;century
   290                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;
   293                                  ;       x86 CPU Architecture                                                    ;EX86...
   294                                  ;
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   300                                  ;
   301                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   302                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   303                                  ;
   304                                  ;       0.......        Segment is not present in memory (triggers int 11)
   305                                  ;       1.......        Segment is present in memory
   306                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   307                                  ;       ...0....        Segment is a system segment
   308                                  ;       ...00010                Local Descriptor Table
   309                                  ;       ...00101                Task Gate
   310                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   311                                  ;       ...01100                Call Gate (386)
   312                                  ;       ...01110                Interrupt Gate (386)
   313                                  ;       ...01111                Trap Gate (386)
   314                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   315                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   316                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   317                                  ;
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   320                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   321                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   322                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   323                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   324                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   325                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   326                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       Firmware-Defined Values
   330                                  ;
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;
   334                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   335                                  ;
   336                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   337                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   341                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   342                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   343                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   344                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   345                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   346                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   347                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   348                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   349                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   350                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       Standards-Based Values
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;
   358                                  ;       ASCII                                                                   EASCII...
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   362                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   363                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   364                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   365                                  EASCIISPACE             equ     020h                                            ;space
   366                                  EASCIIPERIOD            equ     02Eh                                            ;period
   367                                  EASCIIUPPERA            equ     041h                                            ;'A'
   368                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   369                                  EASCIILOWERA            equ     061h                                            ;'a'
   370                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   371                                  EASCIITILDE             equ     07Eh                                            ;'~'
   372                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   373                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   374                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   375                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   376                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   377                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   378                                  EASCIICASE              equ     00100000b                                       ;case bit
   379                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  ;
   382                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   383                                  ;
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   386                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   387                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   388                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   389                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   390                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   391                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   392                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   393                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   394                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   395                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   396                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   397                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   398                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   399                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   400                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   401                                  ;-----------------------------------------------------------------------------------------------------------------------
   402                                  ;
   403                                  ;       Operating System Values
   404                                  ;
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;
   408                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   409                                  ;
   410                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   411                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   412                                  ;
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   415                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   416                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   417                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   418                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   419                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   420                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  ;       Console Constants                                                       ECON...
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ECONCOLS                equ     80                                              ;columns per row
   425                                  ECONROWS                equ     24                                              ;console rows
   426                                  ECONOIAROW              equ     24                                              ;operator information area row
   427                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   428                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   429                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   430                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   431                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   436                                  EGDTCGA                 equ     020h                                            ;cga video selector
   437                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   438                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   439                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   440                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   441                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   442                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;       Keyboard Flags                                                          EKEYF...
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   447                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   448                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   449                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   450                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   451                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   452                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   453                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   454                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   455                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   456                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;       Kernel Constants                                                        EKRN...
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   461                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   462                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   463                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   464                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   465                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   470                                  ;-----------------------------------------------------------------------------------------------------------------------
   471                                  ;       Memory Management Constants                                             EMEM...
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   474                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   475                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   476                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  ;       Message Identifiers                                                     EMSG...
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   481                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   482                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   483                                  ;=======================================================================================================================
   484                                  ;
   485                                  ;       Structures
   486                                  ;
   487                                  ;=======================================================================================================================
   488                                  ;-----------------------------------------------------------------------------------------------------------------------
   489                                  ;
   490                                  ;       DATETIME
   491                                  ;
   492                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   493                                  ;
   494                                  ;-----------------------------------------------------------------------------------------------------------------------
   495                                  struc                   DATETIME
   496 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   497 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   498 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   499 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   500 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   501 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   502 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   503 00000007 <res 00000001>          .century                resb    1                                               ;century
   504                                  EDATETIMELEN            equ     ($-.second)
   505                                  endstruc
   506                                  ;-----------------------------------------------------------------------------------------------------------------------
   507                                  ;
   508                                  ;       MEMBLOCK
   509                                  ;
   510                                  ;       The MEMBLOCK structure defines a memory block.
   511                                  ;
   512                                  ;-----------------------------------------------------------------------------------------------------------------------
   513                                  struc                   MEMBLOCK
   514 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   515 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   516 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   517 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   518 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   519 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   520 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   521 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   522                                  EMEMBLOCKLEN            equ     ($-.signature)
   523                                  endstruc
   524                                  ;-----------------------------------------------------------------------------------------------------------------------
   525                                  ;
   526                                  ;       MEMROOT
   527                                  ;
   528                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   529                                  ;
   530                                  ;-----------------------------------------------------------------------------------------------------------------------
   531                                  struc                   MEMROOT
   532 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   533 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   534 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   535 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   536 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   537 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   538                                  EMEMROOTLEN             equ     ($-.firstcontig)
   539                                  endstruc
   540                                  ;-----------------------------------------------------------------------------------------------------------------------
   541                                  ;
   542                                  ;       MQUEUE
   543                                  ;
   544                                  ;       The MQUEUE structure maps memory used for a message queue.
   545                                  ;
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  struc                   MQUEUE
   548 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   549 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   550 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   551                                  endstruc
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ;
   554                                  ;       PCI
   555                                  ;
   556                                  ;       The PCI structure defines a PCI bus, device and function context.
   557                                  ;
   558                                  ;-----------------------------------------------------------------------------------------------------------------------
   559                                  struc                   PCI
   560 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   561 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   562 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   563 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   564 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   565                                  .configdata             equ     $                                               ;data read from port 0CFCh
   566 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   567 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   568 0000000C <res 00000004>          .bar0                   resd    1                                               ;base address register 0
   569 00000010 <res 00000004>          .bar1                   resd    1                                               ;base address register 1
   570 00000014 <res 00000004>          .bar2                   resd    1                                               ;base address register 2
   571 00000018 <res 00000004>          .bar3                   resd    1                                               ;base address register 3
   572 0000001C <res 00000004>          .bar4                   resd    1                                               ;base address register 4
   573 00000020 <res 00000004>          .bar5                   resd    1                                               ;base address register 5
   574                                  EPCILEN                 equ     ($-.configdata)
   575                                  endstruc
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  ;
   578                                  ;       OSDATA
   579                                  ;
   580                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   581                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   582                                  ;
   583                                  ;-----------------------------------------------------------------------------------------------------------------------
   584                                  struc                   OSDATA
   585 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   586 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   587 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   588 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   589 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   590 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   591 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   592 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   593 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   594 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   595 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   596 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   597 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   598 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   599 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   600 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   601 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   602 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   603 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   604 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   605 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   606 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   607 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   608 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   609 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   610 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   611 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   612 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   613 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   614 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   615 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   616 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   617 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   618 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   619 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   620 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   621 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   622 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   623 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   624 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   625 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   626 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   627 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   628 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   629 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   630 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   631 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   632 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   633 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   634 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   635 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   636 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   637 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   638 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   639 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   640 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   641 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   642 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   643 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   644 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   645 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   646 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   647 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   648 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   649 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   650 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   651 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   652 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   653 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   654 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   655 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   656 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   657 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   658 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   659 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   660 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   661 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   662 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   663 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   664 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   665 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   666 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   667 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   668 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   669 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   670 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   671 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   672 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   673 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   674 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   675 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   676 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   677 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   678 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   679 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   680 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   681 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   682 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   683 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   684 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   685 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   686                                  ;-----------------------------------------------------------------------------------------------------------------------
   687                                  ;
   688                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   689                                  ;
   690                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   691                                  ;
   692                                  ;-----------------------------------------------------------------------------------------------------------------------
   693                                  ECONDATA                equ     ($)
   694 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   695 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   696 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   697 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   698 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   699 00000814 <res 00000004>          wdConsolePCIVendorStr   resd    1                                               ;PCI vendor name string addr
   700 00000818 <res 00000004>          wdConsolePCIChipStr     resd    1                                               ;PCI device name string addr
   701 0000081C <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   702 0000081D <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   703 0000081E <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   704 0000081F <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   705 00000820 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   706 00000821 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   707 00000822 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   708 00000823 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   709 00000824 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   710 00000825 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   711 00000826 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   712 00000827 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   713 00000828 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   714 00000878 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   715 000008C8 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   716 00000918 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   717 00000923 <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   718 0000092E <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   719 00000939 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   720 00000951 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   721 00000959 <res 0000001C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   722                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   723                                  ;-----------------------------------------------------------------------------------------------------------------------
   724                                  ;
   725                                  ;       End of OS Variables
   726                                  ;
   727                                  ;-----------------------------------------------------------------------------------------------------------------------
   728                                  endstruc
   729                                  ;-----------------------------------------------------------------------------------------------------------------------
   730                                  ;
   731                                  ;       Macros
   732                                  ;
   733                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   734                                  ;
   735                                  ;-----------------------------------------------------------------------------------------------------------------------
   736                                  %macro                  mint    1
   737                                  _%1                     equ     ($-$$) / EX86DESCLEN
   738                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   739                                  %endmacro
   740                                  %macro                  mtrap   1
   741                                  _%1                     equ     ($-$$) / EX86DESCLEN
   742                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   743                                  %endmacro
   744                                  %macro                  menter  1
   745                                  ?%1                     equ     ($-$$)
   746                                  %endmacro
   747                                  %macro                  tsvce   1
   748                                  e%1                     equ     ($-tsvc)/4
   749                                                          dd      %1
   750                                  %endmacro
   751                                  %ifdef BUILDBOOT
   752                                  ;=======================================================================================================================
   753                                  ;
   754                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   755                                  ;
   756                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   757                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   758                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   759                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   760                                  ;
   761                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   762                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   763                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   764                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   765                                  ;       immediately followed by a disk parameter table.
   766                                  ;
   767                                  ;=======================================================================================================================
   768                                                          cpu     8086                                            ;assume minimal CPU
   769                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   770                                                          bits    16                                              ;16-bit code at power-up
   771                                  %ifdef BUILDPREP
   772                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   773                                  %else
   774 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   775                                  %endif
   776                                  ;-----------------------------------------------------------------------------------------------------------------------
   777                                  ;
   778                                  ;       Disk Parameter Table
   779                                  ;
   780                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   781                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   782                                  ;
   783                                  ;-----------------------------------------------------------------------------------------------------------------------
   784 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   785 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   786 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   787 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   788 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   789 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   790 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   791 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   792 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   793                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   794 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   795 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   796 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   797                                  ;
   798                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   799                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   800                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   801                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   802                                  ;       given several possible starting values for CS:IP.
   803                                  ;
   804                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   805 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   806                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   807 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   808 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   809 00000025 B104                                            mov     cl,4                                            ;shift count
   810 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   811 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   812 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   813                                  ;
   814                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   815                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   816                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   817                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   818                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   819                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   820                                  ;
   821 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   822 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   823 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   824 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   825 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   826                                  ;
   827                                  ;       Our boot addressability is now set up according to the following diagram.
   828                                  ;
   829                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   830                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   831                                  ;                               |  256 = 100h bytes                             |
   832                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   833                                  ;                               |  Boot Sector (vstart=0100h)                   |
   834                                  ;                               |  1 sector = 512 = 200h bytes                  |
   835                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   836                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   837                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   838                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   839                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   840                                  ;                               |  2 sectors = 1024 = 400h bytes
   841                                  ;                       009400  +-----------------------------------------------+ DS:1900
   842                                  ;
   843                                  ;       On entry, DL indicates the drive being booted from.
   844                                  ;
   845 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   846                                  ;
   847                                  ;       Compute directory i/o buffer address.
   848                                  ;
   849 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   850 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   851 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   852 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   853                                  ;
   854                                  ;       Compute segment where os.com will be loaded.
   855                                  ;
   856 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   857 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   858 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   859 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   860                                  ;
   861                                  ;       Set the video mode to 80 column, 25 row, text.
   862                                  ;
   863 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   864 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   865                                  ;
   866                                  ;       Write a message to the console so we know we have our addressability established.
   867                                  ;
   868 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   869 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   870                                  ;
   871                                  ;       Initialize the number of directory sectors to search.
   872                                  ;
   873 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   874 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   875                                  ;
   876                                  ;       Compute number of directory sectors and initialize overhead count.
   877                                  ;
   878 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   879 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   880 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   881 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   882                                  ;
   883                                  ;       Compute directory entries per sector.
   884                                  ;
   885 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   886 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   887 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   888                                  ;
   889                                  ;       Compute first logical directory sector and update overhead count.
   890                                  ;
   891 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   892 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   893 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   894 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   895 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   896 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   897                                  ;
   898                                  ;       Read directory sector.
   899                                  ;
   900 0000008E B001                    .30                     mov     al,1                                            ;sector count
   901 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   902 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   903 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   904                                  ;
   905                                  ;       Setup variables to search this directory sector.
   906                                  ;
   907 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   908 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   909 000000A1 7603                                            jna     .40                                             ;no, continue
   910 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   911 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   912 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   913 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   914                                  ;
   915                                  ;       Loop through directory sectors searching for kernel program.
   916                                  ;
   917 000000B1 56                      .50                     push    si                                              ;save kernel name address
   918 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   919 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   920 000000B6 FC                                              cld                                                     ;forward strings
   921 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   922 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   923 000000BA 5E                                              pop     si                                              ;restore kernel name address
   924 000000BB 7418                                            je      .60                                             ;exit loop if found
   925 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   926 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   927 000000C2 75ED                                            jnz     .50                                             ;next entry
   928                                  ;
   929                                  ;       Repeat search if we are not at the end of the directory.
   930                                  ;
   931 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   932 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   933 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   934 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   935 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   936                                  ;
   937                                  ;       If we find the kernel program in the directory, read the FAT.
   938                                  ;
   939 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   940 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   941 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   942 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   943 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   944 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   945                                  ;
   946                                  ;       Get the starting cluster of the kernel program and target address.
   947                                  ;
   948 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   949 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   950                                  ;
   951                                  ;       Read each program cluster into RAM.
   952                                  ;
   953 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   954 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   955 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   956 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   957 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   958 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   959 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   960 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   961 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   962                                  ;
   963                                  ;       Update buffer pointer for next cluster.
   964                                  ;
   965 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   966 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   967 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   968 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   969 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   970                                  ;
   971                                  ;       Compute next cluster number.
   972                                  ;
   973 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   974 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   975 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   976 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   977 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   978 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   979 00000120 83E701                                          and     di,1                                            ;get low bit
   980 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   981 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   982 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   983                                  ;
   984                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   985                                  ;
   986 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   987 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   988 00000130 B104                                            mov     cl,4                                            ;shift count
   989 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   990 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   991 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   992 0000013A 75B2                                            jne     .70                                             ;no, continue
   993                                  ;
   994                                  ;       Transfer control to the operating system program.
   995                                  ;
   996 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   997 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   998 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   999                                  ;
  1000                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1001                                  ;
  1002 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1003 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1004 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1005 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1006 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1007 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1008 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1009 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1010 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1011 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1012                                  ;
  1013                                  ;       Try maxtries times to read sector.
  1014                                  ;
  1015 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1016 00000160 53                      .10                     push    bx                                              ;save buffer address
  1017 00000161 51                                              push    cx                                              ;save retry count
  1018 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1019 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1020 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1021 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1022 0000016F 59                                              pop     cx                                              ;restore retry count
  1023 00000170 5B                                              pop     bx                                              ;restore buffer address
  1024 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1025 00000173 E2EB                                            loop    .10                                             ;retry
  1026                                  ;
  1027                                  ;       Handle disk error: convert to ASCII and store in error string.
  1028                                  ;
  1029 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1030 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1031 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1032 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1033 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1034 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1035 00000183 7203                                            jb      .20                                             ;continue if numeral
  1036 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1037 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1038 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1039 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1040 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1041 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1042 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1043                                  ;
  1044                                  ;       Wait for a key press.
  1045                                  ;
  1046 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1047 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1048 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1049 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1050 0000019F F4                                              hlt                                                     ;wait for interrupt
  1051 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1052                                  ;
  1053                                  ;       Reset the system.
  1054                                  ;
  1055 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1056 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1057 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1058 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1059 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1060                                  ;
  1061                                  ;       Display text message.
  1062                                  ;
  1063 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1064 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1065 000001AC 84C0                                            test    al,al                                           ;end of string?
  1066 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1067 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1068 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1069 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1070 000001B6 C3                      BootReturn              ret                                                     ;return
  1071                                  ;-----------------------------------------------------------------------------------------------------------------------
  1072                                  ;
  1073                                  ;       Constants
  1074                                  ;
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076 000001B7 90                                              align   2
  1077 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1078 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1078 000001C3 4F4D               
  1079 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1079 000001CE 530D0A00           
  1080 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1080 000001DB 7220               
  1081 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1082 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1082 000001E9 6700               
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084                                  ;
  1085                                  ;       Work Areas
  1086                                  ;
  1087                                  ;-----------------------------------------------------------------------------------------------------------------------
  1088 000001EB 90                                              align   2
  1089 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1090 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1091 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1092 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1093 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1094                                  wwReadCountCommand      equ     $                                               ;read count and command
  1095 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1096 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1097                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1098 000001F8 00                      wbDrive                 db      0                                               ;drive
  1099 000001F9 00                      wbHead                  db      0                                               ;head
  1100                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1101 000001FA 00                                              db      0                                               ;sector
  1102 000001FB 00                      wbTrack                 db      0                                               ;track
  1103 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1104 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1105                                  %endif
  1106                                  %ifdef BUILDPREP
  1107                                  ;=======================================================================================================================
  1108                                  ;
  1109                                  ;       Diskette Preparation Code
  1110                                  ;
  1111                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1112                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1113                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1114                                  ;
  1115                                  ;=======================================================================================================================
  1116                                  ;
  1117                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1118                                  ;
  1119                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1120                                                          call    BootPrint                                       ;display message
  1121                                  ;
  1122                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1123                                  ;
  1124                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1125                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1126                                                          jnz     .20                                             ;continue if key pressed
  1127                                                          sti                                                     ;enable interrupts
  1128                                                          hlt                                                     ;wait for interrupt
  1129                                                          jmp     .10                                             ;repeat
  1130                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1131                                                          je      .30                                             ;yes, branch
  1132                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1133                                                          jne     .10                                             ;no, repeat
  1134                                                          jmp     .120                                            ;yes, exit program
  1135                                  ;
  1136                                  ;       Display writing-sector message and patch the JMP instruction.
  1137                                  ;
  1138                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1139                                                          call    BootPrint                                       ;display message
  1140                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1141                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1142                                                          mov     [bx],ax                                         ;update the JMP instruction
  1143                                  ;
  1144                                  ;       Try to read the boot sector.
  1145                                  ;
  1146                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1147                                  .40                     push    cx                                              ;save remaining tries
  1148                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1149                                                          mov     dx,0                                            ;head zero, drive zero
  1150                                                          mov     cx,1                                            ;track zero, sector one
  1151                                                          mov     al,1                                            ;one sector
  1152                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1153                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1154                                                          pop     cx                                              ;restore remaining retries
  1155                                                          jnc     .50                                             ;skip ahead if successful
  1156                                                          loop    .40                                             ;try again
  1157                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1158                                                          jmp     .70                                             ;branch to error routine
  1159                                  ;
  1160                                  ;       Copy diskette parms from input buffer to output buffer.
  1161                                  ;
  1162                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1163                                                          add     si,11                                           ;skip over JMP and system ID
  1164                                                          mov     di,Boot                                         ;output buffer address
  1165                                                          add     di,11                                           ;skip over JMP and system ID
  1166                                                          mov     cx,19                                           ;length of diskette parameters
  1167                                                          cld                                                     ;forward string copies
  1168                                                          rep     movsb                                           ;copy diskette parameters
  1169                                  ;
  1170                                  ;       Try to write boot sector to diskette.
  1171                                  ;
  1172                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1173                                  .60                     push    cx                                              ;save remaining tries
  1174                                                          mov     bx,Boot                                         ;output buffer address
  1175                                                          mov     dx,0                                            ;head zero, drive zero
  1176                                                          mov     cx,1                                            ;track zero, sector one
  1177                                                          mov     al,1                                            ;one sector
  1178                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1179                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1180                                                          pop     cx                                              ;restore remaining retries
  1181                                                          jnc     .100                                            ;skip ahead if successful
  1182                                                          loop    .60                                             ;try again
  1183                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1184                                  ;
  1185                                  ;       Convert the error code to ASCII and display the error message.
  1186                                  ;
  1187                                  .70                     push    ax                                              ;save error code
  1188                                                          mov     al,ah                                           ;copy error code
  1189                                                          mov     ah,0                                            ;AX = error code
  1190                                                          mov     dl,10h                                          ;hexadecimal divisor
  1191                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1192                                                          or      ax,03030h                                       ;add ASCII zone digits
  1193                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1194                                                          jb      .80                                             ;yes, continue
  1195                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1196                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1197                                                          jb      .90                                             ;yes, continue
  1198                                                          add     al,7                                            ;no, make ASCII
  1199                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1200                                                          call    BootPrint                                       ;write error message
  1201                                                          pop     ax                                              ;restore error code
  1202                                  ;
  1203                                  ;       Display the completion message.
  1204                                  ;
  1205                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1206                                                          mov     al,ah                                           ;BIOS return code
  1207                                                          cmp     al,0                                            ;success?
  1208                                                          je      .110                                            ;yes, continue
  1209                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1210                                                          cmp     al,1                                            ;disk parameter error?
  1211                                                          je      .110                                            ;yes, continue
  1212                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1213                                                          cmp     al,2                                            ;address mark not found?
  1214                                                          je      .110                                            ;yes, continue
  1215                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1216                                                          cmp     al,3                                            ;protected disk?
  1217                                                          je      .110                                            ;yes, continue
  1218                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1219                                                          cmp     al,6                                            ;diskette removed?
  1220                                                          je      .110                                            ;yes, continue
  1221                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1222                                                          cmp     al,80H                                          ;drive timed out?
  1223                                                          je      .110                                            ;yes, continue
  1224                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1225                                  .110                    call    BootPrint                                       ;display result message
  1226                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1227                                                          int     021h                                            ;terminate DOS program
  1228                                                          ret                                                     ;return (should not execute)
  1229                                  ;-----------------------------------------------------------------------------------------------------------------------
  1230                                  ;
  1231                                  ;       Diskette Preparation Messages
  1232                                  ;
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1235                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1236                                                          db      13,10
  1237                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1238                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1239                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1240                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1241                                                          db      13,10,0
  1242                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1243                                                          db      13,10,0
  1244                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1245                                                          db      13,10,0
  1246                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1247                                                          db      13,10,0
  1248                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1249                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1250                                                          db      13,10,0
  1251                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1252                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1253                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1254                                                          db      13,10,"and retry."
  1255                                                          db      13,10,0
  1256                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1257                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1258                                                          db      13,10,"using another diskette."
  1259                                                          db      13,10,0
  1260                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1261                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1262                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1263                                                          db      13,10,0
  1264                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1265                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1266                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1267                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1268                                                          db      13,10,"is properly inserted in the diskette drive."
  1269                                                          db      13,10,0
  1270                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1271                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1272                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1273                                                          db      13,10,0
  1274                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1275                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1276                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1277                                                          db      13,10,0
  1278                                  wcPrepInBuf             equ     $
  1279                                  %endif
  1280                                  %ifdef BUILDDISK
  1281                                  ;=======================================================================================================================
  1282                                  ;
  1283                                  ;       File Allocation Tables
  1284                                  ;
  1285                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1286                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1287                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1288                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1289                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1290                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1291                                  ;       the last cluster in the chain.
  1292                                  ;
  1293                                  ;       Every three bytes encode two FAT entries as follows:
  1294                                  ;
  1295                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1296                                  ;
  1297                                  ;=======================================================================================================================
  1298                                  ;-----------------------------------------------------------------------------------------------------------------------
  1299                                  ;
  1300                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1301                                  ;
  1302                                  ;-----------------------------------------------------------------------------------------------------------------------
  1303                                  section                 fat1                                                    ;first copy of FAT
  1304                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1305                                                          db      005h,060h,000h, 007h,080h,000h
  1306                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1307                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1308                                                          db      011h,020h,001h, 013h,040h,001h
  1309                                                          db      015h,060h,001h, 017h,080h,001h
  1310                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1311                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1312                                                          db      021h,020h,002h, 023h,040h,002h
  1313                                                          db      025h,060h,002h, 027h,080h,002h
  1314                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1315                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                  ;
  1318                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1319                                  ;
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  section                 fat2                                                    ;second copy of FAT
  1322                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1323                                                          db      005h,060h,000h, 007h,080h,000h
  1324                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1325                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1326                                                          db      011h,020h,001h, 013h,040h,001h
  1327                                                          db      015h,060h,001h, 017h,080h,001h
  1328                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1329                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1330                                                          db      021h,020h,002h, 023h,040h,002h
  1331                                                          db      025h,060h,002h, 027h,080h,002h
  1332                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1333                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1334                                  ;-----------------------------------------------------------------------------------------------------------------------
  1335                                  ;
  1336                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1337                                  ;
  1338                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1339                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1340                                  ;       copy.
  1341                                  ;
  1342                                  ;-----------------------------------------------------------------------------------------------------------------------
  1343                                  section                 dir                                                     ;diskette directory
  1344                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1345                                                          db      020h                                            ;attribute (archive bit set)
  1346                                                          times   10 db 0                                         ;unused
  1347                                                          dw      0h                                              ;time
  1348                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1349                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1350                                                          dw      2                                               ;first cluster
  1351                                                          dd      05400h                                          ;file size
  1352                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1353                                  %endif
  1354                                  %ifdef BUILDCOM
  1355                                  ;=======================================================================================================================
  1356                                  ;
  1357                                  ;       OS.COM
  1358                                  ;
  1359                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1360                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1361                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1362                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1363                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1364                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1365                                  ;
  1366                                  ;       Our loader addressability is set up according to the following diagram.
  1367                                  ;
  1368                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1369                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1370                                  ;                               |  256 = 100h bytes                             |
  1371                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1372                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1373                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1374                                  ;                       007e00  +-----------------------------------------------+
  1375                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1376                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1377                                  ;                               |                                               |
  1378                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1379                                  ;                               |                                               |
  1380                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1381                                  ;                               |  Loader Code                                  |
  1382                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1383                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1384                                  ;
  1385                                  ;=======================================================================================================================
  1386                                  ;-----------------------------------------------------------------------------------------------------------------------
  1387                                  ;
  1388                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1389                                  ;
  1390                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1391                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1392                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1393                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1394                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1395                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1396                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1397                                  ;       registers.
  1398                                  ;
  1399                                  ;-----------------------------------------------------------------------------------------------------------------------
  1400                                                          cpu     8086                                            ;assume minimal CPU
  1401                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1402                                                          bits    16                                              ;this is 16-bit code
  1403                                  Loader                  push    cs                                              ;use the code segment
  1404                                                          pop     ds                                              ;...as our data segment
  1405                                                          push    cs                                              ;use the code segment
  1406                                                          pop     es                                              ;...as our extra segment
  1407                                  ;
  1408                                  ;       Write a message to the console so we know we have our addressability established.
  1409                                  ;
  1410                                                          mov     si,czStartingMsg                                ;starting message
  1411                                                          call    PutTTYString                                    ;display loader message
  1412                                  ;
  1413                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1414                                  ;
  1415                                                          call    GetCPUType                                      ;AL = cpu type
  1416                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1417                                                          cmp     al,3                                            ;80386+?
  1418                                                          jb      LoaderExit                                      ;no, exit with error message
  1419                                                          cpu     386                                             ;allow 80386 instructions
  1420                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1421                                                          call    PutTTYString                                    ;display message
  1422                                  ;
  1423                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1424                                  ;
  1425                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1426                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1427                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1428                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1429                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1430                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1431                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1432                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1433                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1434                                                          call    PutTTYString                                    ;display message
  1435                                  ;
  1436                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1437                                  ;
  1438                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1439                                                          pop     es                                              ;... as target segment
  1440                                                          xor     di,di                                           ;ES:DI = target address
  1441                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1442                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1443                                                          cld                                                     ;forward strings
  1444                                                          rep     movsb                                           ;copy kernel image
  1445                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1446                                                          call    PutTTYString                                    ;display message
  1447                                  ;
  1448                                  ;       Switch to protected mode.
  1449                                  ;
  1450                                                          xor     si,si                                           ;ES:SI = gdt addr
  1451                                                          mov     ss,si                                           ;protected mode ss
  1452                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1453                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1454                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1455                                                          mov     dx,001Fh                                        ;outer delay loop count
  1456                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1457                                                          loop    $                                               ;wait out pending interrupts
  1458                                                          dec     dx                                              ;restore outer loop count
  1459                                                          jnz     .10                                             ;continue outer loop
  1460                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1461                                  ;
  1462                                  ;       Enable hardware and maskable interrupts.
  1463                                  ;
  1464                                                          xor     al,al                                           ;enable all registers code
  1465                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1466                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1467                                                          sti                                                     ;enable maskable interrupts
  1468                                  ;
  1469                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1470                                  ;
  1471                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1472                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1473                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                  ;
  1476                                  ;       Routine:        LoaderExit
  1477                                  ;
  1478                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1479                                  ;
  1480                                  ;       In:             DS:SI   string address
  1481                                  ;
  1482                                  ;-----------------------------------------------------------------------------------------------------------------------
  1483                                  LoaderExit              call    PutTTYString                                    ;display error message
  1484                                  ;
  1485                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1486                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1487                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1488                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1489                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1490                                  ;
  1491                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1492                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1493                                                          jnz     .40                                             ;exit if key pressed
  1494                                                          sti                                                     ;enable maskable interrupts
  1495                                                          hlt                                                     ;wait for interrupt
  1496                                                          jmp     .30                                             ;repeat until keypress
  1497                                  ;
  1498                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1499                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1500                                  ;       HLT until the system resets.
  1501                                  ;
  1502                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1503                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1504                                  .50                     sti                                                     ;enable maskable interrupts
  1505                                                          hlt                                                     ;stop until reset, int, nmi
  1506                                                          jmp     .50                                             ;loop until restart kicks in
  1507                                  ;-----------------------------------------------------------------------------------------------------------------------
  1508                                  ;
  1509                                  ;       Routine:        GetCPUType
  1510                                  ;
  1511                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1512                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1513                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1514                                  ;
  1515                                  ;       Out:            AX      0 = 808x, v20, etc.
  1516                                  ;                               1 = 80186
  1517                                  ;                               2 = 80286
  1518                                  ;                               3 = 80386
  1519                                  ;
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  GetCPUType              mov     al,1                                            ;AL = 1
  1522                                                          mov     cl,32                                           ;shift count
  1523                                                          shr     al,cl                                           ;try a 32-bit shift
  1524                                                          or      al,al                                           ;did the shift happen?
  1525                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1526                                                          cpu     186
  1527                                                          push    sp                                              ;save stack pointer
  1528                                                          pop     cx                                              ;...into cx
  1529                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1530                                                          jne     .10                                             ;yes, cpu is 80186
  1531                                                          cpu     286
  1532                                                          inc     ax                                              ;AX = 2
  1533                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1534                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1535                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1536                                                          jz      .10                                             ;yes, cpu is 80286
  1537                                                          inc     ax                                              ;AX = 3
  1538                                  .10                     ret                                                     ;return
  1539                                  ;-----------------------------------------------------------------------------------------------------------------------
  1540                                  ;
  1541                                  ;       Routine:        PutTTYString
  1542                                  ;
  1543                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1544                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1545                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1546                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1547                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1548                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1549                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1550                                  ;                       to LODSB is not needed.
  1551                                  ;
  1552                                  ;       In:             DS:SI   address of string
  1553                                  ;
  1554                                  ;       Out:            DF      0
  1555                                  ;                       ZF      1
  1556                                  ;                       AL      0
  1557                                  ;
  1558                                  ;-----------------------------------------------------------------------------------------------------------------------
  1559                                  PutTTYString            cld                                                     ;forward strings
  1560                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1561                                                          test    al,al                                           ;end of string?
  1562                                                          jz      .20                                             ;... yes, exit our loop
  1563                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1564                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1565                                                          jmp     .10                                             ;repeat until done
  1566                                  .20                     ret                                                     ;return
  1567                                  ;-----------------------------------------------------------------------------------------------------------------------
  1568                                  ;
  1569                                  ;       Loader Data
  1570                                  ;
  1571                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1572                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1573                                  ;
  1574                                  ;-----------------------------------------------------------------------------------------------------------------------
  1575                                                          align   2
  1576                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1577                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1578                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1579                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1580                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1581                                                          db      "Please press any key to restart the computer.",13,10,0
  1582                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1583                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1584                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1585                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1586                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1587                                  ;=======================================================================================================================
  1588                                  ;
  1589                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1590                                  ;
  1591                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1592                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1593                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1594                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1595                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1596                                  ;
  1597                                  ;=======================================================================================================================
  1598                                  ;=======================================================================================================================
  1599                                  ;
  1600                                  ;       Kernel Tables
  1601                                  ;
  1602                                  ;=======================================================================================================================
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                  ;
  1605                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1606                                  ;
  1607                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1608                                  ;       first descriptor must be all nulls.
  1609                                  ;
  1610                                  ;       6   5         4         3         2         1         0
  1611                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1612                                  ;       ----------------------------------------------------------------
  1613                                  ;       h......hffffmmmma......ab......................bn..............n
  1614                                  ;
  1615                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1616                                  ;               ffff                                                            flags
  1617                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1618                                  ;                       a......a                                                access
  1619                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1620                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1621                                  ;
  1622                                  ;       00000000                                                                all areas have base addresses below 2^24
  1623                                  ;               0...                                                            single-byte size granularity
  1624                                  ;               1...                                                            4-kilobyte size granularity
  1625                                  ;               .0..                                                            16-bit default for code segments
  1626                                  ;               .1..                                                            32-bit default for code segments
  1627                                  ;               ..0.                                                            intel-reserved; should be zero
  1628                                  ;               ...0                                                            available for operating system use
  1629                                  ;                   0000                                                        segment is less than 2^16 in size
  1630                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1631                                  ;                       1.......                                                segment is present in memory
  1632                                  ;                       .00.....                                                segment is of privilege level 0
  1633                                  ;                       ...0....                                                segment is of system or gate type
  1634                                  ;                       ...00010                                                local decriptor table (LDT)
  1635                                  ;                       ...01001                                                task state segment (TSS) available
  1636                                  ;                       ...01011                                                task state segment (TSS) busy
  1637                                  ;                       ...10...                                                data segment
  1638                                  ;                       ...10011                                                writable data (accessed)
  1639                                  ;                       ...11...                                                code segment
  1640                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1641                                  ;
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  section                 gdt                                                     ;global descriptor table
  1644                                                          dq      0000000000000000h                               ;00 required null selector
  1645                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1646                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1647                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1648                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1649                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1650                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1651                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1652                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1653                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1654                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1655                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1656                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1657                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1658                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  ;
  1661                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1662                                  ;
  1663                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1664                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1665                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1666                                  ;
  1667                                  ;       6   5         4         3         2         1         0
  1668                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1669                                  ;       ----------------------------------------------------------------
  1670                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1671                                  ;
  1672                                  ;       h...h   high-order offset (bits 16-31)
  1673                                  ;       P       present (0=unused interrupt)
  1674                                  ;       zz      descriptor privilege level
  1675                                  ;       S       storage segment (must be zero for IDT)
  1676                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1677                                  ;       S...S   handling code selector in GDT
  1678                                  ;       l...l   lo-order offset (bits 0-15)
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                  section                 idt                                                     ;interrupt descriptor table
  1682                                                          mint    dividebyzero                                    ;00 divide by zero
  1683                                                          mint    singlestep                                      ;01 single step
  1684                                                          mint    nmi                                             ;02 non-maskable
  1685                                                          mint    break                                           ;03 break
  1686                                                          mint    into                                            ;04 into
  1687                                                          mint    bounds                                          ;05 bounds
  1688                                                          mint    badopcode                                       ;06 bad op code
  1689                                                          mint    nocoproc                                        ;07 no coprocessor
  1690                                                          mint    doublefault                                     ;08 double-fault
  1691                                                          mint    operand                                         ;09 operand
  1692                                                          mint    badtss                                          ;0a bad TSS
  1693                                                          mint    notpresent                                      ;0b not-present
  1694                                                          mint    stacklimit                                      ;0c stack limit
  1695                                                          mint    protection                                      ;0d general protection fault
  1696                                                          mint    int14                                           ;0e (reserved)
  1697                                                          mint    int15                                           ;0f (reserved)
  1698                                                          mint    coproccalc                                      ;10 (reserved)
  1699                                                          mint    int17                                           ;11 (reserved)
  1700                                                          mint    int18                                           ;12 (reserved)
  1701                                                          mint    int19                                           ;13 (reserved)
  1702                                                          mint    int20                                           ;14 (reserved)
  1703                                                          mint    int21                                           ;15 (reserved)
  1704                                                          mint    int22                                           ;16 (reserved)
  1705                                                          mint    int23                                           ;17 (reserved)
  1706                                                          mint    int24                                           ;18 (reserved)
  1707                                                          mint    int25                                           ;19 (reserved)
  1708                                                          mint    int26                                           ;1a (reserved)
  1709                                                          mint    int27                                           ;1b (reserved)
  1710                                                          mint    int28                                           ;1c (reserved)
  1711                                                          mint    int29                                           ;1d (reserved)
  1712                                                          mint    int30                                           ;1e (reserved)
  1713                                                          mint    int31                                           ;1f (reserved)
  1714                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1715                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1716                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1717                                                          mtrap   com2                                            ;23 IRQ3 com2
  1718                                                          mtrap   com1                                            ;24 IRQ4 com1
  1719                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1720                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1721                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1722                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1723                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1724                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1725                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1726                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1727                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1728                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1729                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1730                                                          mtrap   svc                                             ;30 OS services
  1731                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1732                                  ;=======================================================================================================================
  1733                                  ;
  1734                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1735                                  ;
  1736                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1737                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1738                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1739                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1740                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1741                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1742                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1743                                  ;
  1744                                  ;=======================================================================================================================
  1745                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1746                                                          cpu     386                                             ;allow 80386 instructions
  1747                                                          bits    32                                              ;this is 32-bit code
  1748                                  ;=======================================================================================================================
  1749                                  ;
  1750                                  ;       CPU Interrupt Handlers
  1751                                  ;
  1752                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1753                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1754                                  ;
  1755                                  ;=======================================================================================================================
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                  ;
  1758                                  ;       INT0    Divide By Zero
  1759                                  ;
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                                          menter  dividebyzero                                    ;divide by zero
  1762                                                          push    0                                               ;store interrupt nbr
  1763                                                          push    czIntDivideByZero                               ;store message offset
  1764                                                          jmp     ReportInterrupt                                 ;report interrupt
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                  ;
  1767                                  ;       INT1    Single Step
  1768                                  ;
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                                          menter  singlestep                                      ;single step
  1771                                                          push    1                                               ;store interrupt nbr
  1772                                                          push    czIntSingleStep                                 ;store message offset
  1773                                                          jmp     ReportInterrupt                                 ;report interrupt
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                  ;
  1776                                  ;       INT2    Non-Maskable Interrupt
  1777                                  ;
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                                          menter  nmi                                             ;non-maskable
  1780                                                          push    2                                               ;store interrupt nbr
  1781                                                          push    czIntNonMaskable                                ;store message offset
  1782                                                          jmp     ReportInterrupt                                 ;report interrupt
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT3    Break
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  break                                           ;break
  1789                                                          push    3                                               ;store interrupt nbr
  1790                                                          push    czIntBreak                                      ;store message offset
  1791                                                          jmp     ReportInterrupt                                 ;report interrupt
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ;
  1794                                  ;       INT4    Into
  1795                                  ;
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                                          menter  into                                            ;into
  1798                                                          push    4                                               ;store interrupt nbr
  1799                                                          push    czIntInto                                       ;store message offset
  1800                                                          jmp     ReportInterrupt                                 ;report interrupt
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                  ;
  1803                                  ;       INT5    Bounds
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                                          menter  bounds                                          ;bounds
  1807                                                          push    5                                               ;store interrupt nbr
  1808                                                          push    czIntBounds                                     ;store message offset
  1809                                                          jmp     ReportInterrupt                                 ;report interrupt
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  ;
  1812                                  ;       INT6    Bad Operation Code
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                                          menter  badopcode                                       ;bad opcode interrupt
  1816                                                          push    6                                               ;store interrupt nbr
  1817                                                          push    czIntBadOpCode                                  ;store message offset
  1818                                                          jmp     ReportInterrupt                                 ;report interrupt
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       INT7    No Coprocessor
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1825                                                          push    7                                               ;store interrupt nbr
  1826                                                          push    czIntNoCoprocessor                              ;store message offset
  1827                                                          jmp     ReportInterrupt                                 ;report interrupt
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;       INT8    Double Fault
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                                          menter  doublefault                                     ;doublefault interrupt
  1834                                                          push    8                                               ;store interrupt nbr
  1835                                                          push    czIntDoubleFault                                ;store message offset
  1836                                                          jmp     ReportInterrupt                                 ;report interrupt
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                  ;
  1839                                  ;       INT9    Operand
  1840                                  ;
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                                          menter  operand                                         ;operand interrupt
  1843                                                          push    9                                               ;store interrupt nbr
  1844                                                          push    czIntOperand                                    ;store message offset
  1845                                                          jmp     ReportInterrupt                                 ;report interrupt
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;       INT10   Bad Task State Segment
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                                          menter  badtss                                          ;bad TSS interrupt
  1852                                                          push    10                                              ;store interrupt nbr
  1853                                                          push    czIntBadTSS                                     ;store message offset
  1854                                                          jmp     ReportInterrupt                                 ;report interrupt
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       INT11   Not Present
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  notpresent                                      ;not present interrupt
  1861                                                          push    11                                              ;store interrupt nbr
  1862                                                          push    czIntNotPresent                                 ;store message offset
  1863                                                          jmp     ReportInterrupt                                 ;report interrupt
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  ;
  1866                                  ;       INT12   Stack Limit
  1867                                  ;
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                                          menter  stacklimit                                      ;stack limit interrupt
  1870                                                          push    12                                              ;store interrupt nbr
  1871                                                          push    czIntStackLimit                                 ;store message offset
  1872                                                          jmp     ReportInterrupt                                 ;report interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       INT13   General Protection Fault
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  protection                                      ;protection fault interrupt
  1879                                                          push    13                                              ;store interrupt nbr
  1880                                                          push    czIntProtection                                 ;store message offset
  1881                                                          jmp     ReportInterrupt                                 ;report interrupt
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       INT14   Reserved
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  int14                                           ;(reserved)
  1888                                                          push    14                                              ;store interrupt nbr
  1889                                                          push    czIntReserved                                   ;store message offset
  1890                                                          jmp     ReportInterrupt                                 ;report interrupt
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       INT15   Reserved
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                                          menter  int15                                           ;(reserved)
  1897                                                          push    15                                              ;store interrupt nbr
  1898                                                          push    czIntReserved                                   ;store message offset
  1899                                                          jmp     ReportInterrupt                                 ;report interrupt
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  ;
  1902                                  ;       INT16   Coprocessor Calculation
  1903                                  ;
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                                          menter  coproccalc                                      ;coprocessor calculation
  1906                                                          push    16                                              ;store interrupt nbr
  1907                                                          push    czIntCoprocessorCalc                            ;store message offset
  1908                                                          jmp     ReportInterrupt                                 ;report interrupt
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  ;
  1911                                  ;       INT17   Reserved
  1912                                  ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                                          menter  int17                                           ;(reserved)
  1915                                                          push    17                                              ;store interrupt nbr
  1916                                                          push    czIntReserved                                   ;store message offset
  1917                                                          jmp     ReportInterrupt                                 ;report interrupt
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  ;
  1920                                  ;       INT18   Reserved
  1921                                  ;
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                                          menter  int18                                           ;(reserved)
  1924                                                          push    18                                              ;store interrupt nbr
  1925                                                          push    czIntReserved                                   ;store message offset
  1926                                                          jmp     ReportInterrupt                                 ;report interrupt
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  ;
  1929                                  ;       INT19   Reserved
  1930                                  ;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                                          menter  int19                                           ;(reserved)
  1933                                                          push    19                                              ;store interrupt nbr
  1934                                                          push    czIntReserved                                   ;store message offset
  1935                                                          jmp     ReportInterrupt                                 ;report interrupt
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ;
  1938                                  ;       INT20   Reserved
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                                          menter  int20                                           ;(reserved)
  1942                                                          push    20                                              ;store interrupt nbr
  1943                                                          push    czIntReserved                                   ;store message offset
  1944                                                          jmp     ReportInterrupt                                 ;report interrupt
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       INT21   Reserved
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  int21                                           ;(reserved)
  1951                                                          push    21                                              ;store interrupt nbr
  1952                                                          push    czIntReserved                                   ;store message offset
  1953                                                          jmp     ReportInterrupt                                 ;report interrupt
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;       INT22   Reserved
  1957                                  ;
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                                          menter  int22                                           ;(reserved)
  1960                                                          push    22                                              ;store interrupt nbr
  1961                                                          push    czIntReserved                                   ;store message offset
  1962                                                          jmp     ReportInterrupt                                 ;report interrupt
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  ;
  1965                                  ;       INT23   Reserved
  1966                                  ;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                                          menter  int23                                           ;(reserved)
  1969                                                          push    23                                              ;store interrupt nbr
  1970                                                          push    czIntReserved                                   ;store message offset
  1971                                                          jmp     ReportInterrupt                                 ;report interrupt
  1972                                  ;-----------------------------------------------------------------------------------------------------------------------
  1973                                  ;
  1974                                  ;       INT24   Reserved
  1975                                  ;
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                                          menter  int24                                           ;(reserved)
  1978                                                          push    24                                              ;store interrupt nbr
  1979                                                          push    czIntReserved                                   ;store message offset
  1980                                                          jmp     ReportInterrupt                                 ;report interrupt
  1981                                  ;-----------------------------------------------------------------------------------------------------------------------
  1982                                  ;
  1983                                  ;       INT25   Reserved
  1984                                  ;
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                                          menter  int25                                           ;(reserved)
  1987                                                          push    25                                              ;store interrupt nbr
  1988                                                          push    czIntReserved                                   ;store message offset
  1989                                                          jmp     ReportInterrupt                                 ;report interrupt
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  ;
  1992                                  ;       INT26   Reserved
  1993                                  ;
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                                          menter  int26                                           ;(reserved)
  1996                                                          push    26                                              ;store interrupt nbr
  1997                                                          push    czIntReserved                                   ;store message offset
  1998                                                          jmp     ReportInterrupt                                 ;report interrupt
  1999                                  ;-----------------------------------------------------------------------------------------------------------------------
  2000                                  ;
  2001                                  ;       INT27   Reserved
  2002                                  ;
  2003                                  ;-----------------------------------------------------------------------------------------------------------------------
  2004                                                          menter  int27                                           ;(reserved)
  2005                                                          push    27                                              ;store interrupt nbr
  2006                                                          push    czIntReserved                                   ;store message offset
  2007                                                          jmp     ReportInterrupt                                 ;report interrupt
  2008                                  ;-----------------------------------------------------------------------------------------------------------------------
  2009                                  ;
  2010                                  ;       INT28   Reserved
  2011                                  ;
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                                          menter  int28                                           ;(reserved)
  2014                                                          push    28                                              ;store interrupt nbr
  2015                                                          push    czIntReserved                                   ;store message offset
  2016                                                          jmp     ReportInterrupt                                 ;report interrupt
  2017                                  ;-----------------------------------------------------------------------------------------------------------------------
  2018                                  ;
  2019                                  ;       INT29   Reserved
  2020                                  ;
  2021                                  ;-----------------------------------------------------------------------------------------------------------------------
  2022                                                          menter  int29                                           ;(reserved)
  2023                                                          push    29                                              ;store interrupt nbr
  2024                                                          push    czIntReserved                                   ;store message offset
  2025                                                          jmp     ReportInterrupt                                 ;report interrupt
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027                                  ;
  2028                                  ;       INT30   Reserved
  2029                                  ;
  2030                                  ;-----------------------------------------------------------------------------------------------------------------------
  2031                                                          menter  int30                                           ;(reserved)
  2032                                                          push    30                                              ;store interrupt nbr
  2033                                                          push    czIntReserved                                   ;store message offset
  2034                                                          jmp     ReportInterrupt                                 ;report interrupt
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;       INT31   Reserved
  2038                                  ;
  2039                                  ;-----------------------------------------------------------------------------------------------------------------------
  2040                                                          menter  int31                                           ;(reserved)
  2041                                                          push    31                                              ;store interrupt nbr
  2042                                                          push    czIntReserved                                   ;store message offset
  2043                                                          jmp     ReportInterrupt                                 ;report interrupt
  2044                                  ;-----------------------------------------------------------------------------------------------------------------------
  2045                                  ;
  2046                                  ;       Routine:        ReportInterrupt
  2047                                  ;
  2048                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2049                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2050                                  ;
  2051                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2052                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2053                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2054                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2055                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2056                                  ;
  2057                                  ;       Out:            N/A             This routine does not exit.
  2058                                  ;
  2059                                  ;-----------------------------------------------------------------------------------------------------------------------
  2060                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2061                                                          push    es                                              ;save ES at time of interrupt
  2062                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2063                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2064                                  ;
  2065                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2066                                  ;
  2067                                  ;                       [EBP+56]        EFLAGS
  2068                                  ;                       [EBP+52]        CS
  2069                                  ;                       [EBP+48]        EIP
  2070                                  ;                       [EBP+44]        interrupt number (0-31)
  2071                                  ;                       [EBP+40]        error message address
  2072                                  ;                       [EBP+36]        DS
  2073                                  ;                       [EBP+32]        ES
  2074                                  ;                       [EBP+28]        EAX
  2075                                  ;                       [EBP+24]        ECX
  2076                                  ;                       [EBP+20]        EDX
  2077                                  ;                       [EBP+16]        EBX
  2078                                  ;                       [EBP+12]        ESP
  2079                                  ;                       [EBP+8]         EBP
  2080                                  ;                       [EBP+4]         ESI
  2081                                  ;                       [EBP+0]         EDI
  2082                                  ;
  2083                                                          push    cs                                              ;load code selector ...
  2084                                                          pop     ds                                              ;... into DS
  2085                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2086                                                          pop     es                                              ;... into ES
  2087                                  ;
  2088                                  ;       Display the interrupt report boundary box
  2089                                  ;
  2090                                                          mov     cl,13                                           ;column
  2091                                                          mov     ch,6                                            ;row
  2092                                                          mov     dl,50                                           ;width
  2093                                                          mov     dh,8                                            ;height
  2094                                                          mov     bh,07h                                          ;attribute
  2095                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2096                                  ;
  2097                                  ;       Display the report header
  2098                                  ;
  2099                                                          mov     cl,15                                           ;column
  2100                                                          mov     ch,7                                            ;row
  2101                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2102                                                          call    SetConsoleString                                ;draw text string
  2103                                  ;
  2104                                  ;       Display the interrupt description label
  2105                                  ;
  2106                                                          mov     cl,15                                           ;column
  2107                                                          mov     ch,8                                            ;row
  2108                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2109                                                          call    SetConsoleString                                ;draw text string
  2110                                  ;
  2111                                  ;       Display the interrupt number
  2112                                  ;
  2113                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2114                                                          mov     cl,26                                           ;column
  2115                                                          mov     ch,8                                            ;row
  2116                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2117                                  ;
  2118                                  ;       Display the interrupt name
  2119                                  ;
  2120                                                          mov     cl,29                                           ;column
  2121                                                          mov     ch,8                                            ;row
  2122                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2123                                                          call    SetConsoleString                                ;display interrupt description
  2124                                  ;
  2125                                  ;       Display the register values header
  2126                                  ;
  2127                                                          mov     cl,15                                           ;column
  2128                                                          mov     ch,10                                           ;row
  2129                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2130                                                          call    SetConsoleString                                ;draw text string
  2131                                  ;
  2132                                  ;       Display the EAX register label and value
  2133                                  ;
  2134                                                          mov     cl,15                                           ;column
  2135                                                          mov     ch,11                                           ;row
  2136                                                          mov     esi,czIntEAX                                    ;register EAX label
  2137                                                          call    SetConsoleString                                ;draw label
  2138                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2139                                                          mov     cl,19                                           ;column
  2140                                                          mov     ch,11                                           ;row
  2141                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2142                                  ;
  2143                                  ;       Display the ECX register label and value
  2144                                  ;
  2145                                                          mov     cl,15                                           ;column
  2146                                                          mov     ch,12                                           ;row
  2147                                                          mov     esi,czIntECX                                    ;label
  2148                                                          call    SetConsoleString                                ;draw label
  2149                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2150                                                          mov     cl,19                                           ;column
  2151                                                          mov     ch,12                                           ;row
  2152                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2153                                  ;
  2154                                  ;       Display the EDX register label and value
  2155                                  ;
  2156                                                          mov     cl,15                                           ;column
  2157                                                          mov     ch,13                                           ;row
  2158                                                          mov     esi,czIntEDX                                    ;label
  2159                                                          call    SetConsoleString                                ;draw label
  2160                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2161                                                          mov     cl,19                                           ;column
  2162                                                          mov     ch,13                                           ;row
  2163                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2164                                  ;
  2165                                  ;       Display the EBX register label and value
  2166                                  ;
  2167                                                          mov     cl,15                                           ;column
  2168                                                          mov     ch,14                                           ;row
  2169                                                          mov     esi,czIntEBX                                    ;label
  2170                                                          call    SetConsoleString                                ;draw label
  2171                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2172                                                          mov     cl,19                                           ;column
  2173                                                          mov     ch,14                                           ;row
  2174                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2175                                  ;
  2176                                  ;       Display the ESI register label and value
  2177                                  ;
  2178                                                          mov     cl,29                                           ;column
  2179                                                          mov     ch,11                                           ;row
  2180                                                          mov     esi,czIntESI                                    ;label
  2181                                                          call    SetConsoleString                                ;draw label
  2182                                                          mov     eax,[ebp+4]                                     ;ESI
  2183                                                          mov     cl,33                                           ;column
  2184                                                          mov     ch,11                                           ;row
  2185                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2186                                  ;
  2187                                  ;       Display the EDI register label and value
  2188                                  ;
  2189                                                          mov     cl,29                                           ;column
  2190                                                          mov     ch,12                                           ;row
  2191                                                          mov     esi,czIntEDI                                    ;label
  2192                                                          call    SetConsoleString                                ;draw label
  2193                                                          mov     eax,[ebp+0]                                     ;EDI
  2194                                                          mov     cl,33                                           ;column
  2195                                                          mov     ch,12                                           ;row
  2196                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2197                                  ;
  2198                                  ;       Display the EBP register label and value
  2199                                  ;
  2200                                                          mov     cl,29                                           ;column
  2201                                                          mov     ch,13                                           ;row
  2202                                                          mov     esi,czIntEBP                                    ;label
  2203                                                          call    SetConsoleString                                ;draw label
  2204                                                          mov     eax,[ebp+8]                                     ;EBP
  2205                                                          mov     cl,33                                           ;column
  2206                                                          mov     ch,13                                           ;row
  2207                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2208                                  ;
  2209                                  ;       Display the DS register label and value
  2210                                  ;
  2211                                                          mov     cl,42                                           ;column
  2212                                                          mov     ch,11                                           ;row
  2213                                                          mov     esi,czIntDS                                     ;label
  2214                                                          call    SetConsoleString                                ;draw label
  2215                                                          xor     eax,eax                                         ;zero register
  2216                                                          mov     ax,[ebp+36]                                     ;DS
  2217                                                          mov     cl,46                                           ;column
  2218                                                          mov     ch,11                                           ;row
  2219                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2220                                  ;
  2221                                  ;       Display the ES register label and value
  2222                                  ;
  2223                                                          mov     cl,42                                           ;column
  2224                                                          mov     ch,12                                           ;row
  2225                                                          mov     esi,czIntES                                     ;label
  2226                                                          call    SetConsoleString                                ;draw label
  2227                                                          xor     eax,eax                                         ;zero register
  2228                                                          mov     ax,[ebp+32]                                     ;ES
  2229                                                          mov     cl,46                                           ;column
  2230                                                          mov     ch,12                                           ;row
  2231                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2232                                  ;
  2233                                  ;       Display the SS register label and value
  2234                                  ;
  2235                                                          mov     cl,42                                           ;column
  2236                                                          mov     ch,13                                           ;row
  2237                                                          mov     esi,czIntSS                                     ;label
  2238                                                          call    SetConsoleString                                ;draw label
  2239                                                          xor     eax,eax                                         ;zero register
  2240                                                          mov     ax,ss                                           ;SS
  2241                                                          mov     cl,46                                           ;column
  2242                                                          mov     ch,13                                           ;row
  2243                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2244                                  ;
  2245                                  ;       Display the CS register lable and value
  2246                                  ;
  2247                                                          mov     cl,42                                           ;column
  2248                                                          mov     ch,14                                           ;row
  2249                                                          mov     esi,czIntCS                                     ;label
  2250                                                          call    SetConsoleString                                ;draw label
  2251                                                          xor     eax,eax                                         ;zero register
  2252                                                          mov     ax,[ebp+52]                                     ;CS
  2253                                                          mov     cl,46                                           ;column
  2254                                                          mov     ch,14                                           ;row
  2255                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2256                                  ;
  2257                                  ;       Display the EFLAGS register label and value
  2258                                  ;
  2259                                                          mov     cl,51                                           ;column
  2260                                                          mov     ch,11                                           ;row
  2261                                                          mov     esi,czIntEFLAGS                                 ;label
  2262                                                          call    SetConsoleString                                ;draw label
  2263                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2264                                                          mov     cl,55                                           ;column
  2265                                                          mov     ch,11                                           ;row
  2266                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2267                                  ;
  2268                                  ;       Display the ESP register label and value
  2269                                  ;
  2270                                                          mov     cl,51                                           ;column
  2271                                                          mov     ch,13                                           ;row
  2272                                                          mov     esi,czIntESP                                    ;label
  2273                                                          call    SetConsoleString                                ;draw label
  2274                                                          mov     eax,[ebp+12]                                    ;ESP
  2275                                                          mov     cl,55                                           ;column
  2276                                                          mov     ch,13                                           ;row
  2277                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2278                                  ;
  2279                                  ;       Display the EIP register label and value
  2280                                  ;
  2281                                                          mov     cl,51                                           ;column
  2282                                                          mov     ch,14                                           ;row
  2283                                                          mov     esi,czIntEIP                                    ;label
  2284                                                          call    SetConsoleString                                ;draw label
  2285                                                          mov     eax,[ebp+48]                                    ;EIP
  2286                                                          mov     cl,55                                           ;column
  2287                                                          mov     ch,14                                           ;row
  2288                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2289                                  ;
  2290                                  ;       Halt and loop until reset
  2291                                  ;
  2292                                  .10                     sti                                                     ;enable maskable interrupts
  2293                                                          hlt                                                     ;halt processor
  2294                                                          jmp     .10                                             ;resume on interrupt
  2295                                  ;-----------------------------------------------------------------------------------------------------------------------
  2296                                  ;
  2297                                  ;       Processor Interrupt Name Strings
  2298                                  ;
  2299                                  ;-----------------------------------------------------------------------------------------------------------------------
  2300                                  czIntDivideByZero       db      "Division by zero",0
  2301                                  czIntSingleStep         db      "Single step",0
  2302                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2303                                  czIntBreak              db      "Break",0
  2304                                  czIntInto               db      "Into",0
  2305                                  czIntBounds             db      "Bounds",0
  2306                                  czIntBadOpCode          db      "Bad Operation Code",0
  2307                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2308                                  czIntDoubleFault        db      "Double Fault",0
  2309                                  czIntOperand            db      "Operand",0
  2310                                  czIntBadTSS             db      "Bad Task State Segment",0
  2311                                  czIntNotPresent         db      "Not Present",0
  2312                                  czIntStackLimit         db      "Stack Limit",0
  2313                                  czIntProtection         db      "General Protection Fault",0
  2314                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2315                                  czIntReserved           db      "Reserved",0
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                  ;
  2318                                  ;       Processor Interrupt Handling Strings
  2319                                  ;
  2320                                  ;-----------------------------------------------------------------------------------------------------------------------
  2321                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2322                                  czIntLabel              db      "Interrupt #",0
  2323                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2324                                  czIntEAX                db      "EAX:",0
  2325                                  czIntECX                db      "ECX:",0
  2326                                  czIntEDX                db      "EDX:",0
  2327                                  czIntEBX                db      "EBX:",0
  2328                                  czIntESI                db      "ESI:",0
  2329                                  czIntEDI                db      "EDI:",0
  2330                                  czIntEBP                db      "EBP:",0
  2331                                  czIntESP                db      "ESP:",0
  2332                                  czIntDS                 db      " DS:",0
  2333                                  czIntES                 db      " ES:",0
  2334                                  czIntSS                 db      " SS:",0
  2335                                  czIntCS                 db      " CS:",0
  2336                                  czIntEFLAGS             db      "FLG:",0
  2337                                  czIntEIP                db      "EIP:",0
  2338                                  ;-----------------------------------------------------------------------------------------------------------------------
  2339                                  ;
  2340                                  ;       Routine:        DrawTextDialogBox
  2341                                  ;
  2342                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2343                                  ;
  2344                                  ;       In:             CL      upper left column (0-79)
  2345                                  ;                       CH      upper left row (0-24)
  2346                                  ;                       DL      column width, excluding border
  2347                                  ;                       DH      row height, excluding border
  2348                                  ;                       BH      color attribute
  2349                                  ;
  2350                                  ;-----------------------------------------------------------------------------------------------------------------------
  2351                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2352                                                          push    esi                                             ;
  2353                                                          push    edi                                             ;
  2354                                                          push    es                                              ;
  2355                                                          push    EGDTCGA                                         ;load CGA selector ...
  2356                                                          pop     es                                              ;... into ES
  2357                                  ;
  2358                                  ;       Compute target display offset
  2359                                  ;
  2360                                                          xor     eax,eax                                         ;zero register
  2361                                                          mov     al,ch                                           ;row
  2362                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2363                                                          mul     ah                                              ;row offset
  2364                                                          add     al,cl                                           ;add column
  2365                                                          adc     ah,0                                            ;add overflow
  2366                                                          add     al,cl                                           ;add column
  2367                                                          adc     ah,0                                            ;add overflow
  2368                                                          mov     edi,eax                                         ;target row offset
  2369                                  ;
  2370                                  ;       Display top border row
  2371                                  ;
  2372                                                          push    edi                                             ;save target row offset
  2373                                                          mov     ah,bh                                           ;attribute
  2374                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2375                                                          stosw                                                   ;display character and attribute
  2376                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2377                                                          xor     ecx,ecx                                         ;zero register
  2378                                                          mov     cl,dl                                           ;width, excluding border
  2379                                                          rep     stosw                                           ;display horizontal border
  2380                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2381                                                          stosw                                                   ;display character and attribute
  2382                                                          pop     edi                                             ;restore target row offset
  2383                                                          add     edi,ECONROWBYTES                                ;next row
  2384                                  ;
  2385                                  ;       Display dialog box body rows
  2386                                  ;
  2387                                                          xor     ecx,ecx                                         ;zero register
  2388                                                          mov     cl,dh                                           ;height, excluding border
  2389                                  .10                     push    ecx                                             ;save remaining rows
  2390                                                          push    edi                                             ;save target row offset
  2391                                                          mov     ah,bh                                           ;attribute
  2392                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2393                                                          stosw                                                   ;display character and attribute
  2394                                                          mov     al,EASCIISPACE                                  ;space
  2395                                                          xor     ecx,ecx                                         ;zero register
  2396                                                          mov     cl,dl                                           ;width, excluding border
  2397                                                          rep     stosw                                           ;display row
  2398                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2399                                                          stosw                                                   ;display character and attribute
  2400                                                          pop     edi                                             ;restore target row offset
  2401                                                          add     edi,ECONROWBYTES                                ;next row
  2402                                                          pop     ecx                                             ;remaining rows
  2403                                                          loop    .10                                             ;next row
  2404                                  ;
  2405                                  ;       Display bottom border row
  2406                                  ;
  2407                                                          push    edi                                             ;save target row offset
  2408                                                          mov     ah,bh                                           ;attribute
  2409                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2410                                                          stosw                                                   ;display character and attribute
  2411                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2412                                                          xor     ecx,ecx                                         ;zero register
  2413                                                          mov     cl,dl                                           ;width, excluding border
  2414                                                          rep     stosw                                           ;display horizontal border
  2415                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2416                                                          stosw                                                   ;display character and attribute
  2417                                                          pop     edi                                             ;restore target row offset
  2418                                                          add     edi,ECONROWBYTES                                ;next row
  2419                                  ;
  2420                                  ;       Restore and return
  2421                                  ;
  2422                                                          pop     es                                              ;restore non-volatile regs
  2423                                                          pop     edi                                             ;
  2424                                                          pop     esi                                             ;
  2425                                                          pop     ecx                                             ;
  2426                                                          ret                                                     ;return
  2427                                  ;=======================================================================================================================
  2428                                  ;
  2429                                  ;       Hardware Device Interupts
  2430                                  ;
  2431                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2432                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2433                                  ;       (BX=2028h).
  2434                                  ;
  2435                                  ;=======================================================================================================================
  2436                                  ;-----------------------------------------------------------------------------------------------------------------------
  2437                                  ;
  2438                                  ;       IRQ0    Clock Tick Interrupt
  2439                                  ;
  2440                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2441                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2442                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2443                                  ;
  2444                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2445                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2446                                  ;
  2447                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2448                                  ;       zero, the floppy disk motors are turned off.
  2449                                  ;
  2450                                  ;-----------------------------------------------------------------------------------------------------------------------
  2451                                                          menter  clocktick                                       ;clock tick interrupt
  2452                                                          push    eax                                             ;save non-volatile regs
  2453                                                          push    edx                                             ;
  2454                                                          push    ds                                              ;
  2455                                  ;
  2456                                  ;       Update the clock tick count and the elapsed days as needed.
  2457                                  ;
  2458                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2459                                                          pop     ds                                              ;... into data segment register
  2460                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2461                                                          inc     eax                                             ;increment clock ticks
  2462                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2463                                                          jb      irq0.10                                         ;no, skip ahead
  2464                                                          inc     byte [wbClockDays]                              ;increment clock days
  2465                                                          xor     eax,eax                                         ;reset clock ticks
  2466                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2467                                  ;
  2468                                  ;       Decrement floppy disk motor timeout.
  2469                                  ;
  2470                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2471                                                          je      irq0.20                                         ;yes, skip ahead
  2472                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2473                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2474                                  ;
  2475                                  ;       Turn off the floppy disk motor if appropriate.
  2476                                  ;
  2477                                                          sti                                                     ;enable maskable interrupts
  2478                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2479                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2480                                                          in      al,dx                                           ;FDC main status byte
  2481                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2482                                                          jnz     irq0.15                                         ;wait while busy
  2483                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2484                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2485                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2486                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2487                                                          out     dx,al                                           ;turn motor off
  2488                                  ;
  2489                                  ;       Signal the end of the hardware interrupt.
  2490                                  ;
  2491                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2492                                  ;
  2493                                  ;       Restore and return.
  2494                                  ;
  2495                                                          pop     ds                                              ;restore modified regs
  2496                                                          pop     edx                                             ;
  2497                                                          pop     eax                                             ;
  2498                                                          iretd                                                   ;return
  2499                                  ;-----------------------------------------------------------------------------------------------------------------------
  2500                                  ;
  2501                                  ;       IRQ1    Keyboard Interrupt
  2502                                  ;
  2503                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2504                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2505                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2506                                  ;       ALL modified registers upon return.
  2507                                  ;
  2508                                  ;-----------------------------------------------------------------------------------------------------------------------
  2509                                                          menter  keyboard                                        ;keyboard interrrupt
  2510                                                          push    eax                                             ;save non-volatile regs
  2511                                                          push    ebx                                             ;
  2512                                                          push    ecx                                             ;
  2513                                                          push    esi                                             ;
  2514                                                          push    ds                                              ;
  2515                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2516                                                          pop     ds                                              ;... into data segment register
  2517                                                          xor     al,al                                           ;zero
  2518                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2519                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2520                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2521                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2522                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2523                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2524                                                          mov     al,' '                                          ;space
  2525                                                          mov     [wbConsoleChar],al                              ;set character to space
  2526                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2527                                                          not     al                                              ;controller timeout mask
  2528                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2529                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2530                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2531                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2532                                                          jz      irq1.140                                        ;yes, skip ahead
  2533                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2534                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2535                                                          mov     ah,al                                           ;copy scan code 0
  2536                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2537                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2538                                                          je      irq1.30                                         ;yes, set flag
  2539                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2540                                                          je      irq1.40                                         ;yes, reset flag
  2541                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2542                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2543                                                          je      irq1.30                                         ;yes, set flag
  2544                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2545                                                          je      irq1.40                                         ;yes, reset flag
  2546                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2547                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2548                                                          je      irq1.30                                         ;yes, set flag
  2549                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2550                                                          je      irq1.40                                         ;yes, reset flag
  2551                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2552                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2553                                                          je      irq1.30                                         ;yes, set flag
  2554                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2555                                                          je      irq1.40                                         ;yes, reset flag
  2556                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2557                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2558                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2559                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2560                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2561                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2562                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2563                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2564                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2565                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2566                                                          jne     irq1.70                                         ;no, skip ahead
  2567                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2568                                                          jz      irq1.140                                        ;yes, skip ahead
  2569                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2570                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2571                                                          mov     ah,al                                           ;copy scan code 1
  2572                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2573                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2574                                                          je      irq1.30                                         ;yes, set flag
  2575                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2576                                                          je      irq1.40                                         ;yes, reset flag
  2577                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2578                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2579                                                          je      irq1.30                                         ;yes, set flag
  2580                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2581                                                          je      irq1.40                                         ;yes, reset flag
  2582                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2583                                                          je      irq1.80                                         ;yes, skip ahead
  2584                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2585                                                          je      irq1.80                                         ;yes, skip ahead
  2586                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2587                                                          je      irq1.10                                         ;yes, continue
  2588                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2589                                                          jne     irq1.20                                         ;no, skip ahead
  2590                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2591                                                          jz      irq1.140                                        ;yes, skip ahead
  2592                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2593                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2594                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2595                                                          jz      irq1.140                                        ;yes, skip ahead
  2596                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2597                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2598                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2599                                  irq1.30                 or      bl,al                                           ;set shift flag
  2600                                                          jmp     irq1.60                                         ;skip ahead
  2601                                  irq1.40                 not     al                                              ;convert flag to mask
  2602                                                          and     bl,al                                           ;reset shift flag
  2603                                                          jmp     irq1.60                                         ;skip ahead
  2604                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2605                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2606                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2607                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2608                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2609                                                          jmp     irq1.150                                        ;finish keyboard handling
  2610                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2611                                                          jne     irq1.80                                         ;no continue
  2612                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2613                                                          jz      irq1.140                                        ;yes, skip ahead
  2614                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2615                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2616                                                          mov     ah,al                                           ;copy scan code 1
  2617                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2618                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2619                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2620                                                          jz      irq1.140                                        ;yes, skip ahead
  2621                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2622                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2623                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2624                                                          jz      irq1.140                                        ;yes, skip ahead
  2625                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2626                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2627                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2628                                                          jz      irq1.140                                        ;yes, skip ahead
  2629                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2630                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2631                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2632                                                          jz      irq1.140                                        ;yes, skip ahead
  2633                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2634                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2635                                                          jmp     irq1.150                                        ;continue
  2636                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2637                                                          test    ah,EKEYBUP                                      ;release code?
  2638                                                          jnz     irq1.130                                        ;yes, skip ahead
  2639                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2640                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2641                                                          jz      irq1.90                                         ;no, skip ahead
  2642                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2643                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2644                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2645                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2646                                                          jz      irq1.100                                        ;no skip ahead
  2647                                                          mov     cl,al                                           ;copy ASCII code
  2648                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2649                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2650                                                          jb      irq1.100                                        ;yes, skip ahead
  2651                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2652                                                          ja      irq1.100                                        ;yes, skip ahead
  2653                                                          xor     al,EASCIICASE                                   ;switch case
  2654                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2655                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2656                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2657                                                          jz      irq1.120                                        ;no, skip ahead
  2658                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2659                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2660                                                          or      edx,eax                                         ;msg id and codes
  2661                                                          xor     ecx,ecx                                         ;null param
  2662                                                          push    eax                                             ;save codes
  2663                                                          call    PutMessage                                      ;put message to console
  2664                                                          pop     eax                                             ;restore codes
  2665                                                          test    al,al                                           ;ASCII translation?
  2666                                                          jz      irq1.130                                        ;no, skip ahead
  2667                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2668                                                          and     eax,0FFFFh                                      ;clear high-order word
  2669                                                          or      edx,eax                                         ;msg id and codes
  2670                                                          xor     ecx,ecx                                         ;null param
  2671                                                          call    PutMessage                                      ;put message to console
  2672                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2673                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2674                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2675                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2676                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2677                                                          pop     ds                                              ;restore non-volatile regs
  2678                                                          pop     esi                                             ;
  2679                                                          pop     ecx                                             ;
  2680                                                          pop     ebx                                             ;
  2681                                                          pop     eax                                             ;
  2682                                                          iretd                                                   ;return
  2683                                  ;-----------------------------------------------------------------------------------------------------------------------
  2684                                  ;       Scan-Code to ASCII Translation Tables
  2685                                  ;-----------------------------------------------------------------------------------------------------------------------
  2686                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2687                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2688                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2689                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2690                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2691                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2692                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2693                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2694                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2695                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2696                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2697                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2698                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2699                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2700                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2701                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2702                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2703                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2704                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2705                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2706                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2707                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2708                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2709                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2710                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2711                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2712                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2713                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2714                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2715                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2716                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2717                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2721                                  ;
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                                          menter  iochannel                                       ;secondary 8259A cascade
  2724                                                          push    eax                                             ;save modified regs
  2725                                                          jmp     hwint                                           ;end interrupt and return
  2726                                  ;-----------------------------------------------------------------------------------------------------------------------
  2727                                  ;
  2728                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2729                                  ;
  2730                                  ;-----------------------------------------------------------------------------------------------------------------------
  2731                                                          menter  com2                                            ;serial port 2 interrupt
  2732                                                          push    eax                                             ;save modified regs
  2733                                                          jmp     hwint                                           ;end interrupt and return
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                  ;
  2736                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2737                                  ;
  2738                                  ;-----------------------------------------------------------------------------------------------------------------------
  2739                                                          menter  com1                                            ;serial port 1 interrupt
  2740                                                          push    eax                                             ;save modified regs
  2741                                                          jmp     hwint                                           ;end interrupt and return
  2742                                  ;-----------------------------------------------------------------------------------------------------------------------
  2743                                  ;
  2744                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2745                                  ;
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2748                                                          push    eax                                             ;save modified regs
  2749                                                          jmp     hwint                                           ;end interrupt and return
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                  ;
  2752                                  ;       IRQ6    Diskette Hardware Interrupt
  2753                                  ;
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                                          menter  diskette                                        ;floppy disk interrupt
  2756                                                          push    eax                                             ;save non-volatile regs
  2757                                                          push    ds                                              ;
  2758                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2759                                                          pop     ds                                              ;... into DS register
  2760                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2761                                                          or      al,10000000b                                    ;set IRQ flag
  2762                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2763                                                          pop     ds                                              ;restore non-volatile regs
  2764                                                          jmp     hwint                                           ;end primary PIC interrupt
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                  ;
  2767                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2768                                  ;
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2771                                                          push    eax                                             ;save modified regs
  2772                                                          jmp     hwint                                           ;end interrupt and return
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                  ;
  2775                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2776                                  ;
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                                          menter  rtclock                                         ;real-time clock interrupt
  2779                                                          push    eax                                             ;save modified regs
  2780                                                          jmp     hwwint                                          ;end interrupt and return
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                  ;
  2783                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2784                                  ;
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2787                                                          push    eax                                             ;save modified regs
  2788                                                          jmp     hwwint                                          ;end interrupt and return
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790                                  ;
  2791                                  ;       IRQ10   Reserved Hardware Interrupt
  2792                                  ;
  2793                                  ;-----------------------------------------------------------------------------------------------------------------------
  2794                                                          menter  irq10                                           ;reserved
  2795                                                          push    eax                                             ;save modified regs
  2796                                                          jmp     hwwint                                          ;end interrupt and return
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                  ;
  2799                                  ;       IRQ11   Reserved Hardware Interrupt
  2800                                  ;
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                                          menter  irq11                                           ;reserved
  2803                                                          push    eax                                             ;save modified regs
  2804                                                          jmp     hwwint                                          ;end interrupt and return
  2805                                  ;-----------------------------------------------------------------------------------------------------------------------
  2806                                  ;
  2807                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2808                                  ;
  2809                                  ;-----------------------------------------------------------------------------------------------------------------------
  2810                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2811                                                          push    eax                                             ;save modified regs
  2812                                                          jmp     hwwint                                          ;end interrupt and return
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ;
  2815                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2816                                  ;
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                                          menter  coprocessor                                     ;coprocessor interrupt
  2819                                                          push    eax                                             ;save modified regs
  2820                                                          jmp     hwwint                                          ;end interrupt and return
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  ;
  2823                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2824                                  ;
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2827                                                          push    eax                                             ;save modified regs
  2828                                                          jmp     hwwint                                          ;end interrupt and return
  2829                                  ;-----------------------------------------------------------------------------------------------------------------------
  2830                                  ;
  2831                                  ;       IRQ15   Reserved Hardware Interrupt
  2832                                  ;
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                                          menter  irq15                                           ;reserved
  2835                                                          push    eax                                             ;save modified regs
  2836                                                          jmp     hwwint                                          ;end interrupt and return
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                  ;
  2839                                  ;       Exit from hardware interrupt
  2840                                  ;
  2841                                  ;-----------------------------------------------------------------------------------------------------------------------
  2842                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2843                                                          jmp     hwint90                                         ;skip ahead
  2844                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2845                                  hwint90                 pop     eax                                             ;restore modified regs
  2846                                                          iretd                                                   ;return from interrupt
  2847                                  ;-----------------------------------------------------------------------------------------------------------------------
  2848                                  ;
  2849                                  ;       INT 30h Operating System Software Service Interrupt
  2850                                  ;
  2851                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2852                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2853                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2854                                  ;       the entry address of the specific function from a table.
  2855                                  ;
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                                          menter  svc
  2858                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2859                                                          jae     svc90                                           ;yes, skip ahead
  2860                                                          movzx   eax,al                                          ;function
  2861                                                          shl     eax,2                                           ;offset into table
  2862                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2863                                  svc90                   iretd                                                   ;return from interrupt
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  ;
  2866                                  ;       Service Request Table
  2867                                  ;
  2868                                  ;
  2869                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2870                                  ;
  2871                                  ;-----------------------------------------------------------------------------------------------------------------------
  2872                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2873                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2874                                                          tsvce   CompareMemory                                   ;compare memory
  2875                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2876                                                          tsvce   FreeMemory                                      ;free memory block
  2877                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2878                                                          tsvce   GetConsoleString                                ;get string input
  2879                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2880                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2881                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2882                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2883                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2884                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2885                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2886                                                          tsvce   PutDayString                                    ;put DD string
  2887                                                          tsvce   PutHourString                                   ;put hh string
  2888                                                          tsvce   PutMinuteString                                 ;put mm string
  2889                                                          tsvce   PutMonthString                                  ;put MM string
  2890                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2891                                                          tsvce   PutSecondString                                 ;put ss string
  2892                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2893                                                          tsvce   PutWeekdayString                                ;put weekday string
  2894                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2895                                                          tsvce   PutYearString                                   ;put YYYY string
  2896                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2897                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2898                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2899                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2900                                                          tsvce   UpperCaseString                                 ;upper-case string
  2901                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;       Service Request Macros
  2905                                  ;
  2906                                  ;       These macros provide positional parameterization of service request calls.
  2907                                  ;
  2908                                  ;-----------------------------------------------------------------------------------------------------------------------
  2909                                  %macro                  allocateMemory 1
  2910                                                          mov     ecx,%1                                          ;bytes to allocate
  2911                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2912                                                          int     _svc                                            ;invoke OS service
  2913                                  %endmacro
  2914                                  %macro                  clearConsoleScreen 0
  2915                                                          mov     al,eClearConsoleScreen                          ;function code
  2916                                                          int     _svc                                            ;invoke OS service
  2917                                  %endmacro
  2918                                  %macro                  compareMemory 0
  2919                                                          mov     al,eCompareMemory                               ;function code
  2920                                                          int     _svc                                            ;invoke OS service
  2921                                  %endmacro
  2922                                  %macro                  decimalToUnsigned 0
  2923                                                          mov     al,eDecimalToUnsigned                           ;function code
  2924                                                          int     _svc                                            ;invoke OS servie
  2925                                  %endmacro
  2926                                  %macro                  freeMemory 1
  2927                                                          mov     edx,%1                                          ;address of memory block
  2928                                                          mov     al,eFreeMemory                                  ;function code
  2929                                                          int     _svc                                            ;invoke OS service
  2930                                  %endmacro
  2931                                  %macro                  getBaseMemSize 0
  2932                                                          mov     al,eGetBaseMemSize                              ;function code
  2933                                                          int     _svc                                            ;invoke OS service
  2934                                  %endmacro
  2935                                  %macro                  getConsoleString 4
  2936                                                          mov     edx,%1                                          ;buffer address
  2937                                                          mov     ecx,%2                                          ;max characters
  2938                                                          mov     bh,%3                                           ;echo indicator
  2939                                                          mov     bl,%4                                           ;terminator
  2940                                                          mov     al,eGetConsoleString                            ;function code
  2941                                                          int     _svc                                            ;invoke OS service
  2942                                  %endmacro
  2943                                  %macro                  getExtendedMemSize 0
  2944                                                          mov     al,eGetExtendedMemSize                          ;function code
  2945                                                          int     _svc                                            ;invoke OS service
  2946                                  %endmacro
  2947                                  %macro                  getROMMemSize 0
  2948                                                          mov     al,eGetROMMemSize                               ;function code
  2949                                                          int     _svc                                            ;invoke OS service
  2950                                  %endmacro
  2951                                  %macro                  hexadecimalToUnsigned 0
  2952                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2953                                                          int     _svc                                            ;invoke OS service
  2954                                  %endmacro
  2955                                  %macro                  isLeapYear 1
  2956                                                          mov     ebx,%1                                          ;DATETIME addr
  2957                                                          mov     al,eIsLeapYear                                  ;function code
  2958                                                          int     _svc                                            ;invoke OS service
  2959                                  %endmacro
  2960                                  %macro                  placeCursor 0
  2961                                                          mov     al,ePlaceCursor                                 ;function code
  2962                                                          int     _svc                                            ;invoke OS service
  2963                                  %endmacro
  2964                                  %macro                  putConsoleString 1
  2965                                                          mov     edx,%1                                          ;string address
  2966                                                          mov     al,ePutConsoleString                            ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  putDateString 0
  2970                                                          mov     al,ePutDateString                               ;function code
  2971                                                          int     _svc                                            ;invoke OS service
  2972                                  %endmacro
  2973                                  %macro                  putDateString 2
  2974                                                          mov     ebx,%1                                          ;DATETIME addr
  2975                                                          mov     edx,%2                                          ;output buffer addr
  2976                                                          mov     al,ePutDateString                               ;function code
  2977                                                          int     _svc                                            ;invoke OS service
  2978                                  %endmacro
  2979                                  %macro                  putDayString 2
  2980                                                          mov     ebx,%1                                          ;DATETIME addr
  2981                                                          mov     edx,%2                                          ;output buffer addr
  2982                                                          mov     al,ePutDayString                                ;function code
  2983                                                          int     _svc                                            ;invoke OS service
  2984                                  %endmacro
  2985                                  %macro                  putHourString 2
  2986                                                          mov     ebx,%1                                          ;DATETIME addr
  2987                                                          mov     edx,%2                                          ;output buffer addr
  2988                                                          mov     al,ePutHourString                               ;function code
  2989                                                          int     _svc                                            ;invoke OS service
  2990                                  %endmacro
  2991                                  %macro                  putMinuteString 2
  2992                                                          mov     ebx,%1                                          ;DATETIME addr
  2993                                                          mov     edx,%2                                          ;output buffer addr
  2994                                                          mov     al,ePutMinuteString                             ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  putMonthString 2
  2998                                                          mov     ebx,%1                                          ;DATETIME addr
  2999                                                          mov     edx,%2                                          ;output buffer addr
  3000                                                          mov     al,ePutMonthString                              ;function code
  3001                                                          int     _svc                                            ;invoke OS service
  3002                                  %endmacro
  3003                                  %macro                  putMonthNameString 2
  3004                                                          mov     ebx,%1                                          ;DATETIME addr
  3005                                                          mov     edx,%2                                          ;output buffer addr
  3006                                                          mov     al,ePutMonthNameString                          ;function code
  3007                                                          int     _svc                                            ;invoke OS service
  3008                                  %endmacro
  3009                                  %macro                  putSecondString 2
  3010                                                          mov     ebx,%1                                          ;DATETIME addr
  3011                                                          mov     edx,%2                                          ;output buffer addr
  3012                                                          mov     al,ePutSecondString                             ;function code
  3013                                                          int     _svc                                            ;invoke OS service
  3014                                  %endmacro
  3015                                  %macro                  putTimeString 0
  3016                                                          mov     al,ePutTimeString                               ;function code
  3017                                                          int     _svc                                            ;invoke OS service
  3018                                  %endmacro
  3019                                  %macro                  putTimeString 2
  3020                                                          mov     ebx,%1                                          ;DATETIME addr
  3021                                                          mov     edx,%2                                          ;output buffer addr
  3022                                                          mov     al,ePutTimeString                               ;function code
  3023                                                          int     _svc                                            ;invoke OS service
  3024                                  %endmacro
  3025                                  %macro                  putWeekdayString 2
  3026                                                          mov     ebx,%1                                          ;DATETIME addr
  3027                                                          mov     edx,%2                                          ;output buffer addr
  3028                                                          mov     al,ePutWeekdayString                            ;function code
  3029                                                          int     _svc                                            ;invoke OS service
  3030                                  %endmacro
  3031                                  %macro                  putWeekdayNameString 2
  3032                                                          mov     ebx,%1                                          ;DATETIME addr
  3033                                                          mov     edx,%2                                          ;output buffer addr
  3034                                                          mov     al,ePutWeekdayNameString                        ;function code
  3035                                                          int     _svc                                            ;invoke OS service
  3036                                  %endmacro
  3037                                  %macro                  putYearString 2
  3038                                                          mov     ebx,%1                                          ;DATETIME addr
  3039                                                          mov     edx,%2                                          ;output buffer addr
  3040                                                          mov     al,ePutYearString                               ;function code
  3041                                                          int     _svc                                            ;invoke OS service
  3042                                  %endmacro
  3043                                  %macro                  readRealTimeClock 0
  3044                                                          mov     al,eReadRealTimeClock                           ;function code
  3045                                                          int     _svc                                            ;invoke OS service
  3046                                  %endmacro
  3047                                  %macro                  readRealTimeClock 1
  3048                                                          mov     ebx,%1                                          ;DATETIME addr
  3049                                                          mov     al,eReadRealTimeClock                           ;function code
  3050                                                          int     _svc                                            ;invoke OS service
  3051                                  %endmacro
  3052                                  %macro                  resetSystem 0
  3053                                                          mov     al,eResetSystem                                 ;function code
  3054                                                          int     _svc                                            ;invoke OS service
  3055                                  %endmacro
  3056                                  %macro                  unsignedToDecimalString 0
  3057                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3058                                                          int     _svc                                            ;invoke OS service
  3059                                  %endmacro
  3060                                  %macro                  unsignedToHexadecimal 0
  3061                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3062                                                          int     _svc                                            ;invoke OS service
  3063                                  %endmacro
  3064                                  %macro                  upperCaseString 0
  3065                                                          mov     al,eUpperCaseString                             ;function code
  3066                                                          int     _svc                                            ;invoke OS service
  3067                                  %endmacro
  3068                                  ;=======================================================================================================================
  3069                                  ;
  3070                                  ;       Kernel Function Library
  3071                                  ;
  3072                                  ;=======================================================================================================================
  3073                                  ;=======================================================================================================================
  3074                                  ;
  3075                                  ;       Date and Time Helper Routines
  3076                                  ;
  3077                                  ;       GetYear
  3078                                  ;       IsLeapYear
  3079                                  ;       PutDateString
  3080                                  ;       PutDayString
  3081                                  ;       PutHourString
  3082                                  ;       PutMinuteString
  3083                                  ;       PutMonthString
  3084                                  ;       PutMonthNameString
  3085                                  ;       PutSecondString
  3086                                  ;       PutTimeString
  3087                                  ;       PutWeekdayString
  3088                                  ;       PutWeekdayNameString
  3089                                  ;       PutYearString
  3090                                  ;
  3091                                  ;=======================================================================================================================
  3092                                  ;-----------------------------------------------------------------------------------------------------------------------
  3093                                  ;
  3094                                  ;       Routine:        GetYear
  3095                                  ;
  3096                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3097                                  ;
  3098                                  ;       In:             DS:EBX  DATETIME address
  3099                                  ;
  3100                                  ;       Out:            ECX     year
  3101                                  ;
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3104                                                          imul    ecx,100                                         ;century * 100
  3105                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3106                                                          add     ecx,eax                                         ;year (YYYY)
  3107                                                          ret                                                     ;return
  3108                                  ;-----------------------------------------------------------------------------------------------------------------------
  3109                                  ;
  3110                                  ;       Routine:        IsLeapYear
  3111                                  ;
  3112                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3113                                  ;
  3114                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3115                                  ;
  3116                                  ;       Out:            ECX     0 = not a leap year
  3117                                  ;                               1 = leap year
  3118                                  ;
  3119                                  ;-----------------------------------------------------------------------------------------------------------------------
  3120                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3121                                                          mov     eax,ecx                                         ;EAX = YYYY
  3122                                                          xor     ecx,ecx                                         ;assume not leap year
  3123                                                          test    al,00000011b                                    ;multiple of four?
  3124                                                          jnz     .no                                             ;no, branch
  3125                                                          mov     dl,100                                          ;divisor
  3126                                                          div     dl                                              ;divide by 100
  3127                                                          test    ah,ah                                           ;multiple of 100?
  3128                                                          jnz     .yes                                            ;yes, branch
  3129                                                          test    al,00000011b                                    ;multiple of 400?
  3130                                                          jnz     .no                                             ;no, branch
  3131                                  .yes                    inc     ecx                                             ;indicate leap
  3132                                  .no                     ret                                                     ;return
  3133                                  ;-----------------------------------------------------------------------------------------------------------------------
  3134                                  ;
  3135                                  ;       Routine:        PutDateString
  3136                                  ;
  3137                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3138                                  ;                       structure at ds:ebx.
  3139                                  ;
  3140                                  ;       In:             DS:EBX  DATETIME address
  3141                                  ;                       DS:EDX  output buffer address
  3142                                  ;
  3143                                  ;-----------------------------------------------------------------------------------------------------------------------
  3144                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3145                                                          push    edi                                             ;
  3146                                                          push    es                                              ;
  3147                                                          push    ds                                              ;store data selector ...
  3148                                                          pop     es                                              ;... in extra segment reg
  3149                                                          mov     edi,edx                                         ;output buffer address
  3150                                                          mov     cl,10                                           ;divisor
  3151                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3152                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3153                                                          div     cl                                              ;AH = rem; AL = quotient
  3154                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3155                                                          cld                                                     ;forward strings
  3156                                                          stosd                                                   ;store "mm/"nul
  3157                                                          dec     edi                                             ;address of terminator
  3158                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3159                                                          div     cl                                              ;AH = rem; AL = quotient
  3160                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3161                                                          stosd                                                   ;store "dd/"nul
  3162                                                          dec     edi                                             ;address of terminator
  3163                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3164                                                          div     cl                                              ;AH = rem; AL = quotient
  3165                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3166                                                          stosd                                                   ;store "cc/"null
  3167                                                          dec     edi                                             ;address of terminator
  3168                                                          dec     edi                                             ;address of delimiter
  3169                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3170                                                          div     cl                                              ;AH = rem; AL = quotient
  3171                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3172                                                          stosb                                                   ;store quotient
  3173                                                          mov     al,ah                                           ;remainder
  3174                                                          stosb                                                   ;store remainder
  3175                                                          xor     al,al                                           ;null terminator
  3176                                                          stosb                                                   ;store terminator
  3177                                                          pop     es                                              ;restore non-volatile regs
  3178                                                          pop     edi                                             ;
  3179                                                          pop     ecx                                             ;
  3180                                                          ret                                                     ;return
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;       Routine:        PutDayString
  3184                                  ;
  3185                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3186                                  ;                       structure at ds:ebx.
  3187                                  ;
  3188                                  ;       In:             DS:EBX  DATETIME address
  3189                                  ;                       DS:EDX  output buffer address
  3190                                  ;
  3191                                  ;-----------------------------------------------------------------------------------------------------------------------
  3192                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3193                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3194                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3195                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3196                                                          pop     ecx                                             ;
  3197                                                          ret                                                     ;return
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199                                  ;
  3200                                  ;       Routine:        PutHourString
  3201                                  ;
  3202                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3203                                  ;                       structure at ds:ebx.
  3204                                  ;
  3205                                  ;       In:             DS:EBX  DATETIME address
  3206                                  ;                       DS:EDX  output buffer address
  3207                                  ;
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3210                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3211                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3212                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3213                                                          pop     ecx                                             ;
  3214                                                          ret                                                     ;return
  3215                                  ;-----------------------------------------------------------------------------------------------------------------------
  3216                                  ;
  3217                                  ;       Routine:        PutMinuteString
  3218                                  ;
  3219                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3220                                  ;                       structure at ds:ebx.
  3221                                  ;
  3222                                  ;       In:             DS:EBX  DATETIME address
  3223                                  ;                       DS:EDX  output buffer address
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3227                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3228                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3229                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3230                                                          pop     ecx                                             ;
  3231                                                          ret                                                     ;return
  3232                                  ;-----------------------------------------------------------------------------------------------------------------------
  3233                                  ;
  3234                                  ;       Routine:        PutMonthString
  3235                                  ;
  3236                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3237                                  ;                       structure at ds:ebx.
  3238                                  ;
  3239                                  ;       In:             DS:EBX  DATETIME address
  3240                                  ;                       DS:EDX  output buffer address
  3241                                  ;
  3242                                  ;-----------------------------------------------------------------------------------------------------------------------
  3243                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3244                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3245                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3246                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3247                                                          pop     ecx                                             ;
  3248                                                          ret                                                     ;return
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                  ;
  3251                                  ;       Routine:        PutMonthNameString
  3252                                  ;
  3253                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3254                                  ;                       structure at ds:ebx.
  3255                                  ;
  3256                                  ;       In:             DS:EBX  DATETIME address
  3257                                  ;                       DS:EDX  output buffer address
  3258                                  ;
  3259                                  ;-----------------------------------------------------------------------------------------------------------------------
  3260                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3261                                                          push    edi                                             ;
  3262                                                          push    ds                                              ;
  3263                                                          push    es                                              ;
  3264                                                          push    ds                                              ;load data selector ...
  3265                                                          pop     es                                              ;... into extra segment
  3266                                                          mov     edi,edx                                         ;output buffer address
  3267                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3268                                                          dec     eax                                             ;month (0-11)
  3269                                                          shl     eax,2                                           ;offset into month name lookup table
  3270                                                          push    cs                                              ;load code selector ...
  3271                                                          pop     ds                                              ;... into data segment
  3272                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3273                                                          cld                                                     ;forward strings
  3274                                  .10                     lodsb                                                   ;name character
  3275                                                          stosb                                                   ;store in output buffer
  3276                                                          test    al,al                                           ;end of string?
  3277                                                          jnz     .10                                             ;no, continue
  3278                                                          pop     es                                              ;restore non-volatile regs
  3279                                                          pop     ds                                              ;
  3280                                                          pop     edi                                             ;
  3281                                                          pop     esi                                             ;
  3282                                                          ret                                                     ;return
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;       Routine:        PutSecondString
  3286                                  ;
  3287                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3288                                  ;                       structure at ds:ebx.
  3289                                  ;
  3290                                  ;       In:             DS:EBX  DATETIME address
  3291                                  ;                       DS:EDX  output buffer address
  3292                                  ;
  3293                                  ;-----------------------------------------------------------------------------------------------------------------------
  3294                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3295                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3296                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3297                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3298                                                          pop     ecx                                             ;
  3299                                                          ret                                                     ;return
  3300                                  ;-----------------------------------------------------------------------------------------------------------------------
  3301                                  ;
  3302                                  ;       Routine:        PutTimeString
  3303                                  ;
  3304                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3305                                  ;                       structure at ds:ebx.
  3306                                  ;
  3307                                  ;       In:             DS:EBX  DATETIME address
  3308                                  ;                       DS:EDX  output buffer address
  3309                                  ;
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3312                                                          push    edi                                             ;
  3313                                                          push    es                                              ;
  3314                                                          push    ds                                              ;store data selector ...
  3315                                                          pop     es                                              ;... in extra segment reg
  3316                                                          mov     edi,edx                                         ;output buffer address
  3317                                                          mov     cl,10                                           ;divisor
  3318                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3319                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3320                                                          div     cl                                              ;ah = rem; al = quotient
  3321                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3322                                                          cld                                                     ;forward strings
  3323                                                          stosd                                                   ;store "mm/"nul
  3324                                                          dec     edi                                             ;address of terminator
  3325                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3326                                                          div     cl                                              ;ah = rem; al = quotient
  3327                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3328                                                          stosd                                                   ;store "dd/"nul
  3329                                                          dec     edi                                             ;address of terminator
  3330                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3331                                                          div     cl                                              ;ah = rem; al = quotient
  3332                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3333                                                          stosb                                                   ;store quotient
  3334                                                          mov     al,ah                                           ;remainder
  3335                                                          stosb                                                   ;store remainder
  3336                                                          xor     al,al                                           ;null terminator
  3337                                                          stosb                                                   ;store terminator
  3338                                                          pop     es                                              ;restore non-volatile regs
  3339                                                          pop     edi                                             ;
  3340                                                          pop     ecx                                             ;
  3341                                                          ret                                                     ;return
  3342                                  ;-----------------------------------------------------------------------------------------------------------------------
  3343                                  ;
  3344                                  ;       Routine:        PutWeekdayString
  3345                                  ;
  3346                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3347                                  ;                       structure at ds:ebx.
  3348                                  ;
  3349                                  ;       In:             DS:EBX  DATETIME address
  3350                                  ;                       DS:EDX  output buffer address
  3351                                  ;
  3352                                  ;-----------------------------------------------------------------------------------------------------------------------
  3353                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3354                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3355                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3356                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3357                                                          pop     ecx                                             ;
  3358                                                          ret                                                     ;return
  3359                                  ;-----------------------------------------------------------------------------------------------------------------------
  3360                                  ;
  3361                                  ;       Routine:        PutWeekdayNameString
  3362                                  ;
  3363                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3364                                  ;                       structure at ds:ebx.
  3365                                  ;
  3366                                  ;       In:             DS:EBX  DATETIME address
  3367                                  ;                       DS:EDX  output buffer address
  3368                                  ;
  3369                                  ;-----------------------------------------------------------------------------------------------------------------------
  3370                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3371                                                          push    edi                                             ;
  3372                                                          push    ds                                              ;
  3373                                                          push    es                                              ;
  3374                                                          push    ds                                              ;load data selector ...
  3375                                                          pop     es                                              ;... into extra segment
  3376                                                          mov     edi,edx                                         ;output buffer address
  3377                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3378                                                          shl     eax,2                                           ;offset into day name lookup table
  3379                                                          push    cs                                              ;load code selector ...
  3380                                                          pop     ds                                              ;... into data segment
  3381                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3382                                                          cld                                                     ;forward strings
  3383                                  .10                     lodsb                                                   ;name character
  3384                                                          stosb                                                   ;store in output buffer
  3385                                                          test    al,al                                           ;end of string?
  3386                                                          jnz     .10                                             ;no, continue
  3387                                                          pop     es                                              ;restore non-volatile regs
  3388                                                          pop     ds                                              ;
  3389                                                          pop     edi                                             ;
  3390                                                          pop     esi                                             ;
  3391                                                          ret                                                     ;return
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                  ;
  3394                                  ;       Routine:        PutYearString
  3395                                  ;
  3396                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3397                                  ;                       structure at ds:ebx.
  3398                                  ;
  3399                                  ;       In:             DS:EBX  DATETIME address
  3400                                  ;                       DS:EDX  output buffer address
  3401                                  ;
  3402                                  ;-----------------------------------------------------------------------------------------------------------------------
  3403                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3404                                                          call    GetYear                                         ;ECX = YYYY
  3405                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3406                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3407                                                          pop     ecx                                             ;restore non-volatile regs
  3408                                                          ret                                                     ;return
  3409                                  ;-----------------------------------------------------------------------------------------------------------------------
  3410                                  ;
  3411                                  ;       Day Names
  3412                                  ;
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414                                  czSunday                db      "Sunday",0
  3415                                  czMonday                db      "Monday",0
  3416                                  czTuesday               db      "Tuesday",0
  3417                                  czWednesday             db      "Wednesday",0
  3418                                  czThursday              db      "Thursday",0
  3419                                  czFriday                db      "Friday",0
  3420                                  czSaturday              db      "Saturday",0
  3421                                  ;-----------------------------------------------------------------------------------------------------------------------
  3422                                  ;
  3423                                  ;       Month Names
  3424                                  ;
  3425                                  ;-----------------------------------------------------------------------------------------------------------------------
  3426                                  czJanuary               db      "January",0
  3427                                  czFebruary              db      "February",0
  3428                                  czMarch                 db      "March",0
  3429                                  czApril                 db      "April",0
  3430                                  czMay                   db      "May",0
  3431                                  czJune                  db      "June",0
  3432                                  czJuly                  db      "July",0
  3433                                  czAugust                db      "August",0
  3434                                  czSeptember             db      "September",0
  3435                                  czOctober               db      "October",0
  3436                                  czNovember              db      "November",0
  3437                                  czDecember              db      "December",0
  3438                                  ;-----------------------------------------------------------------------------------------------------------------------
  3439                                  ;
  3440                                  ;       Day Names Lookup Table
  3441                                  ;
  3442                                  ;-----------------------------------------------------------------------------------------------------------------------
  3443                                                          align   4
  3444                                  tDayNames               equ     $
  3445                                                          dd      czSunday
  3446                                                          dd      czMonday
  3447                                                          dd      czTuesday
  3448                                                          dd      czWednesday
  3449                                                          dd      czThursday
  3450                                                          dd      czFriday
  3451                                                          dd      czSaturday
  3452                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3453                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3454                                  ;-----------------------------------------------------------------------------------------------------------------------
  3455                                  ;
  3456                                  ;       Month Names Lookup Table
  3457                                  ;
  3458                                  ;-----------------------------------------------------------------------------------------------------------------------
  3459                                                          align   4
  3460                                  tMonthNames             equ     $
  3461                                                          dd      czJanuary
  3462                                                          dd      czFebruary
  3463                                                          dd      czMarch
  3464                                                          dd      czApril
  3465                                                          dd      czMay
  3466                                                          dd      czJune
  3467                                                          dd      czJuly
  3468                                                          dd      czAugust
  3469                                                          dd      czSeptember
  3470                                                          dd      czOctober
  3471                                                          dd      czNovember
  3472                                                          dd      czDecember
  3473                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3474                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3475                                  ;=======================================================================================================================
  3476                                  ;
  3477                                  ;       Memory Helper Routines
  3478                                  ;
  3479                                  ;       AllocateMemory
  3480                                  ;       FreeMemory
  3481                                  ;
  3482                                  ;=======================================================================================================================
  3483                                  ;-----------------------------------------------------------------------------------------------------------------------
  3484                                  ;
  3485                                  ;       Routine:        AllocateMemory
  3486                                  ;
  3487                                  ;       Description:    This routine allocates a memory block for the given task.
  3488                                  ;
  3489                                  ;       In:             ECX     bytes of memory to allocate
  3490                                  ;
  3491                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3492                                  ;                               0       unable to allocate memory
  3493                                  ;
  3494                                  ;-----------------------------------------------------------------------------------------------------------------------
  3495                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3496                                                          push    ecx                                             ;
  3497                                                          push    esi                                             ;
  3498                                                          push    ds                                              ;
  3499                                  ;
  3500                                  ;       Address kernel memory structures
  3501                                  ;
  3502                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3503                                                          pop     ds                                              ;... into data segment reg
  3504                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3505                                  ;
  3506                                  ;       Set requested size to minimum block size if requested size is too small.
  3507                                  ;
  3508                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3509                                                          jae     .10                                             ;no, branch
  3510                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3511                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3512                                  ;
  3513                                  ;       Find the first free memory block large enough to satisfy the request.
  3514                                  ;
  3515                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3516                                  .20                     test    eax,eax                                         ;end of free block chain?
  3517                                                          jz      .220                                            ;yes, branch
  3518                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3519                                                          jbe     .30                                             ;yes, branch
  3520                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3521                                                          jmp     .20                                             ;continue
  3522                                  ;-----------------------------------------------------------------------------------------------------------------------
  3523                                  ;
  3524                                  ;       Address the previous and next free memory blocks.
  3525                                  ;
  3526                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3527                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3528                                  ;
  3529                                  ;       Remove the free memory block from the forward free memory block chain.
  3530                                  ;
  3531                                                          test    ebx,ebx                                         ;any previous free memory block?
  3532                                                          jz      .40                                             ;no, branch
  3533                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3534                                                          jmp     .50                                             ;continue
  3535                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3536                                  ;
  3537                                  ;       Remove the free memory block from the reverse free memory block chain.
  3538                                  ;
  3539                                  .50                     test    edx,edx                                         ;any next free memory block?
  3540                                                          jz      .60                                             ;no, branch
  3541                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3542                                                          jmp     .70                                             ;continue
  3543                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3544                                  ;-----------------------------------------------------------------------------------------------------------------------
  3545                                  ;
  3546                                  ;       Determine if the free memory block can be split.
  3547                                  ;
  3548                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3549                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3550                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3551                                                          jb      .150                                            ;no, branch
  3552                                  ;
  3553                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3554                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3555                                  ;       of the requested memory size.
  3556                                  ;
  3557                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3558                                                          mov     edx,eax                                         ;memory block address
  3559                                                          add     edx,ecx                                         ;address new new next contig block
  3560                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3561                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3562                                  ;
  3563                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3564                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3565                                  ;
  3566                                                          jecxz   .80                                             ;no next contig, branch
  3567                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3568                                                          jmp     .90                                             ;continue
  3569                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3570                                  ;
  3571                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3572                                  ;
  3573                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3574                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3575                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3576                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3577                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3578                                                          xor     ebx,ebx                                         ;zero register
  3579                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3580                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3581                                  ;
  3582                                  ;       Find the proper location in the free block chain for the new free block
  3583                                  ;
  3584                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3585                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3586                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3587                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3588                                                          jbe     .110                                            ;yes, branch
  3589                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3590                                                          jmp     .100                                            ;continue
  3591                                  ;
  3592                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3593                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3594                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3595                                  ;       block of hte next block, if there is one.
  3596                                  ;
  3597                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3598                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3599                                                          jecxz   .120                                            ;branch if no next block
  3600                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3601                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3602                                                          jmp     .130                                            ;continue
  3603                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3604                                  ;
  3605                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3606                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3607                                  ;       last user block pointers if necessary.
  3608                                  ;
  3609                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3610                                                          test    ebx,ebx                                         ;is there a previous block?
  3611                                                          jz      .140                                            ;no, branch
  3612                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3613                                                          jmp     .150                                            ;continue
  3614                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3615                                  ;
  3616                                  ;       Update the newly allocated block's owner and signature.
  3617                                  ;
  3618                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3619                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3620                                                          xor     edx,edx                                         ;zero register
  3621                                                          str     dx                                              ;load the task state register
  3622                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3623                                  ;
  3624                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3625                                  ;
  3626                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3627                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3628                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3629                                                          jb      .180                                            ;branch if block belongs to next task
  3630                                                          je      .170                                            ;branch if block belongs to this task
  3631                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3632                                                          jmp     .160                                            ;continue
  3633                                  ;
  3634                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3635                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3636                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3637                                  ;       place to insert the block.
  3638                                  ;
  3639                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3640                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3641                                                          jbe     .180                                            ;yes, branch
  3642                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3643                                                          test    ecx,ecx                                         ;end of chain?
  3644                                                          jz      .180                                            ;yes, branch
  3645                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3646                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3647                                                          je      .170                                            ;yes, continue search
  3648                                  ;
  3649                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3650                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3651                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3652                                  ;       do have a previous-block, we update that block's next-block pointer.
  3653                                  ;
  3654                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3655                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3656                                                          jecxz   .190                                            ;branch if no next-task block
  3657                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3658                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3659                                                          jmp     .200                                            ;continue
  3660                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3661                                  ;
  3662                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3663                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3664                                  ;       global first and/or last user-block pointers if necessary.
  3665                                  ;
  3666                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3667                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3668                                                          jz      .210                                            ;no, branch
  3669                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3670                                                          jmp     .220                                            ;continue
  3671                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3672                                  ;
  3673                                  ;       Restore registers and return to caller.
  3674                                  ;
  3675                                  .220                    pop     ds                                              ;restore non-volatie regs
  3676                                                          pop     esi                                             ;
  3677                                                          pop     ecx                                             ;
  3678                                                          pop     ebx                                             ;
  3679                                                          ret                                                     ;return
  3680                                  ;-----------------------------------------------------------------------------------------------------------------------
  3681                                  ;
  3682                                  ;       Routine:        FreeMemory
  3683                                  ;
  3684                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3685                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3686                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3687                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3688                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3689                                  ;
  3690                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3691                                  ;
  3692                                  ;       Out:            EAX     -1      invalid memory block
  3693                                  ;                               0       memory block freed
  3694                                  ;
  3695                                  ;-----------------------------------------------------------------------------------------------------------------------
  3696                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3697                                                          push    ecx                                             ;
  3698                                                          push    esi                                             ;
  3699                                                          push    edi                                             ;
  3700                                                          push    ds                                              ;
  3701                                                          push    es                                              ;
  3702                                  ;
  3703                                  ;       Address the root memory structure
  3704                                  ;
  3705                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3706                                                          pop     es                                              ;... into extra segment reg
  3707                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3708                                                          pop     ds                                              ;... into data segment reg
  3709                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3710                                                          mov     edi,edx                                         ;memory block address
  3711                                  ;
  3712                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3713                                  ;
  3714                                                          xor     eax,eax                                         ;indicate success
  3715                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3716                                                          je      .240                                            ;yes, branch
  3717                                                          dec     eax                                             ;indicate failure
  3718                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3719                                                          jne     .240                                            ;no, branch
  3720                                  ;-----------------------------------------------------------------------------------------------------------------------
  3721                                  ;
  3722                                  ;       Unlink the USER memory block.
  3723                                  ;
  3724                                  ;-----------------------------------------------------------------------------------------------------------------------
  3725                                  ;
  3726                                  ;       Set the block signature. Reset owner.
  3727                                  ;
  3728                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3729                                                          xor     eax,eax                                         ;zero register
  3730                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3731                                  ;
  3732                                  ;       Wipe user area.
  3733                                  ;
  3734                                                          push    edi                                             ;save block address
  3735                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3736                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3737                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3738                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3739                                                          rep     stosb                                           ;clear memory
  3740                                                          pop     edi                                             ;restore block address
  3741                                  ;
  3742                                  ;       Address the preceding and following USER memory blocks
  3743                                  ;
  3744                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3745                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3746                                  ;
  3747                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3748                                  ;       pointer to point to the USER block following this block.
  3749                                  ;
  3750                                                          test    ebx,ebx                                         ;is there a previous block?
  3751                                                          jz      .10                                             ;no, branch
  3752                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3753                                                          jmp     .20                                             ;continue
  3754                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3755                                  ;
  3756                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3757                                  ;       pointer to point to the USER block preceding this block.
  3758                                  ;
  3759                                  .20                     jecxz   .30                                             ;branch if no next block
  3760                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3761                                                          jmp     .40                                             ;continue
  3762                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3763                                  ;-----------------------------------------------------------------------------------------------------------------------
  3764                                  ;
  3765                                  ;       Merge with a previous contiguous FREE memory block.
  3766                                  ;
  3767                                  ;-----------------------------------------------------------------------------------------------------------------------
  3768                                  ;
  3769                                  ;       Address the preceding and following contiguous memory blocks.
  3770                                  ;
  3771                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3772                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3773                                  ;
  3774                                  ;       Verify we have a previous contiguous FREE block.
  3775                                  ;
  3776                                                          test    ebx,ebx                                         ;is there a previous block?
  3777                                                          jz      .100                                            ;no, branch
  3778                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3779                                                          jne     .100                                            ;no, branch
  3780                                  ;
  3781                                  ;       Update adjacent block's contiguous pointers.
  3782                                  ;
  3783                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3784                                                          jecxz   .50                                             ;branch if no next contiguous block
  3785                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3786                                                          jmp     .60                                             ;continue
  3787                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3788                                  ;
  3789                                  ;       Update the size of the merged FREE block.
  3790                                  ;
  3791                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3792                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3793                                  ;
  3794                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3795                                  ;
  3796                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3797                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3798                                                          rep     stosb                                           ;clear memory header
  3799                                                          mov     edi,ebx                                         ;current block is now previous block
  3800                                  ;-----------------------------------------------------------------------------------------------------------------------
  3801                                  ;
  3802                                  ;       Unlink the previous contiguous FREE memory block
  3803                                  ;
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805                                  ;
  3806                                  ;       Address the preceding and following USER memory blocks
  3807                                  ;
  3808                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3809                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3810                                  ;
  3811                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3812                                  ;       block pointer.
  3813                                  ;
  3814                                                          test    ebx,ebx                                         ;is there a previous block?
  3815                                                          jz      .70                                             ;no, branch
  3816                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3817                                                          jmp     .80                                             ;branch
  3818                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3819                                  ;
  3820                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3821                                  ;       pointer.
  3822                                  ;
  3823                                  .80                     jecxz   .90                                             ;branch if no next block
  3824                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3825                                                          jmp     .100                                            ;continue
  3826                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3827                                  ;-----------------------------------------------------------------------------------------------------------------------
  3828                                  ;
  3829                                  ;       Merge with a following contiguous FREE memory block.
  3830                                  ;
  3831                                  ;-----------------------------------------------------------------------------------------------------------------------
  3832                                  ;
  3833                                  ;       Verify we have a following contiguous FREE block.
  3834                                  ;
  3835                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3836                                                          jecxz   .170                                            ;branch if no next contiguous block
  3837                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3838                                                          jne     .170                                            ;no, branch
  3839                                  ;
  3840                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3841                                  ;
  3842                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3843                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3844                                  ;
  3845                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3846                                  ;
  3847                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3848                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3849                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3850                                                          jz      .110                                            ;no, branch
  3851                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3852                                                          jmp     .120                                            ;continue
  3853                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3854                                  ;-----------------------------------------------------------------------------------------------------------------------
  3855                                  ;
  3856                                  ;       Unlink the following contiguous FREE memory block
  3857                                  ;
  3858                                  ;-----------------------------------------------------------------------------------------------------------------------
  3859                                  ;
  3860                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3861                                  ;
  3862                                  .120                    push    edi                                             ;save this block
  3863                                                          mov     edi,ecx                                         ;next contiguous block
  3864                                                          push    ecx                                             ;save next contiguous block
  3865                                  ;
  3866                                  ;       Address the preceding and following USER memory blocks
  3867                                  ;
  3868                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3869                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3870                                  ;
  3871                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3872                                  ;       block pointer.
  3873                                  ;
  3874                                                          test    ebx,ebx                                         ;is there a previous block?
  3875                                                          jz      .130                                            ;no, branch
  3876                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3877                                                          jmp     .140                                            ;branch
  3878                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3879                                  ;
  3880                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3881                                  ;       pointer.
  3882                                  ;
  3883                                  .140                    jecxz   .150                                            ;branch if no next block
  3884                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3885                                                          jmp     .160                                            ;continue
  3886                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3887                                  ;
  3888                                  ;       Clear next contiguous block's header
  3889                                  ;
  3890                                  .160                    pop     edi                                             ;next congiguous block pointer
  3891                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3892                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3893                                                          rep     stosb                                           ;clear memory header
  3894                                                          pop     edi                                             ;this block's pointer
  3895                                  ;-----------------------------------------------------------------------------------------------------------------------
  3896                                  ;
  3897                                  ;       Insert the final FREE block back into the block chain.
  3898                                  ;
  3899                                  ;-----------------------------------------------------------------------------------------------------------------------
  3900                                  ;
  3901                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3902                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3903                                  ;       all are smaller in size.
  3904                                  ;
  3905                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3906                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3907                                  .180                    jecxz   .190                                            ;exit if no ptr
  3908                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3909                                                          jb      .190                                            ;yes, branch
  3910                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3911                                                          jmp     .180                                            ;continue
  3912                                  ;
  3913                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3914                                  ;       larger free block. Update the next block's previous block pointer.
  3915                                  ;
  3916                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3917                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3918                                                          jecxz   .200                                            ;branch if no block found
  3919                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3920                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3921                                                          jmp     .210                                            ;continue
  3922                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3923                                  ;
  3924                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3925                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3926                                  ;       next pointer.
  3927                                  ;
  3928                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3929                                                          test    ebx,ebx                                         ;do we have a previous block?
  3930                                                          jz      .220                                            ;no, branch
  3931                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3932                                                          jmp     .230                                            ;continue
  3933                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3934                                  ;
  3935                                  ;       The memory free has completed.
  3936                                  ;
  3937                                  .230                    xor     eax,eax                                         ;indicate success
  3938                                  ;
  3939                                  ;       Restore and return.
  3940                                  ;
  3941                                  .240                    pop     es                                              ;restore non-volatile regs
  3942                                                          pop     ds                                              ;
  3943                                                          pop     edi                                             ;
  3944                                                          pop     esi                                             ;
  3945                                                          pop     ecx                                             ;
  3946                                                          pop     ebx                                             ;
  3947                                                          ret                                                     ;return
  3948                                  ;=======================================================================================================================
  3949                                  ;
  3950                                  ;       String Helper Routines
  3951                                  ;
  3952                                  ;       CompareMemory
  3953                                  ;       UpperCaseString
  3954                                  ;
  3955                                  ;=======================================================================================================================
  3956                                  ;-----------------------------------------------------------------------------------------------------------------------
  3957                                  ;
  3958                                  ;       Routine:        CompareMemory
  3959                                  ;
  3960                                  ;       Description:    This routine compares two byte arrays.
  3961                                  ;
  3962                                  ;       In:             DS:EDX  first source address
  3963                                  ;                       DS:EBX  second source address
  3964                                  ;                       ECX     comparison length
  3965                                  ;
  3966                                  ;       Out:            EDX     first source address
  3967                                  ;                       EBX     second source address
  3968                                  ;                       ECX     0       array 1 = array 2
  3969                                  ;                               <0      array 1 < array 2
  3970                                  ;                               >0      array 1 > array 2
  3971                                  ;
  3972                                  ;-----------------------------------------------------------------------------------------------------------------------
  3973                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3974                                                          push    edi                                             ;
  3975                                                          push    es                                              ;
  3976                                                          push    ds                                              ;copy DS
  3977                                                          pop     es                                              ;... to ES
  3978                                                          mov     esi,edx                                         ;first source address
  3979                                                          mov     edi,ebx                                         ;second source address
  3980                                                          cld                                                     ;forward strings
  3981                                                          rep     cmpsb                                           ;compare bytes
  3982                                                          mov     al,0                                            ;default result
  3983                                                          jz      .10                                             ;branch if arrays equal
  3984                                                          mov     al,1                                            ;positive result
  3985                                                          jnc     .10                                             ;branch if target > source
  3986                                                          mov     al,-1                                           ;negative result
  3987                                  .10                     movsx   ecx,al                                          ;extend sign
  3988                                                          pop     es                                              ;restore non-volatile regs
  3989                                                          pop     edi                                             ;
  3990                                                          pop     esi                                             ;
  3991                                                          ret                                                     ;return
  3992                                  ;-----------------------------------------------------------------------------------------------------------------------
  3993                                  ;
  3994                                  ;       Routine:        UpperCaseString
  3995                                  ;
  3996                                  ;       Description:    This routine places all characters in the given string to upper case.
  3997                                  ;
  3998                                  ;       In:             DS:EDX  string address
  3999                                  ;
  4000                                  ;       Out:            EDX     string address
  4001                                  ;
  4002                                  ;-----------------------------------------------------------------------------------------------------------------------
  4003                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4004                                                          mov     esi,edx                                         ;string address
  4005                                                          cld                                                     ;forward strings
  4006                                  .10                     lodsb                                                   ;string character
  4007                                                          test    al,al                                           ;null?
  4008                                                          jz      .20                                             ;yes, skip ahead
  4009                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4010                                                          jb      .10                                             ;no, continue
  4011                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4012                                                          ja      .10                                             ;no, continue
  4013                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4014                                                          mov     [esi-1],al                                      ;upper character
  4015                                                          jmp     .10                                             ;continue
  4016                                  .20                     pop     esi                                             ;restore non-volatile regs
  4017                                                          ret                                                     ;return
  4018                                  ;=======================================================================================================================
  4019                                  ;
  4020                                  ;       Console Helper Routines
  4021                                  ;
  4022                                  ;       FirstConsoleColumn
  4023                                  ;       GetConsoleChar
  4024                                  ;       GetConsoleString
  4025                                  ;       NextConsoleColumn
  4026                                  ;       NextConsoleRow
  4027                                  ;       PreviousConsoleColumn
  4028                                  ;       PutConsoleChar
  4029                                  ;       PutConsoleHexByte
  4030                                  ;       PutConsoleHexDword
  4031                                  ;       PutConsoleHexWord
  4032                                  ;       PutConsoleOIAChar
  4033                                  ;       PutConsoleOIAShift
  4034                                  ;       PutConsoleString
  4035                                  ;       Yield
  4036                                  ;
  4037                                  ;=======================================================================================================================
  4038                                  ;-----------------------------------------------------------------------------------------------------------------------
  4039                                  ;
  4040                                  ;       Routine:        FirstConsoleColumn
  4041                                  ;
  4042                                  ;       Description:    This routine resets the console column to start of the row.
  4043                                  ;
  4044                                  ;       In:             DS      OS data selector
  4045                                  ;
  4046                                  ;-----------------------------------------------------------------------------------------------------------------------
  4047                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4048                                                          mov     [wbConsoleColumn],al                            ;save column
  4049                                                          ret                                                     ;return
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  ;
  4052                                  ;       Routine:        GetConsoleChar
  4053                                  ;
  4054                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4055                                  ;
  4056                                  ;       Out:            AL      ASCII character code
  4057                                  ;                       AH      keyboard scan code
  4058                                  ;
  4059                                  ;-----------------------------------------------------------------------------------------------------------------------
  4060                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4061                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4062                                                          or      eax,eax                                         ;do we have a message?
  4063                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4064                                                          push    eax                                             ;save key codes
  4065                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4066                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4067                                                          pop     eax                                             ;restore key codes
  4068                                                          jne     GetConsoleChar                                  ;no, try again
  4069                                                          and     eax,0000ffffh                                   ;mask for key codes
  4070                                                          ret                                                     ;return
  4071                                  ;-----------------------------------------------------------------------------------------------------------------------
  4072                                  ;
  4073                                  ;       Routine:        GetConsoleString
  4074                                  ;
  4075                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4076                                  ;
  4077                                  ;       In:             DS:EDX  target buffer address
  4078                                  ;                       ECX     maximum number of characters to accept
  4079                                  ;                       BH      echo to terminal
  4080                                  ;                       BL      terminating character
  4081                                  ;
  4082                                  ;-----------------------------------------------------------------------------------------------------------------------
  4083                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4084                                                          push    esi                                             ;
  4085                                                          push    edi                                             ;
  4086                                                          push    es                                              ;
  4087                                                          push    ds                                              ;load data segment selector ...
  4088                                                          pop     es                                              ;... into extra segment register
  4089                                                          mov     edi,edx                                         ;edi = target buffer
  4090                                                          push    ecx                                             ;save maximum characters
  4091                                                          xor     al,al                                           ;zero register
  4092                                                          cld                                                     ;forward strings
  4093                                                          rep     stosb                                           ;zero fill buffer
  4094                                                          pop     ecx                                             ;maximum characters
  4095                                                          mov     edi,edx                                         ;edi = target buffer
  4096                                                          mov     esi,edx                                         ;esi = target buffer
  4097                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4098                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4099                                                          cmp     al,bl                                           ;is this the terminator?
  4100                                                          je      .50                                             ;yes, exit
  4101                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4102                                                          jne     .30                                             ;no, skip ahead
  4103                                                          cmp     esi,edi                                         ;at start of buffer?
  4104                                                          je      .20                                             ;yes, get next character
  4105                                                          dec     edi                                             ;backup target pointer
  4106                                                          mov     byte [edi],0                                    ;zero previous character
  4107                                                          inc     ecx                                             ;increment remaining chars
  4108                                                          test    bh,1                                            ;echo to console?
  4109                                                          jz      .20                                             ;no, get next character
  4110                                                          call    PreviousConsoleColumn                           ;backup console position
  4111                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4112                                                          call    PutConsoleChar                                  ;write space to console
  4113                                                          call    PlaceCursor                                     ;position the cursor
  4114                                                          jmp     .20                                             ;get next character
  4115                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4116                                                          jb      .20                                             ;no, get another character
  4117                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4118                                                          ja      .20                                             ;no, get another character
  4119                                                          stosb                                                   ;store character in buffer
  4120                                                          test    bh,1                                            ;echo to console?
  4121                                                          jz      .40                                             ;no, skip ahead
  4122                                                          call    PutConsoleChar                                  ;write character to console
  4123                                                          call    NextConsoleColumn                               ;advance console position
  4124                                                          call    PlaceCursor                                     ;position the cursor
  4125                                  .40                     dec     ecx                                             ;decrement remaining chars
  4126                                                          jmp     .10                                             ;next
  4127                                  .50                     xor     al,al                                           ;null
  4128                                                          stosb                                                   ;terminate buffer
  4129                                                          pop     es                                              ;restore non-volatile regs
  4130                                                          pop     edi                                             ;
  4131                                                          pop     esi                                             ;
  4132                                                          pop     ecx                                             ;
  4133                                                          ret                                                     ;return
  4134                                  ;-----------------------------------------------------------------------------------------------------------------------
  4135                                  ;
  4136                                  ;       Routine:        NextConsoleColumn
  4137                                  ;
  4138                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4139                                  ;                       incremented if the end of the current row is reached.
  4140                                  ;
  4141                                  ;       In:             DS      OS data selector
  4142                                  ;
  4143                                  ;-----------------------------------------------------------------------------------------------------------------------
  4144                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4145                                                          inc     al                                              ;increment column
  4146                                                          mov     [wbConsoleColumn],al                            ;save column
  4147                                                          cmp     al,ECONCOLS                                     ;end of row?
  4148                                                          jb      .10                                             ;no, skip ahead
  4149                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4150                                                          call    NextConsoleRow                                  ;line feed to next row
  4151                                  .10                     ret                                                     ;return
  4152                                  ;-----------------------------------------------------------------------------------------------------------------------
  4153                                  ;
  4154                                  ;       Routine:        NextConsoleRow
  4155                                  ;
  4156                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4157                                  ;
  4158                                  ;       In:             DS      OS data selector
  4159                                  ;
  4160                                  ;-----------------------------------------------------------------------------------------------------------------------
  4161                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4162                                                          inc     al                                              ;increment row
  4163                                                          mov     [wbConsoleRow],al                               ;save row
  4164                                                          cmp     al,ECONROWS                                     ;end of screen?
  4165                                                          jb      .10                                             ;no, skip ahead
  4166                                                          call    ScrollConsoleRow                                ;scroll up one row
  4167                                                          mov     al,[wbConsoleRow]                               ;row
  4168                                                          dec     al                                              ;decrement row
  4169                                                          mov     [wbConsoleRow],al                               ;save row
  4170                                  .10                     ret                                                     ;return
  4171                                  ;-----------------------------------------------------------------------------------------------------------------------
  4172                                  ;
  4173                                  ;       Routine:        PreviousConsoleColumn
  4174                                  ;
  4175                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4176                                  ;                       the column is set to the last position in the row and the row is decremented.
  4177                                  ;
  4178                                  ;       In:             DS      OS data selector
  4179                                  ;
  4180                                  ;-----------------------------------------------------------------------------------------------------------------------
  4181                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4182                                                          or      al,al                                           ;start of row?
  4183                                                          jnz     .10                                             ;no, skip ahead
  4184                                                          mov     ah,[wbConsoleRow]                               ;current row
  4185                                                          or      ah,ah                                           ;top of screen?
  4186                                                          jz      .20                                             ;yes, exit with no change
  4187                                                          dec     ah                                              ;decrement row
  4188                                                          mov     [wbConsoleRow],ah                               ;save row
  4189                                                          mov     al,ECONCOLS                                     ;set maximum column
  4190                                  .10                     dec     al                                              ;decrement column
  4191                                                          mov     [wbConsoleColumn],al                            ;save column
  4192                                  .20                     ret                                                     ;return
  4193                                  ;-----------------------------------------------------------------------------------------------------------------------
  4194                                  ;
  4195                                  ;       Routine:        PutConsoleChar
  4196                                  ;
  4197                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4198                                  ;
  4199                                  ;       In:             AL      ASCII character
  4200                                  ;                       DS      OS data selector
  4201                                  ;
  4202                                  ;-----------------------------------------------------------------------------------------------------------------------
  4203                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4204                                                          push    es                                              ;
  4205                                                          push    EGDTCGA                                         ;load CGA selector ...
  4206                                                          pop     es                                              ;... into extra segment reg
  4207                                                          mov     cl,[wbConsoleColumn]                            ;column
  4208                                                          mov     ch,[wbConsoleRow]                               ;row
  4209                                                          call    SetConsoleChar                                  ;put character at row, column
  4210                                                          pop     es                                              ;restore non-volatile regs
  4211                                                          pop     ecx                                             ;
  4212                                                          ret                                                     ;return
  4213                                  ;-----------------------------------------------------------------------------------------------------------------------
  4214                                  ;
  4215                                  ;       Routine:        PutConsoleHexByte
  4216                                  ;
  4217                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4218                                  ;
  4219                                  ;       In:             AL      byte value
  4220                                  ;                       CL      column
  4221                                  ;                       CH      row
  4222                                  ;                       DS      OS data selector
  4223                                  ;                       ES      CGA selector
  4224                                  ;
  4225                                  ;-----------------------------------------------------------------------------------------------------------------------
  4226                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4227                                                          mov     bl,al                                           ;save byte value
  4228                                                          shr     al,4                                            ;hi-order nybble
  4229                                                          or      al,030h                                         ;apply ASCII zone
  4230                                                          cmp     al,03ah                                         ;numeric?
  4231                                                          jb      .10                                             ;yes, skip ahead
  4232                                                          add     al,7                                            ;add ASCII offset for alpha
  4233                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4234                                                          mov     al,bl                                           ;byte value
  4235                                                          and     al,0fh                                          ;lo-order nybble
  4236                                                          or      al,30h                                          ;apply ASCII zone
  4237                                                          cmp     al,03ah                                         ;numeric?
  4238                                                          jb      .20                                             ;yes, skip ahead
  4239                                                          add     al,7                                            ;add ASCII offset for alpha
  4240                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4241                                                          pop     ebx                                             ;restore non-volatile regs
  4242                                                          ret                                                     ;return
  4243                                  ;-----------------------------------------------------------------------------------------------------------------------
  4244                                  ;
  4245                                  ;       Routine:        PutConsoleHexDword
  4246                                  ;
  4247                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4248                                  ;
  4249                                  ;       In:             EAX     value
  4250                                  ;                       CL      column
  4251                                  ;                       CH      row
  4252                                  ;                       DS      OS data selector
  4253                                  ;                       ES      CGA selector
  4254                                  ;
  4255                                  ;-----------------------------------------------------------------------------------------------------------------------
  4256                                  PutConsoleHexDword      push    eax
  4257                                                          shr     eax,16
  4258                                                          call    PutConsoleHexWord
  4259                                                          pop     eax
  4260                                                          call    PutConsoleHexWord
  4261                                                          ret
  4262                                  ;-----------------------------------------------------------------------------------------------------------------------
  4263                                  ;
  4264                                  ;       Routine:        PutConsoleHexWord
  4265                                  ;
  4266                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4267                                  ;
  4268                                  ;       In:             EAX     value
  4269                                  ;                       CL      column
  4270                                  ;                       CH      row
  4271                                  ;                       DS      OS data selector
  4272                                  ;                       ES      CGA selector
  4273                                  ;
  4274                                  ;-----------------------------------------------------------------------------------------------------------------------
  4275                                  PutConsoleHexWord       push    eax
  4276                                                          shr     eax,8
  4277                                                          call    PutConsoleHexByte
  4278                                                          pop     eax
  4279                                                          call    PutConsoleHexByte
  4280                                                          ret
  4281                                  ;-----------------------------------------------------------------------------------------------------------------------
  4282                                  ;
  4283                                  ;       Routine:        PutConsoleOIAChar
  4284                                  ;
  4285                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4286                                  ;
  4287                                  ;       In:             DS      OS data selector
  4288                                  ;
  4289                                  ;-----------------------------------------------------------------------------------------------------------------------
  4290                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4291                                                          push    ecx                                             ;
  4292                                                          push    esi                                             ;
  4293                                                          push    ds                                              ;
  4294                                                          push    es                                              ;
  4295                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4296                                                          pop     ds                                              ;... into data segment register
  4297                                                          push    EGDTCGA                                         ;load CGA selector ...
  4298                                                          pop     es                                              ;... into extra segment register
  4299                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4300                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4301                                                          mov     bl,0                                            ;starting column
  4302                                                          mov     ecx,6                                           ;maximum scan codes
  4303                                  .10                     push    ecx                                             ;save remaining count
  4304                                                          mov     ecx,ebx                                         ;row, column
  4305                                                          lodsb                                                   ;read scan code
  4306                                                          or      al,al                                           ;scan code present?
  4307                                                          jz      .20                                             ;no, skip ahead
  4308                                                          call    PutConsoleHexByte                               ;display scan code
  4309                                                          jmp     .30                                             ;continue
  4310                                  .20                     mov     al,' '                                          ;ASCII space
  4311                                                          call    SetConsoleChar                                  ;display space
  4312                                                          mov     al,' '                                          ;ASCII space
  4313                                                          call    SetConsoleChar                                  ;display space
  4314                                  .30                     add     bl,2                                            ;next column (+2)
  4315                                                          pop     ecx                                             ;restore remaining
  4316                                                          loop    .10                                             ;next code
  4317                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4318                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4319                                                          jb      .40                                             ;no, skip ahead
  4320                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4321                                                          ja      .40                                             ;no, skip ahead
  4322                                                          mov     ch,bh                                           ;OIA row
  4323                                                          mov     cl,40                                           ;character display column
  4324                                                          call    SetConsoleChar                                  ;display ASCII character
  4325                                  .40                     pop     es                                              ;restore non-volatile regs
  4326                                                          pop     ds                                              ;
  4327                                                          pop     esi                                             ;
  4328                                                          pop     ecx                                             ;
  4329                                                          pop     ebx                                             ;
  4330                                                          ret                                                     ;return
  4331                                  ;-----------------------------------------------------------------------------------------------------------------------
  4332                                  ;
  4333                                  ;       Routine:        PutConsoleOIAShift
  4334                                  ;
  4335                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4336                                  ;
  4337                                  ;       In:             BL      shift flags
  4338                                  ;                       BH      lock flags
  4339                                  ;                       DS      OS data selector
  4340                                  ;
  4341                                  ;-----------------------------------------------------------------------------------------------------------------------
  4342                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4343                                                          push    es                                              ;
  4344                                                          push    EGDTCGA                                         ;load CGA selector ...
  4345                                                          pop     es                                              ;... into ES register
  4346                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4347                                                          mov     al,EASCIISPACE                                  ;space is default character
  4348                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4349                                                          jz      .10                                             ;no, skip ahead
  4350                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4351                                  .10                     mov     cl,14                                           ;indicator column
  4352                                                          call    SetConsoleChar                                  ;display ASCII character
  4353                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4354                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4355                                                          jz      .20                                             ;no, skip ahead
  4356                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4357                                  .20                     mov     cl,64                                           ;indicator column
  4358                                                          call    SetConsoleChar                                  ;display ASCII character
  4359                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4360                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4361                                                          jz      .30                                             ;no, skip ahead
  4362                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4363                                  .30                     mov     cl,15                                           ;indicator column
  4364                                                          call    SetConsoleChar                                  ;display ASCII character
  4365                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4366                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4367                                                          jz      .40                                             ;no, skip ahead
  4368                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4369                                  .40                     mov     cl,63                                           ;indicator column
  4370                                                          call    SetConsoleChar                                  ;display ASCII character
  4371                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4372                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4373                                                          jz      .50                                             ;no, skip ahead
  4374                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4375                                  .50                     mov     cl,16                                           ;indicator column
  4376                                                          call    SetConsoleChar                                  ;display ASCII character
  4377                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4378                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4379                                                          jz      .60                                             ;no, skip ahead
  4380                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4381                                  .60                     mov     cl,62                                           ;indicator column
  4382                                                          call    SetConsoleChar                                  ;display ASCII character
  4383                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4384                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4385                                                          jz      .70                                             ;no, skip ahead
  4386                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4387                                  .70                     mov     cl,78                                           ;indicator column
  4388                                                          call    SetConsoleChar                                  ;display ASCII character
  4389                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4390                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4391                                                          jz      .80                                             ;no, skip ahead
  4392                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4393                                  .80                     mov     cl,77                                           ;indicator column
  4394                                                          call    SetConsoleChar                                  ;display ASCII character
  4395                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4396                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4397                                                          jz      .90                                             ;no, skip ahead
  4398                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4399                                  .90                     mov     cl,76                                           ;indicator column
  4400                                                          call    SetConsoleChar                                  ;display ASCII character
  4401                                                          pop     es                                              ;restore non-volatile regs
  4402                                                          pop     ecx                                             ;
  4403                                                          ret                                                     ;return
  4404                                  ;-----------------------------------------------------------------------------------------------------------------------
  4405                                  ;
  4406                                  ;       Routine:        PutConsoleString
  4407                                  ;
  4408                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4409                                  ;                       console position as needed.
  4410                                  ;
  4411                                  ;       In:             EDX     source address
  4412                                  ;                       DS      OS data selector
  4413                                  ;
  4414                                  ;-----------------------------------------------------------------------------------------------------------------------
  4415                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4416                                                          mov     esi,edx                                         ;source address
  4417                                                          cld                                                     ;forward strings
  4418                                  .10                     lodsb                                                   ;ASCII character
  4419                                                          or      al,al                                           ;end of string?
  4420                                                          jz      .40                                             ;yes, skip ahead
  4421                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4422                                                          jne     .20                                             ;no, skip ahead
  4423                                                          call    FirstConsoleColumn                              ;move to start of row
  4424                                                          jmp     .10                                             ;next character
  4425                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4426                                                          jne     .30                                             ;no, skip ahead
  4427                                                          call    NextConsoleRow                                  ;move to next row
  4428                                                          jmp     .10                                             ;next character
  4429                                  .30                     call    PutConsoleChar                                  ;output character to console
  4430                                                          call    NextConsoleColumn                               ;advance to next column
  4431                                                          jmp     .10                                             ;next character
  4432                                  .40                     pop     esi                                             ;restore non-volatile regs
  4433                                                          ret                                                     ;return
  4434                                  ;-----------------------------------------------------------------------------------------------------------------------
  4435                                  ;
  4436                                  ;       Routine:        Yield
  4437                                  ;
  4438                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4439                                  ;
  4440                                  ;-----------------------------------------------------------------------------------------------------------------------
  4441                                  Yield                   sti                                                     ;enable maskagle interrupts
  4442                                                          hlt                                                     ;halt until external interrupt
  4443                                                          ret                                                     ;return
  4444                                  ;=======================================================================================================================
  4445                                  ;
  4446                                  ;       Data-Type Conversion Helper Routines
  4447                                  ;
  4448                                  ;       DecimalToUnsigned
  4449                                  ;       HexadecimalToUnsigned
  4450                                  ;       UnsignedToDecimalString
  4451                                  ;       UnsignedToHexadecimal
  4452                                  ;
  4453                                  ;=======================================================================================================================
  4454                                  ;-----------------------------------------------------------------------------------------------------------------------
  4455                                  ;
  4456                                  ;       Routine:        DecimalToUnsigned
  4457                                  ;
  4458                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4459                                  ;
  4460                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4461                                  ;
  4462                                  ;       Output:         EAX     unsigned integer value
  4463                                  ;
  4464                                  ;-----------------------------------------------------------------------------------------------------------------------
  4465                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4466                                                          mov     esi,edx                                         ;source address
  4467                                                          xor     edx,edx                                         ;zero total
  4468                                  .10                     lodsb                                                   ;source byte
  4469                                                          cmp     al,','                                          ;comma?
  4470                                                          je      .10                                             ;yes, ignore
  4471                                                          test    al,al                                           ;end of string?
  4472                                                          jz      .30                                             ;yes, done
  4473                                                          cmp     al,'.'                                          ;decimal point?
  4474                                                          je      .30                                             ;yes, done
  4475                                                          cmp     al,'0'                                          ;numeral?
  4476                                                          jb      .20                                             ;no, invalid string
  4477                                                          cmp     al,'9'                                          ;numeral?
  4478                                                          ja      .20                                             ;no, invalid string
  4479                                                          and     al,00Fh                                         ;mask ASCII zone
  4480                                                          push    eax                                             ;save numeral
  4481                                                          shl     edx,1                                           ;total * 2
  4482                                                          mov     eax,edx                                         ;total * 2
  4483                                                          shl     edx,2                                           ;total * 8
  4484                                                          add     edx,eax                                         ;total * 10
  4485                                                          pop     eax                                             ;restore numeral
  4486                                                          add     edx,eax                                         ;accumulate decimal digit
  4487                                                          xor     eax,eax                                         ;zero register
  4488                                                          jmp     .10                                             ;next
  4489                                  .20                     xor     edx,edx                                         ;zero result on error
  4490                                  .30                     mov     eax,edx                                         ;result
  4491                                                          pop     esi                                             ;restore non-volatile regs
  4492                                                          ret                                                     ;return
  4493                                  ;-----------------------------------------------------------------------------------------------------------------------
  4494                                  ;
  4495                                  ;       Routine:        HexadecimalToUnsigned
  4496                                  ;
  4497                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4498                                  ;
  4499                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4500                                  ;
  4501                                  ;       Output:         EAX     unsigned integer value
  4502                                  ;
  4503                                  ;-----------------------------------------------------------------------------------------------------------------------
  4504                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4505                                                          mov     esi,edx                                         ;source address
  4506                                                          xor     edx,edx                                         ;zero register
  4507                                  .10                     lodsb                                                   ;source byte
  4508                                                          test    al,al                                           ;end of string?
  4509                                                          jz      .30                                             ;yes, branch
  4510                                                          cmp     al,'9'                                          ;hexadecimal?
  4511                                                          jna     .20                                             ;no, skip ahead
  4512                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4513                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4514                                                          shl     edx,4                                           ;previous total x 16
  4515                                                          add     edx,eax                                         ;add prior value x 16
  4516                                                          jmp     .10                                             ;next
  4517                                  .30                     mov     eax,edx                                         ;result
  4518                                                          pop     esi                                             ;restore non-volatile regs
  4519                                                          ret                                                     ;return
  4520                                  ;-----------------------------------------------------------------------------------------------------------------------
  4521                                  ;
  4522                                  ;       Routine:        UnsignedToDecimalString
  4523                                  ;
  4524                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4525                                  ;
  4526                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4527                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4528                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4529                                  ;                       ECX     32-bit binary
  4530                                  ;                       DS:EDX  output buffer address
  4531                                  ;
  4532                                  ;-----------------------------------------------------------------------------------------------------------------------
  4533                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4534                                                          push    ecx                                             ;
  4535                                                          push    edi                                             ;
  4536                                                          push    es                                              ;
  4537                                                          push    ds                                              ;load data selector
  4538                                                          pop     es                                              ;... into extra segment reg
  4539                                                          mov     edi,edx                                         ;output buffer address
  4540                                                          and     bh,00001111b                                    ;zero internal flags
  4541                                                          mov     edx,ecx                                         ;binary
  4542                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4543                                                          call    .30                                             ;divide and store
  4544                                                          mov     ecx,100000000                                   ;10^8 divisor
  4545                                                          call    .10                                             ;divide and store
  4546                                                          mov     ecx,10000000                                    ;10^7 divisor
  4547                                                          call    .30                                             ;divide and store
  4548                                                          mov     ecx,1000000                                     ;10^6 divisor
  4549                                                          call    .30                                             ;divide and store
  4550                                                          mov     ecx,100000                                      ;10^5 divisor
  4551                                                          call    .10                                             ;divide and store
  4552                                                          mov     ecx,10000                                       ;10^4 divisor
  4553                                                          call    .30                                             ;divide and store
  4554                                                          mov     ecx,1000                                        ;10^3 divisor
  4555                                                          call    .30                                             ;divide and store
  4556                                                          mov     ecx,100                                         ;10^2 divisor
  4557                                                          call    .10                                             ;divide and store
  4558                                                          mov     ecx,10                                          ;10^2 divisor
  4559                                                          call    .30                                             ;divide and store
  4560                                                          mov     eax,edx                                         ;10^1 remainder
  4561                                                          call    .40                                             ;store
  4562                                                          xor     al,al                                           ;null terminator
  4563                                                          stosb
  4564                                                          pop     es                                              ;restore non-volatile regs
  4565                                                          pop     edi                                             ;
  4566                                                          pop     ecx                                             ;
  4567                                                          pop     ebx                                             ;
  4568                                                          ret                                                     ;return
  4569                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4570                                                          jz      .30                                             ;no, branch
  4571                                                          test    bh,00000001b                                    ;trim leading zeros?
  4572                                                          jz      .20                                             ;no, store delim
  4573                                                          test    bh,00010000b                                    ;non-zero found?
  4574                                                          jz      .30                                             ;no, branch
  4575                                  .20                     mov     al,','                                          ;delimiter
  4576                                                          stosb                                                   ;store delimiter
  4577                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4578                                                          xor     edx,edx                                         ;zero hi-order
  4579                                                          div     ecx                                             ;divide by power of 10
  4580                                                          test    al,al                                           ;zero?
  4581                                                          jz      .50                                             ;yes, branch
  4582                                                          or      bh,00010000b                                    ;non-zero found
  4583                                  .40                     or      al,30h                                          ;ASCII zone
  4584                                                          stosb                                                   ;store digit
  4585                                                          ret                                                     ;return
  4586                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4587                                                          jz      .40                                             ;no, store and continue
  4588                                                          test    bh,00010000b                                    ;non-zero found?
  4589                                                          jnz     .40                                             ;yes, store and continue
  4590                                                          ret                                                     ;return
  4591                                  ;-----------------------------------------------------------------------------------------------------------------------
  4592                                  ;
  4593                                  ;       Routine:        UnsignedToHexadecimal
  4594                                  ;
  4595                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4596                                  ;
  4597                                  ;       Input:          DS:EDX  output buffer address
  4598                                  ;                       ECX     32-bit binary
  4599                                  ;
  4600                                  ;-----------------------------------------------------------------------------------------------------------------------
  4601                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4602                                                          mov     edi,edx                                         ;output buffer address
  4603                                                          mov     edx,ecx                                         ;32-bit unsigned
  4604                                                          xor     ecx,ecx                                         ;zero register
  4605                                                          mov     cl,8                                            ;nybble count
  4606                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4607                                                          mov     al,dl                                           ;????bbbb
  4608                                                          and     al,0fh                                          ;mask out bits 4-7
  4609                                                          or      al,30h                                          ;mask in ascii zone
  4610                                                          cmp     al,3ah                                          ;A through F?
  4611                                                          jb      .20                                             ;no, skip ahead
  4612                                                          add     al,7                                            ;41h through 46h
  4613                                  .20                     stosb                                                   ;store hexnum
  4614                                                          loop    .10                                             ;next nybble
  4615                                                          xor     al,al                                           ;zero reg
  4616                                                          stosb                                                   ;null terminate
  4617                                                          pop     edi                                             ;restore non-volatile regs
  4618                                                          ret                                                     ;return
  4619                                  ;=======================================================================================================================
  4620                                  ;
  4621                                  ;       Message Queue Helper Routines
  4622                                  ;
  4623                                  ;       GetMessage
  4624                                  ;       PutMessage
  4625                                  ;
  4626                                  ;=======================================================================================================================
  4627                                  ;-----------------------------------------------------------------------------------------------------------------------
  4628                                  ;
  4629                                  ;       Routine:        GetMessage
  4630                                  ;
  4631                                  ;       Description:    This routine reads and removes a message from the message queue.
  4632                                  ;
  4633                                  ;       Out:            EAX     lo-order message data
  4634                                  ;                       EDX     hi-order message data
  4635                                  ;
  4636                                  ;                       CY      0 = message read
  4637                                  ;                               1 = no message to read
  4638                                  ;
  4639                                  ;-----------------------------------------------------------------------------------------------------------------------
  4640                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4641                                                          push    ecx                                             ;
  4642                                                          push    ds                                              ;
  4643                                                          push    ELDTMQ                                          ;load message queue selector ...
  4644                                                          pop     ds                                              ;... into data segment register
  4645                                                          mov     ebx,[MQHead]                                    ;head ptr
  4646                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4647                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4648                                                          or      eax,edx                                         ;is queue empty?
  4649                                                          stc                                                     ;assume queue is emtpy
  4650                                                          jz      .20                                             ;yes, skip ahead
  4651                                                          xor     ecx,ecx                                         ;store zero
  4652                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4653                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4654                                                          add     ebx,8                                           ;next queue element
  4655                                                          and     ebx,03fch                                       ;at end of queue?
  4656                                                          jnz     .10                                             ;no, skip ahead
  4657                                                          mov     bl,8                                            ;reset to 1st entry
  4658                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4659                                                          clc                                                     ;indicate message read
  4660                                  .20                     pop     ds                                              ;restore non-volatile regs
  4661                                                          pop     ecx                                             ;
  4662                                                          pop     ebx                                             ;
  4663                                                          ret                                                     ;return
  4664                                  ;-----------------------------------------------------------------------------------------------------------------------
  4665                                  ;
  4666                                  ;       Routine:        PutMessage
  4667                                  ;
  4668                                  ;       Description:    This routine adda a message to the message queue.
  4669                                  ;
  4670                                  ;       In:             ECX     hi-order data word
  4671                                  ;                       EDX     lo-order data word
  4672                                  ;
  4673                                  ;       Out:            CY      0 = success
  4674                                  ;                               1 = fail: queue is full
  4675                                  ;
  4676                                  ;-----------------------------------------------------------------------------------------------------------------------
  4677                                  PutMessage              push    ds                                              ;save non-volatile regs
  4678                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4679                                                          pop     ds                                              ;... into data segment register
  4680                                                          mov     eax,[MQTail]                                    ;tail ptr
  4681                                                          cmp     dword [eax],0                                   ;is queue full?
  4682                                                          stc                                                     ;assume failure
  4683                                                          jne     .20                                             ;yes, cannot store
  4684                                                          mov     [eax],edx                                       ;store lo-order data
  4685                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4686                                                          add     eax,8                                           ;next queue element adr
  4687                                                          and     eax,03fch                                       ;at end of queue?
  4688                                                          jnz     .10                                             ;no, skip ahead
  4689                                                          mov     al,8                                            ;reset to top of queue
  4690                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4691                                                          clc                                                     ;indicate success
  4692                                  .20                     pop     ds                                              ;restore non-volatile regs
  4693                                                          ret                                                     ;return
  4694                                  ;=======================================================================================================================
  4695                                  ;
  4696                                  ;       Memory-Mapped Video Routines
  4697                                  ;
  4698                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4699                                  ;
  4700                                  ;       ClearConsoleScreen
  4701                                  ;       ScrollConsoleRow
  4702                                  ;       SetConsoleChar
  4703                                  ;       SetConsoleString
  4704                                  ;
  4705                                  ;=======================================================================================================================
  4706                                  ;-----------------------------------------------------------------------------------------------------------------------
  4707                                  ;
  4708                                  ;       Routine:        ClearConsoleScreen
  4709                                  ;
  4710                                  ;       Description:    This routine clears the console (CGA) screen.
  4711                                  ;
  4712                                  ;-----------------------------------------------------------------------------------------------------------------------
  4713                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4714                                                          push    edi                                             ;
  4715                                                          push    ds                                              ;
  4716                                                          push    es                                              ;
  4717                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4718                                                          pop     ds                                              ;... into DS register
  4719                                                          push    EGDTCGA                                         ;load CGA selector ...
  4720                                                          pop     es                                              ;... into ES register
  4721                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4722                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4723                                                          xor     edi,edi                                         ;target offset
  4724                                                          cld                                                     ;forward strings
  4725                                                          rep     stosd                                           ;reset screen body
  4726                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4727                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4728                                                          rep     stosd                                           ;reset OIA line
  4729                                                          xor     al,al                                           ;zero register
  4730                                                          mov     [wbConsoleRow],al                               ;reset console row
  4731                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4732                                                          call    PlaceCursor                                     ;place cursor at current position
  4733                                                          pop     es                                              ;restore non-volatile regs
  4734                                                          pop     ds                                              ;
  4735                                                          pop     edi                                             ;
  4736                                                          pop     ecx                                             ;
  4737                                                          ret                                                     ;return
  4738                                  ;-----------------------------------------------------------------------------------------------------------------------
  4739                                  ;
  4740                                  ;       Routine:        ScrollConsoleRow
  4741                                  ;
  4742                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4743                                  ;
  4744                                  ;-----------------------------------------------------------------------------------------------------------------------
  4745                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4746                                                          push    esi                                             ;
  4747                                                          push    edi                                             ;
  4748                                                          push    ds                                              ;
  4749                                                          push    es                                              ;
  4750                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4751                                                          pop     ds                                              ;... into DS
  4752                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4753                                                          pop     es                                              ;... into ES
  4754                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4755                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4756                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4757                                                          cld                                                     ;forward strings
  4758                                                          rep     movsd                                           ;move 24 lines up
  4759                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4760                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4761                                                          rep     stosd                                           ;clear bottom row
  4762                                                          pop     es                                              ;restore non-volatile regs
  4763                                                          pop     ds                                              ;
  4764                                                          pop     edi                                             ;
  4765                                                          pop     esi                                             ;
  4766                                                          pop     ecx                                             ;
  4767                                                          ret                                                     ;return
  4768                                  ;-----------------------------------------------------------------------------------------------------------------------
  4769                                  ;
  4770                                  ;       Routine:        SetConsoleChar
  4771                                  ;
  4772                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4773                                  ;
  4774                                  ;       In:             AL      ASCII character
  4775                                  ;                       CL      column
  4776                                  ;                       CH      row
  4777                                  ;                       ES      CGA selector
  4778                                  ;
  4779                                  ;       Out:            EAX     last target address written (ES:)
  4780                                  ;                       CL      column + 1
  4781                                  ;
  4782                                  ;-----------------------------------------------------------------------------------------------------------------------
  4783                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4784                                                          movzx   eax,ch                                          ;row
  4785                                                          mov     ah,ECONCOLS                                     ;cols/row
  4786                                                          mul     ah                                              ;row * cols/row
  4787                                                          add     al,cl                                           ;add column
  4788                                                          adc     ah,0                                            ;handle carry
  4789                                                          shl     eax,1                                           ;screen offset
  4790                                                          mov     [es:eax],dl                                     ;store character
  4791                                                          inc     cl                                              ;next column
  4792                                                          ret                                                     ;return
  4793                                  ;-----------------------------------------------------------------------------------------------------------------------
  4794                                  ;
  4795                                  ;       Routine:        SetConsoleString
  4796                                  ;
  4797                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4798                                  ;
  4799                                  ;       In:             ESI     source offset (DS:)
  4800                                  ;                       CL      column
  4801                                  ;                       CH      row
  4802                                  ;                       ES      CGA selector
  4803                                  ;
  4804                                  ;-----------------------------------------------------------------------------------------------------------------------
  4805                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4806                                                          cld                                                     ;forward strings
  4807                                  .10                     lodsb                                                   ;next ASCII character
  4808                                                          test    al,al                                           ;end of string?
  4809                                                          jz      .20                                             ;yes, branch
  4810                                                          call    SetConsoleChar                                  ;store character
  4811                                                          jmp     .10                                             ;continue
  4812                                  .20                     pop     esi                                             ;restore non-volatile regs
  4813                                                          ret                                                     ;return
  4814                                  ;=======================================================================================================================
  4815                                  ;
  4816                                  ;       Input/Output Routines
  4817                                  ;
  4818                                  ;       These routines read and/or write directly to ports.
  4819                                  ;
  4820                                  ;       GetBaseMemSize
  4821                                  ;       GetExtendedMemSize
  4822                                  ;       GetROMMemSize
  4823                                  ;       PlaceCursor
  4824                                  ;       PutPrimaryEndOfInt
  4825                                  ;       PutSecondaryEndOfInt
  4826                                  ;       ReadRealTimeClock
  4827                                  ;       ResetSystem
  4828                                  ;       SetKeyboardLamps
  4829                                  ;       WaitForKeyInBuffer
  4830                                  ;       WaitForKeyOutBuffer
  4831                                  ;
  4832                                  ;=======================================================================================================================
  4833                                  ;-----------------------------------------------------------------------------------------------------------------------
  4834                                  ;
  4835                                  ;       Routine:        GetBaseMemSize
  4836                                  ;
  4837                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4838                                  ;
  4839                                  ;       Output:         EAX     base RAM size in bytes
  4840                                  ;
  4841                                  ;-----------------------------------------------------------------------------------------------------------------------
  4842                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4843                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4844                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4845                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4846                                                          mov     ah,al                                           ;save base RAM high
  4847                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4848                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4849                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4850                                                          ret                                                     ;return to caller
  4851                                  ;-----------------------------------------------------------------------------------------------------------------------
  4852                                  ;
  4853                                  ;       Routine:        GetExtendedMemSize
  4854                                  ;
  4855                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4856                                  ;
  4857                                  ;       Output:         EAX     extended RAM size in bytes
  4858                                  ;
  4859                                  ;-----------------------------------------------------------------------------------------------------------------------
  4860                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4861                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4862                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4863                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4864                                                          mov     ah,al                                           ;save extended RAM high
  4865                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4866                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4867                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4868                                                          ret                                                     ;return to caller
  4869                                  ;-----------------------------------------------------------------------------------------------------------------------
  4870                                  ;
  4871                                  ;       Routine:        GetROMMemSize
  4872                                  ;
  4873                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4874                                  ;
  4875                                  ;       Output:         EAX     RAM size in bytes
  4876                                  ;
  4877                                  ;-----------------------------------------------------------------------------------------------------------------------
  4878                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4879                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4880                                                          ret                                                     ;return
  4881                                  ;-----------------------------------------------------------------------------------------------------------------------
  4882                                  ;
  4883                                  ;       Routine:        PlaceCursor
  4884                                  ;
  4885                                  ;       Description:    This routine positions the cursor on the console.
  4886                                  ;
  4887                                  ;       In:             DS      OS data selector
  4888                                  ;
  4889                                  ;-----------------------------------------------------------------------------------------------------------------------
  4890                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4891                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4892                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4893                                                          mul     ah                                              ;row offset
  4894                                                          add     al,[wbConsoleColumn]                            ;add column
  4895                                                          adc     ah,0                                            ;add overflow
  4896                                                          mov     ecx,eax                                         ;screen offset
  4897                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4898                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4899                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4900                                                          out     dx,al                                           ;select register
  4901                                                          inc     edx                                             ;data port
  4902                                                          mov     al,ch                                           ;hi-order cursor loc
  4903                                                          out     dx,al                                           ;store hi-order loc
  4904                                                          dec     edx                                             ;register select port
  4905                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4906                                                          out     dx,al                                           ;select register
  4907                                                          inc     edx                                             ;data port
  4908                                                          mov     al,cl                                           ;lo-order cursor loc
  4909                                                          out     dx,al                                           ;store lo-order loc
  4910                                                          pop     ecx                                             ;restore non-volatile regs
  4911                                                          ret                                                     ;return
  4912                                  ;-----------------------------------------------------------------------------------------------------------------------
  4913                                  ;
  4914                                  ;       Routine:        PutPrimaryEndOfInt
  4915                                  ;
  4916                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4917                                  ;
  4918                                  ;-----------------------------------------------------------------------------------------------------------------------
  4919                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4920                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4921                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4922                                                          ret                                                     ;return
  4923                                  ;-----------------------------------------------------------------------------------------------------------------------
  4924                                  ;
  4925                                  ;       Routine:        PutSecondaryEndOfInt
  4926                                  ;
  4927                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4928                                  ;
  4929                                  ;-----------------------------------------------------------------------------------------------------------------------
  4930                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4931                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4932                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4933                                                          ret                                                     ;return
  4934                                  ;-----------------------------------------------------------------------------------------------------------------------
  4935                                  ;
  4936                                  ;       Routine:        ReadRealTimeClock
  4937                                  ;
  4938                                  ;       Description:    This routine gets current date time from the real-time clock.
  4939                                  ;
  4940                                  ;       In:             DS:EBX  DATETIME structure
  4941                                  ;
  4942                                  ;-----------------------------------------------------------------------------------------------------------------------
  4943                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4944                                                          push    edi                                             ;
  4945                                                          push    es                                              ;
  4946                                                          push    ds                                              ;store data selector ...
  4947                                                          pop     es                                              ;... in es register
  4948                                                          mov     edi,ebx                                         ;date-time structure
  4949                                                          mov     al,ERTCSECONDREG                                ;second register
  4950                                                          out     ERTCREGPORT,al                                  ;select second register
  4951                                                          in      al,ERTCDATAPORT                                 ;read second register
  4952                                                          cld                                                     ;forward strings
  4953                                                          stosb                                                   ;store second value
  4954                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4955                                                          out     ERTCREGPORT,al                                  ;select minute register
  4956                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4957                                                          stosb                                                   ;store minute value
  4958                                                          mov     al,ERTCHOURREG                                  ;hour register
  4959                                                          out     ERTCREGPORT,al                                  ;select hour register
  4960                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4961                                                          stosb                                                   ;store hour value
  4962                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4963                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4964                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4965                                                          stosb                                                   ;store weekday value
  4966                                                          mov     al,ERTCDAYREG                                   ;day register
  4967                                                          out     ERTCREGPORT,al                                  ;select day register
  4968                                                          in      al,ERTCDATAPORT                                 ;read day register
  4969                                                          stosb                                                   ;store day value
  4970                                                          mov     al,ERTCMONTHREG                                 ;month register
  4971                                                          out     ERTCREGPORT,al                                  ;select month register
  4972                                                          in      al,ERTCDATAPORT                                 ;read month register
  4973                                                          stosb                                                   ;store month value
  4974                                                          mov     al,ERTCYEARREG                                  ;year register
  4975                                                          out     ERTCREGPORT,al                                  ;select year register
  4976                                                          in      al,ERTCDATAPORT                                 ;read year register
  4977                                                          stosb                                                   ;store year value
  4978                                                          mov     al,ERTCCENTURYREG                               ;century register
  4979                                                          out     ERTCREGPORT,al                                  ;select century register
  4980                                                          in      al,ERTCDATAPORT                                 ;read century register
  4981                                                          stosb                                                   ;store century value
  4982                                                          mov     al,ERTCSTATUSREG                                ;status register
  4983                                                          out     ERTCREGPORT,al                                  ;select status register
  4984                                                          in      al,ERTCDATAPORT                                 ;read status register
  4985                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4986                                                          jnz     .20                                             ;skip ahead if binary values
  4987                                                          mov     esi,ebx                                         ;date-time structure address
  4988                                                          mov     edi,ebx                                         ;date-time structure address
  4989                                                          mov     ecx,8                                           ;loop counter
  4990                                  .10                     lodsb                                                   ;BCD value
  4991                                                          mov     ah,al                                           ;BCD value
  4992                                                          and     al,00001111b                                    ;low-order decimal zone
  4993                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4994                                                          shr     ah,1                                            ;hi-order decimal * 8
  4995                                                          add     al,ah                                           ;low-order + hi-order * 8
  4996                                                          shr     ah,2                                            ;hi-order decimal * 2
  4997                                                          add     al,ah                                           ;low-order + hi-order * 10
  4998                                                          stosb                                                   ;replace BCD with binary
  4999                                                          loop    .10                                             ;next value
  5000                                  .20                     pop     es                                              ;restore non-volatile regs
  5001                                                          pop     edi                                             ;
  5002                                                          pop     esi                                             ;
  5003                                                          ret                                                     ;return
  5004                                  ;-----------------------------------------------------------------------------------------------------------------------
  5005                                  ;
  5006                                  ;       Routine:        ResetSystem
  5007                                  ;
  5008                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5009                                  ;
  5010                                  ;       Out:            N/A     This routine does not return.
  5011                                  ;
  5012                                  ;-----------------------------------------------------------------------------------------------------------------------
  5013                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5014                                                          loop    $                                               ;clear interrupts
  5015                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5016                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5017                                  .10                     sti                                                     ;enable maskable interrupts
  5018                                                          hlt                                                     ;halt until interrupt
  5019                                                          jmp     .10                                             ;repeat until reset kicks in
  5020                                  ;-----------------------------------------------------------------------------------------------------------------------
  5021                                  ;
  5022                                  ;       Routine:        SetKeyboardLamps
  5023                                  ;
  5024                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5025                                  ;
  5026                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5027                                  ;
  5028                                  ;-----------------------------------------------------------------------------------------------------------------------
  5029                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5030                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5031                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5032                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5033                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5034                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5035                                                          mov     al,bh                                           ;set/reset lamps value
  5036                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5037                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5038                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5039                                                          ret                                                     ;return
  5040                                  ;-----------------------------------------------------------------------------------------------------------------------
  5041                                  ;
  5042                                  ;       Routine:        WaitForKeyInBuffer
  5043                                  ;
  5044                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5045                                  ;
  5046                                  ;       Out:            ZF      1 = Input buffer ready
  5047                                  ;                               0 = Input buffer not ready after timeout
  5048                                  ;
  5049                                  ;-----------------------------------------------------------------------------------------------------------------------
  5050                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5051                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5052                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5053                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5054                                                          loopnz  .10                                             ;yes, repeat till timeout
  5055                                                          pop     ecx                                             ;restore non-volatile regs
  5056                                                          ret                                                     ;return
  5057                                  ;-----------------------------------------------------------------------------------------------------------------------
  5058                                  ;
  5059                                  ;       Routine:        WaitForKeyOutBuffer
  5060                                  ;
  5061                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5062                                  ;
  5063                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5064                                  ;                               0 = Output buffer empty after timeout
  5065                                  ;
  5066                                  ;-----------------------------------------------------------------------------------------------------------------------
  5067                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5068                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5069                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5070                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5071                                                          loopz   .10                                             ;loop until output buffer bit
  5072                                                          pop     ecx                                             ;restore non-volatile regs
  5073                                                          ret                                                     ;return
  5074                                  ;-----------------------------------------------------------------------------------------------------------------------
  5075                                  ;
  5076                                  ;       End of the Kernel Function Library
  5077                                  ;
  5078                                  ;-----------------------------------------------------------------------------------------------------------------------
  5079                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5080                                  ;=======================================================================================================================
  5081                                  ;
  5082                                  ;       Console Task
  5083                                  ;
  5084                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5085                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5086                                  ;       screen and responds to user commands.
  5087                                  ;
  5088                                  ;=======================================================================================================================
  5089                                  ;-----------------------------------------------------------------------------------------------------------------------
  5090                                  ;
  5091                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5092                                  ;
  5093                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5094                                  ;
  5095                                  ;-----------------------------------------------------------------------------------------------------------------------
  5096                                  section                 constack                                                ;console task stack
  5097                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5098                                  ;-----------------------------------------------------------------------------------------------------------------------
  5099                                  ;
  5100                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5101                                  ;
  5102                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5103                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5104                                  ;       16 descriptors. Six are initially defined.
  5105                                  ;
  5106                                  ;-----------------------------------------------------------------------------------------------------------------------
  5107                                  section                 conldt                                                  ;console local descriptors
  5108                                                          dq      004093004780007Fh                               ;04 TSS alias
  5109                                                          dq      004093004700007Fh                               ;0c LDT alias
  5110                                                          dq      00409300400006FFh                               ;14 stack
  5111                                                          dq      00CF93000000FFFFh                               ;1c data
  5112                                                          dq      00409B0050000FFFh                               ;24 code
  5113                                                          dq      00409300480007FFh                               ;2c message queue
  5114                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5115                                  ;-----------------------------------------------------------------------------------------------------------------------
  5116                                  ;
  5117                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5118                                  ;
  5119                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5120                                  ;       segment. CS to console code.
  5121                                  ;
  5122                                  ;-----------------------------------------------------------------------------------------------------------------------
  5123                                  section                 contss                                                  ;console task state segment
  5124                                                          dd      0                                               ;00 back-link tss
  5125                                                          dd      0700h                                           ;04 esp ring 0
  5126                                                          dd      0014h                                           ;08 ss ring 0
  5127                                                          dd      0700h                                           ;0c esp ring 1
  5128                                                          dd      0014h                                           ;10 es ring 1
  5129                                                          dd      0700h                                           ;14 esp ring 2
  5130                                                          dd      0014h                                           ;18 ss ring 2
  5131                                                          dd      0                                               ;1c cr ring 3
  5132                                                          dd      0                                               ;20 eip
  5133                                                          dd      0200h                                           ;24 eflags
  5134                                                          dd      0                                               ;28 eax
  5135                                                          dd      0                                               ;2c ecx
  5136                                                          dd      0                                               ;30 edx
  5137                                                          dd      0                                               ;34 ebx
  5138                                                          dd      0700h                                           ;38 esp ring 3
  5139                                                          dd      0                                               ;3c ebp
  5140                                                          dd      0                                               ;40 esi
  5141                                                          dd      0                                               ;44 edi
  5142                                                          dd      001Ch                                           ;48 es
  5143                                                          dd      0024h                                           ;4c cs
  5144                                                          dd      0014h                                           ;50 ss ring 3
  5145                                                          dd      001Ch                                           ;54 ds
  5146                                                          dd      0                                               ;58 fs
  5147                                                          dd      0                                               ;5c gs
  5148                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5149                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5150                                  ;-----------------------------------------------------------------------------------------------------------------------
  5151                                  ;
  5152                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5153                                  ;
  5154                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5155                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5156                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5157                                  ;       event.
  5158                                  ;
  5159                                  ;-----------------------------------------------------------------------------------------------------------------------
  5160                                  section                 conmque                                                 ;console message queue
  5161                                                          dd      8                                               ;head pointer
  5162                                                          dd      8                                               ;tail pointer
  5163                                                          times   510 dd 0                                        ;queue elements
  5164                                  ;-----------------------------------------------------------------------------------------------------------------------
  5165                                  ;
  5166                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5167                                  ;
  5168                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5169                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5170                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5171                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5172                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5173                                  ;       board input, echoing to the console screen and responding to user commands.
  5174                                  ;
  5175                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5176                                  ;
  5177                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5178                                  ;                               |  Real Mode Interrupt Vectors                  |
  5179                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5180                                  ;                               |  Reserved BIOS Memory Area                    |
  5181                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5182                                  ;                               |  Shared Kernel Memory Area                    |
  5183                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5184                                  ;                               |  Global Descriptor Table (GDT)                |
  5185                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5186                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5187                                  ;                       002000  +-----------------------------------------------+
  5188                                  ;                               |  Interrupt Handlers                           |
  5189                                  ;                               |  Kernel Function Library                      |
  5190                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5191                                  ;                               |  Console Task Stack Area                      |
  5192                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5193                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5194                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5195                                  ;                               |  Console Task Task State Segment (TSS)        |
  5196                                  ;                       004800  +-----------------------------------------------+
  5197                                  ;                               |  Console Task Message Queue                   |
  5198                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5199                                  ;                               |  Console Task Code                            |
  5200                                  ;                               |  Console Task Constants                       |
  5201                                  ;                       006000  +===============================================+
  5202                                  ;
  5203                                  ;-----------------------------------------------------------------------------------------------------------------------
  5204                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5205                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5206                                  
  5207                                                          clearConsoleScreen                                      ;clear the console screen
  5208                                                          putConsoleString czTitle                                ;display startup message
  5209                                                          putConsoleString czROMMem                               ;ROM memory label
  5210                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5211                                                          putConsoleString czKB                                   ;Kilobytes
  5212                                                          putConsoleString czNewLine                              ;new line
  5213                                                          putConsoleString czBaseMem                              ;base memory label
  5214                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5215                                                          putConsoleString czKB                                   ;Kilobytes
  5216                                                          putConsoleString czNewLine                              ;new line
  5217                                                          putConsoleString czExtendedMem                          ;extended memory label
  5218                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5219                                                          putConsoleString czKB                                   ;Kilobytes
  5220                                                          putConsoleString czNewLine                              ;new line
  5221                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5222                                                          placeCursor                                             ;set CRT cursor location
  5223                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5224                                                          putConsoleString czNewLine                              ;newline
  5225                                  
  5226                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5227                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5228                                                          call    ConTakeToken                                    ;handle console input
  5229                                                          mov     edx,wzConsoleToken                              ;token buffer
  5230                                                          call    ConDetermineCommand                             ;determine command number
  5231                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5232                                                          jb      .20                                             ;yes, branch
  5233                                  
  5234                                                          putConsoleString czUnknownCommand                       ;display error message
  5235                                  
  5236                                                          jmp     .10                                             ;next command
  5237                                  .20                     shl     eax,2                                           ;index into jump table
  5238                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5239                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5240                                                          call    eax                                             ;call command handler
  5241                                                          jmp     .10                                             ;next command
  5242                                  ;-----------------------------------------------------------------------------------------------------------------------
  5243                                  ;
  5244                                  ;       Routine:        ConInitializeData
  5245                                  ;
  5246                                  ;       Description:    This routine initializes console task variables.
  5247                                  ;
  5248                                  ;-----------------------------------------------------------------------------------------------------------------------
  5249                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5250                                                          push    edi                                             ;
  5251                                                          push    es                                              ;
  5252                                  ;
  5253                                  ;       Initialize console work areas.
  5254                                  ;
  5255                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5256                                                          pop     es                                              ;... into extra segment register
  5257                                                          mov     edi,ECONDATA                                    ;OS console data address
  5258                                                          xor     al,al                                           ;initialization value
  5259                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5260                                                          cld                                                     ;forward strings
  5261                                                          rep     stosb                                           ;initialize data
  5262                                  ;
  5263                                  ;       Initialize heap size
  5264                                  ;
  5265                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5266                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5267                                  ;
  5268                                  ;       Initialize MEMROOT structure
  5269                                  ;
  5270                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5271                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5272                                                          xor     ecx,ecx                                         ;zero register
  5273                                                          mov     cl,4                                            ;count
  5274                                                          rep     stosd                                           ;store first/last contig and free addrs
  5275                                                          xor     eax,eax                                         ;zero register
  5276                                                          stosd                                                   ;zero first task block
  5277                                                          stosd                                                   ;zero last task block
  5278                                  ;
  5279                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5280                                  ;
  5281                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5282                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5283                                                          stosd                                                   ;store signature
  5284                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5285                                                          stosd                                                   ;store block size
  5286                                                          xor     ecx,ecx                                         ;zero register
  5287                                                          mov     cl,6                                            ;count
  5288                                                          xor     eax,eax                                         ;zero register
  5289                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5290                                  ;
  5291                                  ;       Read memory sizes from ROM
  5292                                  ;
  5293                                                          getROMMemSize                                           ;get ROM memory size
  5294                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5295                                                          mov     ecx,eax                                         ;integer param
  5296                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5297                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5298                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5299                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5300                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5301                                                          mov     ecx,eax                                         ;integer param
  5302                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5303                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5304                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5305                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5306                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5307                                                          mov     ecx,eax                                         ;integer param
  5308                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5309                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5310                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5311                                  ;
  5312                                  ;       Restore and return.
  5313                                  ;
  5314                                                          pop     es                                              ;restore non-volatile regs
  5315                                                          pop     edi                                             ;
  5316                                                          pop     ecx                                             ;
  5317                                                          ret                                                     ;return
  5318                                  ;-----------------------------------------------------------------------------------------------------------------------
  5319                                  ;
  5320                                  ;       Routine:        ConTakeToken
  5321                                  ;
  5322                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5323                                  ;
  5324                                  ;       In:             DS:EDX  source buffer address
  5325                                  ;                       DS:EBX  target buffer address
  5326                                  ;
  5327                                  ;       Out:            DS:EDX  source buffer address
  5328                                  ;                       DS:EBX  target buffer address
  5329                                  ;
  5330                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5331                                  ;
  5332                                  ;-----------------------------------------------------------------------------------------------------------------------
  5333                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5334                                                          push    edi                                             ;
  5335                                                          push    es                                              ;
  5336                                                          push    ds                                              ;load data segment selector ...
  5337                                                          pop     es                                              ;... into extra segment reg
  5338                                                          mov     esi,edx                                         ;source buffer address
  5339                                                          mov     edi,ebx                                         ;target buffer address
  5340                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5341                                                          cld                                                     ;forward strings
  5342                                  .10                     lodsb                                                   ;load byte
  5343                                                          cmp     al,EASCIISPACE                                  ;space?
  5344                                                          je      .10                                             ;yes, continue
  5345                                                          test    al,al                                           ;end of line?
  5346                                                          jz      .40                                             ;yes, branch
  5347                                  .20                     stosb                                                   ;store byte
  5348                                                          lodsb                                                   ;load byte
  5349                                                          test    al,al                                           ;end of line?
  5350                                                          jz      .40                                             ;no, continue
  5351                                                          cmp     al,EASCIISPACE                                  ;space?
  5352                                                          jne     .20                                             ;no, continue
  5353                                  .30                     lodsb                                                   ;load byte
  5354                                                          cmp     al,EASCIISPACE                                  ;space?
  5355                                                          je      .30                                             ;yes, continue
  5356                                                          dec     esi                                             ;pre-position
  5357                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5358                                                          mov     edi,edx                                         ;source buffer address
  5359                                  .50                     lodsb                                                   ;remaining byte
  5360                                                          stosb                                                   ;move to front of buffer
  5361                                                          test    al,al                                           ;end of line?
  5362                                                          jnz     .50                                             ;no, continue
  5363                                                          pop     es                                              ;restore non-volatile regs
  5364                                                          pop     edi                                             ;
  5365                                                          pop     esi                                             ;
  5366                                                          ret                                                     ;return
  5367                                  ;-----------------------------------------------------------------------------------------------------------------------
  5368                                  ;
  5369                                  ;       Routine:        ConDetermineCommand
  5370                                  ;
  5371                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5372                                  ;
  5373                                  ;       input:          DS:EDX  command address
  5374                                  ;
  5375                                  ;       output:         EAX     >=0     = command nbr
  5376                                  ;                               0       = unknown command
  5377                                  ;
  5378                                  ;-----------------------------------------------------------------------------------------------------------------------
  5379                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5380                                                          push    ecx                                             ;
  5381                                                          push    esi                                             ;
  5382                                                          push    edi                                             ;
  5383                                  
  5384                                                          upperCaseString                                         ;upper-case string at EDX
  5385                                  
  5386                                                          mov     esi,tConCmdTbl                                  ;commands table
  5387                                                          xor     edi,edi                                         ;intialize command number
  5388                                                          cld                                                     ;forward strings
  5389                                  .10                     lodsb                                                   ;command length
  5390                                                          movzx   ecx,al                                          ;command length
  5391                                                          jecxz   .20                                             ;branch if end of table
  5392                                                          mov     ebx,esi                                         ;table entry address
  5393                                                          add     esi,ecx                                         ;next table entry address
  5394                                  
  5395                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5396                                  
  5397                                                          jecxz   .20                                             ;branch if equal
  5398                                                          inc     edi                                             ;increment command nbr
  5399                                                          jmp     .10                                             ;repeat
  5400                                  .20                     mov     eax,edi                                         ;command number
  5401                                                          pop     edi                                             ;restore non-volatile regs
  5402                                                          pop     esi                                             ;
  5403                                                          pop     ecx                                             ;
  5404                                                          pop     ebx                                             ;
  5405                                                          ret                                                     ;return
  5406                                  ;-----------------------------------------------------------------------------------------------------------------------
  5407                                  ;
  5408                                  ;       Routine:        ConClear
  5409                                  ;
  5410                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5411                                  ;
  5412                                  ;-----------------------------------------------------------------------------------------------------------------------
  5413                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5414                                                          ret                                                     ;return
  5415                                  ;-----------------------------------------------------------------------------------------------------------------------
  5416                                  ;
  5417                                  ;       Routine:        ConDate
  5418                                  ;
  5419                                  ;       Description:    This routine handles the DATE command.
  5420                                  ;
  5421                                  ;-----------------------------------------------------------------------------------------------------------------------
  5422                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5423                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5424                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5425                                                          putConsoleString  czNewLine                             ;write newline to console
  5426                                                          ret                                                     ;return
  5427                                  ;-----------------------------------------------------------------------------------------------------------------------
  5428                                  ;
  5429                                  ;       Routine:        ConDay
  5430                                  ;
  5431                                  ;       Description:    This routine handles the DAY command.
  5432                                  ;
  5433                                  ;-----------------------------------------------------------------------------------------------------------------------
  5434                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5435                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5436                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5437                                                          putConsoleString  czNewLine                             ;write newline to console
  5438                                                          ret                                                     ;return
  5439                                  ;-----------------------------------------------------------------------------------------------------------------------
  5440                                  ;
  5441                                  ;       Routine:        ConExit
  5442                                  ;
  5443                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5444                                  ;
  5445                                  ;-----------------------------------------------------------------------------------------------------------------------
  5446                                  ConExit                 resetSystem                                             ;issue system reset
  5447                                                          ret                                                     ;return
  5448                                  ;-----------------------------------------------------------------------------------------------------------------------
  5449                                  ;
  5450                                  ;       Routine:        ConFree
  5451                                  ;
  5452                                  ;       Description:    This routine handles the FREE command.
  5453                                  ;
  5454                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5455                                  ;
  5456                                  ;-----------------------------------------------------------------------------------------------------------------------
  5457                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5458                                                          push    ecx                                             ;
  5459                                                          push    esi                                             ;
  5460                                                          push    edi                                             ;
  5461                                  ;
  5462                                  ;       Get address parameter
  5463                                  ;
  5464                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5465                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5466                                                          call    ConTakeToken                                    ;take first param as token
  5467                                  ;
  5468                                  ;       Convert input parameter from hexadecimal string to binary
  5469                                  ;
  5470                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5471                                                          je      .10                                             ;no, branch
  5472                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5473                                  
  5474                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5475                                  
  5476                                                          test    eax,eax                                         ;valid parameter?
  5477                                                          jz      .10                                             ;no, branch
  5478                                  ;
  5479                                  ;       Free memory block
  5480                                  ;
  5481                                                          freeMemory eax                                          ;free memory
  5482                                  
  5483                                                          cmp     eax,-1                                          ;memory freed?
  5484                                                          je      .10                                             ;no, branch
  5485                                  ;
  5486                                  ;       Indicate memory freed
  5487                                  ;
  5488                                                          putConsoleString czOK                                   ;indicate success
  5489                                  ;
  5490                                  ;       Restore and return
  5491                                  ;
  5492                                  .10                     pop     edi                                             ;restore non-volatile regs
  5493                                                          pop     esi                                             ;
  5494                                                          pop     ecx                                             ;
  5495                                                          pop     ebx                                             ;
  5496                                                          ret                                                     ;return
  5497                                  ;-----------------------------------------------------------------------------------------------------------------------
  5498                                  ;
  5499                                  ;       Routine:        ConHour
  5500                                  ;
  5501                                  ;       Description:    This routine Handles the HOUR command.
  5502                                  ;
  5503                                  ;-----------------------------------------------------------------------------------------------------------------------
  5504                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5505                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5506                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5507                                                          putConsoleString  czNewLine                             ;write newline to console
  5508                                                          ret                                                     ;return
  5509                                  ;-----------------------------------------------------------------------------------------------------------------------
  5510                                  ;
  5511                                  ;       Routine:        ConInt6
  5512                                  ;
  5513                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5514                                  ;
  5515                                  ;-----------------------------------------------------------------------------------------------------------------------
  5516                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5517                                                          ret                                                     ;return (not executed)
  5518                                  ;-----------------------------------------------------------------------------------------------------------------------
  5519                                  ;
  5520                                  ;       Routine:        ConMalloc
  5521                                  ;
  5522                                  ;       Description:    This routine handles the MALLOC command.
  5523                                  ;
  5524                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5525                                  ;
  5526                                  ;-----------------------------------------------------------------------------------------------------------------------
  5527                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5528                                                          push    ecx                                             ;
  5529                                                          push    esi                                             ;
  5530                                                          push    edi                                             ;
  5531                                  ;
  5532                                  ;       Get size parameter
  5533                                  ;
  5534                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5535                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5536                                                          call    ConTakeToken                                    ;take first param as token
  5537                                  ;
  5538                                  ;       Convert input parameter from decimal string to binary
  5539                                  ;
  5540                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5541                                                          je      .10                                             ;no, branch
  5542                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5543                                  
  5544                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5545                                  
  5546                                                          test    eax,eax                                         ;valid parameter?
  5547                                                          jz      .10                                             ;no, branch
  5548                                  ;
  5549                                  ;       Allocate memory block
  5550                                  ;
  5551                                                          allocateMemory eax                                      ;allocate memory
  5552                                  
  5553                                                          test    eax,eax                                         ;memory allocated?
  5554                                                          jz      .10                                             ;no, branch
  5555                                  ;
  5556                                  ;       Report allocated memory block address
  5557                                  ;
  5558                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5559                                                          mov     ecx,eax                                         ;memory address
  5560                                  
  5561                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5562                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5563                                                          putConsoleString czNewLine                              ;display new line
  5564                                  
  5565                                  .10                     pop     edi                                             ;restore non-volatile regs
  5566                                                          pop     esi                                             ;
  5567                                                          pop     ecx                                             ;
  5568                                                          pop     ebx                                             ;
  5569                                                          ret                                                     ;return
  5570                                  ;-----------------------------------------------------------------------------------------------------------------------
  5571                                  ;
  5572                                  ;       Routine:        ConMem
  5573                                  ;
  5574                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5575                                  ;
  5576                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5577                                  ;
  5578                                  ;-----------------------------------------------------------------------------------------------------------------------
  5579                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5580                                                          push    esi                                             ;
  5581                                                          push    edi                                             ;
  5582                                  ;
  5583                                  ;       Update the source address if a parameter is given.
  5584                                  ;
  5585                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5586                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5587                                                          call    ConTakeToken                                    ;take first param as token
  5588                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5589                                                          je      .10                                             ;no, branch
  5590                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5591                                  
  5592                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5593                                  
  5594                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5595                                  ;
  5596                                  ;       Setup source address and row count.
  5597                                  ;
  5598                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5599                                                          xor     ecx,ecx                                         ;zero register
  5600                                                          mov     cl,16                                           ;row count
  5601                                  ;
  5602                                  ;       Start the row with the source address in hexadecimal.
  5603                                  ;
  5604                                  .20                     push    ecx                                             ;save remaining rows
  5605                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5606                                                          mov     edx,edi                                         ;output buffer address
  5607                                                          mov     ecx,esi                                         ;console memory address
  5608                                  
  5609                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5610                                  
  5611                                                          add     edi,8                                           ;end of memory addr hexnum
  5612                                                          mov     al,' '                                          ;ascii space
  5613                                                          stosb                                                   ;store delimiter
  5614                                  ;
  5615                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5616                                  ;
  5617                                                          xor     ecx,ecx                                         ;zero register
  5618                                                          mov     cl,16                                           ;loop count
  5619                                  .30                     push    ecx                                             ;save loop count
  5620                                                          lodsb                                                   ;memory byte
  5621                                                          mov     ah,al                                           ;memory byte
  5622                                                          shr     al,4                                            ;high-order in bits 3-0
  5623                                                          or      al,30h                                          ;apply ascii numeric zone
  5624                                                          cmp     al,3ah                                          ;numeric range?
  5625                                                          jb      .40                                             ;yes, skip ahead
  5626                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5627                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5628                                                          mov     al,ah                                           ;low-order in bits 3-0
  5629                                                          and     al,0fh                                          ;mask out high-order bits
  5630                                                          or      al,30h                                          ;apply ascii numeric zone
  5631                                                          cmp     al,3ah                                          ;numeric range?
  5632                                                          jb      .50                                             ;yes, skip ahead
  5633                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5634                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5635                                                          mov     al,' '                                          ;ascii space
  5636                                                          stosb                                                   ;store ascii space delimiter
  5637                                                          pop     ecx                                             ;loop count
  5638                                                          loop    .30                                             ;next
  5639                                  ;
  5640                                  ;       Output printable ASCII character section for the row.
  5641                                  ;
  5642                                                          sub     esi,16                                          ;reset source pointer
  5643                                                          mov     cl,16                                           ;loop count
  5644                                  .60                     lodsb                                                   ;source byte
  5645                                                          cmp     al,32                                           ;printable? (low-range test)
  5646                                                          jb      .70                                             ;no, skip ahead
  5647                                                          cmp     al,128                                          ;printable? (high-range test)
  5648                                                          jb      .80                                             ;yes, skip ahead
  5649                                  .70                     mov     al,' '                                          ;display space instead of printable
  5650                                  .80                     stosb                                                   ;store printable ascii byte
  5651                                                          loop    .60                                             ;next source byte
  5652                                                          xor     al,al                                           ;nul-terminator
  5653                                                          stosb                                                   ;terminate output line
  5654                                  ;
  5655                                  ;       Display constructed output buffer and newline.
  5656                                  ;
  5657                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5658                                                          putConsoleString czNewLine                              ;display new line
  5659                                  ;
  5660                                  ;       Repeat until all lines displayed and preserve source address.
  5661                                  ;
  5662                                                          pop     ecx                                             ;remaining rows
  5663                                                          loop    .20                                             ;next row
  5664                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5665                                                          pop     edi                                             ;restore regs
  5666                                                          pop     esi                                             ;
  5667                                                          pop     ebx                                             ;
  5668                                                          ret                                                     ;return
  5669                                  ;-----------------------------------------------------------------------------------------------------------------------
  5670                                  ;
  5671                                  ;       Routine:        ConMinute
  5672                                  ;
  5673                                  ;       Description:    This routine Handles the MINUTE command.
  5674                                  ;
  5675                                  ;-----------------------------------------------------------------------------------------------------------------------
  5676                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5677                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5678                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5679                                                          putConsoleString  czNewLine                             ;write newline to console
  5680                                                          ret                                                     ;return
  5681                                  ;-----------------------------------------------------------------------------------------------------------------------
  5682                                  ;
  5683                                  ;       Routine:        ConMonth
  5684                                  ;
  5685                                  ;       Description:    This routine Handles the MONTH command.
  5686                                  ;
  5687                                  ;-----------------------------------------------------------------------------------------------------------------------
  5688                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5689                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5690                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5691                                                          putConsoleString  czNewLine                             ;write newline to console
  5692                                                          ret                                                     ;return
  5693                                  ;-----------------------------------------------------------------------------------------------------------------------
  5694                                  ;
  5695                                  ;       Routine:        ConMonthName
  5696                                  ;
  5697                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5698                                  ;
  5699                                  ;-----------------------------------------------------------------------------------------------------------------------
  5700                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5701                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5702                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5703                                                          putConsoleString   czNewLine                            ;write newline to console
  5704                                                          ret                                                     ;return
  5705                                  ;-----------------------------------------------------------------------------------------------------------------------
  5706                                  ;
  5707                                  ;       Routine:        ConPCIProbe
  5708                                  ;
  5709                                  ;       Description:    This routine handles the PCIProbe command.
  5710                                  ;
  5711                                  ;-----------------------------------------------------------------------------------------------------------------------
  5712                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5713                                  ;
  5714                                  ;       Initialize variables.
  5715                                  ;       Construct PCI selector.
  5716                                  ;       Read PCI configuration data.
  5717                                  ;
  5718                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5719                                                          call    ConInitPCIContext                               ;initialize PCI struct
  5720                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5721                                                          call    ConReadPCIConfigData                            ;read the configuration data
  5722                                  ;
  5723                                  ;       Interpret PCI data value and display finding.
  5724                                  ;
  5725                                                          cmp     eax,0FFFFFFFFh                                  ;function defined?
  5726                                                          jne     .20                                             ;yes, branch
  5727                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  5728                                                          je      .40                                             ;yes, skip to next device
  5729                                                          jmp     short .30                                       ;no, skip to next function
  5730                                  ;
  5731                                  ;       Build PCI identifying string.
  5732                                  ;       Write identifying string to console.
  5733                                  ;       Determine the vendor and chip.
  5734                                  ;       Write vendor and chip to console.
  5735                                  ;
  5736                                  .20                     mov     edx,wzConsoleToken                              ;output buffer
  5737                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5738                                  
  5739                                                          putConsoleString wzConsoleToken                         ;display bus as decimal
  5740                                  
  5741                                                          call    ConInterpretPCIData                             ;update flags based on data
  5742                                  
  5743                                                          putConsoleString czSpace
  5744                                                          putConsoleString [wdConsolePCIVendorStr]
  5745                                                          putConsoleString czSpace
  5746                                                          putConsoleString [wdConsolePCIChipStr]
  5747                                                          putConsoleString czNewLine                              ;display new line
  5748                                  ;
  5749                                  ;       Next function.
  5750                                  ;
  5751                                  .30                     call    ConNextPCIFunction                              ;next function
  5752                                                          jb      .10                                             ;continue if no overflow
  5753                                  ;
  5754                                  ;       Next device, bus.
  5755                                  ;
  5756                                  .40                     call    ConNextPCIDevice                                ;next device, bus
  5757                                                          jb      .10                                             ;continue if no overflow
  5758                                  ;
  5759                                  ;       Restore and return.
  5760                                  ;
  5761                                                          pop     ebx                                             ;restore non-volatile regs
  5762                                                          ret                                                     ;return
  5763                                  ;-----------------------------------------------------------------------------------------------------------------------
  5764                                  ;
  5765                                  ;       Routine:        ConInitPCIContext
  5766                                  ;
  5767                                  ;       Description:    This routine zeros a PCI structure.
  5768                                  ;
  5769                                  ;       In:             DS:EBX  PCI structure address
  5770                                  ;
  5771                                  ;-----------------------------------------------------------------------------------------------------------------------
  5772                                  ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  5773                                                          push    edi                                             ;
  5774                                                          push    es                                              ;
  5775                                  ;
  5776                                  ;       Zero context.
  5777                                  ;
  5778                                                          push    ds                                              ;load data segment...
  5779                                                          pop     es                                              ;...into extra segment
  5780                                                          mov     edi,ebx                                         ;PCI structure offset
  5781                                                          mov     ecx,EPCILEN                                     ;PCI structure length
  5782                                                          xor     al,al                                           ;zero
  5783                                                          cld                                                     ;forward strings
  5784                                                          rep     stosb                                           ;zero structure members
  5785                                  ;
  5786                                  ;       Restore and return.
  5787                                  ;
  5788                                                          pop     es                                              ;restore non-volatile regs
  5789                                                          pop     edi                                             ;
  5790                                                          pop     ecx                                             ;
  5791                                                          ret                                                     ;return
  5792                                  ;-----------------------------------------------------------------------------------------------------------------------
  5793                                  ;
  5794                                  ;       Routine:        ConBuildPCISelector
  5795                                  ;
  5796                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  5797                                  ;
  5798                                  ;       In:             DS:EBX  PCI structure address
  5799                                  ;
  5800                                  ;       Out:            EAX     bus, device, function, register selector
  5801                                  ;
  5802                                  ;-----------------------------------------------------------------------------------------------------------------------
  5803                                  ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  5804                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  5805                                                          shl     dl,3                                            ;DL = dddd d000
  5806                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  5807                                                          and     al,007h                                         ;AL = 0000 0fff
  5808                                                          or      al,dl                                           ;AL = dddd dfff
  5809                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5810                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5811                                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  5812                                                          or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  5813                                                          mov     [ebx+PCI.selector],eax                          ;set selector
  5814                                                          ret                                                     ;return
  5815                                  ;-----------------------------------------------------------------------------------------------------------------------
  5816                                  ;
  5817                                  ;       Routine:        ConReadPCIConfigData
  5818                                  ;
  5819                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  5820                                  ;
  5821                                  ;       In:             DS:EBX  PCI structure address
  5822                                  ;
  5823                                  ;       Out:            EAX     config data
  5824                                  ;
  5825                                  ;-----------------------------------------------------------------------------------------------------------------------
  5826                                  ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  5827                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  5828                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5829                                                          out     dx,eax                                          ;select bus, device, function, reg
  5830                                                          mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  5831                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  5832                                                          in      eax,dx                                          ;read register
  5833                                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  5834                                                          ret                                                     ;return
  5835                                  ;-----------------------------------------------------------------------------------------------------------------------
  5836                                  ;
  5837                                  ;       Routine:        ConBuildPCIIdent
  5838                                  ;
  5839                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5840                                  ;                       Function code values.
  5841                                  ;
  5842                                  ;       In:             DS:EBX  PCI structure address
  5843                                  ;                       DS:EDX  output buffer address
  5844                                  ;
  5845                                  ;-----------------------------------------------------------------------------------------------------------------------
  5846                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5847                                                          push    es                                              ;
  5848                                  ;
  5849                                  ;       Establish addressability
  5850                                  ;
  5851                                                          push    ds                                              ;load data segment...
  5852                                                          pop     es                                              ;...into extra segment reg
  5853                                  ;
  5854                                  ;       Build identifier string (bus.device.function)
  5855                                  ;
  5856                                                          mov     edi,edx                                         ;output buffer address
  5857                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  5858                                                          xor     ah,ah                                           ;zero high-order dividend
  5859                                                          mov     cl,100                                          ;divisor (10^2)
  5860                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  5861                                                          or      al,30h                                          ;apply ASCII zone
  5862                                                          cld                                                     ;forward strings
  5863                                                          stosb                                                   ;store 100's digit
  5864                                                          mov     al,ah                                           ;bus MOD 100
  5865                                                          xor     ah,ah                                           ;zero high-order dividend
  5866                                                          mov     cl,10                                           ;divisor (10^1)
  5867                                                          div     cl                                              ;AL=10's, AH=1's
  5868                                                          or      ax,3030h                                        ;apply ASCII zone
  5869                                                          stosw                                                   ;store 10's and 1's
  5870                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5871                                                          stosb                                                   ;store delimiter
  5872                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  5873                                                          xor     ah,ah                                           ;zero high order dividend
  5874                                                          mov     cl,10                                           ;divisor (10^1)
  5875                                                          div     cl                                              ;AL=10's, AH=1's
  5876                                                          or      ax,3030h                                        ;apply ASCII zone
  5877                                                          stosw                                                   ;store 10's and 1's
  5878                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5879                                                          stosb                                                   ;store delimiter
  5880                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  5881                                                          or      al,30h                                          ;apply ASCII zone
  5882                                                          stosb                                                   ;store 1's
  5883                                                          xor     al,al                                           ;null terminator
  5884                                                          stosb                                                   ;store terminator
  5885                                  ;
  5886                                  ;       Restore and return.
  5887                                  ;
  5888                                                          pop     es                                              ;restore non-volatile regs
  5889                                                          pop     edi                                             ;
  5890                                                          ret                                                     ;return
  5891                                  ;-----------------------------------------------------------------------------------------------------------------------
  5892                                  ;
  5893                                  ;       Routine:        ConInterpretPCIData
  5894                                  ;
  5895                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  5896                                  ;
  5897                                  ;       In:             DS:EBX  PCI structure address
  5898                                  ;
  5899                                  ;-----------------------------------------------------------------------------------------------------------------------
  5900                                  ConInterpretPCIData     mov     eax,czApple
  5901                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  5902                                                          jne     .10                                             ;no, branch
  5903                                                          mov     edx,czUSBController
  5904                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  5905                                                          je      .40                                             ;yes, branch
  5906                                                          mov     edx,czOther                                     ;other
  5907                                                          jmp     .40                                             ;continue
  5908                                  .10                     mov     eax,czIntel                                     ;Intel
  5909                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  5910                                                          jne     .20                                             ;no, branch
  5911                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  5912                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  5913                                                          je      .40                                             ;yes, branch
  5914                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  5915                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  5916                                                          je      .40                                             ;yes, branch
  5917                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  5918                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  5919                                                          je      .40                                             ;yes, branch
  5920                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  5921                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  5922                                                          je      .40                                             ;yes, branch
  5923                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  5924                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  5925                                                          je      .40                                             ;yes, branch
  5926                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  5927                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  5928                                                          je      .40                                             ;yes, branch
  5929                                                          mov     edx,czOther                                     ;other
  5930                                                          jmp     .40                                             ;continue
  5931                                  .20                     mov     eax,czOracle                                    ;Oracle
  5932                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  5933                                                          jne     .30                                             ;no, branch
  5934                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  5935                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  5936                                                          je      .40                                             ;yes, branch
  5937                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  5938                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  5939                                                          je      .40                                             ;yes, branch
  5940                                                          mov     edx,czOther                                     ;other
  5941                                                          jmp     .40                                             ;continue
  5942                                  .30                     mov     eax,czOther                                     ;other
  5943                                                          mov     edx,czOther                                     ;other
  5944                                  .40                     mov     [wdConsolePCIVendorStr],eax                     ;save vendor string
  5945                                                          mov     [wdConsolePCIChipStr],edx                       ;save chip string
  5946                                                          ret                                                     ;return
  5947                                  ;-----------------------------------------------------------------------------------------------------------------------
  5948                                  ;
  5949                                  ;       Routine:        ConNextPCIFunction
  5950                                  ;
  5951                                  ;       Description:    This routine increments the function of the device.
  5952                                  ;
  5953                                  ;       In:             DS:EBX  PCI structure address
  5954                                  ;
  5955                                  ;       Out:            CY      0 = overflow
  5956                                  ;                               1 = no overflow, continue
  5957                                  ;
  5958                                  ;-----------------------------------------------------------------------------------------------------------------------
  5959                                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  5960                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  5961                                                          jb      .10                                             ;no, continue
  5962                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  5963                                  .10                     ret                                                     ;return
  5964                                  ;-----------------------------------------------------------------------------------------------------------------------
  5965                                  ;
  5966                                  ;       Routine:        ConNextPCIDevice
  5967                                  ;
  5968                                  ;       Description:    This routine increments the device of the PCI across buses.
  5969                                  ;
  5970                                  ;       In:             DS:EBX  PCI structure address
  5971                                  ;
  5972                                  ;       Out:            CY      0 = overflow
  5973                                  ;                               1 = no overflow, continue
  5974                                  ;
  5975                                  ;-----------------------------------------------------------------------------------------------------------------------
  5976                                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  5977                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  5978                                                          jb      .10                                             ;no, continue
  5979                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  5980                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  5981                                                          cmp     byte [ebx+PCI.bus],32                           ;at limit?
  5982                                                          jb      .10                                             ;no, continue
  5983                                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  5984                                  .10                     ret                                                     ;return
  5985                                  ;-----------------------------------------------------------------------------------------------------------------------
  5986                                  ;
  5987                                  ;       Routine:        ConSecond
  5988                                  ;
  5989                                  ;       Description:    This routine Handles the SECOND command.
  5990                                  ;
  5991                                  ;-----------------------------------------------------------------------------------------------------------------------
  5992                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5993                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5994                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5995                                                          putConsoleString  czNewLine                             ;write newline to console
  5996                                                          ret                                                     ;return
  5997                                  ;-----------------------------------------------------------------------------------------------------------------------
  5998                                  ;
  5999                                  ;       Routine:        ConTime
  6000                                  ;
  6001                                  ;       Description:    This routine Handles the TIME command.
  6002                                  ;
  6003                                  ;-----------------------------------------------------------------------------------------------------------------------
  6004                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6005                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6006                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6007                                                          putConsoleString  czNewLine                             ;write newline to console
  6008                                                          ret                                                     ;return
  6009                                  ;-----------------------------------------------------------------------------------------------------------------------
  6010                                  ;
  6011                                  ;       Routine:        ConVersion
  6012                                  ;
  6013                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6014                                  ;
  6015                                  ;-----------------------------------------------------------------------------------------------------------------------
  6016                                  ConVersion              putConsoleString czTitle                                ;display version message
  6017                                                          ret                                                     ;return
  6018                                  ;-----------------------------------------------------------------------------------------------------------------------
  6019                                  ;
  6020                                  ;       Routine:        ConWeekday
  6021                                  ;
  6022                                  ;       Description:    This routine handles the WEEKDAY command.
  6023                                  ;
  6024                                  ;-----------------------------------------------------------------------------------------------------------------------
  6025                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6026                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6027                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6028                                                          putConsoleString  czNewLine                             ;write newline to console
  6029                                                          ret                                                     ;return
  6030                                  ;-----------------------------------------------------------------------------------------------------------------------
  6031                                  ;
  6032                                  ;       Routine:        ConWeekdayName
  6033                                  ;
  6034                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6035                                  ;
  6036                                  ;-----------------------------------------------------------------------------------------------------------------------
  6037                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6038                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6039                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6040                                                          putConsoleString     czNewLine                                  ;write newline to console
  6041                                                          ret                                                             ;return
  6042                                  ;-----------------------------------------------------------------------------------------------------------------------
  6043                                  ;
  6044                                  ;       Routine:        ConYear
  6045                                  ;
  6046                                  ;       Description:    This routine Handles the YEAR command.
  6047                                  ;
  6048                                  ;-----------------------------------------------------------------------------------------------------------------------
  6049                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6050                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6051                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6052                                                          putConsoleString  czNewLine                             ;write newline to console
  6053                                                          ret                                                     ;return
  6054                                  ;-----------------------------------------------------------------------------------------------------------------------
  6055                                  ;
  6056                                  ;       Routine:        ConYearIsLeap
  6057                                  ;
  6058                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6059                                  ;
  6060                                  ;-----------------------------------------------------------------------------------------------------------------------
  6061                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6062                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6063                                  
  6064                                                          jecxz   .10                                             ;branch if not leap
  6065                                  
  6066                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6067                                  
  6068                                                          jmp     .20                                             ;continue
  6069                                  
  6070                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6071                                  .20                     ret                                                     ;return
  6072                                  ;-----------------------------------------------------------------------------------------------------------------------
  6073                                  ;
  6074                                  ;       Tables
  6075                                  ;
  6076                                  ;-----------------------------------------------------------------------------------------------------------------------
  6077                                                                                                                  ;---------------------------------------
  6078                                                                                                                  ;  Command Jump Table
  6079                                                                                                                  ;---------------------------------------
  6080                                  tConJmpTbl              equ     $                                               ;command jump table
  6081                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6082                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6083                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6084                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6085                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6086                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6087                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6088                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6089                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6090                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6091                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6092                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6093                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6094                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6095                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6096                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6097                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6098                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6099                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6100                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6101                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6102                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6103                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6104                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6105                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6106                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6107                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6108                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6109                                                                                                                  ;---------------------------------------
  6110                                                                                                                  ;  Command Name Table
  6111                                                                                                                  ;---------------------------------------
  6112                                  tConCmdTbl              equ     $                                               ;command name table
  6113                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6114                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6115                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6116                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6117                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6118                                                          db      8,"VERSION",0                                   ;version command
  6119                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6120                                                          db      7,"MALLOC",0                                    ;malloc command
  6121                                                          db      7,"MEMORY",0                                    ;memory command
  6122                                                          db      7,"MINUTE",0                                    ;minute command
  6123                                                          db      7,"SECOND",0                                    ;second command
  6124                                                          db      6,"CLEAR",0                                     ;clear command
  6125                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6126                                                          db      6,"MONTH",0                                     ;month command
  6127                                                          db      5,"DATE",0                                      ;date command
  6128                                                          db      5,"EXIT",0                                      ;exit command
  6129                                                          db      5,"FREE",0                                      ;free command
  6130                                                          db      5,"HOUR",0                                      ;hour command
  6131                                                          db      5,"INT6",0                                      ;int6 command
  6132                                                          db      5,"QUIT",0                                      ;quit command
  6133                                                          db      5,"TIME",0                                      ;time command
  6134                                                          db      5,"YEAR",0                                      ;year command
  6135                                                          db      4,"CLS",0                                       ;cls command
  6136                                                          db      4,"DAY",0                                       ;day command
  6137                                                          db      4,"MEM",0                                       ;mem command
  6138                                                          db      4,"VER",0                                       ;ver command
  6139                                                          db      0                                               ;end of table
  6140                                  ;-----------------------------------------------------------------------------------------------------------------------
  6141                                  ;
  6142                                  ;       Constants
  6143                                  ;
  6144                                  ;-----------------------------------------------------------------------------------------------------------------------
  6145                                  czApple                 db      "Apple",0                                       ;vendor name string
  6146                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6147                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6148                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6149                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6150                                  czKB                    db      "KB",0                                          ;Kilobytes
  6151                                  czNewLine               db      13,10,0                                         ;new line string
  6152                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6153                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6154                                  czOther                 db      "Other",0                                       ;default name string
  6155                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6156                                  czPeriod                db      ".",0                                           ;period delimiter
  6157                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6158                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6159                                  czPrompt                db      ":",0                                           ;prompt string
  6160                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6161                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6162                                  czSpace                 db      " ",0                                           ;space delimiter
  6163                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6164                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6165                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6166                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6167                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6168                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6169                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6170                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6171                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6172                                  %endif
  6173                                  %ifdef BUILDDISK
  6174                                  ;-----------------------------------------------------------------------------------------------------------------------
  6175                                  ;
  6176                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6177                                  ;
  6178                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6179                                  ;
  6180                                  ;-----------------------------------------------------------------------------------------------------------------------
  6181                                  section                 unused                                                  ;unused disk space
  6182                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6183                                  %endif
  6184                                  ;=======================================================================================================================
  6185                                  ;
  6186                                  ;       End of Program Code
  6187                                  ;
  6188                                  ;=======================================================================================================================
