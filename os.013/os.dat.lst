     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.013
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;                       system for PCI expansion BIOS.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMEM...         Memory Management values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   295                                  ;
   296                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   297                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   298                                  ;
   299                                  ;       0.......        Segment is not present in memory (triggers int 11)
   300                                  ;       1.......        Segment is present in memory
   301                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   302                                  ;       ...0....        Segment is a system segment
   303                                  ;       ...00010                Local Descriptor Table
   304                                  ;       ...00101                Task Gate
   305                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   306                                  ;       ...01100                Call Gate (386)
   307                                  ;       ...01110                Interrupt Gate (386)
   308                                  ;       ...01111                Trap Gate (386)
   309                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   310                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   311                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   315                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   316                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   317                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   318                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   319                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   320                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   321                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       Firmware-Defined Values
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   330                                  ;
   331                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   332                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   336                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   337                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   338                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   339                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   340                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   341                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   342                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   343                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   344                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   345                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Standards-Based Values
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       ASCII                                                                   EASCII...
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   357                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   358                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   359                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   360                                  EASCIISPACE             equ     020h                                            ;space
   361                                  EASCIIPERIOD            equ     02Eh                                            ;period
   362                                  EASCIIUPPERA            equ     041h                                            ;'A'
   363                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   364                                  EASCIILOWERA            equ     061h                                            ;'a'
   365                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   366                                  EASCIITILDE             equ     07Eh                                            ;'~'
   367                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   368                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   369                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   370                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   371                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   372                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   373                                  EASCIICASE              equ     00100000b                                       ;case bit
   374                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ;
   377                                  ;       PCI                                                                     EPCI...
   378                                  ;
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EPCIVENDORAPPLE         equ     106Bh                                           ;Apple
   381                                  EPCIVENDORINTEL         equ     8086h                                           ;Intel
   382                                  EPCIVENDORORACLE        equ     80EEh                                           ;Oracle
   383                                  EPCIAPPLEUSB            equ     003Fh                                           ;USB Controller
   384                                  EPCIINTELPRO1000MT      equ     100Fh                                           ;Pro/1000 MT Ethernet Adapter
   385                                  EPCIINTELPCIMEM         equ     1237h                                           ;PCI & Memory
   386                                  EPCIINTELAD1881         equ     2415h                                           ;Aureal AD1881 SOUNDMAX
   387                                  EPCIINTELPIIX3          equ     7000h                                           ;PIIX3 PCI-to-ISA Bridge (Triton II)
   388                                  EPCIINTEL82371AB        equ     7111h                                           ;82371AB/EB PCI Bus Master IDE Cntrlr
   389                                  EPCIINTELPIIX4          equ     7113h                                           ;PIIX4/4E/4M Power Mgmt Cntrlr
   390                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   391                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  ;
   394                                  ;       Operating System Values
   395                                  ;
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;
   399                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   400                                  ;
   401                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   402                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   403                                  ;
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   406                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   407                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   408                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   409                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   410                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   411                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ;       Console Constants                                                       ECON...
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ECONCOLS                equ     80                                              ;columns per row
   416                                  ECONROWS                equ     24                                              ;console rows
   417                                  ECONOIAROW              equ     24                                              ;operator information area row
   418                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   419                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   420                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   421                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   422                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   427                                  EGDTCGA                 equ     020h                                            ;cga video selector
   428                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   429                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   430                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   431                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   432                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   433                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Keyboard Flags                                                          EKEYF...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   438                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   439                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   440                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   441                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   442                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   443                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   444                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   445                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   446                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   447                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;       Kernel Constants                                                        EKRN...
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   452                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   453                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   454                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   455                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   456                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  ;       Hardware Flags
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ;       Memory Management Constants                                             EMEM...
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   469                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   470                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   471                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;       Message Identifiers                                                     EMSG...
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   476                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   477                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   478                                  ;=======================================================================================================================
   479                                  ;
   480                                  ;       Structures
   481                                  ;
   482                                  ;=======================================================================================================================
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;       DATETIME
   486                                  ;
   487                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   488                                  ;
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  struc                   DATETIME
   491 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   492 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   493 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   494 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   495 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   496 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   497 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   498 00000007 <res 00000001>          .century                resb    1                                               ;century
   499                                  EDATETIMELEN            equ     ($-.second)
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;       MEMBLOCK
   504                                  ;
   505                                  ;       The MEMBLOCK structure defines a memory block.
   506                                  ;
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  struc                   MEMBLOCK
   509 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   510 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   511 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   512 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   513 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   514 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   515 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   516 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   517                                  EMEMBLOCKLEN            equ     ($-.signature)
   518                                  endstruc
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  ;
   521                                  ;       MEMROOT
   522                                  ;
   523                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   524                                  ;
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  struc                   MEMROOT
   527 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   528 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   529 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   530 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   531 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   532 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   533                                  EMEMROOTLEN             equ     ($-.firstcontig)
   534                                  endstruc
   535                                  ;-----------------------------------------------------------------------------------------------------------------------
   536                                  ;
   537                                  ;       MQUEUE
   538                                  ;
   539                                  ;       The MQUEUE structure maps memory used for a message queue.
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  struc                   MQUEUE
   543 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   544 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   545 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   546                                  endstruc
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;       OSDATA
   550                                  ;
   551                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   552                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   553                                  ;
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555                                  struc                   OSDATA
   556 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   557 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   558 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   559 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   560 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   561 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   562 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   563 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   564 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   565 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   566 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   567 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   568 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   569 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   570 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   571 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   572 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   573 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   574 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   575 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   576 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   577 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   578 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   579 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   580 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   581 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   582 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   583 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   584 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   585 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   586 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   587 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   588 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   589 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   590 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   591 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   592 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   593 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   594 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   595 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   596 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   597 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   598 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   599 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   600 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   601 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   602 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   603 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   604 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   605 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   606 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   607 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   608 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   609 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   610 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   611 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   612 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   613 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   614 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   615 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   616 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   617 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   618 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   619 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   620 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   621 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   622 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   623 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   624 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   625 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   626 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   627 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   628 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   629 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   630 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   631 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   632 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   633 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   634 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   635 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   636 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   637 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   638 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   639 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   640 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   641 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   642 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   643 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   644 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   645 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   646 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   647 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   648 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   649 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   650 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   651 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   652 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   653 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   654 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   655 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   656 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   657                                  ;-----------------------------------------------------------------------------------------------------------------------
   658                                  ;
   659                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   660                                  ;
   661                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   662                                  ;
   663                                  ;-----------------------------------------------------------------------------------------------------------------------
   664                                  ECONDATA                equ     ($)
   665 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   666 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   667 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   668 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   669 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   670 00000814 <res 00000004>          wdConsolePCISelector    resd    1                                               ;PCI selector (bbbbbbbb dddddfff)
   671                                  wdConsolePCIData        equ     $                                               ;PCI register data value
   672 00000818 <res 00000002>          wwConsolePCIVendor      resw    1                                               ;PCI data vendor
   673 0000081A <res 00000002>          wwConsolePCIChip        resw    1                                               ;PCI data chip
   674 0000081C <res 00000004>          wdConsolePCIVendorStr   resd    1                                               ;PCI vendor name string addr
   675 00000820 <res 00000004>          wdConsolePCIChipStr     resd    1                                               ;PCI device name string addr
   676 00000824 <res 00000004>          wdConsoleEthernetDevice resd    1                                               ;PCI ethernet adapter selector
   677 00000828 <res 00000004>          wdConsoleEthernetMem    resd    1                                               ;PCI ethernet memory mapped i/o address
   678 0000082C <res 00000004>          wdConsoleEthernetPort   resd    1                                               ;PCI ethernet i/o port
   679 00000830 <res 00000004>          wdConsoleEthernetCtrl   resd    1                                               ;PCI ethernet control register value
   680 00000834 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   681 00000835 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   682 00000836 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   683 00000837 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   684 00000838 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   685 00000839 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   686 0000083A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   687 0000083B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   688 0000083C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   689 0000083D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   690 0000083E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   691 0000083F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   692 00000840 <res 00000001>          wbConsolePCIBus         resb    1                                               ;PCI bus
   693 00000841 <res 00000001>          wbConsolePCIDevice      resb    1                                               ;PCI device
   694 00000842 <res 00000001>          wbConsolePCIFunction    resb    1                                               ;PCI function
   695 00000843 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   696 00000844 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   697 00000894 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   698 000008E4 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   699 00000934 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   700 0000093F <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   701 0000094A <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   702 00000955 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   703 0000096D <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   704                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   705                                  ;-----------------------------------------------------------------------------------------------------------------------
   706                                  ;
   707                                  ;       End of OS Variables
   708                                  ;
   709                                  ;-----------------------------------------------------------------------------------------------------------------------
   710                                  endstruc
   711                                  ;-----------------------------------------------------------------------------------------------------------------------
   712                                  ;
   713                                  ;       Macros
   714                                  ;
   715                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   716                                  ;
   717                                  ;-----------------------------------------------------------------------------------------------------------------------
   718                                  %macro                  mint    1
   719                                  _%1                     equ     ($-$$) / EX86DESCLEN
   720                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   721                                  %endmacro
   722                                  %macro                  mtrap   1
   723                                  _%1                     equ     ($-$$) / EX86DESCLEN
   724                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   725                                  %endmacro
   726                                  %macro                  menter  1
   727                                  ?%1                     equ     ($-$$)
   728                                  %endmacro
   729                                  %macro                  tsvce   1
   730                                  e%1                     equ     ($-tsvc)/4
   731                                                          dd      %1
   732                                  %endmacro
   733                                  %ifdef BUILDBOOT
   734                                  ;=======================================================================================================================
   735                                  ;
   736                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   737                                  ;
   738                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   739                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   740                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   741                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   742                                  ;
   743                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   744                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   745                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   746                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   747                                  ;       immediately followed by a disk parameter table.
   748                                  ;
   749                                  ;=======================================================================================================================
   750                                                          cpu     8086                                            ;assume minimal CPU
   751                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   752                                                          bits    16                                              ;16-bit code at power-up
   753                                  %ifdef BUILDPREP
   754                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   755                                  %else
   756 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   757                                  %endif
   758                                  ;-----------------------------------------------------------------------------------------------------------------------
   759                                  ;
   760                                  ;       Disk Parameter Table
   761                                  ;
   762                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   763                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   764                                  ;
   765                                  ;-----------------------------------------------------------------------------------------------------------------------
   766 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   767 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   768 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   769 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   770 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   771 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   772 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   773 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   774 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   775                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   776 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   777 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   778 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   779                                  ;
   780                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   781                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   782                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   783                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   784                                  ;       given several possible starting values for CS:IP.
   785                                  ;
   786                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   787 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   788                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   789 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   790 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   791 00000025 B104                                            mov     cl,4                                            ;shift count
   792 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   793 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   794 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   795                                  ;
   796                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   797                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   798                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   799                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   800                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   801                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   802                                  ;
   803 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   804 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   805 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   806 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   807 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   808                                  ;
   809                                  ;       Our boot addressability is now set up according to the following diagram.
   810                                  ;
   811                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   812                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   813                                  ;                               |  256 = 100h bytes                             |
   814                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   815                                  ;                               |  Boot Sector (vstart=0100h)                   |
   816                                  ;                               |  1 sector = 512 = 200h bytes                  |
   817                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   818                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   819                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   820                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   821                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   822                                  ;                               |  2 sectors = 1024 = 400h bytes
   823                                  ;                       009400  +-----------------------------------------------+ DS:1900
   824                                  ;
   825                                  ;       On entry, DL indicates the drive being booted from.
   826                                  ;
   827 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   828                                  ;
   829                                  ;       Compute directory i/o buffer address.
   830                                  ;
   831 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   832 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   833 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   834 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   835                                  ;
   836                                  ;       Compute segment where os.com will be loaded.
   837                                  ;
   838 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   839 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   840 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   841 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   842                                  ;
   843                                  ;       Set the video mode to 80 column, 25 row, text.
   844                                  ;
   845 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   846 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   847                                  ;
   848                                  ;       Write a message to the console so we know we have our addressability established.
   849                                  ;
   850 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   851 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   852                                  ;
   853                                  ;       Initialize the number of directory sectors to search.
   854                                  ;
   855 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   856 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   857                                  ;
   858                                  ;       Compute number of directory sectors and initialize overhead count.
   859                                  ;
   860 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   861 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   862 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   863 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   864                                  ;
   865                                  ;       Compute directory entries per sector.
   866                                  ;
   867 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   868 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   869 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   870                                  ;
   871                                  ;       Compute first logical directory sector and update overhead count.
   872                                  ;
   873 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   874 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   875 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   876 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   877 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   878 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   879                                  ;
   880                                  ;       Read directory sector.
   881                                  ;
   882 0000008E B001                    .30                     mov     al,1                                            ;sector count
   883 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   884 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   885 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   886                                  ;
   887                                  ;       Setup variables to search this directory sector.
   888                                  ;
   889 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   890 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   891 000000A1 7603                                            jna     .40                                             ;no, continue
   892 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   893 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   894 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   895 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   896                                  ;
   897                                  ;       Loop through directory sectors searching for kernel program.
   898                                  ;
   899 000000B1 56                      .50                     push    si                                              ;save kernel name address
   900 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   901 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   902 000000B6 FC                                              cld                                                     ;forward strings
   903 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   904 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   905 000000BA 5E                                              pop     si                                              ;restore kernel name address
   906 000000BB 7418                                            je      .60                                             ;exit loop if found
   907 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   908 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   909 000000C2 75ED                                            jnz     .50                                             ;next entry
   910                                  ;
   911                                  ;       Repeat search if we are not at the end of the directory.
   912                                  ;
   913 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   914 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   915 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   916 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   917 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   918                                  ;
   919                                  ;       If we find the kernel program in the directory, read the FAT.
   920                                  ;
   921 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   922 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   923 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   924 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   925 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   926 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   927                                  ;
   928                                  ;       Get the starting cluster of the kernel program and target address.
   929                                  ;
   930 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   931 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   932                                  ;
   933                                  ;       Read each program cluster into RAM.
   934                                  ;
   935 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   936 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   937 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   938 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   939 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   940 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   941 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   942 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   943 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   944                                  ;
   945                                  ;       Update buffer pointer for next cluster.
   946                                  ;
   947 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   948 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   949 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   950 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   951 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   952                                  ;
   953                                  ;       Compute next cluster number.
   954                                  ;
   955 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   956 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   957 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   958 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   959 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   960 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   961 00000120 83E701                                          and     di,1                                            ;get low bit
   962 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   963 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   964 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   965                                  ;
   966                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   967                                  ;
   968 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   969 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   970 00000130 B104                                            mov     cl,4                                            ;shift count
   971 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   972 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   973 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   974 0000013A 75B2                                            jne     .70                                             ;no, continue
   975                                  ;
   976                                  ;       Transfer control to the operating system program.
   977                                  ;
   978 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   979 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   980 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   981                                  ;
   982                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   983                                  ;
   984 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   985 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   986 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   987 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   988 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   989 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   990 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   991 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   992 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   993 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   994                                  ;
   995                                  ;       Try maxtries times to read sector.
   996                                  ;
   997 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   998 00000160 53                      .10                     push    bx                                              ;save buffer address
   999 00000161 51                                              push    cx                                              ;save retry count
  1000 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1001 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1002 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1003 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1004 0000016F 59                                              pop     cx                                              ;restore retry count
  1005 00000170 5B                                              pop     bx                                              ;restore buffer address
  1006 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1007 00000173 E2EB                                            loop    .10                                             ;retry
  1008                                  ;
  1009                                  ;       Handle disk error: convert to ASCII and store in error string.
  1010                                  ;
  1011 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1012 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1013 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1014 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1015 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1016 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1017 00000183 7203                                            jb      .20                                             ;continue if numeral
  1018 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1019 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1020 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1021 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1022 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1023 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1024 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1025                                  ;
  1026                                  ;       Wait for a key press.
  1027                                  ;
  1028 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1029 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1030 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1031 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1032 0000019F F4                                              hlt                                                     ;wait for interrupt
  1033 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1034                                  ;
  1035                                  ;       Reset the system.
  1036                                  ;
  1037 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1038 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1039 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1040 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1041 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1042                                  ;
  1043                                  ;       Display text message.
  1044                                  ;
  1045 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1046 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1047 000001AC 84C0                                            test    al,al                                           ;end of string?
  1048 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1049 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1050 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1051 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1052 000001B6 C3                      BootReturn              ret                                                     ;return
  1053                                  ;-----------------------------------------------------------------------------------------------------------------------
  1054                                  ;
  1055                                  ;       Constants
  1056                                  ;
  1057                                  ;-----------------------------------------------------------------------------------------------------------------------
  1058 000001B7 90                                              align   2
  1059 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1060 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1060 000001C3 4F4D               
  1061 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1061 000001CE 530D0A00           
  1062 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1062 000001DB 7220               
  1063 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1064 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1064 000001E9 6700               
  1065                                  ;-----------------------------------------------------------------------------------------------------------------------
  1066                                  ;
  1067                                  ;       Work Areas
  1068                                  ;
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070 000001EB 90                                              align   2
  1071 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1072 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1073 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1074 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1075 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1076                                  wwReadCountCommand      equ     $                                               ;read count and command
  1077 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1078 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1079                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1080 000001F8 00                      wbDrive                 db      0                                               ;drive
  1081 000001F9 00                      wbHead                  db      0                                               ;head
  1082                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1083 000001FA 00                                              db      0                                               ;sector
  1084 000001FB 00                      wbTrack                 db      0                                               ;track
  1085 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1086 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1087                                  %endif
  1088                                  %ifdef BUILDPREP
  1089                                  ;=======================================================================================================================
  1090                                  ;
  1091                                  ;       Diskette Preparation Code
  1092                                  ;
  1093                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1094                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1095                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1096                                  ;
  1097                                  ;=======================================================================================================================
  1098                                  ;
  1099                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1100                                  ;
  1101                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1102                                                          call    BootPrint                                       ;display message
  1103                                  ;
  1104                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1105                                  ;
  1106                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1107                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1108                                                          jnz     .20                                             ;continue if key pressed
  1109                                                          sti                                                     ;enable interrupts
  1110                                                          hlt                                                     ;wait for interrupt
  1111                                                          jmp     .10                                             ;repeat
  1112                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1113                                                          je      .30                                             ;yes, branch
  1114                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1115                                                          jne     .10                                             ;no, repeat
  1116                                                          jmp     .120                                            ;yes, exit program
  1117                                  ;
  1118                                  ;       Display writing-sector message and patch the JMP instruction.
  1119                                  ;
  1120                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1121                                                          call    BootPrint                                       ;display message
  1122                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1123                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1124                                                          mov     [bx],ax                                         ;update the JMP instruction
  1125                                  ;
  1126                                  ;       Try to read the boot sector.
  1127                                  ;
  1128                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1129                                  .40                     push    cx                                              ;save remaining tries
  1130                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1131                                                          mov     dx,0                                            ;head zero, drive zero
  1132                                                          mov     cx,1                                            ;track zero, sector one
  1133                                                          mov     al,1                                            ;one sector
  1134                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1135                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1136                                                          pop     cx                                              ;restore remaining retries
  1137                                                          jnc     .50                                             ;skip ahead if successful
  1138                                                          loop    .40                                             ;try again
  1139                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1140                                                          jmp     .70                                             ;branch to error routine
  1141                                  ;
  1142                                  ;       Copy diskette parms from input buffer to output buffer.
  1143                                  ;
  1144                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1145                                                          add     si,11                                           ;skip over JMP and system ID
  1146                                                          mov     di,Boot                                         ;output buffer address
  1147                                                          add     di,11                                           ;skip over JMP and system ID
  1148                                                          mov     cx,19                                           ;length of diskette parameters
  1149                                                          cld                                                     ;forward string copies
  1150                                                          rep     movsb                                           ;copy diskette parameters
  1151                                  ;
  1152                                  ;       Try to write boot sector to diskette.
  1153                                  ;
  1154                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1155                                  .60                     push    cx                                              ;save remaining tries
  1156                                                          mov     bx,Boot                                         ;output buffer address
  1157                                                          mov     dx,0                                            ;head zero, drive zero
  1158                                                          mov     cx,1                                            ;track zero, sector one
  1159                                                          mov     al,1                                            ;one sector
  1160                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1161                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1162                                                          pop     cx                                              ;restore remaining retries
  1163                                                          jnc     .100                                            ;skip ahead if successful
  1164                                                          loop    .60                                             ;try again
  1165                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1166                                  ;
  1167                                  ;       Convert the error code to ASCII and display the error message.
  1168                                  ;
  1169                                  .70                     push    ax                                              ;save error code
  1170                                                          mov     al,ah                                           ;copy error code
  1171                                                          mov     ah,0                                            ;AX = error code
  1172                                                          mov     dl,10h                                          ;hexadecimal divisor
  1173                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1174                                                          or      ax,03030h                                       ;add ASCII zone digits
  1175                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1176                                                          jb      .80                                             ;yes, continue
  1177                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1178                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1179                                                          jb      .90                                             ;yes, continue
  1180                                                          add     al,7                                            ;no, make ASCII
  1181                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1182                                                          call    BootPrint                                       ;write error message
  1183                                                          pop     ax                                              ;restore error code
  1184                                  ;
  1185                                  ;       Display the completion message.
  1186                                  ;
  1187                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1188                                                          mov     al,ah                                           ;BIOS return code
  1189                                                          cmp     al,0                                            ;success?
  1190                                                          je      .110                                            ;yes, continue
  1191                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1192                                                          cmp     al,1                                            ;disk parameter error?
  1193                                                          je      .110                                            ;yes, continue
  1194                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1195                                                          cmp     al,2                                            ;address mark not found?
  1196                                                          je      .110                                            ;yes, continue
  1197                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1198                                                          cmp     al,3                                            ;protected disk?
  1199                                                          je      .110                                            ;yes, continue
  1200                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1201                                                          cmp     al,6                                            ;diskette removed?
  1202                                                          je      .110                                            ;yes, continue
  1203                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1204                                                          cmp     al,80H                                          ;drive timed out?
  1205                                                          je      .110                                            ;yes, continue
  1206                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1207                                  .110                    call    BootPrint                                       ;display result message
  1208                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1209                                                          int     021h                                            ;terminate DOS program
  1210                                                          ret                                                     ;return (should not execute)
  1211                                  ;-----------------------------------------------------------------------------------------------------------------------
  1212                                  ;
  1213                                  ;       Diskette Preparation Messages
  1214                                  ;
  1215                                  ;-----------------------------------------------------------------------------------------------------------------------
  1216                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1217                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1218                                                          db      13,10
  1219                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1220                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1221                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1222                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1223                                                          db      13,10,0
  1224                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1225                                                          db      13,10,0
  1226                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1227                                                          db      13,10,0
  1228                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1229                                                          db      13,10,0
  1230                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1231                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1232                                                          db      13,10,0
  1233                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1234                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1235                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1236                                                          db      13,10,"and retry."
  1237                                                          db      13,10,0
  1238                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1239                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1240                                                          db      13,10,"using another diskette."
  1241                                                          db      13,10,0
  1242                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1243                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1244                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1245                                                          db      13,10,0
  1246                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1247                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1248                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1249                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1250                                                          db      13,10,"is properly inserted in the diskette drive."
  1251                                                          db      13,10,0
  1252                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1253                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1254                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1255                                                          db      13,10,0
  1256                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1257                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1258                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1259                                                          db      13,10,0
  1260                                  wcPrepInBuf             equ     $
  1261                                  %endif
  1262                                  %ifdef BUILDDISK
  1263                                  ;=======================================================================================================================
  1264                                  ;
  1265                                  ;       File Allocation Tables
  1266                                  ;
  1267                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1268                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1269                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1270                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1271                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1272                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1273                                  ;       the last cluster in the chain.
  1274                                  ;
  1275                                  ;       Every three bytes encode two FAT entries as follows:
  1276                                  ;
  1277                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1278                                  ;
  1279                                  ;=======================================================================================================================
  1280                                  ;-----------------------------------------------------------------------------------------------------------------------
  1281                                  ;
  1282                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1283                                  ;
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                  section                 fat1                                                    ;first copy of FAT
  1286                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1287                                                          db      005h,060h,000h, 007h,080h,000h
  1288                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1289                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1290                                                          db      011h,020h,001h, 013h,040h,001h
  1291                                                          db      015h,060h,001h, 017h,080h,001h
  1292                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1293                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1294                                                          db      021h,020h,002h, 023h,040h,002h
  1295                                                          db      025h,060h,002h, 027h,080h,002h
  1296                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1297                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1298                                  ;-----------------------------------------------------------------------------------------------------------------------
  1299                                  ;
  1300                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1301                                  ;
  1302                                  ;-----------------------------------------------------------------------------------------------------------------------
  1303                                  section                 fat2                                                    ;second copy of FAT
  1304                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1305                                                          db      005h,060h,000h, 007h,080h,000h
  1306                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1307                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1308                                                          db      011h,020h,001h, 013h,040h,001h
  1309                                                          db      015h,060h,001h, 017h,080h,001h
  1310                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1311                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1312                                                          db      021h,020h,002h, 023h,040h,002h
  1313                                                          db      025h,060h,002h, 027h,080h,002h
  1314                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1315                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                  ;
  1318                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1319                                  ;
  1320                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1321                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1322                                  ;       copy.
  1323                                  ;
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  section                 dir                                                     ;diskette directory
  1326                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1327                                                          db      020h                                            ;attribute (archive bit set)
  1328                                                          times   10 db 0                                         ;unused
  1329                                                          dw      0h                                              ;time
  1330                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1331                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1332                                                          dw      2                                               ;first cluster
  1333                                                          dd      05400h                                          ;file size
  1334                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1335                                  %endif
  1336                                  %ifdef BUILDCOM
  1337                                  ;=======================================================================================================================
  1338                                  ;
  1339                                  ;       OS.COM
  1340                                  ;
  1341                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1342                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1343                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1344                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1345                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1346                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1347                                  ;
  1348                                  ;       Our loader addressability is set up according to the following diagram.
  1349                                  ;
  1350                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1351                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1352                                  ;                               |  256 = 100h bytes                             |
  1353                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1354                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1355                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1356                                  ;                       007e00  +-----------------------------------------------+
  1357                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1358                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1359                                  ;                               |                                               |
  1360                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1361                                  ;                               |                                               |
  1362                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1363                                  ;                               |  Loader Code                                  |
  1364                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1365                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1366                                  ;
  1367                                  ;=======================================================================================================================
  1368                                  ;-----------------------------------------------------------------------------------------------------------------------
  1369                                  ;
  1370                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1371                                  ;
  1372                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1373                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1374                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1375                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1376                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1377                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1378                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1379                                  ;       registers.
  1380                                  ;
  1381                                  ;-----------------------------------------------------------------------------------------------------------------------
  1382                                                          cpu     8086                                            ;assume minimal CPU
  1383                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1384                                                          bits    16                                              ;this is 16-bit code
  1385                                  Loader                  push    cs                                              ;use the code segment
  1386                                                          pop     ds                                              ;...as our data segment
  1387                                                          push    cs                                              ;use the code segment
  1388                                                          pop     es                                              ;...as our extra segment
  1389                                  ;
  1390                                  ;       Write a message to the console so we know we have our addressability established.
  1391                                  ;
  1392                                                          mov     si,czStartingMsg                                ;starting message
  1393                                                          call    PutTTYString                                    ;display loader message
  1394                                  ;
  1395                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1396                                  ;
  1397                                                          call    GetCPUType                                      ;AL = cpu type
  1398                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1399                                                          cmp     al,3                                            ;80386+?
  1400                                                          jb      LoaderExit                                      ;no, exit with error message
  1401                                                          cpu     386                                             ;allow 80386 instructions
  1402                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1403                                                          call    PutTTYString                                    ;display message
  1404                                  ;
  1405                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1406                                  ;
  1407                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1408                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1409                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1410                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1411                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1412                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1413                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1414                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1415                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1416                                                          call    PutTTYString                                    ;display message
  1417                                  ;
  1418                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1419                                  ;
  1420                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1421                                                          pop     es                                              ;... as target segment
  1422                                                          xor     di,di                                           ;ES:DI = target address
  1423                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1424                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1425                                                          cld                                                     ;forward strings
  1426                                                          rep     movsb                                           ;copy kernel image
  1427                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1428                                                          call    PutTTYString                                    ;display message
  1429                                  ;
  1430                                  ;       Switch to protected mode.
  1431                                  ;
  1432                                                          xor     si,si                                           ;ES:SI = gdt addr
  1433                                                          mov     ss,si                                           ;protected mode ss
  1434                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1435                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1436                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1437                                                          mov     dx,001Fh                                        ;outer delay loop count
  1438                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1439                                                          loop    $                                               ;wait out pending interrupts
  1440                                                          dec     dx                                              ;restore outer loop count
  1441                                                          jnz     .10                                             ;continue outer loop
  1442                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1443                                  ;
  1444                                  ;       Enable hardware and maskable interrupts.
  1445                                  ;
  1446                                                          xor     al,al                                           ;enable all registers code
  1447                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1448                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1449                                                          sti                                                     ;enable maskable interrupts
  1450                                  ;
  1451                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1452                                  ;
  1453                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1454                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1455                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  ;
  1458                                  ;       Routine:        LoaderExit
  1459                                  ;
  1460                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1461                                  ;
  1462                                  ;       In:             DS:SI   string address
  1463                                  ;
  1464                                  ;-----------------------------------------------------------------------------------------------------------------------
  1465                                  LoaderExit              call    PutTTYString                                    ;display error message
  1466                                  ;
  1467                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1468                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1469                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1470                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1471                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1472                                  ;
  1473                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1474                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1475                                                          jnz     .40                                             ;exit if key pressed
  1476                                                          sti                                                     ;enable maskable interrupts
  1477                                                          hlt                                                     ;wait for interrupt
  1478                                                          jmp     .30                                             ;repeat until keypress
  1479                                  ;
  1480                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1481                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1482                                  ;       HLT until the system resets.
  1483                                  ;
  1484                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1485                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1486                                  .50                     sti                                                     ;enable maskable interrupts
  1487                                                          hlt                                                     ;stop until reset, int, nmi
  1488                                                          jmp     .50                                             ;loop until restart kicks in
  1489                                  ;-----------------------------------------------------------------------------------------------------------------------
  1490                                  ;
  1491                                  ;       Routine:        GetCPUType
  1492                                  ;
  1493                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1494                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1495                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1496                                  ;
  1497                                  ;       Out:            AX      0 = 808x, v20, etc.
  1498                                  ;                               1 = 80186
  1499                                  ;                               2 = 80286
  1500                                  ;                               3 = 80386
  1501                                  ;
  1502                                  ;-----------------------------------------------------------------------------------------------------------------------
  1503                                  GetCPUType              mov     al,1                                            ;AL = 1
  1504                                                          mov     cl,32                                           ;shift count
  1505                                                          shr     al,cl                                           ;try a 32-bit shift
  1506                                                          or      al,al                                           ;did the shift happen?
  1507                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1508                                                          cpu     186
  1509                                                          push    sp                                              ;save stack pointer
  1510                                                          pop     cx                                              ;...into cx
  1511                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1512                                                          jne     .10                                             ;yes, cpu is 80186
  1513                                                          cpu     286
  1514                                                          inc     ax                                              ;AX = 2
  1515                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1516                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1517                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1518                                                          jz      .10                                             ;yes, cpu is 80286
  1519                                                          inc     ax                                              ;AX = 3
  1520                                  .10                     ret                                                     ;return
  1521                                  ;-----------------------------------------------------------------------------------------------------------------------
  1522                                  ;
  1523                                  ;       Routine:        PutTTYString
  1524                                  ;
  1525                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1526                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1527                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1528                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1529                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1530                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1531                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1532                                  ;                       to LODSB is not needed.
  1533                                  ;
  1534                                  ;       In:             DS:SI   address of string
  1535                                  ;
  1536                                  ;       Out:            DF      0
  1537                                  ;                       ZF      1
  1538                                  ;                       AL      0
  1539                                  ;
  1540                                  ;-----------------------------------------------------------------------------------------------------------------------
  1541                                  PutTTYString            cld                                                     ;forward strings
  1542                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1543                                                          test    al,al                                           ;end of string?
  1544                                                          jz      .20                                             ;... yes, exit our loop
  1545                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1546                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1547                                                          jmp     .10                                             ;repeat until done
  1548                                  .20                     ret                                                     ;return
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  ;
  1551                                  ;       Loader Data
  1552                                  ;
  1553                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1554                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1555                                  ;
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557                                                          align   2
  1558                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1559                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1560                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1561                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1562                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1563                                                          db      "Please press any key to restart the computer.",13,10,0
  1564                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1565                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1566                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1567                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1568                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1569                                  ;=======================================================================================================================
  1570                                  ;
  1571                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1572                                  ;
  1573                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1574                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1575                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1576                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1577                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1578                                  ;
  1579                                  ;=======================================================================================================================
  1580                                  ;=======================================================================================================================
  1581                                  ;
  1582                                  ;       Kernel Tables
  1583                                  ;
  1584                                  ;=======================================================================================================================
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586                                  ;
  1587                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1588                                  ;
  1589                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1590                                  ;       first descriptor must be all nulls.
  1591                                  ;
  1592                                  ;       6   5         4         3         2         1         0
  1593                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1594                                  ;       ----------------------------------------------------------------
  1595                                  ;       h......hffffmmmma......ab......................bn..............n
  1596                                  ;       00000000                        all areas have base addresses below 2^24
  1597                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1598                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1599                                  ;                   1001                present, ring-0, selector
  1600                                  ;
  1601                                  ;       h...h   hi-order base address (bits 24-31)
  1602                                  ;       ffff    flags
  1603                                  ;       mmmm    hi-order limit (bits 16-19)
  1604                                  ;       a...a   access
  1605                                  ;       b...b   lo-order base address (bits 0-23)
  1606                                  ;       n...n   lo-order limit (bits 0-15)
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  section                 gdt                                                     ;global descriptor table
  1610                                                          dq      0000000000000000h                               ;00 required null selector
  1611                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1612                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1613                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1614                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1615                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1616                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1617                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1618                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1619                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1620                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1621                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1622                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1623                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1624                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1628                                  ;
  1629                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1630                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1631                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1632                                  ;
  1633                                  ;       6   5         4         3         2         1         0
  1634                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1635                                  ;       ----------------------------------------------------------------
  1636                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1637                                  ;
  1638                                  ;       h...h   high-order offset (bits 16-31)
  1639                                  ;       P       present (0=unused interrupt)
  1640                                  ;       zz      descriptor privilege level
  1641                                  ;       S       storage segment (must be zero for IDT)
  1642                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1643                                  ;       S...S   handling code selector in GDT
  1644                                  ;       l...l   lo-order offset (bits 0-15)
  1645                                  ;
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  section                 idt                                                     ;interrupt descriptor table
  1648                                                          mint    dividebyzero                                    ;00 divide by zero
  1649                                                          mint    singlestep                                      ;01 single step
  1650                                                          mint    nmi                                             ;02 non-maskable
  1651                                                          mint    break                                           ;03 break
  1652                                                          mint    into                                            ;04 into
  1653                                                          mint    bounds                                          ;05 bounds
  1654                                                          mint    badopcode                                       ;06 bad op code
  1655                                                          mint    nocoproc                                        ;07 no coprocessor
  1656                                                          mint    doublefault                                     ;08 double-fault
  1657                                                          mint    operand                                         ;09 operand
  1658                                                          mint    badtss                                          ;0a bad TSS
  1659                                                          mint    notpresent                                      ;0b not-present
  1660                                                          mint    stacklimit                                      ;0c stack limit
  1661                                                          mint    protection                                      ;0d general protection fault
  1662                                                          mint    int14                                           ;0e (reserved)
  1663                                                          mint    int15                                           ;0f (reserved)
  1664                                                          mint    coproccalc                                      ;10 (reserved)
  1665                                                          mint    int17                                           ;11 (reserved)
  1666                                                          mint    int18                                           ;12 (reserved)
  1667                                                          mint    int19                                           ;13 (reserved)
  1668                                                          mint    int20                                           ;14 (reserved)
  1669                                                          mint    int21                                           ;15 (reserved)
  1670                                                          mint    int22                                           ;16 (reserved)
  1671                                                          mint    int23                                           ;17 (reserved)
  1672                                                          mint    int24                                           ;18 (reserved)
  1673                                                          mint    int25                                           ;19 (reserved)
  1674                                                          mint    int26                                           ;1a (reserved)
  1675                                                          mint    int27                                           ;1b (reserved)
  1676                                                          mint    int28                                           ;1c (reserved)
  1677                                                          mint    int29                                           ;1d (reserved)
  1678                                                          mint    int30                                           ;1e (reserved)
  1679                                                          mint    int31                                           ;1f (reserved)
  1680                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1681                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1682                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1683                                                          mtrap   com2                                            ;23 IRQ3 com2
  1684                                                          mtrap   com1                                            ;24 IRQ4 com1
  1685                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1686                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1687                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1688                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1689                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1690                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1691                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1692                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1693                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1694                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1695                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1696                                                          mtrap   svc                                             ;30 OS services
  1697                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1698                                  ;=======================================================================================================================
  1699                                  ;
  1700                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1701                                  ;
  1702                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1703                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1704                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1705                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1706                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1707                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1708                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1709                                  ;
  1710                                  ;=======================================================================================================================
  1711                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1712                                                          cpu     386                                             ;allow 80386 instructions
  1713                                                          bits    32                                              ;this is 32-bit code
  1714                                  ;=======================================================================================================================
  1715                                  ;
  1716                                  ;       CPU Interrupt Handlers
  1717                                  ;
  1718                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1719                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1720                                  ;
  1721                                  ;=======================================================================================================================
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT0    Divide By Zero
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  dividebyzero                                    ;divide by zero
  1728                                                          push    0                                               ;store interrupt nbr
  1729                                                          push    czIntDivideByZero                               ;store message offset
  1730                                                          jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT1    Single Step
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  singlestep                                      ;single step
  1737                                                          push    1                                               ;store interrupt nbr
  1738                                                          push    czIntSingleStep                                 ;store message offset
  1739                                                          jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT2    Non-Maskable Interrupt
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  nmi                                             ;non-maskable
  1746                                                          push    2                                               ;store interrupt nbr
  1747                                                          push    czIntNonMaskable                                ;store message offset
  1748                                                          jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT3    Break
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  break                                           ;break
  1755                                                          push    3                                               ;store interrupt nbr
  1756                                                          push    czIntBreak                                      ;store message offset
  1757                                                          jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT4    Into
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  into                                            ;into
  1764                                                          push    4                                               ;store interrupt nbr
  1765                                                          push    czIntInto                                       ;store message offset
  1766                                                          jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT5    Bounds
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  bounds                                          ;bounds
  1773                                                          push    5                                               ;store interrupt nbr
  1774                                                          push    czIntBounds                                     ;store message offset
  1775                                                          jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT6    Bad Operation Code
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  badopcode                                       ;bad opcode interrupt
  1782                                                          push    6                                               ;store interrupt nbr
  1783                                                          push    czIntBadOpCode                                  ;store message offset
  1784                                                          jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT7    No Coprocessor
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1791                                                          push    7                                               ;store interrupt nbr
  1792                                                          push    czIntNoCoprocessor                              ;store message offset
  1793                                                          jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT8    Double Fault
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  doublefault                                     ;doublefault interrupt
  1800                                                          push    8                                               ;store interrupt nbr
  1801                                                          push    czIntDoubleFault                                ;store message offset
  1802                                                          jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT9    Operand
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  operand                                         ;operand interrupt
  1809                                                          push    9                                               ;store interrupt nbr
  1810                                                          push    czIntOperand                                    ;store message offset
  1811                                                          jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT10   Bad Task State Segment
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  badtss                                          ;bad TSS interrupt
  1818                                                          push    10                                              ;store interrupt nbr
  1819                                                          push    czIntBadTSS                                     ;store message offset
  1820                                                          jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT11   Not Present
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  notpresent                                      ;not present interrupt
  1827                                                          push    11                                              ;store interrupt nbr
  1828                                                          push    czIntNotPresent                                 ;store message offset
  1829                                                          jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT12   Stack Limit
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  stacklimit                                      ;stack limit interrupt
  1836                                                          push    12                                              ;store interrupt nbr
  1837                                                          push    czIntStackLimit                                 ;store message offset
  1838                                                          jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT13   General Protection Fault
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  protection                                      ;protection fault interrupt
  1845                                                          push    13                                              ;store interrupt nbr
  1846                                                          push    czIntProtection                                 ;store message offset
  1847                                                          jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT14   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int14                                           ;(reserved)
  1854                                                          push    14                                              ;store interrupt nbr
  1855                                                          push    czIntReserved                                   ;store message offset
  1856                                                          jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT15   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int15                                           ;(reserved)
  1863                                                          push    15                                              ;store interrupt nbr
  1864                                                          push    czIntReserved                                   ;store message offset
  1865                                                          jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       INT16   Coprocessor Calculation
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                                          menter  coproccalc                                      ;coprocessor calculation
  1872                                                          push    16                                              ;store interrupt nbr
  1873                                                          push    czIntCoprocessorCalc                            ;store message offset
  1874                                                          jmp     ReportInterrupt                                 ;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       INT17   Reserved
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                                          menter  int17                                           ;(reserved)
  1881                                                          push    17                                              ;store interrupt nbr
  1882                                                          push    czIntReserved                                   ;store message offset
  1883                                                          jmp     ReportInterrupt                                 ;report interrupt
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;       INT18   Reserved
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                                          menter  int18                                           ;(reserved)
  1890                                                          push    18                                              ;store interrupt nbr
  1891                                                          push    czIntReserved                                   ;store message offset
  1892                                                          jmp     ReportInterrupt                                 ;report interrupt
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ;
  1895                                  ;       INT19   Reserved
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                                          menter  int19                                           ;(reserved)
  1899                                                          push    19                                              ;store interrupt nbr
  1900                                                          push    czIntReserved                                   ;store message offset
  1901                                                          jmp     ReportInterrupt                                 ;report interrupt
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;       INT20   Reserved
  1905                                  ;
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                                          menter  int20                                           ;(reserved)
  1908                                                          push    20                                              ;store interrupt nbr
  1909                                                          push    czIntReserved                                   ;store message offset
  1910                                                          jmp     ReportInterrupt                                 ;report interrupt
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  ;
  1913                                  ;       INT21   Reserved
  1914                                  ;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                                          menter  int21                                           ;(reserved)
  1917                                                          push    21                                              ;store interrupt nbr
  1918                                                          push    czIntReserved                                   ;store message offset
  1919                                                          jmp     ReportInterrupt                                 ;report interrupt
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;       INT22   Reserved
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                                          menter  int22                                           ;(reserved)
  1926                                                          push    22                                              ;store interrupt nbr
  1927                                                          push    czIntReserved                                   ;store message offset
  1928                                                          jmp     ReportInterrupt                                 ;report interrupt
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       INT23   Reserved
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  int23                                           ;(reserved)
  1935                                                          push    23                                              ;store interrupt nbr
  1936                                                          push    czIntReserved                                   ;store message offset
  1937                                                          jmp     ReportInterrupt                                 ;report interrupt
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       INT24   Reserved
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  int24                                           ;(reserved)
  1944                                                          push    24                                              ;store interrupt nbr
  1945                                                          push    czIntReserved                                   ;store message offset
  1946                                                          jmp     ReportInterrupt                                 ;report interrupt
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;       INT25   Reserved
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                                          menter  int25                                           ;(reserved)
  1953                                                          push    25                                              ;store interrupt nbr
  1954                                                          push    czIntReserved                                   ;store message offset
  1955                                                          jmp     ReportInterrupt                                 ;report interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT26   Reserved
  1959                                  ;
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                                          menter  int26                                           ;(reserved)
  1962                                                          push    26                                              ;store interrupt nbr
  1963                                                          push    czIntReserved                                   ;store message offset
  1964                                                          jmp     ReportInterrupt                                 ;report interrupt
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;       INT27   Reserved
  1968                                  ;
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                                          menter  int27                                           ;(reserved)
  1971                                                          push    27                                              ;store interrupt nbr
  1972                                                          push    czIntReserved                                   ;store message offset
  1973                                                          jmp     ReportInterrupt                                 ;report interrupt
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  ;
  1976                                  ;       INT28   Reserved
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                                          menter  int28                                           ;(reserved)
  1980                                                          push    28                                              ;store interrupt nbr
  1981                                                          push    czIntReserved                                   ;store message offset
  1982                                                          jmp     ReportInterrupt                                 ;report interrupt
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  ;
  1985                                  ;       INT29   Reserved
  1986                                  ;
  1987                                  ;-----------------------------------------------------------------------------------------------------------------------
  1988                                                          menter  int29                                           ;(reserved)
  1989                                                          push    29                                              ;store interrupt nbr
  1990                                                          push    czIntReserved                                   ;store message offset
  1991                                                          jmp     ReportInterrupt                                 ;report interrupt
  1992                                  ;-----------------------------------------------------------------------------------------------------------------------
  1993                                  ;
  1994                                  ;       INT30   Reserved
  1995                                  ;
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                                          menter  int30                                           ;(reserved)
  1998                                                          push    30                                              ;store interrupt nbr
  1999                                                          push    czIntReserved                                   ;store message offset
  2000                                                          jmp     ReportInterrupt                                 ;report interrupt
  2001                                  ;-----------------------------------------------------------------------------------------------------------------------
  2002                                  ;
  2003                                  ;       INT31   Reserved
  2004                                  ;
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                                          menter  int31                                           ;(reserved)
  2007                                                          push    31                                              ;store interrupt nbr
  2008                                                          push    czIntReserved                                   ;store message offset
  2009                                                          jmp     ReportInterrupt                                 ;report interrupt
  2010                                  ;-----------------------------------------------------------------------------------------------------------------------
  2011                                  ;
  2012                                  ;       Routine:        ReportInterrupt
  2013                                  ;
  2014                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2015                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2016                                  ;
  2017                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  2018                                  ;                       [esp+12]        cs                                      stored by interrupt call
  2019                                  ;                       [esp+8]         eip                                     stored by interrupt call
  2020                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  2021                                  ;                       [esp+0]         error message address                   stored by push instructions
  2022                                  ;
  2023                                  ;       Out:            N/A             This routine does not exit.
  2024                                  ;
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2027                                                          push    es                                              ;save ES at time of interrupt
  2028                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2029                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  2030                                  ;
  2031                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2032                                  ;
  2033                                  ;                       [ebp+56]        eflags
  2034                                  ;                       [ebp+52]        cs
  2035                                  ;                       [ebp+48]        eip
  2036                                  ;                       [ebp+44]        interrupt number (0-31)
  2037                                  ;                       [ebp+40]        error message address
  2038                                  ;                       [ebp+36]        ds
  2039                                  ;                       [ebp+32]        es
  2040                                  ;                       [ebp+28]        eax
  2041                                  ;                       [ebp+24]        ecx
  2042                                  ;                       [ebp+20]        edx
  2043                                  ;                       [ebp+16]        ebx
  2044                                  ;                       [ebp+12]        esp
  2045                                  ;                       [ebp+8]         ebp
  2046                                  ;                       [ebp+4]         esi
  2047                                  ;                       [ebp+0]         edi
  2048                                  ;
  2049                                                          push    cs                                              ;load code selector ...
  2050                                                          pop     ds                                              ;... into DS
  2051                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2052                                                          pop     es                                              ;... into ES
  2053                                  ;
  2054                                  ;       Display the interrupt report boundary box
  2055                                  ;
  2056                                                          mov     cl,13                                           ;column
  2057                                                          mov     ch,6                                            ;row
  2058                                                          mov     dl,50                                           ;width
  2059                                                          mov     dh,8                                            ;height
  2060                                                          mov     bh,07h                                          ;attribute
  2061                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2062                                  ;
  2063                                  ;       Display the report header
  2064                                  ;
  2065                                                          mov     cl,15                                           ;column
  2066                                                          mov     ch,7                                            ;row
  2067                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2068                                                          call    SetConsoleString                                ;draw text string
  2069                                  ;
  2070                                  ;       Display the interrupt description label
  2071                                  ;
  2072                                                          mov     cl,15                                           ;column
  2073                                                          mov     ch,8                                            ;row
  2074                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2075                                                          call    SetConsoleString                                ;draw text string
  2076                                  ;
  2077                                  ;       Display the interrupt number
  2078                                  ;
  2079                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2080                                                          mov     cl,26                                           ;column
  2081                                                          mov     ch,8                                            ;row
  2082                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2083                                  ;
  2084                                  ;       Display the interrupt name
  2085                                  ;
  2086                                                          mov     cl,29                                           ;column
  2087                                                          mov     ch,8                                            ;row
  2088                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2089                                                          call    SetConsoleString                                ;display interrupt description
  2090                                  ;
  2091                                  ;       Display the register values header
  2092                                  ;
  2093                                                          mov     cl,15                                           ;column
  2094                                                          mov     ch,10                                           ;row
  2095                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2096                                                          call    SetConsoleString                                ;draw text string
  2097                                  ;
  2098                                  ;       Display the EAX register label and value
  2099                                  ;
  2100                                                          mov     cl,15                                           ;column
  2101                                                          mov     ch,11                                           ;row
  2102                                                          mov     esi,czIntEAX                                    ;register EAX label
  2103                                                          call    SetConsoleString                                ;draw label
  2104                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2105                                                          mov     cl,19                                           ;column
  2106                                                          mov     ch,11                                           ;row
  2107                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2108                                  ;
  2109                                  ;       Display the ECX register label and value
  2110                                  ;
  2111                                                          mov     cl,15                                           ;column
  2112                                                          mov     ch,12                                           ;row
  2113                                                          mov     esi,czIntECX                                    ;label
  2114                                                          call    SetConsoleString                                ;draw label
  2115                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2116                                                          mov     cl,19                                           ;column
  2117                                                          mov     ch,12                                           ;row
  2118                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2119                                  ;
  2120                                  ;       Display the EDX register label and value
  2121                                  ;
  2122                                                          mov     cl,15                                           ;column
  2123                                                          mov     ch,13                                           ;row
  2124                                                          mov     esi,czIntEDX                                    ;label
  2125                                                          call    SetConsoleString                                ;draw label
  2126                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2127                                                          mov     cl,19                                           ;column
  2128                                                          mov     ch,13                                           ;row
  2129                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2130                                  ;
  2131                                  ;       Display the EBX register label and value
  2132                                  ;
  2133                                                          mov     cl,15                                           ;column
  2134                                                          mov     ch,14                                           ;row
  2135                                                          mov     esi,czIntEBX                                    ;label
  2136                                                          call    SetConsoleString                                ;draw label
  2137                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2138                                                          mov     cl,19                                           ;column
  2139                                                          mov     ch,14                                           ;row
  2140                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2141                                  ;
  2142                                  ;       Display the ESI register label and value
  2143                                  ;
  2144                                                          mov     cl,29                                           ;column
  2145                                                          mov     ch,11                                           ;row
  2146                                                          mov     esi,czIntESI                                    ;label
  2147                                                          call    SetConsoleString                                ;draw label
  2148                                                          mov     eax,[ebp+4]                                     ;ESI
  2149                                                          mov     cl,33                                           ;column
  2150                                                          mov     ch,11                                           ;row
  2151                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2152                                  ;
  2153                                  ;       Display the EDI register label and value
  2154                                  ;
  2155                                                          mov     cl,29                                           ;column
  2156                                                          mov     ch,12                                           ;row
  2157                                                          mov     esi,czIntEDI                                    ;label
  2158                                                          call    SetConsoleString                                ;draw label
  2159                                                          mov     eax,[ebp+0]                                     ;EDI
  2160                                                          mov     cl,33                                           ;column
  2161                                                          mov     ch,12                                           ;row
  2162                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2163                                  ;
  2164                                  ;       Display the EBP register label and value
  2165                                  ;
  2166                                                          mov     cl,29                                           ;column
  2167                                                          mov     ch,13                                           ;row
  2168                                                          mov     esi,czIntEBP                                    ;label
  2169                                                          call    SetConsoleString                                ;draw label
  2170                                                          mov     eax,[ebp+8]                                     ;EBP
  2171                                                          mov     cl,33                                           ;column
  2172                                                          mov     ch,13                                           ;row
  2173                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2174                                  ;
  2175                                  ;       Display the DS register label and value
  2176                                  ;
  2177                                                          mov     cl,42                                           ;column
  2178                                                          mov     ch,11                                           ;row
  2179                                                          mov     esi,czIntDS                                     ;label
  2180                                                          call    SetConsoleString                                ;draw label
  2181                                                          xor     eax,eax                                         ;zero register
  2182                                                          mov     ax,[ebp+36]                                     ;DS
  2183                                                          mov     cl,46                                           ;column
  2184                                                          mov     ch,11                                           ;row
  2185                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2186                                  ;
  2187                                  ;       Display the ES register label and value
  2188                                  ;
  2189                                                          mov     cl,42                                           ;column
  2190                                                          mov     ch,12                                           ;row
  2191                                                          mov     esi,czIntES                                     ;label
  2192                                                          call    SetConsoleString                                ;draw label
  2193                                                          xor     eax,eax                                         ;zero register
  2194                                                          mov     ax,[ebp+32]                                     ;ES
  2195                                                          mov     cl,46                                           ;column
  2196                                                          mov     ch,12                                           ;row
  2197                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2198                                  ;
  2199                                  ;       Display the SS register label and value
  2200                                  ;
  2201                                                          mov     cl,42                                           ;column
  2202                                                          mov     ch,13                                           ;row
  2203                                                          mov     esi,czIntSS                                     ;label
  2204                                                          call    SetConsoleString                                ;draw label
  2205                                                          xor     eax,eax                                         ;zero register
  2206                                                          mov     ax,ss                                           ;SS
  2207                                                          mov     cl,46                                           ;column
  2208                                                          mov     ch,13                                           ;row
  2209                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2210                                  ;
  2211                                  ;       Display the CS register lable and value
  2212                                  ;
  2213                                                          mov     cl,42                                           ;column
  2214                                                          mov     ch,14                                           ;row
  2215                                                          mov     esi,czIntCS                                     ;label
  2216                                                          call    SetConsoleString                                ;draw label
  2217                                                          xor     eax,eax                                         ;zero register
  2218                                                          mov     ax,[ebp+52]                                     ;CS
  2219                                                          mov     cl,46                                           ;column
  2220                                                          mov     ch,14                                           ;row
  2221                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2222                                  ;
  2223                                  ;       Display the EFLAGS register label and value
  2224                                  ;
  2225                                                          mov     cl,51                                           ;column
  2226                                                          mov     ch,11                                           ;row
  2227                                                          mov     esi,czIntEFLAGS                                 ;label
  2228                                                          call    SetConsoleString                                ;draw label
  2229                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2230                                                          mov     cl,55                                           ;column
  2231                                                          mov     ch,11                                           ;row
  2232                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2233                                  ;
  2234                                  ;       Display the ESP register label and value
  2235                                  ;
  2236                                                          mov     cl,51                                           ;column
  2237                                                          mov     ch,13                                           ;row
  2238                                                          mov     esi,czIntESP                                    ;label
  2239                                                          call    SetConsoleString                                ;draw label
  2240                                                          mov     eax,[ebp+12]                                    ;ESP
  2241                                                          mov     cl,55                                           ;column
  2242                                                          mov     ch,13                                           ;row
  2243                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2244                                  ;
  2245                                  ;       Display the EIP register label and value
  2246                                  ;
  2247                                                          mov     cl,51                                           ;column
  2248                                                          mov     ch,14                                           ;row
  2249                                                          mov     esi,czIntEIP                                    ;label
  2250                                                          call    SetConsoleString                                ;draw label
  2251                                                          mov     eax,[ebp+48]                                    ;EIP
  2252                                                          mov     cl,55                                           ;column
  2253                                                          mov     ch,14                                           ;row
  2254                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2255                                  ;
  2256                                  ;       Halt and loop until reset
  2257                                  ;
  2258                                  .10                     sti                                                     ;enable maskable interrupts
  2259                                                          hlt                                                     ;halt processor
  2260                                                          jmp     .10                                             ;resume on interrupt
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                  ;
  2263                                  ;       Processor Interrupt Name Strings
  2264                                  ;
  2265                                  ;-----------------------------------------------------------------------------------------------------------------------
  2266                                  czIntDivideByZero       db      "Division by zero",0
  2267                                  czIntSingleStep         db      "Single step",0
  2268                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2269                                  czIntBreak              db      "Break",0
  2270                                  czIntInto               db      "Into",0
  2271                                  czIntBounds             db      "Bounds",0
  2272                                  czIntBadOpCode          db      "Bad Operation Code",0
  2273                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2274                                  czIntDoubleFault        db      "Double Fault",0
  2275                                  czIntOperand            db      "Operand",0
  2276                                  czIntBadTSS             db      "Bad Task State Segment",0
  2277                                  czIntNotPresent         db      "Not Present",0
  2278                                  czIntStackLimit         db      "Stack Limit",0
  2279                                  czIntProtection         db      "General Protection Fault",0
  2280                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2281                                  czIntReserved           db      "Reserved",0
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283                                  ;
  2284                                  ;       Processor Interrupt Handling Strings
  2285                                  ;
  2286                                  ;-----------------------------------------------------------------------------------------------------------------------
  2287                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2288                                  czIntLabel              db      "Interrupt #",0
  2289                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2290                                  czIntEAX                db      "EAX:",0
  2291                                  czIntECX                db      "ECX:",0
  2292                                  czIntEDX                db      "EDX:",0
  2293                                  czIntEBX                db      "EBX:",0
  2294                                  czIntESI                db      "ESI:",0
  2295                                  czIntEDI                db      "EDI:",0
  2296                                  czIntEBP                db      "EBP:",0
  2297                                  czIntESP                db      "ESP:",0
  2298                                  czIntDS                 db      " DS:",0
  2299                                  czIntES                 db      " ES:",0
  2300                                  czIntSS                 db      " SS:",0
  2301                                  czIntCS                 db      " CS:",0
  2302                                  czIntEFLAGS             db      "FLG:",0
  2303                                  czIntEIP                db      "EIP:",0
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  ;
  2306                                  ;       Routine:        DrawTextDialogBox
  2307                                  ;
  2308                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2309                                  ;
  2310                                  ;       In:             CL      upper left column (0-79)
  2311                                  ;                       CH      upper left row (0-24)
  2312                                  ;                       DL      column width, excluding border
  2313                                  ;                       DH      row height, excluding border
  2314                                  ;                       BH      color attribute
  2315                                  ;
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2318                                                          push    esi                                             ;
  2319                                                          push    edi                                             ;
  2320                                                          push    es                                              ;
  2321                                                          push    EGDTCGA                                         ;load CGA selector ...
  2322                                                          pop     es                                              ;... into ES
  2323                                  ;
  2324                                  ;       Compute target display offset
  2325                                  ;
  2326                                                          xor     eax,eax                                         ;zero register
  2327                                                          mov     al,ch                                           ;row
  2328                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2329                                                          mul     ah                                              ;row offset
  2330                                                          add     al,cl                                           ;add column
  2331                                                          adc     ah,0                                            ;add overflow
  2332                                                          add     al,cl                                           ;add column
  2333                                                          adc     ah,0                                            ;add overflow
  2334                                                          mov     edi,eax                                         ;target row offset
  2335                                  ;
  2336                                  ;       Display top border row
  2337                                  ;
  2338                                                          push    edi                                             ;save target row offset
  2339                                                          mov     ah,bh                                           ;attribute
  2340                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2341                                                          stosw                                                   ;display character and attribute
  2342                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2343                                                          xor     ecx,ecx                                         ;zero register
  2344                                                          mov     cl,dl                                           ;width, excluding border
  2345                                                          rep     stosw                                           ;display horizontal border
  2346                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2347                                                          stosw                                                   ;display character and attribute
  2348                                                          pop     edi                                             ;restore target row offset
  2349                                                          add     edi,ECONROWBYTES                                ;next row
  2350                                  ;
  2351                                  ;       Display dialog box body rows
  2352                                  ;
  2353                                                          xor     ecx,ecx                                         ;zero register
  2354                                                          mov     cl,dh                                           ;height, excluding border
  2355                                  .10                     push    ecx                                             ;save remaining rows
  2356                                                          push    edi                                             ;save target row offset
  2357                                                          mov     ah,bh                                           ;attribute
  2358                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2359                                                          stosw                                                   ;display character and attribute
  2360                                                          mov     al,EASCIISPACE                                  ;space
  2361                                                          xor     ecx,ecx                                         ;zero register
  2362                                                          mov     cl,dl                                           ;width, excluding border
  2363                                                          rep     stosw                                           ;display row
  2364                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2365                                                          stosw                                                   ;display character and attribute
  2366                                                          pop     edi                                             ;restore target row offset
  2367                                                          add     edi,ECONROWBYTES                                ;next row
  2368                                                          pop     ecx                                             ;remaining rows
  2369                                                          loop    .10                                             ;next row
  2370                                  ;
  2371                                  ;       Display bottom border row
  2372                                  ;
  2373                                                          push    edi                                             ;save target row offset
  2374                                                          mov     ah,bh                                           ;attribute
  2375                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2376                                                          stosw                                                   ;display character and attribute
  2377                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2378                                                          xor     ecx,ecx                                         ;zero register
  2379                                                          mov     cl,dl                                           ;width, excluding border
  2380                                                          rep     stosw                                           ;display horizontal border
  2381                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2382                                                          stosw                                                   ;display character and attribute
  2383                                                          pop     edi                                             ;restore target row offset
  2384                                                          add     edi,ECONROWBYTES                                ;next row
  2385                                  ;
  2386                                  ;       Restore and return
  2387                                  ;
  2388                                                          pop     es                                              ;restore non-volatile regs
  2389                                                          pop     edi                                             ;
  2390                                                          pop     esi                                             ;
  2391                                                          pop     ecx                                             ;
  2392                                                          ret                                                     ;return
  2393                                  ;=======================================================================================================================
  2394                                  ;
  2395                                  ;       Hardware Device Interupts
  2396                                  ;
  2397                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2398                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2399                                  ;       (BX=2028h).
  2400                                  ;
  2401                                  ;=======================================================================================================================
  2402                                  ;-----------------------------------------------------------------------------------------------------------------------
  2403                                  ;
  2404                                  ;       IRQ0    Clock Tick Interrupt
  2405                                  ;
  2406                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2407                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2408                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2409                                  ;
  2410                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2411                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2412                                  ;
  2413                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2414                                  ;       zero, the floppy disk motors are turned off.
  2415                                  ;
  2416                                  ;-----------------------------------------------------------------------------------------------------------------------
  2417                                                          menter  clocktick                                       ;clock tick interrupt
  2418                                                          push    eax                                             ;save non-volatile regs
  2419                                                          push    edx                                             ;
  2420                                                          push    ds                                              ;
  2421                                  ;
  2422                                  ;       Update the clock tick count and the elapsed days as needed.
  2423                                  ;
  2424                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2425                                                          pop     ds                                              ;... into data segment register
  2426                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2427                                                          inc     eax                                             ;increment clock ticks
  2428                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2429                                                          jb      irq0.10                                         ;no, skip ahead
  2430                                                          inc     byte [wbClockDays]                              ;increment clock days
  2431                                                          xor     eax,eax                                         ;reset clock ticks
  2432                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2433                                  ;
  2434                                  ;       Decrement floppy disk motor timeout.
  2435                                  ;
  2436                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2437                                                          je      irq0.20                                         ;yes, skip ahead
  2438                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2439                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2440                                  ;
  2441                                  ;       Turn off the floppy disk motor if appropriate.
  2442                                  ;
  2443                                                          sti                                                     ;enable maskable interrupts
  2444                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2445                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2446                                                          in      al,dx                                           ;FDC main status byte
  2447                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2448                                                          jnz     irq0.15                                         ;wait while busy
  2449                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2450                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2451                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2452                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2453                                                          out     dx,al                                           ;turn motor off
  2454                                  ;
  2455                                  ;       Signal the end of the hardware interrupt.
  2456                                  ;
  2457                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2458                                  ;
  2459                                  ;       Restore and return.
  2460                                  ;
  2461                                                          pop     ds                                              ;restore modified regs
  2462                                                          pop     edx                                             ;
  2463                                                          pop     eax                                             ;
  2464                                                          iretd                                                   ;return
  2465                                  ;-----------------------------------------------------------------------------------------------------------------------
  2466                                  ;
  2467                                  ;       IRQ1    Keyboard Interrupt
  2468                                  ;
  2469                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2470                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2471                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2472                                  ;       ALL modified registers upon return.
  2473                                  ;
  2474                                  ;-----------------------------------------------------------------------------------------------------------------------
  2475                                                          menter  keyboard                                        ;keyboard interrrupt
  2476                                                          push    eax                                             ;save non-volatile regs
  2477                                                          push    ebx                                             ;
  2478                                                          push    ecx                                             ;
  2479                                                          push    esi                                             ;
  2480                                                          push    ds                                              ;
  2481                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2482                                                          pop     ds                                              ;... into data segment register
  2483                                                          xor     al,al                                           ;zero
  2484                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2485                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2486                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2487                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2488                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2489                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2490                                                          mov     al,' '                                          ;space
  2491                                                          mov     [wbConsoleChar],al                              ;set character to space
  2492                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2493                                                          not     al                                              ;controller timeout mask
  2494                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2495                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2496                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2497                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2498                                                          jz      irq1.140                                        ;yes, skip ahead
  2499                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2500                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2501                                                          mov     ah,al                                           ;copy scan code 0
  2502                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2503                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2504                                                          je      irq1.30                                         ;yes, set flag
  2505                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2506                                                          je      irq1.40                                         ;yes, reset flag
  2507                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2508                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2509                                                          je      irq1.30                                         ;yes, set flag
  2510                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2511                                                          je      irq1.40                                         ;yes, reset flag
  2512                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2513                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2514                                                          je      irq1.30                                         ;yes, set flag
  2515                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2516                                                          je      irq1.40                                         ;yes, reset flag
  2517                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2518                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2519                                                          je      irq1.30                                         ;yes, set flag
  2520                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2521                                                          je      irq1.40                                         ;yes, reset flag
  2522                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2523                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2524                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2525                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2526                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2527                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2528                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2529                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2530                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2531                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2532                                                          jne     irq1.70                                         ;no, skip ahead
  2533                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2534                                                          jz      irq1.140                                        ;yes, skip ahead
  2535                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2536                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2537                                                          mov     ah,al                                           ;copy scan code 1
  2538                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2539                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2540                                                          je      irq1.30                                         ;yes, set flag
  2541                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2542                                                          je      irq1.40                                         ;yes, reset flag
  2543                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2544                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2545                                                          je      irq1.30                                         ;yes, set flag
  2546                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2547                                                          je      irq1.40                                         ;yes, reset flag
  2548                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2549                                                          je      irq1.80                                         ;yes, skip ahead
  2550                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2551                                                          je      irq1.80                                         ;yes, skip ahead
  2552                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2553                                                          je      irq1.10                                         ;yes, continue
  2554                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2555                                                          jne     irq1.20                                         ;no, skip ahead
  2556                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2557                                                          jz      irq1.140                                        ;yes, skip ahead
  2558                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2559                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2560                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2561                                                          jz      irq1.140                                        ;yes, skip ahead
  2562                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2563                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2564                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2565                                  irq1.30                 or      bl,al                                           ;set shift flag
  2566                                                          jmp     irq1.60                                         ;skip ahead
  2567                                  irq1.40                 not     al                                              ;convert flag to mask
  2568                                                          and     bl,al                                           ;reset shift flag
  2569                                                          jmp     irq1.60                                         ;skip ahead
  2570                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2571                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2572                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2573                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2574                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2575                                                          jmp     irq1.150                                        ;finish keyboard handling
  2576                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2577                                                          jne     irq1.80                                         ;no continue
  2578                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2579                                                          jz      irq1.140                                        ;yes, skip ahead
  2580                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2581                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2582                                                          mov     ah,al                                           ;copy scan code 1
  2583                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2584                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2585                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2586                                                          jz      irq1.140                                        ;yes, skip ahead
  2587                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2588                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2589                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2590                                                          jz      irq1.140                                        ;yes, skip ahead
  2591                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2592                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2593                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2594                                                          jz      irq1.140                                        ;yes, skip ahead
  2595                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2596                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2597                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2598                                                          jz      irq1.140                                        ;yes, skip ahead
  2599                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2600                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2601                                                          jmp     irq1.150                                        ;continue
  2602                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2603                                                          test    ah,EKEYBUP                                      ;release code?
  2604                                                          jnz     irq1.130                                        ;yes, skip ahead
  2605                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2606                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2607                                                          jz      irq1.90                                         ;no, skip ahead
  2608                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2609                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2610                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2611                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2612                                                          jz      irq1.100                                        ;no skip ahead
  2613                                                          mov     cl,al                                           ;copy ASCII code
  2614                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2615                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2616                                                          jb      irq1.100                                        ;yes, skip ahead
  2617                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2618                                                          ja      irq1.100                                        ;yes, skip ahead
  2619                                                          xor     al,EASCIICASE                                   ;switch case
  2620                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2621                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2622                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2623                                                          jz      irq1.120                                        ;no, skip ahead
  2624                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2625                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2626                                                          or      edx,eax                                         ;msg id and codes
  2627                                                          xor     ecx,ecx                                         ;null param
  2628                                                          push    eax                                             ;save codes
  2629                                                          call    PutMessage                                      ;put message to console
  2630                                                          pop     eax                                             ;restore codes
  2631                                                          test    al,al                                           ;ASCII translation?
  2632                                                          jz      irq1.130                                        ;no, skip ahead
  2633                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2634                                                          and     eax,0FFFFh                                      ;clear high-order word
  2635                                                          or      edx,eax                                         ;msg id and codes
  2636                                                          xor     ecx,ecx                                         ;null param
  2637                                                          call    PutMessage                                      ;put message to console
  2638                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2639                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2640                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2641                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2642                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2643                                                          pop     ds                                              ;restore non-volatile regs
  2644                                                          pop     esi                                             ;
  2645                                                          pop     ecx                                             ;
  2646                                                          pop     ebx                                             ;
  2647                                                          pop     eax                                             ;
  2648                                                          iretd                                                   ;return
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650                                  ;       Scan-Code to ASCII Translation Tables
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2653                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2654                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2655                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2656                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2657                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2658                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2659                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2660                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2661                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2662                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2663                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2664                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2665                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2666                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2667                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2668                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2669                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2670                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2671                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2672                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2673                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2674                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2675                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2676                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2677                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2678                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2679                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2680                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2681                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2682                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2683                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  ;
  2686                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2687                                  ;
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                                          menter  iochannel                                       ;secondary 8259A cascade
  2690                                                          push    eax                                             ;save modified regs
  2691                                                          jmp     hwint                                           ;end interrupt and return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2695                                  ;
  2696                                  ;-----------------------------------------------------------------------------------------------------------------------
  2697                                                          menter  com2                                            ;serial port 2 interrupt
  2698                                                          push    eax                                             ;save modified regs
  2699                                                          jmp     hwint                                           ;end interrupt and return
  2700                                  ;-----------------------------------------------------------------------------------------------------------------------
  2701                                  ;
  2702                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2703                                  ;
  2704                                  ;-----------------------------------------------------------------------------------------------------------------------
  2705                                                          menter  com1                                            ;serial port 1 interrupt
  2706                                                          push    eax                                             ;save modified regs
  2707                                                          jmp     hwint                                           ;end interrupt and return
  2708                                  ;-----------------------------------------------------------------------------------------------------------------------
  2709                                  ;
  2710                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2711                                  ;
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2714                                                          push    eax                                             ;save modified regs
  2715                                                          jmp     hwint                                           ;end interrupt and return
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;       IRQ6    Diskette Hardware Interrupt
  2719                                  ;
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721                                                          menter  diskette                                        ;floppy disk interrupt
  2722                                                          push    eax                                             ;save non-volatile regs
  2723                                                          push    ds                                              ;
  2724                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2725                                                          pop     ds                                              ;... into DS register
  2726                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2727                                                          or      al,10000000b                                    ;set IRQ flag
  2728                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2729                                                          pop     ds                                              ;restore non-volatile regs
  2730                                                          jmp     hwint                                           ;end primary PIC interrupt
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;
  2733                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2734                                  ;
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2737                                                          push    eax                                             ;save modified regs
  2738                                                          jmp     hwint                                           ;end interrupt and return
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  ;
  2741                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2742                                  ;
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                                          menter  rtclock                                         ;real-time clock interrupt
  2745                                                          push    eax                                             ;save modified regs
  2746                                                          jmp     hwwint                                          ;end interrupt and return
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                  ;
  2749                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2750                                  ;
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2753                                                          push    eax                                             ;save modified regs
  2754                                                          jmp     hwwint                                          ;end interrupt and return
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  ;
  2757                                  ;       IRQ10   Reserved Hardware Interrupt
  2758                                  ;
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                                          menter  irq10                                           ;reserved
  2761                                                          push    eax                                             ;save modified regs
  2762                                                          jmp     hwwint                                          ;end interrupt and return
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       IRQ11   Reserved Hardware Interrupt
  2766                                  ;
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                                          menter  irq11                                           ;reserved
  2769                                                          push    eax                                             ;save modified regs
  2770                                                          jmp     hwwint                                          ;end interrupt and return
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  ;
  2773                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2777                                                          push    eax                                             ;save modified regs
  2778                                                          jmp     hwwint                                          ;end interrupt and return
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  ;
  2781                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2782                                  ;
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                                          menter  coprocessor                                     ;coprocessor interrupt
  2785                                                          push    eax                                             ;save modified regs
  2786                                                          jmp     hwwint                                          ;end interrupt and return
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                  ;
  2789                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2793                                                          push    eax                                             ;save modified regs
  2794                                                          jmp     hwwint                                          ;end interrupt and return
  2795                                  ;-----------------------------------------------------------------------------------------------------------------------
  2796                                  ;
  2797                                  ;       IRQ15   Reserved Hardware Interrupt
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                                          menter  irq15                                           ;reserved
  2801                                                          push    eax                                             ;save modified regs
  2802                                                          jmp     hwwint                                          ;end interrupt and return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;       Exit from hardware interrupt
  2806                                  ;
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2809                                                          jmp     hwint90                                         ;skip ahead
  2810                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2811                                  hwint90                 pop     eax                                             ;restore modified regs
  2812                                                          iretd                                                   ;return from interrupt
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ;
  2815                                  ;       INT 30h Operating System Software Service Interrupt
  2816                                  ;
  2817                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2818                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2819                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2820                                  ;       the entry address of the specific function from a table.
  2821                                  ;
  2822                                  ;-----------------------------------------------------------------------------------------------------------------------
  2823                                                          menter  svc
  2824                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2825                                                          jae     svc90                                           ;yes, skip ahead
  2826                                                          movzx   eax,al                                          ;function
  2827                                                          shl     eax,2                                           ;offset into table
  2828                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2829                                  svc90                   iretd                                                   ;return from interrupt
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831                                  ;
  2832                                  ;       Service Request Table
  2833                                  ;
  2834                                  ;
  2835                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2836                                  ;
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2839                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2840                                                          tsvce   CompareMemory                                   ;compare memory
  2841                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2842                                                          tsvce   FreeMemory                                      ;free memory block
  2843                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2844                                                          tsvce   GetConsoleString                                ;get string input
  2845                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2846                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2847                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2848                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2849                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2850                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2851                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2852                                                          tsvce   PutDayString                                    ;put DD string
  2853                                                          tsvce   PutHourString                                   ;put hh string
  2854                                                          tsvce   PutMinuteString                                 ;put mm string
  2855                                                          tsvce   PutMonthString                                  ;put MM string
  2856                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2857                                                          tsvce   PutSecondString                                 ;put ss string
  2858                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2859                                                          tsvce   PutWeekdayString                                ;put weekday string
  2860                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2861                                                          tsvce   PutYearString                                   ;put YYYY string
  2862                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2863                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2864                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2865                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2866                                                          tsvce   UpperCaseString                                 ;upper-case string
  2867                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869                                  ;
  2870                                  ;       Service Request Macros
  2871                                  ;
  2872                                  ;       These macros provide positional parameterization of service request calls.
  2873                                  ;
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  %macro                  allocateMemory 1
  2876                                                          mov     ecx,%1                                          ;bytes to allocate
  2877                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2878                                                          int     _svc                                            ;invoke OS service
  2879                                  %endmacro
  2880                                  %macro                  clearConsoleScreen 0
  2881                                                          mov     al,eClearConsoleScreen                          ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  compareMemory 0
  2885                                                          mov     al,eCompareMemory                               ;function code
  2886                                                          int     _svc                                            ;invoke OS service
  2887                                  %endmacro
  2888                                  %macro                  decimalToUnsigned 0
  2889                                                          mov     al,eDecimalToUnsigned                           ;function code
  2890                                                          int     _svc                                            ;invoke OS servie
  2891                                  %endmacro
  2892                                  %macro                  freeMemory 1
  2893                                                          mov     edx,%1                                          ;address of memory block
  2894                                                          mov     al,eFreeMemory                                  ;function code
  2895                                                          int     _svc                                            ;invoke OS service
  2896                                  %endmacro
  2897                                  %macro                  getBaseMemSize 0
  2898                                                          mov     al,eGetBaseMemSize                              ;function code
  2899                                                          int     _svc                                            ;invoke OS service
  2900                                  %endmacro
  2901                                  %macro                  getConsoleString 4
  2902                                                          mov     edx,%1                                          ;buffer address
  2903                                                          mov     ecx,%2                                          ;max characters
  2904                                                          mov     bh,%3                                           ;echo indicator
  2905                                                          mov     bl,%4                                           ;terminator
  2906                                                          mov     al,eGetConsoleString                            ;function code
  2907                                                          int     _svc                                            ;invoke OS service
  2908                                  %endmacro
  2909                                  %macro                  getExtendedMemSize 0
  2910                                                          mov     al,eGetExtendedMemSize                          ;function code
  2911                                                          int     _svc                                            ;invoke OS service
  2912                                  %endmacro
  2913                                  %macro                  getROMMemSize 0
  2914                                                          mov     al,eGetROMMemSize                               ;function code
  2915                                                          int     _svc                                            ;invoke OS service
  2916                                  %endmacro
  2917                                  %macro                  hexadecimalToUnsigned 0
  2918                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2919                                                          int     _svc                                            ;invoke OS service
  2920                                  %endmacro
  2921                                  %macro                  isLeapYear 1
  2922                                                          mov     ebx,%1                                          ;DATETIME addr
  2923                                                          mov     al,eIsLeapYear                                  ;function code
  2924                                                          int     _svc                                            ;invoke OS service
  2925                                  %endmacro
  2926                                  %macro                  placeCursor 0
  2927                                                          mov     al,ePlaceCursor                                 ;function code
  2928                                                          int     _svc                                            ;invoke OS service
  2929                                  %endmacro
  2930                                  %macro                  putConsoleString 1
  2931                                                          mov     edx,%1                                          ;string address
  2932                                                          mov     al,ePutConsoleString                            ;function code
  2933                                                          int     _svc                                            ;invoke OS service
  2934                                  %endmacro
  2935                                  %macro                  putDateString 0
  2936                                                          mov     al,ePutDateString                               ;function code
  2937                                                          int     _svc                                            ;invoke OS service
  2938                                  %endmacro
  2939                                  %macro                  putDateString 2
  2940                                                          mov     ebx,%1                                          ;DATETIME addr
  2941                                                          mov     edx,%2                                          ;output buffer addr
  2942                                                          mov     al,ePutDateString                               ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  putDayString 2
  2946                                                          mov     ebx,%1                                          ;DATETIME addr
  2947                                                          mov     edx,%2                                          ;output buffer addr
  2948                                                          mov     al,ePutDayString                                ;function code
  2949                                                          int     _svc                                            ;invoke OS service
  2950                                  %endmacro
  2951                                  %macro                  putHourString 2
  2952                                                          mov     ebx,%1                                          ;DATETIME addr
  2953                                                          mov     edx,%2                                          ;output buffer addr
  2954                                                          mov     al,ePutHourString                               ;function code
  2955                                                          int     _svc                                            ;invoke OS service
  2956                                  %endmacro
  2957                                  %macro                  putMinuteString 2
  2958                                                          mov     ebx,%1                                          ;DATETIME addr
  2959                                                          mov     edx,%2                                          ;output buffer addr
  2960                                                          mov     al,ePutMinuteString                             ;function code
  2961                                                          int     _svc                                            ;invoke OS service
  2962                                  %endmacro
  2963                                  %macro                  putMonthString 2
  2964                                                          mov     ebx,%1                                          ;DATETIME addr
  2965                                                          mov     edx,%2                                          ;output buffer addr
  2966                                                          mov     al,ePutMonthString                              ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  putMonthNameString 2
  2970                                                          mov     ebx,%1                                          ;DATETIME addr
  2971                                                          mov     edx,%2                                          ;output buffer addr
  2972                                                          mov     al,ePutMonthNameString                          ;function code
  2973                                                          int     _svc                                            ;invoke OS service
  2974                                  %endmacro
  2975                                  %macro                  putSecondString 2
  2976                                                          mov     ebx,%1                                          ;DATETIME addr
  2977                                                          mov     edx,%2                                          ;output buffer addr
  2978                                                          mov     al,ePutSecondString                             ;function code
  2979                                                          int     _svc                                            ;invoke OS service
  2980                                  %endmacro
  2981                                  %macro                  putTimeString 0
  2982                                                          mov     al,ePutTimeString                               ;function code
  2983                                                          int     _svc                                            ;invoke OS service
  2984                                  %endmacro
  2985                                  %macro                  putTimeString 2
  2986                                                          mov     ebx,%1                                          ;DATETIME addr
  2987                                                          mov     edx,%2                                          ;output buffer addr
  2988                                                          mov     al,ePutTimeString                               ;function code
  2989                                                          int     _svc                                            ;invoke OS service
  2990                                  %endmacro
  2991                                  %macro                  putWeekdayString 2
  2992                                                          mov     ebx,%1                                          ;DATETIME addr
  2993                                                          mov     edx,%2                                          ;output buffer addr
  2994                                                          mov     al,ePutWeekdayString                            ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  putWeekdayNameString 2
  2998                                                          mov     ebx,%1                                          ;DATETIME addr
  2999                                                          mov     edx,%2                                          ;output buffer addr
  3000                                                          mov     al,ePutWeekdayNameString                        ;function code
  3001                                                          int     _svc                                            ;invoke OS service
  3002                                  %endmacro
  3003                                  %macro                  putYearString 2
  3004                                                          mov     ebx,%1                                          ;DATETIME addr
  3005                                                          mov     edx,%2                                          ;output buffer addr
  3006                                                          mov     al,ePutYearString                               ;function code
  3007                                                          int     _svc                                            ;invoke OS service
  3008                                  %endmacro
  3009                                  %macro                  readRealTimeClock 0
  3010                                                          mov     al,eReadRealTimeClock                           ;function code
  3011                                                          int     _svc                                            ;invoke OS service
  3012                                  %endmacro
  3013                                  %macro                  readRealTimeClock 1
  3014                                                          mov     ebx,%1                                          ;DATETIME addr
  3015                                                          mov     al,eReadRealTimeClock                           ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  %macro                  resetSystem 0
  3019                                                          mov     al,eResetSystem                                 ;function code
  3020                                                          int     _svc                                            ;invoke OS service
  3021                                  %endmacro
  3022                                  %macro                  unsignedToDecimalString 0
  3023                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3024                                                          int     _svc                                            ;invoke OS service
  3025                                  %endmacro
  3026                                  %macro                  unsignedToHexadecimal 0
  3027                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3028                                                          int     _svc                                            ;invoke OS service
  3029                                  %endmacro
  3030                                  %macro                  upperCaseString 0
  3031                                                          mov     al,eUpperCaseString                             ;function code
  3032                                                          int     _svc                                            ;invoke OS service
  3033                                  %endmacro
  3034                                  ;=======================================================================================================================
  3035                                  ;
  3036                                  ;       Kernel Function Library
  3037                                  ;
  3038                                  ;=======================================================================================================================
  3039                                  ;=======================================================================================================================
  3040                                  ;
  3041                                  ;       Date and Time Helper Routines
  3042                                  ;
  3043                                  ;       GetYear
  3044                                  ;       IsLeapYear
  3045                                  ;       PutDateString
  3046                                  ;       PutDayString
  3047                                  ;       PutHourString
  3048                                  ;       PutMinuteString
  3049                                  ;       PutMonthString
  3050                                  ;       PutMonthNameString
  3051                                  ;       PutSecondString
  3052                                  ;       PutTimeString
  3053                                  ;       PutWeekdayString
  3054                                  ;       PutWeekdayNameString
  3055                                  ;       PutYearString
  3056                                  ;
  3057                                  ;=======================================================================================================================
  3058                                  ;-----------------------------------------------------------------------------------------------------------------------
  3059                                  ;
  3060                                  ;       Routine:        GetYear
  3061                                  ;
  3062                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3063                                  ;
  3064                                  ;       In:             DS:EBX  DATETIME address
  3065                                  ;
  3066                                  ;       Out:            ECX     year
  3067                                  ;
  3068                                  ;-----------------------------------------------------------------------------------------------------------------------
  3069                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3070                                                          imul    ecx,100                                         ;century * 100
  3071                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3072                                                          add     ecx,eax                                         ;year (YYYY)
  3073                                                          ret                                                     ;return
  3074                                  ;-----------------------------------------------------------------------------------------------------------------------
  3075                                  ;
  3076                                  ;       Routine:        IsLeapYear
  3077                                  ;
  3078                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3079                                  ;
  3080                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3081                                  ;
  3082                                  ;       Out:            ECX     0 = not a leap year
  3083                                  ;                               1 = leap year
  3084                                  ;
  3085                                  ;-----------------------------------------------------------------------------------------------------------------------
  3086                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3087                                                          mov     eax,ecx                                         ;EAX = YYYY
  3088                                                          xor     ecx,ecx                                         ;assume not leap year
  3089                                                          test    al,00000011b                                    ;multiple of four?
  3090                                                          jnz     .no                                             ;no, branch
  3091                                                          mov     dl,100                                          ;divisor
  3092                                                          div     dl                                              ;divide by 100
  3093                                                          test    ah,ah                                           ;multiple of 100?
  3094                                                          jnz     .yes                                            ;yes, branch
  3095                                                          test    al,00000011b                                    ;multiple of 400?
  3096                                                          jnz     .no                                             ;no, branch
  3097                                  .yes                    inc     ecx                                             ;indicate leap
  3098                                  .no                     ret                                                     ;return
  3099                                  ;-----------------------------------------------------------------------------------------------------------------------
  3100                                  ;
  3101                                  ;       Routine:        PutDateString
  3102                                  ;
  3103                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3104                                  ;                       structure at ds:ebx.
  3105                                  ;
  3106                                  ;       In:             DS:EBX  DATETIME address
  3107                                  ;                       DS:EDX  output buffer address
  3108                                  ;
  3109                                  ;-----------------------------------------------------------------------------------------------------------------------
  3110                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3111                                                          push    edi                                             ;
  3112                                                          push    es                                              ;
  3113                                                          push    ds                                              ;store data selector ...
  3114                                                          pop     es                                              ;... in extra segment reg
  3115                                                          mov     edi,edx                                         ;output buffer address
  3116                                                          mov     cl,10                                           ;divisor
  3117                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3118                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3119                                                          div     cl                                              ;AH = rem; AL = quotient
  3120                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3121                                                          cld                                                     ;forward strings
  3122                                                          stosd                                                   ;store "mm/"nul
  3123                                                          dec     edi                                             ;address of terminator
  3124                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3125                                                          div     cl                                              ;AH = rem; AL = quotient
  3126                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3127                                                          stosd                                                   ;store "dd/"nul
  3128                                                          dec     edi                                             ;address of terminator
  3129                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3130                                                          div     cl                                              ;AH = rem; AL = quotient
  3131                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3132                                                          stosd                                                   ;store "cc/"null
  3133                                                          dec     edi                                             ;address of terminator
  3134                                                          dec     edi                                             ;address of delimiter
  3135                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3136                                                          div     cl                                              ;AH = rem; AL = quotient
  3137                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3138                                                          stosb                                                   ;store quotient
  3139                                                          mov     al,ah                                           ;remainder
  3140                                                          stosb                                                   ;store remainder
  3141                                                          xor     al,al                                           ;null terminator
  3142                                                          stosb                                                   ;store terminator
  3143                                                          pop     es                                              ;restore non-volatile regs
  3144                                                          pop     edi                                             ;
  3145                                                          pop     ecx                                             ;
  3146                                                          ret                                                     ;return
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148                                  ;
  3149                                  ;       Routine:        PutDayString
  3150                                  ;
  3151                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3152                                  ;                       structure at ds:ebx.
  3153                                  ;
  3154                                  ;       In:             DS:EBX  DATETIME address
  3155                                  ;                       DS:EDX  output buffer address
  3156                                  ;
  3157                                  ;-----------------------------------------------------------------------------------------------------------------------
  3158                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3159                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3160                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3161                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3162                                                          pop     ecx                                             ;
  3163                                                          ret                                                     ;return
  3164                                  ;-----------------------------------------------------------------------------------------------------------------------
  3165                                  ;
  3166                                  ;       Routine:        PutHourString
  3167                                  ;
  3168                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3169                                  ;                       structure at ds:ebx.
  3170                                  ;
  3171                                  ;       In:             DS:EBX  DATETIME address
  3172                                  ;                       DS:EDX  output buffer address
  3173                                  ;
  3174                                  ;-----------------------------------------------------------------------------------------------------------------------
  3175                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3176                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3177                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3178                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3179                                                          pop     ecx                                             ;
  3180                                                          ret                                                     ;return
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;       Routine:        PutMinuteString
  3184                                  ;
  3185                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3186                                  ;                       structure at ds:ebx.
  3187                                  ;
  3188                                  ;       In:             DS:EBX  DATETIME address
  3189                                  ;                       DS:EDX  output buffer address
  3190                                  ;
  3191                                  ;-----------------------------------------------------------------------------------------------------------------------
  3192                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3193                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3194                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3195                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3196                                                          pop     ecx                                             ;
  3197                                                          ret                                                     ;return
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199                                  ;
  3200                                  ;       Routine:        PutMonthString
  3201                                  ;
  3202                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3203                                  ;                       structure at ds:ebx.
  3204                                  ;
  3205                                  ;       In:             DS:EBX  DATETIME address
  3206                                  ;                       DS:EDX  output buffer address
  3207                                  ;
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3210                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3211                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3212                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3213                                                          pop     ecx                                             ;
  3214                                                          ret                                                     ;return
  3215                                  ;-----------------------------------------------------------------------------------------------------------------------
  3216                                  ;
  3217                                  ;       Routine:        PutMonthNameString
  3218                                  ;
  3219                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3220                                  ;                       structure at ds:ebx.
  3221                                  ;
  3222                                  ;       In:             DS:EBX  DATETIME address
  3223                                  ;                       DS:EDX  output buffer address
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3227                                                          push    edi                                             ;
  3228                                                          push    ds                                              ;
  3229                                                          push    es                                              ;
  3230                                                          push    ds                                              ;load data selector ...
  3231                                                          pop     es                                              ;... into extra segment
  3232                                                          mov     edi,edx                                         ;output buffer address
  3233                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3234                                                          dec     eax                                             ;month (0-11)
  3235                                                          shl     eax,2                                           ;offset into month name lookup table
  3236                                                          push    cs                                              ;load code selector ...
  3237                                                          pop     ds                                              ;... into data segment
  3238                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3239                                                          cld                                                     ;forward strings
  3240                                  .10                     lodsb                                                   ;name character
  3241                                                          stosb                                                   ;store in output buffer
  3242                                                          test    al,al                                           ;end of string?
  3243                                                          jnz     .10                                             ;no, continue
  3244                                                          pop     es                                              ;restore non-volatile regs
  3245                                                          pop     ds                                              ;
  3246                                                          pop     edi                                             ;
  3247                                                          pop     esi                                             ;
  3248                                                          ret                                                     ;return
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                  ;
  3251                                  ;       Routine:        PutSecondString
  3252                                  ;
  3253                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3254                                  ;                       structure at ds:ebx.
  3255                                  ;
  3256                                  ;       In:             DS:EBX  DATETIME address
  3257                                  ;                       DS:EDX  output buffer address
  3258                                  ;
  3259                                  ;-----------------------------------------------------------------------------------------------------------------------
  3260                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3261                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3262                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3263                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3264                                                          pop     ecx                                             ;
  3265                                                          ret                                                     ;return
  3266                                  ;-----------------------------------------------------------------------------------------------------------------------
  3267                                  ;
  3268                                  ;       Routine:        PutTimeString
  3269                                  ;
  3270                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3271                                  ;                       structure at ds:ebx.
  3272                                  ;
  3273                                  ;       In:             DS:EBX  DATETIME address
  3274                                  ;                       DS:EDX  output buffer address
  3275                                  ;
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3278                                                          push    edi                                             ;
  3279                                                          push    es                                              ;
  3280                                                          push    ds                                              ;store data selector ...
  3281                                                          pop     es                                              ;... in extra segment reg
  3282                                                          mov     edi,edx                                         ;output buffer address
  3283                                                          mov     cl,10                                           ;divisor
  3284                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3285                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3286                                                          div     cl                                              ;ah = rem; al = quotient
  3287                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3288                                                          cld                                                     ;forward strings
  3289                                                          stosd                                                   ;store "mm/"nul
  3290                                                          dec     edi                                             ;address of terminator
  3291                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3292                                                          div     cl                                              ;ah = rem; al = quotient
  3293                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3294                                                          stosd                                                   ;store "dd/"nul
  3295                                                          dec     edi                                             ;address of terminator
  3296                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3297                                                          div     cl                                              ;ah = rem; al = quotient
  3298                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3299                                                          stosb                                                   ;store quotient
  3300                                                          mov     al,ah                                           ;remainder
  3301                                                          stosb                                                   ;store remainder
  3302                                                          xor     al,al                                           ;null terminator
  3303                                                          stosb                                                   ;store terminator
  3304                                                          pop     es                                              ;restore non-volatile regs
  3305                                                          pop     edi                                             ;
  3306                                                          pop     ecx                                             ;
  3307                                                          ret                                                     ;return
  3308                                  ;-----------------------------------------------------------------------------------------------------------------------
  3309                                  ;
  3310                                  ;       Routine:        PutWeekdayString
  3311                                  ;
  3312                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3313                                  ;                       structure at ds:ebx.
  3314                                  ;
  3315                                  ;       In:             DS:EBX  DATETIME address
  3316                                  ;                       DS:EDX  output buffer address
  3317                                  ;
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3320                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3321                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3322                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3323                                                          pop     ecx                                             ;
  3324                                                          ret                                                     ;return
  3325                                  ;-----------------------------------------------------------------------------------------------------------------------
  3326                                  ;
  3327                                  ;       Routine:        PutWeekdayNameString
  3328                                  ;
  3329                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3330                                  ;                       structure at ds:ebx.
  3331                                  ;
  3332                                  ;       In:             DS:EBX  DATETIME address
  3333                                  ;                       DS:EDX  output buffer address
  3334                                  ;
  3335                                  ;-----------------------------------------------------------------------------------------------------------------------
  3336                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3337                                                          push    edi                                             ;
  3338                                                          push    ds                                              ;
  3339                                                          push    es                                              ;
  3340                                                          push    ds                                              ;load data selector ...
  3341                                                          pop     es                                              ;... into extra segment
  3342                                                          mov     edi,edx                                         ;output buffer address
  3343                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3344                                                          shl     eax,2                                           ;offset into day name lookup table
  3345                                                          push    cs                                              ;load code selector ...
  3346                                                          pop     ds                                              ;... into data segment
  3347                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3348                                                          cld                                                     ;forward strings
  3349                                  .10                     lodsb                                                   ;name character
  3350                                                          stosb                                                   ;store in output buffer
  3351                                                          test    al,al                                           ;end of string?
  3352                                                          jnz     .10                                             ;no, continue
  3353                                                          pop     es                                              ;restore non-volatile regs
  3354                                                          pop     ds                                              ;
  3355                                                          pop     edi                                             ;
  3356                                                          pop     esi                                             ;
  3357                                                          ret                                                     ;return
  3358                                  ;-----------------------------------------------------------------------------------------------------------------------
  3359                                  ;
  3360                                  ;       Routine:        PutYearString
  3361                                  ;
  3362                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3363                                  ;                       structure at ds:ebx.
  3364                                  ;
  3365                                  ;       In:             DS:EBX  DATETIME address
  3366                                  ;                       DS:EDX  output buffer address
  3367                                  ;
  3368                                  ;-----------------------------------------------------------------------------------------------------------------------
  3369                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3370                                                          call    GetYear                                         ;ECX = YYYY
  3371                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3372                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3373                                                          pop     ecx                                             ;restore non-volatile regs
  3374                                                          ret                                                     ;return
  3375                                  ;-----------------------------------------------------------------------------------------------------------------------
  3376                                  ;
  3377                                  ;       Day Names
  3378                                  ;
  3379                                  ;-----------------------------------------------------------------------------------------------------------------------
  3380                                  czSunday                db      "Sunday",0
  3381                                  czMonday                db      "Monday",0
  3382                                  czTuesday               db      "Tuesday",0
  3383                                  czWednesday             db      "Wednesday",0
  3384                                  czThursday              db      "Thursday",0
  3385                                  czFriday                db      "Friday",0
  3386                                  czSaturday              db      "Saturday",0
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  ;
  3389                                  ;       Month Names
  3390                                  ;
  3391                                  ;-----------------------------------------------------------------------------------------------------------------------
  3392                                  czJanuary               db      "January",0
  3393                                  czFebruary              db      "February",0
  3394                                  czMarch                 db      "March",0
  3395                                  czApril                 db      "April",0
  3396                                  czMay                   db      "May",0
  3397                                  czJune                  db      "June",0
  3398                                  czJuly                  db      "July",0
  3399                                  czAugust                db      "August",0
  3400                                  czSeptember             db      "September",0
  3401                                  czOctober               db      "October",0
  3402                                  czNovember              db      "November",0
  3403                                  czDecember              db      "December",0
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Day Names Lookup Table
  3407                                  ;
  3408                                  ;-----------------------------------------------------------------------------------------------------------------------
  3409                                                          align   4
  3410                                  tDayNames               equ     $
  3411                                                          dd      czSunday
  3412                                                          dd      czMonday
  3413                                                          dd      czTuesday
  3414                                                          dd      czWednesday
  3415                                                          dd      czThursday
  3416                                                          dd      czFriday
  3417                                                          dd      czSaturday
  3418                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3419                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421                                  ;
  3422                                  ;       Month Names Lookup Table
  3423                                  ;
  3424                                  ;-----------------------------------------------------------------------------------------------------------------------
  3425                                                          align   4
  3426                                  tMonthNames             equ     $
  3427                                                          dd      czJanuary
  3428                                                          dd      czFebruary
  3429                                                          dd      czMarch
  3430                                                          dd      czApril
  3431                                                          dd      czMay
  3432                                                          dd      czJune
  3433                                                          dd      czJuly
  3434                                                          dd      czAugust
  3435                                                          dd      czSeptember
  3436                                                          dd      czOctober
  3437                                                          dd      czNovember
  3438                                                          dd      czDecember
  3439                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3440                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3441                                  ;=======================================================================================================================
  3442                                  ;
  3443                                  ;       Memory Helper Routines
  3444                                  ;
  3445                                  ;       AllocateMemory
  3446                                  ;       FreeMemory
  3447                                  ;
  3448                                  ;=======================================================================================================================
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ;
  3451                                  ;       Routine:        AllocateMemory
  3452                                  ;
  3453                                  ;       Description:    This routine allocates a memory block for the given task.
  3454                                  ;
  3455                                  ;       In:             ECX     bytes of memory to allocate
  3456                                  ;
  3457                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3458                                  ;                               0       unable to allocate memory
  3459                                  ;
  3460                                  ;-----------------------------------------------------------------------------------------------------------------------
  3461                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3462                                                          push    ecx                                             ;
  3463                                                          push    esi                                             ;
  3464                                                          push    ds                                              ;
  3465                                  ;
  3466                                  ;       Address kernel memory structures
  3467                                  ;
  3468                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3469                                                          pop     ds                                              ;... into data segment reg
  3470                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3471                                  ;
  3472                                  ;       Set requested size to minimum block size if requested size is too small.
  3473                                  ;
  3474                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3475                                                          jae     .10                                             ;no, branch
  3476                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3477                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3478                                  ;
  3479                                  ;       Find the first free memory block large enough to satisfy the request.
  3480                                  ;
  3481                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3482                                  .20                     test    eax,eax                                         ;end of free block chain?
  3483                                                          jz      .220                                            ;yes, branch
  3484                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3485                                                          jbe     .30                                             ;yes, branch
  3486                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3487                                                          jmp     .20                                             ;continue
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                  ;
  3490                                  ;       Address the previous and next free memory blocks.
  3491                                  ;
  3492                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3493                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3494                                  ;
  3495                                  ;       Remove the free memory block from the forward free memory block chain.
  3496                                  ;
  3497                                                          test    ebx,ebx                                         ;any previous free memory block?
  3498                                                          jz      .40                                             ;no, branch
  3499                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3500                                                          jmp     .50                                             ;continue
  3501                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3502                                  ;
  3503                                  ;       Remove the free memory block from the reverse free memory block chain.
  3504                                  ;
  3505                                  .50                     test    edx,edx                                         ;any next free memory block?
  3506                                                          jz      .60                                             ;no, branch
  3507                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3508                                                          jmp     .70                                             ;continue
  3509                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  ;
  3512                                  ;       Determine if the free memory block can be split.
  3513                                  ;
  3514                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3515                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3516                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3517                                                          jb      .150                                            ;no, branch
  3518                                  ;
  3519                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3520                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3521                                  ;       of the requested memory size.
  3522                                  ;
  3523                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3524                                                          mov     edx,eax                                         ;memory block address
  3525                                                          add     edx,ecx                                         ;address new new next contig block
  3526                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3527                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3528                                  ;
  3529                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3530                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3531                                  ;
  3532                                                          jecxz   .80                                             ;no next contig, branch
  3533                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3534                                                          jmp     .90                                             ;continue
  3535                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3536                                  ;
  3537                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3538                                  ;
  3539                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3540                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3541                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3542                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3543                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3544                                                          xor     ebx,ebx                                         ;zero register
  3545                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3546                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3547                                  ;
  3548                                  ;       Find the proper location in the free block chain for the new free block
  3549                                  ;
  3550                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3551                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3552                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3553                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3554                                                          jbe     .110                                            ;yes, branch
  3555                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3556                                                          jmp     .100                                            ;continue
  3557                                  ;
  3558                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3559                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3560                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3561                                  ;       block of hte next block, if there is one.
  3562                                  ;
  3563                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3564                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3565                                                          jecxz   .120                                            ;branch if no next block
  3566                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3567                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3568                                                          jmp     .130                                            ;continue
  3569                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3570                                  ;
  3571                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3572                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3573                                  ;       last user block pointers if necessary.
  3574                                  ;
  3575                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3576                                                          test    ebx,ebx                                         ;is there a previous block?
  3577                                                          jz      .140                                            ;no, branch
  3578                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3579                                                          jmp     .150                                            ;continue
  3580                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3581                                  ;
  3582                                  ;       Update the newly allocated block's owner and signature.
  3583                                  ;
  3584                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3585                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3586                                                          xor     edx,edx                                         ;zero register
  3587                                                          str     dx                                              ;load the task state register
  3588                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3589                                  ;
  3590                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3591                                  ;
  3592                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3593                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3594                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3595                                                          jb      .180                                            ;branch if block belongs to next task
  3596                                                          je      .170                                            ;branch if block belongs to this task
  3597                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3598                                                          jmp     .160                                            ;continue
  3599                                  ;
  3600                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3601                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3602                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3603                                  ;       place to insert the block.
  3604                                  ;
  3605                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3606                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3607                                                          jbe     .180                                            ;yes, branch
  3608                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3609                                                          test    ecx,ecx                                         ;end of chain?
  3610                                                          jz      .180                                            ;yes, branch
  3611                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3612                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3613                                                          je      .170                                            ;yes, continue search
  3614                                  ;
  3615                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3616                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3617                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3618                                  ;       do have a previous-block, we update that block's next-block pointer.
  3619                                  ;
  3620                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3621                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3622                                                          jecxz   .190                                            ;branch if no next-task block
  3623                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3624                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3625                                                          jmp     .200                                            ;continue
  3626                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3627                                  ;
  3628                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3629                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3630                                  ;       global first and/or last user-block pointers if necessary.
  3631                                  ;
  3632                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3633                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3634                                                          jz      .210                                            ;no, branch
  3635                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3636                                                          jmp     .220                                            ;continue
  3637                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3638                                  ;
  3639                                  ;       Restore registers and return to caller.
  3640                                  ;
  3641                                  .220                    pop     ds                                              ;restore non-volatie regs
  3642                                                          pop     esi                                             ;
  3643                                                          pop     ecx                                             ;
  3644                                                          pop     ebx                                             ;
  3645                                                          ret                                                     ;return
  3646                                  ;-----------------------------------------------------------------------------------------------------------------------
  3647                                  ;
  3648                                  ;       Routine:        FreeMemory
  3649                                  ;
  3650                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3651                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3652                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3653                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3654                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3655                                  ;
  3656                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3657                                  ;
  3658                                  ;       Out:            EAX     -1      invalid memory block
  3659                                  ;                               0       memory block freed
  3660                                  ;
  3661                                  ;-----------------------------------------------------------------------------------------------------------------------
  3662                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3663                                                          push    ecx                                             ;
  3664                                                          push    esi                                             ;
  3665                                                          push    edi                                             ;
  3666                                                          push    ds                                              ;
  3667                                                          push    es                                              ;
  3668                                  ;
  3669                                  ;       Address the root memory structure
  3670                                  ;
  3671                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3672                                                          pop     es                                              ;... into extra segment reg
  3673                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3674                                                          pop     ds                                              ;... into data segment reg
  3675                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3676                                                          mov     edi,edx                                         ;memory block address
  3677                                  ;
  3678                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3679                                  ;
  3680                                                          xor     eax,eax                                         ;indicate success
  3681                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3682                                                          je      .240                                            ;yes, branch
  3683                                                          dec     eax                                             ;indicate failure
  3684                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3685                                                          jne     .240                                            ;no, branch
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  ;
  3688                                  ;       Unlink the USER memory block.
  3689                                  ;
  3690                                  ;-----------------------------------------------------------------------------------------------------------------------
  3691                                  ;
  3692                                  ;       Set the block signature. Reset owner.
  3693                                  ;
  3694                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3695                                                          xor     eax,eax                                         ;zero register
  3696                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3697                                  ;
  3698                                  ;       Wipe user area.
  3699                                  ;
  3700                                                          push    edi                                             ;save block address
  3701                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3702                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3703                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3704                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3705                                                          rep     stosb                                           ;clear memory
  3706                                                          pop     edi                                             ;restore block address
  3707                                  ;
  3708                                  ;       Address the preceding and following USER memory blocks
  3709                                  ;
  3710                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3711                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3712                                  ;
  3713                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3714                                  ;       pointer to point to the USER block following this block.
  3715                                  ;
  3716                                                          test    ebx,ebx                                         ;is there a previous block?
  3717                                                          jz      .10                                             ;no, branch
  3718                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3719                                                          jmp     .20                                             ;continue
  3720                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3721                                  ;
  3722                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3723                                  ;       pointer to point to the USER block preceding this block.
  3724                                  ;
  3725                                  .20                     jecxz   .30                                             ;branch if no next block
  3726                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3727                                                          jmp     .40                                             ;continue
  3728                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3729                                  ;-----------------------------------------------------------------------------------------------------------------------
  3730                                  ;
  3731                                  ;       Merge with a previous contiguous FREE memory block.
  3732                                  ;
  3733                                  ;-----------------------------------------------------------------------------------------------------------------------
  3734                                  ;
  3735                                  ;       Address the preceding and following contiguous memory blocks.
  3736                                  ;
  3737                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3738                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3739                                  ;
  3740                                  ;       Verify we have a previous contiguous FREE block.
  3741                                  ;
  3742                                                          test    ebx,ebx                                         ;is there a previous block?
  3743                                                          jz      .100                                            ;no, branch
  3744                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3745                                                          jne     .100                                            ;no, branch
  3746                                  ;
  3747                                  ;       Update adjacent block's contiguous pointers.
  3748                                  ;
  3749                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3750                                                          jecxz   .50                                             ;branch if no next contiguous block
  3751                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3752                                                          jmp     .60                                             ;continue
  3753                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3754                                  ;
  3755                                  ;       Update the size of the merged FREE block.
  3756                                  ;
  3757                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3758                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3759                                  ;
  3760                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3761                                  ;
  3762                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3763                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3764                                                          rep     stosb                                           ;clear memory header
  3765                                                          mov     edi,ebx                                         ;current block is now previous block
  3766                                  ;-----------------------------------------------------------------------------------------------------------------------
  3767                                  ;
  3768                                  ;       Unlink the previous contiguous FREE memory block
  3769                                  ;
  3770                                  ;-----------------------------------------------------------------------------------------------------------------------
  3771                                  ;
  3772                                  ;       Address the preceding and following USER memory blocks
  3773                                  ;
  3774                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3775                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3776                                  ;
  3777                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3778                                  ;       block pointer.
  3779                                  ;
  3780                                                          test    ebx,ebx                                         ;is there a previous block?
  3781                                                          jz      .70                                             ;no, branch
  3782                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3783                                                          jmp     .80                                             ;branch
  3784                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3785                                  ;
  3786                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3787                                  ;       pointer.
  3788                                  ;
  3789                                  .80                     jecxz   .90                                             ;branch if no next block
  3790                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3791                                                          jmp     .100                                            ;continue
  3792                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3793                                  ;-----------------------------------------------------------------------------------------------------------------------
  3794                                  ;
  3795                                  ;       Merge with a following contiguous FREE memory block.
  3796                                  ;
  3797                                  ;-----------------------------------------------------------------------------------------------------------------------
  3798                                  ;
  3799                                  ;       Verify we have a following contiguous FREE block.
  3800                                  ;
  3801                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3802                                                          jecxz   .170                                            ;branch if no next contiguous block
  3803                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3804                                                          jne     .170                                            ;no, branch
  3805                                  ;
  3806                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3807                                  ;
  3808                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3809                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3810                                  ;
  3811                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3812                                  ;
  3813                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3814                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3815                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3816                                                          jz      .110                                            ;no, branch
  3817                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3818                                                          jmp     .120                                            ;continue
  3819                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3820                                  ;-----------------------------------------------------------------------------------------------------------------------
  3821                                  ;
  3822                                  ;       Unlink the following contiguous FREE memory block
  3823                                  ;
  3824                                  ;-----------------------------------------------------------------------------------------------------------------------
  3825                                  ;
  3826                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3827                                  ;
  3828                                  .120                    push    edi                                             ;save this block
  3829                                                          mov     edi,ecx                                         ;next contiguous block
  3830                                                          push    ecx                                             ;save next contiguous block
  3831                                  ;
  3832                                  ;       Address the preceding and following USER memory blocks
  3833                                  ;
  3834                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3835                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3836                                  ;
  3837                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3838                                  ;       block pointer.
  3839                                  ;
  3840                                                          test    ebx,ebx                                         ;is there a previous block?
  3841                                                          jz      .130                                            ;no, branch
  3842                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3843                                                          jmp     .140                                            ;branch
  3844                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3845                                  ;
  3846                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3847                                  ;       pointer.
  3848                                  ;
  3849                                  .140                    jecxz   .150                                            ;branch if no next block
  3850                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3851                                                          jmp     .160                                            ;continue
  3852                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3853                                  ;
  3854                                  ;       Clear next contiguous block's header
  3855                                  ;
  3856                                  .160                    pop     edi                                             ;next congiguous block pointer
  3857                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3858                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3859                                                          rep     stosb                                           ;clear memory header
  3860                                                          pop     edi                                             ;this block's pointer
  3861                                  ;-----------------------------------------------------------------------------------------------------------------------
  3862                                  ;
  3863                                  ;       Insert the final FREE block back into the block chain.
  3864                                  ;
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ;
  3867                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3868                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3869                                  ;       all are smaller in size.
  3870                                  ;
  3871                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3872                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3873                                  .180                    jecxz   .190                                            ;exit if no ptr
  3874                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3875                                                          jb      .190                                            ;yes, branch
  3876                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3877                                                          jmp     .180                                            ;continue
  3878                                  ;
  3879                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3880                                  ;       larger free block. Update the next block's previous block pointer.
  3881                                  ;
  3882                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3883                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3884                                                          jecxz   .200                                            ;branch if no block found
  3885                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3886                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3887                                                          jmp     .210                                            ;continue
  3888                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3889                                  ;
  3890                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3891                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3892                                  ;       next pointer.
  3893                                  ;
  3894                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3895                                                          test    ebx,ebx                                         ;do we have a previous block?
  3896                                                          jz      .220                                            ;no, branch
  3897                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3898                                                          jmp     .230                                            ;continue
  3899                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3900                                  ;
  3901                                  ;       The memory free has completed.
  3902                                  ;
  3903                                  .230                    xor     eax,eax                                         ;indicate success
  3904                                  ;
  3905                                  ;       Restore and return.
  3906                                  ;
  3907                                  .240                    pop     es                                              ;restore non-volatile regs
  3908                                                          pop     ds                                              ;
  3909                                                          pop     edi                                             ;
  3910                                                          pop     esi                                             ;
  3911                                                          pop     ecx                                             ;
  3912                                                          pop     ebx                                             ;
  3913                                                          ret                                                     ;return
  3914                                  ;=======================================================================================================================
  3915                                  ;
  3916                                  ;       String Helper Routines
  3917                                  ;
  3918                                  ;       CompareMemory
  3919                                  ;       UpperCaseString
  3920                                  ;
  3921                                  ;=======================================================================================================================
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;       Routine:        CompareMemory
  3925                                  ;
  3926                                  ;       Description:    This routine compares two byte arrays.
  3927                                  ;
  3928                                  ;       In:             DS:EDX  first source address
  3929                                  ;                       DS:EBX  second source address
  3930                                  ;                       ECX     comparison length
  3931                                  ;
  3932                                  ;       Out:            EDX     first source address
  3933                                  ;                       EBX     second source address
  3934                                  ;                       ECX     0       array 1 = array 2
  3935                                  ;                               <0      array 1 < array 2
  3936                                  ;                               >0      array 1 > array 2
  3937                                  ;
  3938                                  ;-----------------------------------------------------------------------------------------------------------------------
  3939                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3940                                                          push    edi                                             ;
  3941                                                          push    es                                              ;
  3942                                                          push    ds                                              ;copy DS
  3943                                                          pop     es                                              ;... to ES
  3944                                                          mov     esi,edx                                         ;first source address
  3945                                                          mov     edi,ebx                                         ;second source address
  3946                                                          cld                                                     ;forward strings
  3947                                                          rep     cmpsb                                           ;compare bytes
  3948                                                          mov     al,0                                            ;default result
  3949                                                          jz      .10                                             ;branch if arrays equal
  3950                                                          mov     al,1                                            ;positive result
  3951                                                          jnc     .10                                             ;branch if target > source
  3952                                                          mov     al,-1                                           ;negative result
  3953                                  .10                     movsx   ecx,al                                          ;extend sign
  3954                                                          pop     es                                              ;restore non-volatile regs
  3955                                                          pop     edi                                             ;
  3956                                                          pop     esi                                             ;
  3957                                                          ret                                                     ;return
  3958                                  ;-----------------------------------------------------------------------------------------------------------------------
  3959                                  ;
  3960                                  ;       Routine:        UpperCaseString
  3961                                  ;
  3962                                  ;       Description:    This routine places all characters in the given string to upper case.
  3963                                  ;
  3964                                  ;       In:             DS:EDX  string address
  3965                                  ;
  3966                                  ;       Out:            EDX     string address
  3967                                  ;
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3970                                                          mov     esi,edx                                         ;string address
  3971                                                          cld                                                     ;forward strings
  3972                                  .10                     lodsb                                                   ;string character
  3973                                                          test    al,al                                           ;null?
  3974                                                          jz      .20                                             ;yes, skip ahead
  3975                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3976                                                          jb      .10                                             ;no, continue
  3977                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3978                                                          ja      .10                                             ;no, continue
  3979                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3980                                                          mov     [esi-1],al                                      ;upper character
  3981                                                          jmp     .10                                             ;continue
  3982                                  .20                     pop     esi                                             ;restore non-volatile regs
  3983                                                          ret                                                     ;return
  3984                                  ;=======================================================================================================================
  3985                                  ;
  3986                                  ;       Console Helper Routines
  3987                                  ;
  3988                                  ;       FirstConsoleColumn
  3989                                  ;       GetConsoleChar
  3990                                  ;       GetConsoleString
  3991                                  ;       NextConsoleColumn
  3992                                  ;       NextConsoleRow
  3993                                  ;       PreviousConsoleColumn
  3994                                  ;       PutConsoleChar
  3995                                  ;       PutConsoleHexByte
  3996                                  ;       PutConsoleHexDword
  3997                                  ;       PutConsoleHexWord
  3998                                  ;       PutConsoleOIAChar
  3999                                  ;       PutConsoleOIAShift
  4000                                  ;       PutConsoleString
  4001                                  ;       Yield
  4002                                  ;
  4003                                  ;=======================================================================================================================
  4004                                  ;-----------------------------------------------------------------------------------------------------------------------
  4005                                  ;
  4006                                  ;       Routine:        FirstConsoleColumn
  4007                                  ;
  4008                                  ;       Description:    This routine resets the console column to start of the row.
  4009                                  ;
  4010                                  ;       In:             DS      OS data selector
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4014                                                          mov     [wbConsoleColumn],al                            ;save column
  4015                                                          ret                                                     ;return
  4016                                  ;-----------------------------------------------------------------------------------------------------------------------
  4017                                  ;
  4018                                  ;       Routine:        GetConsoleChar
  4019                                  ;
  4020                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4021                                  ;
  4022                                  ;       Out:            AL      ASCII character code
  4023                                  ;                       AH      keyboard scan code
  4024                                  ;
  4025                                  ;-----------------------------------------------------------------------------------------------------------------------
  4026                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4027                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4028                                                          or      eax,eax                                         ;do we have a message?
  4029                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4030                                                          push    eax                                             ;save key codes
  4031                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4032                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4033                                                          pop     eax                                             ;restore key codes
  4034                                                          jne     GetConsoleChar                                  ;no, try again
  4035                                                          and     eax,0000ffffh                                   ;mask for key codes
  4036                                                          ret                                                     ;return
  4037                                  ;-----------------------------------------------------------------------------------------------------------------------
  4038                                  ;
  4039                                  ;       Routine:        GetConsoleString
  4040                                  ;
  4041                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4042                                  ;
  4043                                  ;       In:             DS:EDX  target buffer address
  4044                                  ;                       ECX     maximum number of characters to accept
  4045                                  ;                       BH      echo to terminal
  4046                                  ;                       BL      terminating character
  4047                                  ;
  4048                                  ;-----------------------------------------------------------------------------------------------------------------------
  4049                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4050                                                          push    esi                                             ;
  4051                                                          push    edi                                             ;
  4052                                                          push    es                                              ;
  4053                                                          push    ds                                              ;load data segment selector ...
  4054                                                          pop     es                                              ;... into extra segment register
  4055                                                          mov     edi,edx                                         ;edi = target buffer
  4056                                                          push    ecx                                             ;save maximum characters
  4057                                                          xor     al,al                                           ;zero register
  4058                                                          cld                                                     ;forward strings
  4059                                                          rep     stosb                                           ;zero fill buffer
  4060                                                          pop     ecx                                             ;maximum characters
  4061                                                          mov     edi,edx                                         ;edi = target buffer
  4062                                                          mov     esi,edx                                         ;esi = target buffer
  4063                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4064                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4065                                                          cmp     al,bl                                           ;is this the terminator?
  4066                                                          je      .50                                             ;yes, exit
  4067                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4068                                                          jne     .30                                             ;no, skip ahead
  4069                                                          cmp     esi,edi                                         ;at start of buffer?
  4070                                                          je      .20                                             ;yes, get next character
  4071                                                          dec     edi                                             ;backup target pointer
  4072                                                          mov     byte [edi],0                                    ;zero previous character
  4073                                                          inc     ecx                                             ;increment remaining chars
  4074                                                          test    bh,1                                            ;echo to console?
  4075                                                          jz      .20                                             ;no, get next character
  4076                                                          call    PreviousConsoleColumn                           ;backup console position
  4077                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4078                                                          call    PutConsoleChar                                  ;write space to console
  4079                                                          call    PlaceCursor                                     ;position the cursor
  4080                                                          jmp     .20                                             ;get next character
  4081                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4082                                                          jb      .20                                             ;no, get another character
  4083                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4084                                                          ja      .20                                             ;no, get another character
  4085                                                          stosb                                                   ;store character in buffer
  4086                                                          test    bh,1                                            ;echo to console?
  4087                                                          jz      .40                                             ;no, skip ahead
  4088                                                          call    PutConsoleChar                                  ;write character to console
  4089                                                          call    NextConsoleColumn                               ;advance console position
  4090                                                          call    PlaceCursor                                     ;position the cursor
  4091                                  .40                     dec     ecx                                             ;decrement remaining chars
  4092                                                          jmp     .10                                             ;next
  4093                                  .50                     xor     al,al                                           ;null
  4094                                                          stosb                                                   ;terminate buffer
  4095                                                          pop     es                                              ;restore non-volatile regs
  4096                                                          pop     edi                                             ;
  4097                                                          pop     esi                                             ;
  4098                                                          pop     ecx                                             ;
  4099                                                          ret                                                     ;return
  4100                                  ;-----------------------------------------------------------------------------------------------------------------------
  4101                                  ;
  4102                                  ;       Routine:        NextConsoleColumn
  4103                                  ;
  4104                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4105                                  ;                       incremented if the end of the current row is reached.
  4106                                  ;
  4107                                  ;       In:             DS      OS data selector
  4108                                  ;
  4109                                  ;-----------------------------------------------------------------------------------------------------------------------
  4110                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4111                                                          inc     al                                              ;increment column
  4112                                                          mov     [wbConsoleColumn],al                            ;save column
  4113                                                          cmp     al,ECONCOLS                                     ;end of row?
  4114                                                          jb      .10                                             ;no, skip ahead
  4115                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4116                                                          call    NextConsoleRow                                  ;line feed to next row
  4117                                  .10                     ret                                                     ;return
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  ;
  4120                                  ;       Routine:        NextConsoleRow
  4121                                  ;
  4122                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4123                                  ;
  4124                                  ;       In:             DS      OS data selector
  4125                                  ;
  4126                                  ;-----------------------------------------------------------------------------------------------------------------------
  4127                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4128                                                          inc     al                                              ;increment row
  4129                                                          mov     [wbConsoleRow],al                               ;save row
  4130                                                          cmp     al,ECONROWS                                     ;end of screen?
  4131                                                          jb      .10                                             ;no, skip ahead
  4132                                                          call    ScrollConsoleRow                                ;scroll up one row
  4133                                                          mov     al,[wbConsoleRow]                               ;row
  4134                                                          dec     al                                              ;decrement row
  4135                                                          mov     [wbConsoleRow],al                               ;save row
  4136                                  .10                     ret                                                     ;return
  4137                                  ;-----------------------------------------------------------------------------------------------------------------------
  4138                                  ;
  4139                                  ;       Routine:        PreviousConsoleColumn
  4140                                  ;
  4141                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4142                                  ;                       the column is set to the last position in the row and the row is decremented.
  4143                                  ;
  4144                                  ;       In:             DS      OS data selector
  4145                                  ;
  4146                                  ;-----------------------------------------------------------------------------------------------------------------------
  4147                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4148                                                          or      al,al                                           ;start of row?
  4149                                                          jnz     .10                                             ;no, skip ahead
  4150                                                          mov     ah,[wbConsoleRow]                               ;current row
  4151                                                          or      ah,ah                                           ;top of screen?
  4152                                                          jz      .20                                             ;yes, exit with no change
  4153                                                          dec     ah                                              ;decrement row
  4154                                                          mov     [wbConsoleRow],ah                               ;save row
  4155                                                          mov     al,ECONCOLS                                     ;set maximum column
  4156                                  .10                     dec     al                                              ;decrement column
  4157                                                          mov     [wbConsoleColumn],al                            ;save column
  4158                                  .20                     ret                                                     ;return
  4159                                  ;-----------------------------------------------------------------------------------------------------------------------
  4160                                  ;
  4161                                  ;       Routine:        PutConsoleChar
  4162                                  ;
  4163                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4164                                  ;
  4165                                  ;       In:             AL      ASCII character
  4166                                  ;                       DS      OS data selector
  4167                                  ;
  4168                                  ;-----------------------------------------------------------------------------------------------------------------------
  4169                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4170                                                          push    es                                              ;
  4171                                                          push    EGDTCGA                                         ;load CGA selector ...
  4172                                                          pop     es                                              ;... into extra segment reg
  4173                                                          mov     cl,[wbConsoleColumn]                            ;column
  4174                                                          mov     ch,[wbConsoleRow]                               ;row
  4175                                                          call    SetConsoleChar                                  ;put character at row, column
  4176                                                          pop     es                                              ;restore non-volatile regs
  4177                                                          pop     ecx                                             ;
  4178                                                          ret                                                     ;return
  4179                                  ;-----------------------------------------------------------------------------------------------------------------------
  4180                                  ;
  4181                                  ;       Routine:        PutConsoleHexByte
  4182                                  ;
  4183                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4184                                  ;
  4185                                  ;       In:             AL      byte value
  4186                                  ;                       CL      column
  4187                                  ;                       CH      row
  4188                                  ;                       DS      OS data selector
  4189                                  ;                       ES      CGA selector
  4190                                  ;
  4191                                  ;-----------------------------------------------------------------------------------------------------------------------
  4192                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4193                                                          mov     bl,al                                           ;save byte value
  4194                                                          shr     al,4                                            ;hi-order nybble
  4195                                                          or      al,030h                                         ;apply ASCII zone
  4196                                                          cmp     al,03ah                                         ;numeric?
  4197                                                          jb      .10                                             ;yes, skip ahead
  4198                                                          add     al,7                                            ;add ASCII offset for alpha
  4199                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4200                                                          mov     al,bl                                           ;byte value
  4201                                                          and     al,0fh                                          ;lo-order nybble
  4202                                                          or      al,30h                                          ;apply ASCII zone
  4203                                                          cmp     al,03ah                                         ;numeric?
  4204                                                          jb      .20                                             ;yes, skip ahead
  4205                                                          add     al,7                                            ;add ASCII offset for alpha
  4206                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4207                                                          pop     ebx                                             ;restore non-volatile regs
  4208                                                          ret                                                     ;return
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210                                  ;
  4211                                  ;       Routine:        PutConsoleHexDword
  4212                                  ;
  4213                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4214                                  ;
  4215                                  ;       In:             EAX     value
  4216                                  ;                       CL      column
  4217                                  ;                       CH      row
  4218                                  ;                       DS      OS data selector
  4219                                  ;                       ES      CGA selector
  4220                                  ;
  4221                                  ;-----------------------------------------------------------------------------------------------------------------------
  4222                                  PutConsoleHexDword      push    eax
  4223                                                          shr     eax,16
  4224                                                          call    PutConsoleHexWord
  4225                                                          pop     eax
  4226                                                          call    PutConsoleHexWord
  4227                                                          ret
  4228                                  ;-----------------------------------------------------------------------------------------------------------------------
  4229                                  ;
  4230                                  ;       Routine:        PutConsoleHexWord
  4231                                  ;
  4232                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4233                                  ;
  4234                                  ;       In:             EAX     value
  4235                                  ;                       CL      column
  4236                                  ;                       CH      row
  4237                                  ;                       DS      OS data selector
  4238                                  ;                       ES      CGA selector
  4239                                  ;
  4240                                  ;-----------------------------------------------------------------------------------------------------------------------
  4241                                  PutConsoleHexWord       push    eax
  4242                                                          shr     eax,8
  4243                                                          call    PutConsoleHexByte
  4244                                                          pop     eax
  4245                                                          call    PutConsoleHexByte
  4246                                                          ret
  4247                                  ;-----------------------------------------------------------------------------------------------------------------------
  4248                                  ;
  4249                                  ;       Routine:        PutConsoleOIAChar
  4250                                  ;
  4251                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4252                                  ;
  4253                                  ;       In:             DS      OS data selector
  4254                                  ;
  4255                                  ;-----------------------------------------------------------------------------------------------------------------------
  4256                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4257                                                          push    ecx                                             ;
  4258                                                          push    esi                                             ;
  4259                                                          push    ds                                              ;
  4260                                                          push    es                                              ;
  4261                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4262                                                          pop     ds                                              ;... into data segment register
  4263                                                          push    EGDTCGA                                         ;load CGA selector ...
  4264                                                          pop     es                                              ;... into extra segment register
  4265                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4266                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4267                                                          mov     bl,0                                            ;starting column
  4268                                                          mov     ecx,6                                           ;maximum scan codes
  4269                                  .10                     push    ecx                                             ;save remaining count
  4270                                                          mov     ecx,ebx                                         ;row, column
  4271                                                          lodsb                                                   ;read scan code
  4272                                                          or      al,al                                           ;scan code present?
  4273                                                          jz      .20                                             ;no, skip ahead
  4274                                                          call    PutConsoleHexByte                               ;display scan code
  4275                                                          jmp     .30                                             ;continue
  4276                                  .20                     mov     al,' '                                          ;ASCII space
  4277                                                          call    SetConsoleChar                                  ;display space
  4278                                                          mov     al,' '                                          ;ASCII space
  4279                                                          call    SetConsoleChar                                  ;display space
  4280                                  .30                     add     bl,2                                            ;next column (+2)
  4281                                                          pop     ecx                                             ;restore remaining
  4282                                                          loop    .10                                             ;next code
  4283                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4284                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4285                                                          jb      .40                                             ;no, skip ahead
  4286                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4287                                                          ja      .40                                             ;no, skip ahead
  4288                                                          mov     ch,bh                                           ;OIA row
  4289                                                          mov     cl,40                                           ;character display column
  4290                                                          call    SetConsoleChar                                  ;display ASCII character
  4291                                  .40                     pop     es                                              ;restore non-volatile regs
  4292                                                          pop     ds                                              ;
  4293                                                          pop     esi                                             ;
  4294                                                          pop     ecx                                             ;
  4295                                                          pop     ebx                                             ;
  4296                                                          ret                                                     ;return
  4297                                  ;-----------------------------------------------------------------------------------------------------------------------
  4298                                  ;
  4299                                  ;       Routine:        PutConsoleOIAShift
  4300                                  ;
  4301                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4302                                  ;
  4303                                  ;       In:             BL      shift flags
  4304                                  ;                       BH      lock flags
  4305                                  ;                       DS      OS data selector
  4306                                  ;
  4307                                  ;-----------------------------------------------------------------------------------------------------------------------
  4308                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4309                                                          push    es                                              ;
  4310                                                          push    EGDTCGA                                         ;load CGA selector ...
  4311                                                          pop     es                                              ;... into ES register
  4312                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4313                                                          mov     al,EASCIISPACE                                  ;space is default character
  4314                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4315                                                          jz      .10                                             ;no, skip ahead
  4316                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4317                                  .10                     mov     cl,14                                           ;indicator column
  4318                                                          call    SetConsoleChar                                  ;display ASCII character
  4319                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4320                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4321                                                          jz      .20                                             ;no, skip ahead
  4322                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4323                                  .20                     mov     cl,64                                           ;indicator column
  4324                                                          call    SetConsoleChar                                  ;display ASCII character
  4325                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4326                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4327                                                          jz      .30                                             ;no, skip ahead
  4328                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4329                                  .30                     mov     cl,15                                           ;indicator column
  4330                                                          call    SetConsoleChar                                  ;display ASCII character
  4331                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4332                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4333                                                          jz      .40                                             ;no, skip ahead
  4334                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4335                                  .40                     mov     cl,63                                           ;indicator column
  4336                                                          call    SetConsoleChar                                  ;display ASCII character
  4337                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4338                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4339                                                          jz      .50                                             ;no, skip ahead
  4340                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4341                                  .50                     mov     cl,16                                           ;indicator column
  4342                                                          call    SetConsoleChar                                  ;display ASCII character
  4343                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4344                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4345                                                          jz      .60                                             ;no, skip ahead
  4346                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4347                                  .60                     mov     cl,62                                           ;indicator column
  4348                                                          call    SetConsoleChar                                  ;display ASCII character
  4349                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4350                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4351                                                          jz      .70                                             ;no, skip ahead
  4352                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4353                                  .70                     mov     cl,78                                           ;indicator column
  4354                                                          call    SetConsoleChar                                  ;display ASCII character
  4355                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4356                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4357                                                          jz      .80                                             ;no, skip ahead
  4358                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4359                                  .80                     mov     cl,77                                           ;indicator column
  4360                                                          call    SetConsoleChar                                  ;display ASCII character
  4361                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4362                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4363                                                          jz      .90                                             ;no, skip ahead
  4364                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4365                                  .90                     mov     cl,76                                           ;indicator column
  4366                                                          call    SetConsoleChar                                  ;display ASCII character
  4367                                                          pop     es                                              ;restore non-volatile regs
  4368                                                          pop     ecx                                             ;
  4369                                                          ret                                                     ;return
  4370                                  ;-----------------------------------------------------------------------------------------------------------------------
  4371                                  ;
  4372                                  ;       Routine:        PutConsoleString
  4373                                  ;
  4374                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4375                                  ;                       console position as needed.
  4376                                  ;
  4377                                  ;       In:             EDX     source address
  4378                                  ;                       DS      OS data selector
  4379                                  ;
  4380                                  ;-----------------------------------------------------------------------------------------------------------------------
  4381                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4382                                                          mov     esi,edx                                         ;source address
  4383                                                          cld                                                     ;forward strings
  4384                                  .10                     lodsb                                                   ;ASCII character
  4385                                                          or      al,al                                           ;end of string?
  4386                                                          jz      .40                                             ;yes, skip ahead
  4387                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4388                                                          jne     .20                                             ;no, skip ahead
  4389                                                          call    FirstConsoleColumn                              ;move to start of row
  4390                                                          jmp     .10                                             ;next character
  4391                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4392                                                          jne     .30                                             ;no, skip ahead
  4393                                                          call    NextConsoleRow                                  ;move to next row
  4394                                                          jmp     .10                                             ;next character
  4395                                  .30                     call    PutConsoleChar                                  ;output character to console
  4396                                                          call    NextConsoleColumn                               ;advance to next column
  4397                                                          jmp     .10                                             ;next character
  4398                                  .40                     pop     esi                                             ;restore non-volatile regs
  4399                                                          ret                                                     ;return
  4400                                  ;-----------------------------------------------------------------------------------------------------------------------
  4401                                  ;
  4402                                  ;       Routine:        Yield
  4403                                  ;
  4404                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4405                                  ;
  4406                                  ;-----------------------------------------------------------------------------------------------------------------------
  4407                                  Yield                   sti                                                     ;enable maskagle interrupts
  4408                                                          hlt                                                     ;halt until external interrupt
  4409                                                          ret                                                     ;return
  4410                                  ;=======================================================================================================================
  4411                                  ;
  4412                                  ;       Data-Type Conversion Helper Routines
  4413                                  ;
  4414                                  ;       DecimalToUnsigned
  4415                                  ;       HexadecimalToUnsigned
  4416                                  ;       UnsignedToDecimalString
  4417                                  ;       UnsignedToHexadecimal
  4418                                  ;
  4419                                  ;=======================================================================================================================
  4420                                  ;-----------------------------------------------------------------------------------------------------------------------
  4421                                  ;
  4422                                  ;       Routine:        DecimalToUnsigned
  4423                                  ;
  4424                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4425                                  ;
  4426                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4427                                  ;
  4428                                  ;       Output:         EAX     unsigned integer value
  4429                                  ;
  4430                                  ;-----------------------------------------------------------------------------------------------------------------------
  4431                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4432                                                          mov     esi,edx                                         ;source address
  4433                                                          xor     edx,edx                                         ;zero total
  4434                                  .10                     lodsb                                                   ;source byte
  4435                                                          cmp     al,','                                          ;comma?
  4436                                                          je      .10                                             ;yes, ignore
  4437                                                          test    al,al                                           ;end of string?
  4438                                                          jz      .30                                             ;yes, done
  4439                                                          cmp     al,'.'                                          ;decimal point?
  4440                                                          je      .30                                             ;yes, done
  4441                                                          cmp     al,'0'                                          ;numeral?
  4442                                                          jb      .20                                             ;no, invalid string
  4443                                                          cmp     al,'9'                                          ;numeral?
  4444                                                          ja      .20                                             ;no, invalid string
  4445                                                          and     al,00Fh                                         ;mask ASCII zone
  4446                                                          push    eax                                             ;save numeral
  4447                                                          shl     edx,1                                           ;total * 2
  4448                                                          mov     eax,edx                                         ;total * 2
  4449                                                          shl     edx,2                                           ;total * 8
  4450                                                          add     edx,eax                                         ;total * 10
  4451                                                          pop     eax                                             ;restore numeral
  4452                                                          add     edx,eax                                         ;accumulate decimal digit
  4453                                                          xor     eax,eax                                         ;zero register
  4454                                                          jmp     .10                                             ;next
  4455                                  .20                     xor     edx,edx                                         ;zero result on error
  4456                                  .30                     mov     eax,edx                                         ;result
  4457                                                          pop     esi                                             ;restore non-volatile regs
  4458                                                          ret                                                     ;return
  4459                                  ;-----------------------------------------------------------------------------------------------------------------------
  4460                                  ;
  4461                                  ;       Routine:        HexadecimalToUnsigned
  4462                                  ;
  4463                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4464                                  ;
  4465                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4466                                  ;
  4467                                  ;       Output:         EAX     unsigned integer value
  4468                                  ;
  4469                                  ;-----------------------------------------------------------------------------------------------------------------------
  4470                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4471                                                          mov     esi,edx                                         ;source address
  4472                                                          xor     edx,edx                                         ;zero register
  4473                                  .10                     lodsb                                                   ;source byte
  4474                                                          test    al,al                                           ;end of string?
  4475                                                          jz      .30                                             ;yes, branch
  4476                                                          cmp     al,'9'                                          ;hexadecimal?
  4477                                                          jna     .20                                             ;no, skip ahead
  4478                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4479                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4480                                                          shl     edx,4                                           ;previous total x 16
  4481                                                          add     edx,eax                                         ;add prior value x 16
  4482                                                          jmp     .10                                             ;next
  4483                                  .30                     mov     eax,edx                                         ;result
  4484                                                          pop     esi                                             ;restore non-volatile regs
  4485                                                          ret                                                     ;return
  4486                                  ;-----------------------------------------------------------------------------------------------------------------------
  4487                                  ;
  4488                                  ;       Routine:        UnsignedToDecimalString
  4489                                  ;
  4490                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4491                                  ;
  4492                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4493                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4494                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4495                                  ;                       ECX     32-bit binary
  4496                                  ;                       DS:EDX  output buffer address
  4497                                  ;
  4498                                  ;-----------------------------------------------------------------------------------------------------------------------
  4499                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4500                                                          push    ecx                                             ;
  4501                                                          push    edi                                             ;
  4502                                                          push    es                                              ;
  4503                                                          push    ds                                              ;load data selector
  4504                                                          pop     es                                              ;... into extra segment reg
  4505                                                          mov     edi,edx                                         ;output buffer address
  4506                                                          and     bh,00001111b                                    ;zero internal flags
  4507                                                          mov     edx,ecx                                         ;binary
  4508                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4509                                                          call    .30                                             ;divide and store
  4510                                                          mov     ecx,100000000                                   ;10^8 divisor
  4511                                                          call    .10                                             ;divide and store
  4512                                                          mov     ecx,10000000                                    ;10^7 divisor
  4513                                                          call    .30                                             ;divide and store
  4514                                                          mov     ecx,1000000                                     ;10^6 divisor
  4515                                                          call    .30                                             ;divide and store
  4516                                                          mov     ecx,100000                                      ;10^5 divisor
  4517                                                          call    .10                                             ;divide and store
  4518                                                          mov     ecx,10000                                       ;10^4 divisor
  4519                                                          call    .30                                             ;divide and store
  4520                                                          mov     ecx,1000                                        ;10^3 divisor
  4521                                                          call    .30                                             ;divide and store
  4522                                                          mov     ecx,100                                         ;10^2 divisor
  4523                                                          call    .10                                             ;divide and store
  4524                                                          mov     ecx,10                                          ;10^2 divisor
  4525                                                          call    .30                                             ;divide and store
  4526                                                          mov     eax,edx                                         ;10^1 remainder
  4527                                                          call    .40                                             ;store
  4528                                                          xor     al,al                                           ;null terminator
  4529                                                          stosb
  4530                                                          pop     es                                              ;restore non-volatile regs
  4531                                                          pop     edi                                             ;
  4532                                                          pop     ecx                                             ;
  4533                                                          pop     ebx                                             ;
  4534                                                          ret                                                     ;return
  4535                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4536                                                          jz      .30                                             ;no, branch
  4537                                                          test    bh,00000001b                                    ;trim leading zeros?
  4538                                                          jz      .20                                             ;no, store delim
  4539                                                          test    bh,00010000b                                    ;non-zero found?
  4540                                                          jz      .30                                             ;no, branch
  4541                                  .20                     mov     al,','                                          ;delimiter
  4542                                                          stosb                                                   ;store delimiter
  4543                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4544                                                          xor     edx,edx                                         ;zero hi-order
  4545                                                          div     ecx                                             ;divide by power of 10
  4546                                                          test    al,al                                           ;zero?
  4547                                                          jz      .50                                             ;yes, branch
  4548                                                          or      bh,00010000b                                    ;non-zero found
  4549                                  .40                     or      al,30h                                          ;ASCII zone
  4550                                                          stosb                                                   ;store digit
  4551                                                          ret                                                     ;return
  4552                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4553                                                          jz      .40                                             ;no, store and continue
  4554                                                          test    bh,00010000b                                    ;non-zero found?
  4555                                                          jnz     .40                                             ;yes, store and continue
  4556                                                          ret                                                     ;return
  4557                                  ;-----------------------------------------------------------------------------------------------------------------------
  4558                                  ;
  4559                                  ;       Routine:        UnsignedToHexadecimal
  4560                                  ;
  4561                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4562                                  ;
  4563                                  ;       Input:          DS:EDX  output buffer address
  4564                                  ;                       ECX     32-bit binary
  4565                                  ;
  4566                                  ;-----------------------------------------------------------------------------------------------------------------------
  4567                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4568                                                          mov     edi,edx                                         ;output buffer address
  4569                                                          mov     edx,ecx                                         ;32-bit unsigned
  4570                                                          xor     ecx,ecx                                         ;zero register
  4571                                                          mov     cl,8                                            ;nybble count
  4572                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4573                                                          mov     al,dl                                           ;????bbbb
  4574                                                          and     al,0fh                                          ;mask out bits 4-7
  4575                                                          or      al,30h                                          ;mask in ascii zone
  4576                                                          cmp     al,3ah                                          ;A through F?
  4577                                                          jb      .20                                             ;no, skip ahead
  4578                                                          add     al,7                                            ;41h through 46h
  4579                                  .20                     stosb                                                   ;store hexnum
  4580                                                          loop    .10                                             ;next nybble
  4581                                                          xor     al,al                                           ;zero reg
  4582                                                          stosb                                                   ;null terminate
  4583                                                          pop     edi                                             ;restore non-volatile regs
  4584                                                          ret                                                     ;return
  4585                                  ;=======================================================================================================================
  4586                                  ;
  4587                                  ;       Message Queue Helper Routines
  4588                                  ;
  4589                                  ;       GetMessage
  4590                                  ;       PutMessage
  4591                                  ;
  4592                                  ;=======================================================================================================================
  4593                                  ;-----------------------------------------------------------------------------------------------------------------------
  4594                                  ;
  4595                                  ;       Routine:        GetMessage
  4596                                  ;
  4597                                  ;       Description:    This routine reads and removes a message from the message queue.
  4598                                  ;
  4599                                  ;       Out:            EAX     lo-order message data
  4600                                  ;                       EDX     hi-order message data
  4601                                  ;
  4602                                  ;                       CY      0 = message read
  4603                                  ;                               1 = no message to read
  4604                                  ;
  4605                                  ;-----------------------------------------------------------------------------------------------------------------------
  4606                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4607                                                          push    ecx                                             ;
  4608                                                          push    ds                                              ;
  4609                                                          push    ELDTMQ                                          ;load message queue selector ...
  4610                                                          pop     ds                                              ;... into data segment register
  4611                                                          mov     ebx,[MQHead]                                    ;head ptr
  4612                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4613                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4614                                                          or      eax,edx                                         ;is queue empty?
  4615                                                          stc                                                     ;assume queue is emtpy
  4616                                                          jz      .20                                             ;yes, skip ahead
  4617                                                          xor     ecx,ecx                                         ;store zero
  4618                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4619                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4620                                                          add     ebx,8                                           ;next queue element
  4621                                                          and     ebx,03fch                                       ;at end of queue?
  4622                                                          jnz     .10                                             ;no, skip ahead
  4623                                                          mov     bl,8                                            ;reset to 1st entry
  4624                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4625                                                          clc                                                     ;indicate message read
  4626                                  .20                     pop     ds                                              ;restore non-volatile regs
  4627                                                          pop     ecx                                             ;
  4628                                                          pop     ebx                                             ;
  4629                                                          ret                                                     ;return
  4630                                  ;-----------------------------------------------------------------------------------------------------------------------
  4631                                  ;
  4632                                  ;       Routine:        PutMessage
  4633                                  ;
  4634                                  ;       Description:    This routine adda a message to the message queue.
  4635                                  ;
  4636                                  ;       In:             ECX     hi-order data word
  4637                                  ;                       EDX     lo-order data word
  4638                                  ;
  4639                                  ;       Out:            CY      0 = success
  4640                                  ;                               1 = fail: queue is full
  4641                                  ;
  4642                                  ;-----------------------------------------------------------------------------------------------------------------------
  4643                                  PutMessage              push    ds                                              ;save non-volatile regs
  4644                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4645                                                          pop     ds                                              ;... into data segment register
  4646                                                          mov     eax,[MQTail]                                    ;tail ptr
  4647                                                          cmp     dword [eax],0                                   ;is queue full?
  4648                                                          stc                                                     ;assume failure
  4649                                                          jne     .20                                             ;yes, cannot store
  4650                                                          mov     [eax],edx                                       ;store lo-order data
  4651                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4652                                                          add     eax,8                                           ;next queue element adr
  4653                                                          and     eax,03fch                                       ;at end of queue?
  4654                                                          jnz     .10                                             ;no, skip ahead
  4655                                                          mov     al,8                                            ;reset to top of queue
  4656                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4657                                                          clc                                                     ;indicate success
  4658                                  .20                     pop     ds                                              ;restore non-volatile regs
  4659                                                          ret                                                     ;return
  4660                                  ;=======================================================================================================================
  4661                                  ;
  4662                                  ;       Memory-Mapped Video Routines
  4663                                  ;
  4664                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4665                                  ;
  4666                                  ;       ClearConsoleScreen
  4667                                  ;       ScrollConsoleRow
  4668                                  ;       SetConsoleChar
  4669                                  ;       SetConsoleString
  4670                                  ;
  4671                                  ;=======================================================================================================================
  4672                                  ;-----------------------------------------------------------------------------------------------------------------------
  4673                                  ;
  4674                                  ;       Routine:        ClearConsoleScreen
  4675                                  ;
  4676                                  ;       Description:    This routine clears the console (CGA) screen.
  4677                                  ;
  4678                                  ;-----------------------------------------------------------------------------------------------------------------------
  4679                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4680                                                          push    edi                                             ;
  4681                                                          push    ds                                              ;
  4682                                                          push    es                                              ;
  4683                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4684                                                          pop     ds                                              ;... into DS register
  4685                                                          push    EGDTCGA                                         ;load CGA selector ...
  4686                                                          pop     es                                              ;... into ES register
  4687                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4688                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4689                                                          xor     edi,edi                                         ;target offset
  4690                                                          cld                                                     ;forward strings
  4691                                                          rep     stosd                                           ;reset screen body
  4692                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4693                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4694                                                          rep     stosd                                           ;reset OIA line
  4695                                                          xor     al,al                                           ;zero register
  4696                                                          mov     [wbConsoleRow],al                               ;reset console row
  4697                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4698                                                          call    PlaceCursor                                     ;place cursor at current position
  4699                                                          pop     es                                              ;restore non-volatile regs
  4700                                                          pop     ds                                              ;
  4701                                                          pop     edi                                             ;
  4702                                                          pop     ecx                                             ;
  4703                                                          ret                                                     ;return
  4704                                  ;-----------------------------------------------------------------------------------------------------------------------
  4705                                  ;
  4706                                  ;       Routine:        ScrollConsoleRow
  4707                                  ;
  4708                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4709                                  ;
  4710                                  ;-----------------------------------------------------------------------------------------------------------------------
  4711                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4712                                                          push    esi                                             ;
  4713                                                          push    edi                                             ;
  4714                                                          push    ds                                              ;
  4715                                                          push    es                                              ;
  4716                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4717                                                          pop     ds                                              ;... into DS
  4718                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4719                                                          pop     es                                              ;... into ES
  4720                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4721                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4722                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4723                                                          cld                                                     ;forward strings
  4724                                                          rep     movsd                                           ;move 24 lines up
  4725                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4726                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4727                                                          rep     stosd                                           ;clear bottom row
  4728                                                          pop     es                                              ;restore non-volatile regs
  4729                                                          pop     ds                                              ;
  4730                                                          pop     edi                                             ;
  4731                                                          pop     esi                                             ;
  4732                                                          pop     ecx                                             ;
  4733                                                          ret                                                     ;return
  4734                                  ;-----------------------------------------------------------------------------------------------------------------------
  4735                                  ;
  4736                                  ;       Routine:        SetConsoleChar
  4737                                  ;
  4738                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4739                                  ;
  4740                                  ;       In:             AL      ASCII character
  4741                                  ;                       CL      column
  4742                                  ;                       CH      row
  4743                                  ;                       ES      CGA selector
  4744                                  ;
  4745                                  ;       Out:            EAX     last target address written (ES:)
  4746                                  ;                       CL      column + 1
  4747                                  ;
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4750                                                          movzx   eax,ch                                          ;row
  4751                                                          mov     ah,ECONCOLS                                     ;cols/row
  4752                                                          mul     ah                                              ;row * cols/row
  4753                                                          add     al,cl                                           ;add column
  4754                                                          adc     ah,0                                            ;handle carry
  4755                                                          shl     eax,1                                           ;screen offset
  4756                                                          mov     [es:eax],dl                                     ;store character
  4757                                                          inc     cl                                              ;next column
  4758                                                          ret                                                     ;return
  4759                                  ;-----------------------------------------------------------------------------------------------------------------------
  4760                                  ;
  4761                                  ;       Routine:        SetConsoleString
  4762                                  ;
  4763                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4764                                  ;
  4765                                  ;       In:             ESI     source offset (DS:)
  4766                                  ;                       CL      column
  4767                                  ;                       CH      row
  4768                                  ;                       ES      CGA selector
  4769                                  ;
  4770                                  ;-----------------------------------------------------------------------------------------------------------------------
  4771                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4772                                                          cld                                                     ;forward strings
  4773                                  .10                     lodsb                                                   ;next ASCII character
  4774                                                          test    al,al                                           ;end of string?
  4775                                                          jz      .20                                             ;yes, branch
  4776                                                          call    SetConsoleChar                                  ;store character
  4777                                                          jmp     .10                                             ;continue
  4778                                  .20                     pop     esi                                             ;restore non-volatile regs
  4779                                                          ret                                                     ;return
  4780                                  ;=======================================================================================================================
  4781                                  ;
  4782                                  ;       Input/Output Routines
  4783                                  ;
  4784                                  ;       These routines read and/or write directly to ports.
  4785                                  ;
  4786                                  ;       GetBaseMemSize
  4787                                  ;       GetExtendedMemSize
  4788                                  ;       GetROMMemSize
  4789                                  ;       PlaceCursor
  4790                                  ;       PutPrimaryEndOfInt
  4791                                  ;       PutSecondaryEndOfInt
  4792                                  ;       ReadRealTimeClock
  4793                                  ;       ResetSystem
  4794                                  ;       SetKeyboardLamps
  4795                                  ;       WaitForKeyInBuffer
  4796                                  ;       WaitForKeyOutBuffer
  4797                                  ;
  4798                                  ;=======================================================================================================================
  4799                                  ;-----------------------------------------------------------------------------------------------------------------------
  4800                                  ;
  4801                                  ;       Routine:        GetBaseMemSize
  4802                                  ;
  4803                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4804                                  ;
  4805                                  ;       Output:         EAX     base RAM size in bytes
  4806                                  ;
  4807                                  ;-----------------------------------------------------------------------------------------------------------------------
  4808                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4809                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4810                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4811                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4812                                                          mov     ah,al                                           ;save base RAM high
  4813                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4814                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4815                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4816                                                          ret                                                     ;return to caller
  4817                                  ;-----------------------------------------------------------------------------------------------------------------------
  4818                                  ;
  4819                                  ;       Routine:        GetExtendedMemSize
  4820                                  ;
  4821                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4822                                  ;
  4823                                  ;       Output:         EAX     extended RAM size in bytes
  4824                                  ;
  4825                                  ;-----------------------------------------------------------------------------------------------------------------------
  4826                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4827                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4828                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4829                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4830                                                          mov     ah,al                                           ;save extended RAM high
  4831                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4832                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4833                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4834                                                          ret                                                     ;return to caller
  4835                                  ;-----------------------------------------------------------------------------------------------------------------------
  4836                                  ;
  4837                                  ;       Routine:        GetROMMemSize
  4838                                  ;
  4839                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4840                                  ;
  4841                                  ;       Output:         EAX     RAM size in bytes
  4842                                  ;
  4843                                  ;-----------------------------------------------------------------------------------------------------------------------
  4844                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4845                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4846                                                          ret                                                     ;return
  4847                                  ;-----------------------------------------------------------------------------------------------------------------------
  4848                                  ;
  4849                                  ;       Routine:        PlaceCursor
  4850                                  ;
  4851                                  ;       Description:    This routine positions the cursor on the console.
  4852                                  ;
  4853                                  ;       In:             DS      OS data selector
  4854                                  ;
  4855                                  ;-----------------------------------------------------------------------------------------------------------------------
  4856                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4857                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4858                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4859                                                          mul     ah                                              ;row offset
  4860                                                          add     al,[wbConsoleColumn]                            ;add column
  4861                                                          adc     ah,0                                            ;add overflow
  4862                                                          mov     ecx,eax                                         ;screen offset
  4863                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4864                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4865                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4866                                                          out     dx,al                                           ;select register
  4867                                                          inc     edx                                             ;data port
  4868                                                          mov     al,ch                                           ;hi-order cursor loc
  4869                                                          out     dx,al                                           ;store hi-order loc
  4870                                                          dec     edx                                             ;register select port
  4871                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4872                                                          out     dx,al                                           ;select register
  4873                                                          inc     edx                                             ;data port
  4874                                                          mov     al,cl                                           ;lo-order cursor loc
  4875                                                          out     dx,al                                           ;store lo-order loc
  4876                                                          pop     ecx                                             ;restore non-volatile regs
  4877                                                          ret                                                     ;return
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        PutPrimaryEndOfInt
  4881                                  ;
  4882                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4883                                  ;
  4884                                  ;-----------------------------------------------------------------------------------------------------------------------
  4885                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4886                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4887                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4888                                                          ret                                                     ;return
  4889                                  ;-----------------------------------------------------------------------------------------------------------------------
  4890                                  ;
  4891                                  ;       Routine:        PutSecondaryEndOfInt
  4892                                  ;
  4893                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4894                                  ;
  4895                                  ;-----------------------------------------------------------------------------------------------------------------------
  4896                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4897                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4898                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4899                                                          ret                                                     ;return
  4900                                  ;-----------------------------------------------------------------------------------------------------------------------
  4901                                  ;
  4902                                  ;       Routine:        ReadRealTimeClock
  4903                                  ;
  4904                                  ;       Description:    This routine gets current date time from the real-time clock.
  4905                                  ;
  4906                                  ;       In:             DS:EBX  DATETIME structure
  4907                                  ;
  4908                                  ;-----------------------------------------------------------------------------------------------------------------------
  4909                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4910                                                          push    edi                                             ;
  4911                                                          push    es                                              ;
  4912                                                          push    ds                                              ;store data selector ...
  4913                                                          pop     es                                              ;... in es register
  4914                                                          mov     edi,ebx                                         ;date-time structure
  4915                                                          mov     al,ERTCSECONDREG                                ;second register
  4916                                                          out     ERTCREGPORT,al                                  ;select second register
  4917                                                          in      al,ERTCDATAPORT                                 ;read second register
  4918                                                          cld                                                     ;forward strings
  4919                                                          stosb                                                   ;store second value
  4920                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4921                                                          out     ERTCREGPORT,al                                  ;select minute register
  4922                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4923                                                          stosb                                                   ;store minute value
  4924                                                          mov     al,ERTCHOURREG                                  ;hour register
  4925                                                          out     ERTCREGPORT,al                                  ;select hour register
  4926                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4927                                                          stosb                                                   ;store hour value
  4928                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4929                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4930                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4931                                                          stosb                                                   ;store weekday value
  4932                                                          mov     al,ERTCDAYREG                                   ;day register
  4933                                                          out     ERTCREGPORT,al                                  ;select day register
  4934                                                          in      al,ERTCDATAPORT                                 ;read day register
  4935                                                          stosb                                                   ;store day value
  4936                                                          mov     al,ERTCMONTHREG                                 ;month register
  4937                                                          out     ERTCREGPORT,al                                  ;select month register
  4938                                                          in      al,ERTCDATAPORT                                 ;read month register
  4939                                                          stosb                                                   ;store month value
  4940                                                          mov     al,ERTCYEARREG                                  ;year register
  4941                                                          out     ERTCREGPORT,al                                  ;select year register
  4942                                                          in      al,ERTCDATAPORT                                 ;read year register
  4943                                                          stosb                                                   ;store year value
  4944                                                          mov     al,ERTCCENTURYREG                               ;century register
  4945                                                          out     ERTCREGPORT,al                                  ;select century register
  4946                                                          in      al,ERTCDATAPORT                                 ;read century register
  4947                                                          stosb                                                   ;store century value
  4948                                                          mov     al,ERTCSTATUSREG                                ;status register
  4949                                                          out     ERTCREGPORT,al                                  ;select status register
  4950                                                          in      al,ERTCDATAPORT                                 ;read status register
  4951                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4952                                                          jnz     .20                                             ;skip ahead if binary values
  4953                                                          mov     esi,ebx                                         ;date-time structure address
  4954                                                          mov     edi,ebx                                         ;date-time structure address
  4955                                                          mov     ecx,8                                           ;loop counter
  4956                                  .10                     lodsb                                                   ;BCD value
  4957                                                          mov     ah,al                                           ;BCD value
  4958                                                          and     al,00001111b                                    ;low-order decimal zone
  4959                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4960                                                          shr     ah,1                                            ;hi-order decimal * 8
  4961                                                          add     al,ah                                           ;low-order + hi-order * 8
  4962                                                          shr     ah,2                                            ;hi-order decimal * 2
  4963                                                          add     al,ah                                           ;low-order + hi-order * 10
  4964                                                          stosb                                                   ;replace BCD with binary
  4965                                                          loop    .10                                             ;next value
  4966                                  .20                     pop     es                                              ;restore non-volatile regs
  4967                                                          pop     edi                                             ;
  4968                                                          pop     esi                                             ;
  4969                                                          ret                                                     ;return
  4970                                  ;-----------------------------------------------------------------------------------------------------------------------
  4971                                  ;
  4972                                  ;       Routine:        ResetSystem
  4973                                  ;
  4974                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4975                                  ;
  4976                                  ;       Out:            N/A     This routine does not return.
  4977                                  ;
  4978                                  ;-----------------------------------------------------------------------------------------------------------------------
  4979                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4980                                                          loop    $                                               ;clear interrupts
  4981                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4982                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4983                                  .10                     sti                                                     ;enable maskable interrupts
  4984                                                          hlt                                                     ;halt until interrupt
  4985                                                          jmp     .10                                             ;repeat until reset kicks in
  4986                                  ;-----------------------------------------------------------------------------------------------------------------------
  4987                                  ;
  4988                                  ;       Routine:        SetKeyboardLamps
  4989                                  ;
  4990                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4991                                  ;
  4992                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4993                                  ;
  4994                                  ;-----------------------------------------------------------------------------------------------------------------------
  4995                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4996                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4997                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4998                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4999                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5000                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5001                                                          mov     al,bh                                           ;set/reset lamps value
  5002                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5003                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5004                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5005                                                          ret                                                     ;return
  5006                                  ;-----------------------------------------------------------------------------------------------------------------------
  5007                                  ;
  5008                                  ;       Routine:        WaitForKeyInBuffer
  5009                                  ;
  5010                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5011                                  ;
  5012                                  ;       Out:            ZF      1 = Input buffer ready
  5013                                  ;                               0 = Input buffer not ready after timeout
  5014                                  ;
  5015                                  ;-----------------------------------------------------------------------------------------------------------------------
  5016                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5017                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5018                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5019                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5020                                                          loopnz  .10                                             ;yes, repeat till timeout
  5021                                                          pop     ecx                                             ;restore non-volatile regs
  5022                                                          ret                                                     ;return
  5023                                  ;-----------------------------------------------------------------------------------------------------------------------
  5024                                  ;
  5025                                  ;       Routine:        WaitForKeyOutBuffer
  5026                                  ;
  5027                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5028                                  ;
  5029                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5030                                  ;                               0 = Output buffer empty after timeout
  5031                                  ;
  5032                                  ;-----------------------------------------------------------------------------------------------------------------------
  5033                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5034                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5035                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5036                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5037                                                          loopz   .10                                             ;loop until output buffer bit
  5038                                                          pop     ecx                                             ;restore non-volatile regs
  5039                                                          ret                                                     ;return
  5040                                  ;-----------------------------------------------------------------------------------------------------------------------
  5041                                  ;
  5042                                  ;       End of the Kernel Function Library
  5043                                  ;
  5044                                  ;-----------------------------------------------------------------------------------------------------------------------
  5045                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5046                                  ;=======================================================================================================================
  5047                                  ;
  5048                                  ;       Console Task
  5049                                  ;
  5050                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5051                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5052                                  ;       screen and responds to user commands.
  5053                                  ;
  5054                                  ;=======================================================================================================================
  5055                                  ;-----------------------------------------------------------------------------------------------------------------------
  5056                                  ;
  5057                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5058                                  ;
  5059                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5060                                  ;
  5061                                  ;-----------------------------------------------------------------------------------------------------------------------
  5062                                  section                 constack                                                ;console task stack
  5063                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5064                                  ;-----------------------------------------------------------------------------------------------------------------------
  5065                                  ;
  5066                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5067                                  ;
  5068                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5069                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5070                                  ;       16 descriptors. Six are initially defined.
  5071                                  ;
  5072                                  ;-----------------------------------------------------------------------------------------------------------------------
  5073                                  section                 conldt                                                  ;console local descriptors
  5074                                                          dq      004093004780007Fh                               ;04 TSS alias
  5075                                                          dq      004093004700007Fh                               ;0c LDT alias
  5076                                                          dq      00409300400006FFh                               ;14 stack
  5077                                                          dq      00CF93000000FFFFh                               ;1c data
  5078                                                          dq      00409B0050000FFFh                               ;24 code
  5079                                                          dq      00409300480007FFh                               ;2c message queue
  5080                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5081                                  ;-----------------------------------------------------------------------------------------------------------------------
  5082                                  ;
  5083                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5084                                  ;
  5085                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5086                                  ;       segment. CS to console code.
  5087                                  ;
  5088                                  ;-----------------------------------------------------------------------------------------------------------------------
  5089                                  section                 contss                                                  ;console task state segment
  5090                                                          dd      0                                               ;00 back-link tss
  5091                                                          dd      0700h                                           ;04 esp ring 0
  5092                                                          dd      0014h                                           ;08 ss ring 0
  5093                                                          dd      0700h                                           ;0c esp ring 1
  5094                                                          dd      0014h                                           ;10 es ring 1
  5095                                                          dd      0700h                                           ;14 esp ring 2
  5096                                                          dd      0014h                                           ;18 ss ring 2
  5097                                                          dd      0                                               ;1c cr ring 3
  5098                                                          dd      0                                               ;20 eip
  5099                                                          dd      0200h                                           ;24 eflags
  5100                                                          dd      0                                               ;28 eax
  5101                                                          dd      0                                               ;2c ecx
  5102                                                          dd      0                                               ;30 edx
  5103                                                          dd      0                                               ;34 ebx
  5104                                                          dd      0700h                                           ;38 esp ring 3
  5105                                                          dd      0                                               ;3c ebp
  5106                                                          dd      0                                               ;40 esi
  5107                                                          dd      0                                               ;44 edi
  5108                                                          dd      001Ch                                           ;48 es
  5109                                                          dd      0024h                                           ;4c cs
  5110                                                          dd      0014h                                           ;50 ss ring 3
  5111                                                          dd      001Ch                                           ;54 ds
  5112                                                          dd      0                                               ;58 fs
  5113                                                          dd      0                                               ;5c gs
  5114                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5115                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5119                                  ;
  5120                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5121                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5122                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5123                                  ;       event.
  5124                                  ;
  5125                                  ;-----------------------------------------------------------------------------------------------------------------------
  5126                                  section                 conmque                                                 ;console message queue
  5127                                                          dd      8                                               ;head pointer
  5128                                                          dd      8                                               ;tail pointer
  5129                                                          times   510 dd 0                                        ;queue elements
  5130                                  ;-----------------------------------------------------------------------------------------------------------------------
  5131                                  ;
  5132                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5133                                  ;
  5134                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5135                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5136                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5137                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5138                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5139                                  ;       board input, echoing to the console screen and responding to user commands.
  5140                                  ;
  5141                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5142                                  ;
  5143                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5144                                  ;                               |  Real Mode Interrupt Vectors                  |
  5145                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5146                                  ;                               |  Reserved BIOS Memory Area                    |
  5147                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5148                                  ;                               |  Shared Kernel Memory Area                    |
  5149                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5150                                  ;                               |  Global Descriptor Table (GDT)                |
  5151                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5152                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5153                                  ;                       002000  +-----------------------------------------------+
  5154                                  ;                               |  Interrupt Handlers                           |
  5155                                  ;                               |  Kernel Function Library                      |
  5156                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5157                                  ;                               |  Console Task Stack Area                      |
  5158                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5159                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5160                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5161                                  ;                               |  Console Task Task State Segment (TSS)        |
  5162                                  ;                       004800  +-----------------------------------------------+
  5163                                  ;                               |  Console Task Message Queue                   |
  5164                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5165                                  ;                               |  Console Task Code                            |
  5166                                  ;                               |  Console Task Constants                       |
  5167                                  ;                       006000  +===============================================+
  5168                                  ;
  5169                                  ;-----------------------------------------------------------------------------------------------------------------------
  5170                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5171                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5172                                  
  5173                                                          clearConsoleScreen                                      ;clear the console screen
  5174                                                          putConsoleString czTitle                                ;display startup message
  5175                                                          putConsoleString czROMMem                               ;ROM memory label
  5176                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5177                                                          putConsoleString czKB                                   ;Kilobytes
  5178                                                          putConsoleString czNewLine                              ;new line
  5179                                                          putConsoleString czBaseMem                              ;base memory label
  5180                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5181                                                          putConsoleString czKB                                   ;Kilobytes
  5182                                                          putConsoleString czNewLine                              ;new line
  5183                                                          putConsoleString czExtendedMem                          ;extended memory label
  5184                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5185                                                          putConsoleString czKB                                   ;Kilobytes
  5186                                                          putConsoleString czNewLine                              ;new line
  5187                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5188                                                          placeCursor                                             ;set CRT cursor location
  5189                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5190                                                          putConsoleString czNewLine                              ;newline
  5191                                  
  5192                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5193                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5194                                                          call    ConTakeToken                                    ;handle console input
  5195                                                          mov     edx,wzConsoleToken                              ;token buffer
  5196                                                          call    ConDetermineCommand                             ;determine command number
  5197                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5198                                                          jb      .20                                             ;yes, branch
  5199                                  
  5200                                                          putConsoleString czUnknownCommand                       ;display error message
  5201                                  
  5202                                                          jmp     .10                                             ;next command
  5203                                  .20                     shl     eax,2                                           ;index into jump table
  5204                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5205                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5206                                                          call    eax                                             ;call command handler
  5207                                                          jmp     .10                                             ;next command
  5208                                  ;-----------------------------------------------------------------------------------------------------------------------
  5209                                  ;
  5210                                  ;       Routine:        ConInitializeData
  5211                                  ;
  5212                                  ;       Description:    This routine initializes console task variables.
  5213                                  ;
  5214                                  ;-----------------------------------------------------------------------------------------------------------------------
  5215                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5216                                                          push    edi                                             ;
  5217                                                          push    es                                              ;
  5218                                  ;
  5219                                  ;       Initialize console work areas.
  5220                                  ;
  5221                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5222                                                          pop     es                                              ;... into extra segment register
  5223                                                          mov     edi,ECONDATA                                    ;OS console data address
  5224                                                          xor     al,al                                           ;initialization value
  5225                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5226                                                          cld                                                     ;forward strings
  5227                                                          rep     stosb                                           ;initialize data
  5228                                  ;
  5229                                  ;       Initialize heap size
  5230                                  ;
  5231                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5232                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5233                                  ;
  5234                                  ;       Initialize MEMROOT structure
  5235                                  ;
  5236                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5237                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5238                                                          xor     ecx,ecx                                         ;zero register
  5239                                                          mov     cl,4                                            ;count
  5240                                                          rep     stosd                                           ;store first/last contig and free addrs
  5241                                                          xor     eax,eax                                         ;zero register
  5242                                                          stosd                                                   ;zero first task block
  5243                                                          stosd                                                   ;zero last task block
  5244                                  ;
  5245                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5246                                  ;
  5247                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5248                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5249                                                          stosd                                                   ;store signature
  5250                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5251                                                          stosd                                                   ;store block size
  5252                                                          xor     ecx,ecx                                         ;zero register
  5253                                                          mov     cl,6                                            ;count
  5254                                                          xor     eax,eax                                         ;zero register
  5255                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5256                                  ;
  5257                                  ;       Read memory sizes from ROM
  5258                                  ;
  5259                                                          getROMMemSize                                           ;get ROM memory size
  5260                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5261                                                          mov     ecx,eax                                         ;integer param
  5262                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5263                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5264                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5265                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5266                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5267                                                          mov     ecx,eax                                         ;integer param
  5268                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5269                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5270                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5271                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5272                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5273                                                          mov     ecx,eax                                         ;integer param
  5274                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5275                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5276                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5277                                  ;
  5278                                  ;       Restore and return.
  5279                                  ;
  5280                                                          pop     es                                              ;restore non-volatile regs
  5281                                                          pop     edi                                             ;
  5282                                                          pop     ecx                                             ;
  5283                                                          ret                                                     ;return
  5284                                  ;-----------------------------------------------------------------------------------------------------------------------
  5285                                  ;
  5286                                  ;       Routine:        ConTakeToken
  5287                                  ;
  5288                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5289                                  ;
  5290                                  ;       In:             DS:EDX  source buffer address
  5291                                  ;                       DS:EBX  target buffer address
  5292                                  ;
  5293                                  ;       Out:            DS:EDX  source buffer address
  5294                                  ;                       DS:EBX  target buffer address
  5295                                  ;
  5296                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5297                                  ;
  5298                                  ;-----------------------------------------------------------------------------------------------------------------------
  5299                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5300                                                          push    edi                                             ;
  5301                                                          push    es                                              ;
  5302                                                          push    ds                                              ;load data segment selector ...
  5303                                                          pop     es                                              ;... into extra segment reg
  5304                                                          mov     esi,edx                                         ;source buffer address
  5305                                                          mov     edi,ebx                                         ;target buffer address
  5306                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5307                                                          cld                                                     ;forward strings
  5308                                  .10                     lodsb                                                   ;load byte
  5309                                                          cmp     al,EASCIISPACE                                  ;space?
  5310                                                          je      .10                                             ;yes, continue
  5311                                                          test    al,al                                           ;end of line?
  5312                                                          jz      .40                                             ;yes, branch
  5313                                  .20                     stosb                                                   ;store byte
  5314                                                          lodsb                                                   ;load byte
  5315                                                          test    al,al                                           ;end of line?
  5316                                                          jz      .40                                             ;no, continue
  5317                                                          cmp     al,EASCIISPACE                                  ;space?
  5318                                                          jne     .20                                             ;no, continue
  5319                                  .30                     lodsb                                                   ;load byte
  5320                                                          cmp     al,EASCIISPACE                                  ;space?
  5321                                                          je      .30                                             ;yes, continue
  5322                                                          dec     esi                                             ;pre-position
  5323                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5324                                                          mov     edi,edx                                         ;source buffer address
  5325                                  .50                     lodsb                                                   ;remaining byte
  5326                                                          stosb                                                   ;move to front of buffer
  5327                                                          test    al,al                                           ;end of line?
  5328                                                          jnz     .50                                             ;no, continue
  5329                                                          pop     es                                              ;restore non-volatile regs
  5330                                                          pop     edi                                             ;
  5331                                                          pop     esi                                             ;
  5332                                                          ret                                                     ;return
  5333                                  ;-----------------------------------------------------------------------------------------------------------------------
  5334                                  ;
  5335                                  ;       Routine:        ConDetermineCommand
  5336                                  ;
  5337                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5338                                  ;
  5339                                  ;       input:          DS:EDX  command address
  5340                                  ;
  5341                                  ;       output:         EAX     >=0     = command nbr
  5342                                  ;                               0       = unknown command
  5343                                  ;
  5344                                  ;-----------------------------------------------------------------------------------------------------------------------
  5345                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5346                                                          push    ecx                                             ;
  5347                                                          push    esi                                             ;
  5348                                                          push    edi                                             ;
  5349                                  
  5350                                                          upperCaseString                                         ;upper-case string at EDX
  5351                                  
  5352                                                          mov     esi,tConCmdTbl                                  ;commands table
  5353                                                          xor     edi,edi                                         ;intialize command number
  5354                                                          cld                                                     ;forward strings
  5355                                  .10                     lodsb                                                   ;command length
  5356                                                          movzx   ecx,al                                          ;command length
  5357                                                          jecxz   .20                                             ;branch if end of table
  5358                                                          mov     ebx,esi                                         ;table entry address
  5359                                                          add     esi,ecx                                         ;next table entry address
  5360                                  
  5361                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5362                                  
  5363                                                          jecxz   .20                                             ;branch if equal
  5364                                                          inc     edi                                             ;increment command nbr
  5365                                                          jmp     .10                                             ;repeat
  5366                                  .20                     mov     eax,edi                                         ;command number
  5367                                                          pop     edi                                             ;restore non-volatile regs
  5368                                                          pop     esi                                             ;
  5369                                                          pop     ecx                                             ;
  5370                                                          pop     ebx                                             ;
  5371                                                          ret                                                     ;return
  5372                                  ;-----------------------------------------------------------------------------------------------------------------------
  5373                                  ;
  5374                                  ;       Routine:        ConClear
  5375                                  ;
  5376                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5377                                  ;
  5378                                  ;-----------------------------------------------------------------------------------------------------------------------
  5379                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5380                                                          ret                                                     ;return
  5381                                  ;-----------------------------------------------------------------------------------------------------------------------
  5382                                  ;
  5383                                  ;       Routine:        ConDate
  5384                                  ;
  5385                                  ;       Description:    This routine handles the DATE command.
  5386                                  ;
  5387                                  ;-----------------------------------------------------------------------------------------------------------------------
  5388                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5389                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5390                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5391                                                          putConsoleString  czNewLine                             ;write newline to console
  5392                                                          ret                                                     ;return
  5393                                  ;-----------------------------------------------------------------------------------------------------------------------
  5394                                  ;
  5395                                  ;       Routine:        ConDay
  5396                                  ;
  5397                                  ;       Description:    This routine handles the DAY command.
  5398                                  ;
  5399                                  ;-----------------------------------------------------------------------------------------------------------------------
  5400                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5401                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5402                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5403                                                          putConsoleString  czNewLine                             ;write newline to console
  5404                                                          ret                                                     ;return
  5405                                  ;-----------------------------------------------------------------------------------------------------------------------
  5406                                  ;
  5407                                  ;       Routine:        ConExit
  5408                                  ;
  5409                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5410                                  ;
  5411                                  ;-----------------------------------------------------------------------------------------------------------------------
  5412                                  ConExit                 resetSystem                                             ;issue system reset
  5413                                                          ret                                                     ;return
  5414                                  ;-----------------------------------------------------------------------------------------------------------------------
  5415                                  ;
  5416                                  ;       Routine:        ConFree
  5417                                  ;
  5418                                  ;       Description:    This routine handles the FREE command.
  5419                                  ;
  5420                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5421                                  ;
  5422                                  ;-----------------------------------------------------------------------------------------------------------------------
  5423                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5424                                                          push    ecx                                             ;
  5425                                                          push    esi                                             ;
  5426                                                          push    edi                                             ;
  5427                                  ;
  5428                                  ;       Get address parameter
  5429                                  ;
  5430                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5431                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5432                                                          call    ConTakeToken                                    ;take first param as token
  5433                                  ;
  5434                                  ;       Convert input parameter from hexadecimal string to binary
  5435                                  ;
  5436                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5437                                                          je      .10                                             ;no, branch
  5438                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5439                                  
  5440                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5441                                  
  5442                                                          test    eax,eax                                         ;valid parameter?
  5443                                                          jz      .10                                             ;no, branch
  5444                                  ;
  5445                                  ;       Free memory block
  5446                                  ;
  5447                                                          freeMemory eax                                          ;free memory
  5448                                  
  5449                                                          cmp     eax,-1                                          ;memory freed?
  5450                                                          je      .10                                             ;no, branch
  5451                                  ;
  5452                                  ;       Indicate memory freed
  5453                                  ;
  5454                                                          putConsoleString czOK                                   ;indicate success
  5455                                  ;
  5456                                  ;       Restore and return
  5457                                  ;
  5458                                  .10                     pop     edi                                             ;restore non-volatile regs
  5459                                                          pop     esi                                             ;
  5460                                                          pop     ecx                                             ;
  5461                                                          pop     ebx                                             ;
  5462                                                          ret                                                     ;return
  5463                                  ;-----------------------------------------------------------------------------------------------------------------------
  5464                                  ;
  5465                                  ;       Routine:        ConHour
  5466                                  ;
  5467                                  ;       Description:    This routine Handles the HOUR command.
  5468                                  ;
  5469                                  ;-----------------------------------------------------------------------------------------------------------------------
  5470                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5471                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5472                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5473                                                          putConsoleString  czNewLine                             ;write newline to console
  5474                                                          ret                                                     ;return
  5475                                  ;-----------------------------------------------------------------------------------------------------------------------
  5476                                  ;
  5477                                  ;       Routine:        ConInt6
  5478                                  ;
  5479                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5480                                  ;
  5481                                  ;-----------------------------------------------------------------------------------------------------------------------
  5482                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5483                                                          ret                                                     ;return (not executed)
  5484                                  ;-----------------------------------------------------------------------------------------------------------------------
  5485                                  ;
  5486                                  ;       Routine:        ConMalloc
  5487                                  ;
  5488                                  ;       Description:    This routine handles the MALLOC command.
  5489                                  ;
  5490                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5491                                  ;
  5492                                  ;-----------------------------------------------------------------------------------------------------------------------
  5493                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5494                                                          push    ecx                                             ;
  5495                                                          push    esi                                             ;
  5496                                                          push    edi                                             ;
  5497                                  ;
  5498                                  ;       Get size parameter
  5499                                  ;
  5500                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5501                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5502                                                          call    ConTakeToken                                    ;take first param as token
  5503                                  ;
  5504                                  ;       Convert input parameter from decimal string to binary
  5505                                  ;
  5506                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5507                                                          je      .10                                             ;no, branch
  5508                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5509                                  
  5510                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5511                                  
  5512                                                          test    eax,eax                                         ;valid parameter?
  5513                                                          jz      .10                                             ;no, branch
  5514                                  ;
  5515                                  ;       Allocate memory block
  5516                                  ;
  5517                                                          allocateMemory eax                                      ;allocate memory
  5518                                  
  5519                                                          test    eax,eax                                         ;memory allocated?
  5520                                                          jz      .10                                             ;no, branch
  5521                                  ;
  5522                                  ;       Report allocated memory block address
  5523                                  ;
  5524                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5525                                                          mov     ecx,eax                                         ;memory address
  5526                                  
  5527                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5528                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5529                                                          putConsoleString czNewLine                              ;display new line
  5530                                  
  5531                                  .10                     pop     edi                                             ;restore non-volatile regs
  5532                                                          pop     esi                                             ;
  5533                                                          pop     ecx                                             ;
  5534                                                          pop     ebx                                             ;
  5535                                                          ret                                                     ;return
  5536                                  ;-----------------------------------------------------------------------------------------------------------------------
  5537                                  ;
  5538                                  ;       Routine:        ConMem
  5539                                  ;
  5540                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5541                                  ;
  5542                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5543                                  ;
  5544                                  ;-----------------------------------------------------------------------------------------------------------------------
  5545                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5546                                                          push    esi                                             ;
  5547                                                          push    edi                                             ;
  5548                                  ;
  5549                                  ;                       update the source address if a parameter is given
  5550                                  ;
  5551                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5552                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5553                                                          call    ConTakeToken                                    ;take first param as token
  5554                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5555                                                          je      .10                                             ;no, branch
  5556                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5557                                  
  5558                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5559                                  
  5560                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5561                                  ;
  5562                                  ;                       setup source address and row count
  5563                                  ;
  5564                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5565                                                          xor     ecx,ecx                                         ;zero register
  5566                                                          mov     cl,16                                           ;row count
  5567                                  ;
  5568                                  ;                       start the row with the source address in hexadecimal
  5569                                  ;
  5570                                  .20                     push    ecx                                             ;save remaining rows
  5571                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5572                                                          mov     edx,edi                                         ;output buffer address
  5573                                                          mov     ecx,esi                                         ;console memory address
  5574                                  
  5575                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5576                                  
  5577                                                          add     edi,8                                           ;end of memory addr hexnum
  5578                                                          mov     al,' '                                          ;ascii space
  5579                                                          stosb                                                   ;store delimiter
  5580                                  ;
  5581                                  ;                       output 16 ASCII hexadecimal byte values for the row
  5582                                  ;
  5583                                                          xor     ecx,ecx                                         ;zero register
  5584                                                          mov     cl,16                                           ;loop count
  5585                                  .30                     push    ecx                                             ;save loop count
  5586                                                          lodsb                                                   ;memory byte
  5587                                                          mov     ah,al                                           ;memory byte
  5588                                                          shr     al,4                                            ;high-order in bits 3-0
  5589                                                          or      al,30h                                          ;apply ascii numeric zone
  5590                                                          cmp     al,3ah                                          ;numeric range?
  5591                                                          jb      .40                                             ;yes, skip ahead
  5592                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5593                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5594                                                          mov     al,ah                                           ;low-order in bits 3-0
  5595                                                          and     al,0fh                                          ;mask out high-order bits
  5596                                                          or      al,30h                                          ;apply ascii numeric zone
  5597                                                          cmp     al,3ah                                          ;numeric range?
  5598                                                          jb      .50                                             ;yes, skip ahead
  5599                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5600                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5601                                                          mov     al,' '                                          ;ascii space
  5602                                                          stosb                                                   ;store ascii space delimiter
  5603                                                          pop     ecx                                             ;loop count
  5604                                                          loop    .30                                             ;next
  5605                                  ;
  5606                                  ;                       output printable ASCII character section for the row
  5607                                  ;
  5608                                                          sub     esi,16                                          ;reset source pointer
  5609                                                          mov     cl,16                                           ;loop count
  5610                                  .60                     lodsb                                                   ;source byte
  5611                                                          cmp     al,32                                           ;printable? (low-range test)
  5612                                                          jb      .70                                             ;no, skip ahead
  5613                                                          cmp     al,128                                          ;printable? (high-range test)
  5614                                                          jb      .80                                             ;yes, skip ahead
  5615                                  .70                     mov     al,' '                                          ;display space instead of printable
  5616                                  .80                     stosb                                                   ;store printable ascii byte
  5617                                                          loop    .60                                             ;next source byte
  5618                                                          xor     al,al                                           ;nul-terminator
  5619                                                          stosb                                                   ;terminate output line
  5620                                  ;
  5621                                  ;                       display constructed output buffer and newline
  5622                                  ;
  5623                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5624                                                          putConsoleString czNewLine                              ;display new line
  5625                                  ;
  5626                                  ;                       repeat until all lines displayed and preserve source address
  5627                                  ;
  5628                                                          pop     ecx                                             ;remaining rows
  5629                                                          loop    .20                                             ;next row
  5630                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5631                                                          pop     edi                                             ;restore regs
  5632                                                          pop     esi                                             ;
  5633                                                          pop     ebx                                             ;
  5634                                                          ret                                                     ;return
  5635                                  ;-----------------------------------------------------------------------------------------------------------------------
  5636                                  ;
  5637                                  ;       Routine:        ConMinute
  5638                                  ;
  5639                                  ;       Description:    This routine Handles the MINUTE command.
  5640                                  ;
  5641                                  ;-----------------------------------------------------------------------------------------------------------------------
  5642                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5643                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5644                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5645                                                          putConsoleString  czNewLine                             ;write newline to console
  5646                                                          ret                                                     ;return
  5647                                  ;-----------------------------------------------------------------------------------------------------------------------
  5648                                  ;
  5649                                  ;       Routine:        ConMonth
  5650                                  ;
  5651                                  ;       Description:    This routine Handles the MONTH command.
  5652                                  ;
  5653                                  ;-----------------------------------------------------------------------------------------------------------------------
  5654                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5655                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5656                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5657                                                          putConsoleString  czNewLine                             ;write newline to console
  5658                                                          ret                                                     ;return
  5659                                  ;-----------------------------------------------------------------------------------------------------------------------
  5660                                  ;
  5661                                  ;       Routine:        ConMonthName
  5662                                  ;
  5663                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5664                                  ;
  5665                                  ;-----------------------------------------------------------------------------------------------------------------------
  5666                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5667                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5668                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5669                                                          putConsoleString   czNewLine                            ;write newline to console
  5670                                                          ret                                                     ;return
  5671                                  ;-----------------------------------------------------------------------------------------------------------------------
  5672                                  ;
  5673                                  ;       Routine:        ConPCIProbe
  5674                                  ;
  5675                                  ;       Description:    This routine handles the PCIProbe command.
  5676                                  ;
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5679                                  ;
  5680                                  ;                       initialize variables
  5681                                  ;
  5682                                                          xor     al,al                                           ;zero register
  5683                                                          mov     [wbConsolePCIBus],al                            ;initialize bus
  5684                                                          mov     [wbConsolePCIDevice],al                         ;initialize device
  5685                                                          mov     [wbConsolePCIFunction],al                       ;initialize function
  5686                                  ;
  5687                                  ;                       construct PCI selector
  5688                                  ;
  5689                                  .10                     mov     ah,[wbConsolePCIBus]                            ;AH = bbbb bbbb
  5690                                                          mov     dl,[wbConsolePCIDevice]                         ;DL = ???d dddd
  5691                                                          shl     dl,3                                            ;DL = dddd d000
  5692                                                          mov     al,[wbConsolePCIFunction]                       ;AL = ???? ?fff
  5693                                                          and     al,007h                                         ;AL = 0000 0fff
  5694                                                          or      al,dl                                           ;AL = dddd dfff
  5695                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5696                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5697                                                          or      eax,80000000h                                   ;1000 0000 bbbb bbbb dddd dfff 0000 0000
  5698                                                          mov     [wdConsolePCISelector],eax                      ;save selector
  5699                                  ;
  5700                                  ;                       read PCI data register
  5701                                  ;
  5702                                                          mov     dx,0cf8h                                        ;register port
  5703                                                          out     dx,eax                                          ;select device
  5704                                                          mov     dx,0cfch                                        ;data port
  5705                                                          in      eax,dx                                          ;read register data
  5706                                                          mov     [wdConsolePCIData],eax                          ;save data
  5707                                  ;
  5708                                  ;                       interpret PCI data value and display finding
  5709                                  ;
  5710                                                          cmp     eax,0ffffffffh                                  ;not defined?
  5711                                                          je      .20                                             ;yes, branch
  5712                                                          mov     edx,wzConsoleToken                              ;output buffer
  5713                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5714                                  
  5715                                                          putConsoleString wzConsoleToken                         ;display bus as decimal
  5716                                  
  5717                                                          call    ConInterpretPCIData                             ;update flags based on data
  5718                                  
  5719                                                          putConsoleString czSpace
  5720                                                          putConsoleString [wdConsolePCIVendorStr]
  5721                                                          putConsoleString czSpace
  5722                                                          putConsoleString [wdConsolePCIChipStr]
  5723                                                          putConsoleString czNewLine                              ;display new line
  5724                                  ;
  5725                                  ;                       step to next function, device, bus
  5726                                  ;
  5727                                  .20                     inc     byte [wbConsolePCIFunction]                     ;next function
  5728                                                          cmp     byte [wbConsolePCIFunction],8                   ;at limit?
  5729                                                          jb      .10                                             ;no, continue
  5730                                                          mov     byte [wbConsolePCIFunction],0                   ;zero function
  5731                                                          inc     byte [wbConsolePCIDevice]                       ;next device
  5732                                                          cmp     byte [wbConsolePCIDevice],32                    ;at limit?
  5733                                                          jb      .10                                             ;no, continue
  5734                                                          mov     byte [wbConsolePCIDevice],0                     ;zero device
  5735                                                          inc     byte [wbConsolePCIBus]                          ;next bus
  5736                                                          cmp     byte [wbConsolePCIBus],0                        ;at limit?
  5737                                                          jb      .10                                             ;no, continue
  5738                                  
  5739                                                          jmp     .30
  5740                                  
  5741                                  ;
  5742                                  ;                       report if ethernet adapter found
  5743                                  ;
  5744                                                          test    byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet h/w switch set?
  5745                                                          jz      .30                                             ;branch if no
  5746                                  
  5747                                                          putConsoleString czEthernetAdapterFound                 ;report adapter found
  5748                                  ;
  5749                                  ;                       read base address register 0 at offset 10h
  5750                                  ;
  5751                                                          mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5752                                                          or      eax,10h                                         ;set function bits
  5753                                                          mov     dx,0cf8h                                        ;register port
  5754                                                          out     dx,eax                                          ;select register
  5755                                                          mov     dx,0cfch                                        ;data port
  5756                                                          in      eax,dx                                          ;register data
  5757                                                          mov     [wdConsoleEthernetMem],eax                      ;save ethernet memory mapped i/o addr
  5758                                  ;
  5759                                  ;                       report base address register 0 value
  5760                                  ;
  5761                                                          mov     ecx,eax                                         ;unsigned integer param
  5762                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5763                                  
  5764                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5765                                                          putConsoleString wzConsoleToken                         ;output string to console
  5766                                                          putConsoleString czNewLine                              ;output newline to console
  5767                                  ;
  5768                                  ;                       read base address register 2 at offset 18h
  5769                                  ;
  5770                                                          mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5771                                                          or      eax,18h                                         ;set function bits
  5772                                                          mov     dx,0cf8h                                        ;register port
  5773                                                          out     dx,eax                                          ;select register
  5774                                                          mov     dx,0cfch                                        ;data port
  5775                                                          in      eax,dx                                          ;register data
  5776                                                          and     al,0feh                                         ;clear bit zero
  5777                                                          mov     [wdConsoleEthernetPort],eax                     ;save ethernet i/o port
  5778                                  ;
  5779                                  ;                       report base address register 2 value
  5780                                  ;
  5781                                                          mov     ecx,eax                                         ;unsigned integer param
  5782                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5783                                  
  5784                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5785                                                          putConsoleString wzConsoleToken                         ;output string to console
  5786                                                          putConsoleString czNewLine                              ;output newline to console
  5787                                  ;
  5788                                  ;                       read ethernet control register using port i/o
  5789                                  ;
  5790                                                          mov     eax,[wdConsoleEthernetPort]                     ;ethernet i/o port
  5791                                                          mov     dx,ax                                           ;ethernet i/o port
  5792                                                          xor     eax,eax                                         ;control register (zero)
  5793                                                          out     dx,eax                                          ;select register
  5794                                                          add     dx,4                                            ;data register
  5795                                                          in      eax,dx                                          ;read register data
  5796                                                          mov     [wdConsoleEthernetCtrl],eax                     ;save ethernet control register value
  5797                                  ;
  5798                                  ;                       report adapter control register value
  5799                                  ;
  5800                                                          mov     ecx,eax                                         ;unsigned integer param
  5801                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5802                                  
  5803                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5804                                                          putConsoleString wzConsoleToken                         ;output string to console
  5805                                                          putConsoleString czNewLine                              ;output newline to console
  5806                                  
  5807                                  .30                     pop     ebx                                             ;restore non-volatile regs
  5808                                                          ret                                                     ;return
  5809                                  ;-----------------------------------------------------------------------------------------------------------------------
  5810                                  ;
  5811                                  ;       Routine:        ConBuildPCIIdent
  5812                                  ;
  5813                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5814                                  ;                       Function code values.
  5815                                  ;
  5816                                  ;       In:             DS:EDX  output buffer address
  5817                                  ;
  5818                                  ;-----------------------------------------------------------------------------------------------------------------------
  5819                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5820                                                          mov     edi,edx                                         ;output buffer address
  5821                                                          mov     al,[wbConsolePCIBus]                            ;current PCI bus (0-255)
  5822                                                          xor     ah,ah                                           ;zero high-order dividend
  5823                                                          mov     cl,100                                          ;divisor (10^2)
  5824                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  5825                                                          or      al,30h                                          ;apply ASCII zone
  5826                                                          cld                                                     ;forward strings
  5827                                                          stosb                                                   ;store 100's digit
  5828                                                          mov     al,ah                                           ;bus MOD 100
  5829                                                          xor     ah,ah                                           ;zero high-order dividend
  5830                                                          mov     cl,10                                           ;divisor (10^1)
  5831                                                          div     cl                                              ;AL=10's, AH=1's
  5832                                                          or      ax,3030h                                        ;apply ASCII zone
  5833                                                          stosw                                                   ;store 10's and 1's
  5834                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5835                                                          stosb                                                   ;store delimiter
  5836                                                          mov     al,[wbConsolePCIDevice]                         ;current PCI device (0-15)
  5837                                                          xor     ah,ah                                           ;zero high order dividend
  5838                                                          mov     cl,10                                           ;divisor (10^1)
  5839                                                          div     cl                                              ;AL=10's, AH=1's
  5840                                                          or      ax,3030h                                        ;apply ASCII zone
  5841                                                          stosw                                                   ;store 10's and 1's
  5842                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5843                                                          stosb                                                   ;store delimiter
  5844                                                          mov     al,[wbConsolePCIFunction]                       ;current PCI function (0-7)
  5845                                                          or      al,30h                                          ;apply ASCII zone
  5846                                                          stosb                                                   ;store 1's
  5847                                                          xor     al,al                                           ;null terminator
  5848                                                          stosb                                                   ;store terminator
  5849                                                          pop     edi                                             ;restore non-volatile regs
  5850                                                          ret                                                     ;return
  5851                                  ;-----------------------------------------------------------------------------------------------------------------------
  5852                                  ;
  5853                                  ;       Routine:        ConInterpretPCIData
  5854                                  ;
  5855                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  5856                                  ;
  5857                                  ;-----------------------------------------------------------------------------------------------------------------------
  5858                                  ConInterpretPCIData     mov     eax,czApple
  5859                                                          cmp     word [wwConsolePCIVendor],EPCIVENDORAPPLE       ;Apple?
  5860                                                          jne     .10                                             ;no, branch
  5861                                                          mov     edx,czUSBController
  5862                                                          cmp     word [wwConsolePCIChip],EPCIAPPLEUSB            ;USB?
  5863                                                          je      .80                                             ;yes, branch
  5864                                                          mov     edx,czOther                                     ;other
  5865                                                          jmp     .80                                             ;continue
  5866                                  .10                     mov     eax,czIntel                                     ;Intel
  5867                                                          cmp     word [wwConsolePCIVendor],EPCIVENDORINTEL       ;Intel?
  5868                                                          jne     .20                                             ;no, branch
  5869                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  5870                                                          cmp     word [wwConsolePCIChip],EPCIINTELPRO1000MT      ;Pro/1000 MT?
  5871                                                          je      .80                                             ;yes, branch
  5872                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  5873                                                          cmp     word [wwConsolePCIChip],EPCIINTELPCIMEM         ;PCI and Memory?
  5874                                                          je      .80                                             ;yes, branch
  5875                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  5876                                                          cmp     word [wwConsolePCIChip],EPCIINTELAD1881         ;Aureal 1881 SOUNDMAX?
  5877                                                          je      .80                                             ;yes, branch
  5878                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  5879                                                          cmp     word [wwConsolePCIChip],EPCIINTELPIIX3          ;PIIX3 PCI-to-IDE Bridge?
  5880                                                          je      .80                                             ;yes, branch
  5881                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  5882                                                          cmp     word [wwConsolePCIChip],EPCIINTEL82371AB        ;82371AB Bus Master?
  5883                                                          je      .80                                             ;yes, branch
  5884                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  5885                                                          cmp     word [wwConsolePCIChip],EPCIINTELPIIX4          ;PIIX4/4E/4M Power Mgmt Controller?
  5886                                                          je      .80                                             ;yes, branch
  5887                                                          mov     edx,czOther                                     ;other
  5888                                                          jmp     .80                                             ;continue
  5889                                  .20                     mov     eax,czOracle                                    ;Oracle
  5890                                                          cmp     word [wwConsolePCIVendor],EPCIVENDORORACLE      ;Oracle?
  5891                                                          jne     .30                                             ;no, branch
  5892                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  5893                                                          cmp     word [wwConsolePCIChip],EPCIORACLEVBOXGA        ;VirtualBox Graphics Adapter?
  5894                                                          je      .80                                             ;yes, branch
  5895                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  5896                                                          cmp     word [wwConsolePCIChip],EPCIORACLEVBOXDEVICE    ;VirtualBox Device?
  5897                                                          je      .80                                             ;yes, branch
  5898                                                          mov     edx,czOther                                     ;other
  5899                                                          jmp     .80                                             ;continue
  5900                                  .30                     mov     eax,czOther                                     ;other
  5901                                                          mov     edx,czOther                                     ;other
  5902                                  .80                     mov     [wdConsolePCIVendorStr],eax                     ;save vendor string
  5903                                                          mov     [wdConsolePCIChipStr],edx                       ;save chip string
  5904                                                          cmp     word [wwConsolePCIChip],EPCIINTELPRO1000MT      ;Pro/1000 MT Ethernet Adapter
  5905                                                          jne     .90                                             ;no, branch
  5906                                                          or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5907                                                          mov     eax,[wdConsolePCISelector]                      ;PCI selector
  5908                                                          mov     [wdConsoleEthernetDevice],eax                   ;save as ethernet device selector
  5909                                  .90                     ret                                                     ;return
  5910                                  ;-----------------------------------------------------------------------------------------------------------------------
  5911                                  ;
  5912                                  ;       Routine:        ConSecond
  5913                                  ;
  5914                                  ;       Description:    This routine Handles the SECOND command.
  5915                                  ;
  5916                                  ;-----------------------------------------------------------------------------------------------------------------------
  5917                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5918                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5919                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5920                                                          putConsoleString  czNewLine                             ;write newline to console
  5921                                                          ret                                                     ;return
  5922                                  ;-----------------------------------------------------------------------------------------------------------------------
  5923                                  ;
  5924                                  ;       Routine:        ConTime
  5925                                  ;
  5926                                  ;       Description:    This routine Handles the TIME command.
  5927                                  ;
  5928                                  ;-----------------------------------------------------------------------------------------------------------------------
  5929                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5930                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5931                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5932                                                          putConsoleString  czNewLine                             ;write newline to console
  5933                                                          ret                                                     ;return
  5934                                  ;-----------------------------------------------------------------------------------------------------------------------
  5935                                  ;
  5936                                  ;       Routine:        ConVersion
  5937                                  ;
  5938                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5939                                  ;
  5940                                  ;-----------------------------------------------------------------------------------------------------------------------
  5941                                  ConVersion              putConsoleString czTitle                                ;display version message
  5942                                                          ret                                                     ;return
  5943                                  ;-----------------------------------------------------------------------------------------------------------------------
  5944                                  ;
  5945                                  ;       Routine:        ConWeekday
  5946                                  ;
  5947                                  ;       Description:    This routine handles the WEEKDAY command.
  5948                                  ;
  5949                                  ;-----------------------------------------------------------------------------------------------------------------------
  5950                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5951                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5952                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5953                                                          putConsoleString  czNewLine                             ;write newline to console
  5954                                                          ret                                                     ;return
  5955                                  ;-----------------------------------------------------------------------------------------------------------------------
  5956                                  ;
  5957                                  ;       Routine:        ConWeekdayName
  5958                                  ;
  5959                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5960                                  ;
  5961                                  ;-----------------------------------------------------------------------------------------------------------------------
  5962                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5963                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5964                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5965                                                          putConsoleString     czNewLine                                  ;write newline to console
  5966                                                          ret                                                             ;return
  5967                                  ;-----------------------------------------------------------------------------------------------------------------------
  5968                                  ;
  5969                                  ;       Routine:        ConYear
  5970                                  ;
  5971                                  ;       Description:    This routine Handles the YEAR command.
  5972                                  ;
  5973                                  ;-----------------------------------------------------------------------------------------------------------------------
  5974                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5975                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5976                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5977                                                          putConsoleString  czNewLine                             ;write newline to console
  5978                                                          ret                                                     ;return
  5979                                  ;-----------------------------------------------------------------------------------------------------------------------
  5980                                  ;
  5981                                  ;       Routine:        ConYearIsLeap
  5982                                  ;
  5983                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5984                                  ;
  5985                                  ;-----------------------------------------------------------------------------------------------------------------------
  5986                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5987                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5988                                  
  5989                                                          jecxz   .10                                             ;branch if not leap
  5990                                  
  5991                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5992                                  
  5993                                                          jmp     .20                                             ;continue
  5994                                  
  5995                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5996                                  .20                     ret                                                     ;return
  5997                                  ;-----------------------------------------------------------------------------------------------------------------------
  5998                                  ;
  5999                                  ;       Tables
  6000                                  ;
  6001                                  ;-----------------------------------------------------------------------------------------------------------------------
  6002                                                                                                                  ;---------------------------------------
  6003                                                                                                                  ;  Command Jump Table
  6004                                                                                                                  ;---------------------------------------
  6005                                  tConJmpTbl              equ     $                                               ;command jump table
  6006                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6007                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6008                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6009                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6010                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6011                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6012                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6013                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6014                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6015                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6016                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6017                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6018                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6019                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6020                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6021                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6022                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6023                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6024                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6025                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6026                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6027                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6028                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6029                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6030                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6031                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6032                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6033                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6034                                                                                                                  ;---------------------------------------
  6035                                                                                                                  ;  Command Name Table
  6036                                                                                                                  ;---------------------------------------
  6037                                  tConCmdTbl              equ     $                                               ;command name table
  6038                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6039                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6040                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6041                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6042                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6043                                                          db      8,"VERSION",0                                   ;version command
  6044                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6045                                                          db      7,"MALLOC",0                                    ;malloc command
  6046                                                          db      7,"MEMORY",0                                    ;memory command
  6047                                                          db      7,"MINUTE",0                                    ;minute command
  6048                                                          db      7,"SECOND",0                                    ;second command
  6049                                                          db      6,"CLEAR",0                                     ;clear command
  6050                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6051                                                          db      6,"MONTH",0                                     ;month command
  6052                                                          db      5,"DATE",0                                      ;date command
  6053                                                          db      5,"EXIT",0                                      ;exit command
  6054                                                          db      5,"FREE",0                                      ;free command
  6055                                                          db      5,"HOUR",0                                      ;hour command
  6056                                                          db      5,"INT6",0                                      ;int6 command
  6057                                                          db      5,"QUIT",0                                      ;quit command
  6058                                                          db      5,"TIME",0                                      ;time command
  6059                                                          db      5,"YEAR",0                                      ;year command
  6060                                                          db      4,"CLS",0                                       ;cls command
  6061                                                          db      4,"DAY",0                                       ;day command
  6062                                                          db      4,"MEM",0                                       ;mem command
  6063                                                          db      4,"VER",0                                       ;ver command
  6064                                                          db      0                                               ;end of table
  6065                                  ;-----------------------------------------------------------------------------------------------------------------------
  6066                                  ;
  6067                                  ;       Constants
  6068                                  ;
  6069                                  ;-----------------------------------------------------------------------------------------------------------------------
  6070                                  czApple                 db      "Apple",0                                       ;vendor name string
  6071                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6072                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6073                                  czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6074                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6075                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6076                                  czKB                    db      "KB",0                                          ;Kilobytes
  6077                                  czNewLine               db      13,10,0                                         ;new line string
  6078                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6079                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6080                                  czOther                 db      "Other",0                                       ;default name string
  6081                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6082                                  czPeriod                db      ".",0                                           ;period delimiter
  6083                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6084                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6085                                  czPrompt                db      ":",0                                           ;prompt string
  6086                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6087                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6088                                  czSpace                 db      " ",0                                           ;space delimiter
  6089                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6090                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6091                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6092                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6093                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6094                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6095                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6096                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6097                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6098                                  %endif
  6099                                  %ifdef BUILDDISK
  6100                                  ;-----------------------------------------------------------------------------------------------------------------------
  6101                                  ;
  6102                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6103                                  ;
  6104                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6105                                  ;
  6106                                  ;-----------------------------------------------------------------------------------------------------------------------
  6107                                  section                 unused                                                  ;unused disk space
  6108                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6109                                  %endif
  6110                                  ;=======================================================================================================================
  6111                                  ;
  6112                                  ;       End of Program Code
  6113                                  ;
  6114                                  ;=======================================================================================================================
