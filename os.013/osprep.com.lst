     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.013
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;                       system for PCI expansion BIOS.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EKEYF...        Keyboard status flags
   169                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   170                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   171                                  ;       EMEM...         Memory Management values
   172                                  ;       EMSG...         Message identifers
   173                                  ;
   174                                  ;=======================================================================================================================
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       Hardware-Defined Values
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;
   182                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   183                                  ;
   184                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   185                                  ;       for CGA, EGA, VGA and compatible video modes.
   186                                  ;
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   189                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   190                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   191                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  ;
   194                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   195                                  ;
   196                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   197                                  ;
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   200                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   201                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   202                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   203                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  ;
   206                                  ;       8042 Keyboard Controller                                                EKEYB...
   207                                  ;
   208                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   209                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   210                                  ;
   211                                  ;-----------------------------------------------------------------------------------------------------------------------
   212                                  EKEYBPORTDATA           equ     060h                                            ;data port
   213                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   214                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   215                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   216                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   217                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   218                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   219                                                                                                                  ;---------------------------------------
   220                                                                                                                  ;       Keyboard Scan Codes
   221                                                                                                                  ;---------------------------------------
   222                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   223                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   224                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   225                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   226                                  EKEYBSLASH              equ     035h                                            ;slash
   227                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   228                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   229                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   230                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   231                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   232                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   233                                  EKEYBUP                 equ     080h                                            ;up
   234                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   235                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   236                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   237                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   238                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   239                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   240                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   241                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   242                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   243                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   244                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   245                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  ;
   248                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   249                                  ;
   250                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   251                                  ;       external devices and signals a hardware interrupt to the CPU.
   252                                  ;
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   255                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   256                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   257                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   258                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  ;
   261                                  ;       8253 Programmable Interval Timer                                        EPIT...
   262                                  ;
   263                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   264                                  ;       approximately 18.2 times per second.
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   271                                  ;
   272                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   273                                  ;
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  ERTCREGPORT             equ     070h                                            ;register select port
   276                                  ERTCDATAPORT            equ     071h                                            ;data port
   277                                  ERTCSECONDREG           equ     000h                                            ;second
   278                                  ERTCMINUTEREG           equ     002h                                            ;minute
   279                                  ERTCHOURREG             equ     004h                                            ;hour
   280                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   281                                  ERTCDAYREG              equ     007h                                            ;day
   282                                  ERTCMONTHREG            equ     008h                                            ;month
   283                                  ERTCYEARREG             equ     009h                                            ;year of the century
   284                                  ERTCSTATUSREG           equ     00bh                                            ;status
   285                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   286                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   287                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   288                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   289                                  ERTCCENTURYREG          equ     032h                                            ;century
   290                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;
   293                                  ;       x86 CPU Architecture                                                    ;EX86...
   294                                  ;
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   300                                  ;
   301                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   302                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   303                                  ;
   304                                  ;       0.......        Segment is not present in memory (triggers int 11)
   305                                  ;       1.......        Segment is present in memory
   306                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   307                                  ;       ...0....        Segment is a system segment
   308                                  ;       ...00010                Local Descriptor Table
   309                                  ;       ...00101                Task Gate
   310                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   311                                  ;       ...01100                Call Gate (386)
   312                                  ;       ...01110                Interrupt Gate (386)
   313                                  ;       ...01111                Trap Gate (386)
   314                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   315                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   316                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   317                                  ;
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   320                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   321                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   322                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   323                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   324                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   325                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   326                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       Firmware-Defined Values
   330                                  ;
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;
   334                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   335                                  ;
   336                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   337                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   341                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   342                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   343                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   344                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   345                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   346                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   347                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   348                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   349                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   350                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       Standards-Based Values
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;
   358                                  ;       ASCII                                                                   EASCII...
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   362                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   363                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   364                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   365                                  EASCIISPACE             equ     020h                                            ;space
   366                                  EASCIIPERIOD            equ     02Eh                                            ;period
   367                                  EASCIIUPPERA            equ     041h                                            ;'A'
   368                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   369                                  EASCIILOWERA            equ     061h                                            ;'a'
   370                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   371                                  EASCIITILDE             equ     07Eh                                            ;'~'
   372                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   373                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   374                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   375                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   376                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   377                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   378                                  EASCIICASE              equ     00100000b                                       ;case bit
   379                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  ;
   382                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   383                                  ;
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  EPCIPORTCONFIGADDR      equ     0CF8h                                           ;PCI Configuration Address Port
   386                                  EPCIPORTCONFIGDATA      equ     0CFCh                                           ;PCI Configuration Data Port
   387                                  EPCIVENDORAPPLE         equ     106Bh                                           ;Apple
   388                                  EPCIVENDORINTEL         equ     8086h                                           ;Intel
   389                                  EPCIVENDORORACLE        equ     80EEh                                           ;Oracle
   390                                  EPCIAPPLEUSB            equ     003Fh                                           ;USB Controller
   391                                  EPCIINTELPRO1000MT      equ     100Fh                                           ;Pro/1000 MT Ethernet Adapter
   392                                  EPCIINTELPCIMEM         equ     1237h                                           ;PCI & Memory
   393                                  EPCIINTELAD1881         equ     2415h                                           ;Aureal AD1881 SOUNDMAX
   394                                  EPCIINTELPIIX3          equ     7000h                                           ;PIIX3 PCI-to-ISA Bridge (Triton II)
   395                                  EPCIINTEL82371AB        equ     7111h                                           ;82371AB/EB PCI Bus Master IDE Cntrlr
   396                                  EPCIINTELPIIX4          equ     7113h                                           ;PIIX4/4E/4M Power Mgmt Cntrlr
   397                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   398                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  ;
   401                                  ;       Operating System Values
   402                                  ;
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;
   406                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   407                                  ;
   408                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   409                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   410                                  ;
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   413                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   414                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   415                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   416                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   417                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   418                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;       Console Constants                                                       ECON...
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  ECONCOLS                equ     80                                              ;columns per row
   423                                  ECONROWS                equ     24                                              ;console rows
   424                                  ECONOIAROW              equ     24                                              ;operator information area row
   425                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   426                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   427                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   428                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   429                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   434                                  EGDTCGA                 equ     020h                                            ;cga video selector
   435                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   436                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   437                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   438                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   439                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   440                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  ;       Keyboard Flags                                                          EKEYF...
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   445                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   446                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   447                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   448                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   449                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   450                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   451                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   452                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   453                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   454                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   455                                  ;-----------------------------------------------------------------------------------------------------------------------
   456                                  ;       Kernel Constants                                                        EKRN...
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   459                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   460                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   461                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   462                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   463                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  ;       Memory Management Constants                                             EMEM...
   470                                  ;-----------------------------------------------------------------------------------------------------------------------
   471                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   472                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   473                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   474                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;       Message Identifiers                                                     EMSG...
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   479                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   480                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   481                                  ;=======================================================================================================================
   482                                  ;
   483                                  ;       Structures
   484                                  ;
   485                                  ;=======================================================================================================================
   486                                  ;-----------------------------------------------------------------------------------------------------------------------
   487                                  ;
   488                                  ;       DATETIME
   489                                  ;
   490                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   491                                  ;
   492                                  ;-----------------------------------------------------------------------------------------------------------------------
   493                                  struc                   DATETIME
   494 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   495 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   496 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   497 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   498 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   499 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   500 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   501 00000007 <res 00000001>          .century                resb    1                                               ;century
   502                                  EDATETIMELEN            equ     ($-.second)
   503                                  endstruc
   504                                  ;-----------------------------------------------------------------------------------------------------------------------
   505                                  ;
   506                                  ;       MEMBLOCK
   507                                  ;
   508                                  ;       The MEMBLOCK structure defines a memory block.
   509                                  ;
   510                                  ;-----------------------------------------------------------------------------------------------------------------------
   511                                  struc                   MEMBLOCK
   512 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   513 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   514 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   515 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   516 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   517 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   518 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   519 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   520                                  EMEMBLOCKLEN            equ     ($-.signature)
   521                                  endstruc
   522                                  ;-----------------------------------------------------------------------------------------------------------------------
   523                                  ;
   524                                  ;       MEMROOT
   525                                  ;
   526                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   527                                  ;
   528                                  ;-----------------------------------------------------------------------------------------------------------------------
   529                                  struc                   MEMROOT
   530 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   531 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   532 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   533 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   534 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   535 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   536                                  EMEMROOTLEN             equ     ($-.firstcontig)
   537                                  endstruc
   538                                  ;-----------------------------------------------------------------------------------------------------------------------
   539                                  ;
   540                                  ;       MQUEUE
   541                                  ;
   542                                  ;       The MQUEUE structure maps memory used for a message queue.
   543                                  ;
   544                                  ;-----------------------------------------------------------------------------------------------------------------------
   545                                  struc                   MQUEUE
   546 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   547 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   548 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   549                                  endstruc
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551                                  ;
   552                                  ;       PCI
   553                                  ;
   554                                  ;       The PCI structure defines a PCI bus, device and function context.
   555                                  ;
   556                                  ;-----------------------------------------------------------------------------------------------------------------------
   557                                  struc                   PCI
   558                                  .configdata             equ     $                                               ;data read from port 0CFCh
   559 00000000 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   560 00000002 <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   561 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff 0000 0000
   562 00000008 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   563 00000009 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   564 0000000A <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   565 0000000B <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   566 0000000C <res 00000004>          .bar0                   resd    1                                               ;base address register 0
   567 00000010 <res 00000004>          .bar1                   resd    1                                               ;base address register 1
   568 00000014 <res 00000004>          .bar2                   resd    1                                               ;base address register 2
   569 00000018 <res 00000004>          .bar3                   resd    1                                               ;base address register 3
   570 0000001C <res 00000004>          .bar4                   resd    1                                               ;base address register 4
   571 00000020 <res 00000004>          .bar5                   resd    1                                               ;base address register 5
   572                                  EPCILEN                 equ     ($-.configdata)
   573                                  endstruc
   574                                  ;-----------------------------------------------------------------------------------------------------------------------
   575                                  ;
   576                                  ;       OSDATA
   577                                  ;
   578                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   579                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   580                                  ;
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  struc                   OSDATA
   583 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   584 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   585 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   586 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   587 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   588 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   589 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   590 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   591 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   592 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   593 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   594 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   595 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   596 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   597 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   598 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   599 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   600 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   601 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   602 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   603 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   604 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   605 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   606 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   607 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   608 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   609 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   610 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   611 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   612 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   613 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   614 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   615 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   616 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   617 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   618 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   619 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   620 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   621 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   622 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   623 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   624 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   625 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   626 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   627 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   628 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   629 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   630 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   631 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   632 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   633 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   634 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   635 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   636 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   637 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   638 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   639 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   640 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   641 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   642 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   643 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   644 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   645 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   646 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   647 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   648 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   649 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   650 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   651 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   652 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   653 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   654 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   655 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   656 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   657 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   658 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   659 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   660 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   661 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   662 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   663 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   664 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   665 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   666 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   667 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   668 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   669 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   670 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   671 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   672 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   673 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   674 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   675 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   676 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   677 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   678 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   679 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   680 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   681 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   682 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   683 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   684                                  ;-----------------------------------------------------------------------------------------------------------------------
   685                                  ;
   686                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   687                                  ;
   688                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   689                                  ;
   690                                  ;-----------------------------------------------------------------------------------------------------------------------
   691                                  ECONDATA                equ     ($)
   692 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   693 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   694 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   695 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   696 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   697 00000814 <res 00000004>          wdConsolePCIVendorStr   resd    1                                               ;PCI vendor name string addr
   698 00000818 <res 00000004>          wdConsolePCIChipStr     resd    1                                               ;PCI device name string addr
   699 0000081C <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   700 0000081D <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   701 0000081E <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   702 0000081F <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   703 00000820 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   704 00000821 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   705 00000822 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   706 00000823 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   707 00000824 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   708 00000825 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   709 00000826 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   710 00000827 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   711 00000828 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   712 00000878 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   713 000008C8 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   714 00000918 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   715 00000923 <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   716 0000092E <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   717 00000939 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   718 00000951 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   719 00000959 <res 00000024>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   720                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   721                                  ;-----------------------------------------------------------------------------------------------------------------------
   722                                  ;
   723                                  ;       End of OS Variables
   724                                  ;
   725                                  ;-----------------------------------------------------------------------------------------------------------------------
   726                                  endstruc
   727                                  ;-----------------------------------------------------------------------------------------------------------------------
   728                                  ;
   729                                  ;       Macros
   730                                  ;
   731                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   732                                  ;
   733                                  ;-----------------------------------------------------------------------------------------------------------------------
   734                                  %macro                  mint    1
   735                                  _%1                     equ     ($-$$) / EX86DESCLEN
   736                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   737                                  %endmacro
   738                                  %macro                  mtrap   1
   739                                  _%1                     equ     ($-$$) / EX86DESCLEN
   740                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   741                                  %endmacro
   742                                  %macro                  menter  1
   743                                  ?%1                     equ     ($-$$)
   744                                  %endmacro
   745                                  %macro                  tsvce   1
   746                                  e%1                     equ     ($-tsvc)/4
   747                                                          dd      %1
   748                                  %endmacro
   749                                  %ifdef BUILDBOOT
   750                                  ;=======================================================================================================================
   751                                  ;
   752                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   753                                  ;
   754                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   755                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   756                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   757                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   758                                  ;
   759                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   760                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   761                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   762                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   763                                  ;       immediately followed by a disk parameter table.
   764                                  ;
   765                                  ;=======================================================================================================================
   766                                                          cpu     8086                                            ;assume minimal CPU
   767                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   768                                                          bits    16                                              ;16-bit code at power-up
   769                                  %ifdef BUILDPREP
   770 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   771                                  %else
   772                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   773                                  %endif
   774                                  ;-----------------------------------------------------------------------------------------------------------------------
   775                                  ;
   776                                  ;       Disk Parameter Table
   777                                  ;
   778                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   779                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   780                                  ;
   781                                  ;-----------------------------------------------------------------------------------------------------------------------
   782 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   783 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   784 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   785 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   786 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   787 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   788 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   789 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   790 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   791                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   792 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   793 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   794 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   795                                  ;
   796                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   797                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   798                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   799                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   800                                  ;       given several possible starting values for CS:IP.
   801                                  ;
   802                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   803 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   804                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   805 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   806 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   807 00000025 B104                                            mov     cl,4                                            ;shift count
   808 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   809 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   810 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   811                                  ;
   812                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   813                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   814                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   815                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   816                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   817                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   818                                  ;
   819 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   820 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   821 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   822 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   823 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   824                                  ;
   825                                  ;       Our boot addressability is now set up according to the following diagram.
   826                                  ;
   827                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   828                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   829                                  ;                               |  256 = 100h bytes                             |
   830                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   831                                  ;                               |  Boot Sector (vstart=0100h)                   |
   832                                  ;                               |  1 sector = 512 = 200h bytes                  |
   833                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   834                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   835                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   836                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   837                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   838                                  ;                               |  2 sectors = 1024 = 400h bytes
   839                                  ;                       009400  +-----------------------------------------------+ DS:1900
   840                                  ;
   841                                  ;       On entry, DL indicates the drive being booted from.
   842                                  ;
   843 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   844                                  ;
   845                                  ;       Compute directory i/o buffer address.
   846                                  ;
   847 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   848 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   849 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   850 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   851                                  ;
   852                                  ;       Compute segment where os.com will be loaded.
   853                                  ;
   854 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   855 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   856 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   857 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   858                                  ;
   859                                  ;       Set the video mode to 80 column, 25 row, text.
   860                                  ;
   861 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   862 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   863                                  ;
   864                                  ;       Write a message to the console so we know we have our addressability established.
   865                                  ;
   866 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   867 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   868                                  ;
   869                                  ;       Initialize the number of directory sectors to search.
   870                                  ;
   871 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   872 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   873                                  ;
   874                                  ;       Compute number of directory sectors and initialize overhead count.
   875                                  ;
   876 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   877 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   878 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   879 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   880                                  ;
   881                                  ;       Compute directory entries per sector.
   882                                  ;
   883 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   884 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   885 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   886                                  ;
   887                                  ;       Compute first logical directory sector and update overhead count.
   888                                  ;
   889 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   890 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   891 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   892 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   893 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   894 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   895                                  ;
   896                                  ;       Read directory sector.
   897                                  ;
   898 0000008E B001                    .30                     mov     al,1                                            ;sector count
   899 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   900 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   901 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   902                                  ;
   903                                  ;       Setup variables to search this directory sector.
   904                                  ;
   905 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   906 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   907 000000A1 7603                                            jna     .40                                             ;no, continue
   908 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   909 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   910 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   911 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   912                                  ;
   913                                  ;       Loop through directory sectors searching for kernel program.
   914                                  ;
   915 000000B1 56                      .50                     push    si                                              ;save kernel name address
   916 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   917 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   918 000000B6 FC                                              cld                                                     ;forward strings
   919 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   920 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   921 000000BA 5E                                              pop     si                                              ;restore kernel name address
   922 000000BB 7418                                            je      .60                                             ;exit loop if found
   923 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   924 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   925 000000C2 75ED                                            jnz     .50                                             ;next entry
   926                                  ;
   927                                  ;       Repeat search if we are not at the end of the directory.
   928                                  ;
   929 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   930 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   931 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   932 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   933 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   934                                  ;
   935                                  ;       If we find the kernel program in the directory, read the FAT.
   936                                  ;
   937 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   938 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   939 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   940 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   941 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   942 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   943                                  ;
   944                                  ;       Get the starting cluster of the kernel program and target address.
   945                                  ;
   946 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   947 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   948                                  ;
   949                                  ;       Read each program cluster into RAM.
   950                                  ;
   951 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   952 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   953 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   954 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   955 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   956 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   957 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   958 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   959 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   960                                  ;
   961                                  ;       Update buffer pointer for next cluster.
   962                                  ;
   963 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   964 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   965 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   966 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   967 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   968                                  ;
   969                                  ;       Compute next cluster number.
   970                                  ;
   971 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   972 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   973 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   974 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   975 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   976 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   977 00000120 83E701                                          and     di,1                                            ;get low bit
   978 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   979 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   980 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   981                                  ;
   982                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   983                                  ;
   984 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   985 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   986 00000130 B104                                            mov     cl,4                                            ;shift count
   987 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   988 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   989 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   990 0000013A 75B2                                            jne     .70                                             ;no, continue
   991                                  ;
   992                                  ;       Transfer control to the operating system program.
   993                                  ;
   994 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   995 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   996 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   997                                  ;
   998                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   999                                  ;
  1000 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1001 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1002 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1003 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1004 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1005 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1006 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1007 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1008 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1009 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1010                                  ;
  1011                                  ;       Try maxtries times to read sector.
  1012                                  ;
  1013 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1014 00000160 53                      .10                     push    bx                                              ;save buffer address
  1015 00000161 51                                              push    cx                                              ;save retry count
  1016 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1017 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1018 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1019 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1020 0000016F 59                                              pop     cx                                              ;restore retry count
  1021 00000170 5B                                              pop     bx                                              ;restore buffer address
  1022 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1023 00000173 E2EB                                            loop    .10                                             ;retry
  1024                                  ;
  1025                                  ;       Handle disk error: convert to ASCII and store in error string.
  1026                                  ;
  1027 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1028 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1029 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1030 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1031 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1032 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1033 00000183 7203                                            jb      .20                                             ;continue if numeral
  1034 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1035 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1036 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1037 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1038 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1039 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1040 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1041                                  ;
  1042                                  ;       Wait for a key press.
  1043                                  ;
  1044 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1045 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1046 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1047 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1048 0000019F F4                                              hlt                                                     ;wait for interrupt
  1049 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1050                                  ;
  1051                                  ;       Reset the system.
  1052                                  ;
  1053 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1054 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1055 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1056 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1057 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1058                                  ;
  1059                                  ;       Display text message.
  1060                                  ;
  1061 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1062 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1063 000001AC 84C0                                            test    al,al                                           ;end of string?
  1064 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1065 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1066 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1067 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1068 000001B6 C3                      BootReturn              ret                                                     ;return
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070                                  ;
  1071                                  ;       Constants
  1072                                  ;
  1073                                  ;-----------------------------------------------------------------------------------------------------------------------
  1074 000001B7 90                                              align   2
  1075 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1076 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1076 000001C3 4F4D               
  1077 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1077 000001CE 530D0A00           
  1078 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1078 000001DB 7220               
  1079 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1080 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1080 000001E9 6700               
  1081                                  ;-----------------------------------------------------------------------------------------------------------------------
  1082                                  ;
  1083                                  ;       Work Areas
  1084                                  ;
  1085                                  ;-----------------------------------------------------------------------------------------------------------------------
  1086 000001EB 90                                              align   2
  1087 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1088 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1089 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1090 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1091 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1092                                  wwReadCountCommand      equ     $                                               ;read count and command
  1093 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1094 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1095                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1096 000001F8 00                      wbDrive                 db      0                                               ;drive
  1097 000001F9 00                      wbHead                  db      0                                               ;head
  1098                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1099 000001FA 00                                              db      0                                               ;sector
  1100 000001FB 00                      wbTrack                 db      0                                               ;track
  1101 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1102 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1103                                  %endif
  1104                                  %ifdef BUILDPREP
  1105                                  ;=======================================================================================================================
  1106                                  ;
  1107                                  ;       Diskette Preparation Code
  1108                                  ;
  1109                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1110                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1111                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1112                                  ;
  1113                                  ;=======================================================================================================================
  1114                                  ;
  1115                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1116                                  ;
  1117 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1118 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1119                                  ;
  1120                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1121                                  ;
  1122 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1123 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1124 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1125 0000020C FB                                              sti                                                     ;enable interrupts
  1126 0000020D F4                                              hlt                                                     ;wait for interrupt
  1127 0000020E EBF6                                            jmp     .10                                             ;repeat
  1128 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1129 00000212 7407                                            je      .30                                             ;yes, branch
  1130 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1131 00000216 75EE                                            jne     .10                                             ;no, repeat
  1132 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1133                                  ;
  1134                                  ;       Display writing-sector message and patch the JMP instruction.
  1135                                  ;
  1136 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1137 0000021E E889FF                                          call    BootPrint                                       ;display message
  1138 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1139 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1140 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1141                                  ;
  1142                                  ;       Try to read the boot sector.
  1143                                  ;
  1144 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1145 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1146 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1147 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1148 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1149 00000236 B001                                            mov     al,1                                            ;one sector
  1150 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1151 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1152 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1153 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1154 0000023F E2EB                                            loop    .40                                             ;try again
  1155 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1156 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1157                                  ;
  1158                                  ;       Copy diskette parms from input buffer to output buffer.
  1159                                  ;
  1160 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1161 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1162 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1163 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1164 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1165 00000255 FC                                              cld                                                     ;forward string copies
  1166 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1167                                  ;
  1168                                  ;       Try to write boot sector to diskette.
  1169                                  ;
  1170 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1171 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1172 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1173 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1174 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1175 00000265 B001                                            mov     al,1                                            ;one sector
  1176 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1177 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1178 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1179 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1180 0000026E E2EB                                            loop    .60                                             ;try again
  1181 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1182                                  ;
  1183                                  ;       Convert the error code to ASCII and display the error message.
  1184                                  ;
  1185 00000273 50                      .70                     push    ax                                              ;save error code
  1186 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1187 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1188 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1189 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1190 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1191 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1192 00000282 7203                                            jb      .80                                             ;yes, continue
  1193 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1194 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1195 00000289 7202                                            jb      .90                                             ;yes, continue
  1196 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1197 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1198 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1199 00000293 58                                              pop     ax                                              ;restore error code
  1200                                  ;
  1201                                  ;       Display the completion message.
  1202                                  ;
  1203 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1204 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1205 00000299 3C00                                            cmp     al,0                                            ;success?
  1206 0000029B 7426                                            je      .110                                            ;yes, continue
  1207 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1208 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1209 000002A2 741F                                            je      .110                                            ;yes, continue
  1210 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1211 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1212 000002A9 7418                                            je      .110                                            ;yes, continue
  1213 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1214 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1215 000002B0 7411                                            je      .110                                            ;yes, continue
  1216 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1217 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1218 000002B7 740A                                            je      .110                                            ;yes, continue
  1219 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1220 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1221 000002BE 7403                                            je      .110                                            ;yes, continue
  1222 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1223 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1224 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1225 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1226 000002CB C3                                              ret                                                     ;return (should not execute)
  1227                                  ;-----------------------------------------------------------------------------------------------------------------------
  1228                                  ;
  1229                                  ;       Diskette Preparation Messages
  1230                                  ;
  1231                                  ;-----------------------------------------------------------------------------------------------------------------------
  1232 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1232 000002D5 5320426F6F742D4469-
  1232 000002DE 736B65747465205072-
  1232 000002E7 657061726174696F6E-
  1232 000002F0 2050726F6772616D   
  1233 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1233 00000301 687420284329203230-
  1233 0000030A 31302D323031382044-
  1233 00000313 61766964204A2E2057-
  1233 0000031C 616C6C696E672E2041-
  1233 00000325 6C6C20726967687473-
  1233 0000032E 207265736572766564-
  1233 00000337 2E                 
  1234 00000338 0D0A                                            db      13,10
  1235 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1235 00000343 6F6772616D206F7665-
  1235 0000034C 727772697465732074-
  1235 00000355 686520626F6F742073-
  1235 0000035E 6563746F72206F6620-
  1235 00000367 61206469736B657474-
  1235 00000370 652077697468207374-
  1235 00000379 617274757020636F64-
  1235 00000382 652074686174       
  1236 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1236 00000391 616420746865206F70-
  1236 0000039A 65726174696E672073-
  1236 000003A3 797374656D20696E74-
  1236 000003AC 6F206D656D6F727920-
  1236 000003B5 7768656E2074686520-
  1236 000003BE 636F6D707574657220-
  1236 000003C7 697320726573746172-
  1236 000003D0 7465642E           
  1237 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1237 000003DD 6565642C20706C6163-
  1237 000003E6 65206120666F726D61-
  1237 000003EF 74746564206469736B-
  1237 000003F8 6574746520696E746F-
  1237 00000401 20647269766520413A-
  1237 0000040A 20616E642070726573-
  1237 00000413 732074686520456E74-
  1237 0000041C 6572206B65792E     
  1238 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1238 0000042C 20746869732070726F-
  1238 00000435 6772616D2077697468-
  1238 0000043E 6F7574207072657061-
  1238 00000447 72696E672061206469-
  1238 00000450 736B657474652C2070-
  1238 00000459 726573732074686520-
  1238 00000462 457363617065206B65-
  1238 0000046B 792E               
  1239 0000046D 0D0A00                                          db      13,10,0
  1240 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1240 00000479 2074686520626F6F74-
  1240 00000482 20736563746F722074-
  1240 0000048B 6F2074686520646973-
  1240 00000494 6B65747465202E2E2E 
  1241 0000049D 0D0A00                                          db      13,10,0
  1242 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1242 000004A9 6F722D636F6465202E-
  1242 000004B2 2E2077617320726574-
  1242 000004BB 75726E65642066726F-
  1242 000004C4 6D207468652042494F-
  1242 000004CD 53207768696C652072-
  1242 000004D6 656164696E67206672-
  1242 000004DF 6F6D20746865206469-
  1242 000004E8 736B2E             
  1243 000004EB 0D0A00                                          db      13,10,0
  1244 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1244 000004F7 6F722D636F6465202E-
  1244 00000500 2E2077617320726574-
  1244 00000509 75726E65642066726F-
  1244 00000512 6D207468652042494F-
  1244 0000051B 53207768696C652077-
  1244 00000524 726974696E6720746F-
  1244 0000052D 20746865206469736B-
  1244 00000536 2E                 
  1245 00000537 0D0A00                                          db      13,10,0
  1246 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1246 00000543 742D736563746F7220-
  1246 0000054C 776173207772697474-
  1246 00000555 656E20746F20746865-
  1246 0000055E 206469736B65747465-
  1246 00000567 2E204265666F726520-
  1246 00000570 626F6F74696E672079-
  1246 00000579 6F757220636F6D7075-
  1246 00000582 7465722077697468   
  1247 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1247 00000593 736B657474652C206D-
  1247 0000059C 616B65207375726520-
  1247 000005A5 746861742074686520-
  1247 000005AE 66696C65204F532E43-
  1247 000005B7 4F4D20697320636F70-
  1247 000005C0 696564206F6E746F20-
  1247 000005C9 746865206469736B65-
  1247 000005D2 7474652E           
  1248 000005D6 0D0A00                                          db      13,10,0
  1249 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1249 000005E2 76616C696420446973-
  1249 000005EB 6B20506172616D6574-
  1249 000005F4 6572               
  1250 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1250 000005FF 20616E20696E746572-
  1250 00000608 6E616C206572726F72-
  1250 00000611 206361757365642062-
  1250 0000061A 7920616E20696E7661-
  1250 00000623 6C69642076616C7565-
  1250 0000062C 206265696E67207061-
  1250 00000635 7373656420746F2061-
  1250 0000063E 2073797374656D     
  1251 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1251 0000064E 6E2E20546865204F53-
  1251 00000657 424F4F542E434F4D20-
  1251 00000660 66696C65206D617920-
  1251 00000669 626520636F72727570-
  1251 00000672 742E20436F7079206F-
  1251 0000067B 7220646F776E6C6F61-
  1251 00000684 64207468652066696C-
  1251 0000068D 6520616761696E     
  1252 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1252 0000069D 72792E             
  1253 000006A0 0D0A00                                          db      13,10,0
  1254 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1254 000006AC 6472657373204D6172-
  1254 000006B5 6B204E6F7420466F75-
  1254 000006BE 6E64               
  1255 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1255 000006C9 726F7220696E646963-
  1255 000006D2 617465732061207068-
  1255 000006DB 79736963616C207072-
  1255 000006E4 6F626C656D20776974-
  1255 000006ED 682074686520666C6F-
  1255 000006F6 707079206469736B65-
  1255 000006FF 7474652E20506C6561-
  1255 00000708 7365207265747279   
  1256 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1256 00000719 6E6F74686572206469-
  1256 00000722 736B657474652E     
  1257 00000729 0D0A00                                          db      13,10,0
  1258 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1258 00000735 6F7465637465642044-
  1258 0000073E 69736B             
  1259 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1259 0000074A 726F72206973207573-
  1259 00000753 75616C6C7920636175-
  1259 0000075C 736564206279206174-
  1259 00000765 74656D7074696E6720-
  1259 0000076E 746F20777269746520-
  1259 00000777 746F20612077726974-
  1259 00000780 652D70726F74656374-
  1259 00000789 6564206469736B2E   
  1260 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1260 0000079A 686520277772697465-
  1260 000007A3 2D70726F7465637427-
  1260 000007AC 2073657474696E6720-
  1260 000007B5 6F6E20746865206469-
  1260 000007BE 736B206F7220726574-
  1260 000007C7 7279207573696E6720-
  1260 000007D0 7573696E6720616E6F-
  1260 000007D9 74686572206469736B-
  1260 000007E2 2E                 
  1261 000007E3 0D0A00                                          db      13,10,0
  1262 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1262 000007EF 736B65747465205265-
  1262 000007F8 6D6F766564         
  1263 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1263 00000806 726F72206D61792069-
  1263 0000080F 6E6469636174652074-
  1263 00000818 686174207468652066-
  1263 00000821 6C6F70707920646973-
  1263 0000082A 6B6574746520686173-
  1263 00000833 206265656E2072656D-
  1263 0000083C 6F7665642066726F6D-
  1263 00000845 20746865           
  1264 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1264 00000852 652064726976652E20-
  1264 0000085B 4F6E20736F6D652073-
  1264 00000864 797374656D732C2074-
  1264 0000086D 68697320636F646520-
  1264 00000876 6D617920616C736F20-
  1264 0000087F 6F6363757220696620-
  1264 00000888 746865206469736B65-
  1264 00000891 747465206973       
  1265 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1265 000008A0 70726F746563746564-
  1265 000008A9 2E2720506C65617365-
  1265 000008B2 207665726966792074-
  1265 000008BB 686174207468652064-
  1265 000008C4 69736B657474652069-
  1265 000008CD 73206E6F7420777269-
  1265 000008D6 74652D70726F746563-
  1265 000008DF 74656420616E64     
  1266 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1266 000008EF 65726C7920696E7365-
  1266 000008F8 7274656420696E2074-
  1266 00000901 6865206469736B6574-
  1266 0000090A 74652064726976652E 
  1267 00000913 0D0A00                                          db      13,10,0
  1268 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1268 0000091F 6976652054696D6564-
  1268 00000928 204F7574           
  1269 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1269 00000935 726F7220757375616C-
  1269 0000093E 6C7920696E64696361-
  1269 00000947 746573207468617420-
  1269 00000950 6E6F206469736B6574-
  1269 00000959 746520697320696E20-
  1269 00000962 746865206469736B65-
  1269 0000096B 747465206472697665-
  1269 00000974 2E20506C65617365   
  1270 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1270 00000985 726520746861742074-
  1270 0000098E 6865206469736B6574-
  1270 00000997 74652069732070726F-
  1270 000009A0 7065726C7920736561-
  1270 000009A9 74656420696E207468-
  1270 000009B2 652064726976652061-
  1270 000009BB 6E642072657472792E 
  1271 000009C4 0D0A00                                          db      13,10,0
  1272 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1272 000009D0 6B6E6F776E20457272-
  1272 000009D9 6F72               
  1273 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1273 000009E4 6F722D636F64652072-
  1273 000009ED 657475726E65642062-
  1273 000009F6 79207468652042494F-
  1273 000009FF 53206973206E6F7420-
  1273 00000A08 61207265636F676E69-
  1273 00000A11 7A6564206572726F72-
  1273 00000A1A 2E20506C6561736520-
  1273 00000A23 636F6E73756C74     
  1274 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1274 00000A33 6D7075746572277320-
  1274 00000A3C 746563686E6963616C-
  1274 00000A45 207265666572656E63-
  1274 00000A4E 6520666F7220612064-
  1274 00000A57 65736372697074696F-
  1274 00000A60 6E206F662074686973-
  1274 00000A69 206572726F7220636F-
  1274 00000A72 64652E             
  1275 00000A75 0D0A00                                          db      13,10,0
  1276                                  wcPrepInBuf             equ     $
  1277                                  %endif
  1278                                  %ifdef BUILDDISK
  1279                                  ;=======================================================================================================================
  1280                                  ;
  1281                                  ;       File Allocation Tables
  1282                                  ;
  1283                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1284                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1285                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1286                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1287                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1288                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1289                                  ;       the last cluster in the chain.
  1290                                  ;
  1291                                  ;       Every three bytes encode two FAT entries as follows:
  1292                                  ;
  1293                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1294                                  ;
  1295                                  ;=======================================================================================================================
  1296                                  ;-----------------------------------------------------------------------------------------------------------------------
  1297                                  ;
  1298                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1299                                  ;
  1300                                  ;-----------------------------------------------------------------------------------------------------------------------
  1301                                  section                 fat1                                                    ;first copy of FAT
  1302                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1303                                                          db      005h,060h,000h, 007h,080h,000h
  1304                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1305                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1306                                                          db      011h,020h,001h, 013h,040h,001h
  1307                                                          db      015h,060h,001h, 017h,080h,001h
  1308                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1309                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1310                                                          db      021h,020h,002h, 023h,040h,002h
  1311                                                          db      025h,060h,002h, 027h,080h,002h
  1312                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1313                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  ;
  1316                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1317                                  ;
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  section                 fat2                                                    ;second copy of FAT
  1320                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1321                                                          db      005h,060h,000h, 007h,080h,000h
  1322                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1323                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1324                                                          db      011h,020h,001h, 013h,040h,001h
  1325                                                          db      015h,060h,001h, 017h,080h,001h
  1326                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1327                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1328                                                          db      021h,020h,002h, 023h,040h,002h
  1329                                                          db      025h,060h,002h, 027h,080h,002h
  1330                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1331                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1332                                  ;-----------------------------------------------------------------------------------------------------------------------
  1333                                  ;
  1334                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1335                                  ;
  1336                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1337                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1338                                  ;       copy.
  1339                                  ;
  1340                                  ;-----------------------------------------------------------------------------------------------------------------------
  1341                                  section                 dir                                                     ;diskette directory
  1342                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1343                                                          db      020h                                            ;attribute (archive bit set)
  1344                                                          times   10 db 0                                         ;unused
  1345                                                          dw      0h                                              ;time
  1346                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1347                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1348                                                          dw      2                                               ;first cluster
  1349                                                          dd      05400h                                          ;file size
  1350                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1351                                  %endif
  1352                                  %ifdef BUILDCOM
  1353                                  ;=======================================================================================================================
  1354                                  ;
  1355                                  ;       OS.COM
  1356                                  ;
  1357                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1358                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1359                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1360                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1361                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1362                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1363                                  ;
  1364                                  ;       Our loader addressability is set up according to the following diagram.
  1365                                  ;
  1366                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1367                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1368                                  ;                               |  256 = 100h bytes                             |
  1369                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1370                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1371                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1372                                  ;                       007e00  +-----------------------------------------------+
  1373                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1374                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1375                                  ;                               |                                               |
  1376                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1377                                  ;                               |                                               |
  1378                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1379                                  ;                               |  Loader Code                                  |
  1380                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1381                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1382                                  ;
  1383                                  ;=======================================================================================================================
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  ;
  1386                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1387                                  ;
  1388                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1389                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1390                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1391                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1392                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1393                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1394                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1395                                  ;       registers.
  1396                                  ;
  1397                                  ;-----------------------------------------------------------------------------------------------------------------------
  1398                                                          cpu     8086                                            ;assume minimal CPU
  1399                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1400                                                          bits    16                                              ;this is 16-bit code
  1401                                  Loader                  push    cs                                              ;use the code segment
  1402                                                          pop     ds                                              ;...as our data segment
  1403                                                          push    cs                                              ;use the code segment
  1404                                                          pop     es                                              ;...as our extra segment
  1405                                  ;
  1406                                  ;       Write a message to the console so we know we have our addressability established.
  1407                                  ;
  1408                                                          mov     si,czStartingMsg                                ;starting message
  1409                                                          call    PutTTYString                                    ;display loader message
  1410                                  ;
  1411                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1412                                  ;
  1413                                                          call    GetCPUType                                      ;AL = cpu type
  1414                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1415                                                          cmp     al,3                                            ;80386+?
  1416                                                          jb      LoaderExit                                      ;no, exit with error message
  1417                                                          cpu     386                                             ;allow 80386 instructions
  1418                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1419                                                          call    PutTTYString                                    ;display message
  1420                                  ;
  1421                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1422                                  ;
  1423                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1424                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1425                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1426                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1427                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1428                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1429                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1430                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1431                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1432                                                          call    PutTTYString                                    ;display message
  1433                                  ;
  1434                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1435                                  ;
  1436                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1437                                                          pop     es                                              ;... as target segment
  1438                                                          xor     di,di                                           ;ES:DI = target address
  1439                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1440                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1441                                                          cld                                                     ;forward strings
  1442                                                          rep     movsb                                           ;copy kernel image
  1443                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1444                                                          call    PutTTYString                                    ;display message
  1445                                  ;
  1446                                  ;       Switch to protected mode.
  1447                                  ;
  1448                                                          xor     si,si                                           ;ES:SI = gdt addr
  1449                                                          mov     ss,si                                           ;protected mode ss
  1450                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1451                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1452                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1453                                                          mov     dx,001Fh                                        ;outer delay loop count
  1454                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1455                                                          loop    $                                               ;wait out pending interrupts
  1456                                                          dec     dx                                              ;restore outer loop count
  1457                                                          jnz     .10                                             ;continue outer loop
  1458                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1459                                  ;
  1460                                  ;       Enable hardware and maskable interrupts.
  1461                                  ;
  1462                                                          xor     al,al                                           ;enable all registers code
  1463                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1464                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1465                                                          sti                                                     ;enable maskable interrupts
  1466                                  ;
  1467                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1468                                  ;
  1469                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1470                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1471                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  ;
  1474                                  ;       Routine:        LoaderExit
  1475                                  ;
  1476                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1477                                  ;
  1478                                  ;       In:             DS:SI   string address
  1479                                  ;
  1480                                  ;-----------------------------------------------------------------------------------------------------------------------
  1481                                  LoaderExit              call    PutTTYString                                    ;display error message
  1482                                  ;
  1483                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1484                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1485                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1486                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1487                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1488                                  ;
  1489                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1490                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1491                                                          jnz     .40                                             ;exit if key pressed
  1492                                                          sti                                                     ;enable maskable interrupts
  1493                                                          hlt                                                     ;wait for interrupt
  1494                                                          jmp     .30                                             ;repeat until keypress
  1495                                  ;
  1496                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1497                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1498                                  ;       HLT until the system resets.
  1499                                  ;
  1500                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1501                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1502                                  .50                     sti                                                     ;enable maskable interrupts
  1503                                                          hlt                                                     ;stop until reset, int, nmi
  1504                                                          jmp     .50                                             ;loop until restart kicks in
  1505                                  ;-----------------------------------------------------------------------------------------------------------------------
  1506                                  ;
  1507                                  ;       Routine:        GetCPUType
  1508                                  ;
  1509                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1510                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1511                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1512                                  ;
  1513                                  ;       Out:            AX      0 = 808x, v20, etc.
  1514                                  ;                               1 = 80186
  1515                                  ;                               2 = 80286
  1516                                  ;                               3 = 80386
  1517                                  ;
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519                                  GetCPUType              mov     al,1                                            ;AL = 1
  1520                                                          mov     cl,32                                           ;shift count
  1521                                                          shr     al,cl                                           ;try a 32-bit shift
  1522                                                          or      al,al                                           ;did the shift happen?
  1523                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1524                                                          cpu     186
  1525                                                          push    sp                                              ;save stack pointer
  1526                                                          pop     cx                                              ;...into cx
  1527                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1528                                                          jne     .10                                             ;yes, cpu is 80186
  1529                                                          cpu     286
  1530                                                          inc     ax                                              ;AX = 2
  1531                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1532                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1533                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1534                                                          jz      .10                                             ;yes, cpu is 80286
  1535                                                          inc     ax                                              ;AX = 3
  1536                                  .10                     ret                                                     ;return
  1537                                  ;-----------------------------------------------------------------------------------------------------------------------
  1538                                  ;
  1539                                  ;       Routine:        PutTTYString
  1540                                  ;
  1541                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1542                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1543                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1544                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1545                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1546                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1547                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1548                                  ;                       to LODSB is not needed.
  1549                                  ;
  1550                                  ;       In:             DS:SI   address of string
  1551                                  ;
  1552                                  ;       Out:            DF      0
  1553                                  ;                       ZF      1
  1554                                  ;                       AL      0
  1555                                  ;
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557                                  PutTTYString            cld                                                     ;forward strings
  1558                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1559                                                          test    al,al                                           ;end of string?
  1560                                                          jz      .20                                             ;... yes, exit our loop
  1561                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1562                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1563                                                          jmp     .10                                             ;repeat until done
  1564                                  .20                     ret                                                     ;return
  1565                                  ;-----------------------------------------------------------------------------------------------------------------------
  1566                                  ;
  1567                                  ;       Loader Data
  1568                                  ;
  1569                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1570                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                                          align   2
  1574                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1575                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1576                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1577                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1578                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1579                                                          db      "Please press any key to restart the computer.",13,10,0
  1580                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1581                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1582                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1583                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1584                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1585                                  ;=======================================================================================================================
  1586                                  ;
  1587                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1588                                  ;
  1589                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1590                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1591                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1592                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1593                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1594                                  ;
  1595                                  ;=======================================================================================================================
  1596                                  ;=======================================================================================================================
  1597                                  ;
  1598                                  ;       Kernel Tables
  1599                                  ;
  1600                                  ;=======================================================================================================================
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1604                                  ;
  1605                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1606                                  ;       first descriptor must be all nulls.
  1607                                  ;
  1608                                  ;       6   5         4         3         2         1         0
  1609                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1610                                  ;       ----------------------------------------------------------------
  1611                                  ;       h......hffffmmmma......ab......................bn..............n
  1612                                  ;
  1613                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1614                                  ;               ffff                                                            flags
  1615                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1616                                  ;                       a......a                                                access
  1617                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1618                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1619                                  ;
  1620                                  ;       00000000                                                                all areas have base addresses below 2^24
  1621                                  ;               0...                                                            single-byte size granularity
  1622                                  ;               1...                                                            4-kilobyte size granularity
  1623                                  ;               .0..                                                            16-bit default for code segments
  1624                                  ;               .1..                                                            32-bit default for code segments
  1625                                  ;               ..0.                                                            intel-reserved; should be zero
  1626                                  ;               ...0                                                            available for operating system use
  1627                                  ;                   0000                                                        segment is less than 2^16 in size
  1628                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1629                                  ;                       1.......                                                segment is present in memory
  1630                                  ;                       .00.....                                                segment is of privilege level 0
  1631                                  ;                       ...0....                                                segment is of system or gate type
  1632                                  ;                       ...00010                                                local decriptor table (LDT)
  1633                                  ;                       ...01001                                                task state segment (TSS) available
  1634                                  ;                       ...01011                                                task state segment (TSS) busy
  1635                                  ;                       ...10...                                                data segment
  1636                                  ;                       ...10011                                                writable data (accessed)
  1637                                  ;                       ...11...                                                code segment
  1638                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  section                 gdt                                                     ;global descriptor table
  1642                                                          dq      0000000000000000h                               ;00 required null selector
  1643                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1644                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1645                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1646                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1647                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1648                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1649                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1650                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1651                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1652                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1653                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1654                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1655                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1656                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1660                                  ;
  1661                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1662                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1663                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1664                                  ;
  1665                                  ;       6   5         4         3         2         1         0
  1666                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1667                                  ;       ----------------------------------------------------------------
  1668                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1669                                  ;
  1670                                  ;       h...h   high-order offset (bits 16-31)
  1671                                  ;       P       present (0=unused interrupt)
  1672                                  ;       zz      descriptor privilege level
  1673                                  ;       S       storage segment (must be zero for IDT)
  1674                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1675                                  ;       S...S   handling code selector in GDT
  1676                                  ;       l...l   lo-order offset (bits 0-15)
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  section                 idt                                                     ;interrupt descriptor table
  1680                                                          mint    dividebyzero                                    ;00 divide by zero
  1681                                                          mint    singlestep                                      ;01 single step
  1682                                                          mint    nmi                                             ;02 non-maskable
  1683                                                          mint    break                                           ;03 break
  1684                                                          mint    into                                            ;04 into
  1685                                                          mint    bounds                                          ;05 bounds
  1686                                                          mint    badopcode                                       ;06 bad op code
  1687                                                          mint    nocoproc                                        ;07 no coprocessor
  1688                                                          mint    doublefault                                     ;08 double-fault
  1689                                                          mint    operand                                         ;09 operand
  1690                                                          mint    badtss                                          ;0a bad TSS
  1691                                                          mint    notpresent                                      ;0b not-present
  1692                                                          mint    stacklimit                                      ;0c stack limit
  1693                                                          mint    protection                                      ;0d general protection fault
  1694                                                          mint    int14                                           ;0e (reserved)
  1695                                                          mint    int15                                           ;0f (reserved)
  1696                                                          mint    coproccalc                                      ;10 (reserved)
  1697                                                          mint    int17                                           ;11 (reserved)
  1698                                                          mint    int18                                           ;12 (reserved)
  1699                                                          mint    int19                                           ;13 (reserved)
  1700                                                          mint    int20                                           ;14 (reserved)
  1701                                                          mint    int21                                           ;15 (reserved)
  1702                                                          mint    int22                                           ;16 (reserved)
  1703                                                          mint    int23                                           ;17 (reserved)
  1704                                                          mint    int24                                           ;18 (reserved)
  1705                                                          mint    int25                                           ;19 (reserved)
  1706                                                          mint    int26                                           ;1a (reserved)
  1707                                                          mint    int27                                           ;1b (reserved)
  1708                                                          mint    int28                                           ;1c (reserved)
  1709                                                          mint    int29                                           ;1d (reserved)
  1710                                                          mint    int30                                           ;1e (reserved)
  1711                                                          mint    int31                                           ;1f (reserved)
  1712                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1713                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1714                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1715                                                          mtrap   com2                                            ;23 IRQ3 com2
  1716                                                          mtrap   com1                                            ;24 IRQ4 com1
  1717                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1718                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1719                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1720                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1721                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1722                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1723                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1724                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1725                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1726                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1727                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1728                                                          mtrap   svc                                             ;30 OS services
  1729                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1730                                  ;=======================================================================================================================
  1731                                  ;
  1732                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1733                                  ;
  1734                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1735                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1736                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1737                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1738                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1739                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1740                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1741                                  ;
  1742                                  ;=======================================================================================================================
  1743                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1744                                                          cpu     386                                             ;allow 80386 instructions
  1745                                                          bits    32                                              ;this is 32-bit code
  1746                                  ;=======================================================================================================================
  1747                                  ;
  1748                                  ;       CPU Interrupt Handlers
  1749                                  ;
  1750                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1751                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1752                                  ;
  1753                                  ;=======================================================================================================================
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  ;
  1756                                  ;       INT0    Divide By Zero
  1757                                  ;
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                                          menter  dividebyzero                                    ;divide by zero
  1760                                                          push    0                                               ;store interrupt nbr
  1761                                                          push    czIntDivideByZero                               ;store message offset
  1762                                                          jmp     ReportInterrupt                                 ;report interrupt
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  ;
  1765                                  ;       INT1    Single Step
  1766                                  ;
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                                          menter  singlestep                                      ;single step
  1769                                                          push    1                                               ;store interrupt nbr
  1770                                                          push    czIntSingleStep                                 ;store message offset
  1771                                                          jmp     ReportInterrupt                                 ;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;       INT2    Non-Maskable Interrupt
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                                          menter  nmi                                             ;non-maskable
  1778                                                          push    2                                               ;store interrupt nbr
  1779                                                          push    czIntNonMaskable                                ;store message offset
  1780                                                          jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT3    Break
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  break                                           ;break
  1787                                                          push    3                                               ;store interrupt nbr
  1788                                                          push    czIntBreak                                      ;store message offset
  1789                                                          jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT4    Into
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  into                                            ;into
  1796                                                          push    4                                               ;store interrupt nbr
  1797                                                          push    czIntInto                                       ;store message offset
  1798                                                          jmp     ReportInterrupt                                 ;report interrupt
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  ;
  1801                                  ;       INT5    Bounds
  1802                                  ;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                                          menter  bounds                                          ;bounds
  1805                                                          push    5                                               ;store interrupt nbr
  1806                                                          push    czIntBounds                                     ;store message offset
  1807                                                          jmp     ReportInterrupt                                 ;report interrupt
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  ;
  1810                                  ;       INT6    Bad Operation Code
  1811                                  ;
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                                          menter  badopcode                                       ;bad opcode interrupt
  1814                                                          push    6                                               ;store interrupt nbr
  1815                                                          push    czIntBadOpCode                                  ;store message offset
  1816                                                          jmp     ReportInterrupt                                 ;report interrupt
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                  ;
  1819                                  ;       INT7    No Coprocessor
  1820                                  ;
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1823                                                          push    7                                               ;store interrupt nbr
  1824                                                          push    czIntNoCoprocessor                              ;store message offset
  1825                                                          jmp     ReportInterrupt                                 ;report interrupt
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;       INT8    Double Fault
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                                          menter  doublefault                                     ;doublefault interrupt
  1832                                                          push    8                                               ;store interrupt nbr
  1833                                                          push    czIntDoubleFault                                ;store message offset
  1834                                                          jmp     ReportInterrupt                                 ;report interrupt
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;       INT9    Operand
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                                          menter  operand                                         ;operand interrupt
  1841                                                          push    9                                               ;store interrupt nbr
  1842                                                          push    czIntOperand                                    ;store message offset
  1843                                                          jmp     ReportInterrupt                                 ;report interrupt
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;       INT10   Bad Task State Segment
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                                          menter  badtss                                          ;bad TSS interrupt
  1850                                                          push    10                                              ;store interrupt nbr
  1851                                                          push    czIntBadTSS                                     ;store message offset
  1852                                                          jmp     ReportInterrupt                                 ;report interrupt
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  ;
  1855                                  ;       INT11   Not Present
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  notpresent                                      ;not present interrupt
  1859                                                          push    11                                              ;store interrupt nbr
  1860                                                          push    czIntNotPresent                                 ;store message offset
  1861                                                          jmp     ReportInterrupt                                 ;report interrupt
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;       INT12   Stack Limit
  1865                                  ;
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                                          menter  stacklimit                                      ;stack limit interrupt
  1868                                                          push    12                                              ;store interrupt nbr
  1869                                                          push    czIntStackLimit                                 ;store message offset
  1870                                                          jmp     ReportInterrupt                                 ;report interrupt
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  ;
  1873                                  ;       INT13   General Protection Fault
  1874                                  ;
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                                          menter  protection                                      ;protection fault interrupt
  1877                                                          push    13                                              ;store interrupt nbr
  1878                                                          push    czIntProtection                                 ;store message offset
  1879                                                          jmp     ReportInterrupt                                 ;report interrupt
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       INT14   Reserved
  1883                                  ;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                                          menter  int14                                           ;(reserved)
  1886                                                          push    14                                              ;store interrupt nbr
  1887                                                          push    czIntReserved                                   ;store message offset
  1888                                                          jmp     ReportInterrupt                                 ;report interrupt
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       INT15   Reserved
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                                          menter  int15                                           ;(reserved)
  1895                                                          push    15                                              ;store interrupt nbr
  1896                                                          push    czIntReserved                                   ;store message offset
  1897                                                          jmp     ReportInterrupt                                 ;report interrupt
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;       INT16   Coprocessor Calculation
  1901                                  ;
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                                          menter  coproccalc                                      ;coprocessor calculation
  1904                                                          push    16                                              ;store interrupt nbr
  1905                                                          push    czIntCoprocessorCalc                            ;store message offset
  1906                                                          jmp     ReportInterrupt                                 ;report interrupt
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                  ;
  1909                                  ;       INT17   Reserved
  1910                                  ;
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                                          menter  int17                                           ;(reserved)
  1913                                                          push    17                                              ;store interrupt nbr
  1914                                                          push    czIntReserved                                   ;store message offset
  1915                                                          jmp     ReportInterrupt                                 ;report interrupt
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                  ;
  1918                                  ;       INT18   Reserved
  1919                                  ;
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                                          menter  int18                                           ;(reserved)
  1922                                                          push    18                                              ;store interrupt nbr
  1923                                                          push    czIntReserved                                   ;store message offset
  1924                                                          jmp     ReportInterrupt                                 ;report interrupt
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                  ;
  1927                                  ;       INT19   Reserved
  1928                                  ;
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                                          menter  int19                                           ;(reserved)
  1931                                                          push    19                                              ;store interrupt nbr
  1932                                                          push    czIntReserved                                   ;store message offset
  1933                                                          jmp     ReportInterrupt                                 ;report interrupt
  1934                                  ;-----------------------------------------------------------------------------------------------------------------------
  1935                                  ;
  1936                                  ;       INT20   Reserved
  1937                                  ;
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                                          menter  int20                                           ;(reserved)
  1940                                                          push    20                                              ;store interrupt nbr
  1941                                                          push    czIntReserved                                   ;store message offset
  1942                                                          jmp     ReportInterrupt                                 ;report interrupt
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  ;
  1945                                  ;       INT21   Reserved
  1946                                  ;
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                                          menter  int21                                           ;(reserved)
  1949                                                          push    21                                              ;store interrupt nbr
  1950                                                          push    czIntReserved                                   ;store message offset
  1951                                                          jmp     ReportInterrupt                                 ;report interrupt
  1952                                  ;-----------------------------------------------------------------------------------------------------------------------
  1953                                  ;
  1954                                  ;       INT22   Reserved
  1955                                  ;
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                                          menter  int22                                           ;(reserved)
  1958                                                          push    22                                              ;store interrupt nbr
  1959                                                          push    czIntReserved                                   ;store message offset
  1960                                                          jmp     ReportInterrupt                                 ;report interrupt
  1961                                  ;-----------------------------------------------------------------------------------------------------------------------
  1962                                  ;
  1963                                  ;       INT23   Reserved
  1964                                  ;
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                                          menter  int23                                           ;(reserved)
  1967                                                          push    23                                              ;store interrupt nbr
  1968                                                          push    czIntReserved                                   ;store message offset
  1969                                                          jmp     ReportInterrupt                                 ;report interrupt
  1970                                  ;-----------------------------------------------------------------------------------------------------------------------
  1971                                  ;
  1972                                  ;       INT24   Reserved
  1973                                  ;
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                                          menter  int24                                           ;(reserved)
  1976                                                          push    24                                              ;store interrupt nbr
  1977                                                          push    czIntReserved                                   ;store message offset
  1978                                                          jmp     ReportInterrupt                                 ;report interrupt
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ;
  1981                                  ;       INT25   Reserved
  1982                                  ;
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                                          menter  int25                                           ;(reserved)
  1985                                                          push    25                                              ;store interrupt nbr
  1986                                                          push    czIntReserved                                   ;store message offset
  1987                                                          jmp     ReportInterrupt                                 ;report interrupt
  1988                                  ;-----------------------------------------------------------------------------------------------------------------------
  1989                                  ;
  1990                                  ;       INT26   Reserved
  1991                                  ;
  1992                                  ;-----------------------------------------------------------------------------------------------------------------------
  1993                                                          menter  int26                                           ;(reserved)
  1994                                                          push    26                                              ;store interrupt nbr
  1995                                                          push    czIntReserved                                   ;store message offset
  1996                                                          jmp     ReportInterrupt                                 ;report interrupt
  1997                                  ;-----------------------------------------------------------------------------------------------------------------------
  1998                                  ;
  1999                                  ;       INT27   Reserved
  2000                                  ;
  2001                                  ;-----------------------------------------------------------------------------------------------------------------------
  2002                                                          menter  int27                                           ;(reserved)
  2003                                                          push    27                                              ;store interrupt nbr
  2004                                                          push    czIntReserved                                   ;store message offset
  2005                                                          jmp     ReportInterrupt                                 ;report interrupt
  2006                                  ;-----------------------------------------------------------------------------------------------------------------------
  2007                                  ;
  2008                                  ;       INT28   Reserved
  2009                                  ;
  2010                                  ;-----------------------------------------------------------------------------------------------------------------------
  2011                                                          menter  int28                                           ;(reserved)
  2012                                                          push    28                                              ;store interrupt nbr
  2013                                                          push    czIntReserved                                   ;store message offset
  2014                                                          jmp     ReportInterrupt                                 ;report interrupt
  2015                                  ;-----------------------------------------------------------------------------------------------------------------------
  2016                                  ;
  2017                                  ;       INT29   Reserved
  2018                                  ;
  2019                                  ;-----------------------------------------------------------------------------------------------------------------------
  2020                                                          menter  int29                                           ;(reserved)
  2021                                                          push    29                                              ;store interrupt nbr
  2022                                                          push    czIntReserved                                   ;store message offset
  2023                                                          jmp     ReportInterrupt                                 ;report interrupt
  2024                                  ;-----------------------------------------------------------------------------------------------------------------------
  2025                                  ;
  2026                                  ;       INT30   Reserved
  2027                                  ;
  2028                                  ;-----------------------------------------------------------------------------------------------------------------------
  2029                                                          menter  int30                                           ;(reserved)
  2030                                                          push    30                                              ;store interrupt nbr
  2031                                                          push    czIntReserved                                   ;store message offset
  2032                                                          jmp     ReportInterrupt                                 ;report interrupt
  2033                                  ;-----------------------------------------------------------------------------------------------------------------------
  2034                                  ;
  2035                                  ;       INT31   Reserved
  2036                                  ;
  2037                                  ;-----------------------------------------------------------------------------------------------------------------------
  2038                                                          menter  int31                                           ;(reserved)
  2039                                                          push    31                                              ;store interrupt nbr
  2040                                                          push    czIntReserved                                   ;store message offset
  2041                                                          jmp     ReportInterrupt                                 ;report interrupt
  2042                                  ;-----------------------------------------------------------------------------------------------------------------------
  2043                                  ;
  2044                                  ;       Routine:        ReportInterrupt
  2045                                  ;
  2046                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2047                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2048                                  ;
  2049                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2050                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2051                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2052                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2053                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2054                                  ;
  2055                                  ;       Out:            N/A             This routine does not exit.
  2056                                  ;
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2059                                                          push    es                                              ;save ES at time of interrupt
  2060                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2061                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2062                                  ;
  2063                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2064                                  ;
  2065                                  ;                       [EBP+56]        EFLAGS
  2066                                  ;                       [EBP+52]        CS
  2067                                  ;                       [EBP+48]        EIP
  2068                                  ;                       [EBP+44]        interrupt number (0-31)
  2069                                  ;                       [EBP+40]        error message address
  2070                                  ;                       [EBP+36]        DS
  2071                                  ;                       [EBP+32]        ES
  2072                                  ;                       [EBP+28]        EAX
  2073                                  ;                       [EBP+24]        ECX
  2074                                  ;                       [EBP+20]        EDX
  2075                                  ;                       [EBP+16]        EBX
  2076                                  ;                       [EBP+12]        ESP
  2077                                  ;                       [EBP+8]         EBP
  2078                                  ;                       [EBP+4]         ESI
  2079                                  ;                       [EBP+0]         EDI
  2080                                  ;
  2081                                                          push    cs                                              ;load code selector ...
  2082                                                          pop     ds                                              ;... into DS
  2083                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2084                                                          pop     es                                              ;... into ES
  2085                                  ;
  2086                                  ;       Display the interrupt report boundary box
  2087                                  ;
  2088                                                          mov     cl,13                                           ;column
  2089                                                          mov     ch,6                                            ;row
  2090                                                          mov     dl,50                                           ;width
  2091                                                          mov     dh,8                                            ;height
  2092                                                          mov     bh,07h                                          ;attribute
  2093                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2094                                  ;
  2095                                  ;       Display the report header
  2096                                  ;
  2097                                                          mov     cl,15                                           ;column
  2098                                                          mov     ch,7                                            ;row
  2099                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2100                                                          call    SetConsoleString                                ;draw text string
  2101                                  ;
  2102                                  ;       Display the interrupt description label
  2103                                  ;
  2104                                                          mov     cl,15                                           ;column
  2105                                                          mov     ch,8                                            ;row
  2106                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2107                                                          call    SetConsoleString                                ;draw text string
  2108                                  ;
  2109                                  ;       Display the interrupt number
  2110                                  ;
  2111                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2112                                                          mov     cl,26                                           ;column
  2113                                                          mov     ch,8                                            ;row
  2114                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2115                                  ;
  2116                                  ;       Display the interrupt name
  2117                                  ;
  2118                                                          mov     cl,29                                           ;column
  2119                                                          mov     ch,8                                            ;row
  2120                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2121                                                          call    SetConsoleString                                ;display interrupt description
  2122                                  ;
  2123                                  ;       Display the register values header
  2124                                  ;
  2125                                                          mov     cl,15                                           ;column
  2126                                                          mov     ch,10                                           ;row
  2127                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2128                                                          call    SetConsoleString                                ;draw text string
  2129                                  ;
  2130                                  ;       Display the EAX register label and value
  2131                                  ;
  2132                                                          mov     cl,15                                           ;column
  2133                                                          mov     ch,11                                           ;row
  2134                                                          mov     esi,czIntEAX                                    ;register EAX label
  2135                                                          call    SetConsoleString                                ;draw label
  2136                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2137                                                          mov     cl,19                                           ;column
  2138                                                          mov     ch,11                                           ;row
  2139                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2140                                  ;
  2141                                  ;       Display the ECX register label and value
  2142                                  ;
  2143                                                          mov     cl,15                                           ;column
  2144                                                          mov     ch,12                                           ;row
  2145                                                          mov     esi,czIntECX                                    ;label
  2146                                                          call    SetConsoleString                                ;draw label
  2147                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2148                                                          mov     cl,19                                           ;column
  2149                                                          mov     ch,12                                           ;row
  2150                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2151                                  ;
  2152                                  ;       Display the EDX register label and value
  2153                                  ;
  2154                                                          mov     cl,15                                           ;column
  2155                                                          mov     ch,13                                           ;row
  2156                                                          mov     esi,czIntEDX                                    ;label
  2157                                                          call    SetConsoleString                                ;draw label
  2158                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2159                                                          mov     cl,19                                           ;column
  2160                                                          mov     ch,13                                           ;row
  2161                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2162                                  ;
  2163                                  ;       Display the EBX register label and value
  2164                                  ;
  2165                                                          mov     cl,15                                           ;column
  2166                                                          mov     ch,14                                           ;row
  2167                                                          mov     esi,czIntEBX                                    ;label
  2168                                                          call    SetConsoleString                                ;draw label
  2169                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2170                                                          mov     cl,19                                           ;column
  2171                                                          mov     ch,14                                           ;row
  2172                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2173                                  ;
  2174                                  ;       Display the ESI register label and value
  2175                                  ;
  2176                                                          mov     cl,29                                           ;column
  2177                                                          mov     ch,11                                           ;row
  2178                                                          mov     esi,czIntESI                                    ;label
  2179                                                          call    SetConsoleString                                ;draw label
  2180                                                          mov     eax,[ebp+4]                                     ;ESI
  2181                                                          mov     cl,33                                           ;column
  2182                                                          mov     ch,11                                           ;row
  2183                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2184                                  ;
  2185                                  ;       Display the EDI register label and value
  2186                                  ;
  2187                                                          mov     cl,29                                           ;column
  2188                                                          mov     ch,12                                           ;row
  2189                                                          mov     esi,czIntEDI                                    ;label
  2190                                                          call    SetConsoleString                                ;draw label
  2191                                                          mov     eax,[ebp+0]                                     ;EDI
  2192                                                          mov     cl,33                                           ;column
  2193                                                          mov     ch,12                                           ;row
  2194                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2195                                  ;
  2196                                  ;       Display the EBP register label and value
  2197                                  ;
  2198                                                          mov     cl,29                                           ;column
  2199                                                          mov     ch,13                                           ;row
  2200                                                          mov     esi,czIntEBP                                    ;label
  2201                                                          call    SetConsoleString                                ;draw label
  2202                                                          mov     eax,[ebp+8]                                     ;EBP
  2203                                                          mov     cl,33                                           ;column
  2204                                                          mov     ch,13                                           ;row
  2205                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2206                                  ;
  2207                                  ;       Display the DS register label and value
  2208                                  ;
  2209                                                          mov     cl,42                                           ;column
  2210                                                          mov     ch,11                                           ;row
  2211                                                          mov     esi,czIntDS                                     ;label
  2212                                                          call    SetConsoleString                                ;draw label
  2213                                                          xor     eax,eax                                         ;zero register
  2214                                                          mov     ax,[ebp+36]                                     ;DS
  2215                                                          mov     cl,46                                           ;column
  2216                                                          mov     ch,11                                           ;row
  2217                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2218                                  ;
  2219                                  ;       Display the ES register label and value
  2220                                  ;
  2221                                                          mov     cl,42                                           ;column
  2222                                                          mov     ch,12                                           ;row
  2223                                                          mov     esi,czIntES                                     ;label
  2224                                                          call    SetConsoleString                                ;draw label
  2225                                                          xor     eax,eax                                         ;zero register
  2226                                                          mov     ax,[ebp+32]                                     ;ES
  2227                                                          mov     cl,46                                           ;column
  2228                                                          mov     ch,12                                           ;row
  2229                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2230                                  ;
  2231                                  ;       Display the SS register label and value
  2232                                  ;
  2233                                                          mov     cl,42                                           ;column
  2234                                                          mov     ch,13                                           ;row
  2235                                                          mov     esi,czIntSS                                     ;label
  2236                                                          call    SetConsoleString                                ;draw label
  2237                                                          xor     eax,eax                                         ;zero register
  2238                                                          mov     ax,ss                                           ;SS
  2239                                                          mov     cl,46                                           ;column
  2240                                                          mov     ch,13                                           ;row
  2241                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2242                                  ;
  2243                                  ;       Display the CS register lable and value
  2244                                  ;
  2245                                                          mov     cl,42                                           ;column
  2246                                                          mov     ch,14                                           ;row
  2247                                                          mov     esi,czIntCS                                     ;label
  2248                                                          call    SetConsoleString                                ;draw label
  2249                                                          xor     eax,eax                                         ;zero register
  2250                                                          mov     ax,[ebp+52]                                     ;CS
  2251                                                          mov     cl,46                                           ;column
  2252                                                          mov     ch,14                                           ;row
  2253                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2254                                  ;
  2255                                  ;       Display the EFLAGS register label and value
  2256                                  ;
  2257                                                          mov     cl,51                                           ;column
  2258                                                          mov     ch,11                                           ;row
  2259                                                          mov     esi,czIntEFLAGS                                 ;label
  2260                                                          call    SetConsoleString                                ;draw label
  2261                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2262                                                          mov     cl,55                                           ;column
  2263                                                          mov     ch,11                                           ;row
  2264                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2265                                  ;
  2266                                  ;       Display the ESP register label and value
  2267                                  ;
  2268                                                          mov     cl,51                                           ;column
  2269                                                          mov     ch,13                                           ;row
  2270                                                          mov     esi,czIntESP                                    ;label
  2271                                                          call    SetConsoleString                                ;draw label
  2272                                                          mov     eax,[ebp+12]                                    ;ESP
  2273                                                          mov     cl,55                                           ;column
  2274                                                          mov     ch,13                                           ;row
  2275                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2276                                  ;
  2277                                  ;       Display the EIP register label and value
  2278                                  ;
  2279                                                          mov     cl,51                                           ;column
  2280                                                          mov     ch,14                                           ;row
  2281                                                          mov     esi,czIntEIP                                    ;label
  2282                                                          call    SetConsoleString                                ;draw label
  2283                                                          mov     eax,[ebp+48]                                    ;EIP
  2284                                                          mov     cl,55                                           ;column
  2285                                                          mov     ch,14                                           ;row
  2286                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2287                                  ;
  2288                                  ;       Halt and loop until reset
  2289                                  ;
  2290                                  .10                     sti                                                     ;enable maskable interrupts
  2291                                                          hlt                                                     ;halt processor
  2292                                                          jmp     .10                                             ;resume on interrupt
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  ;
  2295                                  ;       Processor Interrupt Name Strings
  2296                                  ;
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                  czIntDivideByZero       db      "Division by zero",0
  2299                                  czIntSingleStep         db      "Single step",0
  2300                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2301                                  czIntBreak              db      "Break",0
  2302                                  czIntInto               db      "Into",0
  2303                                  czIntBounds             db      "Bounds",0
  2304                                  czIntBadOpCode          db      "Bad Operation Code",0
  2305                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2306                                  czIntDoubleFault        db      "Double Fault",0
  2307                                  czIntOperand            db      "Operand",0
  2308                                  czIntBadTSS             db      "Bad Task State Segment",0
  2309                                  czIntNotPresent         db      "Not Present",0
  2310                                  czIntStackLimit         db      "Stack Limit",0
  2311                                  czIntProtection         db      "General Protection Fault",0
  2312                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2313                                  czIntReserved           db      "Reserved",0
  2314                                  ;-----------------------------------------------------------------------------------------------------------------------
  2315                                  ;
  2316                                  ;       Processor Interrupt Handling Strings
  2317                                  ;
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2320                                  czIntLabel              db      "Interrupt #",0
  2321                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2322                                  czIntEAX                db      "EAX:",0
  2323                                  czIntECX                db      "ECX:",0
  2324                                  czIntEDX                db      "EDX:",0
  2325                                  czIntEBX                db      "EBX:",0
  2326                                  czIntESI                db      "ESI:",0
  2327                                  czIntEDI                db      "EDI:",0
  2328                                  czIntEBP                db      "EBP:",0
  2329                                  czIntESP                db      "ESP:",0
  2330                                  czIntDS                 db      " DS:",0
  2331                                  czIntES                 db      " ES:",0
  2332                                  czIntSS                 db      " SS:",0
  2333                                  czIntCS                 db      " CS:",0
  2334                                  czIntEFLAGS             db      "FLG:",0
  2335                                  czIntEIP                db      "EIP:",0
  2336                                  ;-----------------------------------------------------------------------------------------------------------------------
  2337                                  ;
  2338                                  ;       Routine:        DrawTextDialogBox
  2339                                  ;
  2340                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2341                                  ;
  2342                                  ;       In:             CL      upper left column (0-79)
  2343                                  ;                       CH      upper left row (0-24)
  2344                                  ;                       DL      column width, excluding border
  2345                                  ;                       DH      row height, excluding border
  2346                                  ;                       BH      color attribute
  2347                                  ;
  2348                                  ;-----------------------------------------------------------------------------------------------------------------------
  2349                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2350                                                          push    esi                                             ;
  2351                                                          push    edi                                             ;
  2352                                                          push    es                                              ;
  2353                                                          push    EGDTCGA                                         ;load CGA selector ...
  2354                                                          pop     es                                              ;... into ES
  2355                                  ;
  2356                                  ;       Compute target display offset
  2357                                  ;
  2358                                                          xor     eax,eax                                         ;zero register
  2359                                                          mov     al,ch                                           ;row
  2360                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2361                                                          mul     ah                                              ;row offset
  2362                                                          add     al,cl                                           ;add column
  2363                                                          adc     ah,0                                            ;add overflow
  2364                                                          add     al,cl                                           ;add column
  2365                                                          adc     ah,0                                            ;add overflow
  2366                                                          mov     edi,eax                                         ;target row offset
  2367                                  ;
  2368                                  ;       Display top border row
  2369                                  ;
  2370                                                          push    edi                                             ;save target row offset
  2371                                                          mov     ah,bh                                           ;attribute
  2372                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2373                                                          stosw                                                   ;display character and attribute
  2374                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2375                                                          xor     ecx,ecx                                         ;zero register
  2376                                                          mov     cl,dl                                           ;width, excluding border
  2377                                                          rep     stosw                                           ;display horizontal border
  2378                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2379                                                          stosw                                                   ;display character and attribute
  2380                                                          pop     edi                                             ;restore target row offset
  2381                                                          add     edi,ECONROWBYTES                                ;next row
  2382                                  ;
  2383                                  ;       Display dialog box body rows
  2384                                  ;
  2385                                                          xor     ecx,ecx                                         ;zero register
  2386                                                          mov     cl,dh                                           ;height, excluding border
  2387                                  .10                     push    ecx                                             ;save remaining rows
  2388                                                          push    edi                                             ;save target row offset
  2389                                                          mov     ah,bh                                           ;attribute
  2390                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2391                                                          stosw                                                   ;display character and attribute
  2392                                                          mov     al,EASCIISPACE                                  ;space
  2393                                                          xor     ecx,ecx                                         ;zero register
  2394                                                          mov     cl,dl                                           ;width, excluding border
  2395                                                          rep     stosw                                           ;display row
  2396                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2397                                                          stosw                                                   ;display character and attribute
  2398                                                          pop     edi                                             ;restore target row offset
  2399                                                          add     edi,ECONROWBYTES                                ;next row
  2400                                                          pop     ecx                                             ;remaining rows
  2401                                                          loop    .10                                             ;next row
  2402                                  ;
  2403                                  ;       Display bottom border row
  2404                                  ;
  2405                                                          push    edi                                             ;save target row offset
  2406                                                          mov     ah,bh                                           ;attribute
  2407                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2408                                                          stosw                                                   ;display character and attribute
  2409                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2410                                                          xor     ecx,ecx                                         ;zero register
  2411                                                          mov     cl,dl                                           ;width, excluding border
  2412                                                          rep     stosw                                           ;display horizontal border
  2413                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2414                                                          stosw                                                   ;display character and attribute
  2415                                                          pop     edi                                             ;restore target row offset
  2416                                                          add     edi,ECONROWBYTES                                ;next row
  2417                                  ;
  2418                                  ;       Restore and return
  2419                                  ;
  2420                                                          pop     es                                              ;restore non-volatile regs
  2421                                                          pop     edi                                             ;
  2422                                                          pop     esi                                             ;
  2423                                                          pop     ecx                                             ;
  2424                                                          ret                                                     ;return
  2425                                  ;=======================================================================================================================
  2426                                  ;
  2427                                  ;       Hardware Device Interupts
  2428                                  ;
  2429                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2430                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2431                                  ;       (BX=2028h).
  2432                                  ;
  2433                                  ;=======================================================================================================================
  2434                                  ;-----------------------------------------------------------------------------------------------------------------------
  2435                                  ;
  2436                                  ;       IRQ0    Clock Tick Interrupt
  2437                                  ;
  2438                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2439                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2440                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2441                                  ;
  2442                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2443                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2444                                  ;
  2445                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2446                                  ;       zero, the floppy disk motors are turned off.
  2447                                  ;
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449                                                          menter  clocktick                                       ;clock tick interrupt
  2450                                                          push    eax                                             ;save non-volatile regs
  2451                                                          push    edx                                             ;
  2452                                                          push    ds                                              ;
  2453                                  ;
  2454                                  ;       Update the clock tick count and the elapsed days as needed.
  2455                                  ;
  2456                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2457                                                          pop     ds                                              ;... into data segment register
  2458                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2459                                                          inc     eax                                             ;increment clock ticks
  2460                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2461                                                          jb      irq0.10                                         ;no, skip ahead
  2462                                                          inc     byte [wbClockDays]                              ;increment clock days
  2463                                                          xor     eax,eax                                         ;reset clock ticks
  2464                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2465                                  ;
  2466                                  ;       Decrement floppy disk motor timeout.
  2467                                  ;
  2468                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2469                                                          je      irq0.20                                         ;yes, skip ahead
  2470                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2471                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2472                                  ;
  2473                                  ;       Turn off the floppy disk motor if appropriate.
  2474                                  ;
  2475                                                          sti                                                     ;enable maskable interrupts
  2476                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2477                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2478                                                          in      al,dx                                           ;FDC main status byte
  2479                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2480                                                          jnz     irq0.15                                         ;wait while busy
  2481                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2482                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2483                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2484                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2485                                                          out     dx,al                                           ;turn motor off
  2486                                  ;
  2487                                  ;       Signal the end of the hardware interrupt.
  2488                                  ;
  2489                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2490                                  ;
  2491                                  ;       Restore and return.
  2492                                  ;
  2493                                                          pop     ds                                              ;restore modified regs
  2494                                                          pop     edx                                             ;
  2495                                                          pop     eax                                             ;
  2496                                                          iretd                                                   ;return
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498                                  ;
  2499                                  ;       IRQ1    Keyboard Interrupt
  2500                                  ;
  2501                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2502                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2503                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2504                                  ;       ALL modified registers upon return.
  2505                                  ;
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                                          menter  keyboard                                        ;keyboard interrrupt
  2508                                                          push    eax                                             ;save non-volatile regs
  2509                                                          push    ebx                                             ;
  2510                                                          push    ecx                                             ;
  2511                                                          push    esi                                             ;
  2512                                                          push    ds                                              ;
  2513                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2514                                                          pop     ds                                              ;... into data segment register
  2515                                                          xor     al,al                                           ;zero
  2516                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2517                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2518                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2519                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2520                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2521                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2522                                                          mov     al,' '                                          ;space
  2523                                                          mov     [wbConsoleChar],al                              ;set character to space
  2524                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2525                                                          not     al                                              ;controller timeout mask
  2526                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2527                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2528                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2529                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2530                                                          jz      irq1.140                                        ;yes, skip ahead
  2531                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2532                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2533                                                          mov     ah,al                                           ;copy scan code 0
  2534                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2535                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2536                                                          je      irq1.30                                         ;yes, set flag
  2537                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2538                                                          je      irq1.40                                         ;yes, reset flag
  2539                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2540                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2541                                                          je      irq1.30                                         ;yes, set flag
  2542                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2543                                                          je      irq1.40                                         ;yes, reset flag
  2544                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2545                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2546                                                          je      irq1.30                                         ;yes, set flag
  2547                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2548                                                          je      irq1.40                                         ;yes, reset flag
  2549                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2550                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2551                                                          je      irq1.30                                         ;yes, set flag
  2552                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2553                                                          je      irq1.40                                         ;yes, reset flag
  2554                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2555                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2556                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2557                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2558                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2559                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2560                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2561                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2562                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2563                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2564                                                          jne     irq1.70                                         ;no, skip ahead
  2565                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2566                                                          jz      irq1.140                                        ;yes, skip ahead
  2567                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2568                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2569                                                          mov     ah,al                                           ;copy scan code 1
  2570                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2571                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2572                                                          je      irq1.30                                         ;yes, set flag
  2573                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2574                                                          je      irq1.40                                         ;yes, reset flag
  2575                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2576                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2577                                                          je      irq1.30                                         ;yes, set flag
  2578                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2579                                                          je      irq1.40                                         ;yes, reset flag
  2580                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2581                                                          je      irq1.80                                         ;yes, skip ahead
  2582                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2583                                                          je      irq1.80                                         ;yes, skip ahead
  2584                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2585                                                          je      irq1.10                                         ;yes, continue
  2586                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2587                                                          jne     irq1.20                                         ;no, skip ahead
  2588                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2589                                                          jz      irq1.140                                        ;yes, skip ahead
  2590                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2591                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2592                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2593                                                          jz      irq1.140                                        ;yes, skip ahead
  2594                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2595                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2596                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2597                                  irq1.30                 or      bl,al                                           ;set shift flag
  2598                                                          jmp     irq1.60                                         ;skip ahead
  2599                                  irq1.40                 not     al                                              ;convert flag to mask
  2600                                                          and     bl,al                                           ;reset shift flag
  2601                                                          jmp     irq1.60                                         ;skip ahead
  2602                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2603                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2604                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2605                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2606                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2607                                                          jmp     irq1.150                                        ;finish keyboard handling
  2608                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2609                                                          jne     irq1.80                                         ;no continue
  2610                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2611                                                          jz      irq1.140                                        ;yes, skip ahead
  2612                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2613                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2614                                                          mov     ah,al                                           ;copy scan code 1
  2615                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2616                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2617                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2618                                                          jz      irq1.140                                        ;yes, skip ahead
  2619                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2620                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2621                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2622                                                          jz      irq1.140                                        ;yes, skip ahead
  2623                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2624                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2625                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2626                                                          jz      irq1.140                                        ;yes, skip ahead
  2627                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2628                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2629                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2630                                                          jz      irq1.140                                        ;yes, skip ahead
  2631                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2632                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2633                                                          jmp     irq1.150                                        ;continue
  2634                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2635                                                          test    ah,EKEYBUP                                      ;release code?
  2636                                                          jnz     irq1.130                                        ;yes, skip ahead
  2637                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2638                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2639                                                          jz      irq1.90                                         ;no, skip ahead
  2640                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2641                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2642                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2643                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2644                                                          jz      irq1.100                                        ;no skip ahead
  2645                                                          mov     cl,al                                           ;copy ASCII code
  2646                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2647                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2648                                                          jb      irq1.100                                        ;yes, skip ahead
  2649                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2650                                                          ja      irq1.100                                        ;yes, skip ahead
  2651                                                          xor     al,EASCIICASE                                   ;switch case
  2652                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2653                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2654                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2655                                                          jz      irq1.120                                        ;no, skip ahead
  2656                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2657                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2658                                                          or      edx,eax                                         ;msg id and codes
  2659                                                          xor     ecx,ecx                                         ;null param
  2660                                                          push    eax                                             ;save codes
  2661                                                          call    PutMessage                                      ;put message to console
  2662                                                          pop     eax                                             ;restore codes
  2663                                                          test    al,al                                           ;ASCII translation?
  2664                                                          jz      irq1.130                                        ;no, skip ahead
  2665                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2666                                                          and     eax,0FFFFh                                      ;clear high-order word
  2667                                                          or      edx,eax                                         ;msg id and codes
  2668                                                          xor     ecx,ecx                                         ;null param
  2669                                                          call    PutMessage                                      ;put message to console
  2670                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2671                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2672                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2673                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2674                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2675                                                          pop     ds                                              ;restore non-volatile regs
  2676                                                          pop     esi                                             ;
  2677                                                          pop     ecx                                             ;
  2678                                                          pop     ebx                                             ;
  2679                                                          pop     eax                                             ;
  2680                                                          iretd                                                   ;return
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                  ;       Scan-Code to ASCII Translation Tables
  2683                                  ;-----------------------------------------------------------------------------------------------------------------------
  2684                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2685                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2686                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2687                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2688                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2689                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2690                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2691                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2692                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2693                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2694                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2695                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2696                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2697                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2698                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2699                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2700                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2701                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2702                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2703                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2704                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2705                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2706                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2707                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2708                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2709                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2710                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2711                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2712                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2713                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2714                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2715                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2719                                  ;
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721                                                          menter  iochannel                                       ;secondary 8259A cascade
  2722                                                          push    eax                                             ;save modified regs
  2723                                                          jmp     hwint                                           ;end interrupt and return
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2727                                  ;
  2728                                  ;-----------------------------------------------------------------------------------------------------------------------
  2729                                                          menter  com2                                            ;serial port 2 interrupt
  2730                                                          push    eax                                             ;save modified regs
  2731                                                          jmp     hwint                                           ;end interrupt and return
  2732                                  ;-----------------------------------------------------------------------------------------------------------------------
  2733                                  ;
  2734                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2735                                  ;
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                                          menter  com1                                            ;serial port 1 interrupt
  2738                                                          push    eax                                             ;save modified regs
  2739                                                          jmp     hwint                                           ;end interrupt and return
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  ;
  2742                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2743                                  ;
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2746                                                          push    eax                                             ;save modified regs
  2747                                                          jmp     hwint                                           ;end interrupt and return
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  ;
  2750                                  ;       IRQ6    Diskette Hardware Interrupt
  2751                                  ;
  2752                                  ;-----------------------------------------------------------------------------------------------------------------------
  2753                                                          menter  diskette                                        ;floppy disk interrupt
  2754                                                          push    eax                                             ;save non-volatile regs
  2755                                                          push    ds                                              ;
  2756                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2757                                                          pop     ds                                              ;... into DS register
  2758                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2759                                                          or      al,10000000b                                    ;set IRQ flag
  2760                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2761                                                          pop     ds                                              ;restore non-volatile regs
  2762                                                          jmp     hwint                                           ;end primary PIC interrupt
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2766                                  ;
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2769                                                          push    eax                                             ;save modified regs
  2770                                                          jmp     hwint                                           ;end interrupt and return
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  ;
  2773                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                                          menter  rtclock                                         ;real-time clock interrupt
  2777                                                          push    eax                                             ;save modified regs
  2778                                                          jmp     hwwint                                          ;end interrupt and return
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  ;
  2781                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2782                                  ;
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2785                                                          push    eax                                             ;save modified regs
  2786                                                          jmp     hwwint                                          ;end interrupt and return
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                  ;
  2789                                  ;       IRQ10   Reserved Hardware Interrupt
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                                          menter  irq10                                           ;reserved
  2793                                                          push    eax                                             ;save modified regs
  2794                                                          jmp     hwwint                                          ;end interrupt and return
  2795                                  ;-----------------------------------------------------------------------------------------------------------------------
  2796                                  ;
  2797                                  ;       IRQ11   Reserved Hardware Interrupt
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                                          menter  irq11                                           ;reserved
  2801                                                          push    eax                                             ;save modified regs
  2802                                                          jmp     hwwint                                          ;end interrupt and return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2806                                  ;
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2809                                                          push    eax                                             ;save modified regs
  2810                                                          jmp     hwwint                                          ;end interrupt and return
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812                                  ;
  2813                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2814                                  ;
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                                          menter  coprocessor                                     ;coprocessor interrupt
  2817                                                          push    eax                                             ;save modified regs
  2818                                                          jmp     hwwint                                          ;end interrupt and return
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  ;
  2821                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2825                                                          push    eax                                             ;save modified regs
  2826                                                          jmp     hwwint                                          ;end interrupt and return
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828                                  ;
  2829                                  ;       IRQ15   Reserved Hardware Interrupt
  2830                                  ;
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                                          menter  irq15                                           ;reserved
  2833                                                          push    eax                                             ;save modified regs
  2834                                                          jmp     hwwint                                          ;end interrupt and return
  2835                                  ;-----------------------------------------------------------------------------------------------------------------------
  2836                                  ;
  2837                                  ;       Exit from hardware interrupt
  2838                                  ;
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2841                                                          jmp     hwint90                                         ;skip ahead
  2842                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2843                                  hwint90                 pop     eax                                             ;restore modified regs
  2844                                                          iretd                                                   ;return from interrupt
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  ;
  2847                                  ;       INT 30h Operating System Software Service Interrupt
  2848                                  ;
  2849                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2850                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2851                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2852                                  ;       the entry address of the specific function from a table.
  2853                                  ;
  2854                                  ;-----------------------------------------------------------------------------------------------------------------------
  2855                                                          menter  svc
  2856                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2857                                                          jae     svc90                                           ;yes, skip ahead
  2858                                                          movzx   eax,al                                          ;function
  2859                                                          shl     eax,2                                           ;offset into table
  2860                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2861                                  svc90                   iretd                                                   ;return from interrupt
  2862                                  ;-----------------------------------------------------------------------------------------------------------------------
  2863                                  ;
  2864                                  ;       Service Request Table
  2865                                  ;
  2866                                  ;
  2867                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2868                                  ;
  2869                                  ;-----------------------------------------------------------------------------------------------------------------------
  2870                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2871                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2872                                                          tsvce   CompareMemory                                   ;compare memory
  2873                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2874                                                          tsvce   FreeMemory                                      ;free memory block
  2875                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2876                                                          tsvce   GetConsoleString                                ;get string input
  2877                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2878                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2879                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2880                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2881                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2882                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2883                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2884                                                          tsvce   PutDayString                                    ;put DD string
  2885                                                          tsvce   PutHourString                                   ;put hh string
  2886                                                          tsvce   PutMinuteString                                 ;put mm string
  2887                                                          tsvce   PutMonthString                                  ;put MM string
  2888                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2889                                                          tsvce   PutSecondString                                 ;put ss string
  2890                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2891                                                          tsvce   PutWeekdayString                                ;put weekday string
  2892                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2893                                                          tsvce   PutYearString                                   ;put YYYY string
  2894                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2895                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2896                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2897                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2898                                                          tsvce   UpperCaseString                                 ;upper-case string
  2899                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901                                  ;
  2902                                  ;       Service Request Macros
  2903                                  ;
  2904                                  ;       These macros provide positional parameterization of service request calls.
  2905                                  ;
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                  %macro                  allocateMemory 1
  2908                                                          mov     ecx,%1                                          ;bytes to allocate
  2909                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2910                                                          int     _svc                                            ;invoke OS service
  2911                                  %endmacro
  2912                                  %macro                  clearConsoleScreen 0
  2913                                                          mov     al,eClearConsoleScreen                          ;function code
  2914                                                          int     _svc                                            ;invoke OS service
  2915                                  %endmacro
  2916                                  %macro                  compareMemory 0
  2917                                                          mov     al,eCompareMemory                               ;function code
  2918                                                          int     _svc                                            ;invoke OS service
  2919                                  %endmacro
  2920                                  %macro                  decimalToUnsigned 0
  2921                                                          mov     al,eDecimalToUnsigned                           ;function code
  2922                                                          int     _svc                                            ;invoke OS servie
  2923                                  %endmacro
  2924                                  %macro                  freeMemory 1
  2925                                                          mov     edx,%1                                          ;address of memory block
  2926                                                          mov     al,eFreeMemory                                  ;function code
  2927                                                          int     _svc                                            ;invoke OS service
  2928                                  %endmacro
  2929                                  %macro                  getBaseMemSize 0
  2930                                                          mov     al,eGetBaseMemSize                              ;function code
  2931                                                          int     _svc                                            ;invoke OS service
  2932                                  %endmacro
  2933                                  %macro                  getConsoleString 4
  2934                                                          mov     edx,%1                                          ;buffer address
  2935                                                          mov     ecx,%2                                          ;max characters
  2936                                                          mov     bh,%3                                           ;echo indicator
  2937                                                          mov     bl,%4                                           ;terminator
  2938                                                          mov     al,eGetConsoleString                            ;function code
  2939                                                          int     _svc                                            ;invoke OS service
  2940                                  %endmacro
  2941                                  %macro                  getExtendedMemSize 0
  2942                                                          mov     al,eGetExtendedMemSize                          ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  getROMMemSize 0
  2946                                                          mov     al,eGetROMMemSize                               ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  hexadecimalToUnsigned 0
  2950                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2951                                                          int     _svc                                            ;invoke OS service
  2952                                  %endmacro
  2953                                  %macro                  isLeapYear 1
  2954                                                          mov     ebx,%1                                          ;DATETIME addr
  2955                                                          mov     al,eIsLeapYear                                  ;function code
  2956                                                          int     _svc                                            ;invoke OS service
  2957                                  %endmacro
  2958                                  %macro                  placeCursor 0
  2959                                                          mov     al,ePlaceCursor                                 ;function code
  2960                                                          int     _svc                                            ;invoke OS service
  2961                                  %endmacro
  2962                                  %macro                  putConsoleString 1
  2963                                                          mov     edx,%1                                          ;string address
  2964                                                          mov     al,ePutConsoleString                            ;function code
  2965                                                          int     _svc                                            ;invoke OS service
  2966                                  %endmacro
  2967                                  %macro                  putDateString 0
  2968                                                          mov     al,ePutDateString                               ;function code
  2969                                                          int     _svc                                            ;invoke OS service
  2970                                  %endmacro
  2971                                  %macro                  putDateString 2
  2972                                                          mov     ebx,%1                                          ;DATETIME addr
  2973                                                          mov     edx,%2                                          ;output buffer addr
  2974                                                          mov     al,ePutDateString                               ;function code
  2975                                                          int     _svc                                            ;invoke OS service
  2976                                  %endmacro
  2977                                  %macro                  putDayString 2
  2978                                                          mov     ebx,%1                                          ;DATETIME addr
  2979                                                          mov     edx,%2                                          ;output buffer addr
  2980                                                          mov     al,ePutDayString                                ;function code
  2981                                                          int     _svc                                            ;invoke OS service
  2982                                  %endmacro
  2983                                  %macro                  putHourString 2
  2984                                                          mov     ebx,%1                                          ;DATETIME addr
  2985                                                          mov     edx,%2                                          ;output buffer addr
  2986                                                          mov     al,ePutHourString                               ;function code
  2987                                                          int     _svc                                            ;invoke OS service
  2988                                  %endmacro
  2989                                  %macro                  putMinuteString 2
  2990                                                          mov     ebx,%1                                          ;DATETIME addr
  2991                                                          mov     edx,%2                                          ;output buffer addr
  2992                                                          mov     al,ePutMinuteString                             ;function code
  2993                                                          int     _svc                                            ;invoke OS service
  2994                                  %endmacro
  2995                                  %macro                  putMonthString 2
  2996                                                          mov     ebx,%1                                          ;DATETIME addr
  2997                                                          mov     edx,%2                                          ;output buffer addr
  2998                                                          mov     al,ePutMonthString                              ;function code
  2999                                                          int     _svc                                            ;invoke OS service
  3000                                  %endmacro
  3001                                  %macro                  putMonthNameString 2
  3002                                                          mov     ebx,%1                                          ;DATETIME addr
  3003                                                          mov     edx,%2                                          ;output buffer addr
  3004                                                          mov     al,ePutMonthNameString                          ;function code
  3005                                                          int     _svc                                            ;invoke OS service
  3006                                  %endmacro
  3007                                  %macro                  putSecondString 2
  3008                                                          mov     ebx,%1                                          ;DATETIME addr
  3009                                                          mov     edx,%2                                          ;output buffer addr
  3010                                                          mov     al,ePutSecondString                             ;function code
  3011                                                          int     _svc                                            ;invoke OS service
  3012                                  %endmacro
  3013                                  %macro                  putTimeString 0
  3014                                                          mov     al,ePutTimeString                               ;function code
  3015                                                          int     _svc                                            ;invoke OS service
  3016                                  %endmacro
  3017                                  %macro                  putTimeString 2
  3018                                                          mov     ebx,%1                                          ;DATETIME addr
  3019                                                          mov     edx,%2                                          ;output buffer addr
  3020                                                          mov     al,ePutTimeString                               ;function code
  3021                                                          int     _svc                                            ;invoke OS service
  3022                                  %endmacro
  3023                                  %macro                  putWeekdayString 2
  3024                                                          mov     ebx,%1                                          ;DATETIME addr
  3025                                                          mov     edx,%2                                          ;output buffer addr
  3026                                                          mov     al,ePutWeekdayString                            ;function code
  3027                                                          int     _svc                                            ;invoke OS service
  3028                                  %endmacro
  3029                                  %macro                  putWeekdayNameString 2
  3030                                                          mov     ebx,%1                                          ;DATETIME addr
  3031                                                          mov     edx,%2                                          ;output buffer addr
  3032                                                          mov     al,ePutWeekdayNameString                        ;function code
  3033                                                          int     _svc                                            ;invoke OS service
  3034                                  %endmacro
  3035                                  %macro                  putYearString 2
  3036                                                          mov     ebx,%1                                          ;DATETIME addr
  3037                                                          mov     edx,%2                                          ;output buffer addr
  3038                                                          mov     al,ePutYearString                               ;function code
  3039                                                          int     _svc                                            ;invoke OS service
  3040                                  %endmacro
  3041                                  %macro                  readRealTimeClock 0
  3042                                                          mov     al,eReadRealTimeClock                           ;function code
  3043                                                          int     _svc                                            ;invoke OS service
  3044                                  %endmacro
  3045                                  %macro                  readRealTimeClock 1
  3046                                                          mov     ebx,%1                                          ;DATETIME addr
  3047                                                          mov     al,eReadRealTimeClock                           ;function code
  3048                                                          int     _svc                                            ;invoke OS service
  3049                                  %endmacro
  3050                                  %macro                  resetSystem 0
  3051                                                          mov     al,eResetSystem                                 ;function code
  3052                                                          int     _svc                                            ;invoke OS service
  3053                                  %endmacro
  3054                                  %macro                  unsignedToDecimalString 0
  3055                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3056                                                          int     _svc                                            ;invoke OS service
  3057                                  %endmacro
  3058                                  %macro                  unsignedToHexadecimal 0
  3059                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3060                                                          int     _svc                                            ;invoke OS service
  3061                                  %endmacro
  3062                                  %macro                  upperCaseString 0
  3063                                                          mov     al,eUpperCaseString                             ;function code
  3064                                                          int     _svc                                            ;invoke OS service
  3065                                  %endmacro
  3066                                  ;=======================================================================================================================
  3067                                  ;
  3068                                  ;       Kernel Function Library
  3069                                  ;
  3070                                  ;=======================================================================================================================
  3071                                  ;=======================================================================================================================
  3072                                  ;
  3073                                  ;       Date and Time Helper Routines
  3074                                  ;
  3075                                  ;       GetYear
  3076                                  ;       IsLeapYear
  3077                                  ;       PutDateString
  3078                                  ;       PutDayString
  3079                                  ;       PutHourString
  3080                                  ;       PutMinuteString
  3081                                  ;       PutMonthString
  3082                                  ;       PutMonthNameString
  3083                                  ;       PutSecondString
  3084                                  ;       PutTimeString
  3085                                  ;       PutWeekdayString
  3086                                  ;       PutWeekdayNameString
  3087                                  ;       PutYearString
  3088                                  ;
  3089                                  ;=======================================================================================================================
  3090                                  ;-----------------------------------------------------------------------------------------------------------------------
  3091                                  ;
  3092                                  ;       Routine:        GetYear
  3093                                  ;
  3094                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3095                                  ;
  3096                                  ;       In:             DS:EBX  DATETIME address
  3097                                  ;
  3098                                  ;       Out:            ECX     year
  3099                                  ;
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3102                                                          imul    ecx,100                                         ;century * 100
  3103                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3104                                                          add     ecx,eax                                         ;year (YYYY)
  3105                                                          ret                                                     ;return
  3106                                  ;-----------------------------------------------------------------------------------------------------------------------
  3107                                  ;
  3108                                  ;       Routine:        IsLeapYear
  3109                                  ;
  3110                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3111                                  ;
  3112                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3113                                  ;
  3114                                  ;       Out:            ECX     0 = not a leap year
  3115                                  ;                               1 = leap year
  3116                                  ;
  3117                                  ;-----------------------------------------------------------------------------------------------------------------------
  3118                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3119                                                          mov     eax,ecx                                         ;EAX = YYYY
  3120                                                          xor     ecx,ecx                                         ;assume not leap year
  3121                                                          test    al,00000011b                                    ;multiple of four?
  3122                                                          jnz     .no                                             ;no, branch
  3123                                                          mov     dl,100                                          ;divisor
  3124                                                          div     dl                                              ;divide by 100
  3125                                                          test    ah,ah                                           ;multiple of 100?
  3126                                                          jnz     .yes                                            ;yes, branch
  3127                                                          test    al,00000011b                                    ;multiple of 400?
  3128                                                          jnz     .no                                             ;no, branch
  3129                                  .yes                    inc     ecx                                             ;indicate leap
  3130                                  .no                     ret                                                     ;return
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  ;
  3133                                  ;       Routine:        PutDateString
  3134                                  ;
  3135                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3136                                  ;                       structure at ds:ebx.
  3137                                  ;
  3138                                  ;       In:             DS:EBX  DATETIME address
  3139                                  ;                       DS:EDX  output buffer address
  3140                                  ;
  3141                                  ;-----------------------------------------------------------------------------------------------------------------------
  3142                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3143                                                          push    edi                                             ;
  3144                                                          push    es                                              ;
  3145                                                          push    ds                                              ;store data selector ...
  3146                                                          pop     es                                              ;... in extra segment reg
  3147                                                          mov     edi,edx                                         ;output buffer address
  3148                                                          mov     cl,10                                           ;divisor
  3149                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3150                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3151                                                          div     cl                                              ;AH = rem; AL = quotient
  3152                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3153                                                          cld                                                     ;forward strings
  3154                                                          stosd                                                   ;store "mm/"nul
  3155                                                          dec     edi                                             ;address of terminator
  3156                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3157                                                          div     cl                                              ;AH = rem; AL = quotient
  3158                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3159                                                          stosd                                                   ;store "dd/"nul
  3160                                                          dec     edi                                             ;address of terminator
  3161                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3162                                                          div     cl                                              ;AH = rem; AL = quotient
  3163                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3164                                                          stosd                                                   ;store "cc/"null
  3165                                                          dec     edi                                             ;address of terminator
  3166                                                          dec     edi                                             ;address of delimiter
  3167                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3168                                                          div     cl                                              ;AH = rem; AL = quotient
  3169                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3170                                                          stosb                                                   ;store quotient
  3171                                                          mov     al,ah                                           ;remainder
  3172                                                          stosb                                                   ;store remainder
  3173                                                          xor     al,al                                           ;null terminator
  3174                                                          stosb                                                   ;store terminator
  3175                                                          pop     es                                              ;restore non-volatile regs
  3176                                                          pop     edi                                             ;
  3177                                                          pop     ecx                                             ;
  3178                                                          ret                                                     ;return
  3179                                  ;-----------------------------------------------------------------------------------------------------------------------
  3180                                  ;
  3181                                  ;       Routine:        PutDayString
  3182                                  ;
  3183                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3184                                  ;                       structure at ds:ebx.
  3185                                  ;
  3186                                  ;       In:             DS:EBX  DATETIME address
  3187                                  ;                       DS:EDX  output buffer address
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3191                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3192                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3193                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3194                                                          pop     ecx                                             ;
  3195                                                          ret                                                     ;return
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197                                  ;
  3198                                  ;       Routine:        PutHourString
  3199                                  ;
  3200                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3201                                  ;                       structure at ds:ebx.
  3202                                  ;
  3203                                  ;       In:             DS:EBX  DATETIME address
  3204                                  ;                       DS:EDX  output buffer address
  3205                                  ;
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3208                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3209                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3210                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3211                                                          pop     ecx                                             ;
  3212                                                          ret                                                     ;return
  3213                                  ;-----------------------------------------------------------------------------------------------------------------------
  3214                                  ;
  3215                                  ;       Routine:        PutMinuteString
  3216                                  ;
  3217                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3218                                  ;                       structure at ds:ebx.
  3219                                  ;
  3220                                  ;       In:             DS:EBX  DATETIME address
  3221                                  ;                       DS:EDX  output buffer address
  3222                                  ;
  3223                                  ;-----------------------------------------------------------------------------------------------------------------------
  3224                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3225                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3226                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3227                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3228                                                          pop     ecx                                             ;
  3229                                                          ret                                                     ;return
  3230                                  ;-----------------------------------------------------------------------------------------------------------------------
  3231                                  ;
  3232                                  ;       Routine:        PutMonthString
  3233                                  ;
  3234                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3235                                  ;                       structure at ds:ebx.
  3236                                  ;
  3237                                  ;       In:             DS:EBX  DATETIME address
  3238                                  ;                       DS:EDX  output buffer address
  3239                                  ;
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3242                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3243                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3244                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3245                                                          pop     ecx                                             ;
  3246                                                          ret                                                     ;return
  3247                                  ;-----------------------------------------------------------------------------------------------------------------------
  3248                                  ;
  3249                                  ;       Routine:        PutMonthNameString
  3250                                  ;
  3251                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3252                                  ;                       structure at ds:ebx.
  3253                                  ;
  3254                                  ;       In:             DS:EBX  DATETIME address
  3255                                  ;                       DS:EDX  output buffer address
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3259                                                          push    edi                                             ;
  3260                                                          push    ds                                              ;
  3261                                                          push    es                                              ;
  3262                                                          push    ds                                              ;load data selector ...
  3263                                                          pop     es                                              ;... into extra segment
  3264                                                          mov     edi,edx                                         ;output buffer address
  3265                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3266                                                          dec     eax                                             ;month (0-11)
  3267                                                          shl     eax,2                                           ;offset into month name lookup table
  3268                                                          push    cs                                              ;load code selector ...
  3269                                                          pop     ds                                              ;... into data segment
  3270                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3271                                                          cld                                                     ;forward strings
  3272                                  .10                     lodsb                                                   ;name character
  3273                                                          stosb                                                   ;store in output buffer
  3274                                                          test    al,al                                           ;end of string?
  3275                                                          jnz     .10                                             ;no, continue
  3276                                                          pop     es                                              ;restore non-volatile regs
  3277                                                          pop     ds                                              ;
  3278                                                          pop     edi                                             ;
  3279                                                          pop     esi                                             ;
  3280                                                          ret                                                     ;return
  3281                                  ;-----------------------------------------------------------------------------------------------------------------------
  3282                                  ;
  3283                                  ;       Routine:        PutSecondString
  3284                                  ;
  3285                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3286                                  ;                       structure at ds:ebx.
  3287                                  ;
  3288                                  ;       In:             DS:EBX  DATETIME address
  3289                                  ;                       DS:EDX  output buffer address
  3290                                  ;
  3291                                  ;-----------------------------------------------------------------------------------------------------------------------
  3292                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3293                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3294                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3295                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3296                                                          pop     ecx                                             ;
  3297                                                          ret                                                     ;return
  3298                                  ;-----------------------------------------------------------------------------------------------------------------------
  3299                                  ;
  3300                                  ;       Routine:        PutTimeString
  3301                                  ;
  3302                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3303                                  ;                       structure at ds:ebx.
  3304                                  ;
  3305                                  ;       In:             DS:EBX  DATETIME address
  3306                                  ;                       DS:EDX  output buffer address
  3307                                  ;
  3308                                  ;-----------------------------------------------------------------------------------------------------------------------
  3309                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3310                                                          push    edi                                             ;
  3311                                                          push    es                                              ;
  3312                                                          push    ds                                              ;store data selector ...
  3313                                                          pop     es                                              ;... in extra segment reg
  3314                                                          mov     edi,edx                                         ;output buffer address
  3315                                                          mov     cl,10                                           ;divisor
  3316                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3317                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3318                                                          div     cl                                              ;ah = rem; al = quotient
  3319                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3320                                                          cld                                                     ;forward strings
  3321                                                          stosd                                                   ;store "mm/"nul
  3322                                                          dec     edi                                             ;address of terminator
  3323                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3324                                                          div     cl                                              ;ah = rem; al = quotient
  3325                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3326                                                          stosd                                                   ;store "dd/"nul
  3327                                                          dec     edi                                             ;address of terminator
  3328                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3329                                                          div     cl                                              ;ah = rem; al = quotient
  3330                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3331                                                          stosb                                                   ;store quotient
  3332                                                          mov     al,ah                                           ;remainder
  3333                                                          stosb                                                   ;store remainder
  3334                                                          xor     al,al                                           ;null terminator
  3335                                                          stosb                                                   ;store terminator
  3336                                                          pop     es                                              ;restore non-volatile regs
  3337                                                          pop     edi                                             ;
  3338                                                          pop     ecx                                             ;
  3339                                                          ret                                                     ;return
  3340                                  ;-----------------------------------------------------------------------------------------------------------------------
  3341                                  ;
  3342                                  ;       Routine:        PutWeekdayString
  3343                                  ;
  3344                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3345                                  ;                       structure at ds:ebx.
  3346                                  ;
  3347                                  ;       In:             DS:EBX  DATETIME address
  3348                                  ;                       DS:EDX  output buffer address
  3349                                  ;
  3350                                  ;-----------------------------------------------------------------------------------------------------------------------
  3351                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3352                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3353                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3354                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3355                                                          pop     ecx                                             ;
  3356                                                          ret                                                     ;return
  3357                                  ;-----------------------------------------------------------------------------------------------------------------------
  3358                                  ;
  3359                                  ;       Routine:        PutWeekdayNameString
  3360                                  ;
  3361                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3362                                  ;                       structure at ds:ebx.
  3363                                  ;
  3364                                  ;       In:             DS:EBX  DATETIME address
  3365                                  ;                       DS:EDX  output buffer address
  3366                                  ;
  3367                                  ;-----------------------------------------------------------------------------------------------------------------------
  3368                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3369                                                          push    edi                                             ;
  3370                                                          push    ds                                              ;
  3371                                                          push    es                                              ;
  3372                                                          push    ds                                              ;load data selector ...
  3373                                                          pop     es                                              ;... into extra segment
  3374                                                          mov     edi,edx                                         ;output buffer address
  3375                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3376                                                          shl     eax,2                                           ;offset into day name lookup table
  3377                                                          push    cs                                              ;load code selector ...
  3378                                                          pop     ds                                              ;... into data segment
  3379                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3380                                                          cld                                                     ;forward strings
  3381                                  .10                     lodsb                                                   ;name character
  3382                                                          stosb                                                   ;store in output buffer
  3383                                                          test    al,al                                           ;end of string?
  3384                                                          jnz     .10                                             ;no, continue
  3385                                                          pop     es                                              ;restore non-volatile regs
  3386                                                          pop     ds                                              ;
  3387                                                          pop     edi                                             ;
  3388                                                          pop     esi                                             ;
  3389                                                          ret                                                     ;return
  3390                                  ;-----------------------------------------------------------------------------------------------------------------------
  3391                                  ;
  3392                                  ;       Routine:        PutYearString
  3393                                  ;
  3394                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3395                                  ;                       structure at ds:ebx.
  3396                                  ;
  3397                                  ;       In:             DS:EBX  DATETIME address
  3398                                  ;                       DS:EDX  output buffer address
  3399                                  ;
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3402                                                          call    GetYear                                         ;ECX = YYYY
  3403                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3404                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3405                                                          pop     ecx                                             ;restore non-volatile regs
  3406                                                          ret                                                     ;return
  3407                                  ;-----------------------------------------------------------------------------------------------------------------------
  3408                                  ;
  3409                                  ;       Day Names
  3410                                  ;
  3411                                  ;-----------------------------------------------------------------------------------------------------------------------
  3412                                  czSunday                db      "Sunday",0
  3413                                  czMonday                db      "Monday",0
  3414                                  czTuesday               db      "Tuesday",0
  3415                                  czWednesday             db      "Wednesday",0
  3416                                  czThursday              db      "Thursday",0
  3417                                  czFriday                db      "Friday",0
  3418                                  czSaturday              db      "Saturday",0
  3419                                  ;-----------------------------------------------------------------------------------------------------------------------
  3420                                  ;
  3421                                  ;       Month Names
  3422                                  ;
  3423                                  ;-----------------------------------------------------------------------------------------------------------------------
  3424                                  czJanuary               db      "January",0
  3425                                  czFebruary              db      "February",0
  3426                                  czMarch                 db      "March",0
  3427                                  czApril                 db      "April",0
  3428                                  czMay                   db      "May",0
  3429                                  czJune                  db      "June",0
  3430                                  czJuly                  db      "July",0
  3431                                  czAugust                db      "August",0
  3432                                  czSeptember             db      "September",0
  3433                                  czOctober               db      "October",0
  3434                                  czNovember              db      "November",0
  3435                                  czDecember              db      "December",0
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Day Names Lookup Table
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441                                                          align   4
  3442                                  tDayNames               equ     $
  3443                                                          dd      czSunday
  3444                                                          dd      czMonday
  3445                                                          dd      czTuesday
  3446                                                          dd      czWednesday
  3447                                                          dd      czThursday
  3448                                                          dd      czFriday
  3449                                                          dd      czSaturday
  3450                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3451                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;       Month Names Lookup Table
  3455                                  ;
  3456                                  ;-----------------------------------------------------------------------------------------------------------------------
  3457                                                          align   4
  3458                                  tMonthNames             equ     $
  3459                                                          dd      czJanuary
  3460                                                          dd      czFebruary
  3461                                                          dd      czMarch
  3462                                                          dd      czApril
  3463                                                          dd      czMay
  3464                                                          dd      czJune
  3465                                                          dd      czJuly
  3466                                                          dd      czAugust
  3467                                                          dd      czSeptember
  3468                                                          dd      czOctober
  3469                                                          dd      czNovember
  3470                                                          dd      czDecember
  3471                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3472                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3473                                  ;=======================================================================================================================
  3474                                  ;
  3475                                  ;       Memory Helper Routines
  3476                                  ;
  3477                                  ;       AllocateMemory
  3478                                  ;       FreeMemory
  3479                                  ;
  3480                                  ;=======================================================================================================================
  3481                                  ;-----------------------------------------------------------------------------------------------------------------------
  3482                                  ;
  3483                                  ;       Routine:        AllocateMemory
  3484                                  ;
  3485                                  ;       Description:    This routine allocates a memory block for the given task.
  3486                                  ;
  3487                                  ;       In:             ECX     bytes of memory to allocate
  3488                                  ;
  3489                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3490                                  ;                               0       unable to allocate memory
  3491                                  ;
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3494                                                          push    ecx                                             ;
  3495                                                          push    esi                                             ;
  3496                                                          push    ds                                              ;
  3497                                  ;
  3498                                  ;       Address kernel memory structures
  3499                                  ;
  3500                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3501                                                          pop     ds                                              ;... into data segment reg
  3502                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3503                                  ;
  3504                                  ;       Set requested size to minimum block size if requested size is too small.
  3505                                  ;
  3506                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3507                                                          jae     .10                                             ;no, branch
  3508                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3509                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3510                                  ;
  3511                                  ;       Find the first free memory block large enough to satisfy the request.
  3512                                  ;
  3513                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3514                                  .20                     test    eax,eax                                         ;end of free block chain?
  3515                                                          jz      .220                                            ;yes, branch
  3516                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3517                                                          jbe     .30                                             ;yes, branch
  3518                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3519                                                          jmp     .20                                             ;continue
  3520                                  ;-----------------------------------------------------------------------------------------------------------------------
  3521                                  ;
  3522                                  ;       Address the previous and next free memory blocks.
  3523                                  ;
  3524                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3525                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3526                                  ;
  3527                                  ;       Remove the free memory block from the forward free memory block chain.
  3528                                  ;
  3529                                                          test    ebx,ebx                                         ;any previous free memory block?
  3530                                                          jz      .40                                             ;no, branch
  3531                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3532                                                          jmp     .50                                             ;continue
  3533                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3534                                  ;
  3535                                  ;       Remove the free memory block from the reverse free memory block chain.
  3536                                  ;
  3537                                  .50                     test    edx,edx                                         ;any next free memory block?
  3538                                                          jz      .60                                             ;no, branch
  3539                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3540                                                          jmp     .70                                             ;continue
  3541                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3542                                  ;-----------------------------------------------------------------------------------------------------------------------
  3543                                  ;
  3544                                  ;       Determine if the free memory block can be split.
  3545                                  ;
  3546                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3547                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3548                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3549                                                          jb      .150                                            ;no, branch
  3550                                  ;
  3551                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3552                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3553                                  ;       of the requested memory size.
  3554                                  ;
  3555                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3556                                                          mov     edx,eax                                         ;memory block address
  3557                                                          add     edx,ecx                                         ;address new new next contig block
  3558                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3559                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3560                                  ;
  3561                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3562                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3563                                  ;
  3564                                                          jecxz   .80                                             ;no next contig, branch
  3565                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3566                                                          jmp     .90                                             ;continue
  3567                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3568                                  ;
  3569                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3570                                  ;
  3571                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3572                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3573                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3574                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3575                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3576                                                          xor     ebx,ebx                                         ;zero register
  3577                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3578                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3579                                  ;
  3580                                  ;       Find the proper location in the free block chain for the new free block
  3581                                  ;
  3582                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3583                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3584                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3585                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3586                                                          jbe     .110                                            ;yes, branch
  3587                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3588                                                          jmp     .100                                            ;continue
  3589                                  ;
  3590                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3591                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3592                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3593                                  ;       block of hte next block, if there is one.
  3594                                  ;
  3595                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3596                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3597                                                          jecxz   .120                                            ;branch if no next block
  3598                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3599                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3600                                                          jmp     .130                                            ;continue
  3601                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3602                                  ;
  3603                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3604                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3605                                  ;       last user block pointers if necessary.
  3606                                  ;
  3607                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3608                                                          test    ebx,ebx                                         ;is there a previous block?
  3609                                                          jz      .140                                            ;no, branch
  3610                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3611                                                          jmp     .150                                            ;continue
  3612                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3613                                  ;
  3614                                  ;       Update the newly allocated block's owner and signature.
  3615                                  ;
  3616                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3617                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3618                                                          xor     edx,edx                                         ;zero register
  3619                                                          str     dx                                              ;load the task state register
  3620                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3621                                  ;
  3622                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3623                                  ;
  3624                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3625                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3626                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3627                                                          jb      .180                                            ;branch if block belongs to next task
  3628                                                          je      .170                                            ;branch if block belongs to this task
  3629                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3630                                                          jmp     .160                                            ;continue
  3631                                  ;
  3632                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3633                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3634                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3635                                  ;       place to insert the block.
  3636                                  ;
  3637                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3638                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3639                                                          jbe     .180                                            ;yes, branch
  3640                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3641                                                          test    ecx,ecx                                         ;end of chain?
  3642                                                          jz      .180                                            ;yes, branch
  3643                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3644                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3645                                                          je      .170                                            ;yes, continue search
  3646                                  ;
  3647                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3648                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3649                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3650                                  ;       do have a previous-block, we update that block's next-block pointer.
  3651                                  ;
  3652                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3653                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3654                                                          jecxz   .190                                            ;branch if no next-task block
  3655                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3656                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3657                                                          jmp     .200                                            ;continue
  3658                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3659                                  ;
  3660                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3661                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3662                                  ;       global first and/or last user-block pointers if necessary.
  3663                                  ;
  3664                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3665                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3666                                                          jz      .210                                            ;no, branch
  3667                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3668                                                          jmp     .220                                            ;continue
  3669                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3670                                  ;
  3671                                  ;       Restore registers and return to caller.
  3672                                  ;
  3673                                  .220                    pop     ds                                              ;restore non-volatie regs
  3674                                                          pop     esi                                             ;
  3675                                                          pop     ecx                                             ;
  3676                                                          pop     ebx                                             ;
  3677                                                          ret                                                     ;return
  3678                                  ;-----------------------------------------------------------------------------------------------------------------------
  3679                                  ;
  3680                                  ;       Routine:        FreeMemory
  3681                                  ;
  3682                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3683                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3684                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3685                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3686                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3687                                  ;
  3688                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3689                                  ;
  3690                                  ;       Out:            EAX     -1      invalid memory block
  3691                                  ;                               0       memory block freed
  3692                                  ;
  3693                                  ;-----------------------------------------------------------------------------------------------------------------------
  3694                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3695                                                          push    ecx                                             ;
  3696                                                          push    esi                                             ;
  3697                                                          push    edi                                             ;
  3698                                                          push    ds                                              ;
  3699                                                          push    es                                              ;
  3700                                  ;
  3701                                  ;       Address the root memory structure
  3702                                  ;
  3703                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3704                                                          pop     es                                              ;... into extra segment reg
  3705                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3706                                                          pop     ds                                              ;... into data segment reg
  3707                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3708                                                          mov     edi,edx                                         ;memory block address
  3709                                  ;
  3710                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3711                                  ;
  3712                                                          xor     eax,eax                                         ;indicate success
  3713                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3714                                                          je      .240                                            ;yes, branch
  3715                                                          dec     eax                                             ;indicate failure
  3716                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3717                                                          jne     .240                                            ;no, branch
  3718                                  ;-----------------------------------------------------------------------------------------------------------------------
  3719                                  ;
  3720                                  ;       Unlink the USER memory block.
  3721                                  ;
  3722                                  ;-----------------------------------------------------------------------------------------------------------------------
  3723                                  ;
  3724                                  ;       Set the block signature. Reset owner.
  3725                                  ;
  3726                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3727                                                          xor     eax,eax                                         ;zero register
  3728                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3729                                  ;
  3730                                  ;       Wipe user area.
  3731                                  ;
  3732                                                          push    edi                                             ;save block address
  3733                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3734                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3735                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3736                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3737                                                          rep     stosb                                           ;clear memory
  3738                                                          pop     edi                                             ;restore block address
  3739                                  ;
  3740                                  ;       Address the preceding and following USER memory blocks
  3741                                  ;
  3742                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3743                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3744                                  ;
  3745                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3746                                  ;       pointer to point to the USER block following this block.
  3747                                  ;
  3748                                                          test    ebx,ebx                                         ;is there a previous block?
  3749                                                          jz      .10                                             ;no, branch
  3750                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3751                                                          jmp     .20                                             ;continue
  3752                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3753                                  ;
  3754                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3755                                  ;       pointer to point to the USER block preceding this block.
  3756                                  ;
  3757                                  .20                     jecxz   .30                                             ;branch if no next block
  3758                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3759                                                          jmp     .40                                             ;continue
  3760                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3761                                  ;-----------------------------------------------------------------------------------------------------------------------
  3762                                  ;
  3763                                  ;       Merge with a previous contiguous FREE memory block.
  3764                                  ;
  3765                                  ;-----------------------------------------------------------------------------------------------------------------------
  3766                                  ;
  3767                                  ;       Address the preceding and following contiguous memory blocks.
  3768                                  ;
  3769                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3770                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3771                                  ;
  3772                                  ;       Verify we have a previous contiguous FREE block.
  3773                                  ;
  3774                                                          test    ebx,ebx                                         ;is there a previous block?
  3775                                                          jz      .100                                            ;no, branch
  3776                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3777                                                          jne     .100                                            ;no, branch
  3778                                  ;
  3779                                  ;       Update adjacent block's contiguous pointers.
  3780                                  ;
  3781                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3782                                                          jecxz   .50                                             ;branch if no next contiguous block
  3783                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3784                                                          jmp     .60                                             ;continue
  3785                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3786                                  ;
  3787                                  ;       Update the size of the merged FREE block.
  3788                                  ;
  3789                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3790                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3791                                  ;
  3792                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3793                                  ;
  3794                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3795                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3796                                                          rep     stosb                                           ;clear memory header
  3797                                                          mov     edi,ebx                                         ;current block is now previous block
  3798                                  ;-----------------------------------------------------------------------------------------------------------------------
  3799                                  ;
  3800                                  ;       Unlink the previous contiguous FREE memory block
  3801                                  ;
  3802                                  ;-----------------------------------------------------------------------------------------------------------------------
  3803                                  ;
  3804                                  ;       Address the preceding and following USER memory blocks
  3805                                  ;
  3806                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3807                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3808                                  ;
  3809                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3810                                  ;       block pointer.
  3811                                  ;
  3812                                                          test    ebx,ebx                                         ;is there a previous block?
  3813                                                          jz      .70                                             ;no, branch
  3814                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3815                                                          jmp     .80                                             ;branch
  3816                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3817                                  ;
  3818                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3819                                  ;       pointer.
  3820                                  ;
  3821                                  .80                     jecxz   .90                                             ;branch if no next block
  3822                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3823                                                          jmp     .100                                            ;continue
  3824                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3825                                  ;-----------------------------------------------------------------------------------------------------------------------
  3826                                  ;
  3827                                  ;       Merge with a following contiguous FREE memory block.
  3828                                  ;
  3829                                  ;-----------------------------------------------------------------------------------------------------------------------
  3830                                  ;
  3831                                  ;       Verify we have a following contiguous FREE block.
  3832                                  ;
  3833                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3834                                                          jecxz   .170                                            ;branch if no next contiguous block
  3835                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3836                                                          jne     .170                                            ;no, branch
  3837                                  ;
  3838                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3839                                  ;
  3840                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3841                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3842                                  ;
  3843                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3844                                  ;
  3845                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3846                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3847                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3848                                                          jz      .110                                            ;no, branch
  3849                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3850                                                          jmp     .120                                            ;continue
  3851                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3852                                  ;-----------------------------------------------------------------------------------------------------------------------
  3853                                  ;
  3854                                  ;       Unlink the following contiguous FREE memory block
  3855                                  ;
  3856                                  ;-----------------------------------------------------------------------------------------------------------------------
  3857                                  ;
  3858                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3859                                  ;
  3860                                  .120                    push    edi                                             ;save this block
  3861                                                          mov     edi,ecx                                         ;next contiguous block
  3862                                                          push    ecx                                             ;save next contiguous block
  3863                                  ;
  3864                                  ;       Address the preceding and following USER memory blocks
  3865                                  ;
  3866                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3867                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3868                                  ;
  3869                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3870                                  ;       block pointer.
  3871                                  ;
  3872                                                          test    ebx,ebx                                         ;is there a previous block?
  3873                                                          jz      .130                                            ;no, branch
  3874                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3875                                                          jmp     .140                                            ;branch
  3876                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3877                                  ;
  3878                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3879                                  ;       pointer.
  3880                                  ;
  3881                                  .140                    jecxz   .150                                            ;branch if no next block
  3882                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3883                                                          jmp     .160                                            ;continue
  3884                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3885                                  ;
  3886                                  ;       Clear next contiguous block's header
  3887                                  ;
  3888                                  .160                    pop     edi                                             ;next congiguous block pointer
  3889                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3890                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3891                                                          rep     stosb                                           ;clear memory header
  3892                                                          pop     edi                                             ;this block's pointer
  3893                                  ;-----------------------------------------------------------------------------------------------------------------------
  3894                                  ;
  3895                                  ;       Insert the final FREE block back into the block chain.
  3896                                  ;
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898                                  ;
  3899                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3900                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3901                                  ;       all are smaller in size.
  3902                                  ;
  3903                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3904                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3905                                  .180                    jecxz   .190                                            ;exit if no ptr
  3906                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3907                                                          jb      .190                                            ;yes, branch
  3908                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3909                                                          jmp     .180                                            ;continue
  3910                                  ;
  3911                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3912                                  ;       larger free block. Update the next block's previous block pointer.
  3913                                  ;
  3914                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3915                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3916                                                          jecxz   .200                                            ;branch if no block found
  3917                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3918                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3919                                                          jmp     .210                                            ;continue
  3920                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3921                                  ;
  3922                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3923                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3924                                  ;       next pointer.
  3925                                  ;
  3926                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3927                                                          test    ebx,ebx                                         ;do we have a previous block?
  3928                                                          jz      .220                                            ;no, branch
  3929                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3930                                                          jmp     .230                                            ;continue
  3931                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3932                                  ;
  3933                                  ;       The memory free has completed.
  3934                                  ;
  3935                                  .230                    xor     eax,eax                                         ;indicate success
  3936                                  ;
  3937                                  ;       Restore and return.
  3938                                  ;
  3939                                  .240                    pop     es                                              ;restore non-volatile regs
  3940                                                          pop     ds                                              ;
  3941                                                          pop     edi                                             ;
  3942                                                          pop     esi                                             ;
  3943                                                          pop     ecx                                             ;
  3944                                                          pop     ebx                                             ;
  3945                                                          ret                                                     ;return
  3946                                  ;=======================================================================================================================
  3947                                  ;
  3948                                  ;       String Helper Routines
  3949                                  ;
  3950                                  ;       CompareMemory
  3951                                  ;       UpperCaseString
  3952                                  ;
  3953                                  ;=======================================================================================================================
  3954                                  ;-----------------------------------------------------------------------------------------------------------------------
  3955                                  ;
  3956                                  ;       Routine:        CompareMemory
  3957                                  ;
  3958                                  ;       Description:    This routine compares two byte arrays.
  3959                                  ;
  3960                                  ;       In:             DS:EDX  first source address
  3961                                  ;                       DS:EBX  second source address
  3962                                  ;                       ECX     comparison length
  3963                                  ;
  3964                                  ;       Out:            EDX     first source address
  3965                                  ;                       EBX     second source address
  3966                                  ;                       ECX     0       array 1 = array 2
  3967                                  ;                               <0      array 1 < array 2
  3968                                  ;                               >0      array 1 > array 2
  3969                                  ;
  3970                                  ;-----------------------------------------------------------------------------------------------------------------------
  3971                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3972                                                          push    edi                                             ;
  3973                                                          push    es                                              ;
  3974                                                          push    ds                                              ;copy DS
  3975                                                          pop     es                                              ;... to ES
  3976                                                          mov     esi,edx                                         ;first source address
  3977                                                          mov     edi,ebx                                         ;second source address
  3978                                                          cld                                                     ;forward strings
  3979                                                          rep     cmpsb                                           ;compare bytes
  3980                                                          mov     al,0                                            ;default result
  3981                                                          jz      .10                                             ;branch if arrays equal
  3982                                                          mov     al,1                                            ;positive result
  3983                                                          jnc     .10                                             ;branch if target > source
  3984                                                          mov     al,-1                                           ;negative result
  3985                                  .10                     movsx   ecx,al                                          ;extend sign
  3986                                                          pop     es                                              ;restore non-volatile regs
  3987                                                          pop     edi                                             ;
  3988                                                          pop     esi                                             ;
  3989                                                          ret                                                     ;return
  3990                                  ;-----------------------------------------------------------------------------------------------------------------------
  3991                                  ;
  3992                                  ;       Routine:        UpperCaseString
  3993                                  ;
  3994                                  ;       Description:    This routine places all characters in the given string to upper case.
  3995                                  ;
  3996                                  ;       In:             DS:EDX  string address
  3997                                  ;
  3998                                  ;       Out:            EDX     string address
  3999                                  ;
  4000                                  ;-----------------------------------------------------------------------------------------------------------------------
  4001                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4002                                                          mov     esi,edx                                         ;string address
  4003                                                          cld                                                     ;forward strings
  4004                                  .10                     lodsb                                                   ;string character
  4005                                                          test    al,al                                           ;null?
  4006                                                          jz      .20                                             ;yes, skip ahead
  4007                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4008                                                          jb      .10                                             ;no, continue
  4009                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4010                                                          ja      .10                                             ;no, continue
  4011                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4012                                                          mov     [esi-1],al                                      ;upper character
  4013                                                          jmp     .10                                             ;continue
  4014                                  .20                     pop     esi                                             ;restore non-volatile regs
  4015                                                          ret                                                     ;return
  4016                                  ;=======================================================================================================================
  4017                                  ;
  4018                                  ;       Console Helper Routines
  4019                                  ;
  4020                                  ;       FirstConsoleColumn
  4021                                  ;       GetConsoleChar
  4022                                  ;       GetConsoleString
  4023                                  ;       NextConsoleColumn
  4024                                  ;       NextConsoleRow
  4025                                  ;       PreviousConsoleColumn
  4026                                  ;       PutConsoleChar
  4027                                  ;       PutConsoleHexByte
  4028                                  ;       PutConsoleHexDword
  4029                                  ;       PutConsoleHexWord
  4030                                  ;       PutConsoleOIAChar
  4031                                  ;       PutConsoleOIAShift
  4032                                  ;       PutConsoleString
  4033                                  ;       Yield
  4034                                  ;
  4035                                  ;=======================================================================================================================
  4036                                  ;-----------------------------------------------------------------------------------------------------------------------
  4037                                  ;
  4038                                  ;       Routine:        FirstConsoleColumn
  4039                                  ;
  4040                                  ;       Description:    This routine resets the console column to start of the row.
  4041                                  ;
  4042                                  ;       In:             DS      OS data selector
  4043                                  ;
  4044                                  ;-----------------------------------------------------------------------------------------------------------------------
  4045                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4046                                                          mov     [wbConsoleColumn],al                            ;save column
  4047                                                          ret                                                     ;return
  4048                                  ;-----------------------------------------------------------------------------------------------------------------------
  4049                                  ;
  4050                                  ;       Routine:        GetConsoleChar
  4051                                  ;
  4052                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4053                                  ;
  4054                                  ;       Out:            AL      ASCII character code
  4055                                  ;                       AH      keyboard scan code
  4056                                  ;
  4057                                  ;-----------------------------------------------------------------------------------------------------------------------
  4058                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4059                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4060                                                          or      eax,eax                                         ;do we have a message?
  4061                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4062                                                          push    eax                                             ;save key codes
  4063                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4064                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4065                                                          pop     eax                                             ;restore key codes
  4066                                                          jne     GetConsoleChar                                  ;no, try again
  4067                                                          and     eax,0000ffffh                                   ;mask for key codes
  4068                                                          ret                                                     ;return
  4069                                  ;-----------------------------------------------------------------------------------------------------------------------
  4070                                  ;
  4071                                  ;       Routine:        GetConsoleString
  4072                                  ;
  4073                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4074                                  ;
  4075                                  ;       In:             DS:EDX  target buffer address
  4076                                  ;                       ECX     maximum number of characters to accept
  4077                                  ;                       BH      echo to terminal
  4078                                  ;                       BL      terminating character
  4079                                  ;
  4080                                  ;-----------------------------------------------------------------------------------------------------------------------
  4081                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4082                                                          push    esi                                             ;
  4083                                                          push    edi                                             ;
  4084                                                          push    es                                              ;
  4085                                                          push    ds                                              ;load data segment selector ...
  4086                                                          pop     es                                              ;... into extra segment register
  4087                                                          mov     edi,edx                                         ;edi = target buffer
  4088                                                          push    ecx                                             ;save maximum characters
  4089                                                          xor     al,al                                           ;zero register
  4090                                                          cld                                                     ;forward strings
  4091                                                          rep     stosb                                           ;zero fill buffer
  4092                                                          pop     ecx                                             ;maximum characters
  4093                                                          mov     edi,edx                                         ;edi = target buffer
  4094                                                          mov     esi,edx                                         ;esi = target buffer
  4095                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4096                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4097                                                          cmp     al,bl                                           ;is this the terminator?
  4098                                                          je      .50                                             ;yes, exit
  4099                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4100                                                          jne     .30                                             ;no, skip ahead
  4101                                                          cmp     esi,edi                                         ;at start of buffer?
  4102                                                          je      .20                                             ;yes, get next character
  4103                                                          dec     edi                                             ;backup target pointer
  4104                                                          mov     byte [edi],0                                    ;zero previous character
  4105                                                          inc     ecx                                             ;increment remaining chars
  4106                                                          test    bh,1                                            ;echo to console?
  4107                                                          jz      .20                                             ;no, get next character
  4108                                                          call    PreviousConsoleColumn                           ;backup console position
  4109                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4110                                                          call    PutConsoleChar                                  ;write space to console
  4111                                                          call    PlaceCursor                                     ;position the cursor
  4112                                                          jmp     .20                                             ;get next character
  4113                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4114                                                          jb      .20                                             ;no, get another character
  4115                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4116                                                          ja      .20                                             ;no, get another character
  4117                                                          stosb                                                   ;store character in buffer
  4118                                                          test    bh,1                                            ;echo to console?
  4119                                                          jz      .40                                             ;no, skip ahead
  4120                                                          call    PutConsoleChar                                  ;write character to console
  4121                                                          call    NextConsoleColumn                               ;advance console position
  4122                                                          call    PlaceCursor                                     ;position the cursor
  4123                                  .40                     dec     ecx                                             ;decrement remaining chars
  4124                                                          jmp     .10                                             ;next
  4125                                  .50                     xor     al,al                                           ;null
  4126                                                          stosb                                                   ;terminate buffer
  4127                                                          pop     es                                              ;restore non-volatile regs
  4128                                                          pop     edi                                             ;
  4129                                                          pop     esi                                             ;
  4130                                                          pop     ecx                                             ;
  4131                                                          ret                                                     ;return
  4132                                  ;-----------------------------------------------------------------------------------------------------------------------
  4133                                  ;
  4134                                  ;       Routine:        NextConsoleColumn
  4135                                  ;
  4136                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4137                                  ;                       incremented if the end of the current row is reached.
  4138                                  ;
  4139                                  ;       In:             DS      OS data selector
  4140                                  ;
  4141                                  ;-----------------------------------------------------------------------------------------------------------------------
  4142                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4143                                                          inc     al                                              ;increment column
  4144                                                          mov     [wbConsoleColumn],al                            ;save column
  4145                                                          cmp     al,ECONCOLS                                     ;end of row?
  4146                                                          jb      .10                                             ;no, skip ahead
  4147                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4148                                                          call    NextConsoleRow                                  ;line feed to next row
  4149                                  .10                     ret                                                     ;return
  4150                                  ;-----------------------------------------------------------------------------------------------------------------------
  4151                                  ;
  4152                                  ;       Routine:        NextConsoleRow
  4153                                  ;
  4154                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4155                                  ;
  4156                                  ;       In:             DS      OS data selector
  4157                                  ;
  4158                                  ;-----------------------------------------------------------------------------------------------------------------------
  4159                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4160                                                          inc     al                                              ;increment row
  4161                                                          mov     [wbConsoleRow],al                               ;save row
  4162                                                          cmp     al,ECONROWS                                     ;end of screen?
  4163                                                          jb      .10                                             ;no, skip ahead
  4164                                                          call    ScrollConsoleRow                                ;scroll up one row
  4165                                                          mov     al,[wbConsoleRow]                               ;row
  4166                                                          dec     al                                              ;decrement row
  4167                                                          mov     [wbConsoleRow],al                               ;save row
  4168                                  .10                     ret                                                     ;return
  4169                                  ;-----------------------------------------------------------------------------------------------------------------------
  4170                                  ;
  4171                                  ;       Routine:        PreviousConsoleColumn
  4172                                  ;
  4173                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4174                                  ;                       the column is set to the last position in the row and the row is decremented.
  4175                                  ;
  4176                                  ;       In:             DS      OS data selector
  4177                                  ;
  4178                                  ;-----------------------------------------------------------------------------------------------------------------------
  4179                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4180                                                          or      al,al                                           ;start of row?
  4181                                                          jnz     .10                                             ;no, skip ahead
  4182                                                          mov     ah,[wbConsoleRow]                               ;current row
  4183                                                          or      ah,ah                                           ;top of screen?
  4184                                                          jz      .20                                             ;yes, exit with no change
  4185                                                          dec     ah                                              ;decrement row
  4186                                                          mov     [wbConsoleRow],ah                               ;save row
  4187                                                          mov     al,ECONCOLS                                     ;set maximum column
  4188                                  .10                     dec     al                                              ;decrement column
  4189                                                          mov     [wbConsoleColumn],al                            ;save column
  4190                                  .20                     ret                                                     ;return
  4191                                  ;-----------------------------------------------------------------------------------------------------------------------
  4192                                  ;
  4193                                  ;       Routine:        PutConsoleChar
  4194                                  ;
  4195                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4196                                  ;
  4197                                  ;       In:             AL      ASCII character
  4198                                  ;                       DS      OS data selector
  4199                                  ;
  4200                                  ;-----------------------------------------------------------------------------------------------------------------------
  4201                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4202                                                          push    es                                              ;
  4203                                                          push    EGDTCGA                                         ;load CGA selector ...
  4204                                                          pop     es                                              ;... into extra segment reg
  4205                                                          mov     cl,[wbConsoleColumn]                            ;column
  4206                                                          mov     ch,[wbConsoleRow]                               ;row
  4207                                                          call    SetConsoleChar                                  ;put character at row, column
  4208                                                          pop     es                                              ;restore non-volatile regs
  4209                                                          pop     ecx                                             ;
  4210                                                          ret                                                     ;return
  4211                                  ;-----------------------------------------------------------------------------------------------------------------------
  4212                                  ;
  4213                                  ;       Routine:        PutConsoleHexByte
  4214                                  ;
  4215                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4216                                  ;
  4217                                  ;       In:             AL      byte value
  4218                                  ;                       CL      column
  4219                                  ;                       CH      row
  4220                                  ;                       DS      OS data selector
  4221                                  ;                       ES      CGA selector
  4222                                  ;
  4223                                  ;-----------------------------------------------------------------------------------------------------------------------
  4224                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4225                                                          mov     bl,al                                           ;save byte value
  4226                                                          shr     al,4                                            ;hi-order nybble
  4227                                                          or      al,030h                                         ;apply ASCII zone
  4228                                                          cmp     al,03ah                                         ;numeric?
  4229                                                          jb      .10                                             ;yes, skip ahead
  4230                                                          add     al,7                                            ;add ASCII offset for alpha
  4231                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4232                                                          mov     al,bl                                           ;byte value
  4233                                                          and     al,0fh                                          ;lo-order nybble
  4234                                                          or      al,30h                                          ;apply ASCII zone
  4235                                                          cmp     al,03ah                                         ;numeric?
  4236                                                          jb      .20                                             ;yes, skip ahead
  4237                                                          add     al,7                                            ;add ASCII offset for alpha
  4238                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4239                                                          pop     ebx                                             ;restore non-volatile regs
  4240                                                          ret                                                     ;return
  4241                                  ;-----------------------------------------------------------------------------------------------------------------------
  4242                                  ;
  4243                                  ;       Routine:        PutConsoleHexDword
  4244                                  ;
  4245                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4246                                  ;
  4247                                  ;       In:             EAX     value
  4248                                  ;                       CL      column
  4249                                  ;                       CH      row
  4250                                  ;                       DS      OS data selector
  4251                                  ;                       ES      CGA selector
  4252                                  ;
  4253                                  ;-----------------------------------------------------------------------------------------------------------------------
  4254                                  PutConsoleHexDword      push    eax
  4255                                                          shr     eax,16
  4256                                                          call    PutConsoleHexWord
  4257                                                          pop     eax
  4258                                                          call    PutConsoleHexWord
  4259                                                          ret
  4260                                  ;-----------------------------------------------------------------------------------------------------------------------
  4261                                  ;
  4262                                  ;       Routine:        PutConsoleHexWord
  4263                                  ;
  4264                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4265                                  ;
  4266                                  ;       In:             EAX     value
  4267                                  ;                       CL      column
  4268                                  ;                       CH      row
  4269                                  ;                       DS      OS data selector
  4270                                  ;                       ES      CGA selector
  4271                                  ;
  4272                                  ;-----------------------------------------------------------------------------------------------------------------------
  4273                                  PutConsoleHexWord       push    eax
  4274                                                          shr     eax,8
  4275                                                          call    PutConsoleHexByte
  4276                                                          pop     eax
  4277                                                          call    PutConsoleHexByte
  4278                                                          ret
  4279                                  ;-----------------------------------------------------------------------------------------------------------------------
  4280                                  ;
  4281                                  ;       Routine:        PutConsoleOIAChar
  4282                                  ;
  4283                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4284                                  ;
  4285                                  ;       In:             DS      OS data selector
  4286                                  ;
  4287                                  ;-----------------------------------------------------------------------------------------------------------------------
  4288                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4289                                                          push    ecx                                             ;
  4290                                                          push    esi                                             ;
  4291                                                          push    ds                                              ;
  4292                                                          push    es                                              ;
  4293                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4294                                                          pop     ds                                              ;... into data segment register
  4295                                                          push    EGDTCGA                                         ;load CGA selector ...
  4296                                                          pop     es                                              ;... into extra segment register
  4297                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4298                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4299                                                          mov     bl,0                                            ;starting column
  4300                                                          mov     ecx,6                                           ;maximum scan codes
  4301                                  .10                     push    ecx                                             ;save remaining count
  4302                                                          mov     ecx,ebx                                         ;row, column
  4303                                                          lodsb                                                   ;read scan code
  4304                                                          or      al,al                                           ;scan code present?
  4305                                                          jz      .20                                             ;no, skip ahead
  4306                                                          call    PutConsoleHexByte                               ;display scan code
  4307                                                          jmp     .30                                             ;continue
  4308                                  .20                     mov     al,' '                                          ;ASCII space
  4309                                                          call    SetConsoleChar                                  ;display space
  4310                                                          mov     al,' '                                          ;ASCII space
  4311                                                          call    SetConsoleChar                                  ;display space
  4312                                  .30                     add     bl,2                                            ;next column (+2)
  4313                                                          pop     ecx                                             ;restore remaining
  4314                                                          loop    .10                                             ;next code
  4315                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4316                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4317                                                          jb      .40                                             ;no, skip ahead
  4318                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4319                                                          ja      .40                                             ;no, skip ahead
  4320                                                          mov     ch,bh                                           ;OIA row
  4321                                                          mov     cl,40                                           ;character display column
  4322                                                          call    SetConsoleChar                                  ;display ASCII character
  4323                                  .40                     pop     es                                              ;restore non-volatile regs
  4324                                                          pop     ds                                              ;
  4325                                                          pop     esi                                             ;
  4326                                                          pop     ecx                                             ;
  4327                                                          pop     ebx                                             ;
  4328                                                          ret                                                     ;return
  4329                                  ;-----------------------------------------------------------------------------------------------------------------------
  4330                                  ;
  4331                                  ;       Routine:        PutConsoleOIAShift
  4332                                  ;
  4333                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4334                                  ;
  4335                                  ;       In:             BL      shift flags
  4336                                  ;                       BH      lock flags
  4337                                  ;                       DS      OS data selector
  4338                                  ;
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4341                                                          push    es                                              ;
  4342                                                          push    EGDTCGA                                         ;load CGA selector ...
  4343                                                          pop     es                                              ;... into ES register
  4344                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4345                                                          mov     al,EASCIISPACE                                  ;space is default character
  4346                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4347                                                          jz      .10                                             ;no, skip ahead
  4348                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4349                                  .10                     mov     cl,14                                           ;indicator column
  4350                                                          call    SetConsoleChar                                  ;display ASCII character
  4351                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4352                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4353                                                          jz      .20                                             ;no, skip ahead
  4354                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4355                                  .20                     mov     cl,64                                           ;indicator column
  4356                                                          call    SetConsoleChar                                  ;display ASCII character
  4357                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4358                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4359                                                          jz      .30                                             ;no, skip ahead
  4360                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4361                                  .30                     mov     cl,15                                           ;indicator column
  4362                                                          call    SetConsoleChar                                  ;display ASCII character
  4363                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4364                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4365                                                          jz      .40                                             ;no, skip ahead
  4366                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4367                                  .40                     mov     cl,63                                           ;indicator column
  4368                                                          call    SetConsoleChar                                  ;display ASCII character
  4369                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4370                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4371                                                          jz      .50                                             ;no, skip ahead
  4372                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4373                                  .50                     mov     cl,16                                           ;indicator column
  4374                                                          call    SetConsoleChar                                  ;display ASCII character
  4375                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4376                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4377                                                          jz      .60                                             ;no, skip ahead
  4378                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4379                                  .60                     mov     cl,62                                           ;indicator column
  4380                                                          call    SetConsoleChar                                  ;display ASCII character
  4381                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4382                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4383                                                          jz      .70                                             ;no, skip ahead
  4384                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4385                                  .70                     mov     cl,78                                           ;indicator column
  4386                                                          call    SetConsoleChar                                  ;display ASCII character
  4387                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4388                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4389                                                          jz      .80                                             ;no, skip ahead
  4390                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4391                                  .80                     mov     cl,77                                           ;indicator column
  4392                                                          call    SetConsoleChar                                  ;display ASCII character
  4393                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4394                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4395                                                          jz      .90                                             ;no, skip ahead
  4396                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4397                                  .90                     mov     cl,76                                           ;indicator column
  4398                                                          call    SetConsoleChar                                  ;display ASCII character
  4399                                                          pop     es                                              ;restore non-volatile regs
  4400                                                          pop     ecx                                             ;
  4401                                                          ret                                                     ;return
  4402                                  ;-----------------------------------------------------------------------------------------------------------------------
  4403                                  ;
  4404                                  ;       Routine:        PutConsoleString
  4405                                  ;
  4406                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4407                                  ;                       console position as needed.
  4408                                  ;
  4409                                  ;       In:             EDX     source address
  4410                                  ;                       DS      OS data selector
  4411                                  ;
  4412                                  ;-----------------------------------------------------------------------------------------------------------------------
  4413                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4414                                                          mov     esi,edx                                         ;source address
  4415                                                          cld                                                     ;forward strings
  4416                                  .10                     lodsb                                                   ;ASCII character
  4417                                                          or      al,al                                           ;end of string?
  4418                                                          jz      .40                                             ;yes, skip ahead
  4419                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4420                                                          jne     .20                                             ;no, skip ahead
  4421                                                          call    FirstConsoleColumn                              ;move to start of row
  4422                                                          jmp     .10                                             ;next character
  4423                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4424                                                          jne     .30                                             ;no, skip ahead
  4425                                                          call    NextConsoleRow                                  ;move to next row
  4426                                                          jmp     .10                                             ;next character
  4427                                  .30                     call    PutConsoleChar                                  ;output character to console
  4428                                                          call    NextConsoleColumn                               ;advance to next column
  4429                                                          jmp     .10                                             ;next character
  4430                                  .40                     pop     esi                                             ;restore non-volatile regs
  4431                                                          ret                                                     ;return
  4432                                  ;-----------------------------------------------------------------------------------------------------------------------
  4433                                  ;
  4434                                  ;       Routine:        Yield
  4435                                  ;
  4436                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4437                                  ;
  4438                                  ;-----------------------------------------------------------------------------------------------------------------------
  4439                                  Yield                   sti                                                     ;enable maskagle interrupts
  4440                                                          hlt                                                     ;halt until external interrupt
  4441                                                          ret                                                     ;return
  4442                                  ;=======================================================================================================================
  4443                                  ;
  4444                                  ;       Data-Type Conversion Helper Routines
  4445                                  ;
  4446                                  ;       DecimalToUnsigned
  4447                                  ;       HexadecimalToUnsigned
  4448                                  ;       UnsignedToDecimalString
  4449                                  ;       UnsignedToHexadecimal
  4450                                  ;
  4451                                  ;=======================================================================================================================
  4452                                  ;-----------------------------------------------------------------------------------------------------------------------
  4453                                  ;
  4454                                  ;       Routine:        DecimalToUnsigned
  4455                                  ;
  4456                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4457                                  ;
  4458                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4459                                  ;
  4460                                  ;       Output:         EAX     unsigned integer value
  4461                                  ;
  4462                                  ;-----------------------------------------------------------------------------------------------------------------------
  4463                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4464                                                          mov     esi,edx                                         ;source address
  4465                                                          xor     edx,edx                                         ;zero total
  4466                                  .10                     lodsb                                                   ;source byte
  4467                                                          cmp     al,','                                          ;comma?
  4468                                                          je      .10                                             ;yes, ignore
  4469                                                          test    al,al                                           ;end of string?
  4470                                                          jz      .30                                             ;yes, done
  4471                                                          cmp     al,'.'                                          ;decimal point?
  4472                                                          je      .30                                             ;yes, done
  4473                                                          cmp     al,'0'                                          ;numeral?
  4474                                                          jb      .20                                             ;no, invalid string
  4475                                                          cmp     al,'9'                                          ;numeral?
  4476                                                          ja      .20                                             ;no, invalid string
  4477                                                          and     al,00Fh                                         ;mask ASCII zone
  4478                                                          push    eax                                             ;save numeral
  4479                                                          shl     edx,1                                           ;total * 2
  4480                                                          mov     eax,edx                                         ;total * 2
  4481                                                          shl     edx,2                                           ;total * 8
  4482                                                          add     edx,eax                                         ;total * 10
  4483                                                          pop     eax                                             ;restore numeral
  4484                                                          add     edx,eax                                         ;accumulate decimal digit
  4485                                                          xor     eax,eax                                         ;zero register
  4486                                                          jmp     .10                                             ;next
  4487                                  .20                     xor     edx,edx                                         ;zero result on error
  4488                                  .30                     mov     eax,edx                                         ;result
  4489                                                          pop     esi                                             ;restore non-volatile regs
  4490                                                          ret                                                     ;return
  4491                                  ;-----------------------------------------------------------------------------------------------------------------------
  4492                                  ;
  4493                                  ;       Routine:        HexadecimalToUnsigned
  4494                                  ;
  4495                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4496                                  ;
  4497                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4498                                  ;
  4499                                  ;       Output:         EAX     unsigned integer value
  4500                                  ;
  4501                                  ;-----------------------------------------------------------------------------------------------------------------------
  4502                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4503                                                          mov     esi,edx                                         ;source address
  4504                                                          xor     edx,edx                                         ;zero register
  4505                                  .10                     lodsb                                                   ;source byte
  4506                                                          test    al,al                                           ;end of string?
  4507                                                          jz      .30                                             ;yes, branch
  4508                                                          cmp     al,'9'                                          ;hexadecimal?
  4509                                                          jna     .20                                             ;no, skip ahead
  4510                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4511                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4512                                                          shl     edx,4                                           ;previous total x 16
  4513                                                          add     edx,eax                                         ;add prior value x 16
  4514                                                          jmp     .10                                             ;next
  4515                                  .30                     mov     eax,edx                                         ;result
  4516                                                          pop     esi                                             ;restore non-volatile regs
  4517                                                          ret                                                     ;return
  4518                                  ;-----------------------------------------------------------------------------------------------------------------------
  4519                                  ;
  4520                                  ;       Routine:        UnsignedToDecimalString
  4521                                  ;
  4522                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4523                                  ;
  4524                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4525                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4526                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4527                                  ;                       ECX     32-bit binary
  4528                                  ;                       DS:EDX  output buffer address
  4529                                  ;
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4532                                                          push    ecx                                             ;
  4533                                                          push    edi                                             ;
  4534                                                          push    es                                              ;
  4535                                                          push    ds                                              ;load data selector
  4536                                                          pop     es                                              ;... into extra segment reg
  4537                                                          mov     edi,edx                                         ;output buffer address
  4538                                                          and     bh,00001111b                                    ;zero internal flags
  4539                                                          mov     edx,ecx                                         ;binary
  4540                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4541                                                          call    .30                                             ;divide and store
  4542                                                          mov     ecx,100000000                                   ;10^8 divisor
  4543                                                          call    .10                                             ;divide and store
  4544                                                          mov     ecx,10000000                                    ;10^7 divisor
  4545                                                          call    .30                                             ;divide and store
  4546                                                          mov     ecx,1000000                                     ;10^6 divisor
  4547                                                          call    .30                                             ;divide and store
  4548                                                          mov     ecx,100000                                      ;10^5 divisor
  4549                                                          call    .10                                             ;divide and store
  4550                                                          mov     ecx,10000                                       ;10^4 divisor
  4551                                                          call    .30                                             ;divide and store
  4552                                                          mov     ecx,1000                                        ;10^3 divisor
  4553                                                          call    .30                                             ;divide and store
  4554                                                          mov     ecx,100                                         ;10^2 divisor
  4555                                                          call    .10                                             ;divide and store
  4556                                                          mov     ecx,10                                          ;10^2 divisor
  4557                                                          call    .30                                             ;divide and store
  4558                                                          mov     eax,edx                                         ;10^1 remainder
  4559                                                          call    .40                                             ;store
  4560                                                          xor     al,al                                           ;null terminator
  4561                                                          stosb
  4562                                                          pop     es                                              ;restore non-volatile regs
  4563                                                          pop     edi                                             ;
  4564                                                          pop     ecx                                             ;
  4565                                                          pop     ebx                                             ;
  4566                                                          ret                                                     ;return
  4567                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4568                                                          jz      .30                                             ;no, branch
  4569                                                          test    bh,00000001b                                    ;trim leading zeros?
  4570                                                          jz      .20                                             ;no, store delim
  4571                                                          test    bh,00010000b                                    ;non-zero found?
  4572                                                          jz      .30                                             ;no, branch
  4573                                  .20                     mov     al,','                                          ;delimiter
  4574                                                          stosb                                                   ;store delimiter
  4575                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4576                                                          xor     edx,edx                                         ;zero hi-order
  4577                                                          div     ecx                                             ;divide by power of 10
  4578                                                          test    al,al                                           ;zero?
  4579                                                          jz      .50                                             ;yes, branch
  4580                                                          or      bh,00010000b                                    ;non-zero found
  4581                                  .40                     or      al,30h                                          ;ASCII zone
  4582                                                          stosb                                                   ;store digit
  4583                                                          ret                                                     ;return
  4584                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4585                                                          jz      .40                                             ;no, store and continue
  4586                                                          test    bh,00010000b                                    ;non-zero found?
  4587                                                          jnz     .40                                             ;yes, store and continue
  4588                                                          ret                                                     ;return
  4589                                  ;-----------------------------------------------------------------------------------------------------------------------
  4590                                  ;
  4591                                  ;       Routine:        UnsignedToHexadecimal
  4592                                  ;
  4593                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4594                                  ;
  4595                                  ;       Input:          DS:EDX  output buffer address
  4596                                  ;                       ECX     32-bit binary
  4597                                  ;
  4598                                  ;-----------------------------------------------------------------------------------------------------------------------
  4599                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4600                                                          mov     edi,edx                                         ;output buffer address
  4601                                                          mov     edx,ecx                                         ;32-bit unsigned
  4602                                                          xor     ecx,ecx                                         ;zero register
  4603                                                          mov     cl,8                                            ;nybble count
  4604                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4605                                                          mov     al,dl                                           ;????bbbb
  4606                                                          and     al,0fh                                          ;mask out bits 4-7
  4607                                                          or      al,30h                                          ;mask in ascii zone
  4608                                                          cmp     al,3ah                                          ;A through F?
  4609                                                          jb      .20                                             ;no, skip ahead
  4610                                                          add     al,7                                            ;41h through 46h
  4611                                  .20                     stosb                                                   ;store hexnum
  4612                                                          loop    .10                                             ;next nybble
  4613                                                          xor     al,al                                           ;zero reg
  4614                                                          stosb                                                   ;null terminate
  4615                                                          pop     edi                                             ;restore non-volatile regs
  4616                                                          ret                                                     ;return
  4617                                  ;=======================================================================================================================
  4618                                  ;
  4619                                  ;       Message Queue Helper Routines
  4620                                  ;
  4621                                  ;       GetMessage
  4622                                  ;       PutMessage
  4623                                  ;
  4624                                  ;=======================================================================================================================
  4625                                  ;-----------------------------------------------------------------------------------------------------------------------
  4626                                  ;
  4627                                  ;       Routine:        GetMessage
  4628                                  ;
  4629                                  ;       Description:    This routine reads and removes a message from the message queue.
  4630                                  ;
  4631                                  ;       Out:            EAX     lo-order message data
  4632                                  ;                       EDX     hi-order message data
  4633                                  ;
  4634                                  ;                       CY      0 = message read
  4635                                  ;                               1 = no message to read
  4636                                  ;
  4637                                  ;-----------------------------------------------------------------------------------------------------------------------
  4638                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4639                                                          push    ecx                                             ;
  4640                                                          push    ds                                              ;
  4641                                                          push    ELDTMQ                                          ;load message queue selector ...
  4642                                                          pop     ds                                              ;... into data segment register
  4643                                                          mov     ebx,[MQHead]                                    ;head ptr
  4644                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4645                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4646                                                          or      eax,edx                                         ;is queue empty?
  4647                                                          stc                                                     ;assume queue is emtpy
  4648                                                          jz      .20                                             ;yes, skip ahead
  4649                                                          xor     ecx,ecx                                         ;store zero
  4650                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4651                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4652                                                          add     ebx,8                                           ;next queue element
  4653                                                          and     ebx,03fch                                       ;at end of queue?
  4654                                                          jnz     .10                                             ;no, skip ahead
  4655                                                          mov     bl,8                                            ;reset to 1st entry
  4656                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4657                                                          clc                                                     ;indicate message read
  4658                                  .20                     pop     ds                                              ;restore non-volatile regs
  4659                                                          pop     ecx                                             ;
  4660                                                          pop     ebx                                             ;
  4661                                                          ret                                                     ;return
  4662                                  ;-----------------------------------------------------------------------------------------------------------------------
  4663                                  ;
  4664                                  ;       Routine:        PutMessage
  4665                                  ;
  4666                                  ;       Description:    This routine adda a message to the message queue.
  4667                                  ;
  4668                                  ;       In:             ECX     hi-order data word
  4669                                  ;                       EDX     lo-order data word
  4670                                  ;
  4671                                  ;       Out:            CY      0 = success
  4672                                  ;                               1 = fail: queue is full
  4673                                  ;
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675                                  PutMessage              push    ds                                              ;save non-volatile regs
  4676                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4677                                                          pop     ds                                              ;... into data segment register
  4678                                                          mov     eax,[MQTail]                                    ;tail ptr
  4679                                                          cmp     dword [eax],0                                   ;is queue full?
  4680                                                          stc                                                     ;assume failure
  4681                                                          jne     .20                                             ;yes, cannot store
  4682                                                          mov     [eax],edx                                       ;store lo-order data
  4683                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4684                                                          add     eax,8                                           ;next queue element adr
  4685                                                          and     eax,03fch                                       ;at end of queue?
  4686                                                          jnz     .10                                             ;no, skip ahead
  4687                                                          mov     al,8                                            ;reset to top of queue
  4688                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4689                                                          clc                                                     ;indicate success
  4690                                  .20                     pop     ds                                              ;restore non-volatile regs
  4691                                                          ret                                                     ;return
  4692                                  ;=======================================================================================================================
  4693                                  ;
  4694                                  ;       Memory-Mapped Video Routines
  4695                                  ;
  4696                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4697                                  ;
  4698                                  ;       ClearConsoleScreen
  4699                                  ;       ScrollConsoleRow
  4700                                  ;       SetConsoleChar
  4701                                  ;       SetConsoleString
  4702                                  ;
  4703                                  ;=======================================================================================================================
  4704                                  ;-----------------------------------------------------------------------------------------------------------------------
  4705                                  ;
  4706                                  ;       Routine:        ClearConsoleScreen
  4707                                  ;
  4708                                  ;       Description:    This routine clears the console (CGA) screen.
  4709                                  ;
  4710                                  ;-----------------------------------------------------------------------------------------------------------------------
  4711                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4712                                                          push    edi                                             ;
  4713                                                          push    ds                                              ;
  4714                                                          push    es                                              ;
  4715                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4716                                                          pop     ds                                              ;... into DS register
  4717                                                          push    EGDTCGA                                         ;load CGA selector ...
  4718                                                          pop     es                                              ;... into ES register
  4719                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4720                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4721                                                          xor     edi,edi                                         ;target offset
  4722                                                          cld                                                     ;forward strings
  4723                                                          rep     stosd                                           ;reset screen body
  4724                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4725                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4726                                                          rep     stosd                                           ;reset OIA line
  4727                                                          xor     al,al                                           ;zero register
  4728                                                          mov     [wbConsoleRow],al                               ;reset console row
  4729                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4730                                                          call    PlaceCursor                                     ;place cursor at current position
  4731                                                          pop     es                                              ;restore non-volatile regs
  4732                                                          pop     ds                                              ;
  4733                                                          pop     edi                                             ;
  4734                                                          pop     ecx                                             ;
  4735                                                          ret                                                     ;return
  4736                                  ;-----------------------------------------------------------------------------------------------------------------------
  4737                                  ;
  4738                                  ;       Routine:        ScrollConsoleRow
  4739                                  ;
  4740                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4741                                  ;
  4742                                  ;-----------------------------------------------------------------------------------------------------------------------
  4743                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4744                                                          push    esi                                             ;
  4745                                                          push    edi                                             ;
  4746                                                          push    ds                                              ;
  4747                                                          push    es                                              ;
  4748                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4749                                                          pop     ds                                              ;... into DS
  4750                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4751                                                          pop     es                                              ;... into ES
  4752                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4753                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4754                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4755                                                          cld                                                     ;forward strings
  4756                                                          rep     movsd                                           ;move 24 lines up
  4757                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4758                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4759                                                          rep     stosd                                           ;clear bottom row
  4760                                                          pop     es                                              ;restore non-volatile regs
  4761                                                          pop     ds                                              ;
  4762                                                          pop     edi                                             ;
  4763                                                          pop     esi                                             ;
  4764                                                          pop     ecx                                             ;
  4765                                                          ret                                                     ;return
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ;
  4768                                  ;       Routine:        SetConsoleChar
  4769                                  ;
  4770                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4771                                  ;
  4772                                  ;       In:             AL      ASCII character
  4773                                  ;                       CL      column
  4774                                  ;                       CH      row
  4775                                  ;                       ES      CGA selector
  4776                                  ;
  4777                                  ;       Out:            EAX     last target address written (ES:)
  4778                                  ;                       CL      column + 1
  4779                                  ;
  4780                                  ;-----------------------------------------------------------------------------------------------------------------------
  4781                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4782                                                          movzx   eax,ch                                          ;row
  4783                                                          mov     ah,ECONCOLS                                     ;cols/row
  4784                                                          mul     ah                                              ;row * cols/row
  4785                                                          add     al,cl                                           ;add column
  4786                                                          adc     ah,0                                            ;handle carry
  4787                                                          shl     eax,1                                           ;screen offset
  4788                                                          mov     [es:eax],dl                                     ;store character
  4789                                                          inc     cl                                              ;next column
  4790                                                          ret                                                     ;return
  4791                                  ;-----------------------------------------------------------------------------------------------------------------------
  4792                                  ;
  4793                                  ;       Routine:        SetConsoleString
  4794                                  ;
  4795                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4796                                  ;
  4797                                  ;       In:             ESI     source offset (DS:)
  4798                                  ;                       CL      column
  4799                                  ;                       CH      row
  4800                                  ;                       ES      CGA selector
  4801                                  ;
  4802                                  ;-----------------------------------------------------------------------------------------------------------------------
  4803                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4804                                                          cld                                                     ;forward strings
  4805                                  .10                     lodsb                                                   ;next ASCII character
  4806                                                          test    al,al                                           ;end of string?
  4807                                                          jz      .20                                             ;yes, branch
  4808                                                          call    SetConsoleChar                                  ;store character
  4809                                                          jmp     .10                                             ;continue
  4810                                  .20                     pop     esi                                             ;restore non-volatile regs
  4811                                                          ret                                                     ;return
  4812                                  ;=======================================================================================================================
  4813                                  ;
  4814                                  ;       Input/Output Routines
  4815                                  ;
  4816                                  ;       These routines read and/or write directly to ports.
  4817                                  ;
  4818                                  ;       GetBaseMemSize
  4819                                  ;       GetExtendedMemSize
  4820                                  ;       GetROMMemSize
  4821                                  ;       PlaceCursor
  4822                                  ;       PutPrimaryEndOfInt
  4823                                  ;       PutSecondaryEndOfInt
  4824                                  ;       ReadRealTimeClock
  4825                                  ;       ResetSystem
  4826                                  ;       SetKeyboardLamps
  4827                                  ;       WaitForKeyInBuffer
  4828                                  ;       WaitForKeyOutBuffer
  4829                                  ;
  4830                                  ;=======================================================================================================================
  4831                                  ;-----------------------------------------------------------------------------------------------------------------------
  4832                                  ;
  4833                                  ;       Routine:        GetBaseMemSize
  4834                                  ;
  4835                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4836                                  ;
  4837                                  ;       Output:         EAX     base RAM size in bytes
  4838                                  ;
  4839                                  ;-----------------------------------------------------------------------------------------------------------------------
  4840                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4841                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4842                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4843                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4844                                                          mov     ah,al                                           ;save base RAM high
  4845                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4846                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4847                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4848                                                          ret                                                     ;return to caller
  4849                                  ;-----------------------------------------------------------------------------------------------------------------------
  4850                                  ;
  4851                                  ;       Routine:        GetExtendedMemSize
  4852                                  ;
  4853                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4854                                  ;
  4855                                  ;       Output:         EAX     extended RAM size in bytes
  4856                                  ;
  4857                                  ;-----------------------------------------------------------------------------------------------------------------------
  4858                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4859                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4860                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4861                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4862                                                          mov     ah,al                                           ;save extended RAM high
  4863                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4864                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4865                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4866                                                          ret                                                     ;return to caller
  4867                                  ;-----------------------------------------------------------------------------------------------------------------------
  4868                                  ;
  4869                                  ;       Routine:        GetROMMemSize
  4870                                  ;
  4871                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4872                                  ;
  4873                                  ;       Output:         EAX     RAM size in bytes
  4874                                  ;
  4875                                  ;-----------------------------------------------------------------------------------------------------------------------
  4876                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4877                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4878                                                          ret                                                     ;return
  4879                                  ;-----------------------------------------------------------------------------------------------------------------------
  4880                                  ;
  4881                                  ;       Routine:        PlaceCursor
  4882                                  ;
  4883                                  ;       Description:    This routine positions the cursor on the console.
  4884                                  ;
  4885                                  ;       In:             DS      OS data selector
  4886                                  ;
  4887                                  ;-----------------------------------------------------------------------------------------------------------------------
  4888                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4889                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4890                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4891                                                          mul     ah                                              ;row offset
  4892                                                          add     al,[wbConsoleColumn]                            ;add column
  4893                                                          adc     ah,0                                            ;add overflow
  4894                                                          mov     ecx,eax                                         ;screen offset
  4895                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4896                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4897                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4898                                                          out     dx,al                                           ;select register
  4899                                                          inc     edx                                             ;data port
  4900                                                          mov     al,ch                                           ;hi-order cursor loc
  4901                                                          out     dx,al                                           ;store hi-order loc
  4902                                                          dec     edx                                             ;register select port
  4903                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4904                                                          out     dx,al                                           ;select register
  4905                                                          inc     edx                                             ;data port
  4906                                                          mov     al,cl                                           ;lo-order cursor loc
  4907                                                          out     dx,al                                           ;store lo-order loc
  4908                                                          pop     ecx                                             ;restore non-volatile regs
  4909                                                          ret                                                     ;return
  4910                                  ;-----------------------------------------------------------------------------------------------------------------------
  4911                                  ;
  4912                                  ;       Routine:        PutPrimaryEndOfInt
  4913                                  ;
  4914                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4915                                  ;
  4916                                  ;-----------------------------------------------------------------------------------------------------------------------
  4917                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4918                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4919                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4920                                                          ret                                                     ;return
  4921                                  ;-----------------------------------------------------------------------------------------------------------------------
  4922                                  ;
  4923                                  ;       Routine:        PutSecondaryEndOfInt
  4924                                  ;
  4925                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4926                                  ;
  4927                                  ;-----------------------------------------------------------------------------------------------------------------------
  4928                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4929                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4930                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4931                                                          ret                                                     ;return
  4932                                  ;-----------------------------------------------------------------------------------------------------------------------
  4933                                  ;
  4934                                  ;       Routine:        ReadRealTimeClock
  4935                                  ;
  4936                                  ;       Description:    This routine gets current date time from the real-time clock.
  4937                                  ;
  4938                                  ;       In:             DS:EBX  DATETIME structure
  4939                                  ;
  4940                                  ;-----------------------------------------------------------------------------------------------------------------------
  4941                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4942                                                          push    edi                                             ;
  4943                                                          push    es                                              ;
  4944                                                          push    ds                                              ;store data selector ...
  4945                                                          pop     es                                              ;... in es register
  4946                                                          mov     edi,ebx                                         ;date-time structure
  4947                                                          mov     al,ERTCSECONDREG                                ;second register
  4948                                                          out     ERTCREGPORT,al                                  ;select second register
  4949                                                          in      al,ERTCDATAPORT                                 ;read second register
  4950                                                          cld                                                     ;forward strings
  4951                                                          stosb                                                   ;store second value
  4952                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4953                                                          out     ERTCREGPORT,al                                  ;select minute register
  4954                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4955                                                          stosb                                                   ;store minute value
  4956                                                          mov     al,ERTCHOURREG                                  ;hour register
  4957                                                          out     ERTCREGPORT,al                                  ;select hour register
  4958                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4959                                                          stosb                                                   ;store hour value
  4960                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4961                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4962                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4963                                                          stosb                                                   ;store weekday value
  4964                                                          mov     al,ERTCDAYREG                                   ;day register
  4965                                                          out     ERTCREGPORT,al                                  ;select day register
  4966                                                          in      al,ERTCDATAPORT                                 ;read day register
  4967                                                          stosb                                                   ;store day value
  4968                                                          mov     al,ERTCMONTHREG                                 ;month register
  4969                                                          out     ERTCREGPORT,al                                  ;select month register
  4970                                                          in      al,ERTCDATAPORT                                 ;read month register
  4971                                                          stosb                                                   ;store month value
  4972                                                          mov     al,ERTCYEARREG                                  ;year register
  4973                                                          out     ERTCREGPORT,al                                  ;select year register
  4974                                                          in      al,ERTCDATAPORT                                 ;read year register
  4975                                                          stosb                                                   ;store year value
  4976                                                          mov     al,ERTCCENTURYREG                               ;century register
  4977                                                          out     ERTCREGPORT,al                                  ;select century register
  4978                                                          in      al,ERTCDATAPORT                                 ;read century register
  4979                                                          stosb                                                   ;store century value
  4980                                                          mov     al,ERTCSTATUSREG                                ;status register
  4981                                                          out     ERTCREGPORT,al                                  ;select status register
  4982                                                          in      al,ERTCDATAPORT                                 ;read status register
  4983                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4984                                                          jnz     .20                                             ;skip ahead if binary values
  4985                                                          mov     esi,ebx                                         ;date-time structure address
  4986                                                          mov     edi,ebx                                         ;date-time structure address
  4987                                                          mov     ecx,8                                           ;loop counter
  4988                                  .10                     lodsb                                                   ;BCD value
  4989                                                          mov     ah,al                                           ;BCD value
  4990                                                          and     al,00001111b                                    ;low-order decimal zone
  4991                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4992                                                          shr     ah,1                                            ;hi-order decimal * 8
  4993                                                          add     al,ah                                           ;low-order + hi-order * 8
  4994                                                          shr     ah,2                                            ;hi-order decimal * 2
  4995                                                          add     al,ah                                           ;low-order + hi-order * 10
  4996                                                          stosb                                                   ;replace BCD with binary
  4997                                                          loop    .10                                             ;next value
  4998                                  .20                     pop     es                                              ;restore non-volatile regs
  4999                                                          pop     edi                                             ;
  5000                                                          pop     esi                                             ;
  5001                                                          ret                                                     ;return
  5002                                  ;-----------------------------------------------------------------------------------------------------------------------
  5003                                  ;
  5004                                  ;       Routine:        ResetSystem
  5005                                  ;
  5006                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5007                                  ;
  5008                                  ;       Out:            N/A     This routine does not return.
  5009                                  ;
  5010                                  ;-----------------------------------------------------------------------------------------------------------------------
  5011                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5012                                                          loop    $                                               ;clear interrupts
  5013                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5014                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5015                                  .10                     sti                                                     ;enable maskable interrupts
  5016                                                          hlt                                                     ;halt until interrupt
  5017                                                          jmp     .10                                             ;repeat until reset kicks in
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       Routine:        SetKeyboardLamps
  5021                                  ;
  5022                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5023                                  ;
  5024                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5025                                  ;
  5026                                  ;-----------------------------------------------------------------------------------------------------------------------
  5027                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5028                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5029                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5030                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5031                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5032                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5033                                                          mov     al,bh                                           ;set/reset lamps value
  5034                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5035                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5036                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5037                                                          ret                                                     ;return
  5038                                  ;-----------------------------------------------------------------------------------------------------------------------
  5039                                  ;
  5040                                  ;       Routine:        WaitForKeyInBuffer
  5041                                  ;
  5042                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5043                                  ;
  5044                                  ;       Out:            ZF      1 = Input buffer ready
  5045                                  ;                               0 = Input buffer not ready after timeout
  5046                                  ;
  5047                                  ;-----------------------------------------------------------------------------------------------------------------------
  5048                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5049                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5050                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5051                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5052                                                          loopnz  .10                                             ;yes, repeat till timeout
  5053                                                          pop     ecx                                             ;restore non-volatile regs
  5054                                                          ret                                                     ;return
  5055                                  ;-----------------------------------------------------------------------------------------------------------------------
  5056                                  ;
  5057                                  ;       Routine:        WaitForKeyOutBuffer
  5058                                  ;
  5059                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5060                                  ;
  5061                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5062                                  ;                               0 = Output buffer empty after timeout
  5063                                  ;
  5064                                  ;-----------------------------------------------------------------------------------------------------------------------
  5065                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5066                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5067                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5068                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5069                                                          loopz   .10                                             ;loop until output buffer bit
  5070                                                          pop     ecx                                             ;restore non-volatile regs
  5071                                                          ret                                                     ;return
  5072                                  ;-----------------------------------------------------------------------------------------------------------------------
  5073                                  ;
  5074                                  ;       End of the Kernel Function Library
  5075                                  ;
  5076                                  ;-----------------------------------------------------------------------------------------------------------------------
  5077                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5078                                  ;=======================================================================================================================
  5079                                  ;
  5080                                  ;       Console Task
  5081                                  ;
  5082                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5083                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5084                                  ;       screen and responds to user commands.
  5085                                  ;
  5086                                  ;=======================================================================================================================
  5087                                  ;-----------------------------------------------------------------------------------------------------------------------
  5088                                  ;
  5089                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5090                                  ;
  5091                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5092                                  ;
  5093                                  ;-----------------------------------------------------------------------------------------------------------------------
  5094                                  section                 constack                                                ;console task stack
  5095                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5096                                  ;-----------------------------------------------------------------------------------------------------------------------
  5097                                  ;
  5098                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5099                                  ;
  5100                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5101                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5102                                  ;       16 descriptors. Six are initially defined.
  5103                                  ;
  5104                                  ;-----------------------------------------------------------------------------------------------------------------------
  5105                                  section                 conldt                                                  ;console local descriptors
  5106                                                          dq      004093004780007Fh                               ;04 TSS alias
  5107                                                          dq      004093004700007Fh                               ;0c LDT alias
  5108                                                          dq      00409300400006FFh                               ;14 stack
  5109                                                          dq      00CF93000000FFFFh                               ;1c data
  5110                                                          dq      00409B0050000FFFh                               ;24 code
  5111                                                          dq      00409300480007FFh                               ;2c message queue
  5112                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5113                                  ;-----------------------------------------------------------------------------------------------------------------------
  5114                                  ;
  5115                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5116                                  ;
  5117                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5118                                  ;       segment. CS to console code.
  5119                                  ;
  5120                                  ;-----------------------------------------------------------------------------------------------------------------------
  5121                                  section                 contss                                                  ;console task state segment
  5122                                                          dd      0                                               ;00 back-link tss
  5123                                                          dd      0700h                                           ;04 esp ring 0
  5124                                                          dd      0014h                                           ;08 ss ring 0
  5125                                                          dd      0700h                                           ;0c esp ring 1
  5126                                                          dd      0014h                                           ;10 es ring 1
  5127                                                          dd      0700h                                           ;14 esp ring 2
  5128                                                          dd      0014h                                           ;18 ss ring 2
  5129                                                          dd      0                                               ;1c cr ring 3
  5130                                                          dd      0                                               ;20 eip
  5131                                                          dd      0200h                                           ;24 eflags
  5132                                                          dd      0                                               ;28 eax
  5133                                                          dd      0                                               ;2c ecx
  5134                                                          dd      0                                               ;30 edx
  5135                                                          dd      0                                               ;34 ebx
  5136                                                          dd      0700h                                           ;38 esp ring 3
  5137                                                          dd      0                                               ;3c ebp
  5138                                                          dd      0                                               ;40 esi
  5139                                                          dd      0                                               ;44 edi
  5140                                                          dd      001Ch                                           ;48 es
  5141                                                          dd      0024h                                           ;4c cs
  5142                                                          dd      0014h                                           ;50 ss ring 3
  5143                                                          dd      001Ch                                           ;54 ds
  5144                                                          dd      0                                               ;58 fs
  5145                                                          dd      0                                               ;5c gs
  5146                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5147                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5148                                  ;-----------------------------------------------------------------------------------------------------------------------
  5149                                  ;
  5150                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5151                                  ;
  5152                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5153                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5154                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5155                                  ;       event.
  5156                                  ;
  5157                                  ;-----------------------------------------------------------------------------------------------------------------------
  5158                                  section                 conmque                                                 ;console message queue
  5159                                                          dd      8                                               ;head pointer
  5160                                                          dd      8                                               ;tail pointer
  5161                                                          times   510 dd 0                                        ;queue elements
  5162                                  ;-----------------------------------------------------------------------------------------------------------------------
  5163                                  ;
  5164                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5165                                  ;
  5166                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5167                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5168                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5169                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5170                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5171                                  ;       board input, echoing to the console screen and responding to user commands.
  5172                                  ;
  5173                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5174                                  ;
  5175                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5176                                  ;                               |  Real Mode Interrupt Vectors                  |
  5177                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5178                                  ;                               |  Reserved BIOS Memory Area                    |
  5179                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5180                                  ;                               |  Shared Kernel Memory Area                    |
  5181                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5182                                  ;                               |  Global Descriptor Table (GDT)                |
  5183                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5184                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5185                                  ;                       002000  +-----------------------------------------------+
  5186                                  ;                               |  Interrupt Handlers                           |
  5187                                  ;                               |  Kernel Function Library                      |
  5188                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5189                                  ;                               |  Console Task Stack Area                      |
  5190                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5191                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5192                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5193                                  ;                               |  Console Task Task State Segment (TSS)        |
  5194                                  ;                       004800  +-----------------------------------------------+
  5195                                  ;                               |  Console Task Message Queue                   |
  5196                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5197                                  ;                               |  Console Task Code                            |
  5198                                  ;                               |  Console Task Constants                       |
  5199                                  ;                       006000  +===============================================+
  5200                                  ;
  5201                                  ;-----------------------------------------------------------------------------------------------------------------------
  5202                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5203                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5204                                  
  5205                                                          clearConsoleScreen                                      ;clear the console screen
  5206                                                          putConsoleString czTitle                                ;display startup message
  5207                                                          putConsoleString czROMMem                               ;ROM memory label
  5208                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5209                                                          putConsoleString czKB                                   ;Kilobytes
  5210                                                          putConsoleString czNewLine                              ;new line
  5211                                                          putConsoleString czBaseMem                              ;base memory label
  5212                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5213                                                          putConsoleString czKB                                   ;Kilobytes
  5214                                                          putConsoleString czNewLine                              ;new line
  5215                                                          putConsoleString czExtendedMem                          ;extended memory label
  5216                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5217                                                          putConsoleString czKB                                   ;Kilobytes
  5218                                                          putConsoleString czNewLine                              ;new line
  5219                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5220                                                          placeCursor                                             ;set CRT cursor location
  5221                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5222                                                          putConsoleString czNewLine                              ;newline
  5223                                  
  5224                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5225                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5226                                                          call    ConTakeToken                                    ;handle console input
  5227                                                          mov     edx,wzConsoleToken                              ;token buffer
  5228                                                          call    ConDetermineCommand                             ;determine command number
  5229                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5230                                                          jb      .20                                             ;yes, branch
  5231                                  
  5232                                                          putConsoleString czUnknownCommand                       ;display error message
  5233                                  
  5234                                                          jmp     .10                                             ;next command
  5235                                  .20                     shl     eax,2                                           ;index into jump table
  5236                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5237                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5238                                                          call    eax                                             ;call command handler
  5239                                                          jmp     .10                                             ;next command
  5240                                  ;-----------------------------------------------------------------------------------------------------------------------
  5241                                  ;
  5242                                  ;       Routine:        ConInitializeData
  5243                                  ;
  5244                                  ;       Description:    This routine initializes console task variables.
  5245                                  ;
  5246                                  ;-----------------------------------------------------------------------------------------------------------------------
  5247                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5248                                                          push    edi                                             ;
  5249                                                          push    es                                              ;
  5250                                  ;
  5251                                  ;       Initialize console work areas.
  5252                                  ;
  5253                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5254                                                          pop     es                                              ;... into extra segment register
  5255                                                          mov     edi,ECONDATA                                    ;OS console data address
  5256                                                          xor     al,al                                           ;initialization value
  5257                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5258                                                          cld                                                     ;forward strings
  5259                                                          rep     stosb                                           ;initialize data
  5260                                  ;
  5261                                  ;       Initialize heap size
  5262                                  ;
  5263                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5264                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5265                                  ;
  5266                                  ;       Initialize MEMROOT structure
  5267                                  ;
  5268                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5269                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5270                                                          xor     ecx,ecx                                         ;zero register
  5271                                                          mov     cl,4                                            ;count
  5272                                                          rep     stosd                                           ;store first/last contig and free addrs
  5273                                                          xor     eax,eax                                         ;zero register
  5274                                                          stosd                                                   ;zero first task block
  5275                                                          stosd                                                   ;zero last task block
  5276                                  ;
  5277                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5278                                  ;
  5279                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5280                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5281                                                          stosd                                                   ;store signature
  5282                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5283                                                          stosd                                                   ;store block size
  5284                                                          xor     ecx,ecx                                         ;zero register
  5285                                                          mov     cl,6                                            ;count
  5286                                                          xor     eax,eax                                         ;zero register
  5287                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5288                                  ;
  5289                                  ;       Read memory sizes from ROM
  5290                                  ;
  5291                                                          getROMMemSize                                           ;get ROM memory size
  5292                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5293                                                          mov     ecx,eax                                         ;integer param
  5294                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5295                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5296                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5297                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5298                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5299                                                          mov     ecx,eax                                         ;integer param
  5300                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5301                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5302                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5303                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5304                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5305                                                          mov     ecx,eax                                         ;integer param
  5306                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5307                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5308                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5309                                  ;
  5310                                  ;       Restore and return.
  5311                                  ;
  5312                                                          pop     es                                              ;restore non-volatile regs
  5313                                                          pop     edi                                             ;
  5314                                                          pop     ecx                                             ;
  5315                                                          ret                                                     ;return
  5316                                  ;-----------------------------------------------------------------------------------------------------------------------
  5317                                  ;
  5318                                  ;       Routine:        ConTakeToken
  5319                                  ;
  5320                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5321                                  ;
  5322                                  ;       In:             DS:EDX  source buffer address
  5323                                  ;                       DS:EBX  target buffer address
  5324                                  ;
  5325                                  ;       Out:            DS:EDX  source buffer address
  5326                                  ;                       DS:EBX  target buffer address
  5327                                  ;
  5328                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5329                                  ;
  5330                                  ;-----------------------------------------------------------------------------------------------------------------------
  5331                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5332                                                          push    edi                                             ;
  5333                                                          push    es                                              ;
  5334                                                          push    ds                                              ;load data segment selector ...
  5335                                                          pop     es                                              ;... into extra segment reg
  5336                                                          mov     esi,edx                                         ;source buffer address
  5337                                                          mov     edi,ebx                                         ;target buffer address
  5338                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5339                                                          cld                                                     ;forward strings
  5340                                  .10                     lodsb                                                   ;load byte
  5341                                                          cmp     al,EASCIISPACE                                  ;space?
  5342                                                          je      .10                                             ;yes, continue
  5343                                                          test    al,al                                           ;end of line?
  5344                                                          jz      .40                                             ;yes, branch
  5345                                  .20                     stosb                                                   ;store byte
  5346                                                          lodsb                                                   ;load byte
  5347                                                          test    al,al                                           ;end of line?
  5348                                                          jz      .40                                             ;no, continue
  5349                                                          cmp     al,EASCIISPACE                                  ;space?
  5350                                                          jne     .20                                             ;no, continue
  5351                                  .30                     lodsb                                                   ;load byte
  5352                                                          cmp     al,EASCIISPACE                                  ;space?
  5353                                                          je      .30                                             ;yes, continue
  5354                                                          dec     esi                                             ;pre-position
  5355                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5356                                                          mov     edi,edx                                         ;source buffer address
  5357                                  .50                     lodsb                                                   ;remaining byte
  5358                                                          stosb                                                   ;move to front of buffer
  5359                                                          test    al,al                                           ;end of line?
  5360                                                          jnz     .50                                             ;no, continue
  5361                                                          pop     es                                              ;restore non-volatile regs
  5362                                                          pop     edi                                             ;
  5363                                                          pop     esi                                             ;
  5364                                                          ret                                                     ;return
  5365                                  ;-----------------------------------------------------------------------------------------------------------------------
  5366                                  ;
  5367                                  ;       Routine:        ConDetermineCommand
  5368                                  ;
  5369                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5370                                  ;
  5371                                  ;       input:          DS:EDX  command address
  5372                                  ;
  5373                                  ;       output:         EAX     >=0     = command nbr
  5374                                  ;                               0       = unknown command
  5375                                  ;
  5376                                  ;-----------------------------------------------------------------------------------------------------------------------
  5377                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5378                                                          push    ecx                                             ;
  5379                                                          push    esi                                             ;
  5380                                                          push    edi                                             ;
  5381                                  
  5382                                                          upperCaseString                                         ;upper-case string at EDX
  5383                                  
  5384                                                          mov     esi,tConCmdTbl                                  ;commands table
  5385                                                          xor     edi,edi                                         ;intialize command number
  5386                                                          cld                                                     ;forward strings
  5387                                  .10                     lodsb                                                   ;command length
  5388                                                          movzx   ecx,al                                          ;command length
  5389                                                          jecxz   .20                                             ;branch if end of table
  5390                                                          mov     ebx,esi                                         ;table entry address
  5391                                                          add     esi,ecx                                         ;next table entry address
  5392                                  
  5393                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5394                                  
  5395                                                          jecxz   .20                                             ;branch if equal
  5396                                                          inc     edi                                             ;increment command nbr
  5397                                                          jmp     .10                                             ;repeat
  5398                                  .20                     mov     eax,edi                                         ;command number
  5399                                                          pop     edi                                             ;restore non-volatile regs
  5400                                                          pop     esi                                             ;
  5401                                                          pop     ecx                                             ;
  5402                                                          pop     ebx                                             ;
  5403                                                          ret                                                     ;return
  5404                                  ;-----------------------------------------------------------------------------------------------------------------------
  5405                                  ;
  5406                                  ;       Routine:        ConClear
  5407                                  ;
  5408                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5409                                  ;
  5410                                  ;-----------------------------------------------------------------------------------------------------------------------
  5411                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5412                                                          ret                                                     ;return
  5413                                  ;-----------------------------------------------------------------------------------------------------------------------
  5414                                  ;
  5415                                  ;       Routine:        ConDate
  5416                                  ;
  5417                                  ;       Description:    This routine handles the DATE command.
  5418                                  ;
  5419                                  ;-----------------------------------------------------------------------------------------------------------------------
  5420                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5421                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5422                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5423                                                          putConsoleString  czNewLine                             ;write newline to console
  5424                                                          ret                                                     ;return
  5425                                  ;-----------------------------------------------------------------------------------------------------------------------
  5426                                  ;
  5427                                  ;       Routine:        ConDay
  5428                                  ;
  5429                                  ;       Description:    This routine handles the DAY command.
  5430                                  ;
  5431                                  ;-----------------------------------------------------------------------------------------------------------------------
  5432                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5433                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5434                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5435                                                          putConsoleString  czNewLine                             ;write newline to console
  5436                                                          ret                                                     ;return
  5437                                  ;-----------------------------------------------------------------------------------------------------------------------
  5438                                  ;
  5439                                  ;       Routine:        ConExit
  5440                                  ;
  5441                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5442                                  ;
  5443                                  ;-----------------------------------------------------------------------------------------------------------------------
  5444                                  ConExit                 resetSystem                                             ;issue system reset
  5445                                                          ret                                                     ;return
  5446                                  ;-----------------------------------------------------------------------------------------------------------------------
  5447                                  ;
  5448                                  ;       Routine:        ConFree
  5449                                  ;
  5450                                  ;       Description:    This routine handles the FREE command.
  5451                                  ;
  5452                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5453                                  ;
  5454                                  ;-----------------------------------------------------------------------------------------------------------------------
  5455                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5456                                                          push    ecx                                             ;
  5457                                                          push    esi                                             ;
  5458                                                          push    edi                                             ;
  5459                                  ;
  5460                                  ;       Get address parameter
  5461                                  ;
  5462                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5463                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5464                                                          call    ConTakeToken                                    ;take first param as token
  5465                                  ;
  5466                                  ;       Convert input parameter from hexadecimal string to binary
  5467                                  ;
  5468                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5469                                                          je      .10                                             ;no, branch
  5470                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5471                                  
  5472                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5473                                  
  5474                                                          test    eax,eax                                         ;valid parameter?
  5475                                                          jz      .10                                             ;no, branch
  5476                                  ;
  5477                                  ;       Free memory block
  5478                                  ;
  5479                                                          freeMemory eax                                          ;free memory
  5480                                  
  5481                                                          cmp     eax,-1                                          ;memory freed?
  5482                                                          je      .10                                             ;no, branch
  5483                                  ;
  5484                                  ;       Indicate memory freed
  5485                                  ;
  5486                                                          putConsoleString czOK                                   ;indicate success
  5487                                  ;
  5488                                  ;       Restore and return
  5489                                  ;
  5490                                  .10                     pop     edi                                             ;restore non-volatile regs
  5491                                                          pop     esi                                             ;
  5492                                                          pop     ecx                                             ;
  5493                                                          pop     ebx                                             ;
  5494                                                          ret                                                     ;return
  5495                                  ;-----------------------------------------------------------------------------------------------------------------------
  5496                                  ;
  5497                                  ;       Routine:        ConHour
  5498                                  ;
  5499                                  ;       Description:    This routine Handles the HOUR command.
  5500                                  ;
  5501                                  ;-----------------------------------------------------------------------------------------------------------------------
  5502                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5503                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5504                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5505                                                          putConsoleString  czNewLine                             ;write newline to console
  5506                                                          ret                                                     ;return
  5507                                  ;-----------------------------------------------------------------------------------------------------------------------
  5508                                  ;
  5509                                  ;       Routine:        ConInt6
  5510                                  ;
  5511                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5512                                  ;
  5513                                  ;-----------------------------------------------------------------------------------------------------------------------
  5514                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5515                                                          ret                                                     ;return (not executed)
  5516                                  ;-----------------------------------------------------------------------------------------------------------------------
  5517                                  ;
  5518                                  ;       Routine:        ConMalloc
  5519                                  ;
  5520                                  ;       Description:    This routine handles the MALLOC command.
  5521                                  ;
  5522                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5523                                  ;
  5524                                  ;-----------------------------------------------------------------------------------------------------------------------
  5525                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5526                                                          push    ecx                                             ;
  5527                                                          push    esi                                             ;
  5528                                                          push    edi                                             ;
  5529                                  ;
  5530                                  ;       Get size parameter
  5531                                  ;
  5532                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5533                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5534                                                          call    ConTakeToken                                    ;take first param as token
  5535                                  ;
  5536                                  ;       Convert input parameter from decimal string to binary
  5537                                  ;
  5538                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5539                                                          je      .10                                             ;no, branch
  5540                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5541                                  
  5542                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5543                                  
  5544                                                          test    eax,eax                                         ;valid parameter?
  5545                                                          jz      .10                                             ;no, branch
  5546                                  ;
  5547                                  ;       Allocate memory block
  5548                                  ;
  5549                                                          allocateMemory eax                                      ;allocate memory
  5550                                  
  5551                                                          test    eax,eax                                         ;memory allocated?
  5552                                                          jz      .10                                             ;no, branch
  5553                                  ;
  5554                                  ;       Report allocated memory block address
  5555                                  ;
  5556                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5557                                                          mov     ecx,eax                                         ;memory address
  5558                                  
  5559                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5560                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5561                                                          putConsoleString czNewLine                              ;display new line
  5562                                  
  5563                                  .10                     pop     edi                                             ;restore non-volatile regs
  5564                                                          pop     esi                                             ;
  5565                                                          pop     ecx                                             ;
  5566                                                          pop     ebx                                             ;
  5567                                                          ret                                                     ;return
  5568                                  ;-----------------------------------------------------------------------------------------------------------------------
  5569                                  ;
  5570                                  ;       Routine:        ConMem
  5571                                  ;
  5572                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5573                                  ;
  5574                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5575                                  ;
  5576                                  ;-----------------------------------------------------------------------------------------------------------------------
  5577                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5578                                                          push    esi                                             ;
  5579                                                          push    edi                                             ;
  5580                                  ;
  5581                                  ;       Update the source address if a parameter is given.
  5582                                  ;
  5583                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5584                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5585                                                          call    ConTakeToken                                    ;take first param as token
  5586                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5587                                                          je      .10                                             ;no, branch
  5588                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5589                                  
  5590                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5591                                  
  5592                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5593                                  ;
  5594                                  ;       Setup source address and row count.
  5595                                  ;
  5596                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5597                                                          xor     ecx,ecx                                         ;zero register
  5598                                                          mov     cl,16                                           ;row count
  5599                                  ;
  5600                                  ;       Start the row with the source address in hexadecimal.
  5601                                  ;
  5602                                  .20                     push    ecx                                             ;save remaining rows
  5603                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5604                                                          mov     edx,edi                                         ;output buffer address
  5605                                                          mov     ecx,esi                                         ;console memory address
  5606                                  
  5607                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5608                                  
  5609                                                          add     edi,8                                           ;end of memory addr hexnum
  5610                                                          mov     al,' '                                          ;ascii space
  5611                                                          stosb                                                   ;store delimiter
  5612                                  ;
  5613                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5614                                  ;
  5615                                                          xor     ecx,ecx                                         ;zero register
  5616                                                          mov     cl,16                                           ;loop count
  5617                                  .30                     push    ecx                                             ;save loop count
  5618                                                          lodsb                                                   ;memory byte
  5619                                                          mov     ah,al                                           ;memory byte
  5620                                                          shr     al,4                                            ;high-order in bits 3-0
  5621                                                          or      al,30h                                          ;apply ascii numeric zone
  5622                                                          cmp     al,3ah                                          ;numeric range?
  5623                                                          jb      .40                                             ;yes, skip ahead
  5624                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5625                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5626                                                          mov     al,ah                                           ;low-order in bits 3-0
  5627                                                          and     al,0fh                                          ;mask out high-order bits
  5628                                                          or      al,30h                                          ;apply ascii numeric zone
  5629                                                          cmp     al,3ah                                          ;numeric range?
  5630                                                          jb      .50                                             ;yes, skip ahead
  5631                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5632                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5633                                                          mov     al,' '                                          ;ascii space
  5634                                                          stosb                                                   ;store ascii space delimiter
  5635                                                          pop     ecx                                             ;loop count
  5636                                                          loop    .30                                             ;next
  5637                                  ;
  5638                                  ;       Output printable ASCII character section for the row.
  5639                                  ;
  5640                                                          sub     esi,16                                          ;reset source pointer
  5641                                                          mov     cl,16                                           ;loop count
  5642                                  .60                     lodsb                                                   ;source byte
  5643                                                          cmp     al,32                                           ;printable? (low-range test)
  5644                                                          jb      .70                                             ;no, skip ahead
  5645                                                          cmp     al,128                                          ;printable? (high-range test)
  5646                                                          jb      .80                                             ;yes, skip ahead
  5647                                  .70                     mov     al,' '                                          ;display space instead of printable
  5648                                  .80                     stosb                                                   ;store printable ascii byte
  5649                                                          loop    .60                                             ;next source byte
  5650                                                          xor     al,al                                           ;nul-terminator
  5651                                                          stosb                                                   ;terminate output line
  5652                                  ;
  5653                                  ;       Display constructed output buffer and newline.
  5654                                  ;
  5655                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5656                                                          putConsoleString czNewLine                              ;display new line
  5657                                  ;
  5658                                  ;       Repeat until all lines displayed and preserve source address.
  5659                                  ;
  5660                                                          pop     ecx                                             ;remaining rows
  5661                                                          loop    .20                                             ;next row
  5662                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5663                                                          pop     edi                                             ;restore regs
  5664                                                          pop     esi                                             ;
  5665                                                          pop     ebx                                             ;
  5666                                                          ret                                                     ;return
  5667                                  ;-----------------------------------------------------------------------------------------------------------------------
  5668                                  ;
  5669                                  ;       Routine:        ConMinute
  5670                                  ;
  5671                                  ;       Description:    This routine Handles the MINUTE command.
  5672                                  ;
  5673                                  ;-----------------------------------------------------------------------------------------------------------------------
  5674                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5675                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5676                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5677                                                          putConsoleString  czNewLine                             ;write newline to console
  5678                                                          ret                                                     ;return
  5679                                  ;-----------------------------------------------------------------------------------------------------------------------
  5680                                  ;
  5681                                  ;       Routine:        ConMonth
  5682                                  ;
  5683                                  ;       Description:    This routine Handles the MONTH command.
  5684                                  ;
  5685                                  ;-----------------------------------------------------------------------------------------------------------------------
  5686                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5687                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5688                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5689                                                          putConsoleString  czNewLine                             ;write newline to console
  5690                                                          ret                                                     ;return
  5691                                  ;-----------------------------------------------------------------------------------------------------------------------
  5692                                  ;
  5693                                  ;       Routine:        ConMonthName
  5694                                  ;
  5695                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5696                                  ;
  5697                                  ;-----------------------------------------------------------------------------------------------------------------------
  5698                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5699                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5700                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5701                                                          putConsoleString   czNewLine                            ;write newline to console
  5702                                                          ret                                                     ;return
  5703                                  ;-----------------------------------------------------------------------------------------------------------------------
  5704                                  ;
  5705                                  ;       Routine:        ConPCIProbe
  5706                                  ;
  5707                                  ;       Description:    This routine handles the PCIProbe command.
  5708                                  ;
  5709                                  ;-----------------------------------------------------------------------------------------------------------------------
  5710                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5711                                  ;
  5712                                  ;       Setup addressability.
  5713                                  ;
  5714                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5715                                  ;
  5716                                  ;       Initialize variables.
  5717                                  ;
  5718                                                          xor     eax,eax                                         ;zero register
  5719                                                          mov     [ebx+PCI.configdata],eax                        ;initialize config-data
  5720                                                          mov     [ebx+PCI.selector],eax                          ;initialize selector
  5721                                                          mov     [ebx+PCI.bus],al                                ;initialize bus
  5722                                                          mov     [ebx+PCI.device],al                             ;initialize device
  5723                                                          mov     [ebx+PCI.function],al                           ;initialize function
  5724                                                          mov     [ebx+PCI.register],al                           ;initialize register
  5725                                                          mov     [ebx+PCI.bar0],eax                              ;initialize base address reg 0
  5726                                                          mov     [ebx+PCI.bar1],eax                              ;initialize base address reg 1
  5727                                                          mov     [ebx+PCI.bar2],eax                              ;initialize base address reg 2
  5728                                                          mov     [ebx+PCI.bar3],eax                              ;initialize base address reg 3
  5729                                                          mov     [ebx+PCI.bar4],eax                              ;initialize base address reg 4
  5730                                                          mov     [ebx+PCI.bar5],eax                              ;initialize base address reg 5
  5731                                  ;
  5732                                  ;       Construct PCI selector.
  5733                                  ;
  5734                                  .10                     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  5735                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  5736                                                          shl     dl,3                                            ;DL = dddd d000
  5737                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  5738                                                          and     al,007h                                         ;AL = 0000 0fff
  5739                                                          or      al,dl                                           ;AL = dddd dfff
  5740                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5741                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5742                                                          or      eax,80000000h                                   ;1000 0000 bbbb bbbb dddd dfff 0000 0000
  5743                                                          mov     [ebx+PCI.selector],eax                          ;save selector
  5744                                  ;
  5745                                  ;       Read PCI data register.
  5746                                  ;
  5747                                                          mov     dx,EPCIPORTCONFIGADDR                           ;PCI config address port
  5748                                                          out     dx,eax                                          ;select device
  5749                                                          mov     dx,EPCIPORTCONFIGDATA                           ;PCI config data port
  5750                                                          in      eax,dx                                          ;read register data
  5751                                                          mov     [ebx+PCI.configdata],eax                        ;save config data
  5752                                  ;
  5753                                  ;       Interpret PCI data value and display finding.
  5754                                  ;
  5755                                                          cmp     eax,0ffffffffh                                  ;not defined?
  5756                                                          je      .20                                             ;yes, branch
  5757                                                          mov     edx,wzConsoleToken                              ;output buffer
  5758                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5759                                  
  5760                                                          putConsoleString wzConsoleToken                         ;display bus as decimal
  5761                                  
  5762                                                          call    ConInterpretPCIData                             ;update flags based on data
  5763                                  
  5764                                                          putConsoleString czSpace
  5765                                                          putConsoleString [wdConsolePCIVendorStr]
  5766                                                          putConsoleString czSpace
  5767                                                          putConsoleString [wdConsolePCIChipStr]
  5768                                                          putConsoleString czNewLine                              ;display new line
  5769                                  ;
  5770                                  ;       Step to next function, device, bus.
  5771                                  ;
  5772                                  .20                     inc     byte [ebx+PCI.function]                         ;next function
  5773                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  5774                                                          jb      .10                                             ;no, continue
  5775                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  5776                                                          inc     byte [ebx+PCI.device]                           ;next device
  5777                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  5778                                                          jb      .10                                             ;no, continue
  5779                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  5780                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  5781                                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  5782                                                          jb      .10                                             ;no, continue
  5783                                  ;
  5784                                  ;       Restore and return.
  5785                                  ;
  5786                                                          pop     ebx                                             ;restore non-volatile regs
  5787                                                          ret                                                     ;return
  5788                                  ;-----------------------------------------------------------------------------------------------------------------------
  5789                                  ;
  5790                                  ;       Routine:        ConBuildPCIIdent
  5791                                  ;
  5792                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5793                                  ;                       Function code values.
  5794                                  ;
  5795                                  ;       In:             DS:EBX  PCI structure address
  5796                                  ;                       DS:EDX  output buffer address
  5797                                  ;
  5798                                  ;-----------------------------------------------------------------------------------------------------------------------
  5799                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5800                                                          mov     edi,edx                                         ;output buffer address
  5801                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  5802                                                          xor     ah,ah                                           ;zero high-order dividend
  5803                                                          mov     cl,100                                          ;divisor (10^2)
  5804                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  5805                                                          or      al,30h                                          ;apply ASCII zone
  5806                                                          cld                                                     ;forward strings
  5807                                                          stosb                                                   ;store 100's digit
  5808                                                          mov     al,ah                                           ;bus MOD 100
  5809                                                          xor     ah,ah                                           ;zero high-order dividend
  5810                                                          mov     cl,10                                           ;divisor (10^1)
  5811                                                          div     cl                                              ;AL=10's, AH=1's
  5812                                                          or      ax,3030h                                        ;apply ASCII zone
  5813                                                          stosw                                                   ;store 10's and 1's
  5814                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5815                                                          stosb                                                   ;store delimiter
  5816                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  5817                                                          xor     ah,ah                                           ;zero high order dividend
  5818                                                          mov     cl,10                                           ;divisor (10^1)
  5819                                                          div     cl                                              ;AL=10's, AH=1's
  5820                                                          or      ax,3030h                                        ;apply ASCII zone
  5821                                                          stosw                                                   ;store 10's and 1's
  5822                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5823                                                          stosb                                                   ;store delimiter
  5824                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  5825                                                          or      al,30h                                          ;apply ASCII zone
  5826                                                          stosb                                                   ;store 1's
  5827                                                          xor     al,al                                           ;null terminator
  5828                                                          stosb                                                   ;store terminator
  5829                                                          pop     edi                                             ;restore non-volatile regs
  5830                                                          ret                                                     ;return
  5831                                  ;-----------------------------------------------------------------------------------------------------------------------
  5832                                  ;
  5833                                  ;       Routine:        ConInterpretPCIData
  5834                                  ;
  5835                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  5836                                  ;
  5837                                  ;       In:             DS:EBX  PCI structure address
  5838                                  ;
  5839                                  ;-----------------------------------------------------------------------------------------------------------------------
  5840                                  ConInterpretPCIData     mov     eax,czApple
  5841                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  5842                                                          jne     .10                                             ;no, branch
  5843                                                          mov     edx,czUSBController
  5844                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  5845                                                          je      .40                                             ;yes, branch
  5846                                                          mov     edx,czOther                                     ;other
  5847                                                          jmp     .40                                             ;continue
  5848                                  .10                     mov     eax,czIntel                                     ;Intel
  5849                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  5850                                                          jne     .20                                             ;no, branch
  5851                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  5852                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  5853                                                          je      .40                                             ;yes, branch
  5854                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  5855                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  5856                                                          je      .40                                             ;yes, branch
  5857                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  5858                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  5859                                                          je      .40                                             ;yes, branch
  5860                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  5861                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  5862                                                          je      .40                                             ;yes, branch
  5863                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  5864                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  5865                                                          je      .40                                             ;yes, branch
  5866                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  5867                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  5868                                                          je      .40                                             ;yes, branch
  5869                                                          mov     edx,czOther                                     ;other
  5870                                                          jmp     .40                                             ;continue
  5871                                  .20                     mov     eax,czOracle                                    ;Oracle
  5872                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  5873                                                          jne     .30                                             ;no, branch
  5874                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  5875                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  5876                                                          je      .40                                             ;yes, branch
  5877                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  5878                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  5879                                                          je      .40                                             ;yes, branch
  5880                                                          mov     edx,czOther                                     ;other
  5881                                                          jmp     .40                                             ;continue
  5882                                  .30                     mov     eax,czOther                                     ;other
  5883                                                          mov     edx,czOther                                     ;other
  5884                                  .40                     mov     [wdConsolePCIVendorStr],eax                     ;save vendor string
  5885                                                          mov     [wdConsolePCIChipStr],edx                       ;save chip string
  5886                                                          ret                                                     ;return
  5887                                  ;-----------------------------------------------------------------------------------------------------------------------
  5888                                  ;
  5889                                  ;       Routine:        ConSecond
  5890                                  ;
  5891                                  ;       Description:    This routine Handles the SECOND command.
  5892                                  ;
  5893                                  ;-----------------------------------------------------------------------------------------------------------------------
  5894                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5895                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5896                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5897                                                          putConsoleString  czNewLine                             ;write newline to console
  5898                                                          ret                                                     ;return
  5899                                  ;-----------------------------------------------------------------------------------------------------------------------
  5900                                  ;
  5901                                  ;       Routine:        ConTime
  5902                                  ;
  5903                                  ;       Description:    This routine Handles the TIME command.
  5904                                  ;
  5905                                  ;-----------------------------------------------------------------------------------------------------------------------
  5906                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5907                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5908                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5909                                                          putConsoleString  czNewLine                             ;write newline to console
  5910                                                          ret                                                     ;return
  5911                                  ;-----------------------------------------------------------------------------------------------------------------------
  5912                                  ;
  5913                                  ;       Routine:        ConVersion
  5914                                  ;
  5915                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5916                                  ;
  5917                                  ;-----------------------------------------------------------------------------------------------------------------------
  5918                                  ConVersion              putConsoleString czTitle                                ;display version message
  5919                                                          ret                                                     ;return
  5920                                  ;-----------------------------------------------------------------------------------------------------------------------
  5921                                  ;
  5922                                  ;       Routine:        ConWeekday
  5923                                  ;
  5924                                  ;       Description:    This routine handles the WEEKDAY command.
  5925                                  ;
  5926                                  ;-----------------------------------------------------------------------------------------------------------------------
  5927                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5928                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5929                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5930                                                          putConsoleString  czNewLine                             ;write newline to console
  5931                                                          ret                                                     ;return
  5932                                  ;-----------------------------------------------------------------------------------------------------------------------
  5933                                  ;
  5934                                  ;       Routine:        ConWeekdayName
  5935                                  ;
  5936                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5937                                  ;
  5938                                  ;-----------------------------------------------------------------------------------------------------------------------
  5939                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5940                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5941                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5942                                                          putConsoleString     czNewLine                                  ;write newline to console
  5943                                                          ret                                                             ;return
  5944                                  ;-----------------------------------------------------------------------------------------------------------------------
  5945                                  ;
  5946                                  ;       Routine:        ConYear
  5947                                  ;
  5948                                  ;       Description:    This routine Handles the YEAR command.
  5949                                  ;
  5950                                  ;-----------------------------------------------------------------------------------------------------------------------
  5951                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5952                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5953                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5954                                                          putConsoleString  czNewLine                             ;write newline to console
  5955                                                          ret                                                     ;return
  5956                                  ;-----------------------------------------------------------------------------------------------------------------------
  5957                                  ;
  5958                                  ;       Routine:        ConYearIsLeap
  5959                                  ;
  5960                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5961                                  ;
  5962                                  ;-----------------------------------------------------------------------------------------------------------------------
  5963                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5964                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5965                                  
  5966                                                          jecxz   .10                                             ;branch if not leap
  5967                                  
  5968                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5969                                  
  5970                                                          jmp     .20                                             ;continue
  5971                                  
  5972                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5973                                  .20                     ret                                                     ;return
  5974                                  ;-----------------------------------------------------------------------------------------------------------------------
  5975                                  ;
  5976                                  ;       Tables
  5977                                  ;
  5978                                  ;-----------------------------------------------------------------------------------------------------------------------
  5979                                                                                                                  ;---------------------------------------
  5980                                                                                                                  ;  Command Jump Table
  5981                                                                                                                  ;---------------------------------------
  5982                                  tConJmpTbl              equ     $                                               ;command jump table
  5983                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5984                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5985                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5986                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  5987                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  5988                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  5989                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5990                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5991                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  5992                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  5993                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  5994                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  5995                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  5996                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  5997                                                          dd      ConDate         - ConCode                       ;date command routine offset
  5998                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  5999                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6000                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6001                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6002                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6003                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6004                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6005                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6006                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6007                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6008                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6009                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6010                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6011                                                                                                                  ;---------------------------------------
  6012                                                                                                                  ;  Command Name Table
  6013                                                                                                                  ;---------------------------------------
  6014                                  tConCmdTbl              equ     $                                               ;command name table
  6015                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6016                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6017                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6018                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6019                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6020                                                          db      8,"VERSION",0                                   ;version command
  6021                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6022                                                          db      7,"MALLOC",0                                    ;malloc command
  6023                                                          db      7,"MEMORY",0                                    ;memory command
  6024                                                          db      7,"MINUTE",0                                    ;minute command
  6025                                                          db      7,"SECOND",0                                    ;second command
  6026                                                          db      6,"CLEAR",0                                     ;clear command
  6027                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6028                                                          db      6,"MONTH",0                                     ;month command
  6029                                                          db      5,"DATE",0                                      ;date command
  6030                                                          db      5,"EXIT",0                                      ;exit command
  6031                                                          db      5,"FREE",0                                      ;free command
  6032                                                          db      5,"HOUR",0                                      ;hour command
  6033                                                          db      5,"INT6",0                                      ;int6 command
  6034                                                          db      5,"QUIT",0                                      ;quit command
  6035                                                          db      5,"TIME",0                                      ;time command
  6036                                                          db      5,"YEAR",0                                      ;year command
  6037                                                          db      4,"CLS",0                                       ;cls command
  6038                                                          db      4,"DAY",0                                       ;day command
  6039                                                          db      4,"MEM",0                                       ;mem command
  6040                                                          db      4,"VER",0                                       ;ver command
  6041                                                          db      0                                               ;end of table
  6042                                  ;-----------------------------------------------------------------------------------------------------------------------
  6043                                  ;
  6044                                  ;       Constants
  6045                                  ;
  6046                                  ;-----------------------------------------------------------------------------------------------------------------------
  6047                                  czApple                 db      "Apple",0                                       ;vendor name string
  6048                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6049                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6050                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6051                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6052                                  czKB                    db      "KB",0                                          ;Kilobytes
  6053                                  czNewLine               db      13,10,0                                         ;new line string
  6054                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6055                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6056                                  czOther                 db      "Other",0                                       ;default name string
  6057                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6058                                  czPeriod                db      ".",0                                           ;period delimiter
  6059                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6060                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6061                                  czPrompt                db      ":",0                                           ;prompt string
  6062                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6063                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6064                                  czSpace                 db      " ",0                                           ;space delimiter
  6065                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6066                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6067                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6068                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6069                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6070                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6071                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6072                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6073                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6074                                  %endif
  6075                                  %ifdef BUILDDISK
  6076                                  ;-----------------------------------------------------------------------------------------------------------------------
  6077                                  ;
  6078                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6079                                  ;
  6080                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6081                                  ;
  6082                                  ;-----------------------------------------------------------------------------------------------------------------------
  6083                                  section                 unused                                                  ;unused disk space
  6084                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6085                                  %endif
  6086                                  ;=======================================================================================================================
  6087                                  ;
  6088                                  ;       End of Program Code
  6089                                  ;
  6090                                  ;=======================================================================================================================
